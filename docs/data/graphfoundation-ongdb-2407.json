{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2407",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "82",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "263",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "283",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "301",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "336",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "348",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "348",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "359",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "359",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "79",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "366",
                    "column": "70",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "366",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "378",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "378",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "393",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "393",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "396",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "396",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "403",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "403",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "408",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "408",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "410",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "410",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "414",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "414",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "414",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "430",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "430",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "437",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "437",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "441",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "441",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "443",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "443",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "459",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "459",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "466",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "466",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "471",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "471",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "531",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "531",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "544",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "544",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "546",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "546",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "553",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "553",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "556",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "556",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "559",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "576",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "576",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "579",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "579",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "583",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "583",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "604",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "604",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "611",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "611",
                    "column": "132",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "614",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "614",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "616",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "616",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "619",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "619",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "628",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "628",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "633",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "633",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "636",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "636",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "646",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "647",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "650",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "650",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "658",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "658",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "660",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "660",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "661",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "661",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "662",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "662",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "667",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "667",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "671",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "671",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "677",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "677",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "684",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "684",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "686",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "686",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "687",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "687",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "695",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "695",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "698",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "698",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "705",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "705",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "707",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "707",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "708",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "708",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2407/ShortestPath.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2407/ShortestPath.java\nindex 7da73d386b5..b86475bc9f4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2407/ShortestPath.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2407/ShortestPath.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphalgo.impl.path;\n \n import org.apache.commons.lang3.mutable.MutableBoolean;\n@@ -61,675 +62,671 @@ import org.neo4j.kernel.monitoring.Monitors;\n  * between each traversal. It does so to minimize the traversal overhead\n  * if one side has a very large amount of relationships, but the other one\n  * very few. It performs well however the graph is proportioned.\n- *\n+ * <p>\n  * Relationships are traversed in the specified directions from the start node,\n  * but in the reverse direction ( {@link Direction#reverse()} ) from the\n  * end node. This doesn't affect {@link Direction#BOTH}.\n  */\n public class ShortestPath implements PathFinder<Path>\n {\n-    public final int NULL = -1;\n-    private final int maxDepth;\n-    private final int maxResultCount;\n-    private final PathExpander expander;\n-    private Metadata lastMetadata;\n-    private ShortestPathPredicate predicate;\n-    private DataMonitor dataMonitor;\n-\n-    public interface ShortestPathPredicate\n+  public final int NULL = -1;\n+  private final int maxDepth;\n+  private final int maxResultCount;\n+  private final PathExpander expander;\n+  private Metadata lastMetadata;\n+  private ShortestPathPredicate predicate;\n+  private DataMonitor dataMonitor;\n+\n+  public interface ShortestPathPredicate\n+  {\n+    boolean test(Path path);\n+  }\n+\n+  /**\n+   * Constructs a new shortest path algorithm.\n+   *\n+   * @param maxDepth the maximum depth for the traversal. Returned paths\n+   *                 will never have a greater {@link Path#length()} than {@code maxDepth}.\n+   * @param expander the {@link PathExpander} to use for deciding\n+   *                 which relationships to expand for each {@link Node}.\n+   */\n+  public ShortestPath(int maxDepth, PathExpander expander)\n+  {\n+    this(maxDepth, expander, Integer.MAX_VALUE);\n+  }\n+\n+  public ShortestPath(int maxDepth, PathExpander expander, ShortestPathPredicate predicate)\n+  {\n+    this(maxDepth, expander);\n+    this.predicate = predicate;\n+  }\n+\n+  /**\n+   * Constructs a new shortest path algorithm.\n+   *\n+   * @param maxDepth       the maximum depth for the traversal. Returned paths\n+   *                       will never have a greater {@link Path#length()} than {@code maxDepth}.\n+   * @param expander       the {@link PathExpander} to use for deciding\n+   *                       which relationships to expand for each {@link Node}.\n+   * @param maxResultCount the maximum number of hits to return. If this number\n+   *                       of hits are encountered the traversal will stop.\n+   */\n+  public ShortestPath(int maxDepth, PathExpander expander, int maxResultCount)\n+  {\n+    this.maxDepth = maxDepth;\n+    this.expander = expander;\n+    this.maxResultCount = maxResultCount;\n+  }\n+\n+  @Override\n+  public Iterable<Path> findAllPaths(Node start, Node end)\n+  {\n+    return internalPaths(start, end, false);\n+  }\n+\n+  @Override\n+  public Path findSinglePath(Node start, Node end)\n+  {\n+    Iterator<Path> paths = internalPaths(start, end, true).iterator();\n+    return paths.hasNext() ? paths.next() : null;\n+  }\n+\n+  private void resolveMonitor(Node node)\n+  {\n+    if (dataMonitor == null)\n     {\n-        boolean test( Path path );\n+      GraphDatabaseService service = node.getGraphDatabase();\n+      if (service instanceof GraphDatabaseFacade)\n+      {\n+        Monitors monitors = ((GraphDatabaseFacade) service).getDependencyResolver().resolveDependency(Monitors.class);\n+        dataMonitor = monitors.newMonitor(DataMonitor.class);\n+      }\n     }\n+  }\n \n-    /**\n-     * Constructs a new shortest path algorithm.\n-     * @param maxDepth the maximum depth for the traversal. Returned paths\n-     * will never have a greater {@link Path#length()} than {@code maxDepth}.\n-     * @param expander the {@link PathExpander} to use for deciding\n-     * which relationships to expand for each {@link Node}.\n-     */\n-    public ShortestPath( int maxDepth, PathExpander expander )\n+  private Iterable<Path> internalPaths(Node start, Node end, boolean stopAsap)\n+  {\n+    lastMetadata = new Metadata();\n+    if (start.equals(end))\n     {\n-        this( maxDepth, expander, Integer.MAX_VALUE );\n+      return filterPaths(Collections.singletonList(PathImpl.singular(start)));\n     }\n-\n-    public ShortestPath( int maxDepth, PathExpander expander, ShortestPathPredicate predicate )\n+    Hits hits = new Hits();\n+    Collection<Long> sharedVisitedRels = new HashSet<>();\n+    MutableInt sharedFrozenDepth = new MutableInt(NULL); // ShortestPathLengthSoFar\n+    MutableBoolean sharedStop = new MutableBoolean();\n+    MutableInt sharedCurrentDepth = new MutableInt(0);\n+    try (DirectionData startData = new DirectionData(start, sharedVisitedRels,\n+        sharedFrozenDepth, sharedStop, sharedCurrentDepth, expander);\n+         DirectionData endData = new DirectionData(end, sharedVisitedRels, sharedFrozenDepth,\n+             sharedStop, sharedCurrentDepth, expander.reverse()))\n     {\n-        this( maxDepth, expander );\n-        this.predicate = predicate;\n+      while (startData.hasNext() || endData.hasNext())\n+      {\n+        goOneStep(startData, endData, hits, startData, stopAsap);\n+        goOneStep(endData, startData, hits, startData, stopAsap);\n+      }\n+      Collection<Hit> least = hits.least();\n+      return least != null ? filterPaths(hitsToPaths(least, start, end, stopAsap, maxResultCount)) : Collections.emptyList();\n     }\n-\n-    /**\n-     * Constructs a new shortest path algorithm.\n-     * @param maxDepth the maximum depth for the traversal. Returned paths\n-     * will never have a greater {@link Path#length()} than {@code maxDepth}.\n-     * @param expander the {@link PathExpander} to use for deciding\n-     * which relationships to expand for each {@link Node}.\n-     * @param maxResultCount the maximum number of hits to return. If this number\n-     * of hits are encountered the traversal will stop.\n-     */\n-    public ShortestPath( int maxDepth, PathExpander expander, int maxResultCount )\n+  }\n+\n+  @Override\n+  public TraversalMetadata metadata()\n+  {\n+    return lastMetadata;\n+  }\n+\n+  // Few long-lived instances\n+  private static class Hit\n+  {\n+    private final DirectionData start;\n+    private final DirectionData end;\n+    private final Node connectingNode;\n+\n+    Hit(DirectionData start, DirectionData end, Node connectingNode)\n     {\n-        this.maxDepth = maxDepth;\n-        this.expander = expander;\n-        this.maxResultCount = maxResultCount;\n+      this.start = start;\n+      this.end = end;\n+      this.connectingNode = connectingNode;\n     }\n \n     @Override\n-    public Iterable<Path> findAllPaths( Node start, Node end )\n+    public int hashCode()\n     {\n-        return internalPaths( start, end, false );\n+      return connectingNode.hashCode();\n     }\n \n     @Override\n-    public Path findSinglePath( Node start, Node end )\n+    public boolean equals(Object obj)\n     {\n-        Iterator<Path> paths = internalPaths( start, end, true ).iterator();\n-        return paths.hasNext() ? paths.next() : null;\n+      if (this == obj)\n+      {\n+        return true;\n+      }\n+      if (obj == null || getClass() != obj.getClass())\n+      {\n+        return false;\n+      }\n+      Hit o = (Hit) obj;\n+      return connectingNode.equals(o.connectingNode);\n     }\n+  }\n \n-    private void resolveMonitor( Node node )\n+  private void goOneStep(DirectionData directionData, DirectionData otherSide, Hits hits, DirectionData startSide,\n+                         boolean stopAsap)\n+  {\n+    if (!directionData.hasNext())\n     {\n-        if ( dataMonitor == null )\n-        {\n-            GraphDatabaseService service = node.getGraphDatabase();\n-            if ( service instanceof GraphDatabaseFacade )\n-            {\n-                Monitors monitors = ((GraphDatabaseFacade) service).getDependencyResolver().resolveDependency( Monitors.class );\n-                dataMonitor = monitors.newMonitor( DataMonitor.class );\n-            }\n-        }\n+      // We can not go any deeper from this direction. Possibly disconnected nodes.\n+      otherSide.finishCurrentLayerThenStop = true;\n+      return;\n     }\n-\n-    private Iterable<Path> internalPaths( Node start, Node end, boolean stopAsap )\n+    Node nextNode = directionData.next();\n+    LevelData otherSideHit = otherSide.visitedNodes.get(nextNode);\n+    if (otherSideHit != null)\n     {\n-        lastMetadata = new Metadata();\n-        if ( start.equals( end ) )\n-        {\n-            return filterPaths(Collections.singletonList( PathImpl.singular( start ) ));\n-        }\n-        Hits hits = new Hits();\n-        Collection<Long> sharedVisitedRels = new HashSet<>();\n-        MutableInt sharedFrozenDepth = new MutableInt( NULL ); // ShortestPathLengthSoFar\n-        MutableBoolean sharedStop = new MutableBoolean();\n-        MutableInt sharedCurrentDepth = new MutableInt( 0 );\n-        try ( DirectionData startData = new DirectionData( start, sharedVisitedRels,\n-                sharedFrozenDepth, sharedStop, sharedCurrentDepth, expander );\n-              DirectionData endData = new DirectionData( end, sharedVisitedRels, sharedFrozenDepth,\n-                      sharedStop, sharedCurrentDepth, expander.reverse() ) )\n-        {\n-            while ( startData.hasNext() || endData.hasNext() )\n+      // This is a hit\n+      int depth = directionData.currentDepth + otherSideHit.depth;\n+\n+      if (directionData.sharedFrozenDepth.intValue() == NULL)\n+      {\n+        directionData.sharedFrozenDepth.setValue(depth);\n+      }\n+      if (depth <= directionData.sharedFrozenDepth.intValue())\n+      {\n+        directionData.haveFoundSomething = true;\n+        if (depth < directionData.sharedFrozenDepth.intValue())\n+        {\n+          directionData.sharedFrozenDepth.setValue(depth);\n+          // TODO Is it really ok to just stop the other side here?\n+          // I'm basing that decision on that it was the other side\n+          // which found the deeper paths (correct assumption?)\n+          otherSide.stop = true;\n+        }\n+        // Add it to the list of hits\n+        DirectionData startSideData = directionData == startSide ? directionData : otherSide;\n+        DirectionData endSideData = directionData == startSide ? otherSide : directionData;\n+        Hit hit = new Hit(startSideData, endSideData, nextNode);\n+        Node start = startSide.startNode;\n+        Node end = (startSide == directionData) ? otherSide.startNode : directionData.startNode;\n+        monitorData(startSide, (otherSide == startSide) ? directionData : otherSide, nextNode);\n+        // NOTE: Applying the filter-condition could give the wrong results with allShortestPaths,\n+        // so only use it for singleShortestPath\n+        if (!stopAsap || filterPaths(hitToPaths(hit, start, end, stopAsap)).size() > 0)\n+        {\n+          if (hits.add(hit, depth) >= maxResultCount)\n+          {\n+            directionData.stop = true;\n+            otherSide.stop = true;\n+            lastMetadata.paths++;\n+          } else if (stopAsap)\n+          {   // This side found a hit, but wait for the other side to complete its current depth\n+            // to see if it finds a shorter path. (i.e. stop this side and freeze the depth).\n+            // but only if the other side has not stopped, otherwise we might miss shorter paths\n+            if (otherSide.stop)\n             {\n-                goOneStep( startData, endData, hits, startData, stopAsap );\n-                goOneStep( endData, startData, hits, startData, stopAsap );\n+              return;\n             }\n-            Collection<Hit> least = hits.least();\n-            return least != null ? filterPaths( hitsToPaths( least, start, end, stopAsap, maxResultCount ) ) : Collections.emptyList();\n+            directionData.stop = true;\n+          }\n+        } else\n+        {\n+          directionData.haveFoundSomething = false;\n+          directionData.sharedFrozenDepth.setValue(NULL);\n+          otherSide.stop = false;\n         }\n+      }\n     }\n+  }\n \n-    @Override\n-    public TraversalMetadata metadata()\n+  private void monitorData(DirectionData directionData, DirectionData otherSide, Node connectingNode)\n+  {\n+    resolveMonitor(directionData.startNode);\n+    if (dataMonitor != null)\n     {\n-        return lastMetadata;\n+      dataMonitor.monitorData(directionData.visitedNodes, directionData.nextNodes, otherSide.visitedNodes,\n+          otherSide.nextNodes, connectingNode);\n     }\n+  }\n \n-    // Few long-lived instances\n-    private static class Hit\n+  private Collection<Path> filterPaths(Collection<Path> paths)\n+  {\n+    if (predicate == null)\n     {\n-        private final DirectionData start;\n-        private final DirectionData end;\n-        private final Node connectingNode;\n-\n-        Hit( DirectionData start, DirectionData end, Node connectingNode )\n-        {\n-            this.start = start;\n-            this.end = end;\n-            this.connectingNode = connectingNode;\n-        }\n-\n-        @Override\n-        public int hashCode()\n-        {\n-            return connectingNode.hashCode();\n-        }\n-\n-        @Override\n-        public boolean equals( Object obj )\n+      return paths;\n+    } else\n+    {\n+      Collection<Path> filteredPaths = new ArrayList<>();\n+      for (Path path : paths)\n+      {\n+        if (predicate.test(path))\n         {\n-            if ( this == obj )\n-            {\n-                return true;\n-            }\n-            if ( obj == null || getClass() != obj.getClass() )\n-            {\n-                return false;\n-            }\n-            Hit o = (Hit) obj;\n-            return connectingNode.equals( o.connectingNode );\n+          filteredPaths.add(path);\n         }\n+      }\n+      return filteredPaths;\n     }\n+  }\n+\n+  public interface DataMonitor\n+  {\n+    void monitorData(Map<Node, LevelData> theseVisitedNodes, Collection<Node> theseNextNodes,\n+                     Map<Node, LevelData> thoseVisitedNodes, Collection<Node> thoseNextNodes, Node connectingNode);\n+  }\n+\n+  // Two long-lived instances\n+  private class DirectionData extends PrefetchingResourceIterator<Node>\n+  {\n+    private boolean finishCurrentLayerThenStop;\n+    private final Node startNode;\n+    private int currentDepth;\n+    private ResourceIterator<Relationship> nextRelationships;\n+    private final Collection<Node> nextNodes = new ArrayList<>();\n+    private final Map<Node, LevelData> visitedNodes = new HashMap<>();\n+    private final Collection<Long> sharedVisitedRels;\n+    private final DirectionDataPath lastPath;\n+    private final MutableInt sharedFrozenDepth;\n+    private final MutableBoolean sharedStop;\n+    private final MutableInt sharedCurrentDepth;\n+    private boolean haveFoundSomething;\n+    private boolean stop;\n+    private final PathExpander expander;\n \n-    private void goOneStep( DirectionData directionData, DirectionData otherSide, Hits hits, DirectionData startSide,\n-            boolean stopAsap )\n+    DirectionData(Node startNode, Collection<Long> sharedVisitedRels, MutableInt sharedFrozenDepth,\n+                  MutableBoolean sharedStop, MutableInt sharedCurrentDepth, PathExpander expander)\n     {\n-        if ( !directionData.hasNext() )\n-        {\n-            // We can not go any deeper from this direction. Possibly disconnected nodes.\n-            otherSide.finishCurrentLayerThenStop = true;\n-            return;\n-        }\n-        Node nextNode = directionData.next();\n-        LevelData otherSideHit = otherSide.visitedNodes.get( nextNode );\n-        if ( otherSideHit != null )\n-        {\n-            // This is a hit\n-            int depth = directionData.currentDepth + otherSideHit.depth;\n-\n-            if ( directionData.sharedFrozenDepth.intValue() == NULL )\n-            {\n-                directionData.sharedFrozenDepth.setValue( depth );\n-            }\n-            if ( depth <= directionData.sharedFrozenDepth.intValue() )\n-            {\n-                directionData.haveFoundSomething = true;\n-                if ( depth < directionData.sharedFrozenDepth.intValue() )\n-                {\n-                    directionData.sharedFrozenDepth.setValue( depth );\n-                    // TODO Is it really ok to just stop the other side here?\n-                    // I'm basing that decision on that it was the other side\n-                    // which found the deeper paths (correct assumption?)\n-                    otherSide.stop = true;\n-                }\n-                // Add it to the list of hits\n-                DirectionData startSideData = directionData == startSide ? directionData : otherSide;\n-                DirectionData endSideData = directionData == startSide ? otherSide : directionData;\n-                Hit hit = new Hit( startSideData, endSideData, nextNode );\n-                Node start = startSide.startNode;\n-                Node end = (startSide == directionData) ? otherSide.startNode : directionData.startNode;\n-                monitorData( startSide, (otherSide == startSide) ? directionData : otherSide, nextNode );\n-                // NOTE: Applying the filter-condition could give the wrong results with allShortestPaths,\n-                // so only use it for singleShortestPath\n-                if ( !stopAsap || filterPaths( hitToPaths( hit, start, end, stopAsap ) ).size() > 0 )\n-                {\n-                    if ( hits.add( hit, depth ) >= maxResultCount )\n-                    {\n-                        directionData.stop = true;\n-                        otherSide.stop = true;\n-                        lastMetadata.paths++;\n-                    }\n-                    else if ( stopAsap )\n-                    {   // This side found a hit, but wait for the other side to complete its current depth\n-                        // to see if it finds a shorter path. (i.e. stop this side and freeze the depth).\n-                        // but only if the other side has not stopped, otherwise we might miss shorter paths\n-                        if ( otherSide.stop )\n-                        {\n-                            return;\n-                        }\n-                        directionData.stop = true;\n-                    }\n-                }\n-                else\n-                {\n-                    directionData.haveFoundSomething = false;\n-                    directionData.sharedFrozenDepth.setValue( NULL );\n-                    otherSide.stop = false;\n-                }\n-            }\n-        }\n+      this.startNode = startNode;\n+      this.visitedNodes.put(startNode, new LevelData(null, 0));\n+      this.nextNodes.add(startNode);\n+      this.sharedFrozenDepth = sharedFrozenDepth;\n+      this.sharedStop = sharedStop;\n+      this.sharedCurrentDepth = sharedCurrentDepth;\n+      this.expander = expander;\n+      this.sharedVisitedRels = sharedVisitedRels;\n+      this.lastPath = new DirectionDataPath(startNode);\n+      if (sharedCurrentDepth.intValue() < maxDepth)\n+      {\n+        prepareNextLevel();\n+      } else\n+      {\n+        this.nextRelationships = Iterators.emptyResourceIterator();\n+      }\n     }\n \n-    private void monitorData( DirectionData directionData, DirectionData otherSide, Node connectingNode )\n+    private void prepareNextLevel()\n     {\n-        resolveMonitor( directionData.startNode );\n-        if ( dataMonitor != null )\n+      Collection<Node> nodesToIterate = new ArrayList<>(this.nextNodes);\n+      this.nextNodes.clear();\n+      this.lastPath.setLength(currentDepth);\n+      closeRelationshipsIterator();\n+      this.nextRelationships = new NestingResourceIterator<Relationship, Node>(nodesToIterate.iterator())\n+      {\n+        @Override\n+        protected ResourceIterator<Relationship> createNestedIterator(Node node)\n         {\n-            dataMonitor.monitorData( directionData.visitedNodes, directionData.nextNodes, otherSide.visitedNodes,\n-                    otherSide.nextNodes, connectingNode );\n+          lastPath.setEndNode(node);\n+          return Iterators.asResourceIterator(expander.expand(lastPath, BranchState.NO_STATE).iterator());\n         }\n+      };\n+      this.currentDepth++;\n+      this.sharedCurrentDepth.increment();\n     }\n \n-    private Collection<Path> filterPaths( Collection<Path> paths )\n+    private void closeRelationshipsIterator()\n     {\n-        if ( predicate == null )\n-        {\n-            return paths;\n-        }\n-        else\n-        {\n-            Collection<Path> filteredPaths = new ArrayList<>();\n-            for ( Path path : paths )\n-            {\n-                if ( predicate.test( path ) )\n-                {\n-                    filteredPaths.add( path );\n-                }\n-            }\n-            return filteredPaths;\n-        }\n+      if (this.nextRelationships != null)\n+      {\n+        this.nextRelationships.close();\n+      }\n     }\n \n-    public interface DataMonitor\n+    @Override\n+    public void close()\n     {\n-        void monitorData( Map<Node,LevelData> theseVisitedNodes, Collection<Node> theseNextNodes,\n-                Map<Node,LevelData> thoseVisitedNodes, Collection<Node> thoseNextNodes, Node connectingNode );\n+      closeRelationshipsIterator();\n     }\n \n-    // Two long-lived instances\n-    private class DirectionData extends PrefetchingResourceIterator<Node>\n+    @Override\n+    protected Node fetchNextOrNull()\n     {\n-        private boolean finishCurrentLayerThenStop;\n-        private final Node startNode;\n-        private int currentDepth;\n-        private ResourceIterator<Relationship> nextRelationships;\n-        private final Collection<Node> nextNodes = new ArrayList<>();\n-        private final Map<Node,LevelData> visitedNodes = new HashMap<>();\n-        private final Collection<Long> sharedVisitedRels;\n-        private final DirectionDataPath lastPath;\n-        private final MutableInt sharedFrozenDepth;\n-        private final MutableBoolean sharedStop;\n-        private final MutableInt sharedCurrentDepth;\n-        private boolean haveFoundSomething;\n-        private boolean stop;\n-        private final PathExpander expander;\n-\n-        DirectionData( Node startNode, Collection<Long> sharedVisitedRels, MutableInt sharedFrozenDepth,\n-                MutableBoolean sharedStop, MutableInt sharedCurrentDepth, PathExpander expander )\n+      while (true)\n+      {\n+        Relationship nextRel = fetchNextRelOrNull();\n+        if (nextRel == null)\n         {\n-            this.startNode = startNode;\n-            this.visitedNodes.put( startNode, new LevelData( null, 0 ) );\n-            this.nextNodes.add( startNode );\n-            this.sharedFrozenDepth = sharedFrozenDepth;\n-            this.sharedStop = sharedStop;\n-            this.sharedCurrentDepth = sharedCurrentDepth;\n-            this.expander = expander;\n-            this.sharedVisitedRels = sharedVisitedRels;\n-            this.lastPath = new DirectionDataPath( startNode );\n-            if ( sharedCurrentDepth.intValue() < maxDepth )\n-            {\n-                prepareNextLevel();\n-            }\n-            else\n-            {\n-                this.nextRelationships = Iterators.emptyResourceIterator();\n-            }\n+          return null;\n         }\n \n-        private void prepareNextLevel()\n-        {\n-            Collection<Node> nodesToIterate = new ArrayList<>( this.nextNodes );\n-            this.nextNodes.clear();\n-            this.lastPath.setLength( currentDepth );\n-            closeRelationshipsIterator();\n-            this.nextRelationships = new NestingResourceIterator<Relationship,Node>( nodesToIterate.iterator() )\n-            {\n-                @Override\n-                protected ResourceIterator<Relationship> createNestedIterator( Node node )\n-                {\n-                    lastPath.setEndNode( node );\n-                    return Iterators.asResourceIterator( expander.expand( lastPath, BranchState.NO_STATE ).iterator() );\n-                }\n-            };\n-            this.currentDepth++;\n-            this.sharedCurrentDepth.increment();\n-        }\n-\n-        private void closeRelationshipsIterator()\n-        {\n-            if ( this.nextRelationships != null )\n-            {\n-                this.nextRelationships.close();\n-            }\n-        }\n+        Node result = nextRel.getOtherNode(this.lastPath.endNode());\n \n-        @Override\n-        public void close()\n+        if (filterNextLevelNodes(result) != null)\n         {\n-            closeRelationshipsIterator();\n-        }\n+          lastMetadata.rels++;\n \n-        @Override\n-        protected Node fetchNextOrNull()\n-        {\n-            while ( true )\n-            {\n-                Relationship nextRel = fetchNextRelOrNull();\n-                if ( nextRel == null )\n-                {\n-                    return null;\n-                }\n-\n-                Node result = nextRel.getOtherNode( this.lastPath.endNode() );\n-\n-                if ( filterNextLevelNodes( result ) != null )\n-                {\n-                    lastMetadata.rels++;\n-\n-                    LevelData levelData = this.visitedNodes.get( result );\n-                    if ( levelData == null )\n-                    {\n-                        levelData = new LevelData( nextRel, this.currentDepth );\n-                        this.visitedNodes.put( result, levelData );\n-                        this.nextNodes.add( result );\n-                        return result;\n-                    }\n-                    else if ( this.currentDepth == levelData.depth )\n-                    {\n-                        levelData.addRel( nextRel );\n-                    }\n-                }\n-            }\n-        }\n-\n-        private boolean canGoDeeper()\n-        {\n-            return (this.sharedFrozenDepth.intValue() == NULL) && (this.sharedCurrentDepth.intValue() < maxDepth) &&\n-                   !finishCurrentLayerThenStop;\n+          LevelData levelData = this.visitedNodes.get(result);\n+          if (levelData == null)\n+          {\n+            levelData = new LevelData(nextRel, this.currentDepth);\n+            this.visitedNodes.put(result, levelData);\n+            this.nextNodes.add(result);\n+            return result;\n+          } else if (this.currentDepth == levelData.depth)\n+          {\n+            levelData.addRel(nextRel);\n+          }\n         }\n+      }\n+    }\n \n-        private Relationship fetchNextRelOrNull()\n-        {\n-            if ( this.stop || this.sharedStop.booleanValue() )\n-            {\n-                return null;\n-            }\n-            boolean hasComeTooFarEmptyHanded = (this.sharedFrozenDepth.intValue() != NULL) &&\n-                                               (this.sharedCurrentDepth.intValue() > this.sharedFrozenDepth.intValue()) &&\n-                                               !this.haveFoundSomething;\n-            if ( hasComeTooFarEmptyHanded )\n-            {\n-                return null;\n-            }\n-            if ( !this.nextRelationships.hasNext() )\n-            {\n-                if ( canGoDeeper() )\n-                {\n-                    prepareNextLevel();\n-                }\n-            }\n-            return this.nextRelationships.hasNext() ? this.nextRelationships.next() : null;\n-        }\n+    private boolean canGoDeeper()\n+    {\n+      return (this.sharedFrozenDepth.intValue() == NULL) && (this.sharedCurrentDepth.intValue() < maxDepth) &&\n+          !finishCurrentLayerThenStop;\n     }\n \n-    // Two long-lived instances\n-    private static class DirectionDataPath implements Path\n+    private Relationship fetchNextRelOrNull()\n     {\n-        private final Node startNode;\n-        private Node endNode;\n-        private int length;\n+      if (this.stop || this.sharedStop.booleanValue())\n+      {\n+        return null;\n+      }\n+      boolean hasComeTooFarEmptyHanded = (this.sharedFrozenDepth.intValue() != NULL) &&\n+          (this.sharedCurrentDepth.intValue() > this.sharedFrozenDepth.intValue()) &&\n+          !this.haveFoundSomething;\n+      if (hasComeTooFarEmptyHanded)\n+      {\n+        return null;\n+      }\n+      if (!this.nextRelationships.hasNext())\n+      {\n+        if (canGoDeeper())\n+        {\n+          prepareNextLevel();\n+        }\n+      }\n+      return this.nextRelationships.hasNext() ? this.nextRelationships.next() : null;\n+    }\n+  }\n \n-        DirectionDataPath( Node startNode )\n-        {\n-            this.startNode = startNode;\n-            this.endNode = startNode;\n-            this.length = 0;\n-        }\n+  // Two long-lived instances\n+  private static class DirectionDataPath implements Path\n+  {\n+    private final Node startNode;\n+    private Node endNode;\n+    private int length;\n \n-        void setEndNode( Node endNode )\n-        {\n-            this.endNode = endNode;\n-        }\n+    DirectionDataPath(Node startNode)\n+    {\n+      this.startNode = startNode;\n+      this.endNode = startNode;\n+      this.length = 0;\n+    }\n \n-        void setLength( int length )\n-        {\n-            this.length = length;\n-        }\n+    void setEndNode(Node endNode)\n+    {\n+      this.endNode = endNode;\n+    }\n \n-        @Override\n-        public Node startNode()\n-        {\n-            return startNode;\n-        }\n+    void setLength(int length)\n+    {\n+      this.length = length;\n+    }\n \n-        @Override\n-        public Node endNode()\n-        {\n-            return endNode;\n-        }\n+    @Override\n+    public Node startNode()\n+    {\n+      return startNode;\n+    }\n \n-        @Override\n-        public Relationship lastRelationship()\n-        {\n-            throw new UnsupportedOperationException();\n-        }\n+    @Override\n+    public Node endNode()\n+    {\n+      return endNode;\n+    }\n \n-        @Override\n-        public Iterable<Relationship> relationships()\n-        {\n-            throw new UnsupportedOperationException();\n-        }\n+    @Override\n+    public Relationship lastRelationship()\n+    {\n+      throw new UnsupportedOperationException();\n+    }\n \n-        @Override\n-        public Iterable<Relationship> reverseRelationships()\n-        {\n-            throw new UnsupportedOperationException();\n-        }\n+    @Override\n+    public Iterable<Relationship> relationships()\n+    {\n+      throw new UnsupportedOperationException();\n+    }\n \n-        @Override\n-        public Iterable<Node> nodes()\n-        {\n-            throw new UnsupportedOperationException();\n-        }\n+    @Override\n+    public Iterable<Relationship> reverseRelationships()\n+    {\n+      throw new UnsupportedOperationException();\n+    }\n \n-        @Override\n-        public Iterable<Node> reverseNodes()\n-        {\n-            throw new UnsupportedOperationException();\n-        }\n+    @Override\n+    public Iterable<Node> nodes()\n+    {\n+      throw new UnsupportedOperationException();\n+    }\n \n-        @Override\n-        public int length()\n-        {\n-            return length;\n-        }\n+    @Override\n+    public Iterable<Node> reverseNodes()\n+    {\n+      throw new UnsupportedOperationException();\n+    }\n \n-        @Override\n-        public Iterator<PropertyContainer> iterator()\n-        {\n-            throw new UnsupportedOperationException();\n-        }\n+    @Override\n+    public int length()\n+    {\n+      return length;\n     }\n \n-    protected Node filterNextLevelNodes( Node nextNode )\n+    @Override\n+    public Iterator<PropertyContainer> iterator()\n+    {\n+      throw new UnsupportedOperationException();\n+    }\n+  }\n+\n+  protected Node filterNextLevelNodes(Node nextNode)\n+  {\n+    // We need to be able to override this method from Cypher, so it must exist in this concrete class.\n+    // And we also need it to do nothing but still work when not overridden.\n+    return nextNode;\n+  }\n+\n+  // Many long-lived instances\n+  public static class LevelData\n+  {\n+    private long[] relsToHere;\n+    public final int depth;\n+\n+    LevelData(Relationship relToHere, int depth)\n     {\n-        // We need to be able to override this method from Cypher, so it must exist in this concrete class.\n-        // And we also need it to do nothing but still work when not overridden.\n-        return nextNode;\n+      if (relToHere != null)\n+      {\n+        addRel(relToHere);\n+      }\n+      this.depth = depth;\n     }\n \n-    // Many long-lived instances\n-    public static class LevelData\n+    void addRel(Relationship rel)\n     {\n-        private long[] relsToHere;\n-        public final int depth;\n+      long[] newRels = null;\n+      if (relsToHere == null)\n+      {\n+        newRels = new long[1];\n+      } else\n+      {\n+        newRels = new long[relsToHere.length + 1];\n+        System.arraycopy(relsToHere, 0, newRels, 0, relsToHere.length);\n+      }\n+      newRels[newRels.length - 1] = rel.getId();\n+      relsToHere = newRels;\n+    }\n+  }\n \n-        LevelData( Relationship relToHere, int depth )\n-        {\n-            if ( relToHere != null )\n-            {\n-                addRel( relToHere );\n-            }\n-            this.depth = depth;\n-        }\n+  // One long lived instance\n+  private static class Hits\n+  {\n+    private final PrimitiveIntObjectMap<Collection<Hit>> hits = Primitive.intObjectMap();\n+    private int lowestDepth;\n+    private int totalHitCount;\n \n-        void addRel( Relationship rel )\n-        {\n-            long[] newRels = null;\n-            if ( relsToHere == null )\n-            {\n-                newRels = new long[1];\n-            }\n-            else\n-            {\n-                newRels = new long[relsToHere.length + 1];\n-                System.arraycopy( relsToHere, 0, newRels, 0, relsToHere.length );\n-            }\n-            newRels[newRels.length - 1] = rel.getId();\n-            relsToHere = newRels;\n-        }\n+    int add(Hit hit, int atDepth)\n+    {\n+      Collection<Hit> depthHits = hits.computeIfAbsent(atDepth, k -> new HashSet<>());\n+      if (depthHits.add(hit))\n+      {\n+        totalHitCount++;\n+      }\n+      if (lowestDepth == 0 || atDepth < lowestDepth)\n+      {\n+        lowestDepth = atDepth;\n+      }\n+      return totalHitCount;\n     }\n \n-    // One long lived instance\n-    private static class Hits\n+    Collection<Hit> least()\n     {\n-        private final PrimitiveIntObjectMap<Collection<Hit>> hits = Primitive.intObjectMap();\n-        private int lowestDepth;\n-        private int totalHitCount;\n+      return hits.get(lowestDepth);\n+    }\n+  }\n \n-        int add( Hit hit, int atDepth )\n-        {\n-            Collection<Hit> depthHits = hits.computeIfAbsent( atDepth, k -> new HashSet<>() );\n-            if ( depthHits.add( hit ) )\n-            {\n-                totalHitCount++;\n-            }\n-            if ( lowestDepth == 0 || atDepth < lowestDepth )\n-            {\n-                lowestDepth = atDepth;\n-            }\n-            return totalHitCount;\n-        }\n+  // Methods for converting data representing paths to actual Path instances.\n+  // It's rather tricky just because this algo stores as little info as possible\n+  // required to build paths from hit information.\n+  private static class PathData\n+  {\n+    private final LinkedList<Relationship> rels;\n+    private final Node node;\n \n-        Collection<Hit> least()\n-        {\n-            return hits.get( lowestDepth );\n-        }\n+    PathData(Node node, LinkedList<Relationship> rels)\n+    {\n+      this.rels = rels;\n+      this.node = node;\n     }\n+  }\n \n-    // Methods for converting data representing paths to actual Path instances.\n-    // It's rather tricky just because this algo stores as little info as possible\n-    // required to build paths from hit information.\n-    private static class PathData\n+  private static Collection<Path> hitsToPaths(Collection<Hit> depthHits, Node start, Node end, boolean stopAsap, int maxResultCount)\n+  {\n+    LinkedHashMap<String, Path> paths = new LinkedHashMap<>();\n+    for (Hit hit : depthHits)\n     {\n-        private final LinkedList<Relationship> rels;\n-        private final Node node;\n-\n-        PathData( Node node, LinkedList<Relationship> rels )\n+      for (Path path : hitToPaths(hit, start, end, stopAsap))\n+      {\n+        paths.put(path.toString(), path);\n+        if (paths.size() >= maxResultCount)\n         {\n-            this.rels = rels;\n-            this.node = node;\n+          break;\n         }\n+      }\n     }\n-\n-    private static Collection<Path> hitsToPaths( Collection<Hit> depthHits, Node start, Node end, boolean stopAsap, int maxResultCount )\n+    return paths.values();\n+  }\n+\n+  private static Collection<Path> hitToPaths(Hit hit, Node start, Node end, boolean stopAsap)\n+  {\n+    Collection<Path> paths = new ArrayList<>();\n+    Iterable<LinkedList<Relationship>> startPaths = getPaths(hit.connectingNode, hit.start, stopAsap);\n+    Iterable<LinkedList<Relationship>> endPaths = getPaths(hit.connectingNode, hit.end, stopAsap);\n+    for (LinkedList<Relationship> startPath : startPaths)\n     {\n-        LinkedHashMap<String,Path> paths = new LinkedHashMap<>();\n-        for ( Hit hit : depthHits )\n-        {\n-            for ( Path path : hitToPaths( hit, start, end, stopAsap ) )\n-            {\n-                paths.put( path.toString(), path );\n-                if ( paths.size() >= maxResultCount )\n-                {\n-                    break;\n-                }\n-            }\n-        }\n-        return paths.values();\n+      PathImpl.Builder startBuilder = toBuilder(start, startPath);\n+      for (LinkedList<Relationship> endPath : endPaths)\n+      {\n+        PathImpl.Builder endBuilder = toBuilder(end, endPath);\n+        Path path = startBuilder.build(endBuilder);\n+        paths.add(path);\n+      }\n     }\n-\n-    private static Collection<Path> hitToPaths( Hit hit, Node start, Node end, boolean stopAsap )\n+    return paths;\n+  }\n+\n+  private static Iterable<LinkedList<Relationship>> getPaths(Node connectingNode, DirectionData data,\n+                                                             boolean stopAsap)\n+  {\n+    LevelData levelData = data.visitedNodes.get(connectingNode);\n+    if (levelData.depth == 0)\n     {\n-        Collection<Path> paths = new ArrayList<>();\n-        Iterable<LinkedList<Relationship>> startPaths = getPaths( hit.connectingNode, hit.start, stopAsap );\n-        Iterable<LinkedList<Relationship>> endPaths = getPaths( hit.connectingNode, hit.end, stopAsap );\n-        for ( LinkedList<Relationship> startPath : startPaths )\n-        {\n-            PathImpl.Builder startBuilder = toBuilder( start, startPath );\n-            for ( LinkedList<Relationship> endPath : endPaths )\n-            {\n-                PathImpl.Builder endBuilder = toBuilder( end, endPath );\n-                Path path = startBuilder.build( endBuilder );\n-                paths.add( path );\n-            }\n-        }\n-        return paths;\n+      Collection<LinkedList<Relationship>> result = new ArrayList<>();\n+      result.add(new LinkedList<>());\n+      return result;\n     }\n-\n-    private static Iterable<LinkedList<Relationship>> getPaths( Node connectingNode, DirectionData data,\n-            boolean stopAsap )\n+    Collection<PathData> set = new ArrayList<>();\n+    GraphDatabaseService graphDb = data.startNode.getGraphDatabase();\n+    for (long rel : levelData.relsToHere)\n     {\n-        LevelData levelData = data.visitedNodes.get( connectingNode );\n-        if ( levelData.depth == 0 )\n-        {\n-            Collection<LinkedList<Relationship>> result = new ArrayList<>();\n-            result.add( new LinkedList<>() );\n-            return result;\n-        }\n-        Collection<PathData> set = new ArrayList<>();\n-        GraphDatabaseService graphDb = data.startNode.getGraphDatabase();\n-        for ( long rel : levelData.relsToHere )\n-        {\n-            set.add( new PathData( connectingNode, new LinkedList<>( Arrays.asList( graphDb\n-                    .getRelationshipById( rel ) ) ) ) );\n-            if ( stopAsap )\n-            {\n-                break;\n-            }\n-        }\n-        for ( int i = 0; i < levelData.depth - 1; i++ )\n-        {\n-            // One level\n-            Collection<PathData> nextSet = new ArrayList<>();\n-            for ( PathData entry : set )\n-            {\n-                // One path...\n-                Node otherNode = entry.rels.getFirst().getOtherNode( entry.node );\n-                LevelData otherLevelData = data.visitedNodes.get( otherNode );\n-                int counter = 0;\n-                for ( long rel : otherLevelData.relsToHere )\n-                {\n-                    // ...may split into several paths\n-                    LinkedList<Relationship> rels = ++counter == otherLevelData.relsToHere.length ?\n-                    // This is a little optimization which reduces number of\n-                    // lists being copied\n-                            entry.rels\n-                            : new LinkedList<>( entry.rels );\n-                    rels.addFirst( graphDb.getRelationshipById( rel ) );\n-                    nextSet.add( new PathData( otherNode, rels ) );\n-                    if ( stopAsap )\n-                    {\n-                        break;\n-                    }\n-                }\n-            }\n-            set = nextSet;\n-        }\n-        return new IterableWrapper<LinkedList<Relationship>,PathData>( set )\n-        {\n-            @Override\n-            protected LinkedList<Relationship> underlyingObjectToObject( PathData object )\n-            {\n-                return object.rels;\n-            }\n-        };\n+      set.add(new PathData(connectingNode, new LinkedList<>(Arrays.asList(graphDb\n+          .getRelationshipById(rel)))));\n+      if (stopAsap)\n+      {\n+        break;\n+      }\n     }\n-\n-    private static Builder toBuilder( Node startNode, LinkedList<Relationship> rels )\n+    for (int i = 0; i < levelData.depth - 1; i++)\n     {\n-        PathImpl.Builder builder = new PathImpl.Builder( startNode );\n-        for ( Relationship rel : rels )\n-        {\n-            builder = builder.push( rel );\n-        }\n-        return builder;\n+      // One level\n+      Collection<PathData> nextSet = new ArrayList<>();\n+      for (PathData entry : set)\n+      {\n+        // One path...\n+        Node otherNode = entry.rels.getFirst().getOtherNode(entry.node);\n+        LevelData otherLevelData = data.visitedNodes.get(otherNode);\n+        int counter = 0;\n+        for (long rel : otherLevelData.relsToHere)\n+        {\n+          // ...may split into several paths\n+          LinkedList<Relationship> rels = ++counter == otherLevelData.relsToHere.length ?\n+              // This is a little optimization which reduces number of\n+              // lists being copied\n+              entry.rels\n+              : new LinkedList<>(entry.rels);\n+          rels.addFirst(graphDb.getRelationshipById(rel));\n+          nextSet.add(new PathData(otherNode, rels));\n+          if (stopAsap)\n+          {\n+            break;\n+          }\n+        }\n+      }\n+      set = nextSet;\n     }\n-\n-    private static class Metadata implements TraversalMetadata\n+    return new IterableWrapper<LinkedList<Relationship>, PathData>(set)\n+    {\n+      @Override\n+      protected LinkedList<Relationship> underlyingObjectToObject(PathData object)\n+      {\n+        return object.rels;\n+      }\n+    };\n+  }\n+\n+  private static Builder toBuilder(Node startNode, LinkedList<Relationship> rels)\n+  {\n+    PathImpl.Builder builder = new PathImpl.Builder(startNode);\n+    for (Relationship rel : rels)\n     {\n-        private int rels;\n-        private int paths;\n+      builder = builder.push(rel);\n+    }\n+    return builder;\n+  }\n \n-        @Override\n-        public int getNumberOfPathsReturned()\n-        {\n-            return paths;\n-        }\n+  private static class Metadata implements TraversalMetadata\n+  {\n+    private int rels;\n+    private int paths;\n \n-        @Override\n-        public int getNumberOfRelationshipsTraversed()\n-        {\n-            return rels;\n-        }\n+    @Override\n+    public int getNumberOfPathsReturned()\n+    {\n+      return paths;\n+    }\n+\n+    @Override\n+    public int getNumberOfRelationshipsTraversed()\n+    {\n+      return rels;\n     }\n+  }\n }\n",
            "diff_size": 836
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}