{
    "project_name": "fangjinuo-easyjson",
    "error_id": "13",
    "information": {
        "errors": [
            {
                "line": "283",
                "column": "44",
                "severity": "warning",
                "message": "'?' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "    @Override\n    public BigInteger getAsBigInteger() {\n        return value instanceof BigInteger ?\n                (BigInteger) value : new BigInteger(value.toString());\n    }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/13/JsonPrimitiveNode.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/styler/13/JsonPrimitiveNode.java\nindex 30fe6f214c2..ecc56d25d1a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/13/JsonPrimitiveNode.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/styler/13/JsonPrimitiveNode.java\n@@ -280,8 +280,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      */\n     @Override\n     public BigInteger getAsBigInteger() {\n-        return value instanceof BigInteger ?\n-                (BigInteger) value : new BigInteger(value.toString());\n+        return value instanceof BigInteger ? (BigInteger) value : new BigInteger(value.toString());\n     }\n \n     /**\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "283",
                    "column": "44",
                    "severity": "warning",
                    "message": "'?' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/13/JsonPrimitiveNode.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/intellij/13/JsonPrimitiveNode.java\nindex 30fe6f214c2..032b011ebe3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/13/JsonPrimitiveNode.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/intellij/13/JsonPrimitiveNode.java\n@@ -23,8 +23,8 @@ import java.math.BigInteger;\n \n public class JsonPrimitiveNode extends JsonTreeNode {\n     private static final Class<?>[] PRIMITIVE_TYPES = {int.class, long.class, short.class,\n-            float.class, double.class, byte.class, boolean.class, char.class, Integer.class, Long.class,\n-            Short.class, Float.class, Double.class, Byte.class, Boolean.class, Character.class};\n+        float.class, double.class, byte.class, boolean.class, char.class, Integer.class, Long.class,\n+        Short.class, Float.class, Double.class, Byte.class, Boolean.class, Character.class};\n \n     private Object value;\n \n@@ -93,7 +93,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n             this.value = String.valueOf(c);\n         } else {\n             Preconditions.checkArgument(primitive instanceof Number\n-                    || isPrimitiveOrString(primitive));\n+                || isPrimitiveOrString(primitive));\n             this.value = primitive;\n         }\n     }\n@@ -281,7 +281,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n     @Override\n     public BigInteger getAsBigInteger() {\n         return value instanceof BigInteger ?\n-                (BigInteger) value : new BigInteger(value.toString());\n+            (BigInteger) value : new BigInteger(value.toString());\n     }\n \n     /**\n@@ -402,7 +402,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n         if (primitive.value instanceof Number) {\n             Number number = (Number) primitive.value;\n             return number instanceof BigInteger || number instanceof Long || number instanceof Integer\n-                    || number instanceof Short || number instanceof Byte;\n+                || number instanceof Short || number instanceof Byte;\n         }\n         return false;\n     }\n",
            "diff_size": 5
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/13/JsonPrimitiveNode.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/naturalize/13/JsonPrimitiveNode.java\nindex 30fe6f214c2..c130c2ba149 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/13/JsonPrimitiveNode.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/naturalize/13/JsonPrimitiveNode.java\n@@ -22,11 +22,11 @@ import java.math.BigDecimal;\n import java.math.BigInteger;\n \n public class JsonPrimitiveNode extends JsonTreeNode {\n-    private static final Class<?>[] PRIMITIVE_TYPES = {int.class, long.class, short.class,\n-            float.class, double.class, byte.class, boolean.class, char.class, Integer.class, Long.class,\n+    private static final Class<?>[] PRIMITIVE_TYPES = {\n+    int.class, long.class, short.class, float.class, double.class, byte.class, boolean.class, char.class, Integer.class, Long.class,\n             Short.class, Float.class, Double.class, Byte.class, Boolean.class, Character.class};\n \n-    private Object value;\n+private Object value;\n \n     /**\n      * Create a primitive containing a boolean value.\n@@ -94,7 +94,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n         } else {\n             Preconditions.checkArgument(primitive instanceof Number\n                     || isPrimitiveOrString(primitive));\n-            this.value = primitive;\n+this.value = primitive;\n         }\n     }\n \n@@ -280,8 +280,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      */\n     @Override\n     public BigInteger getAsBigInteger() {\n-        return value instanceof BigInteger ?\n-                (BigInteger) value : new BigInteger(value.toString());\n+        return value instanceof BigInteger ? (BigInteger) value : new BigInteger(value.toString());\n     }\n \n     /**\n@@ -406,4 +405,4 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n         }\n         return false;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/13/JsonPrimitiveNode.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/codebuff/13/JsonPrimitiveNode.java\nindex 30fe6f214c2..8ad069cd3e7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/13/JsonPrimitiveNode.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/codebuff/13/JsonPrimitiveNode.java\n@@ -17,15 +17,28 @@ package com.jn.easyjson.core.node;\n import com.jn.easyjson.core.JsonTreeNode;\n import com.jn.easyjson.core.util.LazilyParsedNumber;\n import com.jn.easyjson.core.util.Preconditions;\n-\n import java.math.BigDecimal;\n import java.math.BigInteger;\n \n public class JsonPrimitiveNode extends JsonTreeNode {\n-    private static final Class<?>[] PRIMITIVE_TYPES = {int.class, long.class, short.class,\n-            float.class, double.class, byte.class, boolean.class, char.class, Integer.class, Long.class,\n-            Short.class, Float.class, Double.class, Byte.class, Boolean.class, Character.class};\n-\n+    private static final Class<?>[] PRIMITIVE_TYPES = {\n+int.class,\n+long.class,\n+short.class,\n+float.class,\n+double.class,\n+byte.class,\n+boolean.class,\n+char.class,\n+Integer.class,\n+Long.class,\n+Short.class,\n+Float.class,\n+Double.class,\n+Byte.class,\n+Boolean.class,\n+Character.class\n+};\n     private Object value;\n \n     /**\n@@ -33,6 +46,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      *\n      * @param bool the value to create the primitive with.\n      */\n+\n     public JsonPrimitiveNode(Boolean bool) {\n         setValue(bool);\n     }\n@@ -42,6 +56,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      *\n      * @param number the value to create the primitive with.\n      */\n+\n     public JsonPrimitiveNode(Number number) {\n         setValue(number);\n     }\n@@ -51,6 +66,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      *\n      * @param string the value to create the primitive with.\n      */\n+\n     public JsonPrimitiveNode(String string) {\n         setValue(string);\n     }\n@@ -61,6 +77,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      *\n      * @param c the value to create the primitive with.\n      */\n+\n     public JsonPrimitiveNode(Character c) {\n         setValue(c);\n     }\n@@ -71,6 +88,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      *\n      * @param primitive the value to create the primitive with.\n      */\n+\n     public JsonPrimitiveNode(Object primitive) {\n         setValue(primitive);\n     }\n@@ -80,6 +98,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      *\n      * @since 2.8.2\n      */\n+\n     @Override\n     public JsonPrimitiveNode deepCopy() {\n         return this;\n@@ -92,8 +111,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n             char c = ((Character) primitive).charValue();\n             this.value = String.valueOf(c);\n         } else {\n-            Preconditions.checkArgument(primitive instanceof Number\n-                    || isPrimitiveOrString(primitive));\n+            Preconditions.checkArgument(primitive instanceof Number || isPrimitiveOrString(primitive));\n             this.value = primitive;\n         }\n     }\n@@ -103,6 +121,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      *\n      * @return true if this primitive contains a boolean value, false otherwise.\n      */\n+\n     public boolean isBoolean() {\n         return value instanceof Boolean;\n     }\n@@ -112,6 +131,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      *\n      * @return get this element as a {@link Boolean}.\n      */\n+\n     protected Boolean getAsBooleanWrapper() {\n         return (Boolean) value;\n     }\n@@ -121,6 +141,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      *\n      * @return get this element as a primitive boolean value.\n      */\n+\n     @Override\n     public boolean getAsBoolean() {\n         if (isBoolean()) {\n@@ -136,6 +157,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      *\n      * @return true if this primitive contains a Number, false otherwise.\n      */\n+\n     public boolean isNumber() {\n         return value instanceof Number;\n     }\n@@ -146,6 +168,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      * @return get this element as a Number.\n      * @throws NumberFormatException if the value contained is not a valid Number.\n      */\n+\n     @Override\n     public Number getAsNumber() {\n         return value instanceof String ? new LazilyParsedNumber((String) value) : (Number) value;\n@@ -156,6 +179,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      *\n      * @return true if this primitive contains a String value, false otherwise.\n      */\n+\n     public boolean isString() {\n         return value instanceof String;\n     }\n@@ -165,6 +189,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      *\n      * @return get this element as a String.\n      */\n+\n     @Override\n     public String getAsString() {\n         if (isNumber()) {\n@@ -172,9 +197,9 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n         } else if (isBoolean()) {\n             return getAsBooleanWrapper().toString();\n         } else if (isChar()) {\n-            return \"\" + value;\n-        } else {\n-            return (String) value;\n+                   return \"\" + value;\n+               } else {\n+                   return (String) value;\n         }\n     }\n \n@@ -256,6 +281,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      * @return get this element as a primitive double.\n      * @throws NumberFormatException if the value contained is not a valid double.\n      */\n+\n     @Override\n     public double getAsDouble() {\n         return isNumber() ? getAsNumber().doubleValue() : Double.parseDouble(getAsString());\n@@ -267,6 +293,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      * @return get this element as a {@link BigDecimal}.\n      * @throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.\n      */\n+\n     @Override\n     public BigDecimal getAsBigDecimal() {\n         return value instanceof BigDecimal ? (BigDecimal) value : new BigDecimal(value.toString());\n@@ -278,10 +305,10 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      * @return get this element as a {@link BigInteger}.\n      * @throws NumberFormatException if the value contained is not a valid {@link BigInteger}.\n      */\n+\n     @Override\n     public BigInteger getAsBigInteger() {\n-        return value instanceof BigInteger ?\n-                (BigInteger) value : new BigInteger(value.toString());\n+        return value instanceof BigInteger ? (BigInteger) value : new BigInteger(value.toString());\n     }\n \n     /**\n@@ -290,6 +317,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      * @return get this element as a float.\n      * @throws NumberFormatException if the value contained is not a valid float.\n      */\n+\n     @Override\n     public float getAsFloat() {\n         return isNumber() ? getAsNumber().floatValue() : Float.parseFloat(getAsString());\n@@ -301,6 +329,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      * @return get this element as a primitive long.\n      * @throws NumberFormatException if the value contained is not a valid long.\n      */\n+\n     @Override\n     public long getAsLong() {\n         return isNumber() ? getAsNumber().longValue() : Long.parseLong(getAsString());\n@@ -312,6 +341,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      * @return get this element as a primitive short.\n      * @throws NumberFormatException if the value contained is not a valid short value.\n      */\n+\n     @Override\n     public short getAsShort() {\n         return isNumber() ? getAsNumber().shortValue() : Short.parseShort(getAsString());\n@@ -323,6 +353,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      * @return get this element as a primitive integer.\n      * @throws NumberFormatException if the value contained is not a valid integer.\n      */\n+\n     @Override\n     public int getAsInt() {\n         return isNumber() ? getAsNumber().intValue() : Integer.parseInt(getAsString());\n@@ -342,7 +373,6 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n         if (target instanceof String) {\n             return true;\n         }\n-\n         Class<?> classOfPrimitive = target.getClass();\n         for (Class<?> standardPrimitive : PRIMITIVE_TYPES) {\n             if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n@@ -360,11 +390,13 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n         // Using recommended hashing algorithm from Effective Java for longs and doubles\n         if (isIntegral(this)) {\n             long value = getAsNumber().longValue();\n-            return (int) (value ^ (value >>> 32));\n+            return (int) (value\n+                ^ (value > > > 32));\n         }\n         if (value instanceof Number) {\n             long value = Double.doubleToLongBits(getAsNumber().doubleValue());\n-            return (int) (value ^ (value >>> 32));\n+            return (int) (value\n+                ^ (value > > > 32));\n         }\n         return value.hashCode();\n     }\n@@ -398,12 +430,12 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      * Returns true if the specified number is an integral type\n      * (Long, Integer, Short, Byte, BigInteger)\n      */\n+\n     public static boolean isIntegral(JsonPrimitiveNode primitive) {\n         if (primitive.value instanceof Number) {\n             Number number = (Number) primitive.value;\n-            return number instanceof BigInteger || number instanceof Long || number instanceof Integer\n-                    || number instanceof Short || number instanceof Byte;\n+            return number instanceof BigInteger || number instanceof Long || number instanceof Integer || number instanceof Short || number instanceof Byte;\n         }\n         return false;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 55
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/13/JsonPrimitiveNode.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/styler_random/13/JsonPrimitiveNode.java\nindex 30fe6f214c2..ecc56d25d1a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/13/JsonPrimitiveNode.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/styler_random/13/JsonPrimitiveNode.java\n@@ -280,8 +280,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      */\n     @Override\n     public BigInteger getAsBigInteger() {\n-        return value instanceof BigInteger ?\n-                (BigInteger) value : new BigInteger(value.toString());\n+        return value instanceof BigInteger ? (BigInteger) value : new BigInteger(value.toString());\n     }\n \n     /**\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/13/JsonPrimitiveNode.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/styler_three_grams/13/JsonPrimitiveNode.java\nindex 30fe6f214c2..ecc56d25d1a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/13/JsonPrimitiveNode.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/styler_three_grams/13/JsonPrimitiveNode.java\n@@ -280,8 +280,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      */\n     @Override\n     public BigInteger getAsBigInteger() {\n-        return value instanceof BigInteger ?\n-                (BigInteger) value : new BigInteger(value.toString());\n+        return value instanceof BigInteger ? (BigInteger) value : new BigInteger(value.toString());\n     }\n \n     /**\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij"
    ]
}