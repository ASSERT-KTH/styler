{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4319",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "32",
                    "column": "87",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "32",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4319/ConsistencySummaryStatistics.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4319/ConsistencySummaryStatistics.java\nindex c15720a38b2..f874afe3741 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4319/ConsistencySummaryStatistics.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4319/ConsistencySummaryStatistics.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency.report;\n \n import java.util.EnumMap;\n@@ -28,62 +29,62 @@ import org.neo4j.consistency.RecordType;\n \n public class ConsistencySummaryStatistics\n {\n-    private final Map<RecordType, AtomicInteger> inconsistentRecordCount = new EnumMap<>( RecordType.class );\n-    private final AtomicInteger totalInconsistencyCount = new AtomicInteger();\n-    private final AtomicLong errorCount = new AtomicLong();\n-    private final AtomicLong warningCount = new AtomicLong();\n+  private final Map<RecordType, AtomicInteger> inconsistentRecordCount = new EnumMap<>(RecordType.class);\n+  private final AtomicInteger totalInconsistencyCount = new AtomicInteger();\n+  private final AtomicLong errorCount = new AtomicLong();\n+  private final AtomicLong warningCount = new AtomicLong();\n \n-    public ConsistencySummaryStatistics()\n+  public ConsistencySummaryStatistics()\n+  {\n+    for (RecordType recordType : RecordType.values())\n     {\n-        for ( RecordType recordType : RecordType.values() )\n-        {\n-            inconsistentRecordCount.put( recordType, new AtomicInteger() );\n-        }\n+      inconsistentRecordCount.put(recordType, new AtomicInteger());\n     }\n+  }\n \n-    @Override\n-    public String toString()\n+  @Override\n+  public String toString()\n+  {\n+    StringBuilder result = new StringBuilder(getClass().getSimpleName()).append('{');\n+    result.append(\"\\n\\tNumber of errors: \").append(errorCount);\n+    result.append(\"\\n\\tNumber of warnings: \").append(warningCount);\n+    for (Map.Entry<RecordType, AtomicInteger> entry : inconsistentRecordCount.entrySet())\n     {\n-        StringBuilder result = new StringBuilder( getClass().getSimpleName() ).append( '{' );\n-        result.append( \"\\n\\tNumber of errors: \" ).append( errorCount );\n-        result.append( \"\\n\\tNumber of warnings: \" ).append( warningCount );\n-        for ( Map.Entry<RecordType, AtomicInteger> entry : inconsistentRecordCount.entrySet() )\n-        {\n-            if ( entry.getValue().get() != 0 )\n-            {\n-                result.append( \"\\n\\tNumber of inconsistent \" )\n-                      .append( entry.getKey() ).append( \" records: \" ).append( entry.getValue() );\n-            }\n-        }\n-        return result.append( \"\\n}\" ).toString();\n+      if (entry.getValue().get() != 0)\n+      {\n+        result.append(\"\\n\\tNumber of inconsistent \")\n+            .append(entry.getKey()).append(\" records: \").append(entry.getValue());\n+      }\n     }\n+    return result.append(\"\\n}\").toString();\n+  }\n \n-    public boolean isConsistent()\n-    {\n-        return totalInconsistencyCount.get() == 0;\n-    }\n+  public boolean isConsistent()\n+  {\n+    return totalInconsistencyCount.get() == 0;\n+  }\n \n-    public int getInconsistencyCountForRecordType( RecordType recordType )\n-    {\n-        return inconsistentRecordCount.get( recordType ).get();\n-    }\n+  public int getInconsistencyCountForRecordType(RecordType recordType)\n+  {\n+    return inconsistentRecordCount.get(recordType).get();\n+  }\n+\n+  public int getTotalInconsistencyCount()\n+  {\n+    return totalInconsistencyCount.get();\n+  }\n \n-    public int getTotalInconsistencyCount()\n+  void update(RecordType recordType, int errors, int warnings)\n+  {\n+    if (errors > 0)\n     {\n-        return totalInconsistencyCount.get();\n+      inconsistentRecordCount.get(recordType).addAndGet(errors);\n+      totalInconsistencyCount.addAndGet(errors);\n+      errorCount.addAndGet(errors);\n     }\n-\n-    void update( RecordType recordType, int errors, int warnings )\n+    if (warnings > 0)\n     {\n-        if ( errors > 0 )\n-        {\n-            inconsistentRecordCount.get( recordType ).addAndGet( errors );\n-            totalInconsistencyCount.addAndGet( errors );\n-            errorCount.addAndGet( errors );\n-        }\n-        if ( warnings > 0 )\n-        {\n-            warningCount.addAndGet( warnings );\n-        }\n+      warningCount.addAndGet(warnings);\n     }\n+  }\n }\n",
            "diff_size": 66
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4319/ConsistencySummaryStatistics.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4319/ConsistencySummaryStatistics.java\nindex c15720a38b2..c189be07c80 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4319/ConsistencySummaryStatistics.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4319/ConsistencySummaryStatistics.java\n@@ -28,7 +28,7 @@ import org.neo4j.consistency.RecordType;\n \n public class ConsistencySummaryStatistics\n {\n-    private final Map<RecordType, AtomicInteger> inconsistentRecordCount = new EnumMap<>( RecordType.class );\n+    private final Map<RecordType,AtomicInteger> inconsistentRecordCount = new EnumMap<>( RecordType.class );\n     private final AtomicInteger totalInconsistencyCount = new AtomicInteger();\n     private final AtomicLong errorCount = new AtomicLong();\n     private final AtomicLong warningCount = new AtomicLong();\n@@ -47,13 +47,12 @@ public class ConsistencySummaryStatistics\n         StringBuilder result = new StringBuilder( getClass().getSimpleName() ).append( '{' );\n         result.append( \"\\n\\tNumber of errors: \" ).append( errorCount );\n         result.append( \"\\n\\tNumber of warnings: \" ).append( warningCount );\n-        for ( Map.Entry<RecordType, AtomicInteger> entry : inconsistentRecordCount.entrySet() )\n+        for ( Map.Entry<RecordType,AtomicInteger> entry : inconsistentRecordCount.entrySet() )\n         {\n             if ( entry.getValue().get() != 0 )\n             {\n-                result.append( \"\\n\\tNumber of inconsistent \" )\n-                      .append( entry.getKey() ).append( \" records: \" ).append( entry.getValue() );\n-            }\n+                result.append( \"\\n\\tNumber of inconsistent \" ).append( entry.getKey() ).append( \" records: \" ).append( entry.getValue() );\n+    }\n         }\n         return result.append( \"\\n}\" ).toString();\n     }\n@@ -81,9 +80,10 @@ public class ConsistencySummaryStatistics\n             totalInconsistencyCount.addAndGet( errors );\n             errorCount.addAndGet( errors );\n         }\n-        if ( warnings > 0 )\n+\n+if ( warnings > 0 )\n         {\n             warningCount.addAndGet( warnings );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}