{
    "project_name": "neo4j-neo4j",
    "error_id": "1662",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "122",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "55",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1662/FulltextIndexSettings.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1662/FulltextIndexSettings.java\nindex 7e6a61b5090..837853b0928 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1662/FulltextIndexSettings.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1662/FulltextIndexSettings.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.impl.fulltext;\n \n import org.apache.lucene.analysis.Analyzer;\n@@ -36,43 +37,43 @@ import static org.neo4j.kernel.api.impl.fulltext.FulltextIndexSettingsKeys.EVENT\n final class FulltextIndexSettings\n {\n     private FulltextIndexSettings()\n-    {}\n+    {\n+    }\n \n-    static Analyzer createAnalyzer( IndexDescriptor descriptor, TokenNameLookup tokenNameLookup )\n+    static Analyzer createAnalyzer(IndexDescriptor descriptor, TokenNameLookup tokenNameLookup)\n     {\n-        TextValue analyzerName = descriptor.getIndexConfig().get( ANALYZER );\n-        if ( analyzerName == null )\n+        TextValue analyzerName = descriptor.getIndexConfig().get(ANALYZER);\n+        if (analyzerName == null)\n         {\n-            throw new RuntimeException( \"Index has no analyzer configured: \" + descriptor.userDescription( tokenNameLookup ) );\n+            throw new RuntimeException(\"Index has no analyzer configured: \" + descriptor.userDescription(tokenNameLookup));\n         }\n         Analyzer analyzer;\n         try\n         {\n-            AnalyzerProvider analyzerProvider = Services.loadOrFail( AnalyzerProvider.class, analyzerName.stringValue() );\n+            AnalyzerProvider analyzerProvider = Services.loadOrFail(AnalyzerProvider.class, analyzerName.stringValue());\n             analyzer = analyzerProvider.createAnalyzer();\n-        }\n-        catch ( Exception e )\n+        } catch (Exception e)\n         {\n-            throw new RuntimeException( \"Could not create fulltext analyzer: \" + analyzerName, e );\n+            throw new RuntimeException(\"Could not create fulltext analyzer: \" + analyzerName, e);\n         }\n-        Objects.requireNonNull( analyzer, \"The '\" + analyzerName + \"' analyzer provider returned a null analyzer.\" );\n+        Objects.requireNonNull(analyzer, \"The '\" + analyzerName + \"' analyzer provider returned a null analyzer.\");\n         return analyzer;\n     }\n \n-    static String[] createPropertyNames( IndexDescriptor descriptor, TokenNameLookup tokenNameLookup )\n+    static String[] createPropertyNames(IndexDescriptor descriptor, TokenNameLookup tokenNameLookup)\n     {\n         int[] propertyIds = descriptor.schema().getPropertyIds();\n         String[] propertyNames = new String[propertyIds.length];\n-        for ( int i = 0; i < propertyIds.length; i++ )\n+        for (int i = 0; i < propertyIds.length; i++)\n         {\n-            propertyNames[i] = tokenNameLookup.propertyKeyGetName( propertyIds[i] );\n+            propertyNames[i] = tokenNameLookup.propertyKeyGetName(propertyIds[i]);\n         }\n         return propertyNames;\n     }\n \n-    static boolean isEventuallyConsistent( IndexDescriptor index )\n+    static boolean isEventuallyConsistent(IndexDescriptor index)\n     {\n-        BooleanValue eventuallyConsistent = index.getIndexConfig().getOrDefault( EVENTUALLY_CONSISTENT, BooleanValue.FALSE );\n+        BooleanValue eventuallyConsistent = index.getIndexConfig().getOrDefault(EVENTUALLY_CONSISTENT, BooleanValue.FALSE);\n         return eventuallyConsistent.booleanValue();\n     }\n }\n",
            "diff_size": 17
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}