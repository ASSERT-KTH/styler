{
    "project_name": "neo4j-neo4j",
    "error_id": "1724",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "49",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1724/MetaSection.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1724/MetaSection.java\nindex fe105ddcbd0..77d8a52604d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1724/MetaSection.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1724/MetaSection.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.collector;\n \n import java.lang.management.CompilationMXBean;\n@@ -45,50 +46,50 @@ final class MetaSection\n     { // only static methods\n     }\n \n-    static Stream<RetrieveResult> retrieve( String graphToken,\n-                                            Kernel kernel,\n-                                            long numSilentQueryDrops ) throws TransactionFailureException\n+    static Stream<RetrieveResult> retrieve(String graphToken,\n+                                           Kernel kernel,\n+                                           long numSilentQueryDrops) throws TransactionFailureException\n     {\n         Map<String, Object> systemData = new HashMap<>();\n-        systemData.put( \"jvmMemoryFree\", Runtime.getRuntime().freeMemory() );\n-        systemData.put( \"jvmMemoryTotal\", Runtime.getRuntime().totalMemory() );\n-        systemData.put( \"jvmMemoryMax\", Runtime.getRuntime().maxMemory() );\n-        systemData.put( \"systemTotalPhysicalMemory\", OsBeanUtil.getTotalPhysicalMemory() );\n-        systemData.put( \"systemFreePhysicalMemory\", OsBeanUtil.getFreePhysicalMemory() );\n-        systemData.put( \"systemCommittedVirtualMemory\", OsBeanUtil.getCommittedVirtualMemory() );\n-        systemData.put( \"systemTotalSwapSpace\", OsBeanUtil.getTotalSwapSpace() );\n-        systemData.put( \"systemFreeSwapSpace\", OsBeanUtil.getFreeSwapSpace() );\n+        systemData.put(\"jvmMemoryFree\", Runtime.getRuntime().freeMemory());\n+        systemData.put(\"jvmMemoryTotal\", Runtime.getRuntime().totalMemory());\n+        systemData.put(\"jvmMemoryMax\", Runtime.getRuntime().maxMemory());\n+        systemData.put(\"systemTotalPhysicalMemory\", OsBeanUtil.getTotalPhysicalMemory());\n+        systemData.put(\"systemFreePhysicalMemory\", OsBeanUtil.getFreePhysicalMemory());\n+        systemData.put(\"systemCommittedVirtualMemory\", OsBeanUtil.getCommittedVirtualMemory());\n+        systemData.put(\"systemTotalSwapSpace\", OsBeanUtil.getTotalSwapSpace());\n+        systemData.put(\"systemFreeSwapSpace\", OsBeanUtil.getFreeSwapSpace());\n \n         OperatingSystemMXBean os = ManagementFactory.getOperatingSystemMXBean();\n-        systemData.put( \"osArch\", os.getArch() );\n-        systemData.put( \"osName\", os.getName() );\n-        systemData.put( \"osVersion\", os.getVersion() );\n-        systemData.put( \"availableProcessors\", os.getAvailableProcessors() );\n-        systemData.put( \"byteOrder\", ByteOrder.nativeOrder().toString() );\n+        systemData.put(\"osArch\", os.getArch());\n+        systemData.put(\"osName\", os.getName());\n+        systemData.put(\"osVersion\", os.getVersion());\n+        systemData.put(\"availableProcessors\", os.getAvailableProcessors());\n+        systemData.put(\"byteOrder\", ByteOrder.nativeOrder().toString());\n \n         RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n-        systemData.put( \"jvmName\", runtime.getVmName() );\n-        systemData.put( \"jvmVendor\", runtime.getVmVendor() );\n-        systemData.put( \"jvmVersion\", runtime.getVmVersion() );\n+        systemData.put(\"jvmName\", runtime.getVmName());\n+        systemData.put(\"jvmVendor\", runtime.getVmVendor());\n+        systemData.put(\"jvmVersion\", runtime.getVmVersion());\n         CompilationMXBean compiler = ManagementFactory.getCompilationMXBean();\n-        systemData.put( \"jvmJITCompiler\", compiler == null ? \"unknown\" : compiler.getName() );\n+        systemData.put(\"jvmJITCompiler\", compiler == null ? \"unknown\" : compiler.getName());\n \n-        systemData.put( \"userLanguage\", Locale.getDefault().getLanguage() );\n-        systemData.put( \"userCountry\", Locale.getDefault().getCountry() );\n-        systemData.put( \"userTimezone\", TimeZone.getDefault().getID() );\n-        systemData.put( \"fileEncoding\",  System.getProperty( \"file.encoding\" ) );\n+        systemData.put(\"userLanguage\", Locale.getDefault().getLanguage());\n+        systemData.put(\"userCountry\", Locale.getDefault().getCountry());\n+        systemData.put(\"userTimezone\", TimeZone.getDefault().getID());\n+        systemData.put(\"fileEncoding\", System.getProperty(\"file.encoding\"));\n \n         Map<String, Object> internalData = new HashMap<>();\n-        internalData.put( \"numSilentQueryCollectionMisses\", numSilentQueryDrops );\n+        internalData.put(\"numSilentQueryCollectionMisses\", numSilentQueryDrops);\n \n         Map<String, Object> metaData = new HashMap<>();\n-        metaData.put( \"graphToken\", graphToken );\n-        metaData.put( \"retrieveTime\", ZonedDateTime.now() );\n-        metaData.put( \"system\", systemData );\n-        metaData.put( \"internal\", internalData );\n+        metaData.put(\"graphToken\", graphToken);\n+        metaData.put(\"retrieveTime\", ZonedDateTime.now());\n+        metaData.put(\"system\", systemData);\n+        metaData.put(\"internal\", internalData);\n \n-        TokensSection.putTokenCounts( metaData, kernel );\n+        TokensSection.putTokenCounts(metaData, kernel);\n \n-        return Stream.of( new RetrieveResult( Sections.META, metaData ) );\n+        return Stream.of(new RetrieveResult(Sections.META, metaData));\n     }\n }\n",
            "diff_size": 32
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}