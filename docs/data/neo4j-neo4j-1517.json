{
    "project_name": "neo4j-neo4j",
    "error_id": "1517",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "41",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "87",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "106",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "128",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "190",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "326",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "326",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "344",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "344",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "362",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "362",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "367",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "374",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "374",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "380",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "380",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1517/StringValue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1517/StringValue.java\nindex 7e1056307f8..b92b0cde5a9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1517/StringValue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1517/StringValue.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.values.storable;\n \n import java.util.List;\n@@ -37,88 +38,86 @@ public abstract class StringValue extends TextValue\n     abstract String value();\n \n     @Override\n-    public boolean equals( Value value )\n+    public boolean equals(Value value)\n     {\n-        return value.equals( value() );\n+        return value.equals(value());\n     }\n \n     @Override\n-    public boolean equals( char x )\n+    public boolean equals(char x)\n     {\n-        return value().length() == 1 && value().charAt( 0 ) == x;\n+        return value().length() == 1 && value().charAt(0) == x;\n     }\n \n     @Override\n-    public boolean equals( String x )\n+    public boolean equals(String x)\n     {\n-        return value().equals( x );\n+        return value().equals(x);\n     }\n \n     @Override\n-    public <E extends Exception> void writeTo( ValueWriter<E> writer ) throws E\n+    public <E extends Exception> void writeTo(ValueWriter<E> writer) throws E\n     {\n-        writer.writeString( value() );\n+        writer.writeString(value());\n     }\n \n     @Override\n     public TextValue toLower()\n     {\n-        return new StringWrappingStringValue( value().toLowerCase() );\n+        return new StringWrappingStringValue(value().toLowerCase());\n     }\n \n     @Override\n     public TextValue toUpper()\n     {\n-        return new StringWrappingStringValue( value().toUpperCase() );\n+        return new StringWrappingStringValue(value().toUpperCase());\n     }\n \n     @Override\n-    public ListValue split( String separator )\n+    public ListValue split(String separator)\n     {\n         assert separator != null;\n         String asString = value();\n         //Cypher has different semantics for the case where the separator\n         //is exactly the value, in cypher we expect two empty arrays\n         //where as java returns an empty array\n-        if ( separator.equals( asString ) )\n+        if (separator.equals(asString))\n         {\n             return EMPTY_SPLIT;\n-        }\n-        else if ( separator.isEmpty() )\n+        } else if (separator.isEmpty())\n         {\n-            return VirtualValues.fromArray( Values.charArray( asString.toCharArray() ) );\n+            return VirtualValues.fromArray(Values.charArray(asString.toCharArray()));\n         }\n \n-        return splitNonRegex( asString, separator );\n+        return splitNonRegex(asString, separator);\n     }\n \n     @Override\n-    public ListValue split( List<String> separators )\n+    public ListValue split(List<String> separators)\n     {\n         assert separators != null;\n         String asString = value();\n         //Cypher has different semantics for the case where the separator\n         //is exactly the value, in cypher we expect two empty arrays\n         //where as java returns an empty array\n-        if ( separators.stream().anyMatch( sep -> sep.equals( asString ) ) )\n+        if (separators.stream().anyMatch(sep -> sep.equals(asString)))\n         {\n             return EMPTY_SPLIT;\n-        }\n-        else if ( separators.stream().anyMatch( String::isEmpty ) )\n+        } else if (separators.stream().anyMatch(String::isEmpty))\n         {\n             String reduced = asString;\n-            for ( var sep : separators )\n+            for (var sep : separators)\n             {\n-                if ( sep.isEmpty() )\n+                if (sep.isEmpty())\n                 {\n                     continue;\n                 }\n-                reduced = reduced.replace( sep, \"\" );\n+                reduced = reduced.replace(sep, \"\");\n             }\n-            return VirtualValues.fromArray( Values.charArray( reduced.toCharArray() ) );\n+            return VirtualValues.fromArray(Values.charArray(reduced.toCharArray()));\n         }\n \n-        return splitNonRegex( asString, separators );\n+        return splitNonRegex(asString, separators);\n     }\n \n     /**\n@@ -128,7 +127,7 @@ public abstract class StringValue extends TextValue\n      * @param delim delimiter, must not be not empty\n      * @return the split string as a List of TextValues\n      */\n-    private static ListValue splitNonRegex( String input, String delim )\n+    private static ListValue splitNonRegex(String input, String delim)\n     {\n         ListValueBuilder substrings = ListValueBuilder.newListBuilder();\n         int offset = 0;\n@@ -136,32 +135,32 @@ public abstract class StringValue extends TextValue\n \n         do\n         {\n-            index = input.indexOf( delim, offset );\n-            offset = updateSubstringsAndOffset( substrings, offset, input, index, delim );\n+            index = input.indexOf(delim, offset);\n+            offset = updateSubstringsAndOffset(substrings, offset, input, index, delim);\n         }\n-        while ( index != -1 );\n+        while (index != -1);\n         return substrings.build();\n     }\n \n     /**\n      * Splits a string with multiple separator strings\n      *\n-     * @param input String to be split\n+     * @param input  String to be split\n      * @param delims delimiters, must not be not empty\n      * @return the split string as a List of TextValues\n      */\n-    private static ListValue splitNonRegex( String input, List<String> delims )\n+    private static ListValue splitNonRegex(String input, List<String> delims)\n     {\n         ListValueBuilder substrings = ListValueBuilder.newListBuilder();\n         int offset = 0;\n-        Pair<Integer,String> nextSubstring;\n+        Pair<Integer, String> nextSubstring;\n \n         do\n         {\n-            nextSubstring = firstIndexOf( input, offset, delims );\n-            offset = updateSubstringsAndOffset( substrings, offset, input, nextSubstring.first(), nextSubstring.other() );\n+            nextSubstring = firstIndexOf(input, offset, delims);\n+            offset = updateSubstringsAndOffset(substrings, offset, input, nextSubstring.first(), nextSubstring.other());\n         }\n-        while ( nextSubstring.first() != -1 );\n+        while (nextSubstring.first() != -1);\n         return substrings.build();\n     }\n \n@@ -169,17 +168,16 @@ public abstract class StringValue extends TextValue\n      * Make decisions based on whether the specified delimiter had been found or not.\n      * If found, add a new substring to the collection, and return a new offset after the delimiter.\n      */\n-    private static int updateSubstringsAndOffset( ListValueBuilder substrings, int offset, String input, int index, String delim )\n+    private static int updateSubstringsAndOffset(ListValueBuilder substrings, int offset, String input, int index, String delim)\n     {\n-        if ( index == -1 )\n+        if (index == -1)\n         {\n-            String substring = input.substring( offset );\n-            substrings.add( Values.stringValue( substring ) );\n-        }\n-        else\n+            String substring = input.substring(offset);\n+            substrings.add(Values.stringValue(substring));\n+        } else\n         {\n-            String substring = input.substring( offset, index );\n-            substrings.add( Values.stringValue( substring ) );\n+            String substring = input.substring(offset, index);\n+            substrings.add(Values.stringValue(substring));\n             offset = index + delim.length();\n         }\n         return offset;\n@@ -189,32 +187,32 @@ public abstract class StringValue extends TextValue\n      * Search the input string, starting at the specified offset, for any of the the specified delimiter strings.\n      * The first delimiter found will be returned with it's starting index position.\n      */\n-    private static Pair<Integer,String> firstIndexOf( String input, int offset, List<String> delims )\n+    private static Pair<Integer, String> firstIndexOf(String input, int offset, List<String> delims)\n     {\n         int firstIndex = -1;\n         String first = null;\n-        for ( var delim : delims )\n+        for (var delim : delims)\n         {\n-            int index = input.indexOf( delim, offset );\n-            if ( index != -1 )\n+            int index = input.indexOf(delim, offset);\n+            if (index != -1)\n             {\n-                if ( first == null || index < firstIndex )\n+                if (first == null || index < firstIndex)\n                 {\n                     first = delim;\n                     firstIndex = index;\n                 }\n             }\n         }\n-        return Pair.of( firstIndex, first );\n+        return Pair.of(firstIndex, first);\n     }\n \n     @Override\n-    public TextValue replace( String find, String replace )\n+    public TextValue replace(String find, String replace)\n     {\n         assert find != null;\n         assert replace != null;\n \n-        return Values.stringValue( value().replace( find, replace ) );\n+        return Values.stringValue(value().replace(find, replace));\n     }\n \n     @Override\n@@ -226,7 +224,7 @@ public abstract class StringValue extends TextValue\n     @Override\n     public String toString()\n     {\n-        return format( \"%s(\\\"%s\\\")\", getTypeName(), value() );\n+        return format(\"%s(\\\"%s\\\")\", getTypeName(), value());\n     }\n \n     @Override\n@@ -244,26 +242,26 @@ public abstract class StringValue extends TextValue\n     @Override\n     public String prettyPrint()\n     {\n-        return format( \"'%s'\", value() );\n+        return format(\"'%s'\", value());\n     }\n \n     @Override\n-    public <T> T map( ValueMapper<T> mapper )\n+    public <T> T map(ValueMapper<T> mapper)\n     {\n-        return mapper.mapString( this );\n+        return mapper.mapString(this);\n     }\n \n     //NOTE: this doesn't respect code point order for code points that doesn't fit 16bits\n     @Override\n-    public int compareTo( TextValue other )\n+    public int compareTo(TextValue other)\n     {\n         String thisString = value();\n         String thatString = other.stringValue();\n-        return thisString.compareTo( thatString );\n+        return thisString.compareTo(thatString);\n     }\n \n     @Override\n-    public boolean isSameValueTypeAs( Value value )\n+    public boolean isSameValueTypeAs(Value value)\n     {\n         return value instanceof StringValue;\n     }\n@@ -277,9 +275,9 @@ public abstract class StringValue extends TextValue\n         }\n \n         @Override\n-        public long updateHash( HashFunction hashFunction, long hash )\n+        public long updateHash(HashFunction hashFunction, long hash)\n         {\n-            return hashFunction.update( hash, 0 ); // Mix in our length; a single zero.\n+            return hashFunction.update(hash, 0); // Mix in our length; a single zero.\n         }\n \n         @Override\n@@ -295,7 +293,7 @@ public abstract class StringValue extends TextValue\n         }\n \n         @Override\n-        public TextValue substring( int start, int end )\n+        public TextValue substring(int start, int end)\n         {\n             return this;\n         }\n@@ -325,25 +323,25 @@ public abstract class StringValue extends TextValue\n         }\n \n         @Override\n-        public TextValue plus( TextValue other )\n+        public TextValue plus(TextValue other)\n         {\n             return other;\n         }\n \n         @Override\n-        public boolean startsWith( TextValue other )\n+        public boolean startsWith(TextValue other)\n         {\n             return other.length() == 0;\n         }\n \n         @Override\n-        public boolean endsWith( TextValue other )\n+        public boolean endsWith(TextValue other)\n         {\n             return other.length() == 0;\n         }\n \n         @Override\n-        public boolean contains( TextValue other )\n+        public boolean contains(TextValue other)\n         {\n             return other.length() == 0;\n         }\n@@ -361,28 +359,27 @@ public abstract class StringValue extends TextValue\n         }\n \n         @Override\n-        public TextValue replace( String find, String replace )\n+        public TextValue replace(String find, String replace)\n         {\n-            if ( find.isEmpty() )\n+            if (find.isEmpty())\n             {\n-                return Values.stringValue( replace );\n-            }\n-            else\n+                return Values.stringValue(replace);\n+            } else\n             {\n                 return this;\n             }\n         }\n \n         @Override\n-        public int compareTo( TextValue other )\n+        public int compareTo(TextValue other)\n         {\n             return -other.length();\n         }\n \n         @Override\n-        Matcher matcher( Pattern pattern )\n+        Matcher matcher(Pattern pattern)\n         {\n-            return pattern.matcher( \"\" );\n+            return pattern.matcher(\"\");\n         }\n \n         @Override\n",
            "diff_size": 74
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}