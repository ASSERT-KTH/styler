{
    "project_name": "neo4j-neo4j",
    "error_id": "60",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "71",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "128",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "124",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "139",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "75",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "144",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "155",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "21",
                    "severity": "error",
                    "message": "'}' at column 21 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "120",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "29",
                    "severity": "error",
                    "message": "'}' at column 29 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "169",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "119",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "29",
                    "severity": "error",
                    "message": "'}' at column 29 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "219",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "117",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "121",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "21",
                    "severity": "error",
                    "message": "'}' at column 21 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "274",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "287",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "68",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "344",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "344",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "356",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "356",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "358",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "358",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "360",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "360",
                    "column": "149",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "370",
                    "column": "73",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "370",
                    "column": "152",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "80",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "379",
                    "column": "120",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "381",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "381",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "383",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "383",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "389",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "389",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "391",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "391",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "401",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "401",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/60/RelationshipModifier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/60/RelationshipModifier.java\nindex 1d152b063af..0530609e01b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/60/RelationshipModifier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/60/RelationshipModifier.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.recordstorage;\n \n import org.eclipse.collections.api.map.primitive.MutableLongObjectMap;\n@@ -67,186 +68,183 @@ public class RelationshipModifier\n     private final RelationshipCreator creator;\n     private final RelationshipDeleter deleter;\n \n-    public RelationshipModifier( RelationshipGroupGetter relGroupGetter, PropertyDeleter propertyChainDeleter, int denseNodeThreshold,\n-            boolean relaxedLockingForDenseNodes, PageCursorTracer cursorTracer, MemoryTracker memoryTracker )\n+    public RelationshipModifier(RelationshipGroupGetter relGroupGetter, PropertyDeleter propertyChainDeleter, int denseNodeThreshold,\n+                                boolean relaxedLockingForDenseNodes, PageCursorTracer cursorTracer, MemoryTracker memoryTracker)\n     {\n         this.relGroupGetter = relGroupGetter;\n         this.denseNodeThreshold = denseNodeThreshold;\n         this.cursorTracer = cursorTracer;\n         this.memoryTracker = memoryTracker;\n         long externalDegreesThreshold = relaxedLockingForDenseNodes ? DEFAULT_EXTERNAL_DEGREES_THRESHOLD_SWITCH : Long.MAX_VALUE;\n-        this.creator = new RelationshipCreator( denseNodeThreshold, externalDegreesThreshold, cursorTracer );\n-        this.deleter = new RelationshipDeleter( relGroupGetter, propertyChainDeleter, externalDegreesThreshold, cursorTracer );\n+        this.creator = new RelationshipCreator(denseNodeThreshold, externalDegreesThreshold, cursorTracer);\n+        this.deleter = new RelationshipDeleter(relGroupGetter, propertyChainDeleter, externalDegreesThreshold, cursorTracer);\n     }\n \n-    public void modifyRelationships( RelationshipModifications modifications, RecordAccessSet recordChanges,\n-            RelationshipGroupDegreesStore.Updater groupDegreesUpdater, ResourceLocker locks, LockTracer lockTracer )\n+    public void modifyRelationships(RelationshipModifications modifications, RecordAccessSet recordChanges,\n+                                    RelationshipGroupDegreesStore.Updater groupDegreesUpdater, ResourceLocker locks, LockTracer lockTracer)\n     {\n-        try ( HeapTrackingLongObjectHashMap<NodeContext> contexts = newLongObjectMap( memoryTracker ) )\n+        try (HeapTrackingLongObjectHashMap<NodeContext> contexts = newLongObjectMap(memoryTracker))\n         {\n-            MappedNodeDataLookup nodeDataLookup = new MappedNodeDataLookup( contexts, relGroupGetter, recordChanges, cursorTracer, memoryTracker );\n+            MappedNodeDataLookup nodeDataLookup = new MappedNodeDataLookup(contexts, relGroupGetter, recordChanges, cursorTracer, memoryTracker);\n             // Acquire most locks\n-            acquireMostOfTheNodeAndGroupsLocks( modifications, recordChanges, locks, lockTracer, contexts, nodeDataLookup );\n-            acquireRelationshipLocksAndSomeOthers( modifications, recordChanges, locks, lockTracer, contexts );\n+            acquireMostOfTheNodeAndGroupsLocks(modifications, recordChanges, locks, lockTracer, contexts, nodeDataLookup);\n+            acquireRelationshipLocksAndSomeOthers(modifications, recordChanges, locks, lockTracer, contexts);\n \n             // Do the modifications\n-            creator.relationshipCreate( modifications.creations(), recordChanges, groupDegreesUpdater, nodeDataLookup );\n-            deleter.relationshipDelete( modifications.deletions(), recordChanges, groupDegreesUpdater, nodeDataLookup,\n-                    locks /*no lock tracing because no blocking acquisitions*/ );\n+            creator.relationshipCreate(modifications.creations(), recordChanges, groupDegreesUpdater, nodeDataLookup);\n+            deleter.relationshipDelete(modifications.deletions(), recordChanges, groupDegreesUpdater, nodeDataLookup,\n+              locks /*no lock tracing because no blocking acquisitions*/);\n         }\n     }\n \n-    private void acquireMostOfTheNodeAndGroupsLocks( RelationshipModifications modifications, RecordAccessSet recordChanges, ResourceLocker locks,\n-            LockTracer lockTracer, MutableLongObjectMap<NodeContext> contexts, MappedNodeDataLookup nodeDataLookup )\n+    private void acquireMostOfTheNodeAndGroupsLocks(RelationshipModifications modifications, RecordAccessSet recordChanges, ResourceLocker locks,\n+                                                    LockTracer lockTracer, MutableLongObjectMap<NodeContext> contexts, MappedNodeDataLookup nodeDataLookup)\n     {\n-        modifications.forEachSplit( byNode ->\n+        modifications.forEachSplit(byNode ->\n         {\n             long nodeId = byNode.nodeId();\n-            RecordProxy<NodeRecord,Void> nodeProxy = recordChanges.getNodeRecords().getOrLoad( nodeId, null, cursorTracer );\n+            RecordProxy<NodeRecord, Void> nodeProxy = recordChanges.getNodeRecords().getOrLoad(nodeId, null, cursorTracer);\n             NodeRecord node = nodeProxy.forReadingLinkage();\n             boolean nodeIsAddedInTx = node.isCreated();\n-            if ( !node.isDense() )\n+            if (!node.isDense())\n             {\n-                if ( !nodeIsAddedInTx ) // to avoid locking unnecessarily\n+                if (!nodeIsAddedInTx) // to avoid locking unnecessarily\n                 {\n-                    locks.acquireExclusive( lockTracer, NODE, nodeId );\n-                    nodeProxy = recordChanges.getNodeRecords().getOrLoad( nodeId, null, cursorTracer );\n+                    locks.acquireExclusive(lockTracer, NODE, nodeId);\n+                    nodeProxy = recordChanges.getNodeRecords().getOrLoad(nodeId, null, cursorTracer);\n                     node = nodeProxy.forReadingLinkage();\n-                    if ( node.isDense() )\n+                    if (node.isDense())\n                     {\n                         //another tx just turned dense, unlock and let it be handled below\n-                        locks.releaseExclusive( NODE, nodeId );\n-                    }\n-                    else if ( byNode.hasCreations() )\n+                        locks.releaseExclusive(NODE, nodeId);\n+                    } else if (byNode.hasCreations())\n                     {\n                         // The creation code after locking might turn this node dense, at which point the group lock will be needed, so lock it\n-                        locks.acquireExclusive( lockTracer, RELATIONSHIP_GROUP, nodeId );\n+                        locks.acquireExclusive(lockTracer, RELATIONSHIP_GROUP, nodeId);\n                     }\n                 }\n             }\n \n-            if ( node.isDense() )\n+            if (node.isDense())\n             {\n-                locks.acquireShared( lockTracer, RELATIONSHIP_GROUP, nodeId ); //stabilize first in chains, in case they are deleted or needed for chain degrees\n+                locks.acquireShared(lockTracer, RELATIONSHIP_GROUP, nodeId); //stabilize first in chains, in case they are deleted or needed for chain degrees\n                 // Creations\n-                NodeContext nodeContext = NodeContext.createNodeContext( nodeProxy, memoryTracker );\n-                contexts.put( nodeId, nodeContext );\n-                if ( byNode.hasCreations() )\n+                NodeContext nodeContext = NodeContext.createNodeContext(nodeProxy, memoryTracker);\n+                contexts.put(nodeId, nodeContext);\n+                if (byNode.hasCreations())\n                 {\n-                    byNode.forEachCreationSplit( byType ->\n+                    byNode.forEachCreationSplit(byType ->\n                     {\n-                        RelationshipGroupGetter.RelationshipGroupPosition groupPosition = relGroupGetter.getRelationshipGroup( nodeContext.groupStartingPrevId,\n-                                nodeContext.groupStartingId, byType.type(), recordChanges.getRelGroupRecords(), group ->\n-                                {\n-                                    if ( group.getType() != byType.type() )\n-                                    {\n-                                        nodeContext.checkEmptyGroup( group );\n-                                    }\n-                                } );\n-                        nodeContext.setCurrentGroup( groupPosition.group() != null ? groupPosition.group() : groupPosition.closestPrevious() );\n-                        RecordProxy<RelationshipGroupRecord,Integer> groupProxy = groupPosition.group();\n-                        if ( groupProxy == null )\n+                        RelationshipGroupGetter.RelationshipGroupPosition groupPosition = relGroupGetter.getRelationshipGroup(nodeContext.groupStartingPrevId,\n+                          nodeContext.groupStartingId, byType.type(), recordChanges.getRelGroupRecords(), group ->\n+                          {\n+                              if (group.getType() != byType.type())\n+                              {\n+                                  nodeContext.checkEmptyGroup(group);\n+                              }\n+                          });\n+                        nodeContext.setCurrentGroup(groupPosition.group() != null ? groupPosition.group() : groupPosition.closestPrevious());\n+                        RecordProxy<RelationshipGroupRecord, Integer> groupProxy = groupPosition.group();\n+                        if (groupProxy == null)\n                         {\n-                            if ( !nodeContext.hasExclusiveGroupLock() )\n+                            if (!nodeContext.hasExclusiveGroupLock())\n                             {\n-                                locks.releaseShared( RELATIONSHIP_GROUP, nodeId );\n-                                locks.acquireExclusive( lockTracer, NODE, nodeId );\n-                                locks.acquireExclusive( lockTracer, RELATIONSHIP_GROUP, nodeId );\n+                                locks.releaseShared(RELATIONSHIP_GROUP, nodeId);\n+                                locks.acquireExclusive(lockTracer, NODE, nodeId);\n+                                locks.acquireExclusive(lockTracer, RELATIONSHIP_GROUP, nodeId);\n                             }\n-                            nodeContext.setNode( recordChanges.getNodeRecords().getOrLoad( nodeId, null, cursorTracer ) );\n+                            nodeContext.setNode(recordChanges.getNodeRecords().getOrLoad(nodeId, null, cursorTracer));\n                             long groupStartingId = nodeContext.node().forReadingLinkage().getNextRel();\n                             long groupStartingPrevId = NULL_REFERENCE.longValue();\n-                            if ( groupPosition.closestPrevious() != null )\n+                            if (groupPosition.closestPrevious() != null)\n                             {\n                                 groupStartingId = groupPosition.closestPrevious().getKey();\n                                 groupStartingPrevId = groupPosition.closestPrevious().forReadingLinkage().getPrev();\n                             }\n-                            groupProxy = relGroupGetter.getOrCreateRelationshipGroup( nodeContext.node(), byType.type(), recordChanges.getRelGroupRecords(),\n-                                    groupStartingPrevId, groupStartingId );\n-                            if ( !nodeContext.hasExclusiveGroupLock() )\n+                            groupProxy = relGroupGetter.getOrCreateRelationshipGroup(nodeContext.node(), byType.type(), recordChanges.getRelGroupRecords(),\n+                              groupStartingPrevId, groupStartingId);\n+                            if (!nodeContext.hasExclusiveGroupLock())\n                             {\n                                 nodeContext.markExclusiveGroupLock();\n-                            }\n-                            else if ( groupProxy.isCreated() )\n+                            } else if (groupProxy.isCreated())\n                             {\n                                 nodeContext.clearDenseContext(); //When a new group is created we can no longer trust the pointers of the cache\n                             }\n                         }\n-                        nodeContext.denseContext( byType.type() ).setGroup( groupProxy );\n-                    } );\n+                        nodeContext.denseContext(byType.type()).setGroup(groupProxy);\n+                    });\n \n-                    if ( !nodeContext.hasExclusiveGroupLock() )\n+                    if (!nodeContext.hasExclusiveGroupLock())\n                     {\n-                        byNode.forEachCreationSplitInterruptible( byType ->\n+                        byNode.forEachCreationSplitInterruptible(byType ->\n                         {\n-                            RelationshipGroupRecord group = nodeContext.denseContext( byType.type() ).group().forReadingLinkage();\n-                            if ( byType.hasOut() && (!group.hasExternalDegreesOut() || isNull( group.getFirstOut() ) )\n-                                    || byType.hasIn() && (!group.hasExternalDegreesIn() || isNull( group.getFirstIn() ) )\n-                                    || byType.hasLoop() && (!group.hasExternalDegreesLoop() || isNull( group.getFirstLoop() ) ) )\n+                            RelationshipGroupRecord group = nodeContext.denseContext(byType.type()).group().forReadingLinkage();\n+                            if (byType.hasOut() && (!group.hasExternalDegreesOut() || isNull(group.getFirstOut()))\n+                              || byType.hasIn() && (!group.hasExternalDegreesIn() || isNull(group.getFirstIn()))\n+                              || byType.hasLoop() && (!group.hasExternalDegreesLoop() || isNull(group.getFirstLoop())))\n                             {\n-                                locks.releaseShared( RELATIONSHIP_GROUP, nodeId );\n-                                locks.acquireExclusive( lockTracer, RELATIONSHIP_GROUP, nodeId );\n+                                locks.releaseShared(RELATIONSHIP_GROUP, nodeId);\n+                                locks.acquireExclusive(lockTracer, RELATIONSHIP_GROUP, nodeId);\n                                 nodeContext.markExclusiveGroupLock();\n                                 return true;\n                             }\n                             return false;\n-                        } );\n+                        });\n                     }\n                 }\n \n                 // Deletions\n-                if ( byNode.hasDeletions() )\n+                if (byNode.hasDeletions())\n                 {\n-                    if ( !nodeContext.hasExclusiveGroupLock() )\n+                    if (!nodeContext.hasExclusiveGroupLock())\n                     {\n-                        byNode.forEachDeletionSplitInterruptible( byType ->\n+                        byNode.forEachDeletionSplitInterruptible(byType ->\n                         {\n-                            NodeContext.DenseContext denseContext = nodeContext.denseContext( byType.type() );\n-                            RelationshipGroupRecord group = denseContext.getOrLoadGroup( relGroupGetter, nodeContext.node().forReadingLinkage(), byType.type(),\n-                                    recordChanges.getRelGroupRecords(), cursorTracer );\n-                            if ( byType.hasOut() && !group.hasExternalDegreesOut()\n-                                    || byType.hasIn() && !group.hasExternalDegreesIn()\n-                                    || byType.hasLoop() && !group.hasExternalDegreesLoop() )\n+                            NodeContext.DenseContext denseContext = nodeContext.denseContext(byType.type());\n+                            RelationshipGroupRecord group = denseContext.getOrLoadGroup(relGroupGetter, nodeContext.node().forReadingLinkage(), byType.type(),\n+                              recordChanges.getRelGroupRecords(), cursorTracer);\n+                            if (byType.hasOut() && !group.hasExternalDegreesOut()\n+                              || byType.hasIn() && !group.hasExternalDegreesIn()\n+                              || byType.hasLoop() && !group.hasExternalDegreesLoop())\n                             {\n-                                locks.releaseShared( RELATIONSHIP_GROUP, nodeId );\n-                                locks.acquireExclusive( lockTracer, RELATIONSHIP_GROUP, nodeId );\n+                                locks.releaseShared(RELATIONSHIP_GROUP, nodeId);\n+                                locks.acquireExclusive(lockTracer, RELATIONSHIP_GROUP, nodeId);\n                                 nodeContext.markExclusiveGroupLock();\n                                 return true;\n-                            }\n-                            else\n+                            } else\n                             {\n-                                boolean hasAnyFirst = batchContains( byType.out(), group.getFirstOut() )\n-                                        || batchContains( byType.in(), group.getFirstIn() )\n-                                        || batchContains( byType.loop(), group.getFirstLoop() );\n-                                if ( hasAnyFirst )\n+                                boolean hasAnyFirst = batchContains(byType.out(), group.getFirstOut())\n+                                  || batchContains(byType.in(), group.getFirstIn())\n+                                  || batchContains(byType.loop(), group.getFirstLoop());\n+                                if (hasAnyFirst)\n                                 {\n-                                    locks.releaseShared( RELATIONSHIP_GROUP, nodeId );\n-                                    locks.acquireExclusive( lockTracer, RELATIONSHIP_GROUP, nodeId );\n+                                    locks.releaseShared(RELATIONSHIP_GROUP, nodeId);\n+                                    locks.acquireExclusive(lockTracer, RELATIONSHIP_GROUP, nodeId);\n                                     nodeContext.markExclusiveGroupLock();\n                                     return true;\n                                 }\n                             }\n                             return false;\n-                        } );\n+                        });\n                     }\n                 }\n \n                 // Look for an opportunity to delete empty groups that we noticed while looking for groups above\n-                if ( nodeContext.hasExclusiveGroupLock() && nodeContext.hasAnyEmptyGroup() )\n+                if (nodeContext.hasExclusiveGroupLock() && nodeContext.hasAnyEmptyGroup())\n                 {\n                     // There may to be one or more empty groups that we can delete\n-                    if ( locks.tryExclusiveLock( NODE_RELATIONSHIP_GROUP_DELETE, nodeId ) )\n+                    if (locks.tryExclusiveLock(NODE_RELATIONSHIP_GROUP_DELETE, nodeId))\n                     {\n                         // We got the EXCLUSIVE group lock so we can go ahead and try to remove any potentially empty groups\n-                        if ( !nodeContext.hasEmptyFirstGroup() || locks.tryExclusiveLock( NODE, nodeId ) )\n+                        if (!nodeContext.hasEmptyFirstGroup() || locks.tryExclusiveLock(NODE, nodeId))\n                         {\n-                            if ( nodeContext.hasEmptyFirstGroup() )\n+                            if (nodeContext.hasEmptyFirstGroup())\n                             {\n                                 // It's possible that we need to delete the first group, i.e. we just now locked the node and therefore need to re-read it\n-                                nodeContext.setNode( recordChanges.getNodeRecords().getOrLoad( nodeId, null, cursorTracer ) );\n+                                nodeContext.setNode(recordChanges.getNodeRecords().getOrLoad(nodeId, null, cursorTracer));\n                             }\n-                            Predicate<RelationshipGroupRecord> canDeleteGroup = group -> !byNode.hasCreations( group.getType() );\n-                            if ( relGroupGetter.deleteEmptyGroups( nodeContext.node(), canDeleteGroup, nodeDataLookup ) )\n+                            Predicate<RelationshipGroupRecord> canDeleteGroup = group -> !byNode.hasCreations(group.getType());\n+                            if (relGroupGetter.deleteEmptyGroups(nodeContext.node(), canDeleteGroup, nodeDataLookup))\n                             {\n                                 nodeContext.clearDenseContext();\n                             }\n@@ -254,153 +252,154 @@ public class RelationshipModifier\n                     }\n                 }\n             }\n-        } );\n+        });\n     }\n \n-    private void acquireRelationshipLocksAndSomeOthers( RelationshipModifications modifications, RecordAccessSet recordChanges, ResourceLocker locks,\n-            LockTracer lockTracer, MutableLongObjectMap<NodeContext> contexts )\n+    private void acquireRelationshipLocksAndSomeOthers(RelationshipModifications modifications, RecordAccessSet recordChanges, ResourceLocker locks,\n+                                                       LockTracer lockTracer, MutableLongObjectMap<NodeContext> contexts)\n     {\n-        RecordAccess<RelationshipRecord,Void> relRecords = recordChanges.getRelRecords();\n-        modifications.forEachSplit( byNode ->\n+        RecordAccess<RelationshipRecord, Void> relRecords = recordChanges.getRelRecords();\n+        modifications.forEachSplit(byNode ->\n         {\n             long nodeId = byNode.nodeId();\n-            NodeRecord node = recordChanges.getNodeRecords().getOrLoad( nodeId, null, cursorTracer ).forReadingLinkage();\n+            NodeRecord node = recordChanges.getNodeRecords().getOrLoad(nodeId, null, cursorTracer).forReadingLinkage();\n \n-            if ( !node.isDense() )\n+            if (!node.isDense())\n             {\n-                if ( !checkAndLockRelationshipsIfNodeIsGoingToBeDense( node, byNode, relRecords, locks, lockTracer ) )\n+                if (!checkAndLockRelationshipsIfNodeIsGoingToBeDense(node, byNode, relRecords, locks, lockTracer))\n                 {\n-                    if ( byNode.hasDeletions() )\n+                    if (byNode.hasDeletions())\n                     {\n-                        lockRelationshipsInOrder( byNode.deletions(), node.getNextRel(), relRecords, locks, cursorTracer, memoryTracker );\n-                    }\n-                    else if ( byNode.hasCreations() )\n+                        lockRelationshipsInOrder(byNode.deletions(), node.getNextRel(), relRecords, locks, cursorTracer, memoryTracker);\n+                    } else if (byNode.hasCreations())\n                     {\n                         //First rel is taken if we don't have any deletions!\n                         long firstRel = node.getNextRel();\n-                        if ( !isNull( firstRel ) )\n+                        if (!isNull(firstRel))\n                         {\n-                            locks.acquireExclusive( lockTracer, RELATIONSHIP, firstRel );\n+                            locks.acquireExclusive(lockTracer, RELATIONSHIP, firstRel);\n                         }\n                     }\n                 }\n-            }\n-            else\n+            } else\n             {\n-                NodeContext nodeContext = contexts.get( nodeId );\n-                if ( byNode.hasDeletions() )\n+                NodeContext nodeContext = contexts.get(nodeId);\n+                if (byNode.hasDeletions())\n                 {\n-                    byNode.forEachDeletionSplit( byType ->\n+                    byNode.forEachDeletionSplit(byType ->\n                     {\n-                        NodeContext.DenseContext context = nodeContext.denseContext( byType.type() );\n+                        NodeContext.DenseContext context = nodeContext.denseContext(byType.type());\n                         RelationshipGroupRecord group =\n-                                context.getOrLoadGroup( relGroupGetter, node, byType.type(), recordChanges.getRelGroupRecords(), cursorTracer );\n+                          context.getOrLoadGroup(relGroupGetter, node, byType.type(), recordChanges.getRelGroupRecords(), cursorTracer);\n                         long outFirstInChainForDegrees = !group.hasExternalDegreesOut() ? group.getFirstOut() : NULL_REFERENCE.longValue();\n                         long inFirstInChainForDegrees = !group.hasExternalDegreesIn() ? group.getFirstIn() : NULL_REFERENCE.longValue();\n                         long loopFirstInChainForDegrees = !group.hasExternalDegreesLoop() ? group.getFirstLoop() : NULL_REFERENCE.longValue();\n-                        lockRelationshipsInOrder( byType.out(), outFirstInChainForDegrees, relRecords, locks, cursorTracer, memoryTracker );\n-                        lockRelationshipsInOrder( byType.in(), inFirstInChainForDegrees, relRecords, locks, cursorTracer, memoryTracker );\n-                        lockRelationshipsInOrder( byType.loop(), loopFirstInChainForDegrees, relRecords, locks, cursorTracer, memoryTracker );\n+                        lockRelationshipsInOrder(byType.out(), outFirstInChainForDegrees, relRecords, locks, cursorTracer, memoryTracker);\n+                        lockRelationshipsInOrder(byType.in(), inFirstInChainForDegrees, relRecords, locks, cursorTracer, memoryTracker);\n+                        lockRelationshipsInOrder(byType.loop(), loopFirstInChainForDegrees, relRecords, locks, cursorTracer, memoryTracker);\n \n-                        context.setEntryPoint( DIR_OUT, entrypointFromDeletion( byType.out(), relRecords ) );\n-                        context.setEntryPoint( DIR_IN, entrypointFromDeletion( byType.in(), relRecords ) );\n-                        context.setEntryPoint( DIR_LOOP, entrypointFromDeletion( byType.loop(), relRecords ) );\n-                    } );\n+                        context.setEntryPoint(DIR_OUT, entrypointFromDeletion(byType.out(), relRecords));\n+                        context.setEntryPoint(DIR_IN, entrypointFromDeletion(byType.in(), relRecords));\n+                        context.setEntryPoint(DIR_LOOP, entrypointFromDeletion(byType.loop(), relRecords));\n+                    });\n                 }\n \n-                if ( byNode.hasCreations() )\n+                if (byNode.hasCreations())\n                 {\n-                    byNode.forEachCreationSplit( byType ->\n+                    byNode.forEachCreationSplit(byType ->\n                     {\n-                        NodeContext.DenseContext context = nodeContext.denseContext( byType.type() );\n+                        NodeContext.DenseContext context = nodeContext.denseContext(byType.type());\n                         RelationshipGroupRecord group =\n-                                context.getOrLoadGroup( relGroupGetter, node, byType.type(), recordChanges.getRelGroupRecords(), cursorTracer );\n-                        context.setEntryPoint( DIR_OUT, findAndLockEntrypointForDense(\n-                                byType.out(), context.entryPoint( DIR_OUT ), relRecords, locks, lockTracer, group, DirectionWrapper.OUTGOING, nodeId ) );\n-                        context.setEntryPoint( DIR_IN, findAndLockEntrypointForDense(\n-                                byType.in(), context.entryPoint( DIR_IN ), relRecords, locks, lockTracer, group, DirectionWrapper.INCOMING, nodeId ) );\n-                        context.setEntryPoint( DIR_LOOP, findAndLockEntrypointForDense(\n-                                byType.loop(), context.entryPoint( DIR_LOOP ), relRecords, locks, lockTracer, group, DirectionWrapper.LOOP, nodeId ) );\n+                          context.getOrLoadGroup(relGroupGetter, node, byType.type(), recordChanges.getRelGroupRecords(), cursorTracer);\n+                        context.setEntryPoint(DIR_OUT, findAndLockEntrypointForDense(\n+                          byType.out(), context.entryPoint(DIR_OUT), relRecords, locks, lockTracer, group, DirectionWrapper.OUTGOING, nodeId));\n+                        context.setEntryPoint(DIR_IN, findAndLockEntrypointForDense(\n+                          byType.in(), context.entryPoint(DIR_IN), relRecords, locks, lockTracer, group, DirectionWrapper.INCOMING, nodeId));\n+                        context.setEntryPoint(DIR_LOOP, findAndLockEntrypointForDense(\n+                          byType.loop(), context.entryPoint(DIR_LOOP), relRecords, locks, lockTracer, group, DirectionWrapper.LOOP, nodeId));\n                         context.markEntryPointsAsChanged();\n-                    } );\n+                    });\n                 }\n \n-                if ( !nodeContext.hasExclusiveGroupLock() )\n+                if (!nodeContext.hasExclusiveGroupLock())\n                 {\n                     // we no longer need the read lock, as all we either locked the first in chains, or have exclusive lock\n-                    locks.releaseShared( RELATIONSHIP_GROUP, byNode.nodeId() );\n+                    locks.releaseShared(RELATIONSHIP_GROUP, byNode.nodeId());\n                 }\n             }\n-        } );\n+        });\n     }\n \n-    private boolean checkAndLockRelationshipsIfNodeIsGoingToBeDense( NodeRecord node, RelationshipModifications.NodeRelationshipIds byNode,\n-            RecordAccess<RelationshipRecord,Void> relRecords, ResourceLocker locks, LockTracer lockTracer )\n+    private boolean checkAndLockRelationshipsIfNodeIsGoingToBeDense(NodeRecord node, RelationshipModifications.NodeRelationshipIds byNode,\n+                                                                    RecordAccess<RelationshipRecord, Void> relRecords, ResourceLocker locks,\n+                                                                    LockTracer lockTracer)\n     {\n         long nextRel = node.getNextRel();\n-        if ( !isNull( nextRel ) )\n+        if (!isNull(nextRel))\n         {\n-            RelationshipRecord rel = relRecords.getOrLoad( nextRel, null, cursorTracer ).forReadingData();\n+            RelationshipRecord rel = relRecords.getOrLoad(nextRel, null, cursorTracer).forReadingData();\n             long nodeId = node.getId();\n-            if ( !rel.isFirstInChain( nodeId ) )\n+            if (!rel.isFirstInChain(nodeId))\n             {\n-                throw new IllegalStateException( \"Expected node \" + rel + \" to be first in chain for node \" + nodeId );\n+                throw new IllegalStateException(\"Expected node \" + rel + \" to be first in chain for node \" + nodeId);\n             }\n-            int currentDegree = relCount( nodeId, rel );\n-            if ( currentDegree + byNode.creations().size() >= denseNodeThreshold )\n+            int currentDegree = relCount(nodeId, rel);\n+            if (currentDegree + byNode.creations().size() >= denseNodeThreshold)\n             {\n                 long[] ids = new long[currentDegree];\n                 int index = 0;\n                 do\n                 {\n                     ids[index++] = nextRel;\n-                    nextRel = relRecords.getOrLoad( nextRel, null, cursorTracer ).forReadingData().getNextRel( nodeId );\n+                    nextRel = relRecords.getOrLoad(nextRel, null, cursorTracer).forReadingData().getNextRel(nodeId);\n                 }\n-                while ( !isNull( nextRel ) );\n+                while (!isNull(nextRel));\n \n-                if ( index != currentDegree )\n+                if (index != currentDegree)\n                 {\n-                    throw new IllegalStateException( \"Degree \" + currentDegree + \" for \" + node + \" doesn't match actual relationship count \" + index );\n+                    throw new IllegalStateException(\"Degree \" + currentDegree + \" for \" + node + \" doesn't match actual relationship count \" + index);\n                 }\n-                Arrays.sort( ids );\n-                locks.acquireExclusive( lockTracer, RELATIONSHIP, ids );\n+                Arrays.sort(ids);\n+                locks.acquireExclusive(lockTracer, RELATIONSHIP, ids);\n                 return true;\n             }\n         }\n         return false;\n     }\n \n-    private RecordProxy<RelationshipRecord,Void> entrypointFromDeletion( RelationshipBatch deletions, RecordAccess<RelationshipRecord,Void> relRecords )\n+    private RecordProxy<RelationshipRecord, Void> entrypointFromDeletion(RelationshipBatch deletions, RecordAccess<RelationshipRecord, Void> relRecords)\n     {\n-        return deletions.isEmpty() ? null : relRecords.getOrLoad( deletions.first(), null, ALWAYS, cursorTracer );\n+        return deletions.isEmpty() ? null : relRecords.getOrLoad(deletions.first(), null, ALWAYS, cursorTracer);\n     }\n \n-    private RecordProxy<RelationshipRecord,Void> findAndLockEntrypointForDense( RelationshipBatch creations,\n-            RecordProxy<RelationshipRecord,Void> potentialEntrypointFromDeletion, RecordAccess<RelationshipRecord,Void> relRecords, ResourceLocker locks,\n-            LockTracer lockTracer, RelationshipGroupRecord group, DirectionWrapper direction, long nodeId )\n+    private RecordProxy<RelationshipRecord, Void> findAndLockEntrypointForDense(RelationshipBatch creations,\n+                                                                                RecordProxy<RelationshipRecord, Void> potentialEntrypointFromDeletion,\n+                                                                                RecordAccess<RelationshipRecord, Void> relRecords, ResourceLocker locks,\n+                                                                                LockTracer lockTracer, RelationshipGroupRecord group,\n+                                                                                DirectionWrapper direction, long nodeId)\n     {\n-        if ( !creations.isEmpty() )\n+        if (!creations.isEmpty())\n         {\n-            if ( potentialEntrypointFromDeletion != null )\n+            if (potentialEntrypointFromDeletion != null)\n             {\n                 return potentialEntrypointFromDeletion;\n             }\n             // If we get here then there are no deletions on this chain and we have the RELATIONSHIP_GROUP SHARED Lock\n-            long firstInChain = direction.getNextRel( group );\n-            if ( !isNull( firstInChain ) )\n+            long firstInChain = direction.getNextRel(group);\n+            if (!isNull(firstInChain))\n             {\n-                if ( !direction.hasExternalDegrees( group ) )\n+                if (!direction.hasExternalDegrees(group))\n                 {\n-                    locks.acquireExclusive( lockTracer, RELATIONSHIP, firstInChain );\n+                    locks.acquireExclusive(lockTracer, RELATIONSHIP, firstInChain);\n                 }\n-                return findAndLockEntrypoint( firstInChain, nodeId, relRecords, locks, lockTracer, cursorTracer );\n+                return findAndLockEntrypoint(firstInChain, nodeId, relRecords, locks, lockTracer, cursorTracer);\n             }\n         }\n         return null;\n     }\n \n-    private static boolean batchContains( RelationshipBatch batch, long id )\n+    private static boolean batchContains(RelationshipBatch batch, long id)\n     {\n-        return !isNull( id ) && batch.contains( id );\n+        return !isNull(id) && batch.contains(id);\n     }\n }\n",
            "diff_size": 166
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/60/RelationshipModifier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/60/RelationshipModifier.java\nindex 1d152b063af..1f93453b061 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/60/RelationshipModifier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/60/RelationshipModifier.java\n@@ -205,8 +205,7 @@ public class RelationshipModifier\n                             RelationshipGroupRecord group = denseContext.getOrLoadGroup( relGroupGetter, nodeContext.node().forReadingLinkage(), byType.type(),\n                                     recordChanges.getRelGroupRecords(), cursorTracer );\n                             if ( byType.hasOut() && !group.hasExternalDegreesOut()\n-                                    || byType.hasIn() && !group.hasExternalDegreesIn()\n-                                    || byType.hasLoop() && !group.hasExternalDegreesLoop() )\n+                                    || byType.hasIn() && !group.hasExternalDegreesIn() || byType.hasLoop() && !group.hasExternalDegreesLoop() )\n                             {\n                                 locks.releaseShared( RELATIONSHIP_GROUP, nodeId );\n                                 locks.acquireExclusive( lockTracer, RELATIONSHIP_GROUP, nodeId );\n@@ -215,8 +214,7 @@ public class RelationshipModifier\n                             }\n                             else\n                             {\n-                                boolean hasAnyFirst = batchContains( byType.out(), group.getFirstOut() )\n-                                        || batchContains( byType.in(), group.getFirstIn() )\n+                                boolean hasAnyFirst = batchContains( byType.out(), group.getFirstOut() ) || batchContains( byType.in(), group.getFirstIn() )\n                                         || batchContains( byType.loop(), group.getFirstLoop() );\n                                 if ( hasAnyFirst )\n                                 {\n@@ -403,4 +401,4 @@ public class RelationshipModifier\n     {\n         return !isNull( id ) && batch.contains( id );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}