{
    "project_name": "graphfoundation-ongdb",
    "error_id": "373",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "51",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/373/PropertyKeyTokenStore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/373/PropertyKeyTokenStore.java\nindex 1bd875d6a89..74eeb138b3a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/373/PropertyKeyTokenStore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/373/PropertyKeyTokenStore.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store;\n \n import java.io.File;\n@@ -36,28 +37,28 @@ import org.neo4j.storageengine.api.Token;\n  */\n public class PropertyKeyTokenStore extends TokenStore<PropertyKeyTokenRecord, Token>\n {\n-    // Historical type descriptor, should be called PropertyKeyTokenStore\n-    public static final String TYPE_DESCRIPTOR = \"PropertyIndexStore\";\n+  // Historical type descriptor, should be called PropertyKeyTokenStore\n+  public static final String TYPE_DESCRIPTOR = \"PropertyIndexStore\";\n \n-    public PropertyKeyTokenStore(\n-            File fileName,\n-            Config config,\n-            IdGeneratorFactory idGeneratorFactory,\n-            PageCache pageCache,\n-            LogProvider logProvider,\n-            DynamicStringStore nameStore,\n-            RecordFormats recordFormats,\n-            OpenOption... openOptions )\n-    {\n-        super( fileName, config, IdType.PROPERTY_KEY_TOKEN, idGeneratorFactory, pageCache, logProvider, nameStore,\n-                TYPE_DESCRIPTOR, new Token.Factory(), recordFormats.propertyKeyToken(), recordFormats.storeVersion(),\n-                openOptions );\n-    }\n+  public PropertyKeyTokenStore(\n+      File fileName,\n+      Config config,\n+      IdGeneratorFactory idGeneratorFactory,\n+      PageCache pageCache,\n+      LogProvider logProvider,\n+      DynamicStringStore nameStore,\n+      RecordFormats recordFormats,\n+      OpenOption... openOptions)\n+  {\n+    super(fileName, config, IdType.PROPERTY_KEY_TOKEN, idGeneratorFactory, pageCache, logProvider, nameStore,\n+        TYPE_DESCRIPTOR, new Token.Factory(), recordFormats.propertyKeyToken(), recordFormats.storeVersion(),\n+        openOptions);\n+  }\n \n-    @Override\n-    public <FAILURE extends Exception> void accept( RecordStore.Processor<FAILURE> processor,\n-            PropertyKeyTokenRecord record ) throws FAILURE\n-    {\n-        processor.processPropertyKeyToken( this, record );\n-    }\n+  @Override\n+  public <FAILURE extends Exception> void accept(RecordStore.Processor<FAILURE> processor,\n+                                                 PropertyKeyTokenRecord record) throws FAILURE\n+  {\n+    processor.processPropertyKeyToken(this, record);\n+  }\n }\n",
            "diff_size": 23
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/373/PropertyKeyTokenStore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/373/PropertyKeyTokenStore.java\nindex 1bd875d6a89..8dda6a73b0f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/373/PropertyKeyTokenStore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/373/PropertyKeyTokenStore.java\n@@ -39,8 +39,7 @@ public class PropertyKeyTokenStore extends TokenStore<PropertyKeyTokenRecord, To\n     // Historical type descriptor, should be called PropertyKeyTokenStore\n     public static final String TYPE_DESCRIPTOR = \"PropertyIndexStore\";\n \n-    public PropertyKeyTokenStore(\n-            File fileName,\n+    public PropertyKeyTokenStore( File fileName,\n             Config config,\n             IdGeneratorFactory idGeneratorFactory,\n             PageCache pageCache,\n@@ -50,14 +49,13 @@ public class PropertyKeyTokenStore extends TokenStore<PropertyKeyTokenRecord, To\n             OpenOption... openOptions )\n     {\n         super( fileName, config, IdType.PROPERTY_KEY_TOKEN, idGeneratorFactory, pageCache, logProvider, nameStore,\n-                TYPE_DESCRIPTOR, new Token.Factory(), recordFormats.propertyKeyToken(), recordFormats.storeVersion(),\n-                openOptions );\n+                TYPE_DESCRIPTOR, new Token.Factory(), recordFormats.propertyKeyToken(), recordFormats.storeVersion(), openOptions );\n     }\n \n     @Override\n     public <FAILURE extends Exception> void accept( RecordStore.Processor<FAILURE> processor,\n             PropertyKeyTokenRecord record ) throws FAILURE\n-    {\n+{\n         processor.processPropertyKeyToken( this, record );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}