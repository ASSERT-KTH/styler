{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2473",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "41",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "65",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2473/UserDefinedConfigurationStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2473/UserDefinedConfigurationStrategy.java\nindex 19b3d47e0ae..6c0c7d2abd7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2473/UserDefinedConfigurationStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2473/UserDefinedConfigurationStrategy.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.causalclustering.upstream.strategies;\n \n import java.util.Map;\n@@ -37,63 +38,62 @@ import org.neo4j.causalclustering.routing.load_balancing.plugins.server_policies\n import org.neo4j.causalclustering.upstream.UpstreamDatabaseSelectionStrategy;\n import org.neo4j.helpers.Service;\n \n-@Service.Implementation( UpstreamDatabaseSelectionStrategy.class )\n+@Service.Implementation(UpstreamDatabaseSelectionStrategy.class)\n public class UserDefinedConfigurationStrategy extends UpstreamDatabaseSelectionStrategy\n {\n \n-    public static final String IDENTITY = \"user-defined\";\n-    // Empty if provided filter config cannot be parsed.\n-    // Ideally this class would not be created until config has been successfully parsed\n-    // in which case there would be no need for Optional\n-    private Optional<Filter<ServerInfo>> filters;\n+  public static final String IDENTITY = \"user-defined\";\n+  // Empty if provided filter config cannot be parsed.\n+  // Ideally this class would not be created until config has been successfully parsed\n+  // in which case there would be no need for Optional\n+  private Optional<Filter<ServerInfo>> filters;\n \n-    public UserDefinedConfigurationStrategy()\n-    {\n-        super( IDENTITY );\n-    }\n+  public UserDefinedConfigurationStrategy()\n+  {\n+    super(IDENTITY);\n+  }\n \n-    @Override\n-    public void init()\n+  @Override\n+  public void init()\n+  {\n+    String filterConfig = config.get(CausalClusteringSettings.user_defined_upstream_selection_strategy);\n+    try\n     {\n-        String filterConfig = config.get( CausalClusteringSettings.user_defined_upstream_selection_strategy );\n-        try\n-        {\n-            Filter<ServerInfo> parsed = FilterConfigParser.parse( filterConfig );\n-            filters = Optional.of( parsed );\n-            log.info( \"Upstream selection strategy \" + readableName + \" configured with \" + filterConfig );\n-        }\n-        catch ( InvalidFilterSpecification invalidFilterSpecification )\n-        {\n-            filters = Optional.empty();\n-            log.warn( \"Cannot parse configuration '\" + filterConfig + \"' for upstream selection strategy \" + readableName + \". \" +\n-                    invalidFilterSpecification.getMessage() );\n-        }\n+      Filter<ServerInfo> parsed = FilterConfigParser.parse(filterConfig);\n+      filters = Optional.of(parsed);\n+      log.info(\"Upstream selection strategy \" + readableName + \" configured with \" + filterConfig);\n+    } catch (InvalidFilterSpecification invalidFilterSpecification)\n+    {\n+      filters = Optional.empty();\n+      log.warn(\"Cannot parse configuration '\" + filterConfig + \"' for upstream selection strategy \" + readableName + \". \" +\n+          invalidFilterSpecification.getMessage());\n     }\n+  }\n \n-    @Override\n-    public Optional<MemberId> upstreamDatabase()\n+  @Override\n+  public Optional<MemberId> upstreamDatabase()\n+  {\n+    return filters.flatMap(filters ->\n     {\n-        return filters.flatMap( filters ->\n-        {\n-            Set<ServerInfo> possibleServers = possibleServers();\n+      Set<ServerInfo> possibleServers = possibleServers();\n \n-            return filters.apply( possibleServers ).stream().map( ServerInfo::memberId ).filter( memberId -> !Objects.equals( myself, memberId ) ).findFirst();\n-        } );\n-    }\n+      return filters.apply(possibleServers).stream().map(ServerInfo::memberId).filter(memberId -> !Objects.equals(myself, memberId)).findFirst();\n+    });\n+  }\n \n-    private Set<ServerInfo> possibleServers()\n-    {\n-        Stream<Map.Entry<MemberId,? extends DiscoveryServerInfo>> infoMap =\n-                Stream.of( topologyService.localReadReplicas(), topologyService.localCoreServers() ).map( Topology::members ).map( Map::entrySet ).flatMap(\n-                        Set::stream );\n+  private Set<ServerInfo> possibleServers()\n+  {\n+    Stream<Map.Entry<MemberId, ? extends DiscoveryServerInfo>> infoMap =\n+        Stream.of(topologyService.localReadReplicas(), topologyService.localCoreServers()).map(Topology::members).map(Map::entrySet).flatMap(\n+            Set::stream);\n \n-        return infoMap.map( this::toServerInfo ).collect( Collectors.toSet() );\n-    }\n+    return infoMap.map(this::toServerInfo).collect(Collectors.toSet());\n+  }\n \n-    private <T extends DiscoveryServerInfo> ServerInfo toServerInfo( Map.Entry<MemberId,T> entry )\n-    {\n-        T server = entry.getValue();\n-        MemberId memberId = entry.getKey();\n-        return new ServerInfo( server.connectors().boltAddress(), memberId, server.groups() );\n-    }\n+  private <T extends DiscoveryServerInfo> ServerInfo toServerInfo(Map.Entry<MemberId, T> entry)\n+  {\n+    T server = entry.getValue();\n+    MemberId memberId = entry.getKey();\n+    return new ServerInfo(server.connectors().boltAddress(), memberId, server.groups());\n+  }\n }\n",
            "diff_size": 53
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 230).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2473/UserDefinedConfigurationStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2473/UserDefinedConfigurationStrategy.java\nindex 19b3d47e0ae..339128b2062 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2473/UserDefinedConfigurationStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2473/UserDefinedConfigurationStrategy.java\n@@ -40,7 +40,6 @@ import org.neo4j.helpers.Service;\n @Service.Implementation( UpstreamDatabaseSelectionStrategy.class )\n public class UserDefinedConfigurationStrategy extends UpstreamDatabaseSelectionStrategy\n {\n-\n     public static final String IDENTITY = \"user-defined\";\n     // Empty if provided filter config cannot be parsed.\n     // Ideally this class would not be created until config has been successfully parsed\n@@ -65,9 +64,8 @@ public class UserDefinedConfigurationStrategy extends UpstreamDatabaseSelectionS\n         catch ( InvalidFilterSpecification invalidFilterSpecification )\n         {\n             filters = Optional.empty();\n-            log.warn( \"Cannot parse configuration '\" + filterConfig + \"' for upstream selection strategy \" + readableName + \". \" +\n-                    invalidFilterSpecification.getMessage() );\n-        }\n+            log.warn( \"Cannot parse configuration '\" + filterConfig + \"' for upstream selection strategy \" + readableName + \". \" + invalidFilterSpecification.getMessage() );\n+    }\n     }\n \n     @Override\n@@ -76,18 +74,14 @@ public class UserDefinedConfigurationStrategy extends UpstreamDatabaseSelectionS\n         return filters.flatMap( filters ->\n         {\n             Set<ServerInfo> possibleServers = possibleServers();\n-\n-            return filters.apply( possibleServers ).stream().map( ServerInfo::memberId ).filter( memberId -> !Objects.equals( myself, memberId ) ).findFirst();\n+return filters.apply( possibleServers ).stream().map( ServerInfo::memberId ).filter( memberId -> !Objects.equals( myself, memberId ) ).findFirst();\n         } );\n     }\n \n     private Set<ServerInfo> possibleServers()\n     {\n-        Stream<Map.Entry<MemberId,? extends DiscoveryServerInfo>> infoMap =\n-                Stream.of( topologyService.localReadReplicas(), topologyService.localCoreServers() ).map( Topology::members ).map( Map::entrySet ).flatMap(\n-                        Set::stream );\n-\n-        return infoMap.map( this::toServerInfo ).collect( Collectors.toSet() );\n+        Stream<Map.Entry<MemberId,? extends DiscoveryServerInfo>> infoMap = Stream.of( topologyService.localReadReplicas(), topologyService.localCoreServers() ).map( Topology::members ).map( Map::entrySet ).flatMap( Set::stream );\n+return infoMap.map( this::toServerInfo ).collect( Collectors.toSet() );\n     }\n \n     private <T extends DiscoveryServerInfo> ServerInfo toServerInfo( Map.Entry<MemberId,T> entry )\n@@ -96,4 +90,4 @@ public class UserDefinedConfigurationStrategy extends UpstreamDatabaseSelectionS\n         MemberId memberId = entry.getKey();\n         return new ServerInfo( server.connectors().boltAddress(), memberId, server.groups() );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}