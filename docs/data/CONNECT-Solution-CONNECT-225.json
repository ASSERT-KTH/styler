{
    "project_name": "CONNECT-Solution-CONNECT",
    "error_id": "225",
    "information": {
        "errors": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.docdatasubmission.aspect;\n\nimport com.google.common.base.Optional;\nimport com.google.common.collect.Lists;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "28",
                    "severity": "error",
                    "message": "'import' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/225/RegisterDocumentSetDescriptionExtractor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/225/RegisterDocumentSetDescriptionExtractor.java\nindex bc22f8838df..2d7d4c75f57 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/225/RegisterDocumentSetDescriptionExtractor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/225/RegisterDocumentSetDescriptionExtractor.java\n@@ -25,7 +25,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n package gov.hhs.fha.nhinc.docdatasubmission.aspect;\n-\n import com.google.common.base.Optional;\n import com.google.common.collect.Lists;\n import gov.hhs.fha.nhinc.event.builder.PayloadSizeExtractor;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/225/RegisterDocumentSetDescriptionExtractor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/225/RegisterDocumentSetDescriptionExtractor.java\nindex bc22f8838df..f683d29782a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/225/RegisterDocumentSetDescriptionExtractor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/225/RegisterDocumentSetDescriptionExtractor.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.docdatasubmission.aspect;\n \n import com.google.common.base.Optional;\n@@ -37,52 +38,51 @@ import java.util.List;\n \n /**\n  * @author akong\n- *\n  */\n public class RegisterDocumentSetDescriptionExtractor {\n \n-    private static final PayloadTypeExtractor PAYLOAD_TYPE_EXTRACTOR = new PayloadTypeExtractor();\n-    private static final PayloadSizeExtractor PAYLOAD_SIZE_EXTRACTOR = new PayloadSizeExtractor();\n-\n-    /**\n-     * Extracts the payload types of a ProvideAndRegisterDocumentSetRequestType.\n-     *\n-     * @param request the ProvideAndRegisterDocumentSetRequestType whose values are to be extracted\n-     * @return a list of string containing the payload types\n-     */\n-    public List<String> getPayloadTypes(RegisterDocumentSetRequestType request) {\n-        List<String> payloadTypes = new ArrayList<>();\n-        if (hasObjectList(request)) {\n-            List<Optional<String>> listWithDups = Lists.transform(\n-                request.getSubmitObjectsRequest().getRegistryObjectList().getIdentifiable(), PAYLOAD_TYPE_EXTRACTOR);\n+  private static final PayloadTypeExtractor PAYLOAD_TYPE_EXTRACTOR = new PayloadTypeExtractor();\n+  private static final PayloadSizeExtractor PAYLOAD_SIZE_EXTRACTOR = new PayloadSizeExtractor();\n \n-            payloadTypes = NhincCollections.fillAbsents(listWithDups, \"\");\n-        }\n+  /**\n+   * Extracts the payload types of a ProvideAndRegisterDocumentSetRequestType.\n+   *\n+   * @param request the ProvideAndRegisterDocumentSetRequestType whose values are to be extracted\n+   * @return a list of string containing the payload types\n+   */\n+  public List<String> getPayloadTypes(RegisterDocumentSetRequestType request) {\n+    List<String> payloadTypes = new ArrayList<>();\n+    if (hasObjectList(request)) {\n+      List<Optional<String>> listWithDups = Lists.transform(\n+          request.getSubmitObjectsRequest().getRegistryObjectList().getIdentifiable(), PAYLOAD_TYPE_EXTRACTOR);\n \n-        return payloadTypes;\n+      payloadTypes = NhincCollections.fillAbsents(listWithDups, \"\");\n     }\n \n-    /**\n-     * Extracts the payload sizes of a ProvideAndRegisterDocumentSetRequestType.\n-     *\n-     * @param request the ProvideAndRegisterDocumentSetRequestType whose values are to be extracted\n-     * @return a list of string containing the payload sizes\n-     */\n-    public List<String> getPayloadSize(RegisterDocumentSetRequestType request) {\n-        List<String> payloadSizes = new ArrayList<>();\n+    return payloadTypes;\n+  }\n \n-        if (hasObjectList(request)) {\n-            List<Optional<String>> listWithDups = Lists.transform(\n-                request.getSubmitObjectsRequest().getRegistryObjectList().getIdentifiable(), PAYLOAD_SIZE_EXTRACTOR);\n+  /**\n+   * Extracts the payload sizes of a ProvideAndRegisterDocumentSetRequestType.\n+   *\n+   * @param request the ProvideAndRegisterDocumentSetRequestType whose values are to be extracted\n+   * @return a list of string containing the payload sizes\n+   */\n+  public List<String> getPayloadSize(RegisterDocumentSetRequestType request) {\n+    List<String> payloadSizes = new ArrayList<>();\n \n-            payloadSizes = NhincCollections.fillAbsents(listWithDups, \"\");\n-        }\n+    if (hasObjectList(request)) {\n+      List<Optional<String>> listWithDups = Lists.transform(\n+          request.getSubmitObjectsRequest().getRegistryObjectList().getIdentifiable(), PAYLOAD_SIZE_EXTRACTOR);\n \n-        return payloadSizes;\n+      payloadSizes = NhincCollections.fillAbsents(listWithDups, \"\");\n     }\n \n-    private boolean hasObjectList(RegisterDocumentSetRequestType request) {\n-        return request != null && request.getSubmitObjectsRequest() != null\n-            && request.getSubmitObjectsRequest().getRegistryObjectList() != null;\n-    }\n+    return payloadSizes;\n+  }\n+\n+  private boolean hasObjectList(RegisterDocumentSetRequestType request) {\n+    return request != null && request.getSubmitObjectsRequest() != null\n+        && request.getSubmitObjectsRequest().getRegistryObjectList() != null;\n+  }\n }\n",
            "diff_size": 55
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "81",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/225/RegisterDocumentSetDescriptionExtractor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/225/RegisterDocumentSetDescriptionExtractor.java\nindex bc22f8838df..8ec6b72f48a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/225/RegisterDocumentSetDescriptionExtractor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/225/RegisterDocumentSetDescriptionExtractor.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.docdatasubmission.aspect;\n \n import com.google.common.base.Optional;\n@@ -53,10 +54,8 @@ public class RegisterDocumentSetDescriptionExtractor {\n     public List<String> getPayloadTypes(RegisterDocumentSetRequestType request) {\n         List<String> payloadTypes = new ArrayList<>();\n         if (hasObjectList(request)) {\n-            List<Optional<String>> listWithDups = Lists.transform(\n-                request.getSubmitObjectsRequest().getRegistryObjectList().getIdentifiable(), PAYLOAD_TYPE_EXTRACTOR);\n-\n-            payloadTypes = NhincCollections.fillAbsents(listWithDups, \"\");\n+            List<Optional<String>> listWithDups = Lists.transform(request.getSubmitObjectsRequest().getRegistryObjectList().getIdentifiable(), PAYLOAD_TYPE_EXTRACTOR);\n+payloadTypes = NhincCollections.fillAbsents(listWithDups, \"\");\n         }\n \n         return payloadTypes;\n@@ -70,19 +69,15 @@ public class RegisterDocumentSetDescriptionExtractor {\n      */\n     public List<String> getPayloadSize(RegisterDocumentSetRequestType request) {\n         List<String> payloadSizes = new ArrayList<>();\n-\n-        if (hasObjectList(request)) {\n-            List<Optional<String>> listWithDups = Lists.transform(\n-                request.getSubmitObjectsRequest().getRegistryObjectList().getIdentifiable(), PAYLOAD_SIZE_EXTRACTOR);\n-\n-            payloadSizes = NhincCollections.fillAbsents(listWithDups, \"\");\n+if (hasObjectList(request)) {\n+            List<Optional<String>> listWithDups = Lists.transform(request.getSubmitObjectsRequest().getRegistryObjectList().getIdentifiable(), PAYLOAD_SIZE_EXTRACTOR);\n+payloadSizes = NhincCollections.fillAbsents(listWithDups, \"\");\n         }\n \n         return payloadSizes;\n     }\n \n     private boolean hasObjectList(RegisterDocumentSetRequestType request) {\n-        return request != null && request.getSubmitObjectsRequest() != null\n-            && request.getSubmitObjectsRequest().getRegistryObjectList() != null;\n+        return request != null && request.getSubmitObjectsRequest() != null && request.getSubmitObjectsRequest().getRegistryObjectList() != null;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "84",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/225/RegisterDocumentSetDescriptionExtractor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/225/RegisterDocumentSetDescriptionExtractor.java\nindex bc22f8838df..9f9e8d792c8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/225/RegisterDocumentSetDescriptionExtractor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/225/RegisterDocumentSetDescriptionExtractor.java\n@@ -39,6 +39,8 @@ import java.util.List;\n  * @author akong\n  *\n  */\n+\n+\n public class RegisterDocumentSetDescriptionExtractor {\n \n     private static final PayloadTypeExtractor PAYLOAD_TYPE_EXTRACTOR = new PayloadTypeExtractor();\n@@ -50,15 +52,14 @@ public class RegisterDocumentSetDescriptionExtractor {\n      * @param request the ProvideAndRegisterDocumentSetRequestType whose values are to be extracted\n      * @return a list of string containing the payload types\n      */\n+\n+\n     public List<String> getPayloadTypes(RegisterDocumentSetRequestType request) {\n         List<String> payloadTypes = new ArrayList<>();\n         if (hasObjectList(request)) {\n-            List<Optional<String>> listWithDups = Lists.transform(\n-                request.getSubmitObjectsRequest().getRegistryObjectList().getIdentifiable(), PAYLOAD_TYPE_EXTRACTOR);\n-\n+            List<Optional<String>> listWithDups = Lists.transform(request.getSubmitObjectsRequest().getRegistryObjectList().getIdentifiable(), PAYLOAD_TYPE_EXTRACTOR);\n             payloadTypes = NhincCollections.fillAbsents(listWithDups, \"\");\n         }\n-\n         return payloadTypes;\n     }\n \n@@ -68,21 +69,19 @@ public class RegisterDocumentSetDescriptionExtractor {\n      * @param request the ProvideAndRegisterDocumentSetRequestType whose values are to be extracted\n      * @return a list of string containing the payload sizes\n      */\n+\n+\n     public List<String> getPayloadSize(RegisterDocumentSetRequestType request) {\n         List<String> payloadSizes = new ArrayList<>();\n-\n         if (hasObjectList(request)) {\n-            List<Optional<String>> listWithDups = Lists.transform(\n-                request.getSubmitObjectsRequest().getRegistryObjectList().getIdentifiable(), PAYLOAD_SIZE_EXTRACTOR);\n-\n+            List<Optional<String>> listWithDups = Lists.transform(request.getSubmitObjectsRequest().getRegistryObjectList().getIdentifiable(), PAYLOAD_SIZE_EXTRACTOR);\n             payloadSizes = NhincCollections.fillAbsents(listWithDups, \"\");\n         }\n-\n         return payloadSizes;\n     }\n \n     private boolean hasObjectList(RegisterDocumentSetRequestType request) {\n-        return request != null && request.getSubmitObjectsRequest() != null\n-            && request.getSubmitObjectsRequest().getRegistryObjectList() != null;\n+        return request != null && request.getSubmitObjectsRequest() != null && request.getSubmitObjectsRequest().getRegistryObjectList() != null;\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "28",
                    "severity": "error",
                    "message": "'import' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/225/RegisterDocumentSetDescriptionExtractor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_random/225/RegisterDocumentSetDescriptionExtractor.java\nindex bc22f8838df..2d7d4c75f57 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/225/RegisterDocumentSetDescriptionExtractor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_random/225/RegisterDocumentSetDescriptionExtractor.java\n@@ -25,7 +25,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n package gov.hhs.fha.nhinc.docdatasubmission.aspect;\n-\n import com.google.common.base.Optional;\n import com.google.common.collect.Lists;\n import gov.hhs.fha.nhinc.event.builder.PayloadSizeExtractor;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}