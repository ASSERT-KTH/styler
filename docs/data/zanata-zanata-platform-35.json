{
    "project_name": "zanata-zanata-platform",
    "error_id": "35",
    "information": {
        "errors": [
            {
                "line": "151",
                "column": "9",
                "severity": "error",
                "message": "'}' at column 9 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "                        Charsets.UTF_8)) {\n            props.load(reader);\n        }\n        catch (IOException e) {\n            throw new RuntimeException(e);\n        }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/35/UpdateChecker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler/35/UpdateChecker.java\nindex 4e6d350ce3d..62dd2dd236b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/35/UpdateChecker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler/35/UpdateChecker.java\n@@ -148,8 +148,7 @@ public class UpdateChecker {\n                 new InputStreamReader(new FileInputStream(updateMarker),\n                         Charsets.UTF_8)) {\n             props.load(reader);\n-        }\n-        catch (IOException e) {\n+        } catch (IOException e) {\n             throw new RuntimeException(e);\n         }\n         return props;\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/35/UpdateChecker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/intellij/35/UpdateChecker.java\nindex 4e6d350ce3d..2a9ad604f22 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/35/UpdateChecker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/intellij/35/UpdateChecker.java\n@@ -18,6 +18,7 @@\n  * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n  * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n  */\n+\n package org.zanata.client.commands;\n \n import java.io.BufferedWriter;\n@@ -58,199 +59,201 @@ import static org.zanata.util.VersionUtility.getVersionInfo;\n  * compare to current version.\n  *\n  * @author Patrick Huang <a\n- *         href=\"mailto:pahuang@redhat.com\">pahuang@redhat.com</a>\n+ * href=\"mailto:pahuang@redhat.com\">pahuang@redhat.com</a>\n  */\n public class UpdateChecker {\n-    private static final Logger log =\n-            LoggerFactory.getLogger(UpdateChecker.class);\n-    private static final DateTimeFormatter DATE_FORMATTER =\n-            DateTimeFormat.forPattern(\"yyyy-MM-dd\");\n-    private static final String OSS_URL =\n-            \"https://oss.sonatype.org/service/local/\";\n-    // update marker file valid properties\n-    private static final String LAST_CHECKED = \"lastChecked\";\n-    private static final String FREQUENCY = \"frequency\";\n-    private static final String NO_ASKING = \"noAsking\";\n+  private static final Logger log =\n+    LoggerFactory.getLogger(UpdateChecker.class);\n+  private static final DateTimeFormatter DATE_FORMATTER =\n+    DateTimeFormat.forPattern(\"yyyy-MM-dd\");\n+  private static final String OSS_URL =\n+    \"https://oss.sonatype.org/service/local/\";\n+  // update marker file valid properties\n+  private static final String LAST_CHECKED = \"lastChecked\";\n+  private static final String FREQUENCY = \"frequency\";\n+  private static final String NO_ASKING = \"noAsking\";\n \n-    private final String sonatypeRestUrl;\n-    private final ConsoleInteractor console;\n-    private final String currentVersionNo;\n-    private final File updateMarker;\n+  private final String sonatypeRestUrl;\n+  private final ConsoleInteractor console;\n+  private final String currentVersionNo;\n+  private final File updateMarker;\n \n-    public UpdateChecker(ConsoleInteractor console) {\n-        this(OSS_URL, defaultUpdateMarkerFile(), console,\n-                getVersionInfo(UpdateChecker.class).getVersionNo());\n-    }\n+  public UpdateChecker(ConsoleInteractor console) {\n+    this(OSS_URL, defaultUpdateMarkerFile(), console,\n+      getVersionInfo(UpdateChecker.class).getVersionNo());\n+  }\n \n-    private static File defaultUpdateMarkerFile() {\n-        return new File(new File(System.getProperty(\"user.home\"), \".config\"),\n-                \"zanata-client-update.properties\");\n-    }\n+  private static File defaultUpdateMarkerFile() {\n+    return new File(new File(System.getProperty(\"user.home\"), \".config\"),\n+      \"zanata-client-update.properties\");\n+  }\n \n-    @VisibleForTesting\n-    protected UpdateChecker(String sonatypeRestUrl,\n-            File updateMarker,\n-            ConsoleInteractor console, String currentVersionNo) {\n-        this.sonatypeRestUrl = sonatypeRestUrl;\n-        this.console = console;\n-        this.currentVersionNo = currentVersionNo;\n-        this.updateMarker = updateMarker;\n-    }\n+  @VisibleForTesting\n+  protected UpdateChecker(String sonatypeRestUrl,\n+                          File updateMarker,\n+                          ConsoleInteractor console, String currentVersionNo) {\n+    this.sonatypeRestUrl = sonatypeRestUrl;\n+    this.console = console;\n+    this.currentVersionNo = currentVersionNo;\n+    this.updateMarker = updateMarker;\n+  }\n \n-    public boolean needToCheckUpdates(boolean interactiveMode) {\n-        DateTime today = new DateTime();\n-        try {\n-            if (!updateMarker.exists()) {\n-                createUpdateMarkerFile(updateMarker);\n-                console.printfln(get(\"update.marker.created\"), updateMarker);\n-                console.printfln(get(\"update.marker.hint\"));\n-                return true;\n-            }\n-            // read the content and see if we need to check\n-            Properties props = loadFileToProperties(updateMarker);\n-            DateTime lastCheckedDate = readLastCheckedDate(props);\n-            Days daysPassed = Days.daysBetween(lastCheckedDate, today);\n-            Frequency frequency = readFrequency(props);\n-            boolean timeToCheck = daysPassed.compareTo(frequency.days()) >= 0;\n-            boolean noAsking = readNoAsking(props);\n-            if (timeToCheck && !noAsking && interactiveMode) {\n-                console.printf(get(\"check.update.yes.no\"), daysPassed.getDays());\n-                String check = console.expectAnswerWithRetry(\n-                        AnswerValidator.YES_NO);\n-                if (check.toLowerCase().startsWith(\"n\")) {\n-                    return false;\n-                }\n-            }\n-            return timeToCheck;\n-        } catch (Exception e) {\n-            log.debug(\"Error checking update marker file\", e);\n-            log.warn(\"Error checking update marker file {}\", updateMarker);\n-            log.warn(\"Please make sure its permission and content format\");\n-            return false;\n+  public boolean needToCheckUpdates(boolean interactiveMode) {\n+    DateTime today = new DateTime();\n+    try {\n+      if (!updateMarker.exists()) {\n+        createUpdateMarkerFile(updateMarker);\n+        console.printfln(get(\"update.marker.created\"), updateMarker);\n+        console.printfln(get(\"update.marker.hint\"));\n+        return true;\n+      }\n+      // read the content and see if we need to check\n+      Properties props = loadFileToProperties(updateMarker);\n+      DateTime lastCheckedDate = readLastCheckedDate(props);\n+      Days daysPassed = Days.daysBetween(lastCheckedDate, today);\n+      Frequency frequency = readFrequency(props);\n+      boolean timeToCheck = daysPassed.compareTo(frequency.days()) >= 0;\n+      boolean noAsking = readNoAsking(props);\n+      if (timeToCheck && !noAsking && interactiveMode) {\n+        console.printf(get(\"check.update.yes.no\"), daysPassed.getDays());\n+        String check = console.expectAnswerWithRetry(\n+          AnswerValidator.YES_NO);\n+        if (check.toLowerCase().startsWith(\"n\")) {\n+          return false;\n         }\n+      }\n+      return timeToCheck;\n+    } catch (Exception e) {\n+      log.debug(\"Error checking update marker file\", e);\n+      log.warn(\"Error checking update marker file {}\", updateMarker);\n+      log.warn(\"Please make sure its permission and content format\");\n+      return false;\n     }\n+  }\n+\n+  private static DateTime readLastCheckedDate(Properties props) {\n+    return DATE_FORMATTER.parseDateTime(props.getProperty(LAST_CHECKED));\n+  }\n \n-    private static DateTime readLastCheckedDate(Properties props) {\n-        return DATE_FORMATTER.parseDateTime(props.getProperty(LAST_CHECKED));\n+  private static Frequency readFrequency(Properties props) {\n+    return Frequency.from(props.getProperty(FREQUENCY,\n+      Frequency.weekly.name()));\n+  }\n+\n+  private static boolean readNoAsking(Properties props) {\n+    return props.getProperty(NO_ASKING, \"false\").equalsIgnoreCase(\"true\");\n+  }\n+\n+  private static Properties loadFileToProperties(File updateMarker) {\n+    Properties props = new Properties();\n+    try (InputStreamReader reader =\n+           new InputStreamReader(new FileInputStream(updateMarker),\n+             Charsets.UTF_8)) {\n+      props.load(reader);\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n     }\n+    return props;\n+  }\n \n-    private static Frequency readFrequency(Properties props) {\n-        return Frequency.from(props.getProperty(FREQUENCY,\n-                Frequency.weekly.name()));\n+  private static void createUpdateMarkerFile(File updateMarker)\n+    throws IOException {\n+    boolean created = updateMarker.createNewFile();\n+    Preconditions.checkState(created, get(\"create.file.failure\"),\n+      updateMarker);\n+    String today = DATE_FORMATTER.print(new DateTime());\n+    Properties props = new Properties();\n+    props.setProperty(LAST_CHECKED, today);\n+    props.setComment(FREQUENCY, get(\"valid.frequency\"));\n+    props.setProperty(FREQUENCY, \"weekly\");\n+    props.setProperty(NO_ASKING, \"true\");\n+    props.setComment(NO_ASKING, get(\"no.check.update.prompt\"));\n+    props.store(new BufferedWriter(new FileWriterWithEncoding(updateMarker,\n+      Charsets.UTF_8)), null);\n+  }\n+\n+  public void checkNewerVersion() {\n+    Optional<String> latestVersion = checkLatestVersion(console);\n+    if (!latestVersion.isPresent()) {\n+      return;\n     }\n-    private static boolean readNoAsking(Properties props) {\n-        return props.getProperty(NO_ASKING, \"false\").equalsIgnoreCase(\"true\");\n+    if (latestVersion.get().compareTo(currentVersionNo) > 0) {\n+      console.printfln(get(\"suggest.update\"), latestVersion.get());\n+    } else {\n+      console.printfln(get(\"latest.version.confirm\"));\n     }\n-\n-    private static Properties loadFileToProperties(File updateMarker) {\n-        Properties props = new Properties();\n-        try (InputStreamReader reader =\n-                new InputStreamReader(new FileInputStream(updateMarker),\n-                        Charsets.UTF_8)) {\n-            props.load(reader);\n-        }\n-        catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n-        return props;\n+    try {\n+      Properties props = loadFileToProperties(updateMarker);\n+      String today = DATE_FORMATTER.print(new DateTime());\n+      props.setProperty(LAST_CHECKED, today);\n+      props.store(new BufferedWriter(new FileWriterWithEncoding(\n+        updateMarker, Charsets.UTF_8)), null);\n+    } catch (IOException e) {\n+      log.warn(\"failed to load file {}\", updateMarker);\n     }\n+  }\n \n-    private static void createUpdateMarkerFile(File updateMarker)\n-            throws IOException {\n-        boolean created = updateMarker.createNewFile();\n-        Preconditions.checkState(created, get(\"create.file.failure\"),\n-                updateMarker);\n-        String today = DATE_FORMATTER.print(new DateTime());\n-        Properties props = new Properties();\n-        props.setProperty(LAST_CHECKED, today);\n-        props.setComment(FREQUENCY, get(\"valid.frequency\"));\n-        props.setProperty(FREQUENCY, \"weekly\");\n-        props.setProperty(NO_ASKING, \"true\");\n-        props.setComment(NO_ASKING, get(\"no.check.update.prompt\"));\n-        props.store(new BufferedWriter(new FileWriterWithEncoding(updateMarker,\n-                Charsets.UTF_8)), null);\n+  /**\n+   * This calls oss.sonatype.org's REST api and resolve latest version of\n+   * client.\n+   *\n+   * @return latest version of client in sonatype oss\n+   */\n+  private Optional<String> checkLatestVersion(ConsoleInteractor console) {\n+    Response response;\n+    try {\n+      Client client = ResteasyClientBuilder.newClient();\n+      WebTarget target =\n+        client.target(sonatypeRestUrl)\n+          .path(\"artifact/maven/resolve\")\n+          .queryParam(\"g\", \"org.zanata\")\n+          .queryParam(\"a\", \"client\")\n+          .queryParam(\"p\", \"pom\")\n+          .queryParam(\"v\", \"LATEST\")\n+          .queryParam(\"r\", \"releases\");\n+      response = target.request(MediaType.APPLICATION_XML_TYPE).get();\n+      if (response.getStatusInfo() != Response.Status.OK) {\n+        log.debug(\n+          \"Failed to resolve latest client artifact [status {}]. Ignored\",\n+          response.getStatus());\n+        console.printfln(get(\"check.update.failed\"));\n+        return Optional.absent();\n+      }\n+    } catch (Exception e) {\n+      log.warn(\"Exception when checking updates\", e);\n+      console.printfln(get(\"check.update.failed\"));\n+      return Optional.absent();\n     }\n+    // cheap xml parsing\n+    String payload =\n+      response.readEntity(String.class).replaceAll(\"\\\\n\", \"\");\n+    Pattern pattern = Pattern.compile(\"^.+<version>(.+)</version>.+\");\n+    Matcher matcher = pattern.matcher(payload);\n+    return matcher.matches() ? Optional.of(matcher.group(1)) :\n+      Optional.absent();\n+  }\n \n-    public void checkNewerVersion() {\n-        Optional<String> latestVersion = checkLatestVersion(console);\n-        if (!latestVersion.isPresent()) {\n-            return;\n-        }\n-        if (latestVersion.get().compareTo(currentVersionNo) > 0) {\n-            console.printfln(get(\"suggest.update\"), latestVersion.get());\n-        } else {\n-            console.printfln(get(\"latest.version.confirm\"));\n-        }\n-        try {\n-            Properties props = loadFileToProperties(updateMarker);\n-            String today = DATE_FORMATTER.print(new DateTime());\n-            props.setProperty(LAST_CHECKED, today);\n-            props.store(new BufferedWriter(new FileWriterWithEncoding(\n-                    updateMarker, Charsets.UTF_8)), null);\n-        } catch (IOException e) {\n-            log.warn(\"failed to load file {}\", updateMarker);\n-        }\n-    }\n+  private enum Frequency {\n+    weekly, monthly, daily;\n \n-    /**\n-     * This calls oss.sonatype.org's REST api and resolve latest version of\n-     * client.\n-     *\n-     * @return latest version of client in sonatype oss\n-     */\n-    private Optional<String> checkLatestVersion(ConsoleInteractor console) {\n-        Response response;\n-        try {\n-            Client client = ResteasyClientBuilder.newClient();\n-            WebTarget target =\n-                    client.target(sonatypeRestUrl)\n-                            .path(\"artifact/maven/resolve\")\n-                            .queryParam(\"g\", \"org.zanata\")\n-                            .queryParam(\"a\", \"client\")\n-                            .queryParam(\"p\", \"pom\")\n-                            .queryParam(\"v\", \"LATEST\")\n-                            .queryParam(\"r\", \"releases\");\n-            response = target.request(MediaType.APPLICATION_XML_TYPE).get();\n-            if (response.getStatusInfo() != Response.Status.OK) {\n-                log.debug(\n-                        \"Failed to resolve latest client artifact [status {}]. Ignored\",\n-                        response.getStatus());\n-                console.printfln(get(\"check.update.failed\"));\n-                return Optional.absent();\n-            }\n-        } catch (Exception e) {\n-            log.warn(\"Exception when checking updates\", e);\n-            console.printfln(get(\"check.update.failed\"));\n-            return Optional.absent();\n-        }\n-        // cheap xml parsing\n-        String payload =\n-                response.readEntity(String.class).replaceAll(\"\\\\n\", \"\");\n-        Pattern pattern = Pattern.compile(\"^.+<version>(.+)</version>.+\");\n-        Matcher matcher = pattern.matcher(payload);\n-        return matcher.matches() ? Optional.of(matcher.group(1)) :\n-                Optional.absent();\n+    static Frequency from(String value) {\n+      try {\n+        return valueOf(value);\n+      } catch (Exception e) {\n+        log.warn(\"unrecognized value [{}]. Fall back to weekly.\", value);\n+        return weekly;\n+      }\n     }\n \n-    private enum Frequency {\n-        weekly, monthly, daily;\n-        static Frequency from(String value) {\n-            try {\n-                return valueOf(value);\n-            } catch (Exception e) {\n-                log.warn(\"unrecognized value [{}]. Fall back to weekly.\", value);\n-                return weekly;\n-            }\n-        }\n-        Days days() {\n-            switch (this) {\n-                case monthly:\n-                    return Days.days(30);\n-                case daily:\n-                    return Days.ONE;\n-                default:\n-                    return Weeks.ONE.toStandardDays();\n-            }\n-        }\n+    Days days() {\n+      switch (this) {\n+      case monthly:\n+        return Days.days(30);\n+      case daily:\n+        return Days.ONE;\n+      default:\n+        return Weeks.ONE.toStandardDays();\n+      }\n     }\n+  }\n }\n",
            "diff_size": 248
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/35/UpdateChecker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/naturalize/35/UpdateChecker.java\nindex 4e6d350ce3d..1932a353264 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/35/UpdateChecker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/naturalize/35/UpdateChecker.java\n@@ -148,8 +148,7 @@ public class UpdateChecker {\n                 new InputStreamReader(new FileInputStream(updateMarker),\n                         Charsets.UTF_8)) {\n             props.load(reader);\n-        }\n-        catch (IOException e) {\n+        } catch (IOException e) {\n             throw new RuntimeException(e);\n         }\n         return props;\n@@ -253,4 +252,4 @@ public class UpdateChecker {\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/35/UpdateChecker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/codebuff/35/UpdateChecker.java\nindex 4e6d350ce3d..559bb125f39 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/35/UpdateChecker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/codebuff/35/UpdateChecker.java\n@@ -31,7 +31,6 @@ import javax.ws.rs.client.Client;\n import javax.ws.rs.client.WebTarget;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-\n import org.apache.commons.io.output.FileWriterWithEncoding;\n import org.fedorahosted.openprops.Properties;\n import org.jboss.resteasy.client.jaxrs.ResteasyClientBuilder;\n@@ -60,37 +59,34 @@ import static org.zanata.util.VersionUtility.getVersionInfo;\n  * @author Patrick Huang <a\n  *         href=\"mailto:pahuang@redhat.com\">pahuang@redhat.com</a>\n  */\n+\n+\n public class UpdateChecker {\n-    private static final Logger log =\n-            LoggerFactory.getLogger(UpdateChecker.class);\n-    private static final DateTimeFormatter DATE_FORMATTER =\n-            DateTimeFormat.forPattern(\"yyyy-MM-dd\");\n-    private static final String OSS_URL =\n-            \"https://oss.sonatype.org/service/local/\";\n+    private static final Logger log = LoggerFactory.getLogger(UpdateChecker.class);\n+    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormat.forPattern(\"yyyy-MM-dd\");\n+    private static final String OSS_URL = \"https://oss.sonatype.org/service/local/\";\n     // update marker file valid properties\n     private static final String LAST_CHECKED = \"lastChecked\";\n     private static final String FREQUENCY = \"frequency\";\n     private static final String NO_ASKING = \"noAsking\";\n-\n     private final String sonatypeRestUrl;\n     private final ConsoleInteractor console;\n     private final String currentVersionNo;\n     private final File updateMarker;\n \n     public UpdateChecker(ConsoleInteractor console) {\n-        this(OSS_URL, defaultUpdateMarkerFile(), console,\n-                getVersionInfo(UpdateChecker.class).getVersionNo());\n+        this(OSS_URL, defaultUpdateMarkerFile(), console, getVersionInfo(UpdateChecker.class).getVersionNo());\n     }\n \n     private static File defaultUpdateMarkerFile() {\n         return new File(new File(System.getProperty(\"user.home\"), \".config\"),\n-                \"zanata-client-update.properties\");\n+                        \"zanata-client-update.properties\");\n     }\n \n     @VisibleForTesting\n     protected UpdateChecker(String sonatypeRestUrl,\n-            File updateMarker,\n-            ConsoleInteractor console, String currentVersionNo) {\n+File updateMarker,\n+ConsoleInteractor console, String currentVersionNo) {\n         this.sonatypeRestUrl = sonatypeRestUrl;\n         this.console = console;\n         this.currentVersionNo = currentVersionNo;\n@@ -115,8 +111,7 @@ public class UpdateChecker {\n             boolean noAsking = readNoAsking(props);\n             if (timeToCheck && !noAsking && interactiveMode) {\n                 console.printf(get(\"check.update.yes.no\"), daysPassed.getDays());\n-                String check = console.expectAnswerWithRetry(\n-                        AnswerValidator.YES_NO);\n+                String check = console.expectAnswerWithRetry(AnswerValidator.YES_NO);\n                 if (check.toLowerCase().startsWith(\"n\")) {\n                     return false;\n                 }\n@@ -135,31 +130,26 @@ public class UpdateChecker {\n     }\n \n     private static Frequency readFrequency(Properties props) {\n-        return Frequency.from(props.getProperty(FREQUENCY,\n-                Frequency.weekly.name()));\n+        return Frequency.from(props.getProperty(FREQUENCY, Frequency.weekly.name()));\n     }\n+\n     private static boolean readNoAsking(Properties props) {\n         return props.getProperty(NO_ASKING, \"false\").equalsIgnoreCase(\"true\");\n     }\n \n     private static Properties loadFileToProperties(File updateMarker) {\n         Properties props = new Properties();\n-        try (InputStreamReader reader =\n-                new InputStreamReader(new FileInputStream(updateMarker),\n-                        Charsets.UTF_8)) {\n+        try (InputStreamReader reader = new InputStreamReader(new FileInputStream(updateMarker), Charsets.UTF_8)) {\n             props.load(reader);\n-        }\n-        catch (IOException e) {\n+        } catch (IOException e) {\n             throw new RuntimeException(e);\n         }\n         return props;\n     }\n \n-    private static void createUpdateMarkerFile(File updateMarker)\n-            throws IOException {\n+    private static void createUpdateMarkerFile(File updateMarker) throws IOException {\n         boolean created = updateMarker.createNewFile();\n-        Preconditions.checkState(created, get(\"create.file.failure\"),\n-                updateMarker);\n+        Preconditions.checkState(created, get(\"create.file.failure\"), updateMarker);\n         String today = DATE_FORMATTER.print(new DateTime());\n         Properties props = new Properties();\n         props.setProperty(LAST_CHECKED, today);\n@@ -167,8 +157,7 @@ public class UpdateChecker {\n         props.setProperty(FREQUENCY, \"weekly\");\n         props.setProperty(NO_ASKING, \"true\");\n         props.setComment(NO_ASKING, get(\"no.check.update.prompt\"));\n-        props.store(new BufferedWriter(new FileWriterWithEncoding(updateMarker,\n-                Charsets.UTF_8)), null);\n+        props.store(new BufferedWriter(new FileWriterWithEncoding(updateMarker, Charsets.UTF_8)), null);\n     }\n \n     public void checkNewerVersion() {\n@@ -185,8 +174,7 @@ public class UpdateChecker {\n             Properties props = loadFileToProperties(updateMarker);\n             String today = DATE_FORMATTER.print(new DateTime());\n             props.setProperty(LAST_CHECKED, today);\n-            props.store(new BufferedWriter(new FileWriterWithEncoding(\n-                    updateMarker, Charsets.UTF_8)), null);\n+            props.store(new BufferedWriter(new FileWriterWithEncoding(updateMarker, Charsets.UTF_8)), null);\n         } catch (IOException e) {\n             log.warn(\"failed to load file {}\", updateMarker);\n         }\n@@ -198,23 +186,15 @@ public class UpdateChecker {\n      *\n      * @return latest version of client in sonatype oss\n      */\n+\n     private Optional<String> checkLatestVersion(ConsoleInteractor console) {\n         Response response;\n         try {\n             Client client = ResteasyClientBuilder.newClient();\n-            WebTarget target =\n-                    client.target(sonatypeRestUrl)\n-                            .path(\"artifact/maven/resolve\")\n-                            .queryParam(\"g\", \"org.zanata\")\n-                            .queryParam(\"a\", \"client\")\n-                            .queryParam(\"p\", \"pom\")\n-                            .queryParam(\"v\", \"LATEST\")\n-                            .queryParam(\"r\", \"releases\");\n+            WebTarget target = client.target(sonatypeRestUrl).path(\"artifact/maven/resolve\").queryParam(\"g\", \"org.zanata\").queryParam(\"a\", \"client\").queryParam(\"p\", \"pom\").queryParam(\"v\", \"LATEST\").queryParam(\"r\", \"releases\");\n             response = target.request(MediaType.APPLICATION_XML_TYPE).get();\n             if (response.getStatusInfo() != Response.Status.OK) {\n-                log.debug(\n-                        \"Failed to resolve latest client artifact [status {}]. Ignored\",\n-                        response.getStatus());\n+                log.debug(\"Failed to resolve latest client artifact [status {}]. Ignored\", response.getStatus());\n                 console.printfln(get(\"check.update.failed\"));\n                 return Optional.absent();\n             }\n@@ -224,16 +204,15 @@ public class UpdateChecker {\n             return Optional.absent();\n         }\n         // cheap xml parsing\n-        String payload =\n-                response.readEntity(String.class).replaceAll(\"\\\\n\", \"\");\n+        String payload = response.readEntity(String.class).replaceAll(\"\\\\n\", \"\");\n         Pattern pattern = Pattern.compile(\"^.+<version>(.+)</version>.+\");\n         Matcher matcher = pattern.matcher(payload);\n-        return matcher.matches() ? Optional.of(matcher.group(1)) :\n-                Optional.absent();\n+        return matcher.matches() ? Optional.of(matcher.group(1)) : Optional.absent();\n     }\n \n     private enum Frequency {\n         weekly, monthly, daily;\n+\n         static Frequency from(String value) {\n             try {\n                 return valueOf(value);\n@@ -242,15 +221,16 @@ public class UpdateChecker {\n                 return weekly;\n             }\n         }\n+\n         Days days() {\n             switch (this) {\n-                case monthly:\n-                    return Days.days(30);\n-                case daily:\n-                    return Days.ONE;\n-                default:\n-                    return Weeks.ONE.toStandardDays();\n+            case monthly:\n+                return Days.days(30);\n+            case daily:\n+                return Days.ONE;\n+            default:\n+                return Weeks.ONE.toStandardDays();\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 58
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/35/UpdateChecker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_random/35/UpdateChecker.java\nindex 4e6d350ce3d..62dd2dd236b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/35/UpdateChecker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_random/35/UpdateChecker.java\n@@ -148,8 +148,7 @@ public class UpdateChecker {\n                 new InputStreamReader(new FileInputStream(updateMarker),\n                         Charsets.UTF_8)) {\n             props.load(reader);\n-        }\n-        catch (IOException e) {\n+        } catch (IOException e) {\n             throw new RuntimeException(e);\n         }\n         return props;\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "150",
                    "column": "31",
                    "severity": "error",
                    "message": "';' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "150",
                    "column": "32",
                    "severity": "error",
                    "message": "'}' at column 32 should have line break before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "150",
                    "column": "32",
                    "severity": "error",
                    "message": "'}' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/35/UpdateChecker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_three_grams/35/UpdateChecker.java\nindex 4e6d350ce3d..c139ad00f50 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/35/UpdateChecker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_three_grams/35/UpdateChecker.java\n@@ -147,8 +147,7 @@ public class UpdateChecker {\n         try (InputStreamReader reader =\n                 new InputStreamReader(new FileInputStream(updateMarker),\n                         Charsets.UTF_8)) {\n-            props.load(reader);\n-        }\n+            props.load(reader);}\n         catch (IOException e) {\n             throw new RuntimeException(e);\n         }\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random"
    ],
    "not_repaired_by": [
        "styler_three_grams"
    ]
}