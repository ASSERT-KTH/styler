{
    "project_name": "NationalSecurityAgency-datawave",
    "error_id": "57",
    "information": {
        "errors": [
            {
                "line": "14",
                "severity": "error",
                "message": "Accumulo non-public classes imported",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
            }
        ]
    },
    "source_code": "import org.apache.accumulo.core.data.Key;\nimport org.apache.accumulo.core.data.Value;\nimport org.apache.accumulo.core.util.PeekingIterator;\nimport org.apache.hadoop.io.Text;\nimport org.apache.log4j.Logger;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "14",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "14",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/57/ShardLimitingIterator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/intellij/57/ShardLimitingIterator.java\nindex 55cc96154ab..eb26c4c8798 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/57/ShardLimitingIterator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/intellij/57/ShardLimitingIterator.java\n@@ -20,130 +20,137 @@ import com.google.common.collect.Queues;\n \n /**\n  * Purpose: Limits the number of shards we will evaluate for a given term. Once we hit the preconfigured number will short circuit.\n- *\n  */\n-public class ShardLimitingIterator implements Iterator<Entry<Key,Value>> {\n-    \n-    protected PeekingIterator<Entry<Key,Value>> kvIter;\n-    protected int maxShardsPerDay = Integer.MAX_VALUE;\n-    protected Queue<Entry<Key,Value>> currentQueue;\n-    protected String currentDay = null;\n-    // simply compare the strings. no need for a date formatter\n-    protected static final int dateCfLength = 8;\n-    \n-    protected boolean seenUnexpectedKey = false;\n-    \n-    private static final Logger log = Logger.getLogger(ShardLimitingIterator.class);\n-    \n-    public ShardLimitingIterator(Iterator<Entry<Key,Value>> kvIter, int maxShardsPerDay) {\n-        this.kvIter = new PeekingIterator<>(kvIter);\n-        this.maxShardsPerDay = maxShardsPerDay;\n-        currentQueue = Queues.newArrayDeque();\n-    }\n-    \n-    @Override\n-    public boolean hasNext() {\n-        if (currentQueue.isEmpty()) {\n-            // reset the state of the current day.\n-            currentDay = null;\n-            peekInSource();\n-        }\n-        return !currentQueue.isEmpty();\n-    }\n-    \n-    protected void peekInSource() {\n-        while (kvIter.hasNext()) {\n-            Entry<Key,Value> currentKeyValue = kvIter.peek();\n-            \n-            // become a passthrough if we've seen an unexpected key.\n-            if (seenUnexpectedKey) {\n-                currentQueue.add(currentKeyValue);\n-                break;\n-            }\n-            \n-            if (null == currentDay) {\n-                if (log.isTraceEnabled()) {\n-                    log.trace(\"it's a new day!\");\n-                }\n-                currentDay = getDay(currentKeyValue.getKey());\n-                currentQueue.add(currentKeyValue);\n-                kvIter.next();\n-            } else {\n-                String nextKeysDay = getDay(currentKeyValue.getKey());\n-                if (currentDay.equals(nextKeysDay)) {\n-                    if (log.isTraceEnabled()) {\n-                        log.trace(\"adding \" + currentKeyValue.getKey() + \" to queue because it matches\" + currentDay);\n-                    }\n-                    if (currentQueue.size() <= maxShardsPerDay)\n-                        currentQueue.add(currentKeyValue);\n-                    kvIter.next();\n-                } else\n-                    break;\n-            }\n-            \n-        }\n-        \n+public class ShardLimitingIterator implements Iterator<Entry<Key, Value>> {\n+\n+  protected PeekingIterator<Entry<Key, Value>> kvIter;\n+  protected int maxShardsPerDay = Integer.MAX_VALUE;\n+  protected Queue<Entry<Key, Value>> currentQueue;\n+  protected String currentDay = null;\n+  // simply compare the strings. no need for a date formatter\n+  protected static final int dateCfLength = 8;\n+\n+  protected boolean seenUnexpectedKey = false;\n+\n+  private static final Logger log = Logger.getLogger(ShardLimitingIterator.class);\n+\n+  public ShardLimitingIterator(Iterator<Entry<Key, Value>> kvIter, int maxShardsPerDay) {\n+    this.kvIter = new PeekingIterator<>(kvIter);\n+    this.maxShardsPerDay = maxShardsPerDay;\n+    currentQueue = Queues.newArrayDeque();\n+  }\n+\n+  @Override\n+  public boolean hasNext() {\n+    if (currentQueue.isEmpty()) {\n+      // reset the state of the current day.\n+      currentDay = null;\n+      peekInSource();\n     }\n-    \n-    /**\n-     * Get the day from the key\n-     * \n-     * @param key\n-     * @return\n-     */\n-    protected String getDay(final Key key) {\n-        String myDay = null;\n-        byte[] cq = key.getColumnQualifierData().getBackingArray();\n-        if (cq.length >= dateCfLength) {\n-            myDay = new String(cq, 0, dateCfLength);\n-            if (log.isTraceEnabled()) {\n-                log.trace(\"Day is \" + myDay);\n-            }\n+    return !currentQueue.isEmpty();\n+  }\n+\n+  protected void peekInSource() {\n+    while (kvIter.hasNext()) {\n+      Entry<Key, Value> currentKeyValue = kvIter.peek();\n+\n+      // become a passthrough if we've seen an unexpected key.\n+      if (seenUnexpectedKey) {\n+        currentQueue.add(currentKeyValue);\n+        break;\n+      }\n+\n+      if (null == currentDay) {\n+        if (log.isTraceEnabled()) {\n+          log.trace(\"it's a new day!\");\n         }\n-        return myDay;\n-    }\n-    \n-    @Override\n-    public Entry<Key,Value> next() {\n-        \n-        Entry<Key,Value> top = currentQueue.poll();\n-        if (currentQueue.size() >= maxShardsPerDay) {\n-            \n-            Key topKey = top.getKey();\n-            if (log.isTraceEnabled())\n-                log.trace(topKey + \" for \" + currentDay + \" exceeds limit of \" + maxShardsPerDay + \" with \" + currentQueue.size());\n-            Key newKey = new Key(topKey.getRow(), topKey.getColumnFamily(), new Text(currentDay), topKey.getColumnVisibility(), topKey.getTimestamp());\n-            \n-            currentQueue.clear();\n-            \n-            IndexInfo info = new IndexInfo(-1);\n-            \n-            Value newValue = null;\n-            try {\n-                \n-                ByteArrayOutputStream outByteStream = new ByteArrayOutputStream();\n-                DataOutputStream outDataStream = new DataOutputStream(outByteStream);\n-                info.write(outDataStream);\n-                \n-                outDataStream.close();\n-                outByteStream.close();\n-                \n-                newValue = new Value(outByteStream.toByteArray());\n-            } catch (IOException e) {\n-                throw new DatawaveFatalQueryException(e);\n-            }\n-            \n-            return Maps.immutableEntry(newKey, newValue);\n+        currentDay = getDay(currentKeyValue.getKey());\n+        currentQueue.add(currentKeyValue);\n+        kvIter.next();\n+      } else {\n+        String nextKeysDay = getDay(currentKeyValue.getKey());\n+        if (currentDay.equals(nextKeysDay)) {\n+          if (log.isTraceEnabled()) {\n+            log.trace(\"adding \" + currentKeyValue.getKey() + \" to queue because it matches\" + currentDay);\n+          }\n+          if (currentQueue.size() <= maxShardsPerDay) {\n+            currentQueue.add(currentKeyValue);\n+          }\n+          kvIter.next();\n         } else {\n-            if (log.isTraceEnabled())\n-                log.trace(top + \" for \" + currentDay + \" does not exceed limit of \" + maxShardsPerDay + \" with \" + currentQueue.size());\n-            return top;\n+          break;\n         }\n+      }\n+\n+    }\n+\n+  }\n+\n+  /**\n+   * Get the day from the key\n+   *\n+   * @param key\n+   * @return\n+   */\n+  protected String getDay(final Key key) {\n+    String myDay = null;\n+    byte[] cq = key.getColumnQualifierData().getBackingArray();\n+    if (cq.length >= dateCfLength) {\n+      myDay = new String(cq, 0, dateCfLength);\n+      if (log.isTraceEnabled()) {\n+        log.trace(\"Day is \" + myDay);\n+      }\n     }\n-    \n-    @Override\n-    public void remove() {\n-        \n+    return myDay;\n+  }\n+\n+  @Override\n+  public Entry<Key, Value> next() {\n+\n+    Entry<Key, Value> top = currentQueue.poll();\n+    if (currentQueue.size() >= maxShardsPerDay) {\n+\n+      Key topKey = top.getKey();\n+      if (log.isTraceEnabled()) {\n+        log.trace(\n+            topKey + \" for \" + currentDay + \" exceeds limit of \" + maxShardsPerDay + \" with \" + currentQueue.size());\n+      }\n+      Key newKey =\n+          new Key(topKey.getRow(), topKey.getColumnFamily(), new Text(currentDay), topKey.getColumnVisibility(),\n+              topKey.getTimestamp());\n+\n+      currentQueue.clear();\n+\n+      IndexInfo info = new IndexInfo(-1);\n+\n+      Value newValue = null;\n+      try {\n+\n+        ByteArrayOutputStream outByteStream = new ByteArrayOutputStream();\n+        DataOutputStream outDataStream = new DataOutputStream(outByteStream);\n+        info.write(outDataStream);\n+\n+        outDataStream.close();\n+        outByteStream.close();\n+\n+        newValue = new Value(outByteStream.toByteArray());\n+      } catch (IOException e) {\n+        throw new DatawaveFatalQueryException(e);\n+      }\n+\n+      return Maps.immutableEntry(newKey, newValue);\n+    } else {\n+      if (log.isTraceEnabled()) {\n+        log.trace(top + \" for \" + currentDay + \" does not exceed limit of \" + maxShardsPerDay + \" with \" +\n+            currentQueue.size());\n+      }\n+      return top;\n     }\n-    \n+  }\n+\n+  @Override\n+  public void remove() {\n+\n+  }\n+\n }\n",
            "diff_size": 186
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "14",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/57/ShardLimitingIterator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/naturalize/57/ShardLimitingIterator.java\nindex 55cc96154ab..0c5e65ca575 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/57/ShardLimitingIterator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/naturalize/57/ShardLimitingIterator.java\n@@ -146,4 +146,4 @@ public class ShardLimitingIterator implements Iterator<Entry<Key,Value>> {\n         \n     }\n     \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "12",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/57/ShardLimitingIterator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/codebuff/57/ShardLimitingIterator.java\nindex 55cc96154ab..a3d6ac886ea 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/57/ShardLimitingIterator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/codebuff/57/ShardLimitingIterator.java\n@@ -6,15 +6,12 @@ import java.io.IOException;\n import java.util.Iterator;\n import java.util.Map.Entry;\n import java.util.Queue;\n-\n import datawave.query.exceptions.DatawaveFatalQueryException;\n-\n import org.apache.accumulo.core.data.Key;\n import org.apache.accumulo.core.data.Value;\n import org.apache.accumulo.core.util.PeekingIterator;\n import org.apache.hadoop.io.Text;\n import org.apache.log4j.Logger;\n-\n import com.google.common.collect.Maps;\n import com.google.common.collect.Queues;\n \n@@ -22,25 +19,25 @@ import com.google.common.collect.Queues;\n  * Purpose: Limits the number of shards we will evaluate for a given term. Once we hit the preconfigured number will short circuit.\n  *\n  */\n+\n+\n public class ShardLimitingIterator implements Iterator<Entry<Key,Value>> {\n-    \n+\n     protected PeekingIterator<Entry<Key,Value>> kvIter;\n     protected int maxShardsPerDay = Integer.MAX_VALUE;\n     protected Queue<Entry<Key,Value>> currentQueue;\n     protected String currentDay = null;\n     // simply compare the strings. no need for a date formatter\n     protected static final int dateCfLength = 8;\n-    \n     protected boolean seenUnexpectedKey = false;\n-    \n     private static final Logger log = Logger.getLogger(ShardLimitingIterator.class);\n-    \n+\n     public ShardLimitingIterator(Iterator<Entry<Key,Value>> kvIter, int maxShardsPerDay) {\n         this.kvIter = new PeekingIterator<>(kvIter);\n         this.maxShardsPerDay = maxShardsPerDay;\n         currentQueue = Queues.newArrayDeque();\n     }\n-    \n+\n     @Override\n     public boolean hasNext() {\n         if (currentQueue.isEmpty()) {\n@@ -50,7 +47,7 @@ public class ShardLimitingIterator implements Iterator<Entry<Key,Value>> {\n         }\n         return !currentQueue.isEmpty();\n     }\n-    \n+\n     protected void peekInSource() {\n         while (kvIter.hasNext()) {\n             Entry<Key,Value> currentKeyValue = kvIter.peek();\n@@ -60,7 +57,8 @@ public class ShardLimitingIterator implements Iterator<Entry<Key,Value>> {\n                 currentQueue.add(currentKeyValue);\n                 break;\n             }\n-            \n+\n+\n             if (null == currentDay) {\n                 if (log.isTraceEnabled()) {\n                     log.trace(\"it's a new day!\");\n@@ -74,15 +72,14 @@ public class ShardLimitingIterator implements Iterator<Entry<Key,Value>> {\n                     if (log.isTraceEnabled()) {\n                         log.trace(\"adding \" + currentKeyValue.getKey() + \" to queue because it matches\" + currentDay);\n                     }\n+\n+\n                     if (currentQueue.size() <= maxShardsPerDay)\n                         currentQueue.add(currentKeyValue);\n                     kvIter.next();\n-                } else\n-                    break;\n+                } else break;\n             }\n-            \n         }\n-        \n     }\n     \n     /**\n@@ -91,6 +88,7 @@ public class ShardLimitingIterator implements Iterator<Entry<Key,Value>> {\n      * @param key\n      * @return\n      */\n+\n     protected String getDay(final Key key) {\n         String myDay = null;\n         byte[] cq = key.getColumnQualifierData().getBackingArray();\n@@ -102,37 +100,30 @@ public class ShardLimitingIterator implements Iterator<Entry<Key,Value>> {\n         }\n         return myDay;\n     }\n-    \n+\n     @Override\n     public Entry<Key,Value> next() {\n-        \n         Entry<Key,Value> top = currentQueue.poll();\n         if (currentQueue.size() >= maxShardsPerDay) {\n-            \n             Key topKey = top.getKey();\n             if (log.isTraceEnabled())\n                 log.trace(topKey + \" for \" + currentDay + \" exceeds limit of \" + maxShardsPerDay + \" with \" + currentQueue.size());\n+\n             Key newKey = new Key(topKey.getRow(), topKey.getColumnFamily(), new Text(currentDay), topKey.getColumnVisibility(), topKey.getTimestamp());\n-            \n             currentQueue.clear();\n-            \n+\n             IndexInfo info = new IndexInfo(-1);\n-            \n             Value newValue = null;\n             try {\n-                \n                 ByteArrayOutputStream outByteStream = new ByteArrayOutputStream();\n                 DataOutputStream outDataStream = new DataOutputStream(outByteStream);\n                 info.write(outDataStream);\n-                \n                 outDataStream.close();\n                 outByteStream.close();\n-                \n                 newValue = new Value(outByteStream.toByteArray());\n             } catch (IOException e) {\n                 throw new DatawaveFatalQueryException(e);\n             }\n-            \n             return Maps.immutableEntry(newKey, newValue);\n         } else {\n             if (log.isTraceEnabled())\n@@ -140,10 +131,7 @@ public class ShardLimitingIterator implements Iterator<Entry<Key,Value>> {\n             return top;\n         }\n     }\n-    \n+\n     @Override\n-    public void remove() {\n-        \n-    }\n-    \n-}\n+    public void remove() {}\n+}\n\\ No newline at end of file\n",
            "diff_size": 37
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "14",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "14",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}