{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3819",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "64",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "225",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "230",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "321",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "321",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "339",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "339",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "350",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "350",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "365",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "365",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "389",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "389",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "399",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "399",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "401",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "401",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "405",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "405",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "409",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "409",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "422",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "424",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "424",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "429",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "429",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "432",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "432",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "455",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "455",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "475",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "475",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "488",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "488",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "493",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "493",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "495",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "495",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "499",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "499",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "505",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "505",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "510",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "510",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "524",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "524",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "538",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "538",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "540",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "540",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "542",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "542",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "545",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "545",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "547",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "547",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "550",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "550",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "552",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "552",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "555",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "555",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "557",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "557",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3819/NodeUpdates.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3819/NodeUpdates.java\nindex adc92e8951f..c10d0cd0d45 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3819/NodeUpdates.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3819/NodeUpdates.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api.index;\n \n import java.util.ArrayList;\n@@ -46,503 +47,513 @@ import static org.neo4j.kernel.impl.api.index.NodeUpdates.PropertyValueType.NoVa\n  */\n public class NodeUpdates implements PropertyLoader.PropertyLoadSink\n {\n-    private final long nodeId;\n-    private static final long[] EMPTY_LONG_ARRAY = new long[0];\n-\n-    // ASSUMPTION: these long arrays are actually sorted sets\n-    private final long[] labelsBefore;\n-    private final long[] labelsAfter;\n-\n-    private final PrimitiveIntObjectMap<PropertyValue> knownProperties;\n-    private boolean hasLoadedAdditionalProperties;\n-\n-    public static class Builder\n-    {\n-        private NodeUpdates updates;\n-\n-        private Builder( NodeUpdates updates )\n-        {\n-            this.updates = updates;\n-        }\n+  private final long nodeId;\n+  private static final long[] EMPTY_LONG_ARRAY = new long[0];\n \n-        public Builder added( int propertyKeyId, Value value )\n-        {\n-            updates.put( propertyKeyId, NodeUpdates.after( value ) );\n-            return this;\n-        }\n+  // ASSUMPTION: these long arrays are actually sorted sets\n+  private final long[] labelsBefore;\n+  private final long[] labelsAfter;\n \n-        public Builder removed( int propertyKeyId, Value value )\n-        {\n-            updates.put( propertyKeyId, NodeUpdates.before( value ) );\n-            return this;\n-        }\n+  private final PrimitiveIntObjectMap<PropertyValue> knownProperties;\n+  private boolean hasLoadedAdditionalProperties;\n \n-        public Builder changed( int propertyKeyId, Value before, Value after )\n-        {\n-            updates.put( propertyKeyId, NodeUpdates.changed( before, after ) );\n-            return this;\n-        }\n+  public static class Builder\n+  {\n+    private NodeUpdates updates;\n \n-        public Builder existing( int propertyKeyId, Value value )\n-        {\n-            updates.put( propertyKeyId, NodeUpdates.unchanged( value ) );\n-            return this;\n-        }\n-\n-        public NodeUpdates build()\n-        {\n-            return updates;\n-        }\n-    }\n-\n-    private void put( int propertyKeyId, PropertyValue propertyValue )\n+    private Builder(NodeUpdates updates)\n     {\n-        knownProperties.put( propertyKeyId, propertyValue );\n+      this.updates = updates;\n     }\n \n-    public static Builder forNode( long nodeId )\n+    public Builder added(int propertyKeyId, Value value)\n     {\n-        return new Builder( new NodeUpdates( nodeId, EMPTY_LONG_ARRAY, EMPTY_LONG_ARRAY ) );\n+      updates.put(propertyKeyId, NodeUpdates.after(value));\n+      return this;\n     }\n \n-    public static Builder forNode( long nodeId, long[] labels )\n+    public Builder removed(int propertyKeyId, Value value)\n     {\n-        return new Builder( new NodeUpdates( nodeId, labels, labels ) );\n+      updates.put(propertyKeyId, NodeUpdates.before(value));\n+      return this;\n     }\n \n-    public static Builder forNode( long nodeId, long[] labelsBefore, long[] labelsAfter )\n+    public Builder changed(int propertyKeyId, Value before, Value after)\n     {\n-        return new Builder( new NodeUpdates( nodeId, labelsBefore, labelsAfter ) );\n+      updates.put(propertyKeyId, NodeUpdates.changed(before, after));\n+      return this;\n     }\n \n-    private NodeUpdates( long nodeId, long[] labelsBefore, long[] labelsAfter )\n+    public Builder existing(int propertyKeyId, Value value)\n     {\n-        this.nodeId = nodeId;\n-        this.labelsBefore = labelsBefore;\n-        this.labelsAfter = labelsAfter;\n-        this.knownProperties = Primitive.intObjectMap();\n-    }\n+      updates.put(propertyKeyId, NodeUpdates.unchanged(value));\n+      return this;\n+    }\n \n-    public final long getNodeId()\n+    public NodeUpdates build()\n     {\n-        return nodeId;\n+      return updates;\n     }\n+  }\n+\n+  private void put(int propertyKeyId, PropertyValue propertyValue)\n+  {\n+    knownProperties.put(propertyKeyId, propertyValue);\n+  }\n \n-    long[] labelsChanged()\n-    {\n-        return PrimitiveArrays.symmetricDifference( labelsBefore, labelsAfter );\n-    }\n+  public static Builder forNode(long nodeId)\n+  {\n+    return new Builder(new NodeUpdates(nodeId, EMPTY_LONG_ARRAY, EMPTY_LONG_ARRAY));\n+  }\n \n-    long[] labelsUnchanged()\n-    {\n-        return PrimitiveArrays.intersect( labelsBefore, labelsAfter );\n-    }\n+  public static Builder forNode(long nodeId, long[] labels)\n+  {\n+    return new Builder(new NodeUpdates(nodeId, labels, labels));\n+  }\n \n-    PrimitiveIntSet propertiesChanged()\n-    {\n-        assert !hasLoadedAdditionalProperties : \"Calling propertiesChanged() is not valid after non-changed \" +\n-                                                \"properties have already been loaded.\";\n-        return asSet( knownProperties.iterator() );\n-    }\n+  public static Builder forNode(long nodeId, long[] labelsBefore, long[] labelsAfter)\n+  {\n+    return new Builder(new NodeUpdates(nodeId, labelsBefore, labelsAfter));\n+  }\n \n-    @Override\n-    public void onProperty( int propertyId, Value value )\n-    {\n-        knownProperties.put( propertyId, unchanged( value ) );\n-    }\n-\n-    /**\n-     * Matches the provided schema descriptors to the node updates in this object, and generates an IndexEntryUpdate\n-     * for any index that needs to be updated.\n-     *\n-     * Note that unless this object contains a full representation of the node state after the update, the results\n-     * from this methods will not be correct. In that case, use the propertyLoader variant.\n-     *\n-     * @param indexKeys The index keys to generate entry updates for\n-     * @return IndexEntryUpdates for all relevant index keys\n-     */\n-    public <INDEX_KEY extends SchemaDescriptorSupplier> Iterable<IndexEntryUpdate<INDEX_KEY>> forIndexKeys(\n-            Iterable<INDEX_KEY> indexKeys )\n-    {\n-        Iterable<INDEX_KEY> potentiallyRelevant = Iterables.filter( this::atLeastOneRelevantChange, indexKeys );\n-\n-        return gatherUpdatesForPotentials( potentiallyRelevant );\n-    }\n-\n-    /**\n-     * Matches the provided schema descriptors to the node updates in this object, and generates an IndexEntryUpdate\n-     * for any index that needs to be updated.\n-     *\n-     * In some cases the updates to a node are not enough to determine whether some index should be affected. For\n-     * example if we have and index of label :A and property p1, and :A is added to this node, we cannot say whether\n-     * this should affect the index unless we know if this node has property p1. This get even more complicated for\n-     * composite indexes. To solve this problem, a propertyLoader is used to load any additional properties needed to\n-     * make these calls.\n-     *\n-     * @param indexKeys The index keys to generate entry updates for\n-     * @param propertyLoader The property loader used to fetch needed additional properties\n-     * @return IndexEntryUpdates for all relevant index keys\n-     */\n-    public <INDEX_KEY extends SchemaDescriptorSupplier> Iterable<IndexEntryUpdate<INDEX_KEY>> forIndexKeys(\n-            Iterable<INDEX_KEY> indexKeys, PropertyLoader propertyLoader )\n-    {\n-        List<INDEX_KEY> potentiallyRelevant = new ArrayList<>();\n-        PrimitiveIntSet additionalPropertiesToLoad = Primitive.intSet();\n-\n-        for ( INDEX_KEY indexKey : indexKeys )\n+  private NodeUpdates(long nodeId, long[] labelsBefore, long[] labelsAfter)\n+  {\n+    this.nodeId = nodeId;\n+    this.labelsBefore = labelsBefore;\n+    this.labelsAfter = labelsAfter;\n+    this.knownProperties = Primitive.intObjectMap();\n+  }\n+\n+  public final long getNodeId()\n+  {\n+    return nodeId;\n+  }\n+\n+  long[] labelsChanged()\n+  {\n+    return PrimitiveArrays.symmetricDifference(labelsBefore, labelsAfter);\n+  }\n+\n+  long[] labelsUnchanged()\n+  {\n+    return PrimitiveArrays.intersect(labelsBefore, labelsAfter);\n+  }\n+\n+  PrimitiveIntSet propertiesChanged()\n+  {\n+    assert !hasLoadedAdditionalProperties : \"Calling propertiesChanged() is not valid after non-changed \" +\n+        \"properties have already been loaded.\";\n+    return asSet(knownProperties.iterator());\n+  }\n+\n+  @Override\n+  public void onProperty(int propertyId, Value value)\n+  {\n+    knownProperties.put(propertyId, unchanged(value));\n+  }\n+\n+  /**\n+   * Matches the provided schema descriptors to the node updates in this object, and generates an IndexEntryUpdate\n+   * for any index that needs to be updated.\n+   * <p>\n+   * Note that unless this object contains a full representation of the node state after the update, the results\n+   * from this methods will not be correct. In that case, use the propertyLoader variant.\n+   *\n+   * @param indexKeys The index keys to generate entry updates for\n+   * @return IndexEntryUpdates for all relevant index keys\n+   */\n+  public <INDEX_KEY extends SchemaDescriptorSupplier> Iterable<IndexEntryUpdate<INDEX_KEY>> forIndexKeys(\n+      Iterable<INDEX_KEY> indexKeys)\n+  {\n+    Iterable<INDEX_KEY> potentiallyRelevant = Iterables.filter(this::atLeastOneRelevantChange, indexKeys);\n+\n+    return gatherUpdatesForPotentials(potentiallyRelevant);\n+  }\n+\n+  /**\n+   * Matches the provided schema descriptors to the node updates in this object, and generates an IndexEntryUpdate\n+   * for any index that needs to be updated.\n+   * <p>\n+   * In some cases the updates to a node are not enough to determine whether some index should be affected. For\n+   * example if we have and index of label :A and property p1, and :A is added to this node, we cannot say whether\n+   * this should affect the index unless we know if this node has property p1. This get even more complicated for\n+   * composite indexes. To solve this problem, a propertyLoader is used to load any additional properties needed to\n+   * make these calls.\n+   *\n+   * @param indexKeys      The index keys to generate entry updates for\n+   * @param propertyLoader The property loader used to fetch needed additional properties\n+   * @return IndexEntryUpdates for all relevant index keys\n+   */\n+  public <INDEX_KEY extends SchemaDescriptorSupplier> Iterable<IndexEntryUpdate<INDEX_KEY>> forIndexKeys(\n+      Iterable<INDEX_KEY> indexKeys, PropertyLoader propertyLoader)\n+  {\n+    List<INDEX_KEY> potentiallyRelevant = new ArrayList<>();\n+    PrimitiveIntSet additionalPropertiesToLoad = Primitive.intSet();\n+\n+    for (INDEX_KEY indexKey : indexKeys)\n+    {\n+      if (atLeastOneRelevantChange(indexKey))\n+      {\n+        potentiallyRelevant.add(indexKey);\n+        gatherPropsToLoad(indexKey.schema(), additionalPropertiesToLoad);\n+      }\n+    }\n+\n+    if (!additionalPropertiesToLoad.isEmpty())\n+    {\n+      loadProperties(propertyLoader, additionalPropertiesToLoad);\n+    }\n+\n+    return gatherUpdatesForPotentials(potentiallyRelevant);\n+  }\n+\n+  private <INDEX_KEY extends SchemaDescriptorSupplier> Iterable<IndexEntryUpdate<INDEX_KEY>> gatherUpdatesForPotentials(\n+      Iterable<INDEX_KEY> potentiallyRelevant)\n+  {\n+    List<IndexEntryUpdate<INDEX_KEY>> indexUpdates = new ArrayList<>();\n+    for (INDEX_KEY indexKey : potentiallyRelevant)\n+    {\n+      SchemaDescriptor schema = indexKey.schema();\n+      boolean relevantBefore = relevantBefore(schema);\n+      boolean relevantAfter = relevantAfter(schema);\n+      int[] propertyIds = schema.getPropertyIds();\n+      if (relevantBefore && !relevantAfter)\n+      {\n+        indexUpdates.add(IndexEntryUpdate.remove(\n+            nodeId, indexKey, valuesBefore(propertyIds)\n+        ));\n+      } else if (!relevantBefore && relevantAfter)\n+      {\n+        indexUpdates.add(IndexEntryUpdate.add(\n+            nodeId, indexKey, valuesAfter(propertyIds)\n+        ));\n+      } else if (relevantBefore)\n+      {\n+        if (valuesChanged(propertyIds))\n         {\n-            if ( atLeastOneRelevantChange( indexKey ) )\n-            {\n-                potentiallyRelevant.add( indexKey );\n-                gatherPropsToLoad( indexKey.schema(), additionalPropertiesToLoad );\n-            }\n+          indexUpdates.add(IndexEntryUpdate.change(\n+              nodeId, indexKey, valuesBefore(propertyIds), valuesAfter(propertyIds)));\n         }\n+      }\n+    }\n \n-        if ( !additionalPropertiesToLoad.isEmpty() )\n-        {\n-            loadProperties( propertyLoader, additionalPropertiesToLoad );\n-        }\n+    return indexUpdates;\n+  }\n \n-        return gatherUpdatesForPotentials( potentiallyRelevant );\n-    }\n+  private boolean relevantBefore(SchemaDescriptor schema)\n+  {\n+    return hasLabel(schema.keyId(), labelsBefore) &&\n+        hasPropsBefore(schema.getPropertyIds());\n+  }\n \n-    private <INDEX_KEY extends SchemaDescriptorSupplier> Iterable<IndexEntryUpdate<INDEX_KEY>> gatherUpdatesForPotentials(\n-            Iterable<INDEX_KEY> potentiallyRelevant )\n-    {\n-        List<IndexEntryUpdate<INDEX_KEY>> indexUpdates = new ArrayList<>();\n-        for ( INDEX_KEY indexKey : potentiallyRelevant )\n-        {\n-            SchemaDescriptor schema = indexKey.schema();\n-            boolean relevantBefore = relevantBefore( schema );\n-            boolean relevantAfter = relevantAfter( schema );\n-            int[] propertyIds = schema.getPropertyIds();\n-            if ( relevantBefore && !relevantAfter )\n-            {\n-                indexUpdates.add( IndexEntryUpdate.remove(\n-                        nodeId, indexKey, valuesBefore( propertyIds )\n-                    ) );\n-            }\n-            else if ( !relevantBefore && relevantAfter )\n-            {\n-                indexUpdates.add( IndexEntryUpdate.add(\n-                        nodeId, indexKey, valuesAfter( propertyIds )\n-                ) );\n-            }\n-            else if ( relevantBefore )\n-            {\n-                if ( valuesChanged( propertyIds ) )\n-                {\n-                    indexUpdates.add( IndexEntryUpdate.change(\n-                            nodeId, indexKey, valuesBefore( propertyIds ), valuesAfter( propertyIds ) ) );\n-                }\n-            }\n-        }\n+  private boolean relevantAfter(SchemaDescriptor schema)\n+  {\n+    return hasLabel(schema.keyId(), labelsAfter) &&\n+        hasPropsAfter(schema.getPropertyIds());\n+  }\n \n-        return indexUpdates;\n-    }\n+  private void loadProperties(PropertyLoader propertyLoader, PrimitiveIntSet additionalPropertiesToLoad)\n+  {\n+    hasLoadedAdditionalProperties = true;\n+    propertyLoader.loadProperties(nodeId, additionalPropertiesToLoad, this);\n \n-    private boolean relevantBefore( SchemaDescriptor schema )\n+    // loadProperties removes loaded properties from the input set, so the remaining ones were not on the node\n+    PrimitiveIntIterator propertiesWithNoValue = additionalPropertiesToLoad.iterator();\n+    while (propertiesWithNoValue.hasNext())\n     {\n-        return hasLabel( schema.keyId(), labelsBefore ) &&\n-                hasPropsBefore( schema.getPropertyIds() );\n+      knownProperties.put(propertiesWithNoValue.next(), noValue);\n     }\n+  }\n \n-    private boolean relevantAfter( SchemaDescriptor schema )\n+  private void gatherPropsToLoad(SchemaDescriptor schema, PrimitiveIntSet target)\n+  {\n+    for (int propertyId : schema.getPropertyIds())\n     {\n-        return hasLabel( schema.keyId(), labelsAfter ) &&\n-                hasPropsAfter( schema.getPropertyIds() );\n+      if (knownProperties.get(propertyId) == null)\n+      {\n+        target.add(propertyId);\n+      }\n     }\n+  }\n \n-    private void loadProperties( PropertyLoader propertyLoader, PrimitiveIntSet additionalPropertiesToLoad )\n+  private boolean atLeastOneRelevantChange(SchemaDescriptorSupplier indexKey)\n+  {\n+    int labelId = indexKey.schema().keyId();\n+    boolean labelBefore = hasLabel(labelId, labelsBefore);\n+    boolean labelAfter = hasLabel(labelId, labelsAfter);\n+    if (labelBefore && labelAfter)\n     {\n-        hasLoadedAdditionalProperties = true;\n-        propertyLoader.loadProperties( nodeId, additionalPropertiesToLoad, this );\n-\n-        // loadProperties removes loaded properties from the input set, so the remaining ones were not on the node\n-        PrimitiveIntIterator propertiesWithNoValue = additionalPropertiesToLoad.iterator();\n-        while ( propertiesWithNoValue.hasNext() )\n+      for (int propertyId : indexKey.schema().getPropertyIds())\n+      {\n+        if (knownProperties.get(propertyId) != null)\n         {\n-            knownProperties.put( propertiesWithNoValue.next(), noValue );\n+          return true;\n         }\n+      }\n+      return false;\n     }\n+    return labelBefore || labelAfter;\n+  }\n+\n+  private boolean hasLabel(int labelId, long[] labels)\n+  {\n+    return binarySearch(labels, labelId) >= 0;\n+  }\n \n-    private void gatherPropsToLoad( SchemaDescriptor schema, PrimitiveIntSet target )\n+  private boolean hasPropsBefore(int[] propertyIds)\n+  {\n+    for (int propertyId : propertyIds)\n     {\n-        for ( int propertyId : schema.getPropertyIds() )\n-        {\n-            if ( knownProperties.get( propertyId ) == null )\n-            {\n-                target.add( propertyId );\n-            }\n-        }\n+      PropertyValue propertyValue = knownProperties.get(propertyId);\n+      if (propertyValue == null || !propertyValue.hasBefore())\n+      {\n+        return false;\n+      }\n     }\n+    return true;\n+  }\n \n-    private boolean atLeastOneRelevantChange( SchemaDescriptorSupplier indexKey )\n+  private boolean hasPropsAfter(int[] propertyIds)\n+  {\n+    for (int propertyId : propertyIds)\n     {\n-        int labelId = indexKey.schema().keyId();\n-        boolean labelBefore = hasLabel( labelId, labelsBefore );\n-        boolean labelAfter = hasLabel( labelId, labelsAfter );\n-        if ( labelBefore && labelAfter )\n-        {\n-            for ( int propertyId : indexKey.schema().getPropertyIds() )\n-            {\n-                if ( knownProperties.get( propertyId ) != null )\n-                {\n-                    return true;\n-                }\n-            }\n-            return false;\n-        }\n-        return labelBefore || labelAfter;\n+      PropertyValue propertyValue = knownProperties.get(propertyId);\n+      if (propertyValue == null || !propertyValue.hasAfter())\n+      {\n+        return false;\n+      }\n     }\n+    return true;\n+  }\n \n-    private boolean hasLabel( int labelId, long[] labels )\n+  private Value[] valuesBefore(int[] propertyIds)\n+  {\n+    Value[] values = new Value[propertyIds.length];\n+    for (int i = 0; i < propertyIds.length; i++)\n     {\n-        return binarySearch( labels, labelId ) >= 0;\n+      values[i] = knownProperties.get(propertyIds[i]).before;\n     }\n+    return values;\n+  }\n \n-    private boolean hasPropsBefore( int[] propertyIds )\n+  private Value[] valuesAfter(int[] propertyIds)\n+  {\n+    Value[] values = new Value[propertyIds.length];\n+    for (int i = 0; i < propertyIds.length; i++)\n     {\n-        for ( int propertyId : propertyIds )\n-        {\n-            PropertyValue propertyValue = knownProperties.get( propertyId );\n-            if ( propertyValue == null || !propertyValue.hasBefore() )\n-            {\n-                return false;\n-            }\n-        }\n-        return true;\n+      PropertyValue propertyValue = knownProperties.get(propertyIds[i]);\n+      values[i] = propertyValue == null ? null : propertyValue.after;\n     }\n+    return values;\n+  }\n \n-    private boolean hasPropsAfter( int[] propertyIds )\n+  private boolean valuesChanged(int[] propertyIds)\n+  {\n+    for (int propertyId : propertyIds)\n     {\n-        for ( int propertyId : propertyIds )\n-        {\n-            PropertyValue propertyValue = knownProperties.get( propertyId );\n-            if ( propertyValue == null || !propertyValue.hasAfter() )\n-            {\n-                return false;\n-            }\n-        }\n+      if (knownProperties.get(propertyId).type == Changed)\n+      {\n         return true;\n+      }\n+    }\n+    return false;\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    StringBuilder result = new StringBuilder(getClass().getSimpleName()).append(\"[\").append(nodeId);\n+    result.append(\", labelsBefore:\").append(Arrays.toString(labelsBefore));\n+    result.append(\", labelsAfter:\").append(Arrays.toString(labelsAfter));\n+    knownProperties.visitEntries((key, propertyValue) ->\n+    {\n+      result.append(\", \");\n+      result.append(key);\n+      result.append(\" -> \");\n+      result.append(propertyValue);\n+      return false;\n+    });\n+    return result.append(']').toString();\n+  }\n+\n+  @Override\n+  public int hashCode()\n+  {\n+    final int prime = 31;\n+    int result = 1;\n+    result = prime * result + Arrays.hashCode(labelsBefore);\n+    result = prime * result + Arrays.hashCode(labelsAfter);\n+    result = prime * result + (int) (nodeId ^ (nodeId >>> 32));\n+\n+    PrimitiveIntIterator propertyKeyIds = knownProperties.iterator();\n+    while (propertyKeyIds.hasNext())\n+    {\n+      int propertyKeyId = propertyKeyIds.next();\n+      result = result * 31 + propertyKeyId;\n+      result = result * 31 + knownProperties.get(propertyKeyId).hashCode();\n+    }\n+    return result;\n+  }\n+\n+  @Override\n+  public boolean equals(Object obj)\n+  {\n+    if (this == obj)\n+    {\n+      return true;\n+    }\n+    if (obj == null)\n+    {\n+      return false;\n+    }\n+    if (getClass() != obj.getClass())\n+    {\n+      return false;\n+    }\n+    NodeUpdates other = (NodeUpdates) obj;\n+    return Arrays.equals(labelsBefore, other.labelsBefore) &&\n+        Arrays.equals(labelsAfter, other.labelsAfter) &&\n+        nodeId == other.nodeId &&\n+        propertyMapEquals(knownProperties, other.knownProperties);\n+  }\n+\n+  private boolean propertyMapEquals(\n+      PrimitiveIntObjectMap<PropertyValue> a,\n+      PrimitiveIntObjectMap<PropertyValue> b)\n+  {\n+    if (a.size() != b.size())\n+    {\n+      return false;\n+    }\n+    PrimitiveIntIterator aIterator = a.iterator();\n+    while (aIterator.hasNext())\n+    {\n+      int key = aIterator.next();\n+      if (!a.get(key).equals(b.get(key)))\n+      {\n+        return false;\n+      }\n     }\n+    return true;\n+  }\n \n-    private Value[] valuesBefore( int[] propertyIds )\n-    {\n-        Value[] values = new Value[propertyIds.length];\n-        for ( int i = 0; i < propertyIds.length; i++ )\n-        {\n-            values[i] = knownProperties.get( propertyIds[i] ).before;\n-        }\n-        return values;\n-    }\n+  enum PropertyValueType\n+  {\n+    NoValue,\n+    Before,\n+    After,\n+    UnChanged,\n+    Changed\n+  }\n \n-    private Value[] valuesAfter( int[] propertyIds )\n-    {\n-        Value[] values = new Value[propertyIds.length];\n-        for ( int i = 0; i < propertyIds.length; i++ )\n-        {\n-            PropertyValue propertyValue = knownProperties.get( propertyIds[i] );\n-            values[i] = propertyValue == null ? null : propertyValue.after;\n-        }\n-        return values;\n-    }\n+  private static class PropertyValue\n+  {\n+    private final Value before;\n+    private final Value after;\n+    private final PropertyValueType type;\n \n-    private boolean valuesChanged( int[] propertyIds )\n+    private PropertyValue(Value before, Value after, PropertyValueType type)\n     {\n-        for ( int propertyId : propertyIds )\n-        {\n-            if ( knownProperties.get( propertyId ).type == Changed )\n-            {\n-                return true;\n-            }\n-        }\n-        return false;\n+      this.before = before;\n+      this.after = after;\n+      this.type = type;\n     }\n \n-    @Override\n-    public String toString()\n+    boolean hasBefore()\n     {\n-        StringBuilder result = new StringBuilder( getClass().getSimpleName() ).append( \"[\" ).append( nodeId );\n-        result.append( \", labelsBefore:\" ).append( Arrays.toString( labelsBefore ) );\n-        result.append( \", labelsAfter:\" ).append( Arrays.toString( labelsAfter ) );\n-        knownProperties.visitEntries( ( key, propertyValue ) ->\n-        {\n-            result.append( \", \" );\n-            result.append( key );\n-            result.append( \" -> \" );\n-            result.append( propertyValue );\n-            return false;\n-        } );\n-        return result.append( ']' ).toString();\n+      return before != null;\n     }\n \n-    @Override\n-    public int hashCode()\n+    boolean hasAfter()\n     {\n-        final int prime = 31;\n-        int result = 1;\n-        result = prime * result + Arrays.hashCode( labelsBefore );\n-        result = prime * result + Arrays.hashCode( labelsAfter );\n-        result = prime * result + (int) (nodeId ^ (nodeId >>> 32));\n-\n-        PrimitiveIntIterator propertyKeyIds = knownProperties.iterator();\n-        while ( propertyKeyIds.hasNext() )\n-        {\n-            int propertyKeyId = propertyKeyIds.next();\n-            result = result * 31 + propertyKeyId;\n-            result = result * 31 + knownProperties.get( propertyKeyId ).hashCode();\n-        }\n-        return result;\n+      return after != null;\n     }\n \n     @Override\n-    public boolean equals( Object obj )\n+    public String toString()\n     {\n-        if ( this == obj )\n-        {\n-            return true;\n-        }\n-        if ( obj == null )\n-        {\n-            return false;\n-        }\n-        if ( getClass() != obj.getClass() )\n-        {\n-            return false;\n-        }\n-        NodeUpdates other = (NodeUpdates) obj;\n-        return Arrays.equals( labelsBefore, other.labelsBefore ) &&\n-               Arrays.equals( labelsAfter, other.labelsAfter ) &&\n-               nodeId == other.nodeId &&\n-               propertyMapEquals( knownProperties, other.knownProperties );\n+      switch (type)\n+      {\n+        case NoValue:\n+          return \"NoValue\";\n+        case Before:\n+          return format(\"Before(%s)\", before);\n+        case After:\n+          return format(\"After(%s)\", after);\n+        case UnChanged:\n+          return format(\"UnChanged(%s)\", after);\n+        case Changed:\n+          return format(\"Changed(from=%s, to=%s)\", before, after);\n+        default:\n+          throw new IllegalStateException(\"This cannot happen!\");\n+      }\n     }\n \n-    private boolean propertyMapEquals(\n-            PrimitiveIntObjectMap<PropertyValue> a,\n-            PrimitiveIntObjectMap<PropertyValue> b )\n+    @Override\n+    public boolean equals(Object o)\n     {\n-        if ( a.size() != b.size() )\n-        {\n-            return false;\n-        }\n-        PrimitiveIntIterator aIterator = a.iterator();\n-        while ( aIterator.hasNext() )\n-        {\n-            int key = aIterator.next();\n-            if ( !a.get( key ).equals( b.get( key ) ) )\n-            {\n-                return false;\n-            }\n-        }\n+      if (this == o)\n+      {\n         return true;\n-    }\n+      }\n+      if (o == null || getClass() != o.getClass())\n+      {\n+        return false;\n+      }\n \n-    enum PropertyValueType\n-    {\n-        NoValue,\n-        Before,\n-        After,\n-        UnChanged,\n-        Changed\n+      PropertyValue that = (PropertyValue) o;\n+      if (type != that.type)\n+      {\n+        return false;\n+      }\n+\n+      switch (type)\n+      {\n+        case NoValue:\n+          return true;\n+        case Before:\n+          return before.equals(that.before);\n+        case After:\n+          return after.equals(that.after);\n+        case UnChanged:\n+          return after.equals(that.after);\n+        case Changed:\n+          return before.equals(that.before) &&\n+              after.equals(that.after);\n+        default:\n+          throw new IllegalStateException(\"This cannot happen!\");\n+      }\n     }\n \n-    private static class PropertyValue\n+    @Override\n+    public int hashCode()\n     {\n-        private final Value before;\n-        private final Value after;\n-        private final PropertyValueType type;\n-\n-        private PropertyValue( Value before, Value after, PropertyValueType type )\n-        {\n-            this.before = before;\n-            this.after = after;\n-            this.type = type;\n-        }\n-\n-        boolean hasBefore()\n-        {\n-            return before != null;\n-        }\n-\n-        boolean hasAfter()\n-        {\n-            return after != null;\n-        }\n-\n-        @Override\n-        public String toString()\n-        {\n-            switch ( type )\n-            {\n-            case NoValue:   return \"NoValue\";\n-            case Before:    return format( \"Before(%s)\", before );\n-            case After:     return format( \"After(%s)\", after );\n-            case UnChanged: return format( \"UnChanged(%s)\", after );\n-            case Changed:   return format( \"Changed(from=%s, to=%s)\", before, after );\n-            default:        throw new IllegalStateException( \"This cannot happen!\" );\n-            }\n-        }\n-\n-        @Override\n-        public boolean equals( Object o )\n-        {\n-            if ( this == o )\n-            {\n-                return true;\n-            }\n-            if ( o == null || getClass() != o.getClass() )\n-            {\n-                return false;\n-            }\n-\n-            PropertyValue that = (PropertyValue) o;\n-            if ( type != that.type )\n-            {\n-                return false;\n-            }\n-\n-            switch ( type )\n-            {\n-            case NoValue:   return true;\n-            case Before:    return before.equals( that.before );\n-            case After:     return after.equals( that.after );\n-            case UnChanged: return after.equals( that.after );\n-            case Changed:   return before.equals( that.before ) &&\n-                                    after.equals( that.after );\n-            default:        throw new IllegalStateException( \"This cannot happen!\" );\n-            }\n-        }\n-\n-        @Override\n-        public int hashCode()\n-        {\n-            int result = before != null ? before.hashCode() : 0;\n-            result = 31 * result + (after != null ? after.hashCode() : 0);\n-            result = 31 * result + (type != null ? type.hashCode() : 0);\n-            return result;\n-        }\n+      int result = before != null ? before.hashCode() : 0;\n+      result = 31 * result + (after != null ? after.hashCode() : 0);\n+      result = 31 * result + (type != null ? type.hashCode() : 0);\n+      return result;\n     }\n+  }\n \n-    private static PropertyValue noValue = new PropertyValue( null, null, NoValue );\n+  private static PropertyValue noValue = new PropertyValue(null, null, NoValue);\n \n-    private static PropertyValue before( Value value )\n-    {\n-        return new PropertyValue( value, null, PropertyValueType.Before );\n-    }\n+  private static PropertyValue before(Value value)\n+  {\n+    return new PropertyValue(value, null, PropertyValueType.Before);\n+  }\n \n-    private static PropertyValue after( Value value )\n-    {\n-        return new PropertyValue( null, value, PropertyValueType.After );\n-    }\n+  private static PropertyValue after(Value value)\n+  {\n+    return new PropertyValue(null, value, PropertyValueType.After);\n+  }\n \n-    private static PropertyValue unchanged( Value value )\n-    {\n-        return new PropertyValue( value, value, PropertyValueType.UnChanged );\n-    }\n+  private static PropertyValue unchanged(Value value)\n+  {\n+    return new PropertyValue(value, value, PropertyValueType.UnChanged);\n+  }\n \n-    private static PropertyValue changed( Value before, Value after )\n-    {\n-        return new PropertyValue( before, after, PropertyValueType.Changed );\n-    }\n+  private static PropertyValue changed(Value before, Value after)\n+  {\n+    return new PropertyValue(before, after, PropertyValueType.Changed);\n+  }\n }\n",
            "diff_size": 644
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "183",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "204",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "377",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "408",
                    "column": "66",
                    "severity": "error",
                    "message": "'&&' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "511",
                    "column": "41",
                    "severity": "error",
                    "message": "'&&' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3819/NodeUpdates.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3819/NodeUpdates.java\nindex adc92e8951f..54d9f83b98a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3819/NodeUpdates.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3819/NodeUpdates.java\n@@ -140,9 +140,8 @@ public class NodeUpdates implements PropertyLoader.PropertyLoadSink\n \n     PrimitiveIntSet propertiesChanged()\n     {\n-        assert !hasLoadedAdditionalProperties : \"Calling propertiesChanged() is not valid after non-changed \" +\n-                                                \"properties have already been loaded.\";\n-        return asSet( knownProperties.iterator() );\n+        assert !hasLoadedAdditionalProperties : \"Calling propertiesChanged() is not valid after non-changed \" + \"properties have already been loaded.\";\n+return asSet( knownProperties.iterator() );\n     }\n \n     @Override\n@@ -161,12 +160,10 @@ public class NodeUpdates implements PropertyLoader.PropertyLoadSink\n      * @param indexKeys The index keys to generate entry updates for\n      * @return IndexEntryUpdates for all relevant index keys\n      */\n-    public <INDEX_KEY extends SchemaDescriptorSupplier> Iterable<IndexEntryUpdate<INDEX_KEY>> forIndexKeys(\n-            Iterable<INDEX_KEY> indexKeys )\n+    public <INDEX_KEY extends SchemaDescriptorSupplier> Iterable<IndexEntryUpdate<INDEX_KEY>> forIndexKeys( Iterable<INDEX_KEY> indexKeys )\n     {\n         Iterable<INDEX_KEY> potentiallyRelevant = Iterables.filter( this::atLeastOneRelevantChange, indexKeys );\n-\n-        return gatherUpdatesForPotentials( potentiallyRelevant );\n+return gatherUpdatesForPotentials( potentiallyRelevant );\n     }\n \n     /**\n@@ -183,13 +180,11 @@ public class NodeUpdates implements PropertyLoader.PropertyLoadSink\n      * @param propertyLoader The property loader used to fetch needed additional properties\n      * @return IndexEntryUpdates for all relevant index keys\n      */\n-    public <INDEX_KEY extends SchemaDescriptorSupplier> Iterable<IndexEntryUpdate<INDEX_KEY>> forIndexKeys(\n-            Iterable<INDEX_KEY> indexKeys, PropertyLoader propertyLoader )\n+    public <INDEX_KEY extends SchemaDescriptorSupplier> Iterable<IndexEntryUpdate<INDEX_KEY>> forIndexKeys( Iterable<INDEX_KEY> indexKeys, PropertyLoader propertyLoader )\n     {\n         List<INDEX_KEY> potentiallyRelevant = new ArrayList<>();\n         PrimitiveIntSet additionalPropertiesToLoad = Primitive.intSet();\n-\n-        for ( INDEX_KEY indexKey : indexKeys )\n+for ( INDEX_KEY indexKey : indexKeys )\n         {\n             if ( atLeastOneRelevantChange( indexKey ) )\n             {\n@@ -206,8 +201,7 @@ public class NodeUpdates implements PropertyLoader.PropertyLoadSink\n         return gatherUpdatesForPotentials( potentiallyRelevant );\n     }\n \n-    private <INDEX_KEY extends SchemaDescriptorSupplier> Iterable<IndexEntryUpdate<INDEX_KEY>> gatherUpdatesForPotentials(\n-            Iterable<INDEX_KEY> potentiallyRelevant )\n+    private <INDEX_KEY extends SchemaDescriptorSupplier> Iterable<IndexEntryUpdate<INDEX_KEY>> gatherUpdatesForPotentials( Iterable<INDEX_KEY> potentiallyRelevant )\n     {\n         List<IndexEntryUpdate<INDEX_KEY>> indexUpdates = new ArrayList<>();\n         for ( INDEX_KEY indexKey : potentiallyRelevant )\n@@ -218,23 +212,18 @@ public class NodeUpdates implements PropertyLoader.PropertyLoadSink\n             int[] propertyIds = schema.getPropertyIds();\n             if ( relevantBefore && !relevantAfter )\n             {\n-                indexUpdates.add( IndexEntryUpdate.remove(\n-                        nodeId, indexKey, valuesBefore( propertyIds )\n-                    ) );\n-            }\n+                indexUpdates.add( IndexEntryUpdate.remove( nodeId, indexKey, valuesBefore( propertyIds ) ) );\n+    }\n             else if ( !relevantBefore && relevantAfter )\n             {\n-                indexUpdates.add( IndexEntryUpdate.add(\n-                        nodeId, indexKey, valuesAfter( propertyIds )\n-                ) );\n+                indexUpdates.add( IndexEntryUpdate.add( nodeId, indexKey, valuesAfter( propertyIds ) ) );\n             }\n             else if ( relevantBefore )\n             {\n                 if ( valuesChanged( propertyIds ) )\n                 {\n-                    indexUpdates.add( IndexEntryUpdate.change(\n-                            nodeId, indexKey, valuesBefore( propertyIds ), valuesAfter( propertyIds ) ) );\n-                }\n+                    indexUpdates.add( IndexEntryUpdate.change( nodeId, indexKey, valuesBefore( propertyIds ), valuesAfter( propertyIds ) ) );\n+    }\n             }\n         }\n \n@@ -243,14 +232,12 @@ public class NodeUpdates implements PropertyLoader.PropertyLoadSink\n \n     private boolean relevantBefore( SchemaDescriptor schema )\n     {\n-        return hasLabel( schema.keyId(), labelsBefore ) &&\n-                hasPropsBefore( schema.getPropertyIds() );\n+        return hasLabel( schema.keyId(), labelsBefore ) && hasPropsBefore( schema.getPropertyIds() );\n     }\n \n     private boolean relevantAfter( SchemaDescriptor schema )\n     {\n-        return hasLabel( schema.keyId(), labelsAfter ) &&\n-                hasPropsAfter( schema.getPropertyIds() );\n+        return hasLabel( schema.keyId(), labelsAfter ) && hasPropsAfter( schema.getPropertyIds() );\n     }\n \n     private void loadProperties( PropertyLoader propertyLoader, PrimitiveIntSet additionalPropertiesToLoad )\n@@ -293,7 +280,8 @@ public class NodeUpdates implements PropertyLoader.PropertyLoadSink\n             }\n             return false;\n         }\n-        return labelBefore || labelAfter;\n+\n+return labelBefore || labelAfter;\n     }\n \n     private boolean hasLabel( int labelId, long[] labels )\n@@ -334,7 +322,8 @@ public class NodeUpdates implements PropertyLoader.PropertyLoadSink\n         {\n             values[i] = knownProperties.get( propertyIds[i] ).before;\n         }\n-        return values;\n+\n+return values;\n     }\n \n     private Value[] valuesAfter( int[] propertyIds )\n@@ -345,7 +334,8 @@ public class NodeUpdates implements PropertyLoader.PropertyLoadSink\n             PropertyValue propertyValue = knownProperties.get( propertyIds[i] );\n             values[i] = propertyValue == null ? null : propertyValue.after;\n         }\n-        return values;\n+\n+return values;\n     }\n \n     private boolean valuesChanged( int[] propertyIds )\n@@ -384,16 +374,16 @@ public class NodeUpdates implements PropertyLoader.PropertyLoadSink\n         int result = 1;\n         result = prime * result + Arrays.hashCode( labelsBefore );\n         result = prime * result + Arrays.hashCode( labelsAfter );\n-        result = prime * result + (int) (nodeId ^ (nodeId >>> 32));\n-\n-        PrimitiveIntIterator propertyKeyIds = knownProperties.iterator();\n+        result = prime * result + ( int) ( nodeId ^ ( nodeId >>> 32 ));\n+PrimitiveIntIterator propertyKeyIds = knownProperties.iterator();\n         while ( propertyKeyIds.hasNext() )\n         {\n             int propertyKeyId = propertyKeyIds.next();\n             result = result * 31 + propertyKeyId;\n             result = result * 31 + knownProperties.get( propertyKeyId ).hashCode();\n         }\n-        return result;\n+\n+return result;\n     }\n \n     @Override\n@@ -403,30 +393,31 @@ public class NodeUpdates implements PropertyLoader.PropertyLoadSink\n         {\n             return true;\n         }\n-        if ( obj == null )\n+\n+if ( obj == null )\n         {\n             return false;\n         }\n-        if ( getClass() != obj.getClass() )\n+\n+if ( getClass() != obj.getClass() )\n         {\n             return false;\n         }\n-        NodeUpdates other = (NodeUpdates) obj;\n-        return Arrays.equals( labelsBefore, other.labelsBefore ) &&\n-               Arrays.equals( labelsAfter, other.labelsAfter ) &&\n+\n+NodeUpdates other = (NodeUpdates) obj;\n+        return Arrays.equals( labelsBefore, other.labelsBefore ) &&Arrays.equals( labelsAfter, other.labelsAfter ) &&\n                nodeId == other.nodeId &&\n                propertyMapEquals( knownProperties, other.knownProperties );\n     }\n \n-    private boolean propertyMapEquals(\n-            PrimitiveIntObjectMap<PropertyValue> a,\n-            PrimitiveIntObjectMap<PropertyValue> b )\n+    private boolean propertyMapEquals( PrimitiveIntObjectMap<PropertyValue> a, PrimitiveIntObjectMap<PropertyValue> b )\n     {\n         if ( a.size() != b.size() )\n         {\n             return false;\n         }\n-        PrimitiveIntIterator aIterator = a.iterator();\n+\n+PrimitiveIntIterator aIterator = a.iterator();\n         while ( aIterator.hasNext() )\n         {\n             int key = aIterator.next();\n@@ -440,10 +431,7 @@ public class NodeUpdates implements PropertyLoader.PropertyLoadSink\n \n     enum PropertyValueType\n     {\n-        NoValue,\n-        Before,\n-        After,\n-        UnChanged,\n+        NoValue, Before, After, UnChanged,\n         Changed\n     }\n \n@@ -475,13 +463,19 @@ public class NodeUpdates implements PropertyLoader.PropertyLoadSink\n         {\n             switch ( type )\n             {\n-            case NoValue:   return \"NoValue\";\n-            case Before:    return format( \"Before(%s)\", before );\n-            case After:     return format( \"After(%s)\", after );\n-            case UnChanged: return format( \"UnChanged(%s)\", after );\n-            case Changed:   return format( \"Changed(from=%s, to=%s)\", before, after );\n-            default:        throw new IllegalStateException( \"This cannot happen!\" );\n-            }\n+            case NoValue:\n+    return \"NoValue\";\n+    case Before:\n+    return format( \"Before(%s)\", before );\n+    case After:\n+    return format( \"After(%s)\", after );\n+    case UnChanged:\n+    return format( \"UnChanged(%s)\", after );\n+    case Changed:\n+    return format( \"Changed(from=%s, to=%s)\", before, after );\n+    default:\n+    throw new IllegalStateException( \"This cannot happen!\" );\n+    }\n         }\n \n         @Override\n@@ -491,7 +485,8 @@ public class NodeUpdates implements PropertyLoader.PropertyLoadSink\n             {\n                 return true;\n             }\n-            if ( o == null || getClass() != o.getClass() )\n+\n+if ( o == null || getClass() != o.getClass() )\n             {\n                 return false;\n             }\n@@ -504,22 +499,27 @@ public class NodeUpdates implements PropertyLoader.PropertyLoadSink\n \n             switch ( type )\n             {\n-            case NoValue:   return true;\n-            case Before:    return before.equals( that.before );\n-            case After:     return after.equals( that.after );\n-            case UnChanged: return after.equals( that.after );\n-            case Changed:   return before.equals( that.before ) &&\n-                                    after.equals( that.after );\n-            default:        throw new IllegalStateException( \"This cannot happen!\" );\n-            }\n+            case NoValue:\n+    return true;\n+            case Before:\n+    return before.equals( that.before );\n+    case After:\n+    return after.equals( that.after );\n+    case UnChanged:\n+    return after.equals( that.after );\n+    case Changed:\n+    return before.equals( that.before ) &&after.equals( that.after );\n+    default:\n+    throw new IllegalStateException( \"This cannot happen!\" );\n+    }\n         }\n \n         @Override\n         public int hashCode()\n         {\n             int result = before != null ? before.hashCode() : 0;\n-            result = 31 * result + (after != null ? after.hashCode() : 0);\n-            result = 31 * result + (type != null ? type.hashCode() : 0);\n+            result = 31 * result + (after != null ? after.hashCode() : 0 );\n+            result = 31 * result + (type != null ? type.hashCode() : 0 );\n             return result;\n         }\n     }\n@@ -545,4 +545,4 @@ public class NodeUpdates implements PropertyLoader.PropertyLoadSink\n     {\n         return new PropertyValue( before, after, PropertyValueType.Changed );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 85
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}