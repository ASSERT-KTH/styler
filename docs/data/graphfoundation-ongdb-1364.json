{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1364",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "73",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "115",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "125",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "115",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "117",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "117",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "356",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "357",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "366",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "377",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "378",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "387",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "387",
                    "column": "128",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "390",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "390",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "391",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "391",
                    "column": "132",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1364/TreeNode.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1364/TreeNode.java\nindex 74af8bce7af..a8692e573be 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1364/TreeNode.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1364/TreeNode.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.index.internal.gbptree;\n \n import java.io.IOException;\n@@ -31,358 +32,363 @@ import static org.neo4j.index.internal.gbptree.GenerationSafePointerPair.read;\n  * Methods to manipulate single tree node such as set and get header fields,\n  * insert and fetch keys, values and children.\n  */\n-abstract class TreeNode<KEY,VALUE>\n+abstract class TreeNode<KEY, VALUE>\n {\n-    enum Type\n-    {\n-        LEAF,\n-        INTERNAL\n-    }\n-\n-    enum Overflow\n-    {\n-        YES,\n-        NO,\n-        NO_NEED_DEFRAG\n-    }\n-\n-    // Shared between all node types: TreeNode and FreelistNode\n-    static final int BYTE_POS_NODE_TYPE = 0;\n-    static final byte NODE_TYPE_TREE_NODE = 1;\n-    static final byte NODE_TYPE_FREE_LIST_NODE = 2;\n-\n-    static final int SIZE_PAGE_REFERENCE = GenerationSafePointerPair.SIZE;\n-    static final int BYTE_POS_TYPE = BYTE_POS_NODE_TYPE + Byte.BYTES;\n-    static final int BYTE_POS_GENERATION = BYTE_POS_TYPE + Byte.BYTES;\n-    static final int BYTE_POS_KEYCOUNT = BYTE_POS_GENERATION + Integer.BYTES;\n-    static final int BYTE_POS_RIGHTSIBLING = BYTE_POS_KEYCOUNT + Integer.BYTES;\n-    static final int BYTE_POS_LEFTSIBLING = BYTE_POS_RIGHTSIBLING + SIZE_PAGE_REFERENCE;\n-    static final int BYTE_POS_SUCCESSOR = BYTE_POS_LEFTSIBLING + SIZE_PAGE_REFERENCE;\n-    static final int BASE_HEADER_LENGTH = BYTE_POS_SUCCESSOR + SIZE_PAGE_REFERENCE;\n-\n-    static final byte LEAF_FLAG = 1;\n-    static final byte INTERNAL_FLAG = 0;\n-    static final long NO_NODE_FLAG = 0;\n-\n-    static final int NO_KEY_VALUE_SIZE_CAP = -1;\n-\n-    final Layout<KEY,VALUE> layout;\n-    final int pageSize;\n-\n-    TreeNode( int pageSize, Layout<KEY,VALUE> layout )\n-    {\n-        this.pageSize = pageSize;\n-        this.layout = layout;\n-    }\n-\n-    static byte nodeType( PageCursor cursor )\n+  enum Type\n+  {\n+    LEAF,\n+    INTERNAL\n+  }\n+\n+  enum Overflow\n+  {\n+    YES,\n+    NO,\n+    NO_NEED_DEFRAG\n+  }\n+\n+  // Shared between all node types: TreeNode and FreelistNode\n+  static final int BYTE_POS_NODE_TYPE = 0;\n+  static final byte NODE_TYPE_TREE_NODE = 1;\n+  static final byte NODE_TYPE_FREE_LIST_NODE = 2;\n+\n+  static final int SIZE_PAGE_REFERENCE = GenerationSafePointerPair.SIZE;\n+  static final int BYTE_POS_TYPE = BYTE_POS_NODE_TYPE + Byte.BYTES;\n+  static final int BYTE_POS_GENERATION = BYTE_POS_TYPE + Byte.BYTES;\n+  static final int BYTE_POS_KEYCOUNT = BYTE_POS_GENERATION + Integer.BYTES;\n+  static final int BYTE_POS_RIGHTSIBLING = BYTE_POS_KEYCOUNT + Integer.BYTES;\n+  static final int BYTE_POS_LEFTSIBLING = BYTE_POS_RIGHTSIBLING + SIZE_PAGE_REFERENCE;\n+  static final int BYTE_POS_SUCCESSOR = BYTE_POS_LEFTSIBLING + SIZE_PAGE_REFERENCE;\n+  static final int BASE_HEADER_LENGTH = BYTE_POS_SUCCESSOR + SIZE_PAGE_REFERENCE;\n+\n+  static final byte LEAF_FLAG = 1;\n+  static final byte INTERNAL_FLAG = 0;\n+  static final long NO_NODE_FLAG = 0;\n+\n+  static final int NO_KEY_VALUE_SIZE_CAP = -1;\n+\n+  final Layout<KEY, VALUE> layout;\n+  final int pageSize;\n+\n+  TreeNode(int pageSize, Layout<KEY, VALUE> layout)\n+  {\n+    this.pageSize = pageSize;\n+    this.layout = layout;\n+  }\n+\n+  static byte nodeType(PageCursor cursor)\n+  {\n+    return cursor.getByte(BYTE_POS_NODE_TYPE);\n+  }\n+\n+  private static void writeBaseHeader(PageCursor cursor, byte type, long stableGeneration, long unstableGeneration)\n+  {\n+    cursor.putByte(BYTE_POS_NODE_TYPE, NODE_TYPE_TREE_NODE);\n+    cursor.putByte(BYTE_POS_TYPE, type);\n+    setGeneration(cursor, unstableGeneration);\n+    setKeyCount(cursor, 0);\n+    setRightSibling(cursor, NO_NODE_FLAG, stableGeneration, unstableGeneration);\n+    setLeftSibling(cursor, NO_NODE_FLAG, stableGeneration, unstableGeneration);\n+    setSuccessor(cursor, NO_NODE_FLAG, stableGeneration, unstableGeneration);\n+  }\n+\n+  void initializeLeaf(PageCursor cursor, long stableGeneration, long unstableGeneration)\n+  {\n+    writeBaseHeader(cursor, LEAF_FLAG, stableGeneration, unstableGeneration);\n+    writeAdditionalHeader(cursor);\n+  }\n+\n+  void initializeInternal(PageCursor cursor, long stableGeneration, long unstableGeneration)\n+  {\n+    writeBaseHeader(cursor, INTERNAL_FLAG, stableGeneration, unstableGeneration);\n+    writeAdditionalHeader(cursor);\n+  }\n+\n+  /**\n+   * Write additional header. When called, cursor should be located directly after base header.\n+   * Meaning at {@link #BASE_HEADER_LENGTH}.\n+   */\n+  abstract void writeAdditionalHeader(PageCursor cursor);\n+\n+  // HEADER METHODS\n+\n+  static boolean isLeaf(PageCursor cursor)\n+  {\n+    return cursor.getByte(BYTE_POS_TYPE) == LEAF_FLAG;\n+  }\n+\n+  static boolean isInternal(PageCursor cursor)\n+  {\n+    return cursor.getByte(BYTE_POS_TYPE) == INTERNAL_FLAG;\n+  }\n+\n+  static long generation(PageCursor cursor)\n+  {\n+    return cursor.getInt(BYTE_POS_GENERATION) & GenerationSafePointer.GENERATION_MASK;\n+  }\n+\n+  static int keyCount(PageCursor cursor)\n+  {\n+    return cursor.getInt(BYTE_POS_KEYCOUNT);\n+  }\n+\n+  static long rightSibling(PageCursor cursor, long stableGeneration, long unstableGeneration)\n+  {\n+    cursor.setOffset(BYTE_POS_RIGHTSIBLING);\n+    return read(cursor, stableGeneration, unstableGeneration, NO_LOGICAL_POS);\n+  }\n+\n+  static long leftSibling(PageCursor cursor, long stableGeneration, long unstableGeneration)\n+  {\n+    cursor.setOffset(BYTE_POS_LEFTSIBLING);\n+    return read(cursor, stableGeneration, unstableGeneration, NO_LOGICAL_POS);\n+  }\n+\n+  static long successor(PageCursor cursor, long stableGeneration, long unstableGeneration)\n+  {\n+    cursor.setOffset(BYTE_POS_SUCCESSOR);\n+    return read(cursor, stableGeneration, unstableGeneration, NO_LOGICAL_POS);\n+  }\n+\n+  static void setGeneration(PageCursor cursor, long generation)\n+  {\n+    GenerationSafePointer.assertGenerationOnWrite(generation);\n+    cursor.putInt(BYTE_POS_GENERATION, (int) generation);\n+  }\n+\n+  static void setKeyCount(PageCursor cursor, int count)\n+  {\n+    if (count < 0)\n     {\n-        return cursor.getByte( BYTE_POS_NODE_TYPE );\n+      throw new IllegalArgumentException(\"Invalid key count, \" + count + \". On tree node \" + cursor.getCurrentPageId() + \".\");\n     }\n-\n-    private static void writeBaseHeader( PageCursor cursor, byte type, long stableGeneration, long unstableGeneration )\n-    {\n-        cursor.putByte( BYTE_POS_NODE_TYPE, NODE_TYPE_TREE_NODE );\n-        cursor.putByte( BYTE_POS_TYPE, type );\n-        setGeneration( cursor, unstableGeneration );\n-        setKeyCount( cursor, 0 );\n-        setRightSibling( cursor, NO_NODE_FLAG, stableGeneration, unstableGeneration );\n-        setLeftSibling( cursor, NO_NODE_FLAG, stableGeneration, unstableGeneration );\n-        setSuccessor( cursor, NO_NODE_FLAG, stableGeneration, unstableGeneration );\n-    }\n-\n-    void initializeLeaf( PageCursor cursor, long stableGeneration, long unstableGeneration )\n-    {\n-        writeBaseHeader( cursor, LEAF_FLAG, stableGeneration, unstableGeneration );\n-        writeAdditionalHeader( cursor );\n-    }\n-\n-    void initializeInternal( PageCursor cursor, long stableGeneration, long unstableGeneration )\n-    {\n-        writeBaseHeader( cursor, INTERNAL_FLAG, stableGeneration, unstableGeneration );\n-        writeAdditionalHeader( cursor );\n-    }\n-\n-    /**\n-     * Write additional header. When called, cursor should be located directly after base header.\n-     * Meaning at {@link #BASE_HEADER_LENGTH}.\n-     */\n-    abstract void writeAdditionalHeader( PageCursor cursor );\n-\n-    // HEADER METHODS\n-\n-    static boolean isLeaf( PageCursor cursor )\n-    {\n-        return cursor.getByte( BYTE_POS_TYPE ) == LEAF_FLAG;\n-    }\n-\n-    static boolean isInternal( PageCursor cursor )\n-    {\n-        return cursor.getByte( BYTE_POS_TYPE ) == INTERNAL_FLAG;\n-    }\n-\n-    static long generation( PageCursor cursor )\n-    {\n-        return cursor.getInt( BYTE_POS_GENERATION ) & GenerationSafePointer.GENERATION_MASK;\n-    }\n-\n-    static int keyCount( PageCursor cursor )\n-    {\n-        return cursor.getInt( BYTE_POS_KEYCOUNT );\n-    }\n-\n-    static long rightSibling( PageCursor cursor, long stableGeneration, long unstableGeneration )\n-    {\n-        cursor.setOffset( BYTE_POS_RIGHTSIBLING );\n-        return read( cursor, stableGeneration, unstableGeneration, NO_LOGICAL_POS );\n-    }\n-\n-    static long leftSibling( PageCursor cursor, long stableGeneration, long unstableGeneration )\n-    {\n-        cursor.setOffset( BYTE_POS_LEFTSIBLING );\n-        return read( cursor, stableGeneration, unstableGeneration, NO_LOGICAL_POS );\n-    }\n-\n-    static long successor( PageCursor cursor, long stableGeneration, long unstableGeneration )\n-    {\n-        cursor.setOffset( BYTE_POS_SUCCESSOR );\n-        return read( cursor, stableGeneration, unstableGeneration, NO_LOGICAL_POS );\n-    }\n-\n-    static void setGeneration( PageCursor cursor, long generation )\n-    {\n-        GenerationSafePointer.assertGenerationOnWrite( generation );\n-        cursor.putInt( BYTE_POS_GENERATION, (int) generation );\n-    }\n-\n-    static void setKeyCount( PageCursor cursor, int count )\n+    cursor.putInt(BYTE_POS_KEYCOUNT, count);\n+  }\n+\n+  static void setRightSibling(PageCursor cursor, long rightSiblingId, long stableGeneration,\n+                              long unstableGeneration)\n+  {\n+    cursor.setOffset(BYTE_POS_RIGHTSIBLING);\n+    long result = GenerationSafePointerPair.write(cursor, rightSiblingId, stableGeneration, unstableGeneration);\n+    GenerationSafePointerPair.assertSuccess(result);\n+  }\n+\n+  static void setLeftSibling(PageCursor cursor, long leftSiblingId, long stableGeneration, long unstableGeneration)\n+  {\n+    cursor.setOffset(BYTE_POS_LEFTSIBLING);\n+    long result = GenerationSafePointerPair.write(cursor, leftSiblingId, stableGeneration, unstableGeneration);\n+    GenerationSafePointerPair.assertSuccess(result);\n+  }\n+\n+  static void setSuccessor(PageCursor cursor, long successorId, long stableGeneration, long unstableGeneration)\n+  {\n+    cursor.setOffset(BYTE_POS_SUCCESSOR);\n+    long result = GenerationSafePointerPair.write(cursor, successorId, stableGeneration, unstableGeneration);\n+    GenerationSafePointerPair.assertSuccess(result);\n+  }\n+\n+  long pointerGeneration(PageCursor cursor, long readResult)\n+  {\n+    if (!GenerationSafePointerPair.isRead(readResult))\n     {\n-        if ( count < 0 )\n-        {\n-            throw new IllegalArgumentException( \"Invalid key count, \" + count + \". On tree node \" + cursor.getCurrentPageId() + \".\" );\n-        }\n-        cursor.putInt( BYTE_POS_KEYCOUNT, count );\n-    }\n-\n-    static void setRightSibling( PageCursor cursor, long rightSiblingId, long stableGeneration,\n-            long unstableGeneration )\n-    {\n-        cursor.setOffset( BYTE_POS_RIGHTSIBLING );\n-        long result = GenerationSafePointerPair.write( cursor, rightSiblingId, stableGeneration, unstableGeneration );\n-        GenerationSafePointerPair.assertSuccess( result );\n-    }\n-\n-    static void setLeftSibling( PageCursor cursor, long leftSiblingId, long stableGeneration, long unstableGeneration )\n-    {\n-        cursor.setOffset( BYTE_POS_LEFTSIBLING );\n-        long result = GenerationSafePointerPair.write( cursor, leftSiblingId, stableGeneration, unstableGeneration );\n-        GenerationSafePointerPair.assertSuccess( result );\n-    }\n-\n-    static void setSuccessor( PageCursor cursor, long successorId, long stableGeneration, long unstableGeneration )\n-    {\n-        cursor.setOffset( BYTE_POS_SUCCESSOR );\n-        long result = GenerationSafePointerPair.write( cursor, successorId, stableGeneration, unstableGeneration );\n-        GenerationSafePointerPair.assertSuccess( result );\n-    }\n-\n-    long pointerGeneration( PageCursor cursor, long readResult )\n-    {\n-        if ( !GenerationSafePointerPair.isRead( readResult ) )\n-        {\n-            throw new IllegalArgumentException( \"Expected read result, but got \" + readResult );\n-        }\n-        int offset = GenerationSafePointerPair.generationOffset( readResult );\n-        int gsppOffset = GenerationSafePointerPair.isLogicalPos( readResult ) ? childOffset( offset ) : offset;\n-        int gspOffset = GenerationSafePointerPair.resultIsFromSlotA( readResult ) ?\n-                        gsppOffset : gsppOffset + GenerationSafePointer.SIZE;\n-        cursor.setOffset( gspOffset );\n-        return GenerationSafePointer.readGeneration( cursor );\n-    }\n-\n-    // BODY METHODS\n-\n-    /**\n-     * Moves data from left to right to open up a gap where data can later be written without overwriting anything.\n-     * Key count is NOT updated!\n-     *\n-     * @param cursor Write cursor on relevant page\n-     * @param pos Logical position where slots should be inserted, pos is based on baseOffset and slotSize.\n-     * @param numberOfSlots How many slots to be inserted.\n-     * @param totalSlotCount How many slots there are in total. (Usually keyCount for keys and values or keyCount+1 for children).\n-     * @param baseOffset Offset to slot in logical position 0.\n-     * @param slotSize Size of one single slot.\n-     */\n-    static void insertSlotsAt( PageCursor cursor, int pos, int numberOfSlots, int totalSlotCount, int baseOffset,\n-            int slotSize )\n-    {\n-        cursor.shiftBytes( baseOffset + pos * slotSize, (totalSlotCount - pos) * slotSize, numberOfSlots * slotSize );\n-    }\n-\n-    /**\n-     * Moves data from right to left to remove a slot where data that should be deleted currently sits.\n-     * Key count is NOT updated!\n-     *\n-     * @param cursor Write cursor on relevant page\n-     * @param pos Logical position where slots should be inserted, pos is based on baseOffset and slotSize.\n-     * @param totalSlotCount How many slots there are in total. (Usually keyCount for keys and values or keyCount+1 for children).\n-     * @param baseOffset Offset to slot in logical position 0.\n-     * @param slotSize Size of one single slot.\n-     */\n-    static void removeSlotAt( PageCursor cursor, int pos, int totalSlotCount, int baseOffset, int slotSize )\n-    {\n-        cursor.shiftBytes( baseOffset + (pos + 1) * slotSize, (totalSlotCount - (pos + 1)) * slotSize, -slotSize );\n-    }\n-\n-    abstract KEY keyAt( PageCursor cursor, KEY into, int pos, Type type );\n-\n-    abstract void keyValueAt( PageCursor cursor, KEY intoKey, VALUE intoValue, int pos );\n-\n-    abstract void insertKeyAndRightChildAt( PageCursor cursor, KEY key, long child, int pos, int keyCount,\n-            long stableGeneration, long unstableGeneration );\n-\n-    abstract void insertKeyValueAt( PageCursor cursor, KEY key, VALUE value, int pos, int keyCount );\n-\n-    abstract void removeKeyValueAt( PageCursor cursor, int pos, int keyCount );\n-\n-    abstract void removeKeyAndRightChildAt( PageCursor cursor, int keyPos, int keyCount );\n-\n-    abstract void removeKeyAndLeftChildAt( PageCursor cursor, int keyPos, int keyCount );\n-\n-    /**\n-     * Overwrite key at position with given key.\n-     * @return True if key was overwritten, false otherwise.\n-     */\n-    abstract boolean setKeyAtInternal( PageCursor cursor, KEY key, int pos );\n-\n-    abstract VALUE valueAt( PageCursor cursor, VALUE value, int pos );\n-\n-    /**\n-     * Overwrite value at position with given value.\n-     * @return True if value was overwritten, false otherwise.\n-     */\n-    abstract boolean setValueAt( PageCursor cursor, VALUE value, int pos );\n-\n-    abstract long childAt( PageCursor cursor, int pos, long stableGeneration, long unstableGeneration );\n-\n-    abstract void setChildAt( PageCursor cursor, long child, int pos, long stableGeneration, long unstableGeneration );\n-\n-    static void writeChild( PageCursor cursor, long child, long stableGeneration, long unstableGeneration )\n-    {\n-        long write = GenerationSafePointerPair.write( cursor, child, stableGeneration, unstableGeneration );\n-        GenerationSafePointerPair.assertSuccess( write );\n-    }\n-\n-    // HELPERS\n-\n-    abstract int keyValueSizeCap();\n-\n-    /**\n-     * This method can throw and should not be used on read path.\n-     * Throws {@link IllegalArgumentException} if key and value combined violate key-value size limit.\n-     */\n-    abstract void validateKeyValueSize( KEY key, VALUE value );\n-\n-    abstract boolean reasonableKeyCount( int keyCount );\n-\n-    abstract boolean reasonableChildCount( int childCount );\n-\n-    abstract int childOffset( int pos );\n-\n-    static boolean isNode( long node )\n-    {\n-        return GenerationSafePointerPair.pointer( node ) != NO_NODE_FLAG;\n-    }\n-\n-    Comparator<KEY> keyComparator()\n-    {\n-        return layout;\n-    }\n-\n-    static void goTo( PageCursor cursor, String messageOnError, long nodeId )\n-            throws IOException\n-    {\n-        PageCursorUtil.goTo( cursor, messageOnError, GenerationSafePointerPair.pointer( nodeId ) );\n-    }\n-\n-    /* SPLIT, MERGE AND REBALANCE */\n-\n-    /**\n-     * Will internal overflow if inserting new key?\n-     * @return true if leaf will overflow, else false.\n-     */\n-    abstract Overflow internalOverflow( PageCursor cursor, int currentKeyCount, KEY newKey );\n-\n-    /**\n-     * Will leaf overflow if inserting new key and value?\n-     * @return true if leaf will overflow, else false.\n-     */\n-    abstract Overflow leafOverflow( PageCursor cursor, int currentKeyCount, KEY newKey, VALUE newValue );\n-\n-    /**\n-     * Clean page with leaf node from garbage to make room for further insert without having to split.\n-     */\n-    abstract void defragmentLeaf( PageCursor cursor );\n-\n-    /**\n-     * Clean page with internal node from garbage to make room for further insert without having to split.\n-     */\n-    abstract void defragmentInternal( PageCursor cursor );\n-\n-    abstract boolean leafUnderflow( PageCursor cursor, int keyCount );\n-\n-    /**\n-     * How do we best rebalance left and right leaf?\n-     * Can we move keys from underflowing left to right so that none of them underflow?\n-     * @return 0, do nothing. -1, merge. 1-inf, move this number of keys from left to right.\n-     */\n-    abstract int canRebalanceLeaves( PageCursor leftCursor, int leftKeyCount, PageCursor rightCursor, int rightKeyCount );\n-\n-    abstract boolean canMergeLeaves( PageCursor leftCursor, int leftKeyCount, PageCursor rightCursor, int rightKeyCount );\n-\n-    /**\n-     * Calculate where split should be done and move entries between leaves participating in split.\n-     *\n-     * Keys and values from left are divide between left and right and the new key and value is inserted where it belongs.\n-     *\n-     * Key count is updated.\n-     */\n-    abstract void doSplitLeaf( PageCursor leftCursor, int leftKeyCount, PageCursor rightCursor, int insertPos, KEY newKey, VALUE newValue,\n-            KEY newSplitter );\n-\n-    /**\n-     * Performs the entry moving part of split in internal.\n-     *\n-     * Keys and children from left is divided between left and right and the new key and child is inserted where it belongs.\n-     *\n-     * Key count is updated.\n-     */\n-    abstract void doSplitInternal( PageCursor leftCursor, int leftKeyCount, PageCursor rightCursor, int insertPos,\n-            KEY newKey,\n-            long newRightChild, long stableGeneration, long unstableGeneration, KEY newSplitter );\n-\n-    /**\n-     * Move all rightmost keys and values in left leaf from given position to right leaf.\n-     *\n-     * Right leaf will be defragmented.\n-     *\n-     * Update keyCount in left and right.\n-     */\n-    abstract void moveKeyValuesFromLeftToRight( PageCursor leftCursor, int leftKeyCount, PageCursor rightCursor, int rightKeyCount,\n-            int fromPosInLeftNode );\n-\n-    /**\n-     * Copy all keys and values in left leaf and insert to the left in right leaf.\n-     *\n-     * Right leaf will be defragmented.\n-     *\n-     * Update keyCount in right\n-     */\n-    abstract void copyKeyValuesFromLeftToRight( PageCursor leftCursor, int leftKeyCount, PageCursor rightCursor, int rightKeyCount );\n-\n-    // Useful for debugging\n-    @SuppressWarnings( \"unused\" )\n-    void printNode( PageCursor cursor, boolean includeValue, boolean includeAllocSpace, long stableGeneration, long unstableGeneration )\n-    {   // default no-op\n+      throw new IllegalArgumentException(\"Expected read result, but got \" + readResult);\n     }\n+    int offset = GenerationSafePointerPair.generationOffset(readResult);\n+    int gsppOffset = GenerationSafePointerPair.isLogicalPos(readResult) ? childOffset(offset) : offset;\n+    int gspOffset = GenerationSafePointerPair.resultIsFromSlotA(readResult) ?\n+        gsppOffset : gsppOffset + GenerationSafePointer.SIZE;\n+    cursor.setOffset(gspOffset);\n+    return GenerationSafePointer.readGeneration(cursor);\n+  }\n+\n+  // BODY METHODS\n+\n+  /**\n+   * Moves data from left to right to open up a gap where data can later be written without overwriting anything.\n+   * Key count is NOT updated!\n+   *\n+   * @param cursor         Write cursor on relevant page\n+   * @param pos            Logical position where slots should be inserted, pos is based on baseOffset and slotSize.\n+   * @param numberOfSlots  How many slots to be inserted.\n+   * @param totalSlotCount How many slots there are in total. (Usually keyCount for keys and values or keyCount+1 for children).\n+   * @param baseOffset     Offset to slot in logical position 0.\n+   * @param slotSize       Size of one single slot.\n+   */\n+  static void insertSlotsAt(PageCursor cursor, int pos, int numberOfSlots, int totalSlotCount, int baseOffset,\n+                            int slotSize)\n+  {\n+    cursor.shiftBytes(baseOffset + pos * slotSize, (totalSlotCount - pos) * slotSize, numberOfSlots * slotSize);\n+  }\n+\n+  /**\n+   * Moves data from right to left to remove a slot where data that should be deleted currently sits.\n+   * Key count is NOT updated!\n+   *\n+   * @param cursor         Write cursor on relevant page\n+   * @param pos            Logical position where slots should be inserted, pos is based on baseOffset and slotSize.\n+   * @param totalSlotCount How many slots there are in total. (Usually keyCount for keys and values or keyCount+1 for children).\n+   * @param baseOffset     Offset to slot in logical position 0.\n+   * @param slotSize       Size of one single slot.\n+   */\n+  static void removeSlotAt(PageCursor cursor, int pos, int totalSlotCount, int baseOffset, int slotSize)\n+  {\n+    cursor.shiftBytes(baseOffset + (pos + 1) * slotSize, (totalSlotCount - (pos + 1)) * slotSize, -slotSize);\n+  }\n+\n+  abstract KEY keyAt(PageCursor cursor, KEY into, int pos, Type type);\n+\n+  abstract void keyValueAt(PageCursor cursor, KEY intoKey, VALUE intoValue, int pos);\n+\n+  abstract void insertKeyAndRightChildAt(PageCursor cursor, KEY key, long child, int pos, int keyCount,\n+                                         long stableGeneration, long unstableGeneration);\n+\n+  abstract void insertKeyValueAt(PageCursor cursor, KEY key, VALUE value, int pos, int keyCount);\n+\n+  abstract void removeKeyValueAt(PageCursor cursor, int pos, int keyCount);\n+\n+  abstract void removeKeyAndRightChildAt(PageCursor cursor, int keyPos, int keyCount);\n+\n+  abstract void removeKeyAndLeftChildAt(PageCursor cursor, int keyPos, int keyCount);\n+\n+  /**\n+   * Overwrite key at position with given key.\n+   *\n+   * @return True if key was overwritten, false otherwise.\n+   */\n+  abstract boolean setKeyAtInternal(PageCursor cursor, KEY key, int pos);\n+\n+  abstract VALUE valueAt(PageCursor cursor, VALUE value, int pos);\n+\n+  /**\n+   * Overwrite value at position with given value.\n+   *\n+   * @return True if value was overwritten, false otherwise.\n+   */\n+  abstract boolean setValueAt(PageCursor cursor, VALUE value, int pos);\n+\n+  abstract long childAt(PageCursor cursor, int pos, long stableGeneration, long unstableGeneration);\n+\n+  abstract void setChildAt(PageCursor cursor, long child, int pos, long stableGeneration, long unstableGeneration);\n+\n+  static void writeChild(PageCursor cursor, long child, long stableGeneration, long unstableGeneration)\n+  {\n+    long write = GenerationSafePointerPair.write(cursor, child, stableGeneration, unstableGeneration);\n+    GenerationSafePointerPair.assertSuccess(write);\n+  }\n+\n+  // HELPERS\n+\n+  abstract int keyValueSizeCap();\n+\n+  /**\n+   * This method can throw and should not be used on read path.\n+   * Throws {@link IllegalArgumentException} if key and value combined violate key-value size limit.\n+   */\n+  abstract void validateKeyValueSize(KEY key, VALUE value);\n+\n+  abstract boolean reasonableKeyCount(int keyCount);\n+\n+  abstract boolean reasonableChildCount(int childCount);\n+\n+  abstract int childOffset(int pos);\n+\n+  static boolean isNode(long node)\n+  {\n+    return GenerationSafePointerPair.pointer(node) != NO_NODE_FLAG;\n+  }\n+\n+  Comparator<KEY> keyComparator()\n+  {\n+    return layout;\n+  }\n+\n+  static void goTo(PageCursor cursor, String messageOnError, long nodeId)\n+      throws IOException\n+  {\n+    PageCursorUtil.goTo(cursor, messageOnError, GenerationSafePointerPair.pointer(nodeId));\n+  }\n+\n+  /* SPLIT, MERGE AND REBALANCE */\n+\n+  /**\n+   * Will internal overflow if inserting new key?\n+   *\n+   * @return true if leaf will overflow, else false.\n+   */\n+  abstract Overflow internalOverflow(PageCursor cursor, int currentKeyCount, KEY newKey);\n+\n+  /**\n+   * Will leaf overflow if inserting new key and value?\n+   *\n+   * @return true if leaf will overflow, else false.\n+   */\n+  abstract Overflow leafOverflow(PageCursor cursor, int currentKeyCount, KEY newKey, VALUE newValue);\n+\n+  /**\n+   * Clean page with leaf node from garbage to make room for further insert without having to split.\n+   */\n+  abstract void defragmentLeaf(PageCursor cursor);\n+\n+  /**\n+   * Clean page with internal node from garbage to make room for further insert without having to split.\n+   */\n+  abstract void defragmentInternal(PageCursor cursor);\n+\n+  abstract boolean leafUnderflow(PageCursor cursor, int keyCount);\n+\n+  /**\n+   * How do we best rebalance left and right leaf?\n+   * Can we move keys from underflowing left to right so that none of them underflow?\n+   *\n+   * @return 0, do nothing. -1, merge. 1-inf, move this number of keys from left to right.\n+   */\n+  abstract int canRebalanceLeaves(PageCursor leftCursor, int leftKeyCount, PageCursor rightCursor, int rightKeyCount);\n+\n+  abstract boolean canMergeLeaves(PageCursor leftCursor, int leftKeyCount, PageCursor rightCursor, int rightKeyCount);\n+\n+  /**\n+   * Calculate where split should be done and move entries between leaves participating in split.\n+   * <p>\n+   * Keys and values from left are divide between left and right and the new key and value is inserted where it belongs.\n+   * <p>\n+   * Key count is updated.\n+   */\n+  abstract void doSplitLeaf(PageCursor leftCursor, int leftKeyCount, PageCursor rightCursor, int insertPos, KEY newKey, VALUE newValue,\n+                            KEY newSplitter);\n+\n+  /**\n+   * Performs the entry moving part of split in internal.\n+   * <p>\n+   * Keys and children from left is divided between left and right and the new key and child is inserted where it belongs.\n+   * <p>\n+   * Key count is updated.\n+   */\n+  abstract void doSplitInternal(PageCursor leftCursor, int leftKeyCount, PageCursor rightCursor, int insertPos,\n+                                KEY newKey,\n+                                long newRightChild, long stableGeneration, long unstableGeneration, KEY newSplitter);\n+\n+  /**\n+   * Move all rightmost keys and values in left leaf from given position to right leaf.\n+   * <p>\n+   * Right leaf will be defragmented.\n+   * <p>\n+   * Update keyCount in left and right.\n+   */\n+  abstract void moveKeyValuesFromLeftToRight(PageCursor leftCursor, int leftKeyCount, PageCursor rightCursor, int rightKeyCount,\n+                                             int fromPosInLeftNode);\n+\n+  /**\n+   * Copy all keys and values in left leaf and insert to the left in right leaf.\n+   * <p>\n+   * Right leaf will be defragmented.\n+   * <p>\n+   * Update keyCount in right\n+   */\n+  abstract void copyKeyValuesFromLeftToRight(PageCursor leftCursor, int leftKeyCount, PageCursor rightCursor, int rightKeyCount);\n+\n+  // Useful for debugging\n+  @SuppressWarnings(\"unused\")\n+  void printNode(PageCursor cursor, boolean includeValue, boolean includeAllocSpace, long stableGeneration, long unstableGeneration)\n+  {   // default no-op\n+  }\n }\n",
            "diff_size": 630
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}