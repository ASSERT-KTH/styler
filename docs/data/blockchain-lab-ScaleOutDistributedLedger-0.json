{
    "project_name": "blockchain-lab-ScaleOutDistributedLedger",
    "error_id": "0",
    "information": {
        "errors": [
            {
                "line": "46",
                "column": "13",
                "severity": "warning",
                "message": "'if' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "\t\t\tList<BlockMessage> blockMessageList = new ArrayList<>();\n\t\t\t// Don't use \"previousBlock\" pointer in the first block\n\t\t\tif(!blockList.isEmpty()) {\n\t\t\t\tblockMessageList.add(new BlockMessage(blockList.get(0), true));\n\t\t\t\tfor (int i = 1; i < blockList.size(); i++) {\n\t\t\t\t\tBlock block = blockList.get(i);",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "46",
                    "column": "13",
                    "severity": "warning",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/blockchain-lab-ScaleOutDistributedLedger/errored/1/0/ProofMessage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/blockchain-lab-ScaleOutDistributedLedger/intellij/0/ProofMessage.java\nindex e7dde81801d..b6cca93ab2e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/blockchain-lab-ScaleOutDistributedLedger/errored/1/0/ProofMessage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/blockchain-lab-ScaleOutDistributedLedger/intellij/0/ProofMessage.java\n@@ -19,47 +19,48 @@ import java.util.logging.Level;\n  * Proof message for netty.\n  */\n public class ProofMessage extends Message {\n-\t\n-\t@Getter\n-\tprivate final TransactionMessage transactionMessage;\n \n-\t/**\n-\t * Same map as in the original proof.\n-\t * Map: node id, list of blocks\n-\t */\n-\t@Getter\n-\tprivate final Map<Integer, List<BlockMessage>> chainUpdates;\n-\t\n-\t/**\n-\t * Constructor.\n-\t * @param proof - original proof \n-\t */\n-\tpublic ProofMessage(Proof proof) {\n-\t\tthis.transactionMessage = new TransactionMessage(proof.getTransaction());\n-\t\tthis.chainUpdates = new HashMap<>();\n-\t\tfor (Map.Entry<Node, List<Block>> entry : proof.getChainUpdates().entrySet()) {\n-\t\t\tNode node = entry.getKey();\n-\t\t\tList<Block> blockList = entry.getValue();\n-\t\t\t// Convert Block to BlockMessage\n-\t\t\tList<BlockMessage> blockMessageList = new ArrayList<>();\n-\t\t\t// Don't use \"previousBlock\" pointer in the first block\n-\t\t\tif(!blockList.isEmpty()) {\n-\t\t\t\tblockMessageList.add(new BlockMessage(blockList.get(0), true));\n-\t\t\t\tfor (int i = 1; i < blockList.size(); i++) {\n-\t\t\t\t\tBlock block = blockList.get(i);\n-\t\t\t\t\tblockMessageList.add(new BlockMessage(block));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tthis.chainUpdates.put(node.getId(), blockMessageList);\n-\t\t}\n-\t}\n+    @Getter\n+    private final TransactionMessage transactionMessage;\n \n-\t@Override\n-\tpublic void handle(LocalStore localStore) {\n-\t\ttry {\n-\t\t\tCommunicationHelper.receiveTransaction(new Proof(this, localStore), localStore);\n-\t\t} catch (IOException e) {\n-\t\t\tLog.log(Level.SEVERE, \"Exception while handling proof message\", e);\n-\t\t}\n-\t}\n+    /**\n+     * Same map as in the original proof.\n+     * Map: node id, list of blocks\n+     */\n+    @Getter\n+    private final Map<Integer, List<BlockMessage>> chainUpdates;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param proof - original proof\n+     */\n+    public ProofMessage(Proof proof) {\n+        this.transactionMessage = new TransactionMessage(proof.getTransaction());\n+        this.chainUpdates = new HashMap<>();\n+        for (Map.Entry<Node, List<Block>> entry : proof.getChainUpdates().entrySet()) {\n+            Node node = entry.getKey();\n+            List<Block> blockList = entry.getValue();\n+            // Convert Block to BlockMessage\n+            List<BlockMessage> blockMessageList = new ArrayList<>();\n+            // Don't use \"previousBlock\" pointer in the first block\n+            if (!blockList.isEmpty()) {\n+                blockMessageList.add(new BlockMessage(blockList.get(0), true));\n+                for (int i = 1; i < blockList.size(); i++) {\n+                    Block block = blockList.get(i);\n+                    blockMessageList.add(new BlockMessage(block));\n+                }\n+            }\n+            this.chainUpdates.put(node.getId(), blockMessageList);\n+        }\n+    }\n+\n+    @Override\n+    public void handle(LocalStore localStore) {\n+        try {\n+            CommunicationHelper.receiveTransaction(new Proof(this, localStore), localStore);\n+        } catch (IOException e) {\n+            Log.log(Level.SEVERE, \"Exception while handling proof message\", e);\n+        }\n+    }\n }\n",
            "diff_size": 73
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "50",
                    "column": "87",
                    "severity": "warning",
                    "message": "'{' at column 81 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "55",
                    "column": "13",
                    "severity": "warning",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "55",
                    "column": "38",
                    "severity": "warning",
                    "message": "'{' at column 29 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "55",
                    "column": "38",
                    "severity": "warning",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "56",
                    "column": "60",
                    "severity": "warning",
                    "message": "'{' at column 48 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "56",
                    "column": "92",
                    "severity": "warning",
                    "message": "';' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "56",
                    "column": "138",
                    "severity": "warning",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "67",
                    "column": "5",
                    "severity": "warning",
                    "message": "'{' at column 5 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "67",
                    "column": "5",
                    "severity": "warning",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "69",
                    "column": "25",
                    "severity": "warning",
                    "message": "'{' at column 25 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "69",
                    "column": "25",
                    "severity": "warning",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/blockchain-lab-ScaleOutDistributedLedger/errored/1/0/ProofMessage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/blockchain-lab-ScaleOutDistributedLedger/naturalize/0/ProofMessage.java\nindex e7dde81801d..86eeee4c2e9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/blockchain-lab-ScaleOutDistributedLedger/errored/1/0/ProofMessage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/blockchain-lab-ScaleOutDistributedLedger/naturalize/0/ProofMessage.java\n@@ -1,27 +1,36 @@\n package nl.tudelft.blockchain.scaleoutdistributedledger.message;\n \n import lombok.Getter;\n+\n import nl.tudelft.blockchain.scaleoutdistributedledger.CommunicationHelper;\n+\n import nl.tudelft.blockchain.scaleoutdistributedledger.LocalStore;\n+\n import nl.tudelft.blockchain.scaleoutdistributedledger.model.Block;\n+\n import nl.tudelft.blockchain.scaleoutdistributedledger.model.Node;\n+\n import nl.tudelft.blockchain.scaleoutdistributedledger.model.Proof;\n+\n import nl.tudelft.blockchain.scaleoutdistributedledger.utils.Log;\n \n import java.io.IOException;\n+\n import java.util.ArrayList;\n+\n import java.util.HashMap;\n+\n import java.util.List;\n+\n import java.util.Map;\n+\n import java.util.logging.Level;\n \n /**\n  * Proof message for netty.\n  */\n public class ProofMessage extends Message {\n-\t\n-\t@Getter\n-\tprivate final TransactionMessage transactionMessage;\n+@Getterprivate final TransactionMessage transactionMessage;\n \n \t/**\n \t * Same map as in the original proof.\n@@ -29,37 +38,36 @@ public class ProofMessage extends Message {\n \t */\n \t@Getter\n \tprivate final Map<Integer, List<BlockMessage>> chainUpdates;\n-\t\n-\t/**\n+\n+/**\n \t * Constructor.\n \t * @param proof - original proof \n \t */\n-\tpublic ProofMessage(Proof proof) {\n-\t\tthis.transactionMessage = new TransactionMessage(proof.getTransaction());\n+\n+public ProofMessage(Proof proof) {\n+this.transactionMessage = new TransactionMessage(proof.getTransaction());\n \t\tthis.chainUpdates = new HashMap<>();\n-\t\tfor (Map.Entry<Node, List<Block>> entry : proof.getChainUpdates().entrySet()) {\n-\t\t\tNode node = entry.getKey();\n+\t\tfor (Map.Entry<Node, List<Block>> entry : proof.getChainUpdates().entrySet()) { Node node = entry.getKey();\n \t\t\tList<Block> blockList = entry.getValue();\n \t\t\t// Convert Block to BlockMessage\n \t\t\tList<BlockMessage> blockMessageList = new ArrayList<>();\n \t\t\t// Don't use \"previousBlock\" pointer in the first block\n-\t\t\tif(!blockList.isEmpty()) {\n-\t\t\t\tblockMessageList.add(new BlockMessage(blockList.get(0), true));\n-\t\t\t\tfor (int i = 1; i < blockList.size(); i++) {\n-\t\t\t\t\tBlock block = blockList.get(i);\n-\t\t\t\t\tblockMessageList.add(new BlockMessage(block));\n-\t\t\t\t}\n-\t\t\t}\n+\t\t\tif(!blockList.isEmpty()) {blockMessageList.add(new BlockMessage(blockList.get(0), true));\n+\t\t\t\tfor (int i = 1; i < blockList.size(); i++) { Block block = blockList.get(i);blockMessageList.add(new BlockMessage(block));\n+\n+}\n+    }\n \t\t\tthis.chainUpdates.put(node.getId(), blockMessageList);\n-\t\t}\n-\t}\n+\n+}\n+    }\n \n \t@Override\n \tpublic void handle(LocalStore localStore) {\n-\t\ttry {\n-\t\t\tCommunicationHelper.receiveTransaction(new Proof(this, localStore), localStore);\n-\t\t} catch (IOException e) {\n-\t\t\tLog.log(Level.SEVERE, \"Exception while handling proof message\", e);\n-\t\t}\n-\t}\n+try {CommunicationHelper.receiveTransaction(new Proof(this, localStore), localStore);\n+\n+} catch (IOException e) {Log.log(Level.SEVERE, \"Exception while handling proof message\", e);\n+\n }\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 39
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "46",
                    "column": "13",
                    "severity": "warning",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "46",
                    "column": "13",
                    "severity": "warning",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "46",
                    "column": "16",
                    "severity": "warning",
                    "message": "'!' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/blockchain-lab-ScaleOutDistributedLedger/errored/1/0/ProofMessage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/blockchain-lab-ScaleOutDistributedLedger/styler_three_grams/0/ProofMessage.java\nindex e7dde81801d..0bfa021ab02 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/blockchain-lab-ScaleOutDistributedLedger/errored/1/0/ProofMessage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/blockchain-lab-ScaleOutDistributedLedger/styler_three_grams/0/ProofMessage.java\n@@ -43,7 +43,7 @@ public class ProofMessage extends Message {\n \t\t\t// Convert Block to BlockMessage\n \t\t\tList<BlockMessage> blockMessageList = new ArrayList<>();\n \t\t\t// Don't use \"previousBlock\" pointer in the first block\n-\t\t\tif(!blockList.isEmpty()) {\n+\t\t\tif(! blockList.isEmpty()) {\n \t\t\t\tblockMessageList.add(new BlockMessage(blockList.get(0), true));\n \t\t\t\tfor (int i = 1; i < blockList.size(); i++) {\n \t\t\t\t\tBlock block = blockList.get(i);\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}