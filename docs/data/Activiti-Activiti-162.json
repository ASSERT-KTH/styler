{
    "project_name": "Activiti-Activiti",
    "error_id": "162",
    "information": {
        "errors": [
            {
                "line": "27",
                "column": "9",
                "severity": "error",
                "message": "WhitespaceAround: 'if' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "                                                                           execution, \n                                                                           fieldDeclarations);        \n        if(ThrowMessageDelegate.class.isInstance(delegate)) {\n            return ThrowMessageDelegate.class.cast(delegate)\n                                             .send(execution, message);\n        }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/162/ThrowMessageDelegateExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/162/ThrowMessageDelegateExpression.java\nindex e5694b5d2eb..e1f2bc46a6c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/162/ThrowMessageDelegateExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/162/ThrowMessageDelegateExpression.java\n@@ -23,8 +23,8 @@ public class ThrowMessageDelegateExpression implements ThrowMessageDelegate {\n         \n         Object delegate = DelegateExpressionUtil.resolveDelegateExpression(delegateExpression, \n                                                                            execution, \n-                                                                           fieldDeclarations);        \n-        if(ThrowMessageDelegate.class.isInstance(delegate)) {\n+                                                                           fieldDeclarations);\n+                                                                           if (ThrowMessageDelegate.class.isInstance(delegate)) {\n             return ThrowMessageDelegate.class.cast(delegate)\n                                              .send(execution, message);\n         }\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/162/ThrowMessageDelegateExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/162/ThrowMessageDelegateExpression.java\nindex e5694b5d2eb..fc06e103b16 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/162/ThrowMessageDelegateExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/162/ThrowMessageDelegateExpression.java\n@@ -8,10 +8,10 @@ import org.activiti.engine.impl.bpmn.helper.DelegateExpressionUtil;\n import org.activiti.engine.impl.bpmn.parser.FieldDeclaration;\n \n public class ThrowMessageDelegateExpression implements ThrowMessageDelegate {\n-    \n+\n     private final Expression delegateExpression;\n     private final List<FieldDeclaration> fieldDeclarations;\n-    \n+\n     public ThrowMessageDelegateExpression(Expression delegateExpression,\n                                           List<FieldDeclaration> fieldDeclarations) {\n         this.delegateExpression = delegateExpression;\n@@ -20,15 +20,15 @@ public class ThrowMessageDelegateExpression implements ThrowMessageDelegate {\n \n     @Override\n     public boolean send(DelegateExecution execution, ThrowMessage message) {\n-        \n-        Object delegate = DelegateExpressionUtil.resolveDelegateExpression(delegateExpression, \n-                                                                           execution, \n-                                                                           fieldDeclarations);        \n-        if(ThrowMessageDelegate.class.isInstance(delegate)) {\n+\n+        Object delegate = DelegateExpressionUtil.resolveDelegateExpression(delegateExpression,\n+                execution,\n+                fieldDeclarations);\n+        if (ThrowMessageDelegate.class.isInstance(delegate)) {\n             return ThrowMessageDelegate.class.cast(delegate)\n-                                             .send(execution, message);\n+                    .send(execution, message);\n         }\n-        \n+\n         return false;\n     }\n }\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "10",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/162/ThrowMessageDelegateExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/162/ThrowMessageDelegateExpression.java\nindex e5694b5d2eb..87a9ca533b1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/162/ThrowMessageDelegateExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/162/ThrowMessageDelegateExpression.java\n@@ -1,34 +1,31 @@\n package org.activiti.engine.impl.delegate;\n \n import java.util.List;\n-\n import org.activiti.engine.delegate.DelegateExecution;\n import org.activiti.engine.delegate.Expression;\n import org.activiti.engine.impl.bpmn.helper.DelegateExpressionUtil;\n import org.activiti.engine.impl.bpmn.parser.FieldDeclaration;\n \n+\n public class ThrowMessageDelegateExpression implements ThrowMessageDelegate {\n-    \n-    private final Expression delegateExpression;\n-    private final List<FieldDeclaration> fieldDeclarations;\n-    \n-    public ThrowMessageDelegateExpression(Expression delegateExpression,\n-                                          List<FieldDeclaration> fieldDeclarations) {\n-        this.delegateExpression = delegateExpression;\n-        this.fieldDeclarations = fieldDeclarations;\n-    }\n \n-    @Override\n-    public boolean send(DelegateExecution execution, ThrowMessage message) {\n-        \n-        Object delegate = DelegateExpressionUtil.resolveDelegateExpression(delegateExpression, \n-                                                                           execution, \n-                                                                           fieldDeclarations);        \n-        if(ThrowMessageDelegate.class.isInstance(delegate)) {\n-            return ThrowMessageDelegate.class.cast(delegate)\n-                                             .send(execution, message);\n-        }\n-        \n-        return false;\n+  private final Expression delegateExpression;\n+\n+  private final List<FieldDeclaration> fieldDeclarations;\n+\n+  public ThrowMessageDelegateExpression(Expression delegateExpression, List<FieldDeclaration> fieldDeclarations) {\n+    this.delegateExpression = delegateExpression;\n+    this.fieldDeclarations = fieldDeclarations;\n+  }\n+\n+  @Override\n+  public boolean send(DelegateExecution execution, ThrowMessage message) {\n+    Object delegate = DelegateExpressionUtil.resolveDelegateExpression(delegateExpression,\n+                                                                       execution,\n+                                                                       fieldDeclarations);\n+    if (ThrowMessageDelegate.class.isInstance(delegate)) {\n+      return ThrowMessageDelegate.class.cast(delegate).send(execution, message);\n     }\n+    return false;\n+  }\n }\n\\ No newline at end of file\n",
            "diff_size": 29
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/162/ThrowMessageDelegateExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/162/ThrowMessageDelegateExpression.java\nindex e5694b5d2eb..e1f2bc46a6c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/162/ThrowMessageDelegateExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/162/ThrowMessageDelegateExpression.java\n@@ -23,8 +23,8 @@ public class ThrowMessageDelegateExpression implements ThrowMessageDelegate {\n         \n         Object delegate = DelegateExpressionUtil.resolveDelegateExpression(delegateExpression, \n                                                                            execution, \n-                                                                           fieldDeclarations);        \n-        if(ThrowMessageDelegate.class.isInstance(delegate)) {\n+                                                                           fieldDeclarations);\n+                                                                           if (ThrowMessageDelegate.class.isInstance(delegate)) {\n             return ThrowMessageDelegate.class.cast(delegate)\n                                              .send(execution, message);\n         }\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/162/ThrowMessageDelegateExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/162/ThrowMessageDelegateExpression.java\nindex e5694b5d2eb..0efa910b052 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/162/ThrowMessageDelegateExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/162/ThrowMessageDelegateExpression.java\n@@ -23,8 +23,8 @@ public class ThrowMessageDelegateExpression implements ThrowMessageDelegate {\n         \n         Object delegate = DelegateExpressionUtil.resolveDelegateExpression(delegateExpression, \n                                                                            execution, \n-                                                                           fieldDeclarations);        \n-        if(ThrowMessageDelegate.class.isInstance(delegate)) {\n+                                                                           fieldDeclarations);\n+                                                                               if (ThrowMessageDelegate.class.isInstance(delegate)) {\n             return ThrowMessageDelegate.class.cast(delegate)\n                                              .send(execution, message);\n         }\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}