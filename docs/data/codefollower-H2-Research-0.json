{
    "project_name": "codefollower-H2-Research",
    "error_id": "0",
    "information": {
        "errors": [
            {
                "line": "62",
                "column": "23",
                "severity": "warning",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "        // offset is 0 because we start writing from src.position()\n        long newPosition = data.readWrite(position, src, 0, src.remaining(), true);\n        int len = (int)(newPosition - position);\n        src.position(src.position() + len);\n        return len;\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/0/FileNioMem.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/0/FileNioMem.java\nindex 87e6b570656..951235c3569 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/0/FileNioMem.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/0/FileNioMem.java\n@@ -59,7 +59,7 @@ class FileNioMem extends FileBaseDefault {\n         data.touch(readOnly);\n         // offset is 0 because we start writing from src.position()\n         long newPosition = data.readWrite(position, src, 0, src.remaining(), true);\n-        int len = (int)(newPosition - position);\n+        int len = (int) (newPosition - position);\n         src.position(src.position() + len);\n         return len;\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/0/FileNioMem.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/0/FileNioMem.java\nindex 87e6b570656..b1342eda036 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/0/FileNioMem.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/0/FileNioMem.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.store.fs.niomem;\n \n import java.io.IOException;\n@@ -10,6 +11,7 @@ import java.nio.ByteBuffer;\n import java.nio.channels.ClosedChannelException;\n import java.nio.channels.FileLock;\n import java.nio.channels.NonWritableChannelException;\n+\n import org.h2.store.fs.FakeFileChannel;\n import org.h2.store.fs.FileBaseDefault;\n \n@@ -18,114 +20,114 @@ import org.h2.store.fs.FileBaseDefault;\n  */\n class FileNioMem extends FileBaseDefault {\n \n-    /**\n-     * The file data.\n-     */\n-    final FileNioMemData data;\n-\n-    private final boolean readOnly;\n-    private volatile boolean closed;\n-\n-    FileNioMem(FileNioMemData data, boolean readOnly) {\n-        this.data = data;\n-        this.readOnly = readOnly;\n+  /**\n+   * The file data.\n+   */\n+  final FileNioMemData data;\n+\n+  private final boolean readOnly;\n+  private volatile boolean closed;\n+\n+  FileNioMem(FileNioMemData data, boolean readOnly) {\n+    this.data = data;\n+    this.readOnly = readOnly;\n+  }\n+\n+  @Override\n+  public long size() {\n+    return data.length();\n+  }\n+\n+  @Override\n+  protected void implTruncate(long newLength) throws IOException {\n+    // compatibility with JDK FileChannel#truncate\n+    if (readOnly) {\n+      throw new NonWritableChannelException();\n     }\n-\n-    @Override\n-    public long size() {\n-        return data.length();\n+    if (closed) {\n+      throw new ClosedChannelException();\n     }\n-\n-    @Override\n-    protected void implTruncate(long newLength) throws IOException {\n-        // compatibility with JDK FileChannel#truncate\n-        if (readOnly) {\n-            throw new NonWritableChannelException();\n-        }\n-        if (closed) {\n-            throw new ClosedChannelException();\n-        }\n-        if (newLength < size()) {\n-            data.touch(readOnly);\n-            data.truncate(newLength);\n-        }\n+    if (newLength < size()) {\n+      data.touch(readOnly);\n+      data.truncate(newLength);\n     }\n+  }\n \n-    @Override\n-    public int write(ByteBuffer src, long position) throws IOException {\n-        if (closed) {\n-            throw new ClosedChannelException();\n-        }\n-        data.touch(readOnly);\n-        // offset is 0 because we start writing from src.position()\n-        long newPosition = data.readWrite(position, src, 0, src.remaining(), true);\n-        int len = (int)(newPosition - position);\n-        src.position(src.position() + len);\n-        return len;\n+  @Override\n+  public int write(ByteBuffer src, long position) throws IOException {\n+    if (closed) {\n+      throw new ClosedChannelException();\n     }\n-\n-    @Override\n-    public int read(ByteBuffer dst, long position) throws IOException {\n-        if (closed) {\n-            throw new ClosedChannelException();\n-        }\n-        int len = dst.remaining();\n-        if (len == 0) {\n-            return 0;\n-        }\n-        long newPos;\n-        newPos = data.readWrite(position, dst, dst.position(), len, false);\n-        len = (int) (newPos - position);\n-        if (len <= 0) {\n-            return -1;\n-        }\n-        dst.position(dst.position() + len);\n-        return len;\n+    data.touch(readOnly);\n+    // offset is 0 because we start writing from src.position()\n+    long newPosition = data.readWrite(position, src, 0, src.remaining(), true);\n+    int len = (int) (newPosition - position);\n+    src.position(src.position() + len);\n+    return len;\n+  }\n+\n+  @Override\n+  public int read(ByteBuffer dst, long position) throws IOException {\n+    if (closed) {\n+      throw new ClosedChannelException();\n     }\n-\n-    @Override\n-    public void implCloseChannel() throws IOException {\n-        closed = true;\n+    int len = dst.remaining();\n+    if (len == 0) {\n+      return 0;\n     }\n-\n-    @Override\n-    public void force(boolean metaData) throws IOException {\n-        // do nothing\n+    long newPos;\n+    newPos = data.readWrite(position, dst, dst.position(), len, false);\n+    len = (int) (newPos - position);\n+    if (len <= 0) {\n+      return -1;\n     }\n-\n-    @Override\n-    public FileLock tryLock(long position, long size,\n-            boolean shared) throws IOException {\n-        if (closed) {\n-            throw new ClosedChannelException();\n-        }\n-        if (shared) {\n-            if (!data.lockShared()) {\n-                return null;\n-            }\n-        } else {\n-            if (!data.lockExclusive()) {\n-                return null;\n-            }\n-        }\n-\n-        return new FileLock(FakeFileChannel.INSTANCE, position, size, shared) {\n-\n-            @Override\n-            public boolean isValid() {\n-                return true;\n-            }\n-\n-            @Override\n-            public void release() throws IOException {\n-                data.unlock();\n-            }\n-        };\n+    dst.position(dst.position() + len);\n+    return len;\n+  }\n+\n+  @Override\n+  public void implCloseChannel() throws IOException {\n+    closed = true;\n+  }\n+\n+  @Override\n+  public void force(boolean metaData) throws IOException {\n+    // do nothing\n+  }\n+\n+  @Override\n+  public FileLock tryLock(long position, long size,\n+                          boolean shared) throws IOException {\n+    if (closed) {\n+      throw new ClosedChannelException();\n     }\n-\n-    @Override\n-    public String toString() {\n-        return closed ? \"<closed>\" : data.getName();\n+    if (shared) {\n+      if (!data.lockShared()) {\n+        return null;\n+      }\n+    } else {\n+      if (!data.lockExclusive()) {\n+        return null;\n+      }\n     }\n \n+    return new FileLock(FakeFileChannel.INSTANCE, position, size, shared) {\n+\n+      @Override\n+      public boolean isValid() {\n+        return true;\n+      }\n+\n+      @Override\n+      public void release() throws IOException {\n+        data.unlock();\n+      }\n+    };\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return closed ? \"<closed>\" : data.getName();\n+  }\n+\n }\n\\ No newline at end of file\n",
            "diff_size": 138
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/0/FileNioMem.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/0/FileNioMem.java\nindex 87e6b570656..944c895f248 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/0/FileNioMem.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/0/FileNioMem.java\n@@ -16,13 +16,16 @@ import org.h2.store.fs.FileBaseDefault;\n /**\n  * This class represents an in-memory file.\n  */\n+\n+\n class FileNioMem extends FileBaseDefault {\n \n     /**\n      * The file data.\n      */\n-    final FileNioMemData data;\n \n+\n+    final FileNioMemData data;\n     private final boolean readOnly;\n     private volatile boolean closed;\n \n@@ -59,7 +62,7 @@ class FileNioMem extends FileBaseDefault {\n         data.touch(readOnly);\n         // offset is 0 because we start writing from src.position()\n         long newPosition = data.readWrite(position, src, 0, src.remaining(), true);\n-        int len = (int)(newPosition - position);\n+        int len = (int) (newPosition - position);\n         src.position(src.position() + len);\n         return len;\n     }\n@@ -91,11 +94,11 @@ class FileNioMem extends FileBaseDefault {\n     @Override\n     public void force(boolean metaData) throws IOException {\n         // do nothing\n+\n     }\n \n     @Override\n-    public FileLock tryLock(long position, long size,\n-            boolean shared) throws IOException {\n+    public FileLock tryLock(long position, long size, boolean shared) throws IOException {\n         if (closed) {\n             throw new ClosedChannelException();\n         }\n@@ -108,19 +111,16 @@ class FileNioMem extends FileBaseDefault {\n                 return null;\n             }\n         }\n-\n         return new FileLock(FakeFileChannel.INSTANCE, position, size, shared) {\n-\n-            @Override\n-            public boolean isValid() {\n-                return true;\n-            }\n-\n-            @Override\n-            public void release() throws IOException {\n-                data.unlock();\n-            }\n-        };\n+@Override\n+public boolean isValid() {\n+    return true;\n+}\n+\n+@Override\n+public void release() throws IOException {\n+    data.unlock();\n+}};\n     }\n \n     @Override\n",
            "diff_size": 21
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/0/FileNioMem.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/0/FileNioMem.java\nindex 87e6b570656..951235c3569 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/0/FileNioMem.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/0/FileNioMem.java\n@@ -59,7 +59,7 @@ class FileNioMem extends FileBaseDefault {\n         data.touch(readOnly);\n         // offset is 0 because we start writing from src.position()\n         long newPosition = data.readWrite(position, src, 0, src.remaining(), true);\n-        int len = (int)(newPosition - position);\n+        int len = (int) (newPosition - position);\n         src.position(src.position() + len);\n         return len;\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/0/FileNioMem.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/0/FileNioMem.java\nindex 87e6b570656..951235c3569 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/0/FileNioMem.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/0/FileNioMem.java\n@@ -59,7 +59,7 @@ class FileNioMem extends FileBaseDefault {\n         data.touch(readOnly);\n         // offset is 0 because we start writing from src.position()\n         long newPosition = data.readWrite(position, src, 0, src.remaining(), true);\n-        int len = (int)(newPosition - position);\n+        int len = (int) (newPosition - position);\n         src.position(src.position() + len);\n         return len;\n     }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}