{
    "project_name": "kitodo-kitodo-production",
    "error_id": "11",
    "information": {
        "errors": [
            {
                "line": "306",
                "column": "43",
                "severity": "warning",
                "message": "WhitespaceAround: '+' is not preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "        List<Task> processTasks = blueprintProcess.getTasks();\n        processTasks.sort(Comparator.comparingInt(Task::getOrdering));\n        String workflowTitle = \"ChangeME_\"+ Helper.generateRandomString(3);\n\n        try {\n            templateConverter.convertTasksToWorkflowFile(workflowTitle, processTasks);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/11/MigrationForm.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler/11/MigrationForm.java\nindex c62fdc3e6d9..ba1c7e94396 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/11/MigrationForm.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler/11/MigrationForm.java\n@@ -303,7 +303,7 @@ public class MigrationForm extends BaseForm {\n         TasksToWorkflowConverter templateConverter = new TasksToWorkflowConverter();\n         List<Task> processTasks = blueprintProcess.getTasks();\n         processTasks.sort(Comparator.comparingInt(Task::getOrdering));\n-        String workflowTitle = \"ChangeME_\"+ Helper.generateRandomString(3);\n+        String workflowTitle = \"ChangeME_\" + Helper.generateRandomString(3);\n \n         try {\n             templateConverter.convertTasksToWorkflowFile(workflowTitle, processTasks);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/11/MigrationForm.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/intellij/11/MigrationForm.java\nindex c62fdc3e6d9..7c7c2afed10 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/11/MigrationForm.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/intellij/11/MigrationForm.java\n@@ -75,7 +75,6 @@ public class MigrationForm extends BaseForm {\n     /**\n      * Migrates the meta.xml for all processes in the database (if it's in the\n      * old format).\n-     *\n      */\n     public void migrateMetadata() {\n         try {\n@@ -161,7 +160,7 @@ public class MigrationForm extends BaseForm {\n             List<Task> aggregatedTasks = aggregatedProcesses.get(tasks).get(0).getTasks();\n             aggregatedTasks.sort(Comparator.comparingInt(Task::getOrdering));\n             if (checkForTitle(tasks, processTasks) && migrationService\n-                    .tasksAreEqual(aggregatedTasks, processTasks)) {\n+                .tasksAreEqual(aggregatedTasks, processTasks)) {\n                 aggregatedProcesses.get(tasks).add(process);\n                 return;\n             }\n@@ -186,8 +185,7 @@ public class MigrationForm extends BaseForm {\n     /**\n      * Set selectedProjects.\n      *\n-     * @param selectedProjects\n-     *            as List of Project\n+     * @param selectedProjects as List of Project\n      */\n     public void setSelectedProjects(List<Project> selectedProjects) {\n         this.selectedProjects = selectedProjects;\n@@ -198,7 +196,7 @@ public class MigrationForm extends BaseForm {\n      * displayed.\n      *\n      * @return whether the switch for starting the metadata migration should be\n-     *         displayed\n+     * displayed\n      */\n     public boolean isMetadataRendered() {\n         return metadataRendered;\n@@ -277,8 +275,7 @@ public class MigrationForm extends BaseForm {\n     /**\n      * Uses the aggregated processes to create a new Workflow.\n      *\n-     * @param tasks\n-     *            the list of tasks found in the projects\n+     * @param tasks the list of tasks found in the projects\n      */\n     public void convertTasksToWorkflow(String tasks) {\n         currentTasks = tasks;\n@@ -303,7 +300,7 @@ public class MigrationForm extends BaseForm {\n         TasksToWorkflowConverter templateConverter = new TasksToWorkflowConverter();\n         List<Task> processTasks = blueprintProcess.getTasks();\n         processTasks.sort(Comparator.comparingInt(Task::getOrdering));\n-        String workflowTitle = \"ChangeME_\"+ Helper.generateRandomString(3);\n+        String workflowTitle = \"ChangeME_\" + Helper.generateRandomString(3);\n \n         try {\n             templateConverter.convertTasksToWorkflowFile(workflowTitle, processTasks);\n@@ -319,7 +316,7 @@ public class MigrationForm extends BaseForm {\n         try {\n             ServiceManager.getWorkflowService().save(workflowToUse);\n         } catch (DataException e) {\n-            Helper.setErrorMessage(ERROR_SAVING, new Object[] {ObjectType.WORKFLOW.getTranslationSingular() }, logger,\n+            Helper.setErrorMessage(ERROR_SAVING, new Object[] {ObjectType.WORKFLOW.getTranslationSingular()}, logger,\n                 e);\n             return this.stayOnCurrentPage;\n         }\n@@ -331,8 +328,7 @@ public class MigrationForm extends BaseForm {\n      * When the navigation to the migration form is coming from a workflow\n      * creation the URL contains a WorkflowId.\n      *\n-     * @param workflowId\n-     *            the id of the created Workflow\n+     * @param workflowId the id of the created Workflow\n      */\n     public void setRedirectFromWorkflow(Integer workflowId) {\n         if (Objects.nonNull(workflowId) && workflowId != 0) {\n@@ -341,7 +337,7 @@ public class MigrationForm extends BaseForm {\n                 workflowToUse = ServiceManager.getWorkflowService().getById(workflowId);\n                 createTemplates();\n             } catch (DAOException e) {\n-                Helper.setErrorMessage(ERROR_READING, new Object[] {ObjectType.TEMPLATE.getTranslationSingular() },\n+                Helper.setErrorMessage(ERROR_READING, new Object[] {ObjectType.TEMPLATE.getTranslationSingular()},\n                     logger, e);\n             }\n         }\n@@ -367,8 +363,7 @@ public class MigrationForm extends BaseForm {\n     /**\n      * Gets a matching template from matchingTemplates.\n      *\n-     * @param template\n-     *            the template to match.\n+     * @param template the template to match.\n      * @return the matching template\n      */\n     public Template getMatchingTemplate(Template template) {\n@@ -378,18 +373,16 @@ public class MigrationForm extends BaseForm {\n     /**\n      * Uses the existing template to add processes to.\n      *\n-     * @param template\n-     *            The template to which's matching template the processes should\n-     *            be added\n-     * @param existingTemplate\n-     *            the template to add the processes to\n+     * @param template         The template to which's matching template the processes should\n+     *                         be added\n+     * @param existingTemplate the template to add the processes to\n      */\n     public void useExistingTemplate(Template template, Template existingTemplate) {\n         List<Process> processesToAddToTemplate = templatesToCreate.get(template);\n         try {\n             migrationService.addProcessesToTemplate(existingTemplate, processesToAddToTemplate);\n         } catch (DataException e) {\n-            Helper.setErrorMessage(ERROR_SAVING, new Object[] {ObjectType.PROCESS.getTranslationSingular() }, logger,\n+            Helper.setErrorMessage(ERROR_SAVING, new Object[] {ObjectType.PROCESS.getTranslationSingular()}, logger,\n                 e);\n         }\n         templatesToCreate.remove(template);\n@@ -398,8 +391,7 @@ public class MigrationForm extends BaseForm {\n     /**\n      * Creates a new template.\n      *\n-     * @param template\n-     *            The template to create.\n+     * @param template The template to create.\n      */\n     public void createNewTemplate(Template template) {\n         if (migrationService.isTitleValid(template)) {\n@@ -407,22 +399,22 @@ public class MigrationForm extends BaseForm {\n                 Converter converter = new Converter(template.getWorkflow().getTitle());\n                 converter.convertWorkflowToTemplate(template);\n             } catch (IOException | DAOException | WorkflowException e) {\n-                Helper.setErrorMessage(ERROR_SAVING, new Object[]{ObjectType.PROCESS.getTranslationSingular()},\n-                        logger, e);\n+                Helper.setErrorMessage(ERROR_SAVING, new Object[] {ObjectType.PROCESS.getTranslationSingular()},\n+                    logger, e);\n             }\n \n             List<Process> processesToAddToTemplate = templatesToCreate.get(template);\n             try {\n                 ServiceManager.getTemplateService().save(template);\n             } catch (DataException e) {\n-                Helper.setErrorMessage(ERROR_SAVING, new Object[]{ObjectType.TEMPLATE.getTranslationSingular()}, logger,\n-                        e);\n+                Helper.setErrorMessage(ERROR_SAVING, new Object[] {ObjectType.TEMPLATE.getTranslationSingular()}, logger,\n+                    e);\n             }\n             try {\n                 migrationService.addProcessesToTemplate(template, processesToAddToTemplate);\n             } catch (DataException e) {\n-                Helper.setErrorMessage(ERROR_SAVING, new Object[]{ObjectType.PROCESS.getTranslationSingular()}, logger,\n-                        e);\n+                Helper.setErrorMessage(ERROR_SAVING, new Object[] {ObjectType.PROCESS.getTranslationSingular()}, logger,\n+                    e);\n             }\n             templatesToCreate.remove(template);\n         }\n@@ -430,6 +422,7 @@ public class MigrationForm extends BaseForm {\n \n     /**\n      * Gets all workflows, possible to use in migration.\n+     *\n      * @return A list of workflows.\n      */\n     public List<Workflow> getAllWorkflows() {\n@@ -484,8 +477,7 @@ public class MigrationForm extends BaseForm {\n     /**\n      * Sets the selected items of the newspaperBatches select box.\n      *\n-     * @param selectedItems\n-     *            elected items of the newspaperBatches select box to set\n+     * @param selectedItems elected items of the newspaperBatches select box to set\n      */\n     public void setNewspaperBatchesSelectedItems(Collection<Integer> selectedItems) {\n         newspaperBatchesSelectedItems = selectedItems;\n",
            "diff_size": 31
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/11/MigrationForm.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/naturalize/11/MigrationForm.java\nindex c62fdc3e6d9..b4a206353f8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/11/MigrationForm.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/naturalize/11/MigrationForm.java\n@@ -303,7 +303,7 @@ public class MigrationForm extends BaseForm {\n         TasksToWorkflowConverter templateConverter = new TasksToWorkflowConverter();\n         List<Task> processTasks = blueprintProcess.getTasks();\n         processTasks.sort(Comparator.comparingInt(Task::getOrdering));\n-        String workflowTitle = \"ChangeME_\"+ Helper.generateRandomString(3);\n+        String workflowTitle = \"ChangeME_\" + Helper.generateRandomString(3);\n \n         try {\n             templateConverter.convertTasksToWorkflowFile(workflowTitle, processTasks);\n@@ -529,4 +529,4 @@ public class MigrationForm extends BaseForm {\n     public void hideNewspaperMigration() {\n         newspaperMigrationRendered = false;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "279",
                    "column": "1",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "280",
                    "column": "1",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "281",
                    "column": "1",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/11/MigrationForm.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/codebuff/11/MigrationForm.java\nindex c62fdc3e6d9..802b5af9105 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/11/MigrationForm.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/codebuff/11/MigrationForm.java\n@@ -23,10 +23,8 @@ import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n import java.util.Set;\n-\n import javax.enterprise.context.ApplicationScoped;\n import javax.inject.Named;\n-\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.kitodo.data.database.beans.Process;\n@@ -77,6 +75,8 @@ public class MigrationForm extends BaseForm {\n      * old format).\n      *\n      */\n+\n+\n     public void migrateMetadata() {\n         try {\n             allProjects = ServiceManager.getProjectService().getAll();\n@@ -92,6 +92,8 @@ public class MigrationForm extends BaseForm {\n     /**\n      * Shows all projects for migration.\n      */\n+\n+\n     public void showPossibleProjects() {\n         try {\n             allProjects = ServiceManager.getProjectService().getAll();\n@@ -107,6 +109,8 @@ public class MigrationForm extends BaseForm {\n     /**\n      * Shows all processes related to the selected projects.\n      */\n+\n+\n     public void showAggregatedProcesses() {\n         List<Process> processList = new ArrayList<>();\n         aggregatedProcesses.clear();\n@@ -122,7 +126,9 @@ public class MigrationForm extends BaseForm {\n                 long currentSystemSecond = System.nanoTime() / 1_000_000_000;\n                 if (currentSystemSecond != lastSystemSecond) {\n                     lastSystemSecond = currentSystemSecond;\n-                    logger.trace(\"Analyzing process {}/{} ({}% done)\", currentProcess, numberOfProcesses,\n+                    logger.trace(\"Analyzing process {}/{} ({}% done)\",\n+                        currentProcess,\n+                        numberOfProcesses,\n                         100 * currentProcess / numberOfProcesses);\n                 }\n             }\n@@ -138,6 +144,8 @@ public class MigrationForm extends BaseForm {\n      * clicks the button to migrate hierarchical processes under the projects\n      * selection.\n      */\n+\n+\n     public void convertHierarchys() {\n         TaskManager.addTask(new HierarchyMigrationTask(selectedProjects));\n         projectListRendered = false;\n@@ -147,6 +155,8 @@ public class MigrationForm extends BaseForm {\n      * Method for migrating the metadata. This is done when the user clicks the\n      * button to migrate metadata under the projects selection.\n      */\n+\n+\n     public void convertMetadata() {\n         for (Project project : selectedProjects) {\n             TaskManager.addTask(new MigrationTask(project));\n@@ -154,14 +164,14 @@ public class MigrationForm extends BaseForm {\n         projectListRendered = false;\n     }\n \n+\n     private void addToAggregatedProcesses(Map<String, List<Process>> aggregatedProcesses, Process process) {\n         List<Task> processTasks = process.getTasks();\n         processTasks.sort(Comparator.comparingInt(Task::getOrdering));\n         for (String tasks : aggregatedProcesses.keySet()) {\n             List<Task> aggregatedTasks = aggregatedProcesses.get(tasks).get(0).getTasks();\n             aggregatedTasks.sort(Comparator.comparingInt(Task::getOrdering));\n-            if (checkForTitle(tasks, processTasks) && migrationService\n-                    .tasksAreEqual(aggregatedTasks, processTasks)) {\n+            if (checkForTitle(tasks, processTasks) && migrationService.tasksAreEqual(aggregatedTasks, processTasks)) {\n                 aggregatedProcesses.get(tasks).add(process);\n                 return;\n             }\n@@ -170,6 +180,7 @@ public class MigrationForm extends BaseForm {\n             new ArrayList<>(Arrays.asList(process)));\n     }\n \n+\n     private boolean checkForTitle(String aggregatedTasks, List<Task> processTasks) {\n         return aggregatedTasks.equals(migrationService.createTaskString(processTasks));\n     }\n@@ -179,6 +190,8 @@ public class MigrationForm extends BaseForm {\n      *\n      * @return value of allProjects\n      */\n+\n+\n     public List<Project> getAllProjects() {\n         return allProjects;\n     }\n@@ -189,6 +202,8 @@ public class MigrationForm extends BaseForm {\n      * @param selectedProjects\n      *            as List of Project\n      */\n+\n+\n     public void setSelectedProjects(List<Project> selectedProjects) {\n         this.selectedProjects = selectedProjects;\n     }\n@@ -200,6 +215,8 @@ public class MigrationForm extends BaseForm {\n      * @return whether the switch for starting the metadata migration should be\n      *         displayed\n      */\n+\n+\n     public boolean isMetadataRendered() {\n         return metadataRendered;\n     }\n@@ -209,6 +226,8 @@ public class MigrationForm extends BaseForm {\n      *\n      * @return value of projectListRendered\n      */\n+\n+\n     public boolean isProjectListRendered() {\n         return projectListRendered;\n     }\n@@ -218,6 +237,8 @@ public class MigrationForm extends BaseForm {\n      *\n      * @return whether the switch for creating workflows should be displayed\n      */\n+\n+\n     public boolean isWorkflowRendered() {\n         return workflowRendered;\n     }\n@@ -227,6 +248,8 @@ public class MigrationForm extends BaseForm {\n      *\n      * @return value of selectedProjects\n      */\n+\n+\n     public List<Project> getSelectedProjects() {\n         return selectedProjects;\n     }\n@@ -236,6 +259,8 @@ public class MigrationForm extends BaseForm {\n      *\n      * @return value of processListRendered\n      */\n+\n+\n     public boolean isProcessListRendered() {\n         return processListRendered;\n     }\n@@ -246,12 +271,14 @@ public class MigrationForm extends BaseForm {\n      *\n      * @return sorted keyset of aggregatedProcesses\n      */\n+\n+\n     public List<String> getAggregatedTasks() {\n         ArrayList<String> aggregatedTasks = new ArrayList<>(aggregatedProcesses.keySet());\n         Collections.sort(aggregatedTasks, (one, another) -> {\n-            int oneSize = aggregatedProcesses.get(one).size();\n-            int anotherSize = aggregatedProcesses.get(another).size();\n-            return oneSize == anotherSize ? one.compareTo(another) : anotherSize - oneSize;\n+int oneSize = aggregatedProcesses.get(one).size();\n+int anotherSize = aggregatedProcesses.get(another).size();\n+return oneSize == anotherSize ? one.compareTo(another) : anotherSize - oneSize;\n         });\n         return aggregatedTasks;\n     }\n@@ -261,6 +288,8 @@ public class MigrationForm extends BaseForm {\n      *\n      * @return tasks without hash code\n      */\n+\n+\n     public String tasksWithoutHashCode(String tasks) {\n         return tasks.substring(0, tasks.lastIndexOf(MigrationService.SEPARATOR));\n     }\n@@ -270,6 +299,8 @@ public class MigrationForm extends BaseForm {\n      *\n      * @return size of aggregatedProcesses\n      */\n+\n+\n     public int getNumberOfProcesses(String tasks) {\n         return aggregatedProcesses.get(tasks).size();\n     }\n@@ -280,6 +311,8 @@ public class MigrationForm extends BaseForm {\n      * @param tasks\n      *            the list of tasks found in the projects\n      */\n+\n+\n     public void convertTasksToWorkflow(String tasks) {\n         currentTasks = tasks;\n         PrimeFaces.current().executeScript(\"PF('confirmWorkflowPopup').show();\");\n@@ -288,6 +321,8 @@ public class MigrationForm extends BaseForm {\n     /**\n      * Use an existing Workflow instead of creating a new one.\n      */\n+\n+\n     public void useExistingWorkflow() {\n         setRedirectFromWorkflow(workflowToUse.getId());\n     }\n@@ -297,33 +332,29 @@ public class MigrationForm extends BaseForm {\n      *\n      * @return a navigation path.\n      */\n-    public String createNewWorkflow() {\n \n+\n+    public String createNewWorkflow() {\n         Process blueprintProcess = aggregatedProcesses.get(currentTasks).get(0);\n         TasksToWorkflowConverter templateConverter = new TasksToWorkflowConverter();\n         List<Task> processTasks = blueprintProcess.getTasks();\n         processTasks.sort(Comparator.comparingInt(Task::getOrdering));\n-        String workflowTitle = \"ChangeME_\"+ Helper.generateRandomString(3);\n-\n+        String workflowTitle = \"ChangeME_\" + Helper.generateRandomString(3);\n         try {\n             templateConverter.convertTasksToWorkflowFile(workflowTitle, processTasks);\n         } catch (IOException e) {\n             Helper.setErrorMessage(e.getLocalizedMessage(), logger, e);\n         }\n-\n         workflowToUse = new Workflow(workflowTitle);\n         workflowToUse.setClient(blueprintProcess.getProject().getClient());\n         workflowToUse.setStatus(WorkflowStatus.DRAFT);\n         workflowToUse.getTemplates().add(null);\n-\n         try {\n             ServiceManager.getWorkflowService().save(workflowToUse);\n         } catch (DataException e) {\n-            Helper.setErrorMessage(ERROR_SAVING, new Object[] {ObjectType.WORKFLOW.getTranslationSingular() }, logger,\n-                e);\n+            Helper.setErrorMessage(ERROR_SAVING, new Object[] {ObjectType.WORKFLOW.getTranslationSingular() }, logger, e);\n             return this.stayOnCurrentPage;\n         }\n-\n         return MessageFormat.format(REDIRECT_PATH, \"workflowEdit\") + \"&id=\" + workflowToUse.getId() + \"&migration=true\";\n     }\n \n@@ -334,6 +365,8 @@ public class MigrationForm extends BaseForm {\n      * @param workflowId\n      *            the id of the created Workflow\n      */\n+\n+\n     public void setRedirectFromWorkflow(Integer workflowId) {\n         if (Objects.nonNull(workflowId) && workflowId != 0) {\n             // showPopup for Template\n@@ -341,15 +374,14 @@ public class MigrationForm extends BaseForm {\n                 workflowToUse = ServiceManager.getWorkflowService().getById(workflowId);\n                 createTemplates();\n             } catch (DAOException e) {\n-                Helper.setErrorMessage(ERROR_READING, new Object[] {ObjectType.TEMPLATE.getTranslationSingular() },\n-                    logger, e);\n+                Helper.setErrorMessage(ERROR_READING, new Object[] {ObjectType.TEMPLATE.getTranslationSingular() }, logger, e);\n             }\n         }\n     }\n \n+\n     private void createTemplates() throws DAOException {\n-        templatesToCreate = migrationService.createTemplatesForProcesses(aggregatedProcesses.get(currentTasks),\n-            workflowToUse);\n+        templatesToCreate = migrationService.createTemplatesForProcesses(aggregatedProcesses.get(currentTasks), workflowToUse);\n         matchingTemplates.clear();\n         matchingTemplates = migrationService.getMatchingTemplates(templatesToCreate.keySet());\n         PrimeFaces.current().executeScript(\"PF('createTemplatePopup').show();\");\n@@ -360,6 +392,8 @@ public class MigrationForm extends BaseForm {\n      *\n      * @return value of templatesToCreate\n      */\n+\n+\n     public Set<Template> getTemplatesToCreate() {\n         return templatesToCreate.keySet();\n     }\n@@ -371,6 +405,8 @@ public class MigrationForm extends BaseForm {\n      *            the template to match.\n      * @return the matching template\n      */\n+\n+\n     public Template getMatchingTemplate(Template template) {\n         return matchingTemplates.get(template);\n     }\n@@ -384,13 +420,14 @@ public class MigrationForm extends BaseForm {\n      * @param existingTemplate\n      *            the template to add the processes to\n      */\n+\n+\n     public void useExistingTemplate(Template template, Template existingTemplate) {\n         List<Process> processesToAddToTemplate = templatesToCreate.get(template);\n         try {\n             migrationService.addProcessesToTemplate(existingTemplate, processesToAddToTemplate);\n         } catch (DataException e) {\n-            Helper.setErrorMessage(ERROR_SAVING, new Object[] {ObjectType.PROCESS.getTranslationSingular() }, logger,\n-                e);\n+            Helper.setErrorMessage(ERROR_SAVING, new Object[] {ObjectType.PROCESS.getTranslationSingular() }, logger, e);\n         }\n         templatesToCreate.remove(template);\n     }\n@@ -401,28 +438,26 @@ public class MigrationForm extends BaseForm {\n      * @param template\n      *            The template to create.\n      */\n+\n+\n     public void createNewTemplate(Template template) {\n         if (migrationService.isTitleValid(template)) {\n             try {\n                 Converter converter = new Converter(template.getWorkflow().getTitle());\n                 converter.convertWorkflowToTemplate(template);\n             } catch (IOException | DAOException | WorkflowException e) {\n-                Helper.setErrorMessage(ERROR_SAVING, new Object[]{ObjectType.PROCESS.getTranslationSingular()},\n-                        logger, e);\n+                Helper.setErrorMessage(ERROR_SAVING, new Object[] {ObjectType.PROCESS.getTranslationSingular() }, logger, e);\n             }\n-\n             List<Process> processesToAddToTemplate = templatesToCreate.get(template);\n             try {\n                 ServiceManager.getTemplateService().save(template);\n             } catch (DataException e) {\n-                Helper.setErrorMessage(ERROR_SAVING, new Object[]{ObjectType.TEMPLATE.getTranslationSingular()}, logger,\n-                        e);\n+                Helper.setErrorMessage(ERROR_SAVING, new Object[] {ObjectType.TEMPLATE.getTranslationSingular() }, logger, e);\n             }\n             try {\n                 migrationService.addProcessesToTemplate(template, processesToAddToTemplate);\n             } catch (DataException e) {\n-                Helper.setErrorMessage(ERROR_SAVING, new Object[]{ObjectType.PROCESS.getTranslationSingular()}, logger,\n-                        e);\n+                Helper.setErrorMessage(ERROR_SAVING, new Object[] {ObjectType.PROCESS.getTranslationSingular() }, logger, e);\n             }\n             templatesToCreate.remove(template);\n         }\n@@ -432,6 +467,8 @@ public class MigrationForm extends BaseForm {\n      * Gets all workflows, possible to use in migration.\n      * @return A list of workflows.\n      */\n+\n+\n     public List<Workflow> getAllWorkflows() {\n         return ServiceManager.getWorkflowService().getAllActiveWorkflows();\n     }\n@@ -441,6 +478,8 @@ public class MigrationForm extends BaseForm {\n      *\n      * @return value of workflowToUse\n      */\n+\n+\n     public Workflow getWorkflowToUse() {\n         return workflowToUse;\n     }\n@@ -450,6 +489,8 @@ public class MigrationForm extends BaseForm {\n      *\n      * @param workflowToUse as org.kitodo.data.database.beans.Workflow\n      */\n+\n+\n     public void setWorkflowToUse(Workflow workflowToUse) {\n         this.workflowToUse = workflowToUse;\n     }\n@@ -457,6 +498,8 @@ public class MigrationForm extends BaseForm {\n     /**\n      * Action performed when the migrateNewspaperBatches button is clicked.\n      */\n+\n+\n     public void showPossibleBatches() {\n         newspaperMigrationRendered = true;\n         projectListRendered = false;\n@@ -468,6 +511,7 @@ public class MigrationForm extends BaseForm {\n      * @return whether the newspaperMigration panel group is rendered\n      */\n \n+\n     public boolean isNewspaperMigrationRendered() {\n         return newspaperMigrationRendered;\n     }\n@@ -477,6 +521,8 @@ public class MigrationForm extends BaseForm {\n      *\n      * @return the selected items of the newspaperBatches select box\n      */\n+\n+\n     public Collection<Integer> getNewspaperBatchesSelectedItems() {\n         return newspaperBatchesSelectedItems;\n     }\n@@ -487,6 +533,8 @@ public class MigrationForm extends BaseForm {\n      * @param selectedItems\n      *            elected items of the newspaperBatches select box to set\n      */\n+\n+\n     public void setNewspaperBatchesSelectedItems(Collection<Integer> selectedItems) {\n         newspaperBatchesSelectedItems = selectedItems;\n     }\n@@ -496,6 +544,8 @@ public class MigrationForm extends BaseForm {\n      *\n      * @return the items of the newspaperBatches select box\n      */\n+\n+\n     public List<BatchDTO> getNewspaperBatchesItems() {\n         if (Objects.isNull(newspaperBatchesItems)) {\n             try {\n@@ -511,6 +561,8 @@ public class MigrationForm extends BaseForm {\n     /**\n      * Action performed when the startNewspaperMigration button is clicked.\n      */\n+\n+\n     public void startNewspaperMigration() {\n         try {\n             for (Integer batchId : newspaperBatchesSelectedItems) {\n@@ -526,7 +578,9 @@ public class MigrationForm extends BaseForm {\n     /**\n      * Action performed when the cancelNewspaperMigration button is clicked.\n      */\n+\n+\n     public void hideNewspaperMigration() {\n         newspaperMigrationRendered = false;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 100
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/11/MigrationForm.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler_random/11/MigrationForm.java\nindex c62fdc3e6d9..ba1c7e94396 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/11/MigrationForm.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler_random/11/MigrationForm.java\n@@ -303,7 +303,7 @@ public class MigrationForm extends BaseForm {\n         TasksToWorkflowConverter templateConverter = new TasksToWorkflowConverter();\n         List<Task> processTasks = blueprintProcess.getTasks();\n         processTasks.sort(Comparator.comparingInt(Task::getOrdering));\n-        String workflowTitle = \"ChangeME_\"+ Helper.generateRandomString(3);\n+        String workflowTitle = \"ChangeME_\" + Helper.generateRandomString(3);\n \n         try {\n             templateConverter.convertTasksToWorkflowFile(workflowTitle, processTasks);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/11/MigrationForm.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler_three_grams/11/MigrationForm.java\nindex c62fdc3e6d9..ba1c7e94396 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/11/MigrationForm.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler_three_grams/11/MigrationForm.java\n@@ -303,7 +303,7 @@ public class MigrationForm extends BaseForm {\n         TasksToWorkflowConverter templateConverter = new TasksToWorkflowConverter();\n         List<Task> processTasks = blueprintProcess.getTasks();\n         processTasks.sort(Comparator.comparingInt(Task::getOrdering));\n-        String workflowTitle = \"ChangeME_\"+ Helper.generateRandomString(3);\n+        String workflowTitle = \"ChangeME_\" + Helper.generateRandomString(3);\n \n         try {\n             templateConverter.convertTasksToWorkflowFile(workflowTitle, processTasks);\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff"
    ]
}