{
    "project_name": "neo4j-neo4j",
    "error_id": "879",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "87",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "141",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/879/TransactionApplicationMode.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/879/TransactionApplicationMode.java\nindex 9a9c0aad5d2..5e4710985d0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/879/TransactionApplicationMode.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/879/TransactionApplicationMode.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.storageengine.api;\n \n import static org.neo4j.storageengine.api.CommandVersion.AFTER;\n@@ -35,11 +36,11 @@ public enum TransactionApplicationMode\n      * all such high level information directly from the transaction state.\n      */\n     INTERNAL(\n-            false, // id tracking not needed since that is done in the transaction before commit\n-            false, // cache invalidation not needed since cache can be updated\n-            true,  // include all stores\n-            AFTER\n-            ),\n+      false, // id tracking not needed since that is done in the transaction before commit\n+      false, // cache invalidation not needed since cache can be updated\n+      true,  // include all stores\n+      AFTER\n+    ),\n \n     /**\n      * Transaction that comes from an external source and consists only of commands, i.e. it may not\n@@ -47,11 +48,11 @@ public enum TransactionApplicationMode\n      * transaction does.\n      */\n     EXTERNAL(\n-            true,  // id tracking needed since that hasn't been done prior to receiving this external transaction\n-            true,  // cache invalidation needed since not enough information available to update cache\n-            true,  // include all stores\n-            AFTER\n-            ),\n+      true,  // id tracking needed since that hasn't been done prior to receiving this external transaction\n+      true,  // cache invalidation needed since not enough information available to update cache\n+      true,  // include all stores\n+      AFTER\n+    ),\n \n     /**\n      * Transaction that is recovered, where commands are read, much like {@link #EXTERNAL}, but should\n@@ -59,11 +60,11 @@ public enum TransactionApplicationMode\n      * a recovered transaction may have already been applied previously to the store.\n      */\n     RECOVERY(\n-            true,  // id tracking not needed because id generators will be rebuilt after recovery anyway\n-            true,  // we need cache invalidation during forward recovery, because we need our token holders to be updated with token create commands\n-            true,  // include all stores\n-            AFTER\n-            ),\n+      true,  // id tracking not needed because id generators will be rebuilt after recovery anyway\n+      true,  // we need cache invalidation during forward recovery, because we need our token holders to be updated with token create commands\n+      true,  // include all stores\n+      AFTER\n+    ),\n \n     /**\n      * Transaction that is recovered during a phase of reverse recovery in order to rewind neo store back\n@@ -72,18 +73,18 @@ public enum TransactionApplicationMode\n      * a mix of log and store to produce its updates.\n      */\n     REVERSE_RECOVERY(\n-            false, // id tracking not needed because this is for the initial reverse recovery\n-            false, // cache invalidation not needed because this is for the initial reverse recovery\n-            false, // only apply to neo store\n-            BEFORE\n-            );\n+      false, // id tracking not needed because this is for the initial reverse recovery\n+      false, // cache invalidation not needed because this is for the initial reverse recovery\n+      false, // only apply to neo store\n+      BEFORE\n+    );\n \n     private final boolean needsHighIdTracking;\n     private final boolean needsCacheInvalidation;\n     private final boolean indexesAndCounts;\n     private final CommandVersion version;\n \n-    TransactionApplicationMode( boolean needsHighIdTracking, boolean needsCacheInvalidation, boolean indexesAndCounts, CommandVersion version )\n+    TransactionApplicationMode(boolean needsHighIdTracking, boolean needsCacheInvalidation, boolean indexesAndCounts, CommandVersion version)\n     {\n         this.needsHighIdTracking = needsHighIdTracking;\n         this.needsCacheInvalidation = needsCacheInvalidation;\n",
            "diff_size": 22
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/879/TransactionApplicationMode.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/879/TransactionApplicationMode.java\nindex 9a9c0aad5d2..69d0b7f6c14 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/879/TransactionApplicationMode.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/879/TransactionApplicationMode.java\n@@ -122,4 +122,4 @@ public enum TransactionApplicationMode\n     {\n         return version;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}