{
    "project_name": "NationalSecurityAgency-emissary",
    "error_id": "4",
    "information": {
        "errors": [
            {
                "line": "314",
                "column": "25",
                "severity": "warning",
                "message": "'}' at column 25 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "\n    /** This class is not meant to be instantiated. */\n    private JDOMUtil() {}\n}",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "314",
                    "column": "25",
                    "severity": "warning",
                    "message": "'}' at column 25 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "99",
                    "column": "7",
                    "severity": "warning",
                    "message": "'throws' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/4/JDOMUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/intellij/4/JDOMUtil.java\nindex 8e6ce9059fa..679820a0ffc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/4/JDOMUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/intellij/4/JDOMUtil.java\n@@ -45,8 +45,8 @@ public class JDOMUtil {\n     /**\n      * creates a JDOM document from the input XML string.\n      *\n-     * @param xml an XML document in a String\n-     * @param filter an XMLFilter to receive callbacks during processing\n+     * @param xml      an XML document in a String\n+     * @param filter   an XMLFilter to receive callbacks during processing\n      * @param validate if true, XML should be validated\n      * @return the JDOM representation of that XML document\n      */\n@@ -66,7 +66,7 @@ public class JDOMUtil {\n     /**\n      * creates a JDOM document from the input XML string.\n      *\n-     * @param xml an XML document in a String\n+     * @param xml      an XML document in a String\n      * @param validate if true, XML should be validated\n      * @return the JDOM representation of that XML document\n      */\n@@ -77,8 +77,8 @@ public class JDOMUtil {\n     /**\n      * creates a JDOM document from the input XML bytes. interpreting them in the platform default charset\n      *\n-     * @param xml an XML document in a byte array\n-     * @param filter an XMLFilter to receive callbacks during processing\n+     * @param xml      an XML document in a byte array\n+     * @param filter   an XMLFilter to receive callbacks during processing\n      * @param validate if true, XML should be validated\n      * @return the JDOM representation of that XML document\n      */\n@@ -89,14 +89,14 @@ public class JDOMUtil {\n     /**\n      * creates a JDOM document from the input XML bytes.\n      *\n-     * @param xml an XML document in a byte array\n-     * @param filter an XMLFilter to receive callbacks during processing\n+     * @param xml      an XML document in a byte array\n+     * @param filter   an XMLFilter to receive callbacks during processing\n      * @param validate if true, XML should be validated\n-     * @param charset the charset to interpret the bytes in\n+     * @param charset  the charset to interpret the bytes in\n      * @return the JDOM representation of that XML document\n      */\n     public static Document createDocument(final byte[] xml, final XMLFilter filter, final boolean validate, final String charset)\n-            throws JDOMException {\n+      throws JDOMException {\n         final SAXBuilder builder = createSAXBuilder(validate);\n         if (filter != null) {\n             builder.setXMLFilter(filter);\n@@ -124,8 +124,8 @@ public class JDOMUtil {\n     /**\n      * creates a JDOM document from the InputSource\n      *\n-     * @param is an XML document in an InputSource\n-     * @param filter an XMLFilter to receive callbacks during processing\n+     * @param is       an XML document in an InputSource\n+     * @param filter   an XMLFilter to receive callbacks during processing\n      * @param validate if true, XML should be validated\n      * @return the JDOM representation of that XML document\n      */\n@@ -145,7 +145,7 @@ public class JDOMUtil {\n     /**\n      * creates a JDOM document from the input XML bytes.\n      *\n-     * @param xml an XML document in a byte array\n+     * @param xml      an XML document in a byte array\n      * @param validate if true, XML should be validated\n      * @return the JDOM representation of that XML document\n      */\n@@ -310,6 +310,9 @@ public class JDOMUtil {\n         }\n     }\n \n-    /** This class is not meant to be instantiated. */\n-    private JDOMUtil() {}\n+    /**\n+     * This class is not meant to be instantiated.\n+     */\n+    private JDOMUtil() {\n+    }\n }\n",
            "diff_size": 17
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/4/JDOMUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/naturalize/4/JDOMUtil.java\nindex 8e6ce9059fa..da79e0290b1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/4/JDOMUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/naturalize/4/JDOMUtil.java\n@@ -311,5 +311,6 @@ public class JDOMUtil {\n     }\n \n     /** This class is not meant to be instantiated. */\n-    private JDOMUtil() {}\n-}\n+    private JDOMUtil() {\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/4/JDOMUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/codebuff/4/JDOMUtil.java\nindex 8e6ce9059fa..06ae1411c3e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/4/JDOMUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/codebuff/4/JDOMUtil.java\n@@ -7,7 +7,6 @@ import java.io.InputStreamReader;\n import java.io.StringReader;\n import java.io.UnsupportedEncodingException;\n import java.nio.charset.Charset;\n-\n import org.apache.commons.codec.binary.Base64;\n import org.apache.commons.codec.net.QuotedPrintableCodec;\n import org.jdom2.CDATA;\n@@ -25,6 +24,8 @@ import org.xml.sax.XMLFilter;\n /**\n  * Utilities for dealing with JDOM documents\n  */\n+\n+\n public class JDOMUtil {\n \n     private static final Logger logger = LoggerFactory.getLogger(JDOMUtil.class);\n@@ -50,6 +51,8 @@ public class JDOMUtil {\n      * @param validate if true, XML should be validated\n      * @return the JDOM representation of that XML document\n      */\n+\n+\n     public static Document createDocument(final String xml, final XMLFilter filter, final boolean validate) throws JDOMException {\n         final SAXBuilder builder = createSAXBuilder(validate);\n         if (filter != null) {\n@@ -70,6 +73,8 @@ public class JDOMUtil {\n      * @param validate if true, XML should be validated\n      * @return the JDOM representation of that XML document\n      */\n+\n+\n     public static Document createDocument(final String xml, final boolean validate) throws JDOMException {\n         return createDocument(xml, null, validate);\n     }\n@@ -82,6 +87,8 @@ public class JDOMUtil {\n      * @param validate if true, XML should be validated\n      * @return the JDOM representation of that XML document\n      */\n+\n+\n     public static Document createDocument(final byte[] xml, final XMLFilter filter, final boolean validate) throws JDOMException {\n         return createDocument(xml, filter, validate, null);\n     }\n@@ -95,15 +102,16 @@ public class JDOMUtil {\n      * @param charset the charset to interpret the bytes in\n      * @return the JDOM representation of that XML document\n      */\n-    public static Document createDocument(final byte[] xml, final XMLFilter filter, final boolean validate, final String charset)\n-            throws JDOMException {\n+\n+\n+    public static Document createDocument(final byte[] xml, final XMLFilter filter, final boolean validate, final String charset) throws JDOMException {\n         final SAXBuilder builder = createSAXBuilder(validate);\n         if (filter != null) {\n             builder.setXMLFilter(filter);\n         }\n+\n         final ByteArrayInputStream bais = new ByteArrayInputStream(xml);\n         InputStreamReader isr = null;\n-\n         if (charset != null) {\n             try {\n                 isr = new InputStreamReader(bais, charset);\n@@ -129,6 +137,8 @@ public class JDOMUtil {\n      * @param validate if true, XML should be validated\n      * @return the JDOM representation of that XML document\n      */\n+\n+\n     public static Document createDocument(final InputSource is, final XMLFilter filter, final boolean validate) throws JDOMException {\n         final SAXBuilder builder = createSAXBuilder(validate);\n         if (filter != null) {\n@@ -149,6 +159,8 @@ public class JDOMUtil {\n      * @param validate if true, XML should be validated\n      * @return the JDOM representation of that XML document\n      */\n+\n+\n     public static Document createDocument(final byte[] xml, final boolean validate) throws JDOMException {\n         return createDocument(xml, null, validate);\n     }\n@@ -159,6 +171,8 @@ public class JDOMUtil {\n      * @param jdom the jdom document\n      * @return String value in UTF-8\n      */\n+\n+\n     public static String toString(final Document jdom) {\n         final XMLOutputter outputter = new XMLOutputter(Format.getPrettyFormat());\n         // outputter.setOmitDeclaration(false);\n@@ -176,6 +190,7 @@ public class JDOMUtil {\n                 os.close();\n             } catch (IOException ignore) {\n                 // empty exception block\n+\n             }\n         }\n     }\n@@ -183,6 +198,8 @@ public class JDOMUtil {\n     /**\n      * Create a JDOM element with some text\n      */\n+\n+\n     public static Element simpleElement(final String name, final String text) {\n         final Element e = new Element(name);\n         e.addContent(text);\n@@ -192,6 +209,8 @@ public class JDOMUtil {\n     /**\n      * Create a JDOM element with a number value\n      */\n+\n+\n     public static Element simpleElement(final String name, final int value) {\n         final Element e = new Element(name);\n         e.addContent(Integer.toString(value));\n@@ -201,6 +220,8 @@ public class JDOMUtil {\n     /**\n      * Create a JDOM element with a long value\n      */\n+\n+\n     public static Element simpleElement(final String name, final long value) {\n         final Element e = new Element(name);\n         e.addContent(Long.toString(value));\n@@ -210,6 +231,8 @@ public class JDOMUtil {\n     /**\n      * Create a JDOM element with a boolean value\n      */\n+\n+\n     public static Element simpleElement(final String name, final boolean value) {\n         final Element e = new Element(name);\n         e.addContent(Boolean.toString(value));\n@@ -219,6 +242,8 @@ public class JDOMUtil {\n     /**\n      * Create a JDOM element with some CDATA\n      */\n+\n+\n     public static Element cdataElement(final String name, final String text) {\n         final Element e = new Element(name);\n         e.addContent(new CDATA(text));\n@@ -228,6 +253,8 @@ public class JDOMUtil {\n     /**\n      * Create a JDOM element, protectign the data with encoding if needed\n      */\n+\n+\n     public static Element protectedElement(final String name, final byte[] data) {\n         return protectedElement(name, new String(data, Charset.forName(\"ISO_8859_1\")));\n     }\n@@ -235,6 +262,8 @@ public class JDOMUtil {\n     /**\n      * Create a JDOM element, protecting the data with encoding if needed\n      */\n+\n+\n     public static Element protectedElement(final String name, final String s) {\n         final Element e = new Element(name);\n         int badCount = 0;\n@@ -261,6 +290,8 @@ public class JDOMUtil {\n     /**\n      * Like Element.getChildTextTrim but for an int\n      */\n+\n+\n     public static int getChildIntValue(final Element el, final String childName) {\n         final String val = el.getChildTextTrim(childName);\n         int x = -1;\n@@ -275,6 +306,8 @@ public class JDOMUtil {\n     /**\n      * Like Element.getChildTextTrim but for an long\n      */\n+\n+\n     public static long getChildLongValue(final Element el, final String childName) {\n         final String val = el.getChildTextTrim(childName);\n         long x = -1L;\n@@ -289,11 +322,14 @@ public class JDOMUtil {\n     /**\n      * Like Element.getChildTextTrim but for a boolean\n      */\n+\n+\n     public static boolean getChildBooleanValue(final Element el, final String childName) {\n         final String val = el.getChildTextTrim(childName);\n         return Boolean.parseBoolean(val);\n     }\n \n+\n     public static void main(final String[] args) {\n         for (int i = 0; args != null && i < args.length; i++) {\n             try {\n@@ -311,5 +347,8 @@ public class JDOMUtil {\n     }\n \n     /** This class is not meant to be instantiated. */\n-    private JDOMUtil() {}\n-}\n+\n+    private JDOMUtil() {\n+\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 47
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "314",
                    "column": "25",
                    "severity": "warning",
                    "message": "'}' at column 25 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "314",
                    "column": "25",
                    "severity": "warning",
                    "message": "'}' at column 25 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "naturalize",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ]
}