{
    "project_name": "codefollower-H2-Research",
    "error_id": "482",
    "information": {
        "errors": [
            {
                "line": "152",
                "column": "66",
                "severity": "warning",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "     * @return the list of fully qualified file names\n     */\n    public static List<String> newDirectoryStream(String path) { //\u6587\u4ef6\u548c\u76ee\u5f55\u540d\u90fd\u4f1a\u5217\u51fa\u6765\n        List<FilePath> list = FilePath.get(path).newDirectoryStream();\n        int len = list.size();\n        List<String> result = new ArrayList<>(len);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/482/FileUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/482/FileUtils.java\nindex fb6632db46b..b99fa9482c5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/482/FileUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/482/FileUtils.java\n@@ -149,8 +149,9 @@ public class FileUtils {\n      * @param path the directory\n      * @return the list of fully qualified file names\n      */\n-    public static List<String> newDirectoryStream(String path) { //\u6587\u4ef6\u548c\u76ee\u5f55\u540d\u90fd\u4f1a\u5217\u51fa\u6765\n-        List<FilePath> list = FilePath.get(path).newDirectoryStream();\n+    public static List<String> newDirectoryStream(String path) {\n+        //\u6587\u4ef6\u548c\u76ee\u5f55\u540d\u90fd\u4f1a\u5217\u51fa\u6765\n+         List<FilePath> list = FilePath.get(path).newDirectoryStream();\n         int len = list.size();\n         List<String> result = new ArrayList<>(len);\n         for (FilePath filePath : list) {\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "153",
                    "column": "64",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/482/FileUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/482/FileUtils.java\nindex fb6632db46b..72609c95f78 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/482/FileUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/482/FileUtils.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.store.fs;\n \n import java.io.EOFException;\n@@ -21,359 +22,359 @@ import java.util.List;\n  */\n public class FileUtils {\n \n-    /**\n-     * Checks if a file exists.\n-     * This method is similar to Java 7 <code>java.nio.file.Path.exists</code>.\n-     *\n-     * @param fileName the file name\n-     * @return true if it exists\n-     */\n-    public static boolean exists(String fileName) {\n-        return FilePath.get(fileName).exists();\n-    }\n+  /**\n+   * Checks if a file exists.\n+   * This method is similar to Java 7 <code>java.nio.file.Path.exists</code>.\n+   *\n+   * @param fileName the file name\n+   * @return true if it exists\n+   */\n+  public static boolean exists(String fileName) {\n+    return FilePath.get(fileName).exists();\n+  }\n \n-    /**\n-     * Create a directory (all required parent directories must already exist).\n-     * This method is similar to Java 7\n-     * <code>java.nio.file.Path.createDirectory</code>.\n-     *\n-     * @param directoryName the directory name\n-     */\n-    public static void createDirectory(String directoryName) {\n-        FilePath.get(directoryName).createDirectory();\n-    }\n+  /**\n+   * Create a directory (all required parent directories must already exist).\n+   * This method is similar to Java 7\n+   * <code>java.nio.file.Path.createDirectory</code>.\n+   *\n+   * @param directoryName the directory name\n+   */\n+  public static void createDirectory(String directoryName) {\n+    FilePath.get(directoryName).createDirectory();\n+  }\n \n-    /**\n-     * Create a new file. This method is similar to Java 7\n-     * <code>java.nio.file.Path.createFile</code>, but returns false instead of\n-     * throwing a exception if the file already existed.\n-     *\n-     * @param fileName the file name\n-     * @return true if creating was successful\n-     */\n-    public static boolean createFile(String fileName) {\n-        return FilePath.get(fileName).createFile();\n-    }\n+  /**\n+   * Create a new file. This method is similar to Java 7\n+   * <code>java.nio.file.Path.createFile</code>, but returns false instead of\n+   * throwing a exception if the file already existed.\n+   *\n+   * @param fileName the file name\n+   * @return true if creating was successful\n+   */\n+  public static boolean createFile(String fileName) {\n+    return FilePath.get(fileName).createFile();\n+  }\n \n-    /**\n-     * Delete a file or directory if it exists.\n-     * Directories may only be deleted if they are empty.\n-     * This method is similar to Java 7\n-     * <code>java.nio.file.Path.deleteIfExists</code>.\n-     *\n-     * @param path the file or directory name\n-     */\n-    public static void delete(String path) {\n-        FilePath.get(path).delete();\n-    }\n+  /**\n+   * Delete a file or directory if it exists.\n+   * Directories may only be deleted if they are empty.\n+   * This method is similar to Java 7\n+   * <code>java.nio.file.Path.deleteIfExists</code>.\n+   *\n+   * @param path the file or directory name\n+   */\n+  public static void delete(String path) {\n+    FilePath.get(path).delete();\n+  }\n \n-    /**\n-     * Get the canonical file or directory name. This method is similar to Java\n-     * 7 <code>java.nio.file.Path.toRealPath</code>.\n-     *\n-     * @param fileName the file name\n-     * @return the normalized file name\n-     */\n-    public static String toRealPath(String fileName) {\n-        return FilePath.get(fileName).toRealPath().toString();\n-    }\n+  /**\n+   * Get the canonical file or directory name. This method is similar to Java\n+   * 7 <code>java.nio.file.Path.toRealPath</code>.\n+   *\n+   * @param fileName the file name\n+   * @return the normalized file name\n+   */\n+  public static String toRealPath(String fileName) {\n+    return FilePath.get(fileName).toRealPath().toString();\n+  }\n \n-    /**\n-     * Get the parent directory of a file or directory. This method returns null\n-     * if there is no parent. This method is similar to Java 7\n-     * <code>java.nio.file.Path.getParent</code>.\n-     *\n-     * @param fileName the file or directory name\n-     * @return the parent directory name\n-     */\n-    public static String getParent(String fileName) {\n-        FilePath p = FilePath.get(fileName).getParent();\n-        return p == null ? null : p.toString();\n-    }\n+  /**\n+   * Get the parent directory of a file or directory. This method returns null\n+   * if there is no parent. This method is similar to Java 7\n+   * <code>java.nio.file.Path.getParent</code>.\n+   *\n+   * @param fileName the file or directory name\n+   * @return the parent directory name\n+   */\n+  public static String getParent(String fileName) {\n+    FilePath p = FilePath.get(fileName).getParent();\n+    return p == null ? null : p.toString();\n+  }\n \n-    /**\n-     * Check if the file name includes a path. This method is similar to Java 7\n-     * <code>java.nio.file.Path.isAbsolute</code>.\n-     *\n-     * @param fileName the file name\n-     * @return if the file name is absolute\n-     */\n-    public static boolean isAbsolute(String fileName) {\n-        return FilePath.get(fileName).isAbsolute()\n-                // Allows Windows to recognize \"/path\" as absolute.\n-                // Makes the same configuration work on all platforms.\n-                || fileName.startsWith(File.pathSeparator)\n-                // Just in case of non-normalized path on Windows\n-                || fileName.startsWith(\"/\");\n-    }\n+  /**\n+   * Check if the file name includes a path. This method is similar to Java 7\n+   * <code>java.nio.file.Path.isAbsolute</code>.\n+   *\n+   * @param fileName the file name\n+   * @return if the file name is absolute\n+   */\n+  public static boolean isAbsolute(String fileName) {\n+    return FilePath.get(fileName).isAbsolute()\n+        // Allows Windows to recognize \"/path\" as absolute.\n+        // Makes the same configuration work on all platforms.\n+        || fileName.startsWith(File.pathSeparator)\n+        // Just in case of non-normalized path on Windows\n+        || fileName.startsWith(\"/\");\n+  }\n \n-    /**\n-     * Rename a file if this is allowed. This method is similar to Java 7\n-     * <code>java.nio.file.Files.move</code>.\n-     *\n-     * @param source the old fully qualified file name\n-     * @param target the new fully qualified file name\n-     */\n-    public static void move(String source, String target) {\n-        FilePath.get(source).moveTo(FilePath.get(target), false);\n-    }\n+  /**\n+   * Rename a file if this is allowed. This method is similar to Java 7\n+   * <code>java.nio.file.Files.move</code>.\n+   *\n+   * @param source the old fully qualified file name\n+   * @param target the new fully qualified file name\n+   */\n+  public static void move(String source, String target) {\n+    FilePath.get(source).moveTo(FilePath.get(target), false);\n+  }\n \n-    /**\n-     * Rename a file if this is allowed, and try to atomically replace an\n-     * existing file. This method is similar to Java 7\n-     * <code>java.nio.file.Files.move</code>.\n-     *\n-     * @param source the old fully qualified file name\n-     * @param target the new fully qualified file name\n-     */\n-    public static void moveAtomicReplace(String source, String target) {\n-        FilePath.get(source).moveTo(FilePath.get(target), true);\n-    }\n+  /**\n+   * Rename a file if this is allowed, and try to atomically replace an\n+   * existing file. This method is similar to Java 7\n+   * <code>java.nio.file.Files.move</code>.\n+   *\n+   * @param source the old fully qualified file name\n+   * @param target the new fully qualified file name\n+   */\n+  public static void moveAtomicReplace(String source, String target) {\n+    FilePath.get(source).moveTo(FilePath.get(target), true);\n+  }\n \n-    /**\n-     * Get the file or directory name (the last element of the path).\n-     * This method is similar to Java 7 <code>java.nio.file.Path.getName</code>.\n-     *\n-     * @param path the directory and file name\n-     * @return just the file name\n-     */\n-    public static String getName(String path) {\n-        return FilePath.get(path).getName();\n-    }\n+  /**\n+   * Get the file or directory name (the last element of the path).\n+   * This method is similar to Java 7 <code>java.nio.file.Path.getName</code>.\n+   *\n+   * @param path the directory and file name\n+   * @return just the file name\n+   */\n+  public static String getName(String path) {\n+    return FilePath.get(path).getName();\n+  }\n \n-    /**\n-     * List the files and directories in the given directory.\n-     * This method is similar to Java 7\n-     * <code>java.nio.file.Path.newDirectoryStream</code>.\n-     *\n-     * @param path the directory\n-     * @return the list of fully qualified file names\n-     */\n-    public static List<String> newDirectoryStream(String path) { //\u6587\u4ef6\u548c\u76ee\u5f55\u540d\u90fd\u4f1a\u5217\u51fa\u6765\n-        List<FilePath> list = FilePath.get(path).newDirectoryStream();\n-        int len = list.size();\n-        List<String> result = new ArrayList<>(len);\n-        for (FilePath filePath : list) {\n-            result.add(filePath.toString());\n-        }\n-        return result;\n+  /**\n+   * List the files and directories in the given directory.\n+   * This method is similar to Java 7\n+   * <code>java.nio.file.Path.newDirectoryStream</code>.\n+   *\n+   * @param path the directory\n+   * @return the list of fully qualified file names\n+   */\n+  public static List<String> newDirectoryStream(String path) { //\u6587\u4ef6\u548c\u76ee\u5f55\u540d\u90fd\u4f1a\u5217\u51fa\u6765\n+    List<FilePath> list = FilePath.get(path).newDirectoryStream();\n+    int len = list.size();\n+    List<String> result = new ArrayList<>(len);\n+    for (FilePath filePath : list) {\n+      result.add(filePath.toString());\n     }\n+    return result;\n+  }\n \n-    /**\n-     * Get the last modified date of a file.\n-     * This method is similar to Java 7\n-     * <code>java.nio.file.attribute.Attributes.\n-     * readBasicFileAttributes(file).lastModified().toMillis()</code>\n-     *\n-     * @param fileName the file name\n-     * @return the last modified date\n-     */\n-    public static long lastModified(String fileName) {\n-        return FilePath.get(fileName).lastModified();\n-    }\n+  /**\n+   * Get the last modified date of a file.\n+   * This method is similar to Java 7\n+   * <code>java.nio.file.attribute.Attributes.\n+   * readBasicFileAttributes(file).lastModified().toMillis()</code>\n+   *\n+   * @param fileName the file name\n+   * @return the last modified date\n+   */\n+  public static long lastModified(String fileName) {\n+    return FilePath.get(fileName).lastModified();\n+  }\n \n-    /**\n-     * Get the size of a file in bytes\n-     * This method is similar to Java 7\n-     * <code>java.nio.file.attribute.Attributes.\n-     * readBasicFileAttributes(file).size()</code>\n-     *\n-     * @param fileName the file name\n-     * @return the size in bytes\n-     */\n-    public static long size(String fileName) {\n-        return FilePath.get(fileName).size();\n-    }\n+  /**\n+   * Get the size of a file in bytes\n+   * This method is similar to Java 7\n+   * <code>java.nio.file.attribute.Attributes.\n+   * readBasicFileAttributes(file).size()</code>\n+   *\n+   * @param fileName the file name\n+   * @return the size in bytes\n+   */\n+  public static long size(String fileName) {\n+    return FilePath.get(fileName).size();\n+  }\n \n-    /**\n-     * Check if it is a file or a directory.\n-     * <code>java.nio.file.attribute.Attributes.\n-     * readBasicFileAttributes(file).isDirectory()</code>\n-     *\n-     * @param fileName the file or directory name\n-     * @return true if it is a directory\n-     */\n-    public static boolean isDirectory(String fileName) {\n-        return FilePath.get(fileName).isDirectory();\n-    }\n+  /**\n+   * Check if it is a file or a directory.\n+   * <code>java.nio.file.attribute.Attributes.\n+   * readBasicFileAttributes(file).isDirectory()</code>\n+   *\n+   * @param fileName the file or directory name\n+   * @return true if it is a directory\n+   */\n+  public static boolean isDirectory(String fileName) {\n+    return FilePath.get(fileName).isDirectory();\n+  }\n \n-    /**\n-     * Open a random access file object.\n-     * This method is similar to Java 7\n-     * <code>java.nio.channels.FileChannel.open</code>.\n-     *\n-     * @param fileName the file name\n-     * @param mode the access mode. Supported are r, rw, rws, rwd\n-     * @return the file object\n-     */\n-    public static FileChannel open(String fileName, String mode)\n-            throws IOException {\n-        return FilePath.get(fileName).open(mode);\n-    }\n+  /**\n+   * Open a random access file object.\n+   * This method is similar to Java 7\n+   * <code>java.nio.channels.FileChannel.open</code>.\n+   *\n+   * @param fileName the file name\n+   * @param mode     the access mode. Supported are r, rw, rws, rwd\n+   * @return the file object\n+   */\n+  public static FileChannel open(String fileName, String mode)\n+      throws IOException {\n+    return FilePath.get(fileName).open(mode);\n+  }\n \n-    /**\n-     * Create an input stream to read from the file.\n-     * This method is similar to Java 7\n-     * <code>java.nio.file.Path.newInputStream</code>.\n-     *\n-     * @param fileName the file name\n-     * @return the input stream\n-     */\n-    public static InputStream newInputStream(String fileName)\n-            throws IOException {\n-        return FilePath.get(fileName).newInputStream();\n-    }\n+  /**\n+   * Create an input stream to read from the file.\n+   * This method is similar to Java 7\n+   * <code>java.nio.file.Path.newInputStream</code>.\n+   *\n+   * @param fileName the file name\n+   * @return the input stream\n+   */\n+  public static InputStream newInputStream(String fileName)\n+      throws IOException {\n+    return FilePath.get(fileName).newInputStream();\n+  }\n \n-    /**\n-     * Create an output stream to write into the file.\n-     * This method is similar to Java 7\n-     * <code>java.nio.file.Path.newOutputStream</code>.\n-     *\n-     * @param fileName the file name\n-     * @param append if true, the file will grow, if false, the file will be\n-     *            truncated first\n-     * @return the output stream\n-     */\n-    public static OutputStream newOutputStream(String fileName, boolean append)\n-            throws IOException {\n-        return FilePath.get(fileName).newOutputStream(append);\n-    }\n+  /**\n+   * Create an output stream to write into the file.\n+   * This method is similar to Java 7\n+   * <code>java.nio.file.Path.newOutputStream</code>.\n+   *\n+   * @param fileName the file name\n+   * @param append   if true, the file will grow, if false, the file will be\n+   *                 truncated first\n+   * @return the output stream\n+   */\n+  public static OutputStream newOutputStream(String fileName, boolean append)\n+      throws IOException {\n+    return FilePath.get(fileName).newOutputStream(append);\n+  }\n \n-    /**\n-     * Check if the file is writable.\n-     * This method is similar to Java 7\n-     * <code>java.nio.file.Path.checkAccess(AccessMode.WRITE)</code>\n-     *\n-     * @param fileName the file name\n-     * @return if the file is writable\n-     */\n-    public static boolean canWrite(String fileName) {\n-        return FilePath.get(fileName).canWrite();\n-    }\n+  /**\n+   * Check if the file is writable.\n+   * This method is similar to Java 7\n+   * <code>java.nio.file.Path.checkAccess(AccessMode.WRITE)</code>\n+   *\n+   * @param fileName the file name\n+   * @return if the file is writable\n+   */\n+  public static boolean canWrite(String fileName) {\n+    return FilePath.get(fileName).canWrite();\n+  }\n \n-    // special methods =======================================\n+  // special methods =======================================\n \n-    /**\n-     * Disable the ability to write. The file can still be deleted afterwards.\n-     *\n-     * @param fileName the file name\n-     * @return true if the call was successful\n-     */\n-    public static boolean setReadOnly(String fileName) {\n-        return FilePath.get(fileName).setReadOnly();\n-    }\n+  /**\n+   * Disable the ability to write. The file can still be deleted afterwards.\n+   *\n+   * @param fileName the file name\n+   * @return true if the call was successful\n+   */\n+  public static boolean setReadOnly(String fileName) {\n+    return FilePath.get(fileName).setReadOnly();\n+  }\n \n-    /**\n-     * Get the unwrapped file name (without wrapper prefixes if wrapping /\n-     * delegating file systems are used).\n-     *\n-     * @param fileName the file name\n-     * @return the unwrapped\n-     */\n-    public static String unwrap(String fileName) {\n-        return FilePath.get(fileName).unwrap().toString();\n-    }\n+  /**\n+   * Get the unwrapped file name (without wrapper prefixes if wrapping /\n+   * delegating file systems are used).\n+   *\n+   * @param fileName the file name\n+   * @return the unwrapped\n+   */\n+  public static String unwrap(String fileName) {\n+    return FilePath.get(fileName).unwrap().toString();\n+  }\n \n-    // utility methods =======================================\n-\n-    /**\n-     * Delete a directory or file and all subdirectories and files.\n-     *\n-     * @param path the path\n-     * @param tryOnly whether errors should  be ignored\n-     */\n-    public static void deleteRecursive(String path, boolean tryOnly) {\n-        if (exists(path)) {\n-            if (isDirectory(path)) {\n-                for (String s : newDirectoryStream(path)) {\n-                    deleteRecursive(s, tryOnly);\n-                }\n-            }\n-            if (tryOnly) {\n-                tryDelete(path);\n-            } else {\n-                delete(path);\n-            }\n-        }\n-    }\n+  // utility methods =======================================\n \n-    /**\n-     * Create the directory and all required parent directories.\n-     *\n-     * @param dir the directory name\n-     */\n-    public static void createDirectories(String dir) {\n-        if (dir != null) {\n-            if (exists(dir)) {\n-                if (!isDirectory(dir)) {\n-                    // this will fail\n-                    createDirectory(dir);\n-                }\n-            } else {\n-                String parent = getParent(dir);\n-                createDirectories(parent);\n-                createDirectory(dir);\n-            }\n+  /**\n+   * Delete a directory or file and all subdirectories and files.\n+   *\n+   * @param path    the path\n+   * @param tryOnly whether errors should  be ignored\n+   */\n+  public static void deleteRecursive(String path, boolean tryOnly) {\n+    if (exists(path)) {\n+      if (isDirectory(path)) {\n+        for (String s : newDirectoryStream(path)) {\n+          deleteRecursive(s, tryOnly);\n         }\n+      }\n+      if (tryOnly) {\n+        tryDelete(path);\n+      } else {\n+        delete(path);\n+      }\n     }\n+  }\n \n-    /**\n-     * Try to delete a file or directory (ignoring errors).\n-     *\n-     * @param path the file or directory name\n-     * @return true if it worked\n-     */\n-    public static boolean tryDelete(String path) {\n-        try {\n-            FilePath.get(path).delete();\n-            return true;\n-        } catch (Exception e) {\n-            return false;\n+  /**\n+   * Create the directory and all required parent directories.\n+   *\n+   * @param dir the directory name\n+   */\n+  public static void createDirectories(String dir) {\n+    if (dir != null) {\n+      if (exists(dir)) {\n+        if (!isDirectory(dir)) {\n+          // this will fail\n+          createDirectory(dir);\n         }\n+      } else {\n+        String parent = getParent(dir);\n+        createDirectories(parent);\n+        createDirectory(dir);\n+      }\n     }\n+  }\n \n-    /**\n-     * Create a new temporary file.\n-     *\n-     * @param prefix the prefix of the file name (including directory name if\n-     *            required)\n-     * @param suffix the suffix\n-     * @param inTempDir if the file should be stored in the temporary directory\n-     * @return the name of the created file\n-     */\n-    public static String createTempFile(String prefix, String suffix,\n-            boolean inTempDir) throws IOException {\n-        return FilePath.get(prefix).createTempFile(suffix, inTempDir).toString();\n+  /**\n+   * Try to delete a file or directory (ignoring errors).\n+   *\n+   * @param path the file or directory name\n+   * @return true if it worked\n+   */\n+  public static boolean tryDelete(String path) {\n+    try {\n+      FilePath.get(path).delete();\n+      return true;\n+    } catch (Exception e) {\n+      return false;\n     }\n+  }\n \n-    /**\n-     * Fully read from the file. This will read all remaining bytes,\n-     * or throw an EOFException if not successful.\n-     *\n-     * @param channel the file channel\n-     * @param dst the byte buffer\n-     */\n-    public static void readFully(FileChannel channel, ByteBuffer dst)\n-            throws IOException {\n-        do {\n-            int r = channel.read(dst);\n-            if (r < 0) {\n-                throw new EOFException();\n-            }\n-        } while (dst.remaining() > 0);\n-    }\n+  /**\n+   * Create a new temporary file.\n+   *\n+   * @param prefix    the prefix of the file name (including directory name if\n+   *                  required)\n+   * @param suffix    the suffix\n+   * @param inTempDir if the file should be stored in the temporary directory\n+   * @return the name of the created file\n+   */\n+  public static String createTempFile(String prefix, String suffix,\n+                                      boolean inTempDir) throws IOException {\n+    return FilePath.get(prefix).createTempFile(suffix, inTempDir).toString();\n+  }\n \n-    /**\n-     * Fully write to the file. This will write all remaining bytes.\n-     *\n-     * @param channel the file channel\n-     * @param src the byte buffer\n-     */\n-    public static void writeFully(FileChannel channel, ByteBuffer src)\n-            throws IOException {\n-        do {\n-            channel.write(src);\n-        } while (src.remaining() > 0);\n-    }\n+  /**\n+   * Fully read from the file. This will read all remaining bytes,\n+   * or throw an EOFException if not successful.\n+   *\n+   * @param channel the file channel\n+   * @param dst     the byte buffer\n+   */\n+  public static void readFully(FileChannel channel, ByteBuffer dst)\n+      throws IOException {\n+    do {\n+      int r = channel.read(dst);\n+      if (r < 0) {\n+        throw new EOFException();\n+      }\n+    } while (dst.remaining() > 0);\n+  }\n+\n+  /**\n+   * Fully write to the file. This will write all remaining bytes.\n+   *\n+   * @param channel the file channel\n+   * @param src     the byte buffer\n+   */\n+  public static void writeFully(FileChannel channel, ByteBuffer src)\n+      throws IOException {\n+    do {\n+      channel.write(src);\n+    } while (src.remaining() > 0);\n+  }\n \n }\n",
            "diff_size": 356
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/482/FileUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/482/FileUtils.java\nindex fb6632db46b..b99fa9482c5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/482/FileUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/482/FileUtils.java\n@@ -149,8 +149,9 @@ public class FileUtils {\n      * @param path the directory\n      * @return the list of fully qualified file names\n      */\n-    public static List<String> newDirectoryStream(String path) { //\u6587\u4ef6\u548c\u76ee\u5f55\u540d\u90fd\u4f1a\u5217\u51fa\u6765\n-        List<FilePath> list = FilePath.get(path).newDirectoryStream();\n+    public static List<String> newDirectoryStream(String path) {\n+        //\u6587\u4ef6\u548c\u76ee\u5f55\u540d\u90fd\u4f1a\u5217\u51fa\u6765\n+         List<FilePath> list = FilePath.get(path).newDirectoryStream();\n         int len = list.size();\n         List<String> result = new ArrayList<>(len);\n         for (FilePath filePath : list) {\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/482/FileUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/482/FileUtils.java\nindex fb6632db46b..2a091e74ee1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/482/FileUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/482/FileUtils.java\n@@ -149,8 +149,9 @@ public class FileUtils {\n      * @param path the directory\n      * @return the list of fully qualified file names\n      */\n-    public static List<String> newDirectoryStream(String path) { //\u6587\u4ef6\u548c\u76ee\u5f55\u540d\u90fd\u4f1a\u5217\u51fa\u6765\n-        List<FilePath> list = FilePath.get(path).newDirectoryStream();\n+    public static List<String> newDirectoryStream(String path) {\n+        //\u6587\u4ef6\u548c\u76ee\u5f55\u540d\u90fd\u4f1a\u5217\u51fa\u6765\n+    List<FilePath> list = FilePath.get(path).newDirectoryStream();\n         int len = list.size();\n         List<String> result = new ArrayList<>(len);\n         for (FilePath filePath : list) {\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}