{
    "project_name": "junkdog-artemis-odb",
    "error_id": "110",
    "information": {
        "errors": [
            {
                "line": "38",
                "severity": "error",
                "message": "Line is longer than 105 characters (found 109).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                .setUrls(ClasspathHelper.forClassLoader(classLoader))\n                .setScanners(new SubTypesScanner(true))\n                .setExecutorService(Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors()))\n        );\n        return reflections.getSubTypesOf(Component.class);\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/110/ReflectionComponentCollectStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/styler/110/ReflectionComponentCollectStrategy.java\nindex d0dd828f705..8e65c7df476 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/110/ReflectionComponentCollectStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/styler/110/ReflectionComponentCollectStrategy.java\n@@ -34,8 +34,9 @@ public class ReflectionComponentCollectStrategy {\n         // reflect over components.\n         Reflections reflections = new Reflections(new ConfigurationBuilder()\n                 .setUrls(ClasspathHelper.forClassLoader(classLoader))\n-                .setScanners(new SubTypesScanner(true))\n-                .setExecutorService(Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors()))\n+                .setScanners(new SubTypesScanner(true)).setExecutorService(Executors.newFixedThreadPool(\n+\n+                Runtime.getRuntime().availableProcessors()))\n         );\n         return reflections.getSubTypesOf(Component.class);\n     }\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/110/ReflectionComponentCollectStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/intellij/110/ReflectionComponentCollectStrategy.java\nindex d0dd828f705..6764981dee4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/110/ReflectionComponentCollectStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/intellij/110/ReflectionComponentCollectStrategy.java\n@@ -1,6 +1,7 @@\n package com.artemis.generator.collect;\n \n import com.artemis.Component;\n+\n import org.reflections.Reflections;\n import org.reflections.scanners.SubTypesScanner;\n import org.reflections.util.ClasspathHelper;\n@@ -21,6 +22,7 @@ public class ReflectionComponentCollectStrategy {\n \n     /**\n      * Collect all components on a classpath.\n+     *\n      * @param classLoader context.\n      * @return Set of all components on classloader.\n      */\n@@ -35,13 +37,15 @@ public class ReflectionComponentCollectStrategy {\n         Reflections reflections = new Reflections(new ConfigurationBuilder()\n                 .setUrls(ClasspathHelper.forClassLoader(classLoader))\n                 .setScanners(new SubTypesScanner(true))\n-                .setExecutorService(Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors()))\n+                .setExecutorService(\n+                        Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors()))\n         );\n         return reflections.getSubTypesOf(Component.class);\n     }\n \n     /**\n      * Collect all components within a set of URLs\n+     *\n      * @param urls context\n      * @return Set of all components on classloader.\n      */\n@@ -49,7 +53,9 @@ public class ReflectionComponentCollectStrategy {\n         return allComponents(asClassloader(urls));\n     }\n \n-    /** Create classloader for URLS */\n+    /**\n+     * Create classloader for URLS\n+     */\n     private ClassLoader asClassloader(Set<URL> urls) {\n         return URLClassLoader.newInstance(\n                 urls.toArray(new URL[0]),\n",
            "diff_size": 8
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "33",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/110/ReflectionComponentCollectStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/naturalize/110/ReflectionComponentCollectStrategy.java\nindex d0dd828f705..8c401bf29b3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/110/ReflectionComponentCollectStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/naturalize/110/ReflectionComponentCollectStrategy.java\n@@ -18,25 +18,21 @@ import java.util.concurrent.Executors;\n  * @author Daan van Yperen\n  */\n public class ReflectionComponentCollectStrategy {\n-\n-    /**\n+\t/**\n      * Collect all components on a classpath.\n      * @param classLoader context.\n      * @return Set of all components on classloader.\n      */\n     public Set<Class<? extends Component>> allComponents(ClassLoader classLoader) {\n-\n-        // Set the context ClassLoader for this Thread.\n+\t// Set the context ClassLoader for this Thread.\n         // if we don't do this Reflections gets confused and fetches only a subset\n         // of components. probably because duplicate entries of Component.class?\n         Thread.currentThread().setContextClassLoader(classLoader);\n \n         // reflect over components.\n-        Reflections reflections = new Reflections(new ConfigurationBuilder()\n-                .setUrls(ClasspathHelper.forClassLoader(classLoader))\n+        Reflections reflections = new Reflections(new ConfigurationBuilder().setUrls(ClasspathHelper.forClassLoader(classLoader))\n                 .setScanners(new SubTypesScanner(true))\n-                .setExecutorService(Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors()))\n-        );\n+                .setExecutorService(Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors())));\n         return reflections.getSubTypesOf(Component.class);\n     }\n \n@@ -46,14 +42,12 @@ public class ReflectionComponentCollectStrategy {\n      * @return Set of all components on classloader.\n      */\n     public Collection<Class<? extends Component>> allComponents(Set<URL> urls) {\n-        return allComponents(asClassloader(urls));\n+\treturn allComponents(asClassloader(urls));\n     }\n \n     /** Create classloader for URLS */\n     private ClassLoader asClassloader(Set<URL> urls) {\n-        return URLClassLoader.newInstance(\n-                urls.toArray(new URL[0]),\n+\treturn URLClassLoader.newInstance(urls.toArray(new URL[0]),\n                 Thread.currentThread().getContextClassLoader());\n-    }\n-\n-}\n+\t}\n+\t}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/110/ReflectionComponentCollectStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/codebuff/110/ReflectionComponentCollectStrategy.java\nindex d0dd828f705..c3032f488dc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/110/ReflectionComponentCollectStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/codebuff/110/ReflectionComponentCollectStrategy.java\n@@ -5,7 +5,6 @@ import org.reflections.Reflections;\n import org.reflections.scanners.SubTypesScanner;\n import org.reflections.util.ClasspathHelper;\n import org.reflections.util.ConfigurationBuilder;\n-\n import java.net.URL;\n import java.net.URLClassLoader;\n import java.util.Collection;\n@@ -17,6 +16,7 @@ import java.util.concurrent.Executors;\n  *\n  * @author Daan van Yperen\n  */\n+\n public class ReflectionComponentCollectStrategy {\n \n     /**\n@@ -24,36 +24,36 @@ public class ReflectionComponentCollectStrategy {\n      * @param classLoader context.\n      * @return Set of all components on classloader.\n      */\n-    public Set<Class<? extends Component>> allComponents(ClassLoader classLoader) {\n+ public Set<Class<? extends Component>> allComponents(ClassLoader classLoader) {\n \n         // Set the context ClassLoader for this Thread.\n         // if we don't do this Reflections gets confused and fetches only a subset\n         // of components. probably because duplicate entries of Component.class?\n-        Thread.currentThread().setContextClassLoader(classLoader);\n+  Thread.currentThread().setContextClassLoader(classLoader);\n \n         // reflect over components.\n-        Reflections reflections = new Reflections(new ConfigurationBuilder()\n-                .setUrls(ClasspathHelper.forClassLoader(classLoader))\n-                .setScanners(new SubTypesScanner(true))\n-                .setExecutorService(Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors()))\n-        );\n-        return reflections.getSubTypesOf(Component.class);\n-    }\n+\n+  Reflections reflections = new Reflections(new ConfigurationBuilder().setUrls(ClasspathHelper.forClassLoader(classLoader))\n+                                                                      .setScanners(new SubTypesScanner(true))\n+                                                                      .setExecutorService(Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors())));\n+  return reflections.getSubTypesOf(Component.class);\n+ }\n \n     /**\n      * Collect all components within a set of URLs\n      * @param urls context\n      * @return Set of all components on classloader.\n      */\n-    public Collection<Class<? extends Component>> allComponents(Set<URL> urls) {\n-        return allComponents(asClassloader(urls));\n-    }\n+\n+\n+ public Collection<Class<? extends Component>> allComponents(Set<URL> urls) {\n+  return allComponents(asClassloader(urls));\n+ }\n \n     /** Create classloader for URLS */\n-    private ClassLoader asClassloader(Set<URL> urls) {\n-        return URLClassLoader.newInstance(\n-                urls.toArray(new URL[0]),\n-                Thread.currentThread().getContextClassLoader());\n-    }\n \n-}\n+ private ClassLoader asClassloader(Set<URL> urls) {\n+  return URLClassLoader.newInstance(urls.toArray(new URL[0]),\n+   Thread.currentThread().getContextClassLoader());\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 26
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/110/ReflectionComponentCollectStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/styler_random/110/ReflectionComponentCollectStrategy.java\nindex d0dd828f705..9746fe69a95 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/110/ReflectionComponentCollectStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/styler_random/110/ReflectionComponentCollectStrategy.java\n@@ -36,7 +36,7 @@ public class ReflectionComponentCollectStrategy {\n                 .setUrls(ClasspathHelper.forClassLoader(classLoader))\n                 .setScanners(new SubTypesScanner(true))\n                 .setExecutorService(Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors()))\n-        );\n+                );\n         return reflections.getSubTypesOf(Component.class);\n     }\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/110/ReflectionComponentCollectStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/styler_three_grams/110/ReflectionComponentCollectStrategy.java\nindex d0dd828f705..8e65c7df476 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/110/ReflectionComponentCollectStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/styler_three_grams/110/ReflectionComponentCollectStrategy.java\n@@ -34,8 +34,9 @@ public class ReflectionComponentCollectStrategy {\n         // reflect over components.\n         Reflections reflections = new Reflections(new ConfigurationBuilder()\n                 .setUrls(ClasspathHelper.forClassLoader(classLoader))\n-                .setScanners(new SubTypesScanner(true))\n-                .setExecutorService(Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors()))\n+                .setScanners(new SubTypesScanner(true)).setExecutorService(Executors.newFixedThreadPool(\n+\n+                Runtime.getRuntime().availableProcessors()))\n         );\n         return reflections.getSubTypesOf(Component.class);\n     }\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}