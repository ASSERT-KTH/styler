{
    "project_name": "O2-Czech-Republic-proxima-platform",
    "error_id": "2",
    "information": {
        "errors": [
            {
                "line": "32",
                "severity": "error",
                "message": "Line is longer than 90 characters (found 92).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "public class OperatorSpecificTransformationTest {\n\n  public static class Transformation implements ContextualTransformation<TestDataOperator> {\n\n    @Override\n    public void setup(Repository repo, TestDataOperator op, Map<String, Object> cfg) {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "32",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 92).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/2/OperatorSpecificTransformationTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/intellij/2/OperatorSpecificTransformationTest.java\nindex 0df7f2016d0..3c5e4a2a5a2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/2/OperatorSpecificTransformationTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/intellij/2/OperatorSpecificTransformationTest.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright 2017-2021 O2 Czech Republic, a.s.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package cz.o2.proxima.transform;\n \n import static org.junit.Assert.assertNotNull;\n@@ -29,7 +30,8 @@ import org.junit.Test;\n \n public class OperatorSpecificTransformationTest {\n \n-  public static class Transformation implements ContextualTransformation<TestDataOperator> {\n+  public static class Transformation\n+      implements ContextualTransformation<TestDataOperator> {\n \n     @Override\n     public void setup(Repository repo, TestDataOperator op, Map<String, Object> cfg) {\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "32",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 92).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/2/OperatorSpecificTransformationTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/naturalize/2/OperatorSpecificTransformationTest.java\nindex 0df7f2016d0..131ca72c4dc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/2/OperatorSpecificTransformationTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/naturalize/2/OperatorSpecificTransformationTest.java\n@@ -43,7 +43,8 @@ public class OperatorSpecificTransformationTest {\n   }\n \n   public static class Proxy implements ContextualProxyTransform<TestDataOperator> {\n-    @Override\n+\n+  @Override\n     public void setup(EntityDescriptor entity, TestDataOperator op) {\n       op.setup();\n     }\n@@ -56,13 +57,13 @@ public class OperatorSpecificTransformationTest {\n \n   @Test\n   public void testRepositoryCreate() {\n-    Repository repo =\n-        Repository.of(\n+    Repository repo = Repository.of(\n             ConfigFactory.load(\"test-operator-transforms.conf\")\n                 .resolve()\n                 .withFallback(ConfigFactory.load(\"test-reference.conf\").resolve()));\n-    assertTrue(repo.getTransformations().containsKey(\"operator-specific\"));\n+\n+assertTrue(repo.getTransformations().containsKey(\"operator-specific\"));\n     assertTrue(repo.getOrCreateOperator(TestDataOperator.class).isSetupCalled());\n     assertTrue(repo.getEntity(\"gateway\").findAttribute(\"proxied\").isPresent());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "32",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 92).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 97).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 155).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/2/OperatorSpecificTransformationTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/codebuff/2/OperatorSpecificTransformationTest.java\nindex 0df7f2016d0..88a549665be 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/2/OperatorSpecificTransformationTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/codebuff/2/OperatorSpecificTransformationTest.java\n@@ -17,7 +17,6 @@ package cz.o2.proxima.transform;\n \n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n-\n import com.typesafe.config.ConfigFactory;\n import cz.o2.proxima.repository.DataOperatorFactory;\n import cz.o2.proxima.repository.EntityDescriptor;\n@@ -27,6 +26,7 @@ import cz.o2.proxima.repository.TestDataOperatorFactory.TestDataOperator;\n import java.util.Map;\n import org.junit.Test;\n \n+\n public class OperatorSpecificTransformationTest {\n \n   public static class Transformation implements ContextualTransformation<TestDataOperator> {\n@@ -43,6 +43,7 @@ public class OperatorSpecificTransformationTest {\n   }\n \n   public static class Proxy implements ContextualProxyTransform<TestDataOperator> {\n+\n     @Override\n     public void setup(EntityDescriptor entity, TestDataOperator op) {\n       op.setup();\n@@ -56,13 +57,11 @@ public class OperatorSpecificTransformationTest {\n \n   @Test\n   public void testRepositoryCreate() {\n-    Repository repo =\n-        Repository.of(\n-            ConfigFactory.load(\"test-operator-transforms.conf\")\n-                .resolve()\n-                .withFallback(ConfigFactory.load(\"test-reference.conf\").resolve()));\n+    Repository repo = Repository.of(ConfigFactory.load(\"test-operator-transforms.conf\").resolve()\n+                                                                                       .withFallback(ConfigFactory.load(\"test-reference.conf\").resolve()));\n     assertTrue(repo.getTransformations().containsKey(\"operator-specific\"));\n     assertTrue(repo.getOrCreateOperator(TestDataOperator.class).isSetupCalled());\n-    assertTrue(repo.getEntity(\"gateway\").findAttribute(\"proxied\").isPresent());\n+    assertTrue(repo.getEntity(\"gateway\").findAttribute(\"proxied\")\n+                                        .isPresent());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "32",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 92).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "32",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "32",
                    "column": "73",
                    "severity": "error",
                    "message": "GenericWhitespace '<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "32",
                    "column": "92",
                    "severity": "error",
                    "message": "GenericWhitespace '>' should followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "32",
                    "column": "92",
                    "severity": "error",
                    "message": "WhitespaceAround: '{' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/2/OperatorSpecificTransformationTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler_three_grams/2/OperatorSpecificTransformationTest.java\nindex 0df7f2016d0..cb753e421e1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/2/OperatorSpecificTransformationTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler_three_grams/2/OperatorSpecificTransformationTest.java\n@@ -29,9 +29,7 @@ import org.junit.Test;\n \n public class OperatorSpecificTransformationTest {\n \n-  public static class Transformation implements ContextualTransformation<TestDataOperator> {\n-\n-    @Override\n+  public static class Transformation implements ContextualTransformation <TestDataOperator>{ @Override\n     public void setup(Repository repo, TestDataOperator op, Map<String, Object> cfg) {\n       assertNotNull(op);\n     }\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}