{
    "project_name": "DaGeRe-peass",
    "error_id": "99",
    "information": {
        "errors": [
            {
                "line": "58",
                "column": "172",
                "severity": "error",
                "message": "'{' is not preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "   }\n   \n   public Set<TestCase> getTests(final VersionIterator iterator, final String url, final String version, final MeasurementConfiguration measurementConfig) throws Exception{\n      final Dependencies dependencies = getDependencies(iterator, url);\n      \n      final Set<TestCase> tests;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/99/ContinuousDependencyReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler/99/ContinuousDependencyReader.java\nindex c2484915526..788b56a58c7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/99/ContinuousDependencyReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler/99/ContinuousDependencyReader.java\n@@ -55,8 +55,8 @@ public class ContinuousDependencyReader {\n       this.env = env;\n    }\n    \n-   public Set<TestCase> getTests(final VersionIterator iterator, final String url, final String version, final MeasurementConfiguration measurementConfig) throws Exception{\n-      final Dependencies dependencies = getDependencies(iterator, url);\n+   public Set<TestCase> getTests(final VersionIterator iterator, final String url, final String version, final MeasurementConfiguration measurementConfig) throws Exception {\n+\t\t\t\tfinal Dependencies dependencies = getDependencies(iterator, url);\n       \n       final Set<TestCase> tests;\n       if (dependencies.getVersions().size() > 0) {\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/99/ContinuousDependencyReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/intellij/99/ContinuousDependencyReader.java\nindex c2484915526..2b5bafbd96a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/99/ContinuousDependencyReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/intellij/99/ContinuousDependencyReader.java\n@@ -38,153 +38,153 @@ import de.dagere.peass.vcs.VersionIteratorGit;\n \n public class ContinuousDependencyReader {\n \n-   private static final Logger LOG = LogManager.getLogger(ContinuousDependencyReader.class);\n-\n-   private final DependencyConfig dependencyConfig;\n-   private final ExecutionConfig executionConfig;\n-   private final PeASSFolders folders;\n-   private final ResultsFolders resultsFolders;\n-   private final EnvironmentVariables env;\n-\n-   public ContinuousDependencyReader(final DependencyConfig dependencyConfig, final ExecutionConfig executionConfig, final PeASSFolders folders, final ResultsFolders resultsFolders,\n-         final EnvironmentVariables env) {\n-      this.dependencyConfig = dependencyConfig;\n-      this.executionConfig = executionConfig;\n-      this.folders = folders;\n-      this.resultsFolders = resultsFolders;\n-      this.env = env;\n-   }\n-   \n-   public Set<TestCase> getTests(final VersionIterator iterator, final String url, final String version, final MeasurementConfiguration measurementConfig) throws Exception{\n-      final Dependencies dependencies = getDependencies(iterator, url);\n-      \n-      final Set<TestCase> tests;\n-      if (dependencies.getVersions().size() > 0) {\n-         if (dependencyConfig.isGenerateViews()) {\n-            ExecutionData executionData = Constants.OBJECTMAPPER.readValue(resultsFolders.getExecutionFile(), ExecutionData.class);\n-            tests = executionData.getVersions().get(version).getTests();\n-         } else {\n-            Version versionDependencies = dependencies.getVersions().get(dependencies.getNewestVersion());\n-            tests = versionDependencies.getTests().getTests();\n-         }\n-\n-         // final Set<TestCase> tests = selectIncludedTests(dependencies);\n-         NonIncludedTestRemover.removeNotIncluded(tests, measurementConfig.getExecutionConfig());\n+  private static final Logger LOG = LogManager.getLogger(ContinuousDependencyReader.class);\n+\n+  private final DependencyConfig dependencyConfig;\n+  private final ExecutionConfig executionConfig;\n+  private final PeASSFolders folders;\n+  private final ResultsFolders resultsFolders;\n+  private final EnvironmentVariables env;\n+\n+  public ContinuousDependencyReader(final DependencyConfig dependencyConfig, final ExecutionConfig executionConfig, final PeASSFolders folders, final ResultsFolders resultsFolders,\n+                                    final EnvironmentVariables env) {\n+    this.dependencyConfig = dependencyConfig;\n+    this.executionConfig = executionConfig;\n+    this.folders = folders;\n+    this.resultsFolders = resultsFolders;\n+    this.env = env;\n+  }\n+\n+  public Set<TestCase> getTests(final VersionIterator iterator, final String url, final String version, final MeasurementConfiguration measurementConfig) throws Exception {\n+    final Dependencies dependencies = getDependencies(iterator, url);\n+\n+    final Set<TestCase> tests;\n+    if (dependencies.getVersions().size() > 0) {\n+      if (dependencyConfig.isGenerateViews()) {\n+        ExecutionData executionData = Constants.OBJECTMAPPER.readValue(resultsFolders.getExecutionFile(), ExecutionData.class);\n+        tests = executionData.getVersions().get(version).getTests();\n       } else {\n-         tests = new HashSet<>();\n-         LOG.info(\"No test executed - version did not contain changed tests.\");\n+        Version versionDependencies = dependencies.getVersions().get(dependencies.getNewestVersion());\n+        tests = versionDependencies.getTests().getTests();\n       }\n-      return tests;\n-   }\n \n-   Dependencies getDependencies(final VersionIterator iterator, final String url)\n-         throws Exception {\n-      Dependencies dependencies;\n+      // final Set<TestCase> tests = selectIncludedTests(dependencies);\n+      NonIncludedTestRemover.removeNotIncluded(tests, measurementConfig.getExecutionConfig());\n+    } else {\n+      tests = new HashSet<>();\n+      LOG.info(\"No test executed - version did not contain changed tests.\");\n+    }\n+    return tests;\n+  }\n+\n+  Dependencies getDependencies(final VersionIterator iterator, final String url)\n+      throws Exception {\n+    Dependencies dependencies;\n+\n+    final VersionKeeper noChanges = new VersionKeeper(new File(resultsFolders.getDependencyFile().getParentFile(), \"nonChanges_\" + folders.getProjectName() + \".json\"));\n+\n+    if (!resultsFolders.getDependencyFile().exists()) {\n+      dependencies = fullyLoadDependencies(url, iterator, noChanges);\n+    } else {\n+      dependencies = Constants.OBJECTMAPPER.readValue(resultsFolders.getDependencyFile(), Dependencies.class);\n+      VersionComparator.setDependencies(dependencies);\n \n-      final VersionKeeper noChanges = new VersionKeeper(new File(resultsFolders.getDependencyFile().getParentFile(), \"nonChanges_\" + folders.getProjectName() + \".json\"));\n+      partiallyLoadDependencies(dependencies);\n+    }\n+    VersionComparator.setDependencies(dependencies);\n+\n+    return dependencies;\n+  }\n+\n+  public VersionIterator getIterator(final String lastVersionName) {\n+    String versionName = GitUtils.getName(executionConfig.getVersion() != null ? executionConfig.getVersion() : \"HEAD\", folders.getProjectFolder());\n+    if (versionName.equals(lastVersionName)) {\n+      return null;\n+    }\n+    GitCommit currentCommit = new GitCommit(versionName, \"\", \"\", \"\");\n+    GitCommit lastAnalyzedCommit = new GitCommit(executionConfig.getVersionOld() != null ? executionConfig.getVersionOld() : lastVersionName, \"\", \"\", \"\");\n+\n+    List<GitCommit> commits = new LinkedList<>();\n+    commits.add(lastAnalyzedCommit);\n+    commits.add(currentCommit);\n+    LOG.info(\"Analyzing {} - {}\", lastAnalyzedCommit, currentCommit);\n+    VersionIteratorGit newIterator = new VersionIteratorGit(folders.getProjectFolder(), commits, lastAnalyzedCommit);\n+    return newIterator;\n+  }\n+\n+  private void partiallyLoadDependencies(final Dependencies dependencies) throws FileNotFoundException, Exception {\n+    final String lastVersionName = dependencies.getNewestVersion();\n+\n+    VersionIterator newIterator = getIterator(lastVersionName);\n+    if (newIterator != null) {\n+      executePartialRTS(dependencies, newIterator);\n+    }\n+  }\n+\n+  private void executePartialRTS(final Dependencies dependencies, final VersionIterator newIterator) throws FileNotFoundException {\n+    if (executionConfig.isRedirectSubprocessOutputToFile()) {\n+      File logFile = new File(getDependencyreadingFolder(), newIterator.getTag() + \"_\" + newIterator.getPredecessor() + \".txt\");\n+      LOG.info(\"Executing regression test selection update - Log goes to {}\", logFile.getAbsolutePath());\n+      try (LogRedirector director = new LogRedirector(logFile)) {\n+        doPartialRCS(dependencies, newIterator);\n+      }\n+    } else {\n+      doPartialRCS(dependencies, newIterator);\n+    }\n \n-      if (!resultsFolders.getDependencyFile().exists()) {\n-         dependencies = fullyLoadDependencies(url, iterator, noChanges);\n-      } else {\n-         dependencies = Constants.OBJECTMAPPER.readValue(resultsFolders.getDependencyFile(), Dependencies.class);\n-         VersionComparator.setDependencies(dependencies);\n+  }\n \n-         partiallyLoadDependencies(dependencies);\n-      }\n-      VersionComparator.setDependencies(dependencies);\n+  private void doPartialRCS(final Dependencies dependencies, final VersionIterator newIterator) {\n+    DependencyReader reader = new DependencyReader(dependencyConfig, folders, resultsFolders, dependencies.getUrl(), newIterator,\n+        new VersionKeeper(new File(resultsFolders.getDependencyFile().getParentFile(), \"nochanges.json\")), executionConfig, env);\n+    newIterator.goTo0thCommit();\n \n-      return dependencies;\n-   }\n+    reader.readCompletedVersions(dependencies);\n \n-   public VersionIterator getIterator(final String lastVersionName) {\n-      String versionName = GitUtils.getName(executionConfig.getVersion() != null ? executionConfig.getVersion() : \"HEAD\", folders.getProjectFolder());\n-      if (versionName.equals(lastVersionName)) {\n-         return null;\n-      }\n-      GitCommit currentCommit = new GitCommit(versionName, \"\", \"\", \"\");\n-      GitCommit lastAnalyzedCommit = new GitCommit(executionConfig.getVersionOld() != null ? executionConfig.getVersionOld() : lastVersionName, \"\", \"\", \"\");\n-\n-      List<GitCommit> commits = new LinkedList<>();\n-      commits.add(lastAnalyzedCommit);\n-      commits.add(currentCommit);\n-      LOG.info(\"Analyzing {} - {}\", lastAnalyzedCommit, currentCommit);\n-      VersionIteratorGit newIterator = new VersionIteratorGit(folders.getProjectFolder(), commits, lastAnalyzedCommit);\n-      return newIterator;\n-   }\n-\n-   private void partiallyLoadDependencies(final Dependencies dependencies) throws FileNotFoundException, Exception {\n-      final String lastVersionName = dependencies.getNewestVersion();\n-\n-      VersionIterator newIterator = getIterator(lastVersionName);\n-      if (newIterator != null) {\n-         executePartialRTS(dependencies, newIterator);\n-      }\n-   }\n-\n-   private void executePartialRTS(final Dependencies dependencies, final VersionIterator newIterator) throws FileNotFoundException {\n-      if (executionConfig.isRedirectSubprocessOutputToFile()) {\n-         File logFile = new File(getDependencyreadingFolder(), newIterator.getTag() + \"_\" + newIterator.getPredecessor() + \".txt\");\n-         LOG.info(\"Executing regression test selection update - Log goes to {}\", logFile.getAbsolutePath());\n-         try (LogRedirector director = new LogRedirector(logFile)) {\n-            doPartialRCS(dependencies, newIterator);\n-         }\n-      } else {\n-         doPartialRCS(dependencies, newIterator);\n-      }\n+    try {\n+      ExecutionData executions = Constants.OBJECTMAPPER.readValue(resultsFolders.getExecutionFile(), ExecutionData.class);\n+      reader.setExecutionData(executions);\n \n-   }\n-\n-   private void doPartialRCS(final Dependencies dependencies, final VersionIterator newIterator) {\n-      DependencyReader reader = new DependencyReader(dependencyConfig, folders, resultsFolders, dependencies.getUrl(), newIterator, \n-            new VersionKeeper(new File(resultsFolders.getDependencyFile().getParentFile(), \"nochanges.json\")), executionConfig, env);\n-      newIterator.goTo0thCommit();\n-\n-      reader.readCompletedVersions(dependencies);\n-      \n-      try {\n-         ExecutionData executions = Constants.OBJECTMAPPER.readValue(resultsFolders.getExecutionFile(), ExecutionData.class);\n-         reader.setExecutionData(executions);\n-         \n-         reader.readDependencies();\n-      } catch (IOException e) {\n-         throw new RuntimeException(e);\n-      }\n-      \n-      \n-   }\n-\n-   public File getDependencyreadingFolder() {\n-      File folder = new File(resultsFolders.getDependencyFile().getParentFile(), \"dependencyreading\");\n-      if (!folder.exists()) {\n-         folder.mkdirs();\n-      }\n-      return folder;\n-   }\n-\n-   private Dependencies fullyLoadDependencies(final String url, final VersionIterator iterator, final VersionKeeper nonChanges)\n-         throws Exception {\n-      if (executionConfig.isRedirectSubprocessOutputToFile()) {\n-         File logFile = new File(getDependencyreadingFolder(), iterator.getTag() + \"_\" + iterator.getPredecessor() + \".txt\");\n-         LOG.info(\"Executing regression test selection - Log goes to {}\", logFile.getAbsolutePath());\n-\n-         try (LogRedirector director = new LogRedirector(logFile)) {\n-            return doFullyLoadDependencies(url, iterator, nonChanges);\n-         }\n-      } else {\n-         return doFullyLoadDependencies(url, iterator, nonChanges);\n-      }\n-   }\n-\n-   private Dependencies doFullyLoadDependencies(final String url, final VersionIterator iterator, final VersionKeeper nonChanges)\n-         throws IOException, InterruptedException, XmlPullParserException, JsonParseException, JsonMappingException, ParseException, ViewNotFoundException {\n-      final DependencyReader reader = new DependencyReader(dependencyConfig, folders, resultsFolders, url, iterator, nonChanges, executionConfig, env);\n-      iterator.goToPreviousCommit();\n-      if (!reader.readInitialVersion()) {\n-         LOG.error(\"Analyzing first version was not possible\");\n-      } else {\n-         reader.readDependencies();\n+      reader.readDependencies();\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+\n+\n+  }\n+\n+  public File getDependencyreadingFolder() {\n+    File folder = new File(resultsFolders.getDependencyFile().getParentFile(), \"dependencyreading\");\n+    if (!folder.exists()) {\n+      folder.mkdirs();\n+    }\n+    return folder;\n+  }\n+\n+  private Dependencies fullyLoadDependencies(final String url, final VersionIterator iterator, final VersionKeeper nonChanges)\n+      throws Exception {\n+    if (executionConfig.isRedirectSubprocessOutputToFile()) {\n+      File logFile = new File(getDependencyreadingFolder(), iterator.getTag() + \"_\" + iterator.getPredecessor() + \".txt\");\n+      LOG.info(\"Executing regression test selection - Log goes to {}\", logFile.getAbsolutePath());\n+\n+      try (LogRedirector director = new LogRedirector(logFile)) {\n+        return doFullyLoadDependencies(url, iterator, nonChanges);\n       }\n-      Dependencies dependencies = Constants.OBJECTMAPPER.readValue(resultsFolders.getDependencyFile(), Dependencies.class);\n-      return dependencies;\n-   }\n+    } else {\n+      return doFullyLoadDependencies(url, iterator, nonChanges);\n+    }\n+  }\n+\n+  private Dependencies doFullyLoadDependencies(final String url, final VersionIterator iterator, final VersionKeeper nonChanges)\n+      throws IOException, InterruptedException, XmlPullParserException, JsonParseException, JsonMappingException, ParseException, ViewNotFoundException {\n+    final DependencyReader reader = new DependencyReader(dependencyConfig, folders, resultsFolders, url, iterator, nonChanges, executionConfig, env);\n+    iterator.goToPreviousCommit();\n+    if (!reader.readInitialVersion()) {\n+      LOG.error(\"Analyzing first version was not possible\");\n+    } else {\n+      reader.readDependencies();\n+    }\n+    Dependencies dependencies = Constants.OBJECTMAPPER.readValue(resultsFolders.getDependencyFile(), Dependencies.class);\n+    return dependencies;\n+  }\n }\n",
            "diff_size": 212
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "49",
                    "severity": "error",
                    "message": "Line is longer than 200 characters (found 215).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "134",
                    "severity": "error",
                    "message": "Line is longer than 200 characters (found 255).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "168",
                    "severity": "error",
                    "message": "Line is longer than 200 characters (found 277).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/99/ContinuousDependencyReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/naturalize/99/ContinuousDependencyReader.java\nindex c2484915526..8d95c4308f8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/99/ContinuousDependencyReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/naturalize/99/ContinuousDependencyReader.java\n@@ -38,7 +38,7 @@ import de.dagere.peass.vcs.VersionIteratorGit;\n \n public class ContinuousDependencyReader {\n \n-   private static final Logger LOG = LogManager.getLogger(ContinuousDependencyReader.class);\n+\tprivate static final Logger LOG = LogManager.getLogger(ContinuousDependencyReader.class);\n \n    private final DependencyConfig dependencyConfig;\n    private final ExecutionConfig executionConfig;\n@@ -46,61 +46,58 @@ public class ContinuousDependencyReader {\n    private final ResultsFolders resultsFolders;\n    private final EnvironmentVariables env;\n \n-   public ContinuousDependencyReader(final DependencyConfig dependencyConfig, final ExecutionConfig executionConfig, final PeASSFolders folders, final ResultsFolders resultsFolders,\n-         final EnvironmentVariables env) {\n-      this.dependencyConfig = dependencyConfig;\n+   public ContinuousDependencyReader(final DependencyConfig dependencyConfig, final ExecutionConfig executionConfig, final PeASSFolders folders, final ResultsFolders resultsFolders, final EnvironmentVariables env) {\n+\tthis.dependencyConfig = dependencyConfig;\n       this.executionConfig = executionConfig;\n       this.folders = folders;\n       this.resultsFolders = resultsFolders;\n       this.env = env;\n-   }\n-   \n-   public Set<TestCase> getTests(final VersionIterator iterator, final String url, final String version, final MeasurementConfiguration measurementConfig) throws Exception{\n+\t}\n+\n+public Set<TestCase> getTests(final VersionIterator iterator, final String url, final String version, final MeasurementConfiguration measurementConfig) throws Exception {\n       final Dependencies dependencies = getDependencies(iterator, url);\n-      \n-      final Set<TestCase> tests;\n-      if (dependencies.getVersions().size() > 0) {\n-         if (dependencyConfig.isGenerateViews()) {\n-            ExecutionData executionData = Constants.OBJECTMAPPER.readValue(resultsFolders.getExecutionFile(), ExecutionData.class);\n+final Set<TestCase> tests;\n+if (dependencies.getVersions().size() > 0) {\n+\tif (dependencyConfig.isGenerateViews()) {\n+\tExecutionData executionData = Constants.OBJECTMAPPER.readValue(resultsFolders.getExecutionFile(), ExecutionData.class);\n             tests = executionData.getVersions().get(version).getTests();\n-         } else {\n-            Version versionDependencies = dependencies.getVersions().get(dependencies.getNewestVersion());\n+\t} else {\n+\tVersion versionDependencies = dependencies.getVersions().get(dependencies.getNewestVersion());\n             tests = versionDependencies.getTests().getTests();\n-         }\n+\t}\n \n          // final Set<TestCase> tests = selectIncludedTests(dependencies);\n          NonIncludedTestRemover.removeNotIncluded(tests, measurementConfig.getExecutionConfig());\n-      } else {\n-         tests = new HashSet<>();\n+\t} else {\n+\ttests = new HashSet<>();\n          LOG.info(\"No test executed - version did not contain changed tests.\");\n-      }\n+\t}\n       return tests;\n-   }\n+\t}\n \n-   Dependencies getDependencies(final VersionIterator iterator, final String url)\n-         throws Exception {\n-      Dependencies dependencies;\n+   Dependencies getDependencies(final VersionIterator iterator, final String url) throws Exception {\n+\tDependencies dependencies;\n \n       final VersionKeeper noChanges = new VersionKeeper(new File(resultsFolders.getDependencyFile().getParentFile(), \"nonChanges_\" + folders.getProjectName() + \".json\"));\n \n       if (!resultsFolders.getDependencyFile().exists()) {\n-         dependencies = fullyLoadDependencies(url, iterator, noChanges);\n-      } else {\n-         dependencies = Constants.OBJECTMAPPER.readValue(resultsFolders.getDependencyFile(), Dependencies.class);\n+\tdependencies = fullyLoadDependencies(url, iterator, noChanges);\n+\t} else {\n+\tdependencies = Constants.OBJECTMAPPER.readValue(resultsFolders.getDependencyFile(), Dependencies.class);\n          VersionComparator.setDependencies(dependencies);\n \n          partiallyLoadDependencies(dependencies);\n-      }\n+\t}\n       VersionComparator.setDependencies(dependencies);\n \n       return dependencies;\n-   }\n+\t}\n \n    public VersionIterator getIterator(final String lastVersionName) {\n-      String versionName = GitUtils.getName(executionConfig.getVersion() != null ? executionConfig.getVersion() : \"HEAD\", folders.getProjectFolder());\n+\tString versionName = GitUtils.getName(executionConfig.getVersion() != null ? executionConfig.getVersion() : \"HEAD\", folders.getProjectFolder());\n       if (versionName.equals(lastVersionName)) {\n-         return null;\n-      }\n+\treturn null;\n+\t}\n       GitCommit currentCommit = new GitCommit(versionName, \"\", \"\", \"\");\n       GitCommit lastAnalyzedCommit = new GitCommit(executionConfig.getVersionOld() != null ? executionConfig.getVersionOld() : lastVersionName, \"\", \"\", \"\");\n \n@@ -110,81 +107,73 @@ public class ContinuousDependencyReader {\n       LOG.info(\"Analyzing {} - {}\", lastAnalyzedCommit, currentCommit);\n       VersionIteratorGit newIterator = new VersionIteratorGit(folders.getProjectFolder(), commits, lastAnalyzedCommit);\n       return newIterator;\n-   }\n+\t}\n \n    private void partiallyLoadDependencies(final Dependencies dependencies) throws FileNotFoundException, Exception {\n-      final String lastVersionName = dependencies.getNewestVersion();\n+\tfinal String lastVersionName = dependencies.getNewestVersion();\n \n       VersionIterator newIterator = getIterator(lastVersionName);\n       if (newIterator != null) {\n-         executePartialRTS(dependencies, newIterator);\n-      }\n-   }\n+\texecutePartialRTS(dependencies, newIterator);\n+\t}\n+\t}\n \n    private void executePartialRTS(final Dependencies dependencies, final VersionIterator newIterator) throws FileNotFoundException {\n-      if (executionConfig.isRedirectSubprocessOutputToFile()) {\n-         File logFile = new File(getDependencyreadingFolder(), newIterator.getTag() + \"_\" + newIterator.getPredecessor() + \".txt\");\n+\tif (executionConfig.isRedirectSubprocessOutputToFile()) {\n+\tFile logFile = new File(getDependencyreadingFolder(), newIterator.getTag() + \"_\" + newIterator.getPredecessor() + \".txt\");\n          LOG.info(\"Executing regression test selection update - Log goes to {}\", logFile.getAbsolutePath());\n          try (LogRedirector director = new LogRedirector(logFile)) {\n-            doPartialRCS(dependencies, newIterator);\n-         }\n-      } else {\n-         doPartialRCS(dependencies, newIterator);\n-      }\n-\n-   }\n+\tdoPartialRCS(dependencies, newIterator);\n+\t}\n+\t} else {\n+\tdoPartialRCS(dependencies, newIterator);\n+\t}\n+\t}\n \n    private void doPartialRCS(final Dependencies dependencies, final VersionIterator newIterator) {\n-      DependencyReader reader = new DependencyReader(dependencyConfig, folders, resultsFolders, dependencies.getUrl(), newIterator, \n-            new VersionKeeper(new File(resultsFolders.getDependencyFile().getParentFile(), \"nochanges.json\")), executionConfig, env);\n-      newIterator.goTo0thCommit();\n+\tDependencyReader reader = new DependencyReader(dependencyConfig, folders, resultsFolders, dependencies.getUrl(), newIterator, new VersionKeeper(new File(resultsFolders.getDependencyFile().getParentFile(), \"nochanges.json\")), executionConfig, env);\n+newIterator.goTo0thCommit();\n \n       reader.readCompletedVersions(dependencies);\n-      \n-      try {\n-         ExecutionData executions = Constants.OBJECTMAPPER.readValue(resultsFolders.getExecutionFile(), ExecutionData.class);\n+try {\n+\tExecutionData executions = Constants.OBJECTMAPPER.readValue(resultsFolders.getExecutionFile(), ExecutionData.class);\n          reader.setExecutionData(executions);\n-         \n-         reader.readDependencies();\n-      } catch (IOException e) {\n-         throw new RuntimeException(e);\n-      }\n-      \n-      \n-   }\n-\n-   public File getDependencyreadingFolder() {\n-      File folder = new File(resultsFolders.getDependencyFile().getParentFile(), \"dependencyreading\");\n+reader.readDependencies();\n+\t} catch (IOException e) {\n+\tthrow new RuntimeException(e);\n+\t}\n+\t}\n+\n+public File getDependencyreadingFolder() {\n+\tFile folder = new File(resultsFolders.getDependencyFile().getParentFile(), \"dependencyreading\");\n       if (!folder.exists()) {\n-         folder.mkdirs();\n-      }\n+\tfolder.mkdirs();\n+\t}\n       return folder;\n-   }\n+\t}\n \n-   private Dependencies fullyLoadDependencies(final String url, final VersionIterator iterator, final VersionKeeper nonChanges)\n-         throws Exception {\n-      if (executionConfig.isRedirectSubprocessOutputToFile()) {\n-         File logFile = new File(getDependencyreadingFolder(), iterator.getTag() + \"_\" + iterator.getPredecessor() + \".txt\");\n+   private Dependencies fullyLoadDependencies(final String url, final VersionIterator iterator, final VersionKeeper nonChanges) throws Exception {\n+\tif (executionConfig.isRedirectSubprocessOutputToFile()) {\n+\tFile logFile = new File(getDependencyreadingFolder(), iterator.getTag() + \"_\" + iterator.getPredecessor() + \".txt\");\n          LOG.info(\"Executing regression test selection - Log goes to {}\", logFile.getAbsolutePath());\n \n          try (LogRedirector director = new LogRedirector(logFile)) {\n-            return doFullyLoadDependencies(url, iterator, nonChanges);\n-         }\n-      } else {\n-         return doFullyLoadDependencies(url, iterator, nonChanges);\n-      }\n-   }\n-\n-   private Dependencies doFullyLoadDependencies(final String url, final VersionIterator iterator, final VersionKeeper nonChanges)\n-         throws IOException, InterruptedException, XmlPullParserException, JsonParseException, JsonMappingException, ParseException, ViewNotFoundException {\n-      final DependencyReader reader = new DependencyReader(dependencyConfig, folders, resultsFolders, url, iterator, nonChanges, executionConfig, env);\n+\treturn doFullyLoadDependencies(url, iterator, nonChanges);\n+\t}\n+\t} else {\n+\treturn doFullyLoadDependencies(url, iterator, nonChanges);\n+\t}\n+\t}\n+\n+   private Dependencies doFullyLoadDependencies(final String url, final VersionIterator iterator, final VersionKeeper nonChanges) throws IOException, InterruptedException, XmlPullParserException, JsonParseException, JsonMappingException, ParseException, ViewNotFoundException {\n+\tfinal DependencyReader reader = new DependencyReader(dependencyConfig, folders, resultsFolders, url, iterator, nonChanges, executionConfig, env);\n       iterator.goToPreviousCommit();\n       if (!reader.readInitialVersion()) {\n-         LOG.error(\"Analyzing first version was not possible\");\n-      } else {\n-         reader.readDependencies();\n-      }\n+\tLOG.error(\"Analyzing first version was not possible\");\n+\t} else {\n+\treader.readDependencies();\n+\t}\n       Dependencies dependencies = Constants.OBJECTMAPPER.readValue(resultsFolders.getDependencyFile(), Dependencies.class);\n       return dependencies;\n-   }\n-}\n+\t}\n+\t}\n\\ No newline at end of file\n",
            "diff_size": 84
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Line is longer than 200 characters (found 213).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "126",
                    "severity": "error",
                    "message": "Line is longer than 200 characters (found 249).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "158",
                    "severity": "error",
                    "message": "Line is longer than 200 characters (found 275).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/99/ContinuousDependencyReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/codebuff/99/ContinuousDependencyReader.java\nindex c2484915526..10b785baa6c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/99/ContinuousDependencyReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/codebuff/99/ContinuousDependencyReader.java\n@@ -7,15 +7,12 @@ import java.util.HashSet;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Set;\n-\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.codehaus.plexus.util.xml.pull.XmlPullParserException;\n-\n import com.fasterxml.jackson.core.JsonParseException;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.github.javaparser.ParseException;\n-\n import de.dagere.peass.config.DependencyConfig;\n import de.dagere.peass.config.ExecutionConfig;\n import de.dagere.peass.config.MeasurementConfiguration;\n@@ -36,155 +33,137 @@ import de.dagere.peass.vcs.GitUtils;\n import de.dagere.peass.vcs.VersionIterator;\n import de.dagere.peass.vcs.VersionIteratorGit;\n \n-public class ContinuousDependencyReader {\n \n-   private static final Logger LOG = LogManager.getLogger(ContinuousDependencyReader.class);\n-\n-   private final DependencyConfig dependencyConfig;\n-   private final ExecutionConfig executionConfig;\n-   private final PeASSFolders folders;\n-   private final ResultsFolders resultsFolders;\n-   private final EnvironmentVariables env;\n-\n-   public ContinuousDependencyReader(final DependencyConfig dependencyConfig, final ExecutionConfig executionConfig, final PeASSFolders folders, final ResultsFolders resultsFolders,\n-         final EnvironmentVariables env) {\n-      this.dependencyConfig = dependencyConfig;\n-      this.executionConfig = executionConfig;\n-      this.folders = folders;\n-      this.resultsFolders = resultsFolders;\n-      this.env = env;\n+public class ContinuousDependencyReader {\n+ private static final Logger LOG = LogManager.getLogger(ContinuousDependencyReader.class);\n+ private final DependencyConfig dependencyConfig;\n+ private final ExecutionConfig executionConfig;\n+ private final PeASSFolders folders;\n+ private final ResultsFolders resultsFolders;\n+ private final EnvironmentVariables env;\n+\n+ public ContinuousDependencyReader(final DependencyConfig dependencyConfig, final ExecutionConfig executionConfig, final PeASSFolders folders, final ResultsFolders resultsFolders, final EnvironmentVariables env) {\n+  this.dependencyConfig = dependencyConfig;\n+  this.executionConfig = executionConfig;\n+  this.folders = folders;\n+  this.resultsFolders = resultsFolders;\n+  this.env = env;\n+ }\n+\n+\n+ public Set<TestCase> getTests(final VersionIterator iterator, final String url, final String version, final MeasurementConfiguration measurementConfig) throws Exception {\n+  final Dependencies dependencies = getDependencies(iterator, url);\n+  final Set<TestCase> tests;\n+  if (dependencies.getVersions().size() > 0) {\n+   if (dependencyConfig.isGenerateViews()) {\n+    ExecutionData executionData = Constants.OBJECTMAPPER.readValue(resultsFolders.getExecutionFile(), ExecutionData.class);\n+    tests = executionData.getVersions().get(version).getTests();\n+   } else {\n+    Version versionDependencies = dependencies.getVersions().get(dependencies.getNewestVersion());\n+    tests = versionDependencies.getTests().getTests();\n    }\n-   \n-   public Set<TestCase> getTests(final VersionIterator iterator, final String url, final String version, final MeasurementConfiguration measurementConfig) throws Exception{\n-      final Dependencies dependencies = getDependencies(iterator, url);\n-      \n-      final Set<TestCase> tests;\n-      if (dependencies.getVersions().size() > 0) {\n-         if (dependencyConfig.isGenerateViews()) {\n-            ExecutionData executionData = Constants.OBJECTMAPPER.readValue(resultsFolders.getExecutionFile(), ExecutionData.class);\n-            tests = executionData.getVersions().get(version).getTests();\n-         } else {\n-            Version versionDependencies = dependencies.getVersions().get(dependencies.getNewestVersion());\n-            tests = versionDependencies.getTests().getTests();\n-         }\n \n          // final Set<TestCase> tests = selectIncludedTests(dependencies);\n-         NonIncludedTestRemover.removeNotIncluded(tests, measurementConfig.getExecutionConfig());\n-      } else {\n-         tests = new HashSet<>();\n-         LOG.info(\"No test executed - version did not contain changed tests.\");\n-      }\n-      return tests;\n-   }\n-\n-   Dependencies getDependencies(final VersionIterator iterator, final String url)\n-         throws Exception {\n-      Dependencies dependencies;\n-\n-      final VersionKeeper noChanges = new VersionKeeper(new File(resultsFolders.getDependencyFile().getParentFile(), \"nonChanges_\" + folders.getProjectName() + \".json\"));\n-\n-      if (!resultsFolders.getDependencyFile().exists()) {\n-         dependencies = fullyLoadDependencies(url, iterator, noChanges);\n-      } else {\n-         dependencies = Constants.OBJECTMAPPER.readValue(resultsFolders.getDependencyFile(), Dependencies.class);\n-         VersionComparator.setDependencies(dependencies);\n-\n-         partiallyLoadDependencies(dependencies);\n-      }\n-      VersionComparator.setDependencies(dependencies);\n-\n-      return dependencies;\n-   }\n-\n-   public VersionIterator getIterator(final String lastVersionName) {\n-      String versionName = GitUtils.getName(executionConfig.getVersion() != null ? executionConfig.getVersion() : \"HEAD\", folders.getProjectFolder());\n-      if (versionName.equals(lastVersionName)) {\n-         return null;\n-      }\n-      GitCommit currentCommit = new GitCommit(versionName, \"\", \"\", \"\");\n-      GitCommit lastAnalyzedCommit = new GitCommit(executionConfig.getVersionOld() != null ? executionConfig.getVersionOld() : lastVersionName, \"\", \"\", \"\");\n-\n-      List<GitCommit> commits = new LinkedList<>();\n-      commits.add(lastAnalyzedCommit);\n-      commits.add(currentCommit);\n-      LOG.info(\"Analyzing {} - {}\", lastAnalyzedCommit, currentCommit);\n-      VersionIteratorGit newIterator = new VersionIteratorGit(folders.getProjectFolder(), commits, lastAnalyzedCommit);\n-      return newIterator;\n+   NonIncludedTestRemover.removeNotIncluded(tests, measurementConfig.getExecutionConfig());\n+  } else {\n+   tests = new HashSet<>();\n+   LOG.info(\"No test executed - version did not contain changed tests.\");\n+  }\n+  return tests;\n+ }\n+\n+ Dependencies getDependencies(final VersionIterator iterator, final String url) throws Exception {\n+  Dependencies dependencies;\n+  final VersionKeeper noChanges = new VersionKeeper(new File(resultsFolders.getDependencyFile().getParentFile(), \"nonChanges_\" + folders.getProjectName() + \".json\"));\n+  if (!resultsFolders.getDependencyFile().exists()) {\n+   dependencies = fullyLoadDependencies(url, iterator, noChanges);\n+  } else {\n+   dependencies = Constants.OBJECTMAPPER.readValue(resultsFolders.getDependencyFile(), Dependencies.class);\n+   VersionComparator.setDependencies(dependencies);\n+   partiallyLoadDependencies(dependencies);\n+  }\n+  VersionComparator.setDependencies(dependencies);\n+  return dependencies;\n+ }\n+\n+ public VersionIterator getIterator(final String lastVersionName) {\n+  String versionName = GitUtils.getName(executionConfig.getVersion() != null ? executionConfig.getVersion() : \"HEAD\", folders.getProjectFolder());\n+  if (versionName.equals(lastVersionName)) {\n+   return null;\n+  }\n+  GitCommit currentCommit = new GitCommit(versionName, \"\", \"\", \"\");\n+  GitCommit lastAnalyzedCommit = new GitCommit(executionConfig.getVersionOld() != null ? executionConfig.getVersionOld() : lastVersionName, \"\", \"\", \"\");\n+  List<GitCommit> commits = new LinkedList<>();\n+  commits.add(lastAnalyzedCommit);\n+  commits.add(currentCommit);\n+  LOG.info(\"Analyzing {} - {}\", lastAnalyzedCommit, currentCommit);\n+\n+  VersionIteratorGit newIterator = new VersionIteratorGit(folders.getProjectFolder(), commits, lastAnalyzedCommit);\n+  return newIterator;\n+ }\n+\n+ private void partiallyLoadDependencies(final Dependencies dependencies) throws FileNotFoundException, Exception {\n+  final String lastVersionName = dependencies.getNewestVersion();\n+  VersionIterator newIterator = getIterator(lastVersionName);\n+  if (newIterator != null) {\n+   executePartialRTS(dependencies, newIterator);\n+  }\n+ }\n+\n+ private void executePartialRTS(final Dependencies dependencies, final VersionIterator newIterator) throws FileNotFoundException {\n+  if (executionConfig.isRedirectSubprocessOutputToFile()) {\n+   File logFile = new File(getDependencyreadingFolder(), newIterator.getTag() + \"_\" + newIterator.getPredecessor() + \".txt\");\n+   LOG.info(\"Executing regression test selection update - Log goes to {}\", logFile.getAbsolutePath());\n+   try (LogRedirector director = new LogRedirector(logFile)) {\n+    doPartialRCS(dependencies, newIterator);\n    }\n-\n-   private void partiallyLoadDependencies(final Dependencies dependencies) throws FileNotFoundException, Exception {\n-      final String lastVersionName = dependencies.getNewestVersion();\n-\n-      VersionIterator newIterator = getIterator(lastVersionName);\n-      if (newIterator != null) {\n-         executePartialRTS(dependencies, newIterator);\n-      }\n-   }\n-\n-   private void executePartialRTS(final Dependencies dependencies, final VersionIterator newIterator) throws FileNotFoundException {\n-      if (executionConfig.isRedirectSubprocessOutputToFile()) {\n-         File logFile = new File(getDependencyreadingFolder(), newIterator.getTag() + \"_\" + newIterator.getPredecessor() + \".txt\");\n-         LOG.info(\"Executing regression test selection update - Log goes to {}\", logFile.getAbsolutePath());\n-         try (LogRedirector director = new LogRedirector(logFile)) {\n-            doPartialRCS(dependencies, newIterator);\n-         }\n-      } else {\n-         doPartialRCS(dependencies, newIterator);\n-      }\n-\n-   }\n-\n-   private void doPartialRCS(final Dependencies dependencies, final VersionIterator newIterator) {\n-      DependencyReader reader = new DependencyReader(dependencyConfig, folders, resultsFolders, dependencies.getUrl(), newIterator, \n-            new VersionKeeper(new File(resultsFolders.getDependencyFile().getParentFile(), \"nochanges.json\")), executionConfig, env);\n-      newIterator.goTo0thCommit();\n-\n-      reader.readCompletedVersions(dependencies);\n-      \n-      try {\n-         ExecutionData executions = Constants.OBJECTMAPPER.readValue(resultsFolders.getExecutionFile(), ExecutionData.class);\n-         reader.setExecutionData(executions);\n-         \n-         reader.readDependencies();\n-      } catch (IOException e) {\n-         throw new RuntimeException(e);\n-      }\n-      \n-      \n-   }\n-\n-   public File getDependencyreadingFolder() {\n-      File folder = new File(resultsFolders.getDependencyFile().getParentFile(), \"dependencyreading\");\n-      if (!folder.exists()) {\n-         folder.mkdirs();\n-      }\n-      return folder;\n-   }\n-\n-   private Dependencies fullyLoadDependencies(final String url, final VersionIterator iterator, final VersionKeeper nonChanges)\n-         throws Exception {\n-      if (executionConfig.isRedirectSubprocessOutputToFile()) {\n-         File logFile = new File(getDependencyreadingFolder(), iterator.getTag() + \"_\" + iterator.getPredecessor() + \".txt\");\n-         LOG.info(\"Executing regression test selection - Log goes to {}\", logFile.getAbsolutePath());\n-\n-         try (LogRedirector director = new LogRedirector(logFile)) {\n-            return doFullyLoadDependencies(url, iterator, nonChanges);\n-         }\n-      } else {\n-         return doFullyLoadDependencies(url, iterator, nonChanges);\n-      }\n-   }\n-\n-   private Dependencies doFullyLoadDependencies(final String url, final VersionIterator iterator, final VersionKeeper nonChanges)\n-         throws IOException, InterruptedException, XmlPullParserException, JsonParseException, JsonMappingException, ParseException, ViewNotFoundException {\n-      final DependencyReader reader = new DependencyReader(dependencyConfig, folders, resultsFolders, url, iterator, nonChanges, executionConfig, env);\n-      iterator.goToPreviousCommit();\n-      if (!reader.readInitialVersion()) {\n-         LOG.error(\"Analyzing first version was not possible\");\n-      } else {\n-         reader.readDependencies();\n-      }\n-      Dependencies dependencies = Constants.OBJECTMAPPER.readValue(resultsFolders.getDependencyFile(), Dependencies.class);\n-      return dependencies;\n+  } else {\n+   doPartialRCS(dependencies, newIterator);\n+  }\n+ }\n+\n+ private void doPartialRCS(final Dependencies dependencies, final VersionIterator newIterator) {\n+  DependencyReader reader = new DependencyReader(dependencyConfig, folders, resultsFolders, dependencies.getUrl(), newIterator, new VersionKeeper(new File(resultsFolders.getDependencyFile().getParentFile(), \"nochanges.json\")), executionConfig, env);\n+  newIterator.goTo0thCommit();\n+  reader.readCompletedVersions(dependencies);\n+  try {\n+   ExecutionData executions = Constants.OBJECTMAPPER.readValue(resultsFolders.getExecutionFile(), ExecutionData.class);\n+   reader.setExecutionData(executions);\n+   reader.readDependencies();\n+  } catch (IOException e) {\n+   throw new RuntimeException(e);\n+  }\n+ }\n+\n+ public File getDependencyreadingFolder() {\n+  File folder = new File(resultsFolders.getDependencyFile().getParentFile(), \"dependencyreading\");\n+  if (!folder.exists()) {\n+   folder.mkdirs();\n+  }\n+  return folder;\n+ }\n+\n+ private Dependencies fullyLoadDependencies(final String url, final VersionIterator iterator, final VersionKeeper nonChanges) throws Exception {\n+  if (executionConfig.isRedirectSubprocessOutputToFile()) {\n+   File logFile = new File(getDependencyreadingFolder(), iterator.getTag() + \"_\" + iterator.getPredecessor() + \".txt\");\n+   LOG.info(\"Executing regression test selection - Log goes to {}\", logFile.getAbsolutePath());\n+   try (LogRedirector director = new LogRedirector(logFile)) {\n+    return doFullyLoadDependencies(url, iterator, nonChanges);\n    }\n-}\n+  } else {\n+   return doFullyLoadDependencies(url, iterator, nonChanges);\n+  }\n+ }\n+\n+ private Dependencies doFullyLoadDependencies(final String url, final VersionIterator iterator, final VersionKeeper nonChanges) throws IOException, InterruptedException, XmlPullParserException, JsonParseException, JsonMappingException, ParseException, ViewNotFoundException {\n+  final DependencyReader reader = new DependencyReader(dependencyConfig, folders, resultsFolders, url, iterator, nonChanges, executionConfig, env);\n+  iterator.goToPreviousCommit();\n+  if (!reader.readInitialVersion()) {\n+   LOG.error(\"Analyzing first version was not possible\");\n+  } else {\n+   reader.readDependencies();\n+  }\n+  Dependencies dependencies = Constants.OBJECTMAPPER.readValue(resultsFolders.getDependencyFile(), Dependencies.class);\n+  return dependencies;\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 188
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/99/ContinuousDependencyReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_random/99/ContinuousDependencyReader.java\nindex c2484915526..788b56a58c7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/99/ContinuousDependencyReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_random/99/ContinuousDependencyReader.java\n@@ -55,8 +55,8 @@ public class ContinuousDependencyReader {\n       this.env = env;\n    }\n    \n-   public Set<TestCase> getTests(final VersionIterator iterator, final String url, final String version, final MeasurementConfiguration measurementConfig) throws Exception{\n-      final Dependencies dependencies = getDependencies(iterator, url);\n+   public Set<TestCase> getTests(final VersionIterator iterator, final String url, final String version, final MeasurementConfiguration measurementConfig) throws Exception {\n+\t\t\t\tfinal Dependencies dependencies = getDependencies(iterator, url);\n       \n       final Set<TestCase> tests;\n       if (dependencies.getVersions().size() > 0) {\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/99/ContinuousDependencyReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_three_grams/99/ContinuousDependencyReader.java\nindex c2484915526..788b56a58c7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/99/ContinuousDependencyReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_three_grams/99/ContinuousDependencyReader.java\n@@ -55,8 +55,8 @@ public class ContinuousDependencyReader {\n       this.env = env;\n    }\n    \n-   public Set<TestCase> getTests(final VersionIterator iterator, final String url, final String version, final MeasurementConfiguration measurementConfig) throws Exception{\n-      final Dependencies dependencies = getDependencies(iterator, url);\n+   public Set<TestCase> getTests(final VersionIterator iterator, final String url, final String version, final MeasurementConfiguration measurementConfig) throws Exception {\n+\t\t\t\tfinal Dependencies dependencies = getDependencies(iterator, url);\n       \n       final Set<TestCase> tests;\n       if (dependencies.getVersions().size() > 0) {\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}