{
    "project_name": "Angel-ML-angel",
    "error_id": "941",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/941/ConfUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/941/ConfUtils.java\nindex 4d1a0068758..db02976df4e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/941/ConfUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/941/ConfUtils.java\n@@ -37,7 +37,7 @@ public class ConfUtils {\n   private static final Log LOG = LogFactory.getLog(AngelRunJar.class);\n   private static final String angelSysConfFile = \"angel-site.xml\";\n \n-  public static Configuration initConf(String [] cmdArgs) throws Exception {\n+  public static Configuration initConf(String[] cmdArgs) throws Exception {\n     // Parse cmd parameters\n     Map<String, String> cmdConfMap = parseArgs(cmdArgs);\n \n@@ -64,27 +64,27 @@ public class ConfUtils {\n     // load user configuration:\n     // load user config file\n     String jobConfFile = cmdConfMap.get(AngelConf.ANGEL_APP_CONFIG_FILE);\n-    if(jobConfFile != null) {\n+    if (jobConfFile != null) {\n       LOG.info(\"user app config file \" + jobConfFile);\n       conf.addResource(new Path(jobConfFile));\n     } else {\n       jobConfFile = conf.get(AngelConf.ANGEL_APP_CONFIG_FILE);\n-      if(jobConfFile != null) {\n+      if (jobConfFile != null) {\n         LOG.info(\"user app config file \" + jobConfFile);\n         conf.addResource(new Path(jobConfFile));\n       }\n     }\n \n     // load command line parameters\n-    if(cmdConfMap != null && !cmdConfMap.isEmpty()) {\n-      for(Map.Entry<String, String> entry : cmdConfMap.entrySet()) {\n+    if (cmdConfMap != null && !cmdConfMap.isEmpty()) {\n+      for (Map.Entry<String, String> entry : cmdConfMap.entrySet()) {\n         conf.set(entry.getKey(), entry.getValue());\n       }\n     }\n \n     // load user job resource files\n     String userResourceFiles = conf.get(AngelConf.ANGEL_APP_USER_RESOURCE_FILES);\n-    if(userResourceFiles != null) {\n+    if (userResourceFiles != null) {\n       addResourceFiles(conf, userResourceFiles);\n     }\n \n@@ -199,7 +199,7 @@ public class ConfUtils {\n   }\n \n   private static void addResourceFiles(Configuration conf, String fileNames)\n-    throws MalformedURLException {\n+      throws MalformedURLException {\n     String[] fileNameArray = fileNames.split(\",\");\n     StringBuilder sb = new StringBuilder();\n     for (int i = 0; i < fileNameArray.length; i++) {\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "200",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/941/ConfUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/941/ConfUtils.java\nindex 4d1a0068758..0c0d5be4379 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/941/ConfUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/941/ConfUtils.java\n@@ -37,7 +37,7 @@ public class ConfUtils {\n   private static final Log LOG = LogFactory.getLog(AngelRunJar.class);\n   private static final String angelSysConfFile = \"angel-site.xml\";\n \n-  public static Configuration initConf(String [] cmdArgs) throws Exception {\n+  public static Configuration initConf(String[] cmdArgs) throws Exception {\n     // Parse cmd parameters\n     Map<String, String> cmdConfMap = parseArgs(cmdArgs);\n \n@@ -64,12 +64,12 @@ public class ConfUtils {\n     // load user configuration:\n     // load user config file\n     String jobConfFile = cmdConfMap.get(AngelConf.ANGEL_APP_CONFIG_FILE);\n-    if(jobConfFile != null) {\n+    if (jobConfFile != null) {\n       LOG.info(\"user app config file \" + jobConfFile);\n       conf.addResource(new Path(jobConfFile));\n     } else {\n       jobConfFile = conf.get(AngelConf.ANGEL_APP_CONFIG_FILE);\n-      if(jobConfFile != null) {\n+      if (jobConfFile != null) {\n         LOG.info(\"user app config file \" + jobConfFile);\n         conf.addResource(new Path(jobConfFile));\n       }\n@@ -77,14 +77,14 @@ public class ConfUtils {\n \n     // load command line parameters\n     if(cmdConfMap != null && !cmdConfMap.isEmpty()) {\n-      for(Map.Entry<String, String> entry : cmdConfMap.entrySet()) {\n+      for (Map.Entry<String, String> entry : cmdConfMap.entrySet()) {\n         conf.set(entry.getKey(), entry.getValue());\n       }\n     }\n \n     // load user job resource files\n     String userResourceFiles = conf.get(AngelConf.ANGEL_APP_USER_RESOURCE_FILES);\n-    if(userResourceFiles != null) {\n+    if (userResourceFiles != null) {\n       addResourceFiles(conf, userResourceFiles);\n     }\n \n@@ -148,8 +148,7 @@ public class ConfUtils {\n   }\n \n   private static void expandEnv(Configuration conf) {\n-\n-    Map<String, String> kvs = conf.getValByRegex(\"angel.*\");\n+  Map<String, String> kvs = conf.getValByRegex(\"angel.*\");\n     Pattern pattern = Pattern.compile(\"\\\\$\\\\{[\\\\p{Alnum}\\\\p{Punct}]+?\\\\}\");\n \n     for (Map.Entry<String, String> kv : kvs.entrySet()) {\n@@ -198,8 +197,7 @@ public class ConfUtils {\n     }\n   }\n \n-  private static void addResourceFiles(Configuration conf, String fileNames)\n-    throws MalformedURLException {\n+  private static void addResourceFiles(Configuration conf, String fileNames) throws MalformedURLException {\n     String[] fileNameArray = fileNames.split(\",\");\n     StringBuilder sb = new StringBuilder();\n     for (int i = 0; i < fileNameArray.length; i++) {\n@@ -230,4 +228,4 @@ public class ConfUtils {\n       throw new IOException(\"Error, could not add URL to system classloader\", t);\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "137",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "202",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/941/ConfUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/941/ConfUtils.java\nindex 4d1a0068758..f39e547533f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/941/ConfUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/941/ConfUtils.java\n@@ -22,7 +22,6 @@ import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.apache.hadoop.conf.Configuration;\n import org.apache.hadoop.fs.Path;\n-\n import java.io.File;\n import java.io.IOException;\n import java.lang.reflect.Method;\n@@ -34,10 +33,11 @@ import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n public class ConfUtils {\n+\n   private static final Log LOG = LogFactory.getLog(AngelRunJar.class);\n   private static final String angelSysConfFile = \"angel-site.xml\";\n \n-  public static Configuration initConf(String [] cmdArgs) throws Exception {\n+  public static Configuration initConf(String[] cmdArgs) throws Exception {\n     // Parse cmd parameters\n     Map<String, String> cmdConfMap = parseArgs(cmdArgs);\n \n@@ -52,6 +52,7 @@ public class ConfUtils {\n     }\n \n     // load angel system configuration\n+\n     String angelHomePath = System.getenv(\"ANGEL_HOME\");\n     if (angelHomePath == null) {\n       LOG.fatal(\"ANGEL_HOME is empty, please set it first\");\n@@ -64,31 +65,34 @@ public class ConfUtils {\n     // load user configuration:\n     // load user config file\n     String jobConfFile = cmdConfMap.get(AngelConf.ANGEL_APP_CONFIG_FILE);\n-    if(jobConfFile != null) {\n+    if (jobConfFile != null) {\n       LOG.info(\"user app config file \" + jobConfFile);\n       conf.addResource(new Path(jobConfFile));\n     } else {\n       jobConfFile = conf.get(AngelConf.ANGEL_APP_CONFIG_FILE);\n-      if(jobConfFile != null) {\n+      if (jobConfFile != null) {\n         LOG.info(\"user app config file \" + jobConfFile);\n         conf.addResource(new Path(jobConfFile));\n       }\n     }\n \n     // load command line parameters\n-    if(cmdConfMap != null && !cmdConfMap.isEmpty()) {\n-      for(Map.Entry<String, String> entry : cmdConfMap.entrySet()) {\n+\n+    if (cmdConfMap != null && !cmdConfMap.isEmpty()) {\n+      for (Map.Entry<String, String> entry : cmdConfMap.entrySet()) {\n         conf.set(entry.getKey(), entry.getValue());\n       }\n     }\n \n     // load user job resource files\n+\n     String userResourceFiles = conf.get(AngelConf.ANGEL_APP_USER_RESOURCE_FILES);\n-    if(userResourceFiles != null) {\n+    if (userResourceFiles != null) {\n       addResourceFiles(conf, userResourceFiles);\n     }\n \n     // load user job jar if it exist\n+\n     String jobJar = conf.get(AngelConf.ANGEL_JOB_JAR);\n     if (jobJar != null) {\n       loadJar(jobJar);\n@@ -106,7 +110,6 @@ public class ConfUtils {\n \n   private static Map<String, String> parseArgs(String[] args) throws InvalidParameterException {\n     Map<String, String> kvMap = new HashMap<String, String>();\n-\n     int seg = 0;\n     for (int i = 0; i < args.length; i++) {\n       if (args[i].startsWith(\"-D\")) {\n@@ -117,46 +120,44 @@ public class ConfUtils {\n           throw new InvalidParameterException(\"unvalid parameter \" + args[i]);\n         }\n       } else if (args[i].startsWith(\"--\")) {\n-        String key = args[i].substring(2);\n-        i++;\n-        if (i < args.length) {\n-          String value = args[i];\n-          kvMap.put(key, value);\n-        } else {\n-          throw new InvalidParameterException(\"there is no value for parameter \" + key);\n-        }\n+               String key = args[i].substring(2);\n+               i++;\n+               if (i < args.length) {\n+                 String value = args[i];\n+                 kvMap.put(key, value);\n+               } else {\n+                 throw new InvalidParameterException(\"there is no value for parameter \" + key);\n+               }\n       } else if ((seg = args[i].indexOf(\":\")) > 0) {\n-        kvMap.put(args[i].substring(0, seg), args[i].substring(seg + 1));\n-      } else {\n-        switch (args[i]) {\n-          case \"jar\": {\n-            if (i == args.length - 1) {\n-              throw new InvalidParameterException(\"there must be a jar file after jar commond\");\n-            } else {\n-              i++;\n-              kvMap.put(AngelConf.ANGEL_JOB_JAR, args[i]);\n-            }\n-            break;\n-          }\n-          default: {\n-            throw new InvalidParameterException(\"unvalid parameter \" + args[i]);\n-          }\n-        }\n-      }\n+               kvMap.put(args[i].substring(0, seg), args[i].substring(seg + 1));\n+             } else {\n+               switch (args[i]) {\n+                 case \"jar\": {\n+                   if (i == args.length - 1) {\n+                     throw new InvalidParameterException(\"there must be a jar file after jar commond\");\n+                   } else {\n+                     i++;\n+                     kvMap.put(AngelConf.ANGEL_JOB_JAR, args[i]);\n+                   }\n+                   break;\n+                 }\n+\n+                 default: {\n+                   throw new InvalidParameterException(\"unvalid parameter \" + args[i]);\n+                 }\n+               }\n+             }\n     }\n     return kvMap;\n   }\n \n   private static void expandEnv(Configuration conf) {\n-\n     Map<String, String> kvs = conf.getValByRegex(\"angel.*\");\n     Pattern pattern = Pattern.compile(\"\\\\$\\\\{[\\\\p{Alnum}\\\\p{Punct}]+?\\\\}\");\n-\n     for (Map.Entry<String, String> kv : kvs.entrySet()) {\n       String value = kv.getValue();\n       Matcher matcher = pattern.matcher(value);\n       List<String> keys = new ArrayList<String>();\n-\n       while (matcher.find()) {\n         String matchedStr = matcher.group();\n         keys.add(matchedStr.substring(2, matchedStr.length() - 1));\n@@ -171,11 +172,11 @@ public class ConfUtils {\n         }\n         value = value.replaceAll(\"\\\\$\\\\{\" + keys.get(i) + \"\\\\}\", envValue);\n       }\n-\n       conf.set(kv.getKey(), value);\n     }\n \n     // Add default fs(local fs) for lib jars.\n+\n     String libJars = conf.get(AngelConf.ANGEL_JOB_LIBJARS);\n     if (libJars != null) {\n       StringBuilder sb = new StringBuilder();\n@@ -198,20 +199,19 @@ public class ConfUtils {\n     }\n   }\n \n-  private static void addResourceFiles(Configuration conf, String fileNames)\n-    throws MalformedURLException {\n+  private static void addResourceFiles(Configuration conf, String fileNames) throws MalformedURLException {\n     String[] fileNameArray = fileNames.split(\",\");\n     StringBuilder sb = new StringBuilder();\n     for (int i = 0; i < fileNameArray.length; i++) {\n       if (i != 0) {\n         sb.append(\",\");\n       }\n+\n       URL url = new File(fileNameArray[i]).toURI().toURL();\n       sb.append(url.toString());\n     }\n \n     String addJars = conf.get(AngelConf.ANGEL_JOB_LIBJARS);\n-\n     if (addJars == null || addJars.trim().isEmpty()) {\n       conf.set(AngelConf.ANGEL_JOB_LIBJARS, sb.toString());\n     } else {\n@@ -230,4 +230,5 @@ public class ConfUtils {\n       throw new IOException(\"Error, could not add URL to system classloader\", t);\n     }\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 50
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}