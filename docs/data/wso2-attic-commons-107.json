{
    "project_name": "wso2-attic-commons",
    "error_id": "107",
    "information": {
        "errors": [
            {
                "line": "86",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 127).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n    public String msgExpLangRegistrationError(String expressionLanguageUri, Map<String, String> properties) {\n        return format(\"Error registering expression language \\\"\" + expressionLanguageUri + \"\\\" with properties \" + properties);\n    }\n\n    public String msgPropertyAliasReturnedNullSet(String alias, String variable) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/107/Messages.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/107/Messages.java\nindex befc7b505b1..b4ef0f52684 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/107/Messages.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/107/Messages.java\n@@ -83,7 +83,8 @@ public class Messages extends MessageBundle {\n     }\n \n     public String msgExpLangRegistrationError(String expressionLanguageUri, Map<String, String> properties) {\n-        return format(\"Error registering expression language \\\"\" + expressionLanguageUri + \"\\\" with properties \" + properties);\n+        return format(\n+            \"Error registering expression language \\\"\" + expressionLanguageUri + \"\\\" with properties \" + properties);\n     }\n \n     public String msgPropertyAliasReturnedNullSet(String alias, String variable) {\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/107/Messages.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/107/Messages.java\nindex befc7b505b1..0c1d33ce973 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/107/Messages.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/107/Messages.java\n@@ -28,66 +28,61 @@ import java.util.Map;\n  */\n public class Messages extends MessageBundle {\n \n-    /**\n-     * Format a message about being unable to compile an XPath expression.\n-     *\n-     * @param expr\n-     *          the expression in error\n-     * @param lineNo\n-     *          the line number for the expression\n-     * @param reason\n-     *          the reason that compilation failed.\n-     *\n-     * Unable to compile XPath expression {0} (line#{1}): {2}\n-     */\n-    public String msgUnableToCompileXPath(String expr, int lineNo, String reason) {\n-        return this.format(\"Unable to compile XPath expression {0} (line#{1}): {2}\", expr, lineNo,\n-                reason);\n-    }\n+  /**\n+   * Format a message about being unable to compile an XPath expression.\n+   *\n+   * @param expr   the expression in error\n+   * @param lineNo the line number for the expression\n+   * @param reason the reason that compilation failed.\n+   *               <p>\n+   *               Unable to compile XPath expression {0} (line#{1}): {2}\n+   */\n+  public String msgUnableToCompileXPath(String expr, int lineNo, String reason) {\n+    return this.format(\"Unable to compile XPath expression {0} (line#{1}): {2}\", expr, lineNo,\n+      reason);\n+  }\n \n-    /**\n-     * Format a message about passing a non-static location path where one is\n-     * expected.\n-     *\n-     * @param pathString\n-     *          the errant XPath expression\n-     * @param lineNo\n-     *          the line number where the expression occurs\n-     * @param type\n-     *          the type of the expression\n-     *\n-     * Non-static string values for location paths are not allowed; the expression\n-     * {0} at line {1} evaluates to type {2}.\n-     */\n-    public String msgLocationMustBeString(String pathString, int lineNo, String type) {\n-        return this.format(\"Non-static string values for location paths are not allowed;\"\n-                + \"the expression {0} at line {1} evaluates to type {2}.\", pathString, lineNo, type);\n-    }\n+  /**\n+   * Format a message about passing a non-static location path where one is\n+   * expected.\n+   *\n+   * @param pathString the errant XPath expression\n+   * @param lineNo     the line number where the expression occurs\n+   * @param type       the type of the expression\n+   *                   <p>\n+   *                   Non-static string values for location paths are not allowed; the expression\n+   *                   {0} at line {1} evaluates to type {2}.\n+   */\n+  public String msgLocationMustBeString(String pathString, int lineNo, String type) {\n+    return this.format(\"Non-static string values for location paths are not allowed;\"\n+      + \"the expression {0} at line {1} evaluates to type {2}.\", pathString, lineNo, type);\n+  }\n \n-    // TODO better message\n-    public String msgPropertyAliasReturnedRValue(String alias, String variable) {\n-        return this.format(\"msgPropertyAliasReturnedRValue: {0} {1}\", alias, variable);\n-    }\n+  // TODO better message\n+  public String msgPropertyAliasReturnedRValue(String alias, String variable) {\n+    return this.format(\"msgPropertyAliasReturnedRValue: {0} {1}\", alias, variable);\n+  }\n \n-    // TODO better message\n-    public String msgPropertyAliasReturnedNonElement(String alias, String variable) {\n-        return this.format(\"msgPropertyAliasReturnedNonElement: {0} {1}\", alias, variable);\n-    }\n+  // TODO better message\n+  public String msgPropertyAliasReturnedNonElement(String alias, String variable) {\n+    return this.format(\"msgPropertyAliasReturnedNonElement: {0} {1}\", alias, variable);\n+  }\n \n-    public String msgMessageExchangeFailureOnProcessCompletion() {\n-        return \"Process has been completed, pending message exchanges must be failed.\";\n-    }\n+  public String msgMessageExchangeFailureOnProcessCompletion() {\n+    return \"Process has been completed, pending message exchanges must be failed.\";\n+  }\n \n-    public String msgUnknownEPR(String string) {\n-        return format(\"Unknown EPR: {0}\", string);\n-    }\n+  public String msgUnknownEPR(String string) {\n+    return format(\"Unknown EPR: {0}\", string);\n+  }\n \n-    public String msgExpLangRegistrationError(String expressionLanguageUri, Map<String, String> properties) {\n-        return format(\"Error registering expression language \\\"\" + expressionLanguageUri + \"\\\" with properties \" + properties);\n-    }\n+  public String msgExpLangRegistrationError(String expressionLanguageUri, Map<String, String> properties) {\n+    return format(\n+      \"Error registering expression language \\\"\" + expressionLanguageUri + \"\\\" with properties \" + properties);\n+  }\n \n-    public String msgPropertyAliasReturnedNullSet(String alias, String variable) {\n-        return this.format(\"msgPropertyAliasReturnedNullSet: {0} {1}\", alias, variable);\n-    }\n+  public String msgPropertyAliasReturnedNullSet(String alias, String variable) {\n+    return this.format(\"msgPropertyAliasReturnedNullSet: {0} {1}\", alias, variable);\n+  }\n \n }\n",
            "diff_size": 55
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/107/Messages.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/107/Messages.java\nindex befc7b505b1..8319c3711aa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/107/Messages.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/107/Messages.java\n@@ -90,4 +90,4 @@ public class Messages extends MessageBundle {\n         return this.format(\"msgPropertyAliasReturnedNullSet: {0} {1}\", alias, variable);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/107/Messages.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/107/Messages.java\nindex befc7b505b1..b4ef0f52684 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/107/Messages.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/107/Messages.java\n@@ -83,7 +83,8 @@ public class Messages extends MessageBundle {\n     }\n \n     public String msgExpLangRegistrationError(String expressionLanguageUri, Map<String, String> properties) {\n-        return format(\"Error registering expression language \\\"\" + expressionLanguageUri + \"\\\" with properties \" + properties);\n+        return format(\n+            \"Error registering expression language \\\"\" + expressionLanguageUri + \"\\\" with properties \" + properties);\n     }\n \n     public String msgPropertyAliasReturnedNullSet(String alias, String variable) {\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/107/Messages.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/107/Messages.java\nindex befc7b505b1..65555cd511e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/107/Messages.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/107/Messages.java\n@@ -83,10 +83,11 @@ public class Messages extends MessageBundle {\n     }\n \n     public String msgExpLangRegistrationError(String expressionLanguageUri, Map<String, String> properties) {\n-        return format(\"Error registering expression language \\\"\" + expressionLanguageUri + \"\\\" with properties \" + properties);\n-    }\n+        return format(\"Error registering expression language \\\"\" + expressionLanguageUri\n+                + \"\\\" with properties \" + properties);\n+     }\n \n-    public String msgPropertyAliasReturnedNullSet(String alias, String variable) {\n+     public String msgPropertyAliasReturnedNullSet(String alias, String variable) {\n         return this.format(\"msgPropertyAliasReturnedNullSet: {0} {1}\", alias, variable);\n     }\n \n",
            "diff_size": 4
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}