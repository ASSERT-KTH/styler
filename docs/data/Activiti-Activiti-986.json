{
    "project_name": "Activiti-Activiti",
    "error_id": "986",
    "information": {
        "errors": [
            {
                "line": "13",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.engine.impl.bpmn.behavior;\n\nimport java.util.List;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/986/IntermediateCatchMessageEventActivityBehavior.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/986/IntermediateCatchMessageEventActivityBehavior.java\nindex 2fc9c4ca05b..d7c1e51d58c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/986/IntermediateCatchMessageEventActivityBehavior.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/986/IntermediateCatchMessageEventActivityBehavior.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.behavior;\n \n import java.util.List;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/986/IntermediateCatchMessageEventActivityBehavior.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/986/IntermediateCatchMessageEventActivityBehavior.java\nindex 2fc9c4ca05b..a7fac78bcc7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/986/IntermediateCatchMessageEventActivityBehavior.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/986/IntermediateCatchMessageEventActivityBehavior.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.behavior;\n \n import java.util.List;\n@@ -30,59 +31,59 @@ import org.apache.commons.lang3.StringUtils;\n \n public class IntermediateCatchMessageEventActivityBehavior extends IntermediateCatchEventActivityBehavior {\n \n-  private static final long serialVersionUID = 1L;\n+    private static final long serialVersionUID = 1L;\n+\n+    protected MessageEventDefinition messageEventDefinition;\n+\n+    public IntermediateCatchMessageEventActivityBehavior(MessageEventDefinition messageEventDefinition) {\n+        this.messageEventDefinition = messageEventDefinition;\n+    }\n+\n+    public void execute(DelegateExecution execution) {\n+        CommandContext commandContext = Context.getCommandContext();\n+        ExecutionEntity executionEntity = (ExecutionEntity) execution;\n+\n+        String messageName = null;\n+        if (StringUtils.isNotEmpty(messageEventDefinition.getMessageRef())) {\n+            messageName = messageEventDefinition.getMessageRef();\n+        } else {\n+            Expression messageExpression = commandContext.getProcessEngineConfiguration().getExpressionManager()\n+                    .createExpression(messageEventDefinition.getMessageExpression());\n+            messageName = messageExpression.getValue(execution).toString();\n+        }\n \n-  protected MessageEventDefinition messageEventDefinition;\n+        commandContext.getEventSubscriptionEntityManager().insertMessageEvent(messageName, executionEntity);\n \n-  public IntermediateCatchMessageEventActivityBehavior(MessageEventDefinition messageEventDefinition) {\n-    this.messageEventDefinition = messageEventDefinition;\n-  }\n+        if (commandContext.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {\n+            commandContext.getProcessEngineConfiguration().getEventDispatcher()\n+                    .dispatchEvent(ActivitiEventBuilder.createMessageEvent(ActivitiEventType.ACTIVITY_MESSAGE_WAITING, executionEntity.getActivityId(), messageName,\n+                            null, executionEntity.getId(), executionEntity.getProcessInstanceId(), executionEntity.getProcessDefinitionId()));\n+        }\n+    }\n \n-  public void execute(DelegateExecution execution) {\n-    CommandContext commandContext = Context.getCommandContext();\n-    ExecutionEntity executionEntity = (ExecutionEntity) execution;\n-    \n-    String messageName = null;\n-    if (StringUtils.isNotEmpty(messageEventDefinition.getMessageRef())) {\n-      messageName = messageEventDefinition.getMessageRef();\n-    } else {\n-      Expression messageExpression = commandContext.getProcessEngineConfiguration().getExpressionManager()\n-          .createExpression(messageEventDefinition.getMessageExpression());\n-      messageName = messageExpression.getValue(execution).toString();\n+    @Override\n+    public void trigger(DelegateExecution execution, String triggerName, Object triggerData) {\n+        ExecutionEntity executionEntity = deleteMessageEventSubScription(execution);\n+        leaveIntermediateCatchEvent(executionEntity);\n     }\n-    \n-    commandContext.getEventSubscriptionEntityManager().insertMessageEvent(messageName, executionEntity);\n-    \n-    if (commandContext.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {\n-        commandContext.getProcessEngineConfiguration().getEventDispatcher()\n-                .dispatchEvent(ActivitiEventBuilder.createMessageEvent(ActivitiEventType.ACTIVITY_MESSAGE_WAITING, executionEntity.getActivityId(), messageName,\n-                        null, executionEntity.getId(), executionEntity.getProcessInstanceId(), executionEntity.getProcessDefinitionId()));\n-      }\n-  }\n \n-  @Override\n-  public void trigger(DelegateExecution execution, String triggerName, Object triggerData) {\n-    ExecutionEntity executionEntity = deleteMessageEventSubScription(execution);\n-    leaveIntermediateCatchEvent(executionEntity);\n-  }\n-  \n-  @Override\n-  public void eventCancelledByEventGateway(DelegateExecution execution) {\n-    deleteMessageEventSubScription(execution);\n-    Context.getCommandContext().getExecutionEntityManager().deleteExecutionAndRelatedData((ExecutionEntity) execution, \n-        DeleteReason.EVENT_BASED_GATEWAY_CANCEL, false);\n-  }\n+    @Override\n+    public void eventCancelledByEventGateway(DelegateExecution execution) {\n+        deleteMessageEventSubScription(execution);\n+        Context.getCommandContext().getExecutionEntityManager().deleteExecutionAndRelatedData((ExecutionEntity) execution,\n+                DeleteReason.EVENT_BASED_GATEWAY_CANCEL, false);\n+    }\n \n-  protected ExecutionEntity deleteMessageEventSubScription(DelegateExecution execution) {\n-    ExecutionEntity executionEntity = (ExecutionEntity) execution;\n-    EventSubscriptionEntityManager eventSubscriptionEntityManager = Context.getCommandContext().getEventSubscriptionEntityManager();\n-    List<EventSubscriptionEntity> eventSubscriptions = executionEntity.getEventSubscriptions();\n-    for (EventSubscriptionEntity eventSubscription : eventSubscriptions) {\n-      if (eventSubscription instanceof MessageEventSubscriptionEntity && eventSubscription.getEventName().equals(messageEventDefinition.getMessageRef())) {\n+    protected ExecutionEntity deleteMessageEventSubScription(DelegateExecution execution) {\n+        ExecutionEntity executionEntity = (ExecutionEntity) execution;\n+        EventSubscriptionEntityManager eventSubscriptionEntityManager = Context.getCommandContext().getEventSubscriptionEntityManager();\n+        List<EventSubscriptionEntity> eventSubscriptions = executionEntity.getEventSubscriptions();\n+        for (EventSubscriptionEntity eventSubscription : eventSubscriptions) {\n+            if (eventSubscription instanceof MessageEventSubscriptionEntity && eventSubscription.getEventName().equals(messageEventDefinition.getMessageRef())) {\n \n-        eventSubscriptionEntityManager.delete(eventSubscription);\n-      }\n+                eventSubscriptionEntityManager.delete(eventSubscription);\n+            }\n+        }\n+        return executionEntity;\n     }\n-    return executionEntity;\n-  }\n }\n",
            "diff_size": 72
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "31",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Line is longer than 240 characters (found 332).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/986/IntermediateCatchMessageEventActivityBehavior.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/986/IntermediateCatchMessageEventActivityBehavior.java\nindex 2fc9c4ca05b..e6c72575a4e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/986/IntermediateCatchMessageEventActivityBehavior.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/986/IntermediateCatchMessageEventActivityBehavior.java\n@@ -13,7 +13,6 @@\n package org.activiti.engine.impl.bpmn.behavior;\n \n import java.util.List;\n-\n import org.activiti.bpmn.model.MessageEventDefinition;\n import org.activiti.engine.delegate.DelegateExecution;\n import org.activiti.engine.delegate.Expression;\n@@ -28,10 +27,10 @@ import org.activiti.engine.impl.persistence.entity.ExecutionEntity;\n import org.activiti.engine.impl.persistence.entity.MessageEventSubscriptionEntity;\n import org.apache.commons.lang3.StringUtils;\n \n+\n public class IntermediateCatchMessageEventActivityBehavior extends IntermediateCatchEventActivityBehavior {\n \n   private static final long serialVersionUID = 1L;\n-\n   protected MessageEventDefinition messageEventDefinition;\n \n   public IntermediateCatchMessageEventActivityBehavior(MessageEventDefinition messageEventDefinition) {\n@@ -41,23 +40,17 @@ public class IntermediateCatchMessageEventActivityBehavior extends IntermediateC\n   public void execute(DelegateExecution execution) {\n     CommandContext commandContext = Context.getCommandContext();\n     ExecutionEntity executionEntity = (ExecutionEntity) execution;\n-    \n     String messageName = null;\n     if (StringUtils.isNotEmpty(messageEventDefinition.getMessageRef())) {\n       messageName = messageEventDefinition.getMessageRef();\n     } else {\n-      Expression messageExpression = commandContext.getProcessEngineConfiguration().getExpressionManager()\n-          .createExpression(messageEventDefinition.getMessageExpression());\n+      Expression messageExpression = commandContext.getProcessEngineConfiguration().getExpressionManager().createExpression(messageEventDefinition.getMessageExpression());\n       messageName = messageExpression.getValue(execution).toString();\n     }\n-    \n     commandContext.getEventSubscriptionEntityManager().insertMessageEvent(messageName, executionEntity);\n-    \n     if (commandContext.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {\n-        commandContext.getProcessEngineConfiguration().getEventDispatcher()\n-                .dispatchEvent(ActivitiEventBuilder.createMessageEvent(ActivitiEventType.ACTIVITY_MESSAGE_WAITING, executionEntity.getActivityId(), messageName,\n-                        null, executionEntity.getId(), executionEntity.getProcessInstanceId(), executionEntity.getProcessDefinitionId()));\n-      }\n+      commandContext.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createMessageEvent(ActivitiEventType.ACTIVITY_MESSAGE_WAITING, executionEntity.getActivityId(), messageName, null, executionEntity.getId(), executionEntity.getProcessInstanceId(), executionEntity.getProcessDefinitionId()));\n+    }\n   }\n \n   @Override\n@@ -65,12 +58,13 @@ public class IntermediateCatchMessageEventActivityBehavior extends IntermediateC\n     ExecutionEntity executionEntity = deleteMessageEventSubScription(execution);\n     leaveIntermediateCatchEvent(executionEntity);\n   }\n-  \n+\n   @Override\n   public void eventCancelledByEventGateway(DelegateExecution execution) {\n     deleteMessageEventSubScription(execution);\n-    Context.getCommandContext().getExecutionEntityManager().deleteExecutionAndRelatedData((ExecutionEntity) execution, \n-        DeleteReason.EVENT_BASED_GATEWAY_CANCEL, false);\n+    Context.getCommandContext().getExecutionEntityManager().deleteExecutionAndRelatedData((ExecutionEntity) execution,\n+                                                                                          DeleteReason.EVENT_BASED_GATEWAY_CANCEL,\n+                                                                                          false);\n   }\n \n   protected ExecutionEntity deleteMessageEventSubScription(DelegateExecution execution) {\n@@ -79,10 +73,10 @@ public class IntermediateCatchMessageEventActivityBehavior extends IntermediateC\n     List<EventSubscriptionEntity> eventSubscriptions = executionEntity.getEventSubscriptions();\n     for (EventSubscriptionEntity eventSubscription : eventSubscriptions) {\n       if (eventSubscription instanceof MessageEventSubscriptionEntity && eventSubscription.getEventName().equals(messageEventDefinition.getMessageRef())) {\n-\n         eventSubscriptionEntityManager.delete(eventSubscription);\n       }\n     }\n     return executionEntity;\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/986/IntermediateCatchMessageEventActivityBehavior.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/986/IntermediateCatchMessageEventActivityBehavior.java\nindex 2fc9c4ca05b..d7c1e51d58c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/986/IntermediateCatchMessageEventActivityBehavior.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/986/IntermediateCatchMessageEventActivityBehavior.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.behavior;\n \n import java.util.List;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/986/IntermediateCatchMessageEventActivityBehavior.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/986/IntermediateCatchMessageEventActivityBehavior.java\nindex 2fc9c4ca05b..d7c1e51d58c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/986/IntermediateCatchMessageEventActivityBehavior.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/986/IntermediateCatchMessageEventActivityBehavior.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.behavior;\n \n import java.util.List;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}