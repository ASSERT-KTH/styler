{
    "project_name": "neo4j-neo4j",
    "error_id": "339",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "125",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "126",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "68",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "127",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "125",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/339/Procedures.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/339/Procedures.java\nindex 11658bdb4ea..1342409a65d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/339/Procedures.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/339/Procedures.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.kernel.api;\n \n import java.util.Set;\n@@ -35,89 +36,100 @@ public interface Procedures\n {\n     /**\n      * Get a handle to the given function\n+     *\n      * @param name the name of the function\n      * @return A handle to the function or null if no function was found.\n      */\n-    UserFunctionHandle functionGet( QualifiedName name );\n+    UserFunctionHandle functionGet(QualifiedName name);\n \n     /**\n      * Get a handle to the given aggregation function\n+     *\n      * @param name the name of the function\n      * @return A handle to the function or null if no function was found.\n      */\n-    UserFunctionHandle aggregationFunctionGet( QualifiedName name );\n+    UserFunctionHandle aggregationFunctionGet(QualifiedName name);\n \n     /**\n      * Fetch a procedure handle\n+     *\n      * @param name the name of the procedure\n      * @return a procedure handle\n      * @throws ProcedureException if there is no procedure was found for the name.\n      */\n-    ProcedureHandle procedureGet( QualifiedName name ) throws ProcedureException;\n+    ProcedureHandle procedureGet(QualifiedName name) throws ProcedureException;\n \n     /**\n      * Fetch all procedures\n+     *\n      * @return all procedures\n      * @throws ProcedureException\n      */\n-    Set<ProcedureSignature> proceduresGetAll( ) throws ProcedureException;\n+    Set<ProcedureSignature> proceduresGetAll() throws ProcedureException;\n \n     /**\n      * Invoke a read-only procedure by id.\n-     * @param id the id of the procedure.\n+     *\n+     * @param id        the id of the procedure.\n      * @param arguments the procedure arguments.\n-     * @param context the procedure call context.\n+     * @param context   the procedure call context.\n      * @return an iterator containing the procedure results.\n      * @throws ProcedureException if there was an exception thrown during procedure execution.\n      */\n-    RawIterator<AnyValue[], ProcedureException> procedureCallRead( int id, AnyValue[] arguments, ProcedureCallContext context )\n-            throws ProcedureException;\n+    RawIterator<AnyValue[], ProcedureException> procedureCallRead(int id, AnyValue[] arguments, ProcedureCallContext context)\n+      throws ProcedureException;\n \n     /**\n      * Invoke a read/write procedure by id.\n-     * @param id the id of the procedure.\n+     *\n+     * @param id        the id of the procedure.\n      * @param arguments the procedure arguments.\n-     * @param context the procedure call context.\n+     * @param context   the procedure call context.\n      * @return an iterator containing the procedure results.\n      * @throws ProcedureException if there was an exception thrown during procedure execution.\n      */\n-    RawIterator<AnyValue[], ProcedureException> procedureCallWrite( int id, AnyValue[] arguments, ProcedureCallContext context )\n-            throws ProcedureException;\n+    RawIterator<AnyValue[], ProcedureException> procedureCallWrite(int id, AnyValue[] arguments, ProcedureCallContext context)\n+      throws ProcedureException;\n \n     /**\n      * Invoke a schema write procedure by id.\n-     * @param id the id of the procedure.\n+     *\n+     * @param id        the id of the procedure.\n      * @param arguments the procedure arguments.\n-     * @param context the procedure call context.\n+     * @param context   the procedure call context.\n      * @return an iterator containing the procedure results.\n      * @throws ProcedureException if there was an exception thrown during procedure execution.\n      */\n-    RawIterator<AnyValue[], ProcedureException> procedureCallSchema( int id, AnyValue[] arguments, ProcedureCallContext context )\n-            throws ProcedureException;\n+    RawIterator<AnyValue[], ProcedureException> procedureCallSchema(int id, AnyValue[] arguments, ProcedureCallContext context)\n+      throws ProcedureException;\n \n     /**\n      * Invoke a dbms procedure by id.\n-     * @param id the id of the procedure.\n+     *\n+     * @param id        the id of the procedure.\n      * @param arguments the procedure arguments.\n-     * @param context the procedure call context.\n+     * @param context   the procedure call context.\n      * @return an iterator containing the procedure results.\n      * @throws ProcedureException if there was an exception thrown during procedure execution.\n      */\n-    RawIterator<AnyValue[], ProcedureException> procedureCallDbms( int id, AnyValue[] arguments, ProcedureCallContext context )\n-            throws ProcedureException;\n+    RawIterator<AnyValue[], ProcedureException> procedureCallDbms(int id, AnyValue[] arguments, ProcedureCallContext context)\n+      throws ProcedureException;\n \n-    /** Invoke a read-only function by id\n-     * @param id the id of the function.\n+    /**\n+     * Invoke a read-only function by id\n+     *\n+     * @param id        the id of the function.\n      * @param arguments the function arguments.\n      * @throws ProcedureException if there was an exception thrown during function execution.\n      */\n-    AnyValue functionCall( int id, AnyValue[] arguments ) throws ProcedureException;\n+    AnyValue functionCall(int id, AnyValue[] arguments) throws ProcedureException;\n \n     /**\n      * Create a read-only aggregation function by id\n+     *\n      * @param id the id of the function\n      * @return the aggregation function\n      * @throws ProcedureException if there was an exception thrown during function execution.\n      */\n-    UserAggregator aggregationFunction( int id ) throws ProcedureException;\n+    UserAggregator aggregationFunction(int id) throws ProcedureException;\n }\n",
            "diff_size": 36
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}