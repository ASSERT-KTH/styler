{
    "project_name": "graphfoundation-ongdb",
    "error_id": "967",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "90",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "182",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "131",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/967/Dijkstra.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/967/Dijkstra.java\nindex 36dc47a083e..4f469f7258d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/967/Dijkstra.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/967/Dijkstra.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphalgo.impl.path;\n \n import org.apache.commons.lang3.mutable.MutableDouble;\n@@ -52,17 +53,17 @@ import static org.neo4j.helpers.collection.Iterators.firstOrNull;\n /**\n  * Find (one or some) simple shortest path(s) between two nodes.\n  * Shortest referring to least cost evaluated by provided {@link CostEvaluator}.\n- *\n+ * <p>\n  * When asking for {@link #findAllPaths(Node, Node)} behaviour will depending on\n  * which {@link PathInterest} is used.\n  * Recommended option is\n- * {@link PathInterestFactory#numberOfShortest(double,int)} - defined number of shortest path in increasing order\n- *\n+ * {@link PathInterestFactory#numberOfShortest(double, int)} - defined number of shortest path in increasing order\n+ * <p>\n  * Also available\n  * {@link PathInterestFactory#allShortest(double)}          - Find all paths that are equal in length to shortest.\n- *                                                            {@link DijkstraBidirectional} does this faster.\n+ * {@link DijkstraBidirectional} does this faster.\n  * {@link PathInterestFactory#all(double)}                  - Find all paths in increasing order. This option has\n- *                                                            performance problem and is not recommended.\n+ * performance problem and is not recommended.\n  *\n  * @author Tobias Ivarsson\n  * @author Martin Neumann\n@@ -71,200 +72,201 @@ import static org.neo4j.helpers.collection.Iterators.firstOrNull;\n  */\n public class Dijkstra implements PathFinder<WeightedPath>\n {\n-    private final PathExpander expander;\n-    private final InitialBranchState stateFactory;\n-    private final CostEvaluator<Double> costEvaluator;\n-    private Traverser lastTraverser;\n-    private final double epsilon;\n-    private final PathInterest<Double> interest;\n-    private final boolean stateInUse;\n-    // TODO: Remove stateInUse when removing deprecated constructors that uses InitialBranchState.\n-    // TODO: ALso set traverser to always use DijkstaPathExpander and DijkstraEvaluator.\n+  private final PathExpander expander;\n+  private final InitialBranchState stateFactory;\n+  private final CostEvaluator<Double> costEvaluator;\n+  private Traverser lastTraverser;\n+  private final double epsilon;\n+  private final PathInterest<Double> interest;\n+  private final boolean stateInUse;\n+  // TODO: Remove stateInUse when removing deprecated constructors that uses InitialBranchState.\n+  // TODO: ALso set traverser to always use DijkstaPathExpander and DijkstraEvaluator.\n \n-    /**\n-     * @deprecated Dijkstra should not be used with state\n-     * Use {@link #Dijkstra(PathExpander, CostEvaluator)} instead.\n-     */\n-    @Deprecated\n-    public Dijkstra( PathExpander expander, InitialBranchState stateFactory, CostEvaluator<Double> costEvaluator )\n-    {\n-        this( expander, stateFactory, costEvaluator, true );\n-    }\n+  /**\n+   * @deprecated Dijkstra should not be used with state\n+   * Use {@link #Dijkstra(PathExpander, CostEvaluator)} instead.\n+   */\n+  @Deprecated\n+  public Dijkstra(PathExpander expander, InitialBranchState stateFactory, CostEvaluator<Double> costEvaluator)\n+  {\n+    this(expander, stateFactory, costEvaluator, true);\n+  }\n \n-    /**\n-     * @deprecated Dijkstra should not be used with state.\n-     * Use {@link #Dijkstra(PathExpander, CostEvaluator, PathInterest)} instead.\n-     */\n-    @Deprecated\n-    public Dijkstra( PathExpander expander, InitialBranchState stateFactory, CostEvaluator<Double> costEvaluator,\n-            boolean stopAfterLowestCost )\n-    {\n-        this.expander = expander;\n-        this.costEvaluator = costEvaluator;\n-        this.stateFactory = stateFactory;\n-        interest = stopAfterLowestCost ? PathInterestFactory.allShortest( NoneStrictMath.EPSILON ) :\n-                                         PathInterestFactory.all( NoneStrictMath.EPSILON );\n-        epsilon = NoneStrictMath.EPSILON;\n-        this.stateInUse = true;\n-    }\n+  /**\n+   * @deprecated Dijkstra should not be used with state.\n+   * Use {@link #Dijkstra(PathExpander, CostEvaluator, PathInterest)} instead.\n+   */\n+  @Deprecated\n+  public Dijkstra(PathExpander expander, InitialBranchState stateFactory, CostEvaluator<Double> costEvaluator,\n+                  boolean stopAfterLowestCost)\n+  {\n+    this.expander = expander;\n+    this.costEvaluator = costEvaluator;\n+    this.stateFactory = stateFactory;\n+    interest = stopAfterLowestCost ? PathInterestFactory.allShortest(NoneStrictMath.EPSILON) :\n+        PathInterestFactory.all(NoneStrictMath.EPSILON);\n+    epsilon = NoneStrictMath.EPSILON;\n+    this.stateInUse = true;\n+  }\n \n-    /**\n-     * See {@link #Dijkstra(PathExpander, CostEvaluator, double, PathInterest)}\n-     * Use {@link NoneStrictMath#EPSILON} as tolerance.\n-     * Use {@link PathInterestFactory#allShortest(double)} as PathInterest.\n-     */\n-    public Dijkstra( PathExpander expander, CostEvaluator<Double> costEvaluator )\n-    {\n-        this( expander, costEvaluator, PathInterestFactory.allShortest( NoneStrictMath.EPSILON ) );\n-    }\n+  /**\n+   * See {@link #Dijkstra(PathExpander, CostEvaluator, double, PathInterest)}\n+   * Use {@link NoneStrictMath#EPSILON} as tolerance.\n+   * Use {@link PathInterestFactory#allShortest(double)} as PathInterest.\n+   */\n+  public Dijkstra(PathExpander expander, CostEvaluator<Double> costEvaluator)\n+  {\n+    this(expander, costEvaluator, PathInterestFactory.allShortest(NoneStrictMath.EPSILON));\n+  }\n \n-    /**\n-     * @deprecated in favor for {@link #Dijkstra(PathExpander, CostEvaluator, PathInterest)}  }.\n-     */\n-    @Deprecated\n-    public Dijkstra( PathExpander expander, CostEvaluator<Double> costEvaluator,\n-            boolean stopAfterLowestCost )\n-    {\n-        this( expander, costEvaluator, NoneStrictMath.EPSILON, stopAfterLowestCost ?\n-                                                          PathInterestFactory.allShortest( NoneStrictMath.EPSILON ) :\n-                                                          PathInterestFactory.all( NoneStrictMath.EPSILON ) );\n-    }\n+  /**\n+   * @deprecated in favor for {@link #Dijkstra(PathExpander, CostEvaluator, PathInterest)}  }.\n+   */\n+  @Deprecated\n+  public Dijkstra(PathExpander expander, CostEvaluator<Double> costEvaluator,\n+                  boolean stopAfterLowestCost)\n+  {\n+    this(expander, costEvaluator, NoneStrictMath.EPSILON, stopAfterLowestCost ?\n+        PathInterestFactory.allShortest(NoneStrictMath.EPSILON) :\n+        PathInterestFactory.all(NoneStrictMath.EPSILON));\n+  }\n \n-    /**\n-     * See {@link #Dijkstra(PathExpander, CostEvaluator, double, PathInterest)}\n-     * Use {@link NoneStrictMath#EPSILON} as tolerance.\n-     */\n-    public Dijkstra( PathExpander expander, CostEvaluator<Double> costEvaluator, PathInterest<Double> interest )\n-    {\n-        this( expander, costEvaluator, NoneStrictMath.EPSILON, interest );\n-    }\n+  /**\n+   * See {@link #Dijkstra(PathExpander, CostEvaluator, double, PathInterest)}\n+   * Use {@link NoneStrictMath#EPSILON} as tolerance.\n+   */\n+  public Dijkstra(PathExpander expander, CostEvaluator<Double> costEvaluator, PathInterest<Double> interest)\n+  {\n+    this(expander, costEvaluator, NoneStrictMath.EPSILON, interest);\n+  }\n \n-    /**\n-     * Construct new dijkstra algorithm.\n-     * @param expander          {@link PathExpander} to be used to decide which relationships\n-     *                          to expand.\n-     * @param costEvaluator     {@link CostEvaluator} to be used to calculate cost of relationship\n-     * @param epsilon           The tolerance level to be used when comparing floating point numbers.\n-     * @param interest          {@link PathInterest} to be used when deciding if a path is interesting.\n-     *                          Recommend to use {@link PathInterestFactory} to get reliable behaviour.\n-     */\n-    public Dijkstra( PathExpander expander, CostEvaluator<Double> costEvaluator, double epsilon,\n-            PathInterest<Double> interest )\n-    {\n-        this.expander = expander;\n-        this.costEvaluator = costEvaluator;\n-        this.epsilon = epsilon;\n-        this.interest = interest;\n-        this.stateFactory = InitialBranchState.DOUBLE_ZERO;\n-        this.stateInUse = false;\n-    }\n+  /**\n+   * Construct new dijkstra algorithm.\n+   *\n+   * @param expander      {@link PathExpander} to be used to decide which relationships\n+   *                      to expand.\n+   * @param costEvaluator {@link CostEvaluator} to be used to calculate cost of relationship\n+   * @param epsilon       The tolerance level to be used when comparing floating point numbers.\n+   * @param interest      {@link PathInterest} to be used when deciding if a path is interesting.\n+   *                      Recommend to use {@link PathInterestFactory} to get reliable behaviour.\n+   */\n+  public Dijkstra(PathExpander expander, CostEvaluator<Double> costEvaluator, double epsilon,\n+                  PathInterest<Double> interest)\n+  {\n+    this.expander = expander;\n+    this.costEvaluator = costEvaluator;\n+    this.epsilon = epsilon;\n+    this.interest = interest;\n+    this.stateFactory = InitialBranchState.DOUBLE_ZERO;\n+    this.stateInUse = false;\n+  }\n \n-    @Override\n-    public Iterable<WeightedPath> findAllPaths( Node start, final Node end )\n+  @Override\n+  public Iterable<WeightedPath> findAllPaths(Node start, final Node end)\n+  {\n+    final Traverser traverser = traverser(start, end, interest);\n+    return () -> new WeightedPathIterator(traverser.iterator(), costEvaluator, epsilon,\n+        interest);\n+  }\n+\n+  private Traverser traverser(Node start, final Node end, PathInterest<Double> interest)\n+  {\n+    PathExpander dijkstraExpander;\n+    PathEvaluator dijkstraEvaluator;\n+    if (stateInUse)\n+    {\n+      dijkstraExpander = expander;\n+      dijkstraEvaluator = Evaluators.includeWhereEndNodeIs(end);\n+    } else\n     {\n-        final Traverser traverser = traverser( start, end, interest );\n-        return () -> new WeightedPathIterator( traverser.iterator(), costEvaluator, epsilon,\n-                interest );\n+      MutableDouble shortestSoFar = new MutableDouble(Double.MAX_VALUE);\n+      dijkstraExpander = new DijkstraPathExpander(expander, shortestSoFar, epsilon,\n+          interest.stopAfterLowestCost());\n+      dijkstraEvaluator = new DijkstraEvaluator(shortestSoFar, end, costEvaluator);\n     }\n+    lastTraverser = new MonoDirectionalTraversalDescription()\n+        .uniqueness(Uniqueness.NODE_PATH)\n+        .expand(dijkstraExpander, stateFactory)\n+        .order(new DijkstraSelectorFactory(interest, costEvaluator))\n+        .evaluator(dijkstraEvaluator).traverse(start);\n+    return lastTraverser;\n+  }\n+\n+  @Override\n+  public WeightedPath findSinglePath(Node start, Node end)\n+  {\n+    return firstOrNull(new WeightedPathIterator(\n+        traverser(start, end, single(epsilon)).iterator(), costEvaluator, epsilon, interest));\n+  }\n+\n+  @Override\n+  public TraversalMetadata metadata()\n+  {\n+    return lastTraverser.metadata();\n+  }\n+\n+  private static class DijkstraPathExpander implements PathExpander<Double>\n+  {\n+    protected final PathExpander source;\n+    protected MutableDouble shortestSoFar;\n+    private final double epsilon;\n+    protected final boolean stopAfterLowestCost;\n \n-    private Traverser traverser( Node start, final Node end, PathInterest<Double> interest )\n+    DijkstraPathExpander(final PathExpander source,\n+                         org.apache.commons.lang3.mutable.MutableDouble shortestSoFar, double epsilon, boolean stopAfterLowestCost)\n     {\n-        PathExpander dijkstraExpander;\n-        PathEvaluator dijkstraEvaluator;\n-        if ( stateInUse )\n-        {\n-            dijkstraExpander = expander;\n-            dijkstraEvaluator = Evaluators.includeWhereEndNodeIs( end );\n-        }\n-        else\n-        {\n-            MutableDouble shortestSoFar = new MutableDouble( Double.MAX_VALUE );\n-            dijkstraExpander = new DijkstraPathExpander( expander, shortestSoFar, epsilon,\n-                    interest.stopAfterLowestCost() );\n-            dijkstraEvaluator = new DijkstraEvaluator( shortestSoFar, end, costEvaluator );\n-        }\n-        lastTraverser = new MonoDirectionalTraversalDescription( )\n-                .uniqueness( Uniqueness.NODE_PATH )\n-                .expand( dijkstraExpander, stateFactory )\n-                .order( new DijkstraSelectorFactory( interest, costEvaluator ) )\n-                .evaluator( dijkstraEvaluator ).traverse( start );\n-        return lastTraverser;\n+      this.source = source;\n+      this.shortestSoFar = shortestSoFar;\n+      this.epsilon = epsilon;\n+      this.stopAfterLowestCost = stopAfterLowestCost;\n     }\n \n     @Override\n-    public WeightedPath findSinglePath( Node start, Node end )\n+    public Iterable<Relationship> expand(Path path, BranchState<Double> state)\n     {\n-        return firstOrNull( new WeightedPathIterator(\n-                traverser( start, end, single( epsilon ) ).iterator(), costEvaluator, epsilon, interest ) );\n+      if (NoneStrictMath.compare(state.getState(), shortestSoFar.doubleValue(), epsilon) > 0 && stopAfterLowestCost)\n+      {\n+        return Collections.emptyList();\n+      }\n+      return source.expand(path, state);\n     }\n \n     @Override\n-    public TraversalMetadata metadata()\n+    public PathExpander<Double> reverse()\n     {\n-        return lastTraverser.metadata();\n+      return new DijkstraPathExpander(source.reverse(), shortestSoFar, epsilon, stopAfterLowestCost);\n     }\n+  }\n \n-    private static class DijkstraPathExpander implements PathExpander<Double>\n-    {\n-        protected final PathExpander source;\n-        protected MutableDouble shortestSoFar;\n-        private final double epsilon;\n-        protected final boolean stopAfterLowestCost;\n-\n-        DijkstraPathExpander( final PathExpander source,\n-                org.apache.commons.lang3.mutable.MutableDouble shortestSoFar, double epsilon, boolean stopAfterLowestCost )\n-        {\n-            this.source = source;\n-            this.shortestSoFar = shortestSoFar;\n-            this.epsilon = epsilon;\n-            this.stopAfterLowestCost = stopAfterLowestCost;\n-        }\n-\n-        @Override\n-        public Iterable<Relationship> expand( Path path, BranchState<Double> state )\n-        {\n-            if ( NoneStrictMath.compare( state.getState(), shortestSoFar.doubleValue(), epsilon ) > 0 && stopAfterLowestCost )\n-            {\n-                return Collections.emptyList();\n-            }\n-            return source.expand( path, state );\n-        }\n+  private static class DijkstraEvaluator extends PathEvaluator.Adapter<Double>\n+  {\n+    private final MutableDouble shortestSoFar;\n+    private final Node endNode;\n+    private final CostEvaluator<Double> costEvaluator;\n \n-        @Override\n-        public PathExpander<Double> reverse()\n-        {\n-            return new DijkstraPathExpander( source.reverse(), shortestSoFar, epsilon, stopAfterLowestCost );\n-        }\n+    DijkstraEvaluator(MutableDouble shortestSoFar, Node endNode, CostEvaluator<Double> costEvaluator)\n+    {\n+      this.shortestSoFar = shortestSoFar;\n+      this.endNode = endNode;\n+      this.costEvaluator = costEvaluator;\n     }\n \n-    private static class DijkstraEvaluator extends PathEvaluator.Adapter<Double>\n+    @Override\n+    public Evaluation evaluate(Path path, BranchState<Double> state)\n     {\n-        private final MutableDouble shortestSoFar;\n-        private final Node endNode;\n-        private final CostEvaluator<Double> costEvaluator;\n-\n-        DijkstraEvaluator( MutableDouble shortestSoFar, Node endNode, CostEvaluator<Double> costEvaluator )\n-        {\n-            this.shortestSoFar = shortestSoFar;\n-            this.endNode = endNode;\n-            this.costEvaluator = costEvaluator;\n-        }\n-        @Override\n-        public Evaluation evaluate( Path path, BranchState<Double> state )\n-        {\n-            double nextState = state.getState();\n-            if ( path.length() > 0 )\n-            {\n-                nextState += costEvaluator.getCost( path.lastRelationship(), OUTGOING );\n-                state.setState( nextState );\n-            }\n-            if ( path.endNode().equals( endNode ) )\n-            {\n-                shortestSoFar.setValue( Math.min( shortestSoFar.doubleValue(), nextState ) );\n-                return Evaluation.INCLUDE_AND_PRUNE;\n-            }\n-            return Evaluation.EXCLUDE_AND_CONTINUE;\n-        }\n+      double nextState = state.getState();\n+      if (path.length() > 0)\n+      {\n+        nextState += costEvaluator.getCost(path.lastRelationship(), OUTGOING);\n+        state.setState(nextState);\n+      }\n+      if (path.endNode().equals(endNode))\n+      {\n+        shortestSoFar.setValue(Math.min(shortestSoFar.doubleValue(), nextState));\n+        return Evaluation.INCLUDE_AND_PRUNE;\n+      }\n+      return Evaluation.EXCLUDE_AND_CONTINUE;\n     }\n+  }\n \n }\n",
            "diff_size": 226
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "127",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 197).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/967/Dijkstra.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/967/Dijkstra.java\nindex 36dc47a083e..8d88dcc0c7f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/967/Dijkstra.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/967/Dijkstra.java\n@@ -102,9 +102,8 @@ public class Dijkstra implements PathFinder<WeightedPath>\n         this.expander = expander;\n         this.costEvaluator = costEvaluator;\n         this.stateFactory = stateFactory;\n-        interest = stopAfterLowestCost ? PathInterestFactory.allShortest( NoneStrictMath.EPSILON ) :\n-                                         PathInterestFactory.all( NoneStrictMath.EPSILON );\n-        epsilon = NoneStrictMath.EPSILON;\n+        interest = stopAfterLowestCost ? PathInterestFactory.allShortest( NoneStrictMath.EPSILON ) : PathInterestFactory.all( NoneStrictMath.EPSILON );\n+epsilon = NoneStrictMath.EPSILON;\n         this.stateInUse = true;\n     }\n \n@@ -125,10 +124,8 @@ public class Dijkstra implements PathFinder<WeightedPath>\n     public Dijkstra( PathExpander expander, CostEvaluator<Double> costEvaluator,\n             boolean stopAfterLowestCost )\n     {\n-        this( expander, costEvaluator, NoneStrictMath.EPSILON, stopAfterLowestCost ?\n-                                                          PathInterestFactory.allShortest( NoneStrictMath.EPSILON ) :\n-                                                          PathInterestFactory.all( NoneStrictMath.EPSILON ) );\n-    }\n+        this( expander, costEvaluator, NoneStrictMath.EPSILON, stopAfterLowestCost ? PathInterestFactory.allShortest( NoneStrictMath.EPSILON ) : PathInterestFactory.all( NoneStrictMath.EPSILON ) );\n+            }\n \n     /**\n      * See {@link #Dijkstra(PathExpander, CostEvaluator, double, PathInterest)}\n@@ -148,8 +145,7 @@ public class Dijkstra implements PathFinder<WeightedPath>\n      * @param interest          {@link PathInterest} to be used when deciding if a path is interesting.\n      *                          Recommend to use {@link PathInterestFactory} to get reliable behaviour.\n      */\n-    public Dijkstra( PathExpander expander, CostEvaluator<Double> costEvaluator, double epsilon,\n-            PathInterest<Double> interest )\n+    public Dijkstra( PathExpander expander, CostEvaluator<Double> costEvaluator, double epsilon, PathInterest<Double> interest )\n     {\n         this.expander = expander;\n         this.costEvaluator = costEvaluator;\n@@ -181,21 +177,18 @@ public class Dijkstra implements PathFinder<WeightedPath>\n             MutableDouble shortestSoFar = new MutableDouble( Double.MAX_VALUE );\n             dijkstraExpander = new DijkstraPathExpander( expander, shortestSoFar, epsilon,\n                     interest.stopAfterLowestCost() );\n-            dijkstraEvaluator = new DijkstraEvaluator( shortestSoFar, end, costEvaluator );\n+dijkstraEvaluator = new DijkstraEvaluator( shortestSoFar, end, costEvaluator );\n         }\n-        lastTraverser = new MonoDirectionalTraversalDescription( )\n-                .uniqueness( Uniqueness.NODE_PATH )\n-                .expand( dijkstraExpander, stateFactory )\n-                .order( new DijkstraSelectorFactory( interest, costEvaluator ) )\n-                .evaluator( dijkstraEvaluator ).traverse( start );\n-        return lastTraverser;\n+\n+lastTraverser = new MonoDirectionalTraversalDescription( ).uniqueness( Uniqueness.NODE_PATH ).expand( dijkstraExpander, stateFactory )\n+                .order( new DijkstraSelectorFactory( interest, costEvaluator ) ).evaluator( dijkstraEvaluator ).traverse( start );\n+return lastTraverser;\n     }\n \n     @Override\n     public WeightedPath findSinglePath( Node start, Node end )\n     {\n-        return firstOrNull( new WeightedPathIterator(\n-                traverser( start, end, single( epsilon ) ).iterator(), costEvaluator, epsilon, interest ) );\n+        return firstOrNull( new WeightedPathIterator( traverser( start, end, single( epsilon ) ).iterator(), costEvaluator, epsilon, interest ) );\n     }\n \n     @Override\n@@ -227,7 +220,8 @@ public class Dijkstra implements PathFinder<WeightedPath>\n             {\n                 return Collections.emptyList();\n             }\n-            return source.expand( path, state );\n+\n+return source.expand( path, state );\n         }\n \n         @Override\n@@ -249,7 +243,8 @@ public class Dijkstra implements PathFinder<WeightedPath>\n             this.endNode = endNode;\n             this.costEvaluator = costEvaluator;\n         }\n-        @Override\n+\n+@Override\n         public Evaluation evaluate( Path path, BranchState<Double> state )\n         {\n             double nextState = state.getState();\n@@ -258,13 +253,14 @@ public class Dijkstra implements PathFinder<WeightedPath>\n                 nextState += costEvaluator.getCost( path.lastRelationship(), OUTGOING );\n                 state.setState( nextState );\n             }\n-            if ( path.endNode().equals( endNode ) )\n+\n+if ( path.endNode().equals( endNode ) )\n             {\n                 shortestSoFar.setValue( Math.min( shortestSoFar.doubleValue(), nextState ) );\n                 return Evaluation.INCLUDE_AND_PRUNE;\n             }\n-            return Evaluation.EXCLUDE_AND_CONTINUE;\n+\n+return Evaluation.EXCLUDE_AND_CONTINUE;\n         }\n     }\n-\n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 28
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}