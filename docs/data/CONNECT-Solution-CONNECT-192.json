{
    "project_name": "CONNECT-Solution-CONNECT",
    "error_id": "192",
    "information": {
        "errors": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.docquery;\n\nimport gov.hhs.fha.nhinc.common.eventcommon.AdhocQueryRequestEventType;\nimport gov.hhs.fha.nhinc.common.eventcommon.AdhocQueryRequestMessageType;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/192/DocQueryPolicyChecker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/192/DocQueryPolicyChecker.java\nindex 5d710588d0e..aad948ad7a7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/192/DocQueryPolicyChecker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/192/DocQueryPolicyChecker.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.docquery;\n \n import gov.hhs.fha.nhinc.common.eventcommon.AdhocQueryRequestEventType;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/192/DocQueryPolicyChecker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/192/DocQueryPolicyChecker.java\nindex 5d710588d0e..d7d1fcbea78 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/192/DocQueryPolicyChecker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/192/DocQueryPolicyChecker.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.docquery;\n \n import gov.hhs.fha.nhinc.common.eventcommon.AdhocQueryRequestEventType;\n@@ -44,186 +45,192 @@ import oasis.names.tc.ebxml_regrep.xsd.query._3.AdhocQueryResponse;\n import oasis.names.tc.xacml._2_0.context.schema.os.DecisionType;\n \n /**\n- *\n  * @author JHOPPESC\n  */\n public class DocQueryPolicyChecker {\n \n-    /**\n-     * Checks to see if the security policy will permit the query to be executed.\n-     *\n-     * @param message The AdhocQuery request message.\n-     * @param assertion Assertion received.\n-     * @return Returns true if the security policy permits the query; false if denied.\n-     */\n-    public boolean checkIncomingPolicy(AdhocQueryRequest message, AssertionType assertion) {\n-        // convert the request message to an object recognized by the policy engine\n-        AdhocQueryRequestMessageType request = new AdhocQueryRequestMessageType();\n-        request.setAssertion(assertion);\n-        request.setAdhocQueryRequest(message);\n-\n-        AdhocQueryRequestEventType policyCheckReq = new AdhocQueryRequestEventType();\n-        policyCheckReq.setDirection(NhincConstants.POLICYENGINE_INBOUND_DIRECTION);\n-        policyCheckReq.setMessage(request);\n-\n-        CheckPolicyRequestType policyReq = buildPolicyRequest(policyCheckReq, assertion);\n-\n-        return checkPolicy(policyReq, assertion);\n-    }\n-\n-    /**\n-     * checks the outgoing policy for the Query.\n-     * @param message The AdhocQuery request message.\n-     * @param assertion Assertion received.\n-     * @return Returns true if the security policy permits the query; false if denied.\n-     */\n-    public boolean checkOutgoingPolicy(AdhocQueryRequest message, AssertionType assertion) {\n-        // convert the request message to an object recognized by the policy engine\n-        AdhocQueryRequestMessageType request = new AdhocQueryRequestMessageType();\n-        request.setAssertion(assertion);\n-        request.setAdhocQueryRequest(message);\n-\n-        AdhocQueryRequestEventType policyCheckReq = new AdhocQueryRequestEventType();\n-        policyCheckReq.setDirection(NhincConstants.POLICYENGINE_OUTBOUND_DIRECTION);\n-        policyCheckReq.setMessage(request);\n-\n-        CheckPolicyRequestType policyReq = buildPolicyRequest(policyCheckReq, assertion);\n-\n-        return checkPolicy(policyReq, assertion);\n-    }\n-\n-    /**\n-     * Chceks Incoming Response security policy.\n-     * @param message The AdhocQuery request message.\n-     * @param assertion Assertion received.\n-     * @return Returns true if the security policy permits the query; false if denied.\n-     */\n-    public boolean checkIncomingResponsePolicy(AdhocQueryResponse message, AssertionType assertion) {\n-        // convert the request message to an object recognized by the policy engine\n-        AdhocQueryResponseMessageType request = new AdhocQueryResponseMessageType();\n-        request.setAssertion(assertion);\n-        request.setAdhocQueryResponse(message);\n-\n-        AdhocQueryResultEventType policyCheckReq = new AdhocQueryResultEventType();\n-        policyCheckReq.setDirection(NhincConstants.POLICYENGINE_INBOUND_DIRECTION);\n-        policyCheckReq.setMessage(request);\n-\n-        CheckPolicyRequestType policyReq = buildPolicyRequest(policyCheckReq, assertion);\n-\n-        return checkPolicy(policyReq, assertion);\n-    }\n-\n-    /**\n-     * Chceks outgoing Response security policy.\n-     * @param message The AdhocQuery request message.\n-     * @param assertion Assertion received.\n-     * @param receiverHcid target communityID.\n-     * @return Returns true if the security policy permits the query; false if denied.\n-     */\n-    public boolean checkOutgoingResponsePolicy(AdhocQueryResponse message, AssertionType assertion,\n-            HomeCommunityType receiverHcid) {\n-        // convert the request message to an object recognized by the policy engine\n-        AdhocQueryResponseMessageType request = new AdhocQueryResponseMessageType();\n-        request.setAssertion(assertion);\n-        request.setAdhocQueryResponse(message);\n-\n-        AdhocQueryResultEventType policyCheckReq = new AdhocQueryResultEventType();\n-        policyCheckReq.setDirection(NhincConstants.POLICYENGINE_OUTBOUND_DIRECTION);\n-        policyCheckReq.setMessage(request);\n-        policyCheckReq.setReceivingHomeCommunity(receiverHcid);\n-\n-        CheckPolicyRequestType policyReq = buildPolicyRequest(policyCheckReq, assertion);\n-\n-        // call the policy engine to check the permission on the request\n-        return checkPolicy(policyReq, assertion);\n-    }\n-\n-    /**\n-     * Chceks outgoing Request security policy.\n-     * @param message The AdhocQuery request message.\n-     * @param assertion Assertion received.\n-     * @param receiverHcid target communityID.\n-     * @return Returns true if the security policy permits the query; false if denied.\n-     */\n-    public boolean checkOutgoingRequestPolicy(AdhocQueryRequest message, AssertionType assertion,\n-            HomeCommunityType receiverHcid) {\n-        // convert the request message to an object recognized by the policy engine\n-        AdhocQueryRequestMessageType request = new AdhocQueryRequestMessageType();\n-        request.setAssertion(assertion);\n-        request.setAdhocQueryRequest(message);\n-\n-        AdhocQueryRequestEventType policyCheckReq = new AdhocQueryRequestEventType();\n-        policyCheckReq.setDirection(NhincConstants.POLICYENGINE_OUTBOUND_DIRECTION);\n-        policyCheckReq.setMessage(request);\n-        policyCheckReq.setReceivingHomeCommunity(receiverHcid);\n-\n-        CheckPolicyRequestType policyReq = buildPolicyRequest(policyCheckReq, assertion);\n-\n-        // call the policy engine to check the permission on the request\n-        return checkPolicy(policyReq, assertion);\n-    }\n-\n-    /**\n-     * Build PolicyRequest.\n-     * @param policyCheckReq policyCheckRequest received.\n-     * @param assertion Assertion received.\n-     * @return policyReq built.\n-     */\n-    protected CheckPolicyRequestType buildPolicyRequest(AdhocQueryRequestEventType policyCheckReq,\n-            AssertionType assertion) {\n-        // call the policy engine to check the permission on the request\n-        CheckPolicyRequestType policyReq = getPolicyChecker().checkPolicyAdhocQuery(policyCheckReq);\n-        policyReq.setAssertion(assertion);\n-        return policyReq;\n-    }\n-\n-    /**\n-     * Build PolicyRequest.\n-     * @param policyCheckResult policyCheckRequest received.\n-     * @param assertion Assertion received.\n-     * @return policyReq built.\n-     */\n-    protected CheckPolicyRequestType buildPolicyRequest(AdhocQueryResultEventType policyCheckResult,\n-            AssertionType assertion) {\n-        // call the policy engine to check the permission on the request\n-        CheckPolicyRequestType policyReq = getPolicyChecker().checkPolicyAdhocQueryResponse(policyCheckResult);\n-        policyReq.setAssertion(assertion);\n-        return policyReq;\n-    }\n-\n-    /**\n-     * check the policy engine's response, return true if response = permit.\n-     *\n-     * @param policyReq policyreq received.\n-     * @param assertion Assertion received.\n-     * @return return true if response = permit\n-     */\n-    protected boolean checkPolicy(CheckPolicyRequestType policyReq, AssertionType assertion) {\n-        CheckPolicyResponseType policyResp = getPolicyEngine().checkPolicy(policyReq, assertion);\n-        return validatePolicyResponse(policyResp);\n-    }\n-\n-    /**\n-     * @return PolicyEngineChecker.\n-     */\n-    protected PolicyEngineChecker getPolicyChecker() {\n-        return new PolicyEngineChecker();\n-    }\n-\n-    /**\n-     * @return policyEngine Bean instantiated.\n-     */\n-    protected PolicyEngineProxy getPolicyEngine() {\n-        return (new PolicyEngineProxyObjectFactory()).getPolicyEngineProxy();\n-    }\n-\n-    /**\n-     * This method validates Policy in the Response.\n-     * @param policyResp policyResponse received.\n-     * @return true if Permit; else false.\n-     */\n-    protected boolean validatePolicyResponse(CheckPolicyResponseType policyResp) {\n-        return policyResp.getResponse() != null && NullChecker.isNotNullish(policyResp.getResponse().getResult())\n-                && policyResp.getResponse().getResult().get(0).getDecision() == DecisionType.PERMIT;\n-    }\n+  /**\n+   * Checks to see if the security policy will permit the query to be executed.\n+   *\n+   * @param message   The AdhocQuery request message.\n+   * @param assertion Assertion received.\n+   * @return Returns true if the security policy permits the query; false if denied.\n+   */\n+  public boolean checkIncomingPolicy(AdhocQueryRequest message, AssertionType assertion) {\n+    // convert the request message to an object recognized by the policy engine\n+    AdhocQueryRequestMessageType request = new AdhocQueryRequestMessageType();\n+    request.setAssertion(assertion);\n+    request.setAdhocQueryRequest(message);\n+\n+    AdhocQueryRequestEventType policyCheckReq = new AdhocQueryRequestEventType();\n+    policyCheckReq.setDirection(NhincConstants.POLICYENGINE_INBOUND_DIRECTION);\n+    policyCheckReq.setMessage(request);\n+\n+    CheckPolicyRequestType policyReq = buildPolicyRequest(policyCheckReq, assertion);\n+\n+    return checkPolicy(policyReq, assertion);\n+  }\n+\n+  /**\n+   * checks the outgoing policy for the Query.\n+   *\n+   * @param message   The AdhocQuery request message.\n+   * @param assertion Assertion received.\n+   * @return Returns true if the security policy permits the query; false if denied.\n+   */\n+  public boolean checkOutgoingPolicy(AdhocQueryRequest message, AssertionType assertion) {\n+    // convert the request message to an object recognized by the policy engine\n+    AdhocQueryRequestMessageType request = new AdhocQueryRequestMessageType();\n+    request.setAssertion(assertion);\n+    request.setAdhocQueryRequest(message);\n+\n+    AdhocQueryRequestEventType policyCheckReq = new AdhocQueryRequestEventType();\n+    policyCheckReq.setDirection(NhincConstants.POLICYENGINE_OUTBOUND_DIRECTION);\n+    policyCheckReq.setMessage(request);\n+\n+    CheckPolicyRequestType policyReq = buildPolicyRequest(policyCheckReq, assertion);\n+\n+    return checkPolicy(policyReq, assertion);\n+  }\n+\n+  /**\n+   * Chceks Incoming Response security policy.\n+   *\n+   * @param message   The AdhocQuery request message.\n+   * @param assertion Assertion received.\n+   * @return Returns true if the security policy permits the query; false if denied.\n+   */\n+  public boolean checkIncomingResponsePolicy(AdhocQueryResponse message, AssertionType assertion) {\n+    // convert the request message to an object recognized by the policy engine\n+    AdhocQueryResponseMessageType request = new AdhocQueryResponseMessageType();\n+    request.setAssertion(assertion);\n+    request.setAdhocQueryResponse(message);\n+\n+    AdhocQueryResultEventType policyCheckReq = new AdhocQueryResultEventType();\n+    policyCheckReq.setDirection(NhincConstants.POLICYENGINE_INBOUND_DIRECTION);\n+    policyCheckReq.setMessage(request);\n+\n+    CheckPolicyRequestType policyReq = buildPolicyRequest(policyCheckReq, assertion);\n+\n+    return checkPolicy(policyReq, assertion);\n+  }\n+\n+  /**\n+   * Chceks outgoing Response security policy.\n+   *\n+   * @param message      The AdhocQuery request message.\n+   * @param assertion    Assertion received.\n+   * @param receiverHcid target communityID.\n+   * @return Returns true if the security policy permits the query; false if denied.\n+   */\n+  public boolean checkOutgoingResponsePolicy(AdhocQueryResponse message, AssertionType assertion,\n+                                             HomeCommunityType receiverHcid) {\n+    // convert the request message to an object recognized by the policy engine\n+    AdhocQueryResponseMessageType request = new AdhocQueryResponseMessageType();\n+    request.setAssertion(assertion);\n+    request.setAdhocQueryResponse(message);\n+\n+    AdhocQueryResultEventType policyCheckReq = new AdhocQueryResultEventType();\n+    policyCheckReq.setDirection(NhincConstants.POLICYENGINE_OUTBOUND_DIRECTION);\n+    policyCheckReq.setMessage(request);\n+    policyCheckReq.setReceivingHomeCommunity(receiverHcid);\n+\n+    CheckPolicyRequestType policyReq = buildPolicyRequest(policyCheckReq, assertion);\n+\n+    // call the policy engine to check the permission on the request\n+    return checkPolicy(policyReq, assertion);\n+  }\n+\n+  /**\n+   * Chceks outgoing Request security policy.\n+   *\n+   * @param message      The AdhocQuery request message.\n+   * @param assertion    Assertion received.\n+   * @param receiverHcid target communityID.\n+   * @return Returns true if the security policy permits the query; false if denied.\n+   */\n+  public boolean checkOutgoingRequestPolicy(AdhocQueryRequest message, AssertionType assertion,\n+                                            HomeCommunityType receiverHcid) {\n+    // convert the request message to an object recognized by the policy engine\n+    AdhocQueryRequestMessageType request = new AdhocQueryRequestMessageType();\n+    request.setAssertion(assertion);\n+    request.setAdhocQueryRequest(message);\n+\n+    AdhocQueryRequestEventType policyCheckReq = new AdhocQueryRequestEventType();\n+    policyCheckReq.setDirection(NhincConstants.POLICYENGINE_OUTBOUND_DIRECTION);\n+    policyCheckReq.setMessage(request);\n+    policyCheckReq.setReceivingHomeCommunity(receiverHcid);\n+\n+    CheckPolicyRequestType policyReq = buildPolicyRequest(policyCheckReq, assertion);\n+\n+    // call the policy engine to check the permission on the request\n+    return checkPolicy(policyReq, assertion);\n+  }\n+\n+  /**\n+   * Build PolicyRequest.\n+   *\n+   * @param policyCheckReq policyCheckRequest received.\n+   * @param assertion      Assertion received.\n+   * @return policyReq built.\n+   */\n+  protected CheckPolicyRequestType buildPolicyRequest(AdhocQueryRequestEventType policyCheckReq,\n+                                                      AssertionType assertion) {\n+    // call the policy engine to check the permission on the request\n+    CheckPolicyRequestType policyReq = getPolicyChecker().checkPolicyAdhocQuery(policyCheckReq);\n+    policyReq.setAssertion(assertion);\n+    return policyReq;\n+  }\n+\n+  /**\n+   * Build PolicyRequest.\n+   *\n+   * @param policyCheckResult policyCheckRequest received.\n+   * @param assertion         Assertion received.\n+   * @return policyReq built.\n+   */\n+  protected CheckPolicyRequestType buildPolicyRequest(AdhocQueryResultEventType policyCheckResult,\n+                                                      AssertionType assertion) {\n+    // call the policy engine to check the permission on the request\n+    CheckPolicyRequestType policyReq = getPolicyChecker().checkPolicyAdhocQueryResponse(policyCheckResult);\n+    policyReq.setAssertion(assertion);\n+    return policyReq;\n+  }\n+\n+  /**\n+   * check the policy engine's response, return true if response = permit.\n+   *\n+   * @param policyReq policyreq received.\n+   * @param assertion Assertion received.\n+   * @return return true if response = permit\n+   */\n+  protected boolean checkPolicy(CheckPolicyRequestType policyReq, AssertionType assertion) {\n+    CheckPolicyResponseType policyResp = getPolicyEngine().checkPolicy(policyReq, assertion);\n+    return validatePolicyResponse(policyResp);\n+  }\n+\n+  /**\n+   * @return PolicyEngineChecker.\n+   */\n+  protected PolicyEngineChecker getPolicyChecker() {\n+    return new PolicyEngineChecker();\n+  }\n+\n+  /**\n+   * @return policyEngine Bean instantiated.\n+   */\n+  protected PolicyEngineProxy getPolicyEngine() {\n+    return (new PolicyEngineProxyObjectFactory()).getPolicyEngineProxy();\n+  }\n+\n+  /**\n+   * This method validates Policy in the Response.\n+   *\n+   * @param policyResp policyResponse received.\n+   * @return true if Permit; else false.\n+   */\n+  protected boolean validatePolicyResponse(CheckPolicyResponseType policyResp) {\n+    return policyResp.getResponse() != null && NullChecker.isNotNullish(policyResp.getResponse().getResult())\n+        && policyResp.getResponse().getResult().get(0).getDecision() == DecisionType.PERMIT;\n+  }\n }\n",
            "diff_size": 186
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "124",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "148",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "171",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "185",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "226",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 198).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/192/DocQueryPolicyChecker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/192/DocQueryPolicyChecker.java\nindex 5d710588d0e..10a875efef3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/192/DocQueryPolicyChecker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/192/DocQueryPolicyChecker.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.docquery;\n \n import gov.hhs.fha.nhinc.common.eventcommon.AdhocQueryRequestEventType;\n@@ -120,8 +121,7 @@ public class DocQueryPolicyChecker {\n      * @param receiverHcid target communityID.\n      * @return Returns true if the security policy permits the query; false if denied.\n      */\n-    public boolean checkOutgoingResponsePolicy(AdhocQueryResponse message, AssertionType assertion,\n-            HomeCommunityType receiverHcid) {\n+    public boolean checkOutgoingResponsePolicy(AdhocQueryResponse message, AssertionType assertion, HomeCommunityType receiverHcid) {\n         // convert the request message to an object recognized by the policy engine\n         AdhocQueryResponseMessageType request = new AdhocQueryResponseMessageType();\n         request.setAssertion(assertion);\n@@ -145,8 +145,7 @@ public class DocQueryPolicyChecker {\n      * @param receiverHcid target communityID.\n      * @return Returns true if the security policy permits the query; false if denied.\n      */\n-    public boolean checkOutgoingRequestPolicy(AdhocQueryRequest message, AssertionType assertion,\n-            HomeCommunityType receiverHcid) {\n+    public boolean checkOutgoingRequestPolicy(AdhocQueryRequest message, AssertionType assertion, HomeCommunityType receiverHcid) {\n         // convert the request message to an object recognized by the policy engine\n         AdhocQueryRequestMessageType request = new AdhocQueryRequestMessageType();\n         request.setAssertion(assertion);\n@@ -169,12 +168,12 @@ public class DocQueryPolicyChecker {\n      * @param assertion Assertion received.\n      * @return policyReq built.\n      */\n-    protected CheckPolicyRequestType buildPolicyRequest(AdhocQueryRequestEventType policyCheckReq,\n-            AssertionType assertion) {\n+    protected CheckPolicyRequestType buildPolicyRequest(AdhocQueryRequestEventType policyCheckReq, AssertionType assertion) {\n         // call the policy engine to check the permission on the request\n         CheckPolicyRequestType policyReq = getPolicyChecker().checkPolicyAdhocQuery(policyCheckReq);\n         policyReq.setAssertion(assertion);\n-        return policyReq;\n+\n+return policyReq;\n     }\n \n     /**\n@@ -183,12 +182,12 @@ public class DocQueryPolicyChecker {\n      * @param assertion Assertion received.\n      * @return policyReq built.\n      */\n-    protected CheckPolicyRequestType buildPolicyRequest(AdhocQueryResultEventType policyCheckResult,\n-            AssertionType assertion) {\n+    protected CheckPolicyRequestType buildPolicyRequest(AdhocQueryResultEventType policyCheckResult, AssertionType assertion) {\n         // call the policy engine to check the permission on the request\n         CheckPolicyRequestType policyReq = getPolicyChecker().checkPolicyAdhocQueryResponse(policyCheckResult);\n         policyReq.setAssertion(assertion);\n-        return policyReq;\n+\n+return policyReq;\n     }\n \n     /**\n@@ -200,7 +199,8 @@ public class DocQueryPolicyChecker {\n      */\n     protected boolean checkPolicy(CheckPolicyRequestType policyReq, AssertionType assertion) {\n         CheckPolicyResponseType policyResp = getPolicyEngine().checkPolicy(policyReq, assertion);\n-        return validatePolicyResponse(policyResp);\n+\n+return validatePolicyResponse(policyResp);\n     }\n \n     /**\n@@ -223,7 +223,6 @@ public class DocQueryPolicyChecker {\n      * @return true if Permit; else false.\n      */\n     protected boolean validatePolicyResponse(CheckPolicyResponseType policyResp) {\n-        return policyResp.getResponse() != null && NullChecker.isNotNullish(policyResp.getResponse().getResult())\n-                && policyResp.getResponse().getResult().get(0).getDecision() == DecisionType.PERMIT;\n+        return policyResp.getResponse() != null && NullChecker.isNotNullish(policyResp.getResponse().getResult()) && policyResp.getResponse().getResult().get(0).getDecision() == DecisionType.PERMIT;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "173",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "188",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "235",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 197).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "235",
                    "column": "114",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/192/DocQueryPolicyChecker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/192/DocQueryPolicyChecker.java\nindex 5d710588d0e..2fb7f915563 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/192/DocQueryPolicyChecker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/192/DocQueryPolicyChecker.java\n@@ -47,6 +47,8 @@ import oasis.names.tc.xacml._2_0.context.schema.os.DecisionType;\n  *\n  * @author JHOPPESC\n  */\n+\n+\n public class DocQueryPolicyChecker {\n \n     /**\n@@ -56,18 +58,17 @@ public class DocQueryPolicyChecker {\n      * @param assertion Assertion received.\n      * @return Returns true if the security policy permits the query; false if denied.\n      */\n+\n+\n     public boolean checkIncomingPolicy(AdhocQueryRequest message, AssertionType assertion) {\n         // convert the request message to an object recognized by the policy engine\n         AdhocQueryRequestMessageType request = new AdhocQueryRequestMessageType();\n         request.setAssertion(assertion);\n         request.setAdhocQueryRequest(message);\n-\n         AdhocQueryRequestEventType policyCheckReq = new AdhocQueryRequestEventType();\n         policyCheckReq.setDirection(NhincConstants.POLICYENGINE_INBOUND_DIRECTION);\n         policyCheckReq.setMessage(request);\n-\n         CheckPolicyRequestType policyReq = buildPolicyRequest(policyCheckReq, assertion);\n-\n         return checkPolicy(policyReq, assertion);\n     }\n \n@@ -77,18 +78,17 @@ public class DocQueryPolicyChecker {\n      * @param assertion Assertion received.\n      * @return Returns true if the security policy permits the query; false if denied.\n      */\n+\n+\n     public boolean checkOutgoingPolicy(AdhocQueryRequest message, AssertionType assertion) {\n         // convert the request message to an object recognized by the policy engine\n         AdhocQueryRequestMessageType request = new AdhocQueryRequestMessageType();\n         request.setAssertion(assertion);\n         request.setAdhocQueryRequest(message);\n-\n         AdhocQueryRequestEventType policyCheckReq = new AdhocQueryRequestEventType();\n         policyCheckReq.setDirection(NhincConstants.POLICYENGINE_OUTBOUND_DIRECTION);\n         policyCheckReq.setMessage(request);\n-\n         CheckPolicyRequestType policyReq = buildPolicyRequest(policyCheckReq, assertion);\n-\n         return checkPolicy(policyReq, assertion);\n     }\n \n@@ -98,18 +98,17 @@ public class DocQueryPolicyChecker {\n      * @param assertion Assertion received.\n      * @return Returns true if the security policy permits the query; false if denied.\n      */\n+\n+\n     public boolean checkIncomingResponsePolicy(AdhocQueryResponse message, AssertionType assertion) {\n         // convert the request message to an object recognized by the policy engine\n         AdhocQueryResponseMessageType request = new AdhocQueryResponseMessageType();\n         request.setAssertion(assertion);\n         request.setAdhocQueryResponse(message);\n-\n         AdhocQueryResultEventType policyCheckReq = new AdhocQueryResultEventType();\n         policyCheckReq.setDirection(NhincConstants.POLICYENGINE_INBOUND_DIRECTION);\n         policyCheckReq.setMessage(request);\n-\n         CheckPolicyRequestType policyReq = buildPolicyRequest(policyCheckReq, assertion);\n-\n         return checkPolicy(policyReq, assertion);\n     }\n \n@@ -120,18 +119,18 @@ public class DocQueryPolicyChecker {\n      * @param receiverHcid target communityID.\n      * @return Returns true if the security policy permits the query; false if denied.\n      */\n-    public boolean checkOutgoingResponsePolicy(AdhocQueryResponse message, AssertionType assertion,\n-            HomeCommunityType receiverHcid) {\n+\n+\n+    public boolean checkOutgoingResponsePolicy(AdhocQueryResponse message,\n+        AssertionType assertion, HomeCommunityType receiverHcid) {\n         // convert the request message to an object recognized by the policy engine\n         AdhocQueryResponseMessageType request = new AdhocQueryResponseMessageType();\n         request.setAssertion(assertion);\n         request.setAdhocQueryResponse(message);\n-\n         AdhocQueryResultEventType policyCheckReq = new AdhocQueryResultEventType();\n         policyCheckReq.setDirection(NhincConstants.POLICYENGINE_OUTBOUND_DIRECTION);\n         policyCheckReq.setMessage(request);\n         policyCheckReq.setReceivingHomeCommunity(receiverHcid);\n-\n         CheckPolicyRequestType policyReq = buildPolicyRequest(policyCheckReq, assertion);\n \n         // call the policy engine to check the permission on the request\n@@ -145,18 +144,18 @@ public class DocQueryPolicyChecker {\n      * @param receiverHcid target communityID.\n      * @return Returns true if the security policy permits the query; false if denied.\n      */\n-    public boolean checkOutgoingRequestPolicy(AdhocQueryRequest message, AssertionType assertion,\n-            HomeCommunityType receiverHcid) {\n+\n+\n+    public boolean checkOutgoingRequestPolicy(AdhocQueryRequest message,\n+        AssertionType assertion, HomeCommunityType receiverHcid) {\n         // convert the request message to an object recognized by the policy engine\n         AdhocQueryRequestMessageType request = new AdhocQueryRequestMessageType();\n         request.setAssertion(assertion);\n         request.setAdhocQueryRequest(message);\n-\n         AdhocQueryRequestEventType policyCheckReq = new AdhocQueryRequestEventType();\n         policyCheckReq.setDirection(NhincConstants.POLICYENGINE_OUTBOUND_DIRECTION);\n         policyCheckReq.setMessage(request);\n         policyCheckReq.setReceivingHomeCommunity(receiverHcid);\n-\n         CheckPolicyRequestType policyReq = buildPolicyRequest(policyCheckReq, assertion);\n \n         // call the policy engine to check the permission on the request\n@@ -169,8 +168,9 @@ public class DocQueryPolicyChecker {\n      * @param assertion Assertion received.\n      * @return policyReq built.\n      */\n-    protected CheckPolicyRequestType buildPolicyRequest(AdhocQueryRequestEventType policyCheckReq,\n-            AssertionType assertion) {\n+\n+\n+    protected CheckPolicyRequestType buildPolicyRequest(AdhocQueryRequestEventType policyCheckReq, AssertionType assertion) {\n         // call the policy engine to check the permission on the request\n         CheckPolicyRequestType policyReq = getPolicyChecker().checkPolicyAdhocQuery(policyCheckReq);\n         policyReq.setAssertion(assertion);\n@@ -183,8 +183,9 @@ public class DocQueryPolicyChecker {\n      * @param assertion Assertion received.\n      * @return policyReq built.\n      */\n-    protected CheckPolicyRequestType buildPolicyRequest(AdhocQueryResultEventType policyCheckResult,\n-            AssertionType assertion) {\n+\n+\n+    protected CheckPolicyRequestType buildPolicyRequest(AdhocQueryResultEventType policyCheckResult, AssertionType assertion) {\n         // call the policy engine to check the permission on the request\n         CheckPolicyRequestType policyReq = getPolicyChecker().checkPolicyAdhocQueryResponse(policyCheckResult);\n         policyReq.setAssertion(assertion);\n@@ -198,6 +199,8 @@ public class DocQueryPolicyChecker {\n      * @param assertion Assertion received.\n      * @return return true if response = permit\n      */\n+\n+\n     protected boolean checkPolicy(CheckPolicyRequestType policyReq, AssertionType assertion) {\n         CheckPolicyResponseType policyResp = getPolicyEngine().checkPolicy(policyReq, assertion);\n         return validatePolicyResponse(policyResp);\n@@ -206,6 +209,8 @@ public class DocQueryPolicyChecker {\n     /**\n      * @return PolicyEngineChecker.\n      */\n+\n+\n     protected PolicyEngineChecker getPolicyChecker() {\n         return new PolicyEngineChecker();\n     }\n@@ -213,6 +218,8 @@ public class DocQueryPolicyChecker {\n     /**\n      * @return policyEngine Bean instantiated.\n      */\n+\n+\n     protected PolicyEngineProxy getPolicyEngine() {\n         return (new PolicyEngineProxyObjectFactory()).getPolicyEngineProxy();\n     }\n@@ -222,8 +229,10 @@ public class DocQueryPolicyChecker {\n      * @param policyResp policyResponse received.\n      * @return true if Permit; else false.\n      */\n+\n+\n     protected boolean validatePolicyResponse(CheckPolicyResponseType policyResp) {\n-        return policyResp.getResponse() != null && NullChecker.isNotNullish(policyResp.getResponse().getResult())\n-                && policyResp.getResponse().getResult().get(0).getDecision() == DecisionType.PERMIT;\n+        return policyResp.getResponse() != null && NullChecker.isNotNullish(policyResp.getResponse().getResult())&& policyResp.getResponse().getResult().get(0).getDecision() == DecisionType.PERMIT;\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 47
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/192/DocQueryPolicyChecker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/192/DocQueryPolicyChecker.java\nindex 5d710588d0e..aad948ad7a7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/192/DocQueryPolicyChecker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/192/DocQueryPolicyChecker.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.docquery;\n \n import gov.hhs.fha.nhinc.common.eventcommon.AdhocQueryRequestEventType;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}