{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3901",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "35",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "35",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "37",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "37",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "65",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3901/ClosestNewLineChunker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3901/ClosestNewLineChunker.java\nindex 321837369c9..5525e38f73b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3901/ClosestNewLineChunker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3901/ClosestNewLineChunker.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.csv.reader;\n \n import java.io.IOException;\n@@ -31,62 +32,61 @@ import org.neo4j.csv.reader.Source.Chunk;\n  */\n public class ClosestNewLineChunker extends CharReadableChunker\n {\n-    public ClosestNewLineChunker( CharReadable reader, int chunkSize )\n-    {\n-        super( reader, chunkSize );\n+  public ClosestNewLineChunker(CharReadable reader, int chunkSize)\n+  {\n+    super(reader, chunkSize);\n+  }\n+\n+  /**\n+   * Fills the given chunk with data from the underlying {@link CharReadable}, up to a good cut-off point\n+   * in the vicinity of the buffer size.\n+   *\n+   * @param chunk {@link Chunk} to read data into.\n+   * @return the next {@link Chunk} of data, ending with a new-line or not for the last chunk.\n+   * @throws IOException on reading error.\n+   */\n+  @Override\n+  public synchronized boolean nextChunk(Chunk chunk) throws IOException\n+  {\n+    ChunkImpl into = (ChunkImpl) chunk;\n+    int offset = fillFromBackBuffer(into.buffer);\n+    int leftToRead = chunkSize - offset;\n+    int read = reader.read(into.buffer, offset, leftToRead);\n+    if (read == leftToRead)\n+    {   // Read from reader. We read data into the whole buffer and there seems to be more data left in reader.\n+      // This means we're most likely not at the end so seek backwards to the last newline character and\n+      // put the characters after the newline character(s) into the back buffer.\n+      int newlineOffset = offsetOfLastNewline(into.buffer);\n+      if (newlineOffset > -1)\n+      {   // We found a newline character some characters back\n+        read -= storeInBackBuffer(into.data(), newlineOffset + 1, chunkSize - (newlineOffset + 1));\n+      } else\n+      {   // There was no newline character, isn't that weird?\n+        throw new IllegalStateException(\"Weird input data, no newline character in the whole buffer \" +\n+            chunkSize + \", not supported a.t.m.\");\n+      }\n     }\n+    // else we couldn't completely fill the buffer, this means that we're at the end of a data source, we're good.\n \n-    /**\n-     * Fills the given chunk with data from the underlying {@link CharReadable}, up to a good cut-off point\n-     * in the vicinity of the buffer size.\n-     *\n-     * @param chunk {@link Chunk} to read data into.\n-     * @return the next {@link Chunk} of data, ending with a new-line or not for the last chunk.\n-     * @throws IOException on reading error.\n-     */\n-    @Override\n-    public synchronized boolean nextChunk( Chunk chunk ) throws IOException\n+    if (read > 0)\n     {\n-        ChunkImpl into = (ChunkImpl) chunk;\n-        int offset = fillFromBackBuffer( into.buffer );\n-        int leftToRead = chunkSize - offset;\n-        int read = reader.read( into.buffer, offset, leftToRead );\n-        if ( read == leftToRead )\n-        {   // Read from reader. We read data into the whole buffer and there seems to be more data left in reader.\n-            // This means we're most likely not at the end so seek backwards to the last newline character and\n-            // put the characters after the newline character(s) into the back buffer.\n-            int newlineOffset = offsetOfLastNewline( into.buffer );\n-            if ( newlineOffset > -1 )\n-            {   // We found a newline character some characters back\n-                read -= storeInBackBuffer( into.data(), newlineOffset + 1, chunkSize - (newlineOffset + 1) );\n-            }\n-            else\n-            {   // There was no newline character, isn't that weird?\n-                throw new IllegalStateException( \"Weird input data, no newline character in the whole buffer \" +\n-                        chunkSize + \", not supported a.t.m.\" );\n-            }\n-        }\n-        // else we couldn't completely fill the buffer, this means that we're at the end of a data source, we're good.\n-\n-        if ( read > 0 )\n-        {\n-            offset += read;\n-            position += read;\n-            into.initialize( offset, reader.sourceDescription() );\n-            return true;\n-        }\n-        return false;\n+      offset += read;\n+      position += read;\n+      into.initialize(offset, reader.sourceDescription());\n+      return true;\n     }\n+    return false;\n+  }\n \n-    private static int offsetOfLastNewline( char[] buffer )\n+  private static int offsetOfLastNewline(char[] buffer)\n+  {\n+    for (int i = buffer.length - 1; i >= 0; i--)\n     {\n-        for ( int i = buffer.length - 1; i >= 0; i-- )\n-        {\n-            if ( buffer[i] == '\\n' )\n-            {\n-                return i;\n-            }\n-        }\n-        return -1;\n+      if (buffer[i] == '\\n')\n+      {\n+        return i;\n+      }\n     }\n+    return -1;\n+  }\n }\n",
            "diff_size": 89
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3901/ClosestNewLineChunker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3901/ClosestNewLineChunker.java\nindex 321837369c9..17e2e456257 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3901/ClosestNewLineChunker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3901/ClosestNewLineChunker.java\n@@ -52,19 +52,21 @@ public class ClosestNewLineChunker extends CharReadableChunker\n         int leftToRead = chunkSize - offset;\n         int read = reader.read( into.buffer, offset, leftToRead );\n         if ( read == leftToRead )\n-        {   // Read from reader. We read data into the whole buffer and there seems to be more data left in reader.\n+        {\n+    // Read from reader. We read data into the whole buffer and there seems to be more data left in reader.\n             // This means we're most likely not at the end so seek backwards to the last newline character and\n             // put the characters after the newline character(s) into the back buffer.\n             int newlineOffset = offsetOfLastNewline( into.buffer );\n             if ( newlineOffset > -1 )\n-            {   // We found a newline character some characters back\n-                read -= storeInBackBuffer( into.data(), newlineOffset + 1, chunkSize - (newlineOffset + 1) );\n+            {\n+    // We found a newline character some characters back\n+                read -= storeInBackBuffer( into.data(), newlineOffset + 1, chunkSize - (newlineOffset + 1 ) );\n             }\n             else\n-            {   // There was no newline character, isn't that weird?\n-                throw new IllegalStateException( \"Weird input data, no newline character in the whole buffer \" +\n-                        chunkSize + \", not supported a.t.m.\" );\n-            }\n+            {\n+    // There was no newline character, isn't that weird?\n+                throw new IllegalStateException( \"Weird input data, no newline character in the whole buffer \" + chunkSize + \", not supported a.t.m.\" );\n+    }\n         }\n         // else we couldn't completely fill the buffer, this means that we're at the end of a data source, we're good.\n \n@@ -89,4 +91,4 @@ public class ClosestNewLineChunker extends CharReadableChunker\n         }\n         return -1;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}