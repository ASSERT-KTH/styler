{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1325",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "66",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "91",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "320",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "320",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "336",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "336",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1325/DumpLogicalLog.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1325/DumpLogicalLog.java\nindex e50faa505b3..f8821c572fd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1325/DumpLogicalLog.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1325/DumpLogicalLog.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.tools.dump;\n \n import java.io.File;\n@@ -55,285 +56,285 @@ import static org.neo4j.helpers.Format.DEFAULT_TIME_ZONE;\n  */\n public class DumpLogicalLog\n {\n-    private static final String TO_FILE = \"tofile\";\n-    private static final String TX_FILTER = \"txfilter\";\n-    private static final String CC_FILTER = \"ccfilter\";\n-    private static final String LENIENT = \"lenient\";\n-\n-    private final FileSystemAbstraction fileSystem;\n+  private static final String TO_FILE = \"tofile\";\n+  private static final String TX_FILTER = \"txfilter\";\n+  private static final String CC_FILTER = \"ccfilter\";\n+  private static final String LENIENT = \"lenient\";\n \n-    public DumpLogicalLog( FileSystemAbstraction fileSystem )\n-    {\n-        this.fileSystem = fileSystem;\n-    }\n+  private final FileSystemAbstraction fileSystem;\n \n-    public void dump( String filenameOrDirectory, PrintStream out,\n-            Predicate<LogEntry[]> filter, Function<LogEntry,String> serializer,\n-            InvalidLogEntryHandler invalidLogEntryHandler ) throws IOException\n-    {\n-        TransactionLogAnalyzer.analyze( fileSystem, new File( filenameOrDirectory ), invalidLogEntryHandler, new Monitor()\n-        {\n-            @Override\n-            public void logFile( File file, long logVersion ) throws IOException\n-            {\n-                LogHeader logHeader = LogHeaderReader.readLogHeader( fileSystem, file );\n-                out.println( \"=== \" + file.getAbsolutePath() + \"[\" + logHeader + \"] ===\" );\n-            }\n-\n-            @Override\n-            public void transaction( LogEntry[] transactionEntries )\n-            {\n-                if ( filter == null || filter.test( transactionEntries ) )\n-                {\n-                    for ( LogEntry entry : transactionEntries )\n-                    {\n-                        out.println( serializer.apply( entry ) );\n-                    }\n-                }\n-            }\n-\n-            @Override\n-            public void checkpoint( CheckPoint checkpoint, LogPosition checkpointEntryPosition )\n-            {\n-                if ( filter == null || filter.test( new LogEntry[] {checkpoint} ) )\n-                {\n-                    out.println( serializer.apply( checkpoint ) );\n-                }\n-            }\n-        } );\n-    }\n+  public DumpLogicalLog(FileSystemAbstraction fileSystem)\n+  {\n+    this.fileSystem = fileSystem;\n+  }\n \n-    private static class TransactionRegexCriteria implements Predicate<LogEntry[]>\n+  public void dump(String filenameOrDirectory, PrintStream out,\n+                   Predicate<LogEntry[]> filter, Function<LogEntry, String> serializer,\n+                   InvalidLogEntryHandler invalidLogEntryHandler) throws IOException\n+  {\n+    TransactionLogAnalyzer.analyze(fileSystem, new File(filenameOrDirectory), invalidLogEntryHandler, new Monitor()\n     {\n-        private final Pattern pattern;\n-        private final TimeZone timeZone;\n+      @Override\n+      public void logFile(File file, long logVersion) throws IOException\n+      {\n+        LogHeader logHeader = LogHeaderReader.readLogHeader(fileSystem, file);\n+        out.println(\"=== \" + file.getAbsolutePath() + \"[\" + logHeader + \"] ===\");\n+      }\n \n-        TransactionRegexCriteria( String regex, TimeZone timeZone )\n+      @Override\n+      public void transaction(LogEntry[] transactionEntries)\n+      {\n+        if (filter == null || filter.test(transactionEntries))\n         {\n-            this.pattern = Pattern.compile( regex );\n-            this.timeZone = timeZone;\n+          for (LogEntry entry : transactionEntries)\n+          {\n+            out.println(serializer.apply(entry));\n+          }\n         }\n+      }\n \n-        @Override\n-        public boolean test( LogEntry[] transaction )\n+      @Override\n+      public void checkpoint(CheckPoint checkpoint, LogPosition checkpointEntryPosition)\n+      {\n+        if (filter == null || filter.test(new LogEntry[] {checkpoint}))\n         {\n-            for ( LogEntry entry : transaction )\n-            {\n-                if ( pattern.matcher( entry.toString( timeZone ) ).find() )\n-                {\n-                    return true;\n-                }\n-            }\n-            return false;\n+          out.println(serializer.apply(checkpoint));\n         }\n-    }\n-\n-    public static class ConsistencyCheckOutputCriteria implements Predicate<LogEntry[]>, Function<LogEntry,String>\n-    {\n-        private final TimeZone timeZone;\n-        private final ReportInconsistencies inconsistencies;\n+      }\n+    });\n+  }\n \n-        public ConsistencyCheckOutputCriteria( String ccFile, TimeZone timeZone ) throws IOException\n-        {\n-            this.timeZone = timeZone;\n-            inconsistencies = new ReportInconsistencies();\n-            new InconsistencyReportReader( inconsistencies ).read( new File( ccFile ) );\n-        }\n+  private static class TransactionRegexCriteria implements Predicate<LogEntry[]>\n+  {\n+    private final Pattern pattern;\n+    private final TimeZone timeZone;\n \n-        @Override\n-        public boolean test( LogEntry[] transaction )\n-        {\n-            for ( LogEntry logEntry : transaction )\n-            {\n-                if ( matches( logEntry ) )\n-                {\n-                    return true;\n-                }\n-            }\n-            return false;\n-        }\n+    TransactionRegexCriteria(String regex, TimeZone timeZone)\n+    {\n+      this.pattern = Pattern.compile(regex);\n+      this.timeZone = timeZone;\n+    }\n \n-        private boolean matches( LogEntry logEntry )\n+    @Override\n+    public boolean test(LogEntry[] transaction)\n+    {\n+      for (LogEntry entry : transaction)\n+      {\n+        if (pattern.matcher(entry.toString(timeZone)).find())\n         {\n-            if ( logEntry instanceof LogEntryCommand )\n-            {\n-                if ( matches( ((LogEntryCommand)logEntry).getCommand() ) )\n-                {\n-                    return true;\n-                }\n-            }\n-            return false;\n+          return true;\n         }\n+      }\n+      return false;\n+    }\n+  }\n \n-        private boolean matches( StorageCommand command )\n-        {\n-            if ( command instanceof NodeCommand )\n-            {\n-                return inconsistencies.containsNodeId( ((NodeCommand) command).getKey() );\n-            }\n-            if ( command instanceof RelationshipCommand )\n-            {\n-                return inconsistencies.containsRelationshipId( ((RelationshipCommand) command).getKey() );\n-            }\n-            if ( command instanceof PropertyCommand )\n-            {\n-                return inconsistencies.containsPropertyId( ((PropertyCommand) command).getKey() );\n-            }\n-            if ( command instanceof RelationshipGroupCommand )\n-            {\n-                return inconsistencies.containsRelationshipGroupId( ((RelationshipGroupCommand) command).getKey() );\n-            }\n-            if ( command instanceof SchemaRuleCommand )\n-            {\n-                return inconsistencies.containsSchemaIndexId( ((SchemaRuleCommand) command).getKey() );\n-            }\n-            return false;\n-        }\n+  public static class ConsistencyCheckOutputCriteria implements Predicate<LogEntry[]>, Function<LogEntry, String>\n+  {\n+    private final TimeZone timeZone;\n+    private final ReportInconsistencies inconsistencies;\n \n-        @Override\n-        public String apply( LogEntry logEntry )\n-        {\n-            String result = logEntry.toString( timeZone );\n-            if ( matches( logEntry ) )\n-            {\n-                result += \"  <----\";\n-            }\n-            return result;\n-        }\n+    public ConsistencyCheckOutputCriteria(String ccFile, TimeZone timeZone) throws IOException\n+    {\n+      this.timeZone = timeZone;\n+      inconsistencies = new ReportInconsistencies();\n+      new InconsistencyReportReader(inconsistencies).read(new File(ccFile));\n     }\n \n-    /**\n-     * Usage: [--txfilter \"regex\"] [--ccfilter cc-report-file] [--tofile] [--lenient] storeDirOrFile1 storeDirOrFile2 ...\n-     *\n-     * --txfilter\n-     * Will match regex against each {@link LogEntry} and if there is a match,\n-     * include transaction containing the LogEntry in the dump.\n-     * regex matching is done with {@link Pattern}\n-     *\n-     * --ccfilter\n-     * Will look at an inconsistency report file from consistency checker and\n-     * include transactions that are relevant to them\n-     *\n-     * --tofile\n-     * Redirects output to dump-logical-log.txt in the store directory\n-     *\n-     * --lenient\n-     * Will attempt to read log entries even if some look broken along the way\n-     */\n-    public static void main( String[] args ) throws IOException\n+    @Override\n+    public boolean test(LogEntry[] transaction)\n     {\n-        Args arguments = Args.withFlags( TO_FILE, LENIENT ).parse( args );\n-        TimeZone timeZone = parseTimeZoneConfig( arguments );\n-        Predicate<LogEntry[]> filter = parseFilter( arguments, timeZone );\n-        Function<LogEntry,String> serializer = parseSerializer( filter, timeZone );\n-        Function<PrintStream,InvalidLogEntryHandler> invalidLogEntryHandler = parseInvalidLogEntryHandler( arguments );\n-        try ( FileSystemAbstraction fileSystem = new DefaultFileSystemAbstraction();\n-              Printer printer = getPrinter( arguments ) )\n+      for (LogEntry logEntry : transaction)\n+      {\n+        if (matches(logEntry))\n         {\n-            for ( String fileAsString : arguments.orphans() )\n-            {\n-                PrintStream out = printer.getFor( fileAsString );\n-                new DumpLogicalLog( fileSystem ).dump( fileAsString, out, filter, serializer,\n-                        invalidLogEntryHandler.apply( out ) );\n-            }\n+          return true;\n         }\n+      }\n+      return false;\n     }\n \n-    private static Function<PrintStream,InvalidLogEntryHandler> parseInvalidLogEntryHandler( Args arguments )\n+    private boolean matches(LogEntry logEntry)\n     {\n-        if ( arguments.getBoolean( LENIENT ) )\n+      if (logEntry instanceof LogEntryCommand)\n+      {\n+        if (matches(((LogEntryCommand) logEntry).getCommand()))\n         {\n-            return LenientInvalidLogEntryHandler::new;\n+          return true;\n         }\n-        return out -> InvalidLogEntryHandler.STRICT;\n+      }\n+      return false;\n     }\n \n-    @SuppressWarnings( \"unchecked\" )\n-    private static Function<LogEntry,String> parseSerializer( Predicate<LogEntry[]> filter, TimeZone timeZone )\n+    private boolean matches(StorageCommand command)\n     {\n-        if ( filter instanceof Function )\n-        {\n-            return (Function<LogEntry,String>) filter;\n-        }\n-        return logEntry -> logEntry.toString( timeZone );\n+      if (command instanceof NodeCommand)\n+      {\n+        return inconsistencies.containsNodeId(((NodeCommand) command).getKey());\n+      }\n+      if (command instanceof RelationshipCommand)\n+      {\n+        return inconsistencies.containsRelationshipId(((RelationshipCommand) command).getKey());\n+      }\n+      if (command instanceof PropertyCommand)\n+      {\n+        return inconsistencies.containsPropertyId(((PropertyCommand) command).getKey());\n+      }\n+      if (command instanceof RelationshipGroupCommand)\n+      {\n+        return inconsistencies.containsRelationshipGroupId(((RelationshipGroupCommand) command).getKey());\n+      }\n+      if (command instanceof SchemaRuleCommand)\n+      {\n+        return inconsistencies.containsSchemaIndexId(((SchemaRuleCommand) command).getKey());\n+      }\n+      return false;\n     }\n \n-    private static Predicate<LogEntry[]> parseFilter( Args arguments, TimeZone timeZone ) throws IOException\n+    @Override\n+    public String apply(LogEntry logEntry)\n     {\n-        String regex = arguments.get( TX_FILTER );\n-        if ( regex != null )\n-        {\n-            return new TransactionRegexCriteria( regex, timeZone );\n-        }\n-        String cc = arguments.get( CC_FILTER );\n-        if ( cc != null )\n-        {\n-            return new ConsistencyCheckOutputCriteria( cc, timeZone );\n-        }\n-        return null;\n+      String result = logEntry.toString(timeZone);\n+      if (matches(logEntry))\n+      {\n+        result += \"  <----\";\n+      }\n+      return result;\n     }\n+  }\n \n-    public static Printer getPrinter( Args args )\n+  /**\n+   * Usage: [--txfilter \"regex\"] [--ccfilter cc-report-file] [--tofile] [--lenient] storeDirOrFile1 storeDirOrFile2 ...\n+   * <p>\n+   * --txfilter\n+   * Will match regex against each {@link LogEntry} and if there is a match,\n+   * include transaction containing the LogEntry in the dump.\n+   * regex matching is done with {@link Pattern}\n+   * <p>\n+   * --ccfilter\n+   * Will look at an inconsistency report file from consistency checker and\n+   * include transactions that are relevant to them\n+   * <p>\n+   * --tofile\n+   * Redirects output to dump-logical-log.txt in the store directory\n+   * <p>\n+   * --lenient\n+   * Will attempt to read log entries even if some look broken along the way\n+   */\n+  public static void main(String[] args) throws IOException\n+  {\n+    Args arguments = Args.withFlags(TO_FILE, LENIENT).parse(args);\n+    TimeZone timeZone = parseTimeZoneConfig(arguments);\n+    Predicate<LogEntry[]> filter = parseFilter(arguments, timeZone);\n+    Function<LogEntry, String> serializer = parseSerializer(filter, timeZone);\n+    Function<PrintStream, InvalidLogEntryHandler> invalidLogEntryHandler = parseInvalidLogEntryHandler(arguments);\n+    try (FileSystemAbstraction fileSystem = new DefaultFileSystemAbstraction();\n+         Printer printer = getPrinter(arguments))\n     {\n-        boolean toFile = args.getBoolean( TO_FILE, false, true );\n-        return toFile ? new FilePrinter() : SYSTEM_OUT_PRINTER;\n+      for (String fileAsString : arguments.orphans())\n+      {\n+        PrintStream out = printer.getFor(fileAsString);\n+        new DumpLogicalLog(fileSystem).dump(fileAsString, out, filter, serializer,\n+            invalidLogEntryHandler.apply(out));\n+      }\n     }\n+  }\n \n-    public interface Printer extends AutoCloseable\n+  private static Function<PrintStream, InvalidLogEntryHandler> parseInvalidLogEntryHandler(Args arguments)\n+  {\n+    if (arguments.getBoolean(LENIENT))\n     {\n-        PrintStream getFor( String file ) throws FileNotFoundException;\n+      return LenientInvalidLogEntryHandler::new;\n+    }\n+    return out -> InvalidLogEntryHandler.STRICT;\n+  }\n \n-        @Override\n-        void close();\n+  @SuppressWarnings(\"unchecked\")\n+  private static Function<LogEntry, String> parseSerializer(Predicate<LogEntry[]> filter, TimeZone timeZone)\n+  {\n+    if (filter instanceof Function)\n+    {\n+      return (Function<LogEntry, String>) filter;\n     }\n+    return logEntry -> logEntry.toString(timeZone);\n+  }\n \n-    private static final Printer SYSTEM_OUT_PRINTER = new Printer()\n+  private static Predicate<LogEntry[]> parseFilter(Args arguments, TimeZone timeZone) throws IOException\n+  {\n+    String regex = arguments.get(TX_FILTER);\n+    if (regex != null)\n     {\n-        @Override\n-        public PrintStream getFor( String file )\n-        {\n-            return System.out;\n-        }\n+      return new TransactionRegexCriteria(regex, timeZone);\n+    }\n+    String cc = arguments.get(CC_FILTER);\n+    if (cc != null)\n+    {\n+      return new ConsistencyCheckOutputCriteria(cc, timeZone);\n+    }\n+    return null;\n+  }\n \n-        @Override\n-        public void close()\n-        {   // Don't close System.out\n-        }\n-    };\n+  public static Printer getPrinter(Args args)\n+  {\n+    boolean toFile = args.getBoolean(TO_FILE, false, true);\n+    return toFile ? new FilePrinter() : SYSTEM_OUT_PRINTER;\n+  }\n+\n+  public interface Printer extends AutoCloseable\n+  {\n+    PrintStream getFor(String file) throws FileNotFoundException;\n+\n+    @Override\n+    void close();\n+  }\n \n-    private static class FilePrinter implements Printer\n+  private static final Printer SYSTEM_OUT_PRINTER = new Printer()\n+  {\n+    @Override\n+    public PrintStream getFor(String file)\n     {\n-        private File directory;\n-        private PrintStream out;\n+      return System.out;\n+    }\n \n-        @Override\n-        public PrintStream getFor( String file ) throws FileNotFoundException\n-        {\n-            File absoluteFile = new File( file ).getAbsoluteFile();\n-            File dir = absoluteFile.isDirectory() ? absoluteFile : absoluteFile.getParentFile();\n-            if ( !dir.equals( directory ) )\n-            {\n-                close();\n-                File dumpFile = new File( dir, \"dump-logical-log.txt\" );\n-                System.out.println( \"Redirecting the output to \" + dumpFile.getPath() );\n-                out = new PrintStream( dumpFile );\n-                directory = dir;\n-            }\n-            return out;\n-        }\n+    @Override\n+    public void close()\n+    {   // Don't close System.out\n+    }\n+  };\n \n-        @Override\n-        public void close()\n-        {\n-            if ( out != null )\n-            {\n-                out.close();\n-            }\n-        }\n+  private static class FilePrinter implements Printer\n+  {\n+    private File directory;\n+    private PrintStream out;\n+\n+    @Override\n+    public PrintStream getFor(String file) throws FileNotFoundException\n+    {\n+      File absoluteFile = new File(file).getAbsoluteFile();\n+      File dir = absoluteFile.isDirectory() ? absoluteFile : absoluteFile.getParentFile();\n+      if (!dir.equals(directory))\n+      {\n+        close();\n+        File dumpFile = new File(dir, \"dump-logical-log.txt\");\n+        System.out.println(\"Redirecting the output to \" + dumpFile.getPath());\n+        out = new PrintStream(dumpFile);\n+        directory = dir;\n+      }\n+      return out;\n     }\n \n-    public static TimeZone parseTimeZoneConfig( Args arguments )\n+    @Override\n+    public void close()\n     {\n-        return getTimeZone( arguments.get( \"timezone\", DEFAULT_TIME_ZONE.getID() ) );\n+      if (out != null)\n+      {\n+        out.close();\n+      }\n     }\n+  }\n+\n+  public static TimeZone parseTimeZoneConfig(Args arguments)\n+  {\n+    return getTimeZone(arguments.get(\"timezone\", DEFAULT_TIME_ZONE.getID()));\n+  }\n }\n",
            "diff_size": 359
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1325/DumpLogicalLog.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1325/DumpLogicalLog.java\nindex e50faa505b3..076e4c7599f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1325/DumpLogicalLog.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1325/DumpLogicalLog.java\n@@ -59,18 +59,16 @@ public class DumpLogicalLog\n     private static final String TX_FILTER = \"txfilter\";\n     private static final String CC_FILTER = \"ccfilter\";\n     private static final String LENIENT = \"lenient\";\n-\n-    private final FileSystemAbstraction fileSystem;\n+private final FileSystemAbstraction fileSystem;\n \n     public DumpLogicalLog( FileSystemAbstraction fileSystem )\n     {\n         this.fileSystem = fileSystem;\n     }\n \n-    public void dump( String filenameOrDirectory, PrintStream out,\n-            Predicate<LogEntry[]> filter, Function<LogEntry,String> serializer,\n+    public void dump( String filenameOrDirectory, PrintStream out, Predicate<LogEntry[]> filter, Function<LogEntry,String> serializer,\n             InvalidLogEntryHandler invalidLogEntryHandler ) throws IOException\n-    {\n+{\n         TransactionLogAnalyzer.analyze( fileSystem, new File( filenameOrDirectory ), invalidLogEntryHandler, new Monitor()\n         {\n             @Override\n@@ -95,7 +93,7 @@ public class DumpLogicalLog\n             @Override\n             public void checkpoint( CheckPoint checkpoint, LogPosition checkpointEntryPosition )\n             {\n-                if ( filter == null || filter.test( new LogEntry[] {checkpoint} ) )\n+                if ( filter == null || filter.test( new LogEntry[]{checkpoint} ) )\n                 {\n                     out.println( serializer.apply( checkpoint ) );\n                 }\n@@ -157,7 +155,7 @@ public class DumpLogicalLog\n         {\n             if ( logEntry instanceof LogEntryCommand )\n             {\n-                if ( matches( ((LogEntryCommand)logEntry).getCommand() ) )\n+                if ( matches( ((LogEntryCommand) logEntry).getCommand() ) )\n                 {\n                     return true;\n                 }\n@@ -171,19 +169,23 @@ public class DumpLogicalLog\n             {\n                 return inconsistencies.containsNodeId( ((NodeCommand) command).getKey() );\n             }\n-            if ( command instanceof RelationshipCommand )\n+\n+if ( command instanceof RelationshipCommand )\n             {\n                 return inconsistencies.containsRelationshipId( ((RelationshipCommand) command).getKey() );\n             }\n-            if ( command instanceof PropertyCommand )\n+\n+if ( command instanceof PropertyCommand )\n             {\n                 return inconsistencies.containsPropertyId( ((PropertyCommand) command).getKey() );\n             }\n-            if ( command instanceof RelationshipGroupCommand )\n+\n+if ( command instanceof RelationshipGroupCommand )\n             {\n                 return inconsistencies.containsRelationshipGroupId( ((RelationshipGroupCommand) command).getKey() );\n             }\n-            if ( command instanceof SchemaRuleCommand )\n+\n+if ( command instanceof SchemaRuleCommand )\n             {\n                 return inconsistencies.containsSchemaIndexId( ((SchemaRuleCommand) command).getKey() );\n             }\n@@ -198,7 +200,8 @@ public class DumpLogicalLog\n             {\n                 result += \"  <----\";\n             }\n-            return result;\n+\n+return result;\n         }\n     }\n \n@@ -228,14 +231,14 @@ public class DumpLogicalLog\n         Function<LogEntry,String> serializer = parseSerializer( filter, timeZone );\n         Function<PrintStream,InvalidLogEntryHandler> invalidLogEntryHandler = parseInvalidLogEntryHandler( arguments );\n         try ( FileSystemAbstraction fileSystem = new DefaultFileSystemAbstraction();\n-              Printer printer = getPrinter( arguments ) )\n-        {\n+Printer printer = getPrinter( arguments ) )\n+{\n             for ( String fileAsString : arguments.orphans() )\n             {\n                 PrintStream out = printer.getFor( fileAsString );\n                 new DumpLogicalLog( fileSystem ).dump( fileAsString, out, filter, serializer,\n                         invalidLogEntryHandler.apply( out ) );\n-            }\n+    }\n         }\n     }\n \n@@ -245,7 +248,8 @@ public class DumpLogicalLog\n         {\n             return LenientInvalidLogEntryHandler::new;\n         }\n-        return out -> InvalidLogEntryHandler.STRICT;\n+\n+return out -> InvalidLogEntryHandler.STRICT;\n     }\n \n     @SuppressWarnings( \"unchecked\" )\n@@ -255,7 +259,8 @@ public class DumpLogicalLog\n         {\n             return (Function<LogEntry,String>) filter;\n         }\n-        return logEntry -> logEntry.toString( timeZone );\n+\n+return logEntry -> logEntry.toString( timeZone );\n     }\n \n     private static Predicate<LogEntry[]> parseFilter( Args arguments, TimeZone timeZone ) throws IOException\n@@ -265,7 +270,8 @@ public class DumpLogicalLog\n         {\n             return new TransactionRegexCriteria( regex, timeZone );\n         }\n-        String cc = arguments.get( CC_FILTER );\n+\n+String cc = arguments.get( CC_FILTER );\n         if ( cc != null )\n         {\n             return new ConsistencyCheckOutputCriteria( cc, timeZone );\n@@ -297,7 +303,8 @@ public class DumpLogicalLog\n \n         @Override\n         public void close()\n-        {   // Don't close System.out\n+        {\n+    // Don't close System.out\n         }\n     };\n \n@@ -319,7 +326,8 @@ public class DumpLogicalLog\n                 out = new PrintStream( dumpFile );\n                 directory = dir;\n             }\n-            return out;\n+\n+return out;\n         }\n \n         @Override\n@@ -336,4 +344,4 @@ public class DumpLogicalLog\n     {\n         return getTimeZone( arguments.get( \"timezone\", DEFAULT_TIME_ZONE.getID() ) );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 31
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}