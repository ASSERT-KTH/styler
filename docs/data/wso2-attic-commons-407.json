{
    "project_name": "wso2-attic-commons",
    "error_id": "407",
    "information": {
        "errors": [
            {
                "line": "269",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 124).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    if (Utils.isMultipartRelatedMessage(header))\n    {\n    \tMimeParts mimeParts = Utils.parseMultipartRelatedMessage(messageContent, header, WSIConstants.DEFAULT_XML_ENCODING);\n    \tif (mimeParts == null)\n    \t{\n    \t  // problem creating Mimeparts -- treat it as simple SOAP message",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/407/LogBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/407/LogBuilder.java\nindex d34ca77a83e..2fec3e1c0e2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/407/LogBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/407/LogBuilder.java\n@@ -266,8 +266,8 @@ public class LogBuilder\n \n     if (Utils.isMultipartRelatedMessage(header))\n     {\n-    \tMimeParts mimeParts = Utils.parseMultipartRelatedMessage(messageContent, header, WSIConstants.DEFAULT_XML_ENCODING);\n-    \tif (mimeParts == null)\n+MimeParts mimeParts = Utils.parseMultipartRelatedMessage(messageContent, header, WSIConstants.DEFAULT_XML_ENCODING);\n+\t\t\t\t\tif (mimeParts == null)\n     \t{\n     \t  // problem creating Mimeparts -- treat it as simple SOAP message\n     \t  if (messageContent != null)\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/407/LogBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/407/LogBuilder.java\nindex d34ca77a83e..799f5ff5596 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/407/LogBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/407/LogBuilder.java\n@@ -8,6 +8,7 @@\n  * Contributors:\n  *   IBM - Initial API and implementation\n  *******************************************************************************/\n+\n package org.eclipse.wst.wsi.internal.core.log;\n \n import java.io.PrintWriter;\n@@ -37,13 +38,12 @@ import com.ibm.icu.text.SimpleDateFormat;\n import com.ibm.icu.util.TimeZone;\n \n /**\n- * Given a list of RequestHandlers, this class builds a \n+ * Given a list of RequestHandlers, this class builds a\n  * WS-I compliant Message Log file.\n- * \n+ *\n  * @author David Lauzon, IBM\n  */\n-public class LogBuilder\n-{\n+public class LogBuilder {\n   public static final String copyright = \"(c) Copyright IBM Corporation 2000, 2002.\";\n \n   /**\n@@ -78,38 +78,37 @@ public class LogBuilder\n   /**\n    * Common timestamp format.\n    */\n-  public static final SimpleDateFormat timestampFormat = new SimpleDateFormat (\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\");\n+  public static final SimpleDateFormat timestampFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\");\n \n   /**\n    * Constructor.\n+   *\n    * @param ifile: the file handler for the log.\n    */\n-  public LogBuilder(IFile ifile)\n-  {\n+  public LogBuilder(IFile ifile) {\n     this.ifile = ifile;\n   }\n \n   /**\n    * This builds and then returns a log based on the list of request-response pairs.\n+   *\n    * @param requestResponses: a list of messages in the form of request-response pairs.\n    * @return a log based on a list of request-response pairs.\n    */\n-  public Log buildLog(List requestResponses)\n-  {\n+  public Log buildLog(List requestResponses) {\n     log = new LogImpl();\n     logMonitorInformation();\n \n     // log the messages\n-    for (Iterator i = requestResponses.iterator(); i.hasNext();)\n-    {\n-      RequestHandler rr = (RequestHandler)i.next();\n+    for (Iterator i = requestResponses.iterator(); i.hasNext(); ) {\n+      RequestHandler rr = (RequestHandler) i.next();\n       if (rr != null) {\n-          try {\n-              logRequestResponse(rr);\n-          } catch (Exception e) {\n-              /* Empty catch block.  This request/response pair is not a valid SOAP\n-               * message, so skip it. */\n-          }\n+        try {\n+          logRequestResponse(rr);\n+        } catch (Exception e) {\n+          /* Empty catch block.  This request/response pair is not a valid SOAP\n+           * message, so skip it. */\n+        }\n       }\n     }\n     return log;\n@@ -118,63 +117,53 @@ public class LogBuilder\n   /**\n    * Currently a no-op.\n    */\n-  public void logMonitorInformation()\n-  {\n+  public void logMonitorInformation() {\n   }\n \n   /**\n    * Log the request-response pair.\n-   *@param rr: a request-response pair.\n+   *\n+   * @param rr: a request-response pair.\n    */\n-  protected void logRequestResponse(RequestHandler rr)\n-  {\n-    if (rr != null)\n-    {\n+  protected void logRequestResponse(RequestHandler rr) {\n+    if (rr != null) {\n       byte[] requestHeaderBytes = rr.getRequestHeader();\n       byte[] responseHeaderBytes = rr.getResponseHeader();\n- \n-      if ((requestHeaderBytes != null) || (responseHeaderBytes != null))\n-      {\n+\n+      if ((requestHeaderBytes != null) || (responseHeaderBytes != null)) {\n         long timestamp = rr.getDate().getTime();\n         String localHostAndPort = \"localhost:\" + rr.getLocalPort();\n         String remoteHostAndPort = rr.getRemoteHost() + \":\" + rr.getRemotePort();\n \n         int conversationId = getNextAvailableConversationId();\n-        try\n-        {\n-          if (requestHeaderBytes != null)\n-          {\n+        try {\n+          if (requestHeaderBytes != null) {\n             String requestHeader = new String(requestHeaderBytes);\n             byte[] unchunkedRequestBody = rr.getRequestContent();\n-            int requestId  = getNextAvailableId();\n-            \n-            MessageEntry messageEntryRequest = createMessageEntry(requestId, conversationId, \n-                MessageEntry.TYPE_REQUEST, timestamp, localHostAndPort,\n-                remoteHostAndPort, unchunkedRequestBody, requestHeader);\n-\n-            if (messageEntryRequest != null)\n-            {\n+            int requestId = getNextAvailableId();\n+\n+            MessageEntry messageEntryRequest = createMessageEntry(requestId, conversationId,\n+              MessageEntry.TYPE_REQUEST, timestamp, localHostAndPort,\n+              remoteHostAndPort, unchunkedRequestBody, requestHeader);\n+\n+            if (messageEntryRequest != null) {\n               log.addLogEntry(messageEntryRequest);\n             }\n           }\n-          if (responseHeaderBytes != null)\n-          {\n+          if (responseHeaderBytes != null) {\n             String responseHeader = new String(responseHeaderBytes);\n             byte[] unchunkedResponseBody = rr.getResponseContent();\n             int responseId = getNextAvailableId();\n-            \n-            MessageEntry messageEntryResponse = createMessageEntry(responseId, conversationId, \n-                MessageEntry.TYPE_RESPONSE, timestamp + rr.getResponseTime(), remoteHostAndPort,\n-                localHostAndPort, unchunkedResponseBody, responseHeader);\n- \n-            if (messageEntryResponse != null)\n-            {\n+\n+            MessageEntry messageEntryResponse = createMessageEntry(responseId, conversationId,\n+              MessageEntry.TYPE_RESPONSE, timestamp + rr.getResponseTime(), remoteHostAndPort,\n+              localHostAndPort, unchunkedResponseBody, responseHeader);\n+\n+            if (messageEntryResponse != null) {\n               log.addLogEntry(messageEntryResponse);\n             }\n           }\n-        }\n-        catch (Exception e)\n-        {\n+        } catch (Exception e) {\n           // ignore the request response pair\n         }\n       }\n@@ -184,30 +173,30 @@ public class LogBuilder\n   /**\n    * Returns true if the content of the message has at least\n    * one left and one right bracket.\n+   *\n    * @param message: a message content.\n    * @return true if the content of the message has at least\n-   *         one left and one right bracket.\n+   * one left and one right bracket.\n    */\n-  public boolean isMessageWithBrackets(String message)\n-  {\n-    return ((message != null) && \n-            (message.indexOf(\"<\")!= -1) && \n-            (message.indexOf(\">\") != -1));\n+  public boolean isMessageWithBrackets(String message) {\n+    return ((message != null) &&\n+      (message.indexOf(\"<\") != -1) &&\n+      (message.indexOf(\">\") != -1));\n   }\n+\n   /**\n    * Returns the header of a message.\n+   *\n    * @param requestOrResponse: a message.\n-   * @param headerLength: the length of the header in the message.\n+   * @param headerLength:      the length of the header in the message.\n    * @return the header of a message.\n-   */ \n-  protected String getHeader(byte[] requestOrResponse,  int headerLength)\n-  {\n+   */\n+  protected String getHeader(byte[] requestOrResponse, int headerLength) {\n     String result = null;\n-    \n-    if ((requestOrResponse != null) && \n-        (headerLength > 0) && \n-        (requestOrResponse.length >= headerLength))\n-    {\n+\n+    if ((requestOrResponse != null) &&\n+      (headerLength > 0) &&\n+      (requestOrResponse.length >= headerLength)) {\n       byte[] header = new byte[headerLength];\n       System.arraycopy(requestOrResponse, 0, header, 0, headerLength);\n       result = new String(header);\n@@ -217,18 +206,17 @@ public class LogBuilder\n \n   /**\n    * Returns the body of a message.\n+   *\n    * @param requestOrResponse: a message.\n-   * @param headerLength: the length of the header in the message.\n+   * @param headerLength:      the length of the header in the message.\n    * @return the body of a message.\n-   */ \n-  protected String getBody(byte[] requestOrResponse,  int headerLength)\n-  {\n+   */\n+  protected String getBody(byte[] requestOrResponse, int headerLength) {\n     String result = null;\n-    \n-    if ((requestOrResponse != null) && \n-        (headerLength > 0) && \n-        (requestOrResponse.length > headerLength))\n-    {\n+\n+    if ((requestOrResponse != null) &&\n+      (headerLength > 0) &&\n+      (requestOrResponse.length > headerLength)) {\n       int bodyLength = requestOrResponse.length - headerLength;\n       byte[] body = new byte[bodyLength];\n       System.arraycopy(requestOrResponse, headerLength, body, 0, bodyLength);\n@@ -236,23 +224,24 @@ public class LogBuilder\n     }\n     return result;\n   }\n-      \n+\n   /**\n    * Create a log entry.\n-   * @param id: unique message id within the log.\n-   * @param conversationId: conversation id to identify request-response pairs.\n-   * @param type: type indicating a request or response.\n-   * @param timestamp: the date and time of the message.\n-   * @param senderHostAndPort: the host and port of the sender.\n+   *\n+   * @param id:                  unique message id within the log.\n+   * @param conversationId:      conversation id to identify request-response pairs.\n+   * @param type:                type indicating a request or response.\n+   * @param timestamp:           the date and time of the message.\n+   * @param senderHostAndPort:   the host and port of the sender.\n    * @param receiverHostAndPort: the host and port of the receiver.\n-   * @param messageContent: the content or body of the message.\n-   * @param header: the header of the message.\n+   * @param messageContent:      the content or body of the message.\n+   * @param header:              the header of the message.\n    * @return a log entry.\n    */\n-  protected MessageEntry createMessageEntry(int id, int conversationId, String type, long timestamp, \n-        String senderHostAndPort, String receiverHostAndPort, byte[] messageContent, String header) \n-  {\n- \t// Create log entry\n+  protected MessageEntry createMessageEntry(int id, int conversationId, String type, long timestamp,\n+                                            String senderHostAndPort, String receiverHostAndPort, byte[] messageContent,\n+                                            String header) {\n+    // Create log entry\n     MessageEntry messageEntry = new MessageEntryImpl();\n     messageEntry.setId(String.valueOf(id));\n     messageEntry.setConversationId(String.valueOf(conversationId));\n@@ -261,40 +250,29 @@ public class LogBuilder\n     messageEntry.setSenderHostAndPort(senderHostAndPort);\n     messageEntry.setReceiverHostAndPort(receiverHostAndPort);\n     messageEntry.setEncoding(WSIConstants.DEFAULT_XML_ENCODING);\n-    \n+\n     messageEntry.setHTTPHeaders(header);\n \n-    if (Utils.isMultipartRelatedMessage(header))\n-    {\n-    \tMimeParts mimeParts = Utils.parseMultipartRelatedMessage(messageContent, header, WSIConstants.DEFAULT_XML_ENCODING);\n-    \tif (mimeParts == null)\n-    \t{\n-    \t  // problem creating Mimeparts -- treat it as simple SOAP message\n-    \t  if (messageContent != null)\n-    \t  {\n-    \t    messageEntry.setMessage(new String(messageContent));\n-    \t  }\n-    \t  else\n-    \t  {\n-    \t    messageEntry.setMessage(\"\");\n-    \t  }\n-    \t  messageEntry.setMimeContent(false);\n-    \t}\n-    \telse\n-    \t{\n-          messageEntry.setMimeParts(mimeParts);\n-          messageEntry.setMimeContent(true);\n-    \t}\n-    }\n-    else\n-    {\n+    if (Utils.isMultipartRelatedMessage(header)) {\n+      MimeParts mimeParts =\n+        Utils.parseMultipartRelatedMessage(messageContent, header, WSIConstants.DEFAULT_XML_ENCODING);\n+      if (mimeParts == null) {\n+        // problem creating Mimeparts -- treat it as simple SOAP message\n+        if (messageContent != null) {\n+          messageEntry.setMessage(new String(messageContent));\n+        } else {\n+          messageEntry.setMessage(\"\");\n+        }\n+        messageEntry.setMimeContent(false);\n+      } else {\n+        messageEntry.setMimeParts(mimeParts);\n+        messageEntry.setMimeContent(true);\n+      }\n+    } else {\n       // Get the message content\n-      if (messageContent != null)\n-      {\n+      if (messageContent != null) {\n         messageEntry.setMessage(new String(messageContent));\n-      }\n-      else\n-      {\n+      } else {\n         messageEntry.setMessage(\"\");\n       }\n       messageEntry.setMimeContent(false);\n@@ -304,28 +282,26 @@ public class LogBuilder\n \n   /**\n    * Returns the next available id, then increments the id value.\n+   *\n    * @return the next available id.\n    */\n-  protected int getNextAvailableId()\n-  {\n+  protected int getNextAvailableId() {\n     return id++;\n   }\n \n   /**\n    * Returns the next available conversation id, then increments the conversation id value.\n    * A conversation id identfies a request and its corresponding response.\n+   *\n    * @return the next available converasationid.\n    */\n-  protected int getNextAvailableConversationId()\n-  {\n+  protected int getNextAvailableConversationId() {\n     return conversationId++;\n   }\n \n-  public int getHeaderLength(Integer obj)\n-  {\n+  public int getHeaderLength(Integer obj) {\n     int result = 0;\n-    if (obj != null)\n-    {\n+    if (obj != null) {\n       result = obj.intValue();\n     }\n     return result;\n@@ -333,35 +309,31 @@ public class LogBuilder\n \n   /**\n    * Write log out to file.\n+   *\n    * @param log: log to be written to file.\n    */\n \n-  public void writeLog(Log log)\n-  {\n-    try\n-    {\n+  public void writeLog(Log log) {\n+    try {\n       // Get log writer\n       LogWriter logWriter = new LogWriterImpl();\n-    \n+\n       logWriter.setWriter(ifile.getLocation().toString());\n-      \n+\n       // Write start of log file\n       logWriter.write(new StringReader(log.getStartXMLString(\"\")));\n-    \n+\n       // Write monitor tool information\n       String monitorInfo = generateMonitorToolInfo();\n       logWriter.write(new StringReader(monitorInfo));\n \n-      for (int i=0; i<log.getEntryCount(); i++)\n-      {\n+      for (int i = 0; i < log.getEntryCount(); i++) {\n         MessageEntry me = log.getLogEntry(i);\n         logWriter.write(new StringReader(me.toXMLString(\"\")));\n       }\n       logWriter.write(new StringReader(log.getEndXMLString(\"\")));\n       logWriter.close();\n-    }\n-    catch (Exception e)\n-    {\n+    } catch (Exception e) {\n       System.out.println(\"Exception thrown when printing log file.\");\n     }\n   }\n@@ -369,22 +341,21 @@ public class LogBuilder\n \n   /**\n    * Returns XML string representation of the Monitor tool.\n+   *\n    * @return XML string representation of the Monitor tool.\n    */\n-  protected String generateMonitorToolInfo()\n-  {\n+  protected String generateMonitorToolInfo() {\n \n     StringWriter sw = new StringWriter();\n-    PrintWriter pw = new PrintWriter(sw); \n+    PrintWriter pw = new PrintWriter(sw);\n \n-    try\n-    {\n+    try {\n       // Tool information\n       ToolInfo toolInfo = new ToolInfo(TOOL_NAME, TOOL_VERSION, TOOL_RELEASE_DATE, TOOL_IMPLEMENTER, TOOL_LOCATION);\n \n       DocumentFactory documentFactory = DocumentFactory.newInstance();\n       MonitorConfig monitorConfig = documentFactory.newMonitorConfig();\n-    \n+\n       Comment comment = new CommentImpl();\n       comment.setText(\"Comment\");\n       monitorConfig.setComment(comment);\n@@ -396,7 +367,7 @@ public class LogBuilder\n \n       monitorConfig.setLogDuration(600);\n       monitorConfig.setTimeout(3);\n-     \n+\n       ManInTheMiddle manInTheMiddle = new ManInTheMiddleImpl();\n       monitorConfig.setManInTheMiddle(manInTheMiddle);\n \n@@ -405,26 +376,24 @@ public class LogBuilder\n \n       // Start     \n       pw.print(toolInfo.getStartXMLString(\"\"));\n-    \n+\n       // Config\n       pw.print(monitorConfig.toXMLString(WSIConstants.NS_NAME_WSI_MONITOR_CONFIG));\n \n       // End\n       pw.println(toolInfo.getEndXMLString(\"\"));\n-    }\n-    catch (Exception e)\n-    {\n+    } catch (Exception e) {\n     }\n     return sw.toString();\n   }\n \n   /**\n    * Get the given date and time as a timestamp.\n+   *\n    * @param date: a date object.\n    * @return the given date and time as a timestamp.\n    */\n-  public static String getTimestamp(Date date)\n-  {\n+  public static String getTimestamp(Date date) {\n     timestampFormat.setTimeZone(TimeZone.getDefault());\n     return timestampFormat.format(date);\n   }\n",
            "diff_size": 165
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/407/LogBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/407/LogBuilder.java\nindex d34ca77a83e..2fec3e1c0e2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/407/LogBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/407/LogBuilder.java\n@@ -266,8 +266,8 @@ public class LogBuilder\n \n     if (Utils.isMultipartRelatedMessage(header))\n     {\n-    \tMimeParts mimeParts = Utils.parseMultipartRelatedMessage(messageContent, header, WSIConstants.DEFAULT_XML_ENCODING);\n-    \tif (mimeParts == null)\n+MimeParts mimeParts = Utils.parseMultipartRelatedMessage(messageContent, header, WSIConstants.DEFAULT_XML_ENCODING);\n+\t\t\t\t\tif (mimeParts == null)\n     \t{\n     \t  // problem creating Mimeparts -- treat it as simple SOAP message\n     \t  if (messageContent != null)\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/407/LogBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/407/LogBuilder.java\nindex d34ca77a83e..2fec3e1c0e2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/407/LogBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/407/LogBuilder.java\n@@ -266,8 +266,8 @@ public class LogBuilder\n \n     if (Utils.isMultipartRelatedMessage(header))\n     {\n-    \tMimeParts mimeParts = Utils.parseMultipartRelatedMessage(messageContent, header, WSIConstants.DEFAULT_XML_ENCODING);\n-    \tif (mimeParts == null)\n+MimeParts mimeParts = Utils.parseMultipartRelatedMessage(messageContent, header, WSIConstants.DEFAULT_XML_ENCODING);\n+\t\t\t\t\tif (mimeParts == null)\n     \t{\n     \t  // problem creating Mimeparts -- treat it as simple SOAP message\n     \t  if (messageContent != null)\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}