{
    "project_name": "opencb-opencga",
    "error_id": "311",
    "information": {
        "errors": [
            {
                "line": "27",
                "severity": "error",
                "message": "Line is longer than 140 characters (found 152).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    private String key;\n\n    public DummyTestAnnotator(StorageConfiguration configuration, ProjectMetadata projectMetadata, ObjectMap options) throws VariantAnnotatorException {\n        super(configuration, projectMetadata, options);\n        key = options.getString(ANNOT_KEY);\n        fail = options.getBoolean(FAIL, false);",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 152).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/311/DummyTestAnnotator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/311/DummyTestAnnotator.java\nindex f629ca0150a..462c420814b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/311/DummyTestAnnotator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/311/DummyTestAnnotator.java\n@@ -19,50 +19,51 @@ import static org.opencb.opencga.storage.core.variant.adaptors.VariantField.Addi\n \n public class DummyTestAnnotator extends VariantAnnotator {\n \n-    public static final String ANNOT_KEY = \"ANNOT_KEY\";\n-    public static final String FAIL = \"ANNOT_FAIL\";\n-    private final boolean fail;\n-    private String key;\n+  public static final String ANNOT_KEY = \"ANNOT_KEY\";\n+  public static final String FAIL = \"ANNOT_FAIL\";\n+  private final boolean fail;\n+  private String key;\n \n-    public DummyTestAnnotator(StorageConfiguration configuration, ProjectMetadata projectMetadata, ObjectMap options) throws VariantAnnotatorException {\n-        super(configuration, projectMetadata, options);\n-        key = options.getString(ANNOT_KEY);\n-        fail = options.getBoolean(FAIL, false);\n-    }\n+  public DummyTestAnnotator(StorageConfiguration configuration, ProjectMetadata projectMetadata, ObjectMap options)\n+      throws VariantAnnotatorException {\n+    super(configuration, projectMetadata, options);\n+    key = options.getString(ANNOT_KEY);\n+    fail = options.getBoolean(FAIL, false);\n+  }\n \n-    @Override\n-    public List<VariantAnnotation> annotate(List<Variant> variants) throws VariantAnnotatorException {\n-        if (fail) {\n-            throw new VariantAnnotatorException(\"Fail because reasons\");\n-        }\n-        return variants.stream().map(v -> {\n-            VariantAnnotation a = new VariantAnnotation();\n-            a.setChromosome(v.getChromosome());\n-            a.setStart(v.getStart());\n-            a.setEnd(v.getEnd());\n-            a.setReference(v.getReference());\n-            a.setAlternate(v.getAlternate());\n-            a.setId(\"an id -- \" + key);\n-            ConsequenceType ct = new ConsequenceType();\n-            ct.setGeneName(\"a gene\");\n-            ct.setSequenceOntologyTerms(Collections.emptyList());\n-            ct.setExonOverlap(Collections.emptyList());\n-            ct.setTranscriptAnnotationFlags(Collections.emptyList());\n-            a.setConsequenceTypes(Collections.singletonList(ct));\n-            a.setAdditionalAttributes(\n-                    Collections.singletonMap(GROUP_NAME.key(),\n-                            new AdditionalAttribute(Collections.singletonMap(VARIANT_ID.key(), v.toString()))));\n-            return a;\n-        }).collect(Collectors.toList());\n+  @Override\n+  public List<VariantAnnotation> annotate(List<Variant> variants) throws VariantAnnotatorException {\n+    if (fail) {\n+      throw new VariantAnnotatorException(\"Fail because reasons\");\n     }\n+    return variants.stream().map(v -> {\n+      VariantAnnotation a = new VariantAnnotation();\n+      a.setChromosome(v.getChromosome());\n+      a.setStart(v.getStart());\n+      a.setEnd(v.getEnd());\n+      a.setReference(v.getReference());\n+      a.setAlternate(v.getAlternate());\n+      a.setId(\"an id -- \" + key);\n+      ConsequenceType ct = new ConsequenceType();\n+      ct.setGeneName(\"a gene\");\n+      ct.setSequenceOntologyTerms(Collections.emptyList());\n+      ct.setExonOverlap(Collections.emptyList());\n+      ct.setTranscriptAnnotationFlags(Collections.emptyList());\n+      a.setConsequenceTypes(Collections.singletonList(ct));\n+      a.setAdditionalAttributes(\n+          Collections.singletonMap(GROUP_NAME.key(),\n+              new AdditionalAttribute(Collections.singletonMap(VARIANT_ID.key(), v.toString()))));\n+      return a;\n+    }).collect(Collectors.toList());\n+  }\n \n-    @Override\n-    public ProjectMetadata.VariantAnnotatorProgram getVariantAnnotatorProgram() throws IOException {\n-        return new ProjectMetadata.VariantAnnotatorProgram(\"MyAnnotator\", key, null);\n-    }\n+  @Override\n+  public ProjectMetadata.VariantAnnotatorProgram getVariantAnnotatorProgram() throws IOException {\n+    return new ProjectMetadata.VariantAnnotatorProgram(\"MyAnnotator\", key, null);\n+  }\n \n-    @Override\n-    public List<ObjectMap> getVariantAnnotatorSourceVersion() throws IOException {\n-        return Collections.singletonList(new ObjectMap(\"data\", \"genes\"));\n-    }\n+  @Override\n+  public List<ObjectMap> getVariantAnnotatorSourceVersion() throws IOException {\n+    return Collections.singletonList(new ObjectMap(\"data\", \"genes\"));\n+  }\n }\n",
            "diff_size": 62
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 152).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/311/DummyTestAnnotator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/311/DummyTestAnnotator.java\nindex f629ca0150a..402ab7a2e21 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/311/DummyTestAnnotator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/311/DummyTestAnnotator.java\n@@ -52,7 +52,7 @@ public class DummyTestAnnotator extends VariantAnnotator {\n             a.setAdditionalAttributes(\n                     Collections.singletonMap(GROUP_NAME.key(),\n                             new AdditionalAttribute(Collections.singletonMap(VARIANT_ID.key(), v.toString()))));\n-            return a;\n+return a;\n         }).collect(Collectors.toList());\n     }\n \n@@ -65,4 +65,4 @@ public class DummyTestAnnotator extends VariantAnnotator {\n     public List<ObjectMap> getVariantAnnotatorSourceVersion() throws IOException {\n         return Collections.singletonList(new ObjectMap(\"data\", \"genes\"));\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 152).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "28",
                    "column": "30",
                    "severity": "error",
                    "message": "'{' at column 30 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "28",
                    "column": "30",
                    "severity": "error",
                    "message": "'{' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "28",
                    "column": "31",
                    "severity": "error",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/311/DummyTestAnnotator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/311/DummyTestAnnotator.java\nindex f629ca0150a..9cc80628a32 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/311/DummyTestAnnotator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/311/DummyTestAnnotator.java\n@@ -24,8 +24,8 @@ public class DummyTestAnnotator extends VariantAnnotator {\n     private final boolean fail;\n     private String key;\n \n-    public DummyTestAnnotator(StorageConfiguration configuration, ProjectMetadata projectMetadata, ObjectMap options) throws VariantAnnotatorException {\n-        super(configuration, projectMetadata, options);\n+    public DummyTestAnnotator(StorageConfiguration configuration, ProjectMetadata projectMetadata, ObjectMap options) throws\n+    VariantAnnotatorException{super(configuration, projectMetadata, options);\n         key = options.getString(ANNOT_KEY);\n         fail = options.getBoolean(FAIL, false);\n     }\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}