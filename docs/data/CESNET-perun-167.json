{
    "project_name": "CESNET-perun",
    "error_id": "167",
    "information": {
        "errors": [
            {
                "line": "340",
                "severity": "error",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "\n\tabstract protected Name buildDN(T bean);\n\t\n\tabstract protected void mapToContext(T bean, DirContextOperations context) throws InternalErrorException;\n\n\t/**",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/167/AbstractPerunEntry.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/167/AbstractPerunEntry.java\nindex a792b5db182..fa8abb5abae 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/167/AbstractPerunEntry.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/167/AbstractPerunEntry.java\n@@ -337,7 +337,7 @@ public abstract class AbstractPerunEntry<T extends PerunBean> implements Initial\n \t}\n \n \tabstract protected Name buildDN(T bean);\n-\t\n+\n \tabstract protected void mapToContext(T bean, DirContextOperations context) throws InternalErrorException;\n \n \t/**\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/167/AbstractPerunEntry.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/167/AbstractPerunEntry.java\nindex a792b5db182..1bdca89c2dc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/167/AbstractPerunEntry.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/167/AbstractPerunEntry.java\n@@ -32,173 +32,173 @@ import cz.metacentrum.perun.ldapc.model.PerunEntry;\n \n public abstract class AbstractPerunEntry<T extends PerunBean> implements InitializingBean, PerunEntry<T> {\n \n-\tprivate final static Logger log = LoggerFactory.getLogger(AbstractPerunEntry.class);\n-\n-\tprotected class SyncOperationImpl implements SyncOperation {\n-\t\tpublic DirContextOperations entry;\n-\t\tpublic boolean isNew;\n-\n-\t\tpublic SyncOperationImpl(DirContextOperations entry, boolean isNew) {\n-\t\t\tthis.entry = entry;\n-\t\t\tthis.isNew = isNew;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic boolean isNew() {\n-\t\t\treturn isNew;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic DirContextOperations getEntry() {\n-\t\t\treturn entry;\n-\t\t}\n-\t}\n-\n-\t@Autowired\n-\tprotected LdapTemplate ldapTemplate;\n-\t@Autowired\n-\tprotected LdapProperties ldapProperties;\n-\n-\tprivate List<PerunAttribute<T>> attributeDescriptions;\n-\tprivate PerunAttributeConfigurer<T> attributeDescriptionsExt;\n-\tprivate List<String> updatableAttributeNames;\n-\n-\tpublic void afterPropertiesSet() {\n-\t\tif(attributeDescriptions == null) {\n-\t\t\tattributeDescriptions = new ArrayList<PerunAttribute<T>>();\n-\t\t}\n-\t\tattributeDescriptions.addAll(getDefaultAttributeDescriptions());\n-\t\tif(updatableAttributeNames == null) {\n-\t\t\tupdatableAttributeNames = new ArrayList<String>();\n-\t\t}\n-\t\tupdatableAttributeNames.addAll(getDefaultUpdatableAttributes());\n-\n-\t\t// add attributes from extension list\n-\t\tList<PerunAttribute<T>> attrsExt = attributeDescriptionsExt.getAttributeDescriptions();\n-\t\tif(attrsExt != null) {\n-\t\t\tattributeDescriptions.addAll(attrsExt);\n-\t\t}\n-\t}\n-\n-\tabstract protected List<String> getDefaultUpdatableAttributes();\n-\n-\tabstract protected List<PerunAttribute<T>> getDefaultAttributeDescriptions();\n-\n-\t/* (non-Javadoc)\n-\t * @see cz.metacentrum.perun.ldapc.model.impl.PerunEntry#addEntry(cz.metacentrum.perun.core.api.PerunBean)\n-\t */\n-\t@Override\n-\tpublic void addEntry(T bean) throws InternalErrorException {\n-\t\tDirContextOperations context = new DirContextAdapter(buildDN(bean));\n-\t\tmapToContext(bean, context);\n-\t\tldapTemplate.bind(context);\n-\t}\n-\n-\t@Override\n-\tpublic void modifyEntry(T bean) throws InternalErrorException {\n-\t\tmodifyEntry(bean, attributeDescriptions, updatableAttributeNames);\n-\t}\n-\n-\t@Override\n-\tpublic void modifyEntry(T bean, String... attrNames) throws InternalErrorException {\n-\t\tmodifyEntry(bean, attributeDescriptions, Arrays.asList(attrNames));\n-\t}\n-\n-\t/* (non-Javadoc)\n-\t * @see cz.metacentrum.perun.ldapc.model.impl.PerunEntry#modifyEntry(cz.metacentrum.perun.core.api.PerunBean)\n-\t */\n-\t@Override\n-\tpublic void modifyEntry(T bean, Iterable<PerunAttribute<T>> attrs, String...attrNames) throws InternalErrorException {\n-\t\tmodifyEntry(bean, attrs, Arrays.asList(attrNames));\n-\t}\n-\n-\tprotected void modifyEntry(T bean, Iterable<PerunAttribute<T>> attrs, List<String> attrNames) throws InternalErrorException {\n-\t\tDirContextOperations entry = findByDN(buildDN(bean));\n-\t\tmapToContext(bean, entry, findAttributeDescriptionsByLdapName(attrs, attrNames));\n-\t\tldapTemplate.modifyAttributes(entry);\n-\t}\n-\n-\t@Override\n-\tpublic void modifyEntry(T bean, AttributeDefinition attr) throws InternalErrorException {\n-\t\tDirContextOperations entry = findByDN(buildDN(bean));\n-\t\tList<PerunAttribute<T>> attrDefs = findAttributeDescriptionsByPerunAttr(getAttributeDescriptions(), attr);\n-\t\tif(attrDefs.isEmpty()) {\n-\t\t\t// this is not exceptional situation\n-\t\t\t// throw new InternalErrorException(\"Attribute description for attribute \" + attr.getName() + \" not found\");\n-\t\t\tlog.info(\"Attribute description for attribute {} not found, not modifying entry.\", attr.getName());\n-\t\t\treturn;\n-\t\t}\n-\t\tfor(PerunAttribute<T> attrDef : attrDefs) {\n-\t\t\tmapToContext(bean, entry, attrDef, attr);\n-\t\t}\n-\t\tldapTemplate.modifyAttributes(entry);\n-\t}\n-\n-\t@Override\n-\tpublic void modifyEntry(T bean, PerunAttribute<T> attrDef, AttributeDefinition attr) throws InternalErrorException {\n-\t\tDirContextOperations entry = findByDN(buildDN(bean));\n-\t\tmapToContext(bean, entry, attrDef, attr);\n-\t\tldapTemplate.modifyAttributes(entry);\n-\t}\n-\n-\t/* (non-Javadoc)\n-\t * @see cz.metacentrum.perun.ldapc.model.impl.PerunEntry#deleteEntry(cz.metacentrum.perun.core.api.PerunBean)\n-\t */\n-\t@Override\n-\tpublic void deleteEntry(T bean) throws InternalErrorException {\n-\t\tdeleteEntry(buildDN(bean));\n-\t}\n-\n-\n-\t@Override\n-\tpublic void deleteEntry(Name dn) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tldapTemplate.unbind(dn);\n-\t\t} catch (NameNotFoundException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic SyncOperation beginSynchronizeEntry(T bean) throws InternalErrorException {\n-\t\tDirContextOperations entry;\n-\t\tboolean newEntry = false;\n-\t\ttry {\n-\t\t\tentry = findByDN(buildDN(bean));\n-\t\t} catch(NameNotFoundException e) {\n-\t\t\tnewEntry = true;\n-\t\t\tentry = new DirContextAdapter(buildDN(bean));\n-\t\t}\n-\t\tif(newEntry) {\n-\t\t\tlog.debug(\"Creating new entry {} \", entry.toString());\n-\t\t\t// map with objectclasses\n-\t\t\tmapToContext(bean, entry);\n-\t\t\t// ldapTemplate.bind(entry);\n-\t\t} else {\n-\t\t\tlog.debug(\"Modifying entry {} \", entry.toString());\n-\t\t\t// map without objectclasses (entry exists)\n-\t\t\tmapToContext(bean, entry, getAttributeDescriptions());\n-\t\t\t//ldapTemplate.modifyAttributes(entry);\n-\t\t}\n-\t\treturn new SyncOperationImpl(entry, newEntry);\n-\t}\n-\n-\t@Override\n-\tpublic SyncOperation beginSynchronizeEntry(T bean, Iterable<Attribute> attrs) throws InternalErrorException {\n-\t\tDirContextOperations entry;\n-\t\tboolean newEntry = false;\n-\t\ttry {\n-\t\t\tentry = findByDN(buildDN(bean));\n-\t\t} catch(NameNotFoundException e) {\n-\t\t\tnewEntry = true;\n-\t\t\tentry = new DirContextAdapter(buildDN(bean));\n-\t\t}\n-\t\tmapToContext(bean, entry);\n-\t\tfor (Attribute attribute : attrs) {\n-\t\t\tfor(PerunAttribute<T> attributeDesc : findAttributeDescriptionsByPerunAttr(attributeDescriptions, attribute)) {\n-\t\t\t\tmapToContext(bean, entry, attributeDesc, attribute);\n-\t\t\t}\n-\t\t}\n+    private final static Logger log = LoggerFactory.getLogger(AbstractPerunEntry.class);\n+\n+    protected class SyncOperationImpl implements SyncOperation {\n+        public DirContextOperations entry;\n+        public boolean isNew;\n+\n+        public SyncOperationImpl(DirContextOperations entry, boolean isNew) {\n+            this.entry = entry;\n+            this.isNew = isNew;\n+        }\n+\n+        @Override\n+        public boolean isNew() {\n+            return isNew;\n+        }\n+\n+        @Override\n+        public DirContextOperations getEntry() {\n+            return entry;\n+        }\n+    }\n+\n+    @Autowired\n+    protected LdapTemplate ldapTemplate;\n+    @Autowired\n+    protected LdapProperties ldapProperties;\n+\n+    private List<PerunAttribute<T>> attributeDescriptions;\n+    private PerunAttributeConfigurer<T> attributeDescriptionsExt;\n+    private List<String> updatableAttributeNames;\n+\n+    public void afterPropertiesSet() {\n+        if (attributeDescriptions == null) {\n+            attributeDescriptions = new ArrayList<PerunAttribute<T>>();\n+        }\n+        attributeDescriptions.addAll(getDefaultAttributeDescriptions());\n+        if (updatableAttributeNames == null) {\n+            updatableAttributeNames = new ArrayList<String>();\n+        }\n+        updatableAttributeNames.addAll(getDefaultUpdatableAttributes());\n+\n+        // add attributes from extension list\n+        List<PerunAttribute<T>> attrsExt = attributeDescriptionsExt.getAttributeDescriptions();\n+        if (attrsExt != null) {\n+            attributeDescriptions.addAll(attrsExt);\n+        }\n+    }\n+\n+    abstract protected List<String> getDefaultUpdatableAttributes();\n+\n+    abstract protected List<PerunAttribute<T>> getDefaultAttributeDescriptions();\n+\n+    /* (non-Javadoc)\n+     * @see cz.metacentrum.perun.ldapc.model.impl.PerunEntry#addEntry(cz.metacentrum.perun.core.api.PerunBean)\n+     */\n+    @Override\n+    public void addEntry(T bean) throws InternalErrorException {\n+        DirContextOperations context = new DirContextAdapter(buildDN(bean));\n+        mapToContext(bean, context);\n+        ldapTemplate.bind(context);\n+    }\n+\n+    @Override\n+    public void modifyEntry(T bean) throws InternalErrorException {\n+        modifyEntry(bean, attributeDescriptions, updatableAttributeNames);\n+    }\n+\n+    @Override\n+    public void modifyEntry(T bean, String... attrNames) throws InternalErrorException {\n+        modifyEntry(bean, attributeDescriptions, Arrays.asList(attrNames));\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see cz.metacentrum.perun.ldapc.model.impl.PerunEntry#modifyEntry(cz.metacentrum.perun.core.api.PerunBean)\n+     */\n+    @Override\n+    public void modifyEntry(T bean, Iterable<PerunAttribute<T>> attrs, String... attrNames) throws InternalErrorException {\n+        modifyEntry(bean, attrs, Arrays.asList(attrNames));\n+    }\n+\n+    protected void modifyEntry(T bean, Iterable<PerunAttribute<T>> attrs, List<String> attrNames) throws InternalErrorException {\n+        DirContextOperations entry = findByDN(buildDN(bean));\n+        mapToContext(bean, entry, findAttributeDescriptionsByLdapName(attrs, attrNames));\n+        ldapTemplate.modifyAttributes(entry);\n+    }\n+\n+    @Override\n+    public void modifyEntry(T bean, AttributeDefinition attr) throws InternalErrorException {\n+        DirContextOperations entry = findByDN(buildDN(bean));\n+        List<PerunAttribute<T>> attrDefs = findAttributeDescriptionsByPerunAttr(getAttributeDescriptions(), attr);\n+        if (attrDefs.isEmpty()) {\n+            // this is not exceptional situation\n+            // throw new InternalErrorException(\"Attribute description for attribute \" + attr.getName() + \" not found\");\n+            log.info(\"Attribute description for attribute {} not found, not modifying entry.\", attr.getName());\n+            return;\n+        }\n+        for (PerunAttribute<T> attrDef : attrDefs) {\n+            mapToContext(bean, entry, attrDef, attr);\n+        }\n+        ldapTemplate.modifyAttributes(entry);\n+    }\n+\n+    @Override\n+    public void modifyEntry(T bean, PerunAttribute<T> attrDef, AttributeDefinition attr) throws InternalErrorException {\n+        DirContextOperations entry = findByDN(buildDN(bean));\n+        mapToContext(bean, entry, attrDef, attr);\n+        ldapTemplate.modifyAttributes(entry);\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see cz.metacentrum.perun.ldapc.model.impl.PerunEntry#deleteEntry(cz.metacentrum.perun.core.api.PerunBean)\n+     */\n+    @Override\n+    public void deleteEntry(T bean) throws InternalErrorException {\n+        deleteEntry(buildDN(bean));\n+    }\n+\n+\n+    @Override\n+    public void deleteEntry(Name dn) throws InternalErrorException {\n+        try {\n+            ldapTemplate.unbind(dn);\n+        } catch (NameNotFoundException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public SyncOperation beginSynchronizeEntry(T bean) throws InternalErrorException {\n+        DirContextOperations entry;\n+        boolean newEntry = false;\n+        try {\n+            entry = findByDN(buildDN(bean));\n+        } catch (NameNotFoundException e) {\n+            newEntry = true;\n+            entry = new DirContextAdapter(buildDN(bean));\n+        }\n+        if (newEntry) {\n+            log.debug(\"Creating new entry {} \", entry.toString());\n+            // map with objectclasses\n+            mapToContext(bean, entry);\n+            // ldapTemplate.bind(entry);\n+        } else {\n+            log.debug(\"Modifying entry {} \", entry.toString());\n+            // map without objectclasses (entry exists)\n+            mapToContext(bean, entry, getAttributeDescriptions());\n+            //ldapTemplate.modifyAttributes(entry);\n+        }\n+        return new SyncOperationImpl(entry, newEntry);\n+    }\n+\n+    @Override\n+    public SyncOperation beginSynchronizeEntry(T bean, Iterable<Attribute> attrs) throws InternalErrorException {\n+        DirContextOperations entry;\n+        boolean newEntry = false;\n+        try {\n+            entry = findByDN(buildDN(bean));\n+        } catch (NameNotFoundException e) {\n+            newEntry = true;\n+            entry = new DirContextAdapter(buildDN(bean));\n+        }\n+        mapToContext(bean, entry);\n+        for (Attribute attribute : attrs) {\n+            for (PerunAttribute<T> attributeDesc : findAttributeDescriptionsByPerunAttr(attributeDescriptions, attribute)) {\n+                mapToContext(bean, entry, attributeDesc, attribute);\n+            }\n+        }\n \t\t/*\n \t\tif(newEntry) {\n \t\t\tldapTemplate.bind(entry);\n@@ -206,273 +206,279 @@ public abstract class AbstractPerunEntry<T extends PerunBean> implements Initial\n \t\t\tldapTemplate.modifyAttributes(entry);\n \t\t}\n \t\t*/\n-\t\treturn new SyncOperationImpl(entry, newEntry);\n-\t}\n-\n-\t@Override\n-\tpublic void commitSyncOperation(SyncOperation op) throws InternalErrorException {\n-\t\tif(op.isNew()) {\n-\t\t\tldapTemplate.bind(op.getEntry());\n-\t\t} else {\n-\t\t\tldapTemplate.modifyAttributes(op.getEntry());\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void synchronizeEntry(T bean) throws InternalErrorException {\n-\t\tcommitSyncOperation(beginSynchronizeEntry(bean));\n-\t}\n-\n-\t@Override\n-\tpublic void synchronizeEntry(T bean, Iterable<Attribute> attrs) throws InternalErrorException {\n-\t\tcommitSyncOperation(beginSynchronizeEntry(bean, attrs));\n-\t}\n-\n-\t@Override\n-\tpublic DirContextOperations findByDN(Name dn) {\n-\t\tName baseDN = LdapNameBuilder.newInstance(this.getBaseDN()).build();\n-\t\tif(dn.startsWith(baseDN)) {\n-\t\t\treturn ldapTemplate.lookupContext(dn.getSuffix(baseDN.size()));\n-\t\t}\n-\t\treturn ldapTemplate.lookupContext(dn);\n-\t}\n-\n-\n-\t@Override\n-\tpublic DirContextOperations findById(String ...id) {\n-\t\treturn ldapTemplate.lookupContext(getEntryDN(id));\n-\t}\n-\n-\tabstract public Name getEntryDN(String ...id);\n-\n-\t@Override\n-\tpublic Boolean entryAttributeExists(T bean, String ldapAttributeName) {\n-\t\tDirContextOperations entry = findByDN(buildDN(bean));\n-\t\tString value = entry.getStringAttribute(ldapAttributeName);\n-\t\treturn (value != null);\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllAttributes(T bean) {\n-\t\tDirContextOperations entry = findByDN(buildDN(bean));\n-\t\t/* we have to find all existing entry attributes to resolve all the present options in names */\n-\t\tNamingEnumeration<String> attrNames = entry.getAttributes().getIDs();\n-\t\twhile(attrNames.hasMoreElements()) {\n-\t\t\tString attrName = attrNames.nextElement();\n-\t\t\tIterable<PerunAttribute<T>> attrDefs = findAttributeDescriptionsByLdapName(getAttributeDescriptions(), Arrays.asList(attrName));\n-\t\t\tfor(PerunAttribute<T> attrDef: attrDefs) {\n-\t\t\t\tif(attrDef.requiresAttributeBean() && !attrDef.isRequired()) {\n-\t\t\t\t\tentry.setAttributeValues(attrName, null);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\tif(entry.getModificationItems().length > 0) {\n-\t\t\tldapTemplate.modifyAttributes(entry);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic Boolean entryExists(T bean) {\n-\t\tDirContextOperations entry;\n-\t\ttry {\n-\t\t\tentry = findByDN(buildDN(bean));\n-\t\t} catch (NameNotFoundException e) {\n-\t\t\treturn false;\n-\t\t}\n-\t\tif(entry == null)\n-\t\t\treturn false;\n-\t\telse\n-\t\t\treturn true;\n-\t}\n-\n-\t@Override\n-\tpublic List<PerunAttribute<T>> getAttributeDescriptions() {\n-\t\treturn attributeDescriptions;\n-\t}\n-\n-\t@Override\n-\tpublic void setAttributeDescriptions(List<PerunAttribute<T>> attributeDescriptions) {\n-\t\tthis.attributeDescriptions = attributeDescriptions;\n-\t}\n-\n-\tpublic PerunAttributeConfigurer<T> getAttributeDescriptionsExt() {\n-\t\treturn attributeDescriptionsExt;\n-\t}\n-\n-\tpublic void setAttributeDescriptionsExt(PerunAttributeConfigurer<T> attributeDescriptionsExt) {\n-\t\tthis.attributeDescriptionsExt = attributeDescriptionsExt;\n-\t}\n-\n-\t@Override\n-\tpublic List<String> getUpdatableAttributeNames() {\n-\t\treturn updatableAttributeNames;\n-\t}\n-\n-\t@Override\n-\tpublic void setUpdatableAttributeNames(List<String> updatableAttributeNames) {\n-\t\tthis.updatableAttributeNames = updatableAttributeNames;\n-\t}\n-\n-\t@Override\n-\tpublic List<String> getPerunAttributeNames() {\n-\t\tList<String> attrNames = new ArrayList<String>();\n-\t\tfor(PerunAttribute<T> attrDesc: getAttributeDescriptions()) {\n-\t\t\tif(!attrDesc.requiresAttributeBean()) continue;\n-\t\t\tAttributeValueExtractor extractor = attrDesc.isMultiValued() ? (AttributeValueExtractor)attrDesc.getMultipleValuesExtractor() : (AttributeValueExtractor)attrDesc.getSingleValueExtractor();\n-\t\t\tattrNames.add(extractor.getNamespace() + \":\" + extractor.getName());\n-\t\t}\n-\t\treturn attrNames;\n-\t}\n-\n-\tprotected String getBaseDN() {\n-\t\treturn ldapProperties.getLdapBase();\n-\t}\n-\n-\tprotected Name addBaseDN(Name entryDN) {\n-\t\ttry {\n-\t\t\treturn LdapNameBuilder.newInstance(getBaseDN()).build().addAll(entryDN);\n-\t\t} catch (InvalidNameException e) {\n-\t\t\treturn entryDN;\n-\t\t}\n-\t}\n-\n-\tabstract protected Name buildDN(T bean);\n-\t\n-\tabstract protected void mapToContext(T bean, DirContextOperations context) throws InternalErrorException;\n-\n-\t/**\n-\t * Takes data from Perun bean and stores them into LDAP entry (context) for creation or update.\n-\t * List of attributes to fill-in is given as parameter; if attribute has no value, it will be removed.\n-\t * Attribute definitions that require data from Attribute bean are ignored.\n-\t *\n-\t * @param bean - Perun bean containing the basic data\n-\t * @param context - LDAP context (ie. entry) that should be filled\n-\t * @param attrs - list of known attributes\n-\t * @throws InternalErrorException\n-\t */\n-\tprotected void mapToContext(T bean, DirContextOperations context, Iterable<PerunAttribute<T>> attrs) throws InternalErrorException {\n-\t\tfor(PerunAttribute<T> attr: attrs) {\n-\n-\t\t\t// skip attributes not sources from object itself\n-\t\t\tif(attr.requiresAttributeBean())\n-\t\t\t\tcontinue;\n-\n-\t\t\t// clear attributes marked for deletion\n-\t\t\tif (attr.isDeleted()) {\n-\t\t\t\tlog.debug(\"Clearing LDAP attribute marked for deletion: {}\", attr.getName());\n-\t\t\t\tcontext.setAttributeValues(attr.getName(), null);\n-\t\t\t\tcontinue;\n-\t\t\t}\n-\n-\t\t\tString[] values;\n-\t\t\tif(attr.isMultiValued()) {\n-\t\t\t\tvalues = attr.getValues(bean);\n-\t\t\t} else {\n-\t\t\t\tif(attr.hasValue(bean)) {\n-\t\t\t\t\tvalues = new String[] { attr.getValue(bean) };\n-\t\t\t\t} else {\n-\t\t\t\t\tvalues = null;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif(attr.isRequired() && (values == null || values.length == 0)) {\n-\t\t\t\tthrow new InternalErrorException(\"Value of required attribute \" +  attr.getName() + \" is empty\");\n-\t\t\t}\n-\t\t\tcontext.setAttributeValues(attr.getName(), values);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t *\n-\t *\n-\t * @param bean\n-\t * @param entry\n-\t * @param attrDef\n-\t * @param attr\n-\t */\n-\tprotected void mapToContext(T bean, DirContextOperations entry, PerunAttribute<T> attrDef, AttributeDefinition attr) throws InternalErrorException {\n-\n-\t\tif (attrDef.isDeleted()) {\n-\t\t\t// clear attributes marked for deletion\n-\t\t\tentry.setAttributeValues(attrDef.getName(attr), null);\n-\t\t\tlog.debug(\"Clearing LDAP attribute marked for deletion: {}\", attrDef.getName(attr));\n-\t\t\treturn;\n-\t\t}\n-\n-\t\tObject[] values;\n-\t\tif(attr instanceof Attribute) {\n-\t\t\tif(attrDef.isMultiValued()) {\n-\t\t\t\tvalues = attrDef.getValues(bean, (Attribute)attr);\n-\t\t\t} else {\n-\t\t\t\tif(attrDef.hasValue(bean, (Attribute)attr)) {\n-\t\t\t\tvalues = Arrays.asList(attrDef.getValue(bean, (Attribute)attr)).toArray();\n-\t\t\t\t} else {\n-\t\t\t\t\tvalues = null;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif(attrDef.isRequired() && (values == null || values.length == 0)) {\n-\t\t\t\tthrow new InternalErrorException(\"Value of required attribute \" +  attrDef.getName() + \" is empty\");\n-\t\t\t}\n-\t\t} else {\n-\t\t\tvalues = null;\n-\t\t}\n-\t\tentry.setAttributeValues(attrDef.getName(attr), values);\n-\t}\n-\n-\tprotected Iterable<PerunAttribute<T>> findAttributeDescriptionsByLdapName(Iterable<PerunAttribute<T>> attrs, Iterable<String> attrNames) {\n-\t\tList<PerunAttribute<T>> result = new ArrayList<PerunAttribute<T>>();\n-\t\tfor(PerunAttribute<T> attrDesc : attrs) {\n-\t\t\tString descName = attrDesc.getName();\n-\t\t\tfor(String attrName : attrNames) {\n-\t\t\t\tif(descName.contains(\";\")) {\n-\t\t\t\t\t// tagged names are taken as prefixes\n-\t\t\t\t\tif(attrName.startsWith(descName)) result.add(attrDesc);\n-\t\t\t\t} else {\n-\t\t\t\t\t// names without options are compared as a whole\n-\t\t\t\t\tif(descName.equals(attrName)) result.add(attrDesc);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\treturn result;\n-\t}\n-\n-\t/**\n-\t * Find attribute description for given Perun AttributeDefinition, ie. find which attribute describes\n-\t * how to extract value from this AttributeDefinition.\n-\t *\n-\t * @param attrs\n-\t * @param attr\n-\t * @return\n-\t */\n-\tprotected List<PerunAttribute<T>> findAttributeDescriptionsByPerunAttr(List<PerunAttribute<T>> attrs, AttributeDefinition attr) {\n-\t\tList<PerunAttribute<T>> result = new ArrayList<PerunAttribute<T>>();\n-\t\tfor (PerunAttribute<T> attrDef : attrs) {\n-\t\t\tAttributeValueExtractor extractor = null;\n-\t\t\tif(attrDef.isMultiValued()) {\n-\t\t\t\tPerunAttribute.MultipleValuesExtractor<T> ext = attrDef.getMultipleValuesExtractor();\n-\t\t\t\tif(ext instanceof AttributeValueExtractor) {\n-\t\t\t\t\t\textractor = (AttributeValueExtractor)ext;\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tPerunAttribute.SingleValueExtractor<T> ext = attrDef.getSingleValueExtractor();\n-\t\t\t\tif(ext instanceof AttributeValueExtractor) {\n-\t\t\t\t\textractor = (AttributeValueExtractor)ext;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif(extractor != null && extractor.appliesToAttribute(attr)) {\n-\t\t\t\tresult.add(attrDef);\n-\t\t\t}\n-\t\t}\n-\t\treturn result;\n-\t}\n-\n-\tprotected ContextMapper<Name> getNameMapper() {\n-\t\treturn new AbstractContextMapper<Name>() {\n-\n-\t\t\t@Override\n-\t\t\tprotected Name doMapFromContext(DirContextOperations ctx) {\n-\t\t\t\treturn ctx.getDn();\n-\t\t\t}\n-\t\t};\n-\t}\n+        return new SyncOperationImpl(entry, newEntry);\n+    }\n+\n+    @Override\n+    public void commitSyncOperation(SyncOperation op) throws InternalErrorException {\n+        if (op.isNew()) {\n+            ldapTemplate.bind(op.getEntry());\n+        } else {\n+            ldapTemplate.modifyAttributes(op.getEntry());\n+        }\n+    }\n+\n+    @Override\n+    public void synchronizeEntry(T bean) throws InternalErrorException {\n+        commitSyncOperation(beginSynchronizeEntry(bean));\n+    }\n+\n+    @Override\n+    public void synchronizeEntry(T bean, Iterable<Attribute> attrs) throws InternalErrorException {\n+        commitSyncOperation(beginSynchronizeEntry(bean, attrs));\n+    }\n+\n+    @Override\n+    public DirContextOperations findByDN(Name dn) {\n+        Name baseDN = LdapNameBuilder.newInstance(this.getBaseDN()).build();\n+        if (dn.startsWith(baseDN)) {\n+            return ldapTemplate.lookupContext(dn.getSuffix(baseDN.size()));\n+        }\n+        return ldapTemplate.lookupContext(dn);\n+    }\n+\n+\n+    @Override\n+    public DirContextOperations findById(String... id) {\n+        return ldapTemplate.lookupContext(getEntryDN(id));\n+    }\n+\n+    abstract public Name getEntryDN(String... id);\n+\n+    @Override\n+    public Boolean entryAttributeExists(T bean, String ldapAttributeName) {\n+        DirContextOperations entry = findByDN(buildDN(bean));\n+        String value = entry.getStringAttribute(ldapAttributeName);\n+        return (value != null);\n+    }\n+\n+    @Override\n+    public void removeAllAttributes(T bean) {\n+        DirContextOperations entry = findByDN(buildDN(bean));\n+        /* we have to find all existing entry attributes to resolve all the present options in names */\n+        NamingEnumeration<String> attrNames = entry.getAttributes().getIDs();\n+        while (attrNames.hasMoreElements()) {\n+            String attrName = attrNames.nextElement();\n+            Iterable<PerunAttribute<T>> attrDefs = findAttributeDescriptionsByLdapName(getAttributeDescriptions(), Arrays.asList(attrName));\n+            for (PerunAttribute<T> attrDef : attrDefs) {\n+                if (attrDef.requiresAttributeBean() && !attrDef.isRequired()) {\n+                    entry.setAttributeValues(attrName, null);\n+                }\n+            }\n+        }\n+        if (entry.getModificationItems().length > 0) {\n+            ldapTemplate.modifyAttributes(entry);\n+        }\n+    }\n+\n+    @Override\n+    public Boolean entryExists(T bean) {\n+        DirContextOperations entry;\n+        try {\n+            entry = findByDN(buildDN(bean));\n+        } catch (NameNotFoundException e) {\n+            return false;\n+        }\n+        if (entry == null) {\n+            return false;\n+        } else {\n+            return true;\n+        }\n+    }\n+\n+    @Override\n+    public List<PerunAttribute<T>> getAttributeDescriptions() {\n+        return attributeDescriptions;\n+    }\n+\n+    @Override\n+    public void setAttributeDescriptions(List<PerunAttribute<T>> attributeDescriptions) {\n+        this.attributeDescriptions = attributeDescriptions;\n+    }\n+\n+    public PerunAttributeConfigurer<T> getAttributeDescriptionsExt() {\n+        return attributeDescriptionsExt;\n+    }\n+\n+    public void setAttributeDescriptionsExt(PerunAttributeConfigurer<T> attributeDescriptionsExt) {\n+        this.attributeDescriptionsExt = attributeDescriptionsExt;\n+    }\n+\n+    @Override\n+    public List<String> getUpdatableAttributeNames() {\n+        return updatableAttributeNames;\n+    }\n+\n+    @Override\n+    public void setUpdatableAttributeNames(List<String> updatableAttributeNames) {\n+        this.updatableAttributeNames = updatableAttributeNames;\n+    }\n+\n+    @Override\n+    public List<String> getPerunAttributeNames() {\n+        List<String> attrNames = new ArrayList<String>();\n+        for (PerunAttribute<T> attrDesc : getAttributeDescriptions()) {\n+            if (!attrDesc.requiresAttributeBean()) {\n+                continue;\n+            }\n+            AttributeValueExtractor extractor = attrDesc.isMultiValued() ? (AttributeValueExtractor) attrDesc.getMultipleValuesExtractor() : (AttributeValueExtractor) attrDesc.getSingleValueExtractor();\n+            attrNames.add(extractor.getNamespace() + \":\" + extractor.getName());\n+        }\n+        return attrNames;\n+    }\n+\n+    protected String getBaseDN() {\n+        return ldapProperties.getLdapBase();\n+    }\n+\n+    protected Name addBaseDN(Name entryDN) {\n+        try {\n+            return LdapNameBuilder.newInstance(getBaseDN()).build().addAll(entryDN);\n+        } catch (InvalidNameException e) {\n+            return entryDN;\n+        }\n+    }\n+\n+    abstract protected Name buildDN(T bean);\n+\n+    abstract protected void mapToContext(T bean, DirContextOperations context) throws InternalErrorException;\n+\n+    /**\n+     * Takes data from Perun bean and stores them into LDAP entry (context) for creation or update.\n+     * List of attributes to fill-in is given as parameter; if attribute has no value, it will be removed.\n+     * Attribute definitions that require data from Attribute bean are ignored.\n+     *\n+     * @param bean    - Perun bean containing the basic data\n+     * @param context - LDAP context (ie. entry) that should be filled\n+     * @param attrs   - list of known attributes\n+     * @throws InternalErrorException\n+     */\n+    protected void mapToContext(T bean, DirContextOperations context, Iterable<PerunAttribute<T>> attrs) throws InternalErrorException {\n+        for (PerunAttribute<T> attr : attrs) {\n+\n+            // skip attributes not sources from object itself\n+            if (attr.requiresAttributeBean()) {\n+                continue;\n+            }\n+\n+            // clear attributes marked for deletion\n+            if (attr.isDeleted()) {\n+                log.debug(\"Clearing LDAP attribute marked for deletion: {}\", attr.getName());\n+                context.setAttributeValues(attr.getName(), null);\n+                continue;\n+            }\n+\n+            String[] values;\n+            if (attr.isMultiValued()) {\n+                values = attr.getValues(bean);\n+            } else {\n+                if (attr.hasValue(bean)) {\n+                    values = new String[] {attr.getValue(bean)};\n+                } else {\n+                    values = null;\n+                }\n+            }\n+            if (attr.isRequired() && (values == null || values.length == 0)) {\n+                throw new InternalErrorException(\"Value of required attribute \" + attr.getName() + \" is empty\");\n+            }\n+            context.setAttributeValues(attr.getName(), values);\n+        }\n+    }\n+\n+    /**\n+     * @param bean\n+     * @param entry\n+     * @param attrDef\n+     * @param attr\n+     */\n+    protected void mapToContext(T bean, DirContextOperations entry, PerunAttribute<T> attrDef, AttributeDefinition attr) throws InternalErrorException {\n+\n+        if (attrDef.isDeleted()) {\n+            // clear attributes marked for deletion\n+            entry.setAttributeValues(attrDef.getName(attr), null);\n+            log.debug(\"Clearing LDAP attribute marked for deletion: {}\", attrDef.getName(attr));\n+            return;\n+        }\n+\n+        Object[] values;\n+        if (attr instanceof Attribute) {\n+            if (attrDef.isMultiValued()) {\n+                values = attrDef.getValues(bean, (Attribute) attr);\n+            } else {\n+                if (attrDef.hasValue(bean, (Attribute) attr)) {\n+                    values = Arrays.asList(attrDef.getValue(bean, (Attribute) attr)).toArray();\n+                } else {\n+                    values = null;\n+                }\n+            }\n+            if (attrDef.isRequired() && (values == null || values.length == 0)) {\n+                throw new InternalErrorException(\"Value of required attribute \" + attrDef.getName() + \" is empty\");\n+            }\n+        } else {\n+            values = null;\n+        }\n+        entry.setAttributeValues(attrDef.getName(attr), values);\n+    }\n+\n+    protected Iterable<PerunAttribute<T>> findAttributeDescriptionsByLdapName(Iterable<PerunAttribute<T>> attrs, Iterable<String> attrNames) {\n+        List<PerunAttribute<T>> result = new ArrayList<PerunAttribute<T>>();\n+        for (PerunAttribute<T> attrDesc : attrs) {\n+            String descName = attrDesc.getName();\n+            for (String attrName : attrNames) {\n+                if (descName.contains(\";\")) {\n+                    // tagged names are taken as prefixes\n+                    if (attrName.startsWith(descName)) {\n+                        result.add(attrDesc);\n+                    }\n+                } else {\n+                    // names without options are compared as a whole\n+                    if (descName.equals(attrName)) {\n+                        result.add(attrDesc);\n+                    }\n+                }\n+            }\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Find attribute description for given Perun AttributeDefinition, ie. find which attribute describes\n+     * how to extract value from this AttributeDefinition.\n+     *\n+     * @param attrs\n+     * @param attr\n+     * @return\n+     */\n+    protected List<PerunAttribute<T>> findAttributeDescriptionsByPerunAttr(List<PerunAttribute<T>> attrs, AttributeDefinition attr) {\n+        List<PerunAttribute<T>> result = new ArrayList<PerunAttribute<T>>();\n+        for (PerunAttribute<T> attrDef : attrs) {\n+            AttributeValueExtractor extractor = null;\n+            if (attrDef.isMultiValued()) {\n+                PerunAttribute.MultipleValuesExtractor<T> ext = attrDef.getMultipleValuesExtractor();\n+                if (ext instanceof AttributeValueExtractor) {\n+                    extractor = (AttributeValueExtractor) ext;\n+                }\n+            } else {\n+                PerunAttribute.SingleValueExtractor<T> ext = attrDef.getSingleValueExtractor();\n+                if (ext instanceof AttributeValueExtractor) {\n+                    extractor = (AttributeValueExtractor) ext;\n+                }\n+            }\n+            if (extractor != null && extractor.appliesToAttribute(attr)) {\n+                result.add(attrDef);\n+            }\n+        }\n+        return result;\n+    }\n+\n+    protected ContextMapper<Name> getNameMapper() {\n+        return new AbstractContextMapper<Name>() {\n+\n+            @Override\n+            protected Name doMapFromContext(DirContextOperations ctx) {\n+                return ctx.getDn();\n+            }\n+        };\n+    }\n \n }\n",
            "diff_size": 441
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/167/AbstractPerunEntry.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/167/AbstractPerunEntry.java\nindex a792b5db182..7cc04d10b97 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/167/AbstractPerunEntry.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/167/AbstractPerunEntry.java\n@@ -1,14 +1,11 @@\n package cz.metacentrum.perun.ldapc.model.impl;\n \n-\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n-\n import javax.naming.InvalidNameException;\n import javax.naming.Name;\n import javax.naming.NamingEnumeration;\n-\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.InitializingBean;\n@@ -20,7 +17,6 @@ import org.springframework.ldap.core.DirContextOperations;\n import org.springframework.ldap.core.LdapTemplate;\n import org.springframework.ldap.core.support.AbstractContextMapper;\n import org.springframework.ldap.support.LdapNameBuilder;\n-\n import cz.metacentrum.perun.core.api.Attribute;\n import cz.metacentrum.perun.core.api.AttributeDefinition;\n import cz.metacentrum.perun.core.api.PerunBean;\n@@ -30,449 +26,464 @@ import cz.metacentrum.perun.ldapc.beans.PerunAttributeConfigurer;\n import cz.metacentrum.perun.ldapc.model.PerunAttribute;\n import cz.metacentrum.perun.ldapc.model.PerunEntry;\n \n+\n public abstract class AbstractPerunEntry<T extends PerunBean> implements InitializingBean, PerunEntry<T> {\n \n-\tprivate final static Logger log = LoggerFactory.getLogger(AbstractPerunEntry.class);\n-\n-\tprotected class SyncOperationImpl implements SyncOperation {\n-\t\tpublic DirContextOperations entry;\n-\t\tpublic boolean isNew;\n-\n-\t\tpublic SyncOperationImpl(DirContextOperations entry, boolean isNew) {\n-\t\t\tthis.entry = entry;\n-\t\t\tthis.isNew = isNew;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic boolean isNew() {\n-\t\t\treturn isNew;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic DirContextOperations getEntry() {\n-\t\t\treturn entry;\n-\t\t}\n-\t}\n-\n-\t@Autowired\n-\tprotected LdapTemplate ldapTemplate;\n-\t@Autowired\n-\tprotected LdapProperties ldapProperties;\n-\n-\tprivate List<PerunAttribute<T>> attributeDescriptions;\n-\tprivate PerunAttributeConfigurer<T> attributeDescriptionsExt;\n-\tprivate List<String> updatableAttributeNames;\n-\n-\tpublic void afterPropertiesSet() {\n-\t\tif(attributeDescriptions == null) {\n-\t\t\tattributeDescriptions = new ArrayList<PerunAttribute<T>>();\n-\t\t}\n-\t\tattributeDescriptions.addAll(getDefaultAttributeDescriptions());\n-\t\tif(updatableAttributeNames == null) {\n-\t\t\tupdatableAttributeNames = new ArrayList<String>();\n-\t\t}\n-\t\tupdatableAttributeNames.addAll(getDefaultUpdatableAttributes());\n-\n-\t\t// add attributes from extension list\n-\t\tList<PerunAttribute<T>> attrsExt = attributeDescriptionsExt.getAttributeDescriptions();\n-\t\tif(attrsExt != null) {\n-\t\t\tattributeDescriptions.addAll(attrsExt);\n-\t\t}\n-\t}\n-\n-\tabstract protected List<String> getDefaultUpdatableAttributes();\n-\n-\tabstract protected List<PerunAttribute<T>> getDefaultAttributeDescriptions();\n-\n-\t/* (non-Javadoc)\n-\t * @see cz.metacentrum.perun.ldapc.model.impl.PerunEntry#addEntry(cz.metacentrum.perun.core.api.PerunBean)\n-\t */\n-\t@Override\n-\tpublic void addEntry(T bean) throws InternalErrorException {\n-\t\tDirContextOperations context = new DirContextAdapter(buildDN(bean));\n-\t\tmapToContext(bean, context);\n-\t\tldapTemplate.bind(context);\n-\t}\n-\n-\t@Override\n-\tpublic void modifyEntry(T bean) throws InternalErrorException {\n-\t\tmodifyEntry(bean, attributeDescriptions, updatableAttributeNames);\n-\t}\n-\n-\t@Override\n-\tpublic void modifyEntry(T bean, String... attrNames) throws InternalErrorException {\n-\t\tmodifyEntry(bean, attributeDescriptions, Arrays.asList(attrNames));\n-\t}\n-\n-\t/* (non-Javadoc)\n-\t * @see cz.metacentrum.perun.ldapc.model.impl.PerunEntry#modifyEntry(cz.metacentrum.perun.core.api.PerunBean)\n-\t */\n-\t@Override\n-\tpublic void modifyEntry(T bean, Iterable<PerunAttribute<T>> attrs, String...attrNames) throws InternalErrorException {\n-\t\tmodifyEntry(bean, attrs, Arrays.asList(attrNames));\n-\t}\n-\n-\tprotected void modifyEntry(T bean, Iterable<PerunAttribute<T>> attrs, List<String> attrNames) throws InternalErrorException {\n-\t\tDirContextOperations entry = findByDN(buildDN(bean));\n-\t\tmapToContext(bean, entry, findAttributeDescriptionsByLdapName(attrs, attrNames));\n-\t\tldapTemplate.modifyAttributes(entry);\n-\t}\n-\n-\t@Override\n-\tpublic void modifyEntry(T bean, AttributeDefinition attr) throws InternalErrorException {\n-\t\tDirContextOperations entry = findByDN(buildDN(bean));\n-\t\tList<PerunAttribute<T>> attrDefs = findAttributeDescriptionsByPerunAttr(getAttributeDescriptions(), attr);\n-\t\tif(attrDefs.isEmpty()) {\n-\t\t\t// this is not exceptional situation\n-\t\t\t// throw new InternalErrorException(\"Attribute description for attribute \" + attr.getName() + \" not found\");\n-\t\t\tlog.info(\"Attribute description for attribute {} not found, not modifying entry.\", attr.getName());\n-\t\t\treturn;\n-\t\t}\n-\t\tfor(PerunAttribute<T> attrDef : attrDefs) {\n-\t\t\tmapToContext(bean, entry, attrDef, attr);\n-\t\t}\n-\t\tldapTemplate.modifyAttributes(entry);\n-\t}\n-\n-\t@Override\n-\tpublic void modifyEntry(T bean, PerunAttribute<T> attrDef, AttributeDefinition attr) throws InternalErrorException {\n-\t\tDirContextOperations entry = findByDN(buildDN(bean));\n-\t\tmapToContext(bean, entry, attrDef, attr);\n-\t\tldapTemplate.modifyAttributes(entry);\n-\t}\n-\n-\t/* (non-Javadoc)\n-\t * @see cz.metacentrum.perun.ldapc.model.impl.PerunEntry#deleteEntry(cz.metacentrum.perun.core.api.PerunBean)\n-\t */\n-\t@Override\n-\tpublic void deleteEntry(T bean) throws InternalErrorException {\n-\t\tdeleteEntry(buildDN(bean));\n-\t}\n-\n-\n-\t@Override\n-\tpublic void deleteEntry(Name dn) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tldapTemplate.unbind(dn);\n-\t\t} catch (NameNotFoundException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic SyncOperation beginSynchronizeEntry(T bean) throws InternalErrorException {\n-\t\tDirContextOperations entry;\n-\t\tboolean newEntry = false;\n-\t\ttry {\n-\t\t\tentry = findByDN(buildDN(bean));\n-\t\t} catch(NameNotFoundException e) {\n-\t\t\tnewEntry = true;\n-\t\t\tentry = new DirContextAdapter(buildDN(bean));\n-\t\t}\n-\t\tif(newEntry) {\n-\t\t\tlog.debug(\"Creating new entry {} \", entry.toString());\n-\t\t\t// map with objectclasses\n-\t\t\tmapToContext(bean, entry);\n-\t\t\t// ldapTemplate.bind(entry);\n-\t\t} else {\n-\t\t\tlog.debug(\"Modifying entry {} \", entry.toString());\n-\t\t\t// map without objectclasses (entry exists)\n-\t\t\tmapToContext(bean, entry, getAttributeDescriptions());\n-\t\t\t//ldapTemplate.modifyAttributes(entry);\n-\t\t}\n-\t\treturn new SyncOperationImpl(entry, newEntry);\n-\t}\n-\n-\t@Override\n-\tpublic SyncOperation beginSynchronizeEntry(T bean, Iterable<Attribute> attrs) throws InternalErrorException {\n-\t\tDirContextOperations entry;\n-\t\tboolean newEntry = false;\n-\t\ttry {\n-\t\t\tentry = findByDN(buildDN(bean));\n-\t\t} catch(NameNotFoundException e) {\n-\t\t\tnewEntry = true;\n-\t\t\tentry = new DirContextAdapter(buildDN(bean));\n-\t\t}\n-\t\tmapToContext(bean, entry);\n-\t\tfor (Attribute attribute : attrs) {\n-\t\t\tfor(PerunAttribute<T> attributeDesc : findAttributeDescriptionsByPerunAttr(attributeDescriptions, attribute)) {\n-\t\t\t\tmapToContext(bean, entry, attributeDesc, attribute);\n-\t\t\t}\n-\t\t}\n-\t\t/*\n-\t\tif(newEntry) {\n-\t\t\tldapTemplate.bind(entry);\n-\t\t} else {\n-\t\t\tldapTemplate.modifyAttributes(entry);\n-\t\t}\n-\t\t*/\n-\t\treturn new SyncOperationImpl(entry, newEntry);\n-\t}\n-\n-\t@Override\n-\tpublic void commitSyncOperation(SyncOperation op) throws InternalErrorException {\n-\t\tif(op.isNew()) {\n-\t\t\tldapTemplate.bind(op.getEntry());\n-\t\t} else {\n-\t\t\tldapTemplate.modifyAttributes(op.getEntry());\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void synchronizeEntry(T bean) throws InternalErrorException {\n-\t\tcommitSyncOperation(beginSynchronizeEntry(bean));\n-\t}\n-\n-\t@Override\n-\tpublic void synchronizeEntry(T bean, Iterable<Attribute> attrs) throws InternalErrorException {\n-\t\tcommitSyncOperation(beginSynchronizeEntry(bean, attrs));\n-\t}\n-\n-\t@Override\n-\tpublic DirContextOperations findByDN(Name dn) {\n-\t\tName baseDN = LdapNameBuilder.newInstance(this.getBaseDN()).build();\n-\t\tif(dn.startsWith(baseDN)) {\n-\t\t\treturn ldapTemplate.lookupContext(dn.getSuffix(baseDN.size()));\n-\t\t}\n-\t\treturn ldapTemplate.lookupContext(dn);\n-\t}\n-\n-\n-\t@Override\n-\tpublic DirContextOperations findById(String ...id) {\n-\t\treturn ldapTemplate.lookupContext(getEntryDN(id));\n-\t}\n-\n-\tabstract public Name getEntryDN(String ...id);\n-\n-\t@Override\n-\tpublic Boolean entryAttributeExists(T bean, String ldapAttributeName) {\n-\t\tDirContextOperations entry = findByDN(buildDN(bean));\n-\t\tString value = entry.getStringAttribute(ldapAttributeName);\n-\t\treturn (value != null);\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllAttributes(T bean) {\n-\t\tDirContextOperations entry = findByDN(buildDN(bean));\n-\t\t/* we have to find all existing entry attributes to resolve all the present options in names */\n-\t\tNamingEnumeration<String> attrNames = entry.getAttributes().getIDs();\n-\t\twhile(attrNames.hasMoreElements()) {\n-\t\t\tString attrName = attrNames.nextElement();\n-\t\t\tIterable<PerunAttribute<T>> attrDefs = findAttributeDescriptionsByLdapName(getAttributeDescriptions(), Arrays.asList(attrName));\n-\t\t\tfor(PerunAttribute<T> attrDef: attrDefs) {\n-\t\t\t\tif(attrDef.requiresAttributeBean() && !attrDef.isRequired()) {\n-\t\t\t\t\tentry.setAttributeValues(attrName, null);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\tif(entry.getModificationItems().length > 0) {\n-\t\t\tldapTemplate.modifyAttributes(entry);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic Boolean entryExists(T bean) {\n-\t\tDirContextOperations entry;\n-\t\ttry {\n-\t\t\tentry = findByDN(buildDN(bean));\n-\t\t} catch (NameNotFoundException e) {\n-\t\t\treturn false;\n-\t\t}\n-\t\tif(entry == null)\n-\t\t\treturn false;\n-\t\telse\n-\t\t\treturn true;\n-\t}\n-\n-\t@Override\n-\tpublic List<PerunAttribute<T>> getAttributeDescriptions() {\n-\t\treturn attributeDescriptions;\n-\t}\n-\n-\t@Override\n-\tpublic void setAttributeDescriptions(List<PerunAttribute<T>> attributeDescriptions) {\n-\t\tthis.attributeDescriptions = attributeDescriptions;\n-\t}\n-\n-\tpublic PerunAttributeConfigurer<T> getAttributeDescriptionsExt() {\n-\t\treturn attributeDescriptionsExt;\n-\t}\n-\n-\tpublic void setAttributeDescriptionsExt(PerunAttributeConfigurer<T> attributeDescriptionsExt) {\n-\t\tthis.attributeDescriptionsExt = attributeDescriptionsExt;\n-\t}\n-\n-\t@Override\n-\tpublic List<String> getUpdatableAttributeNames() {\n-\t\treturn updatableAttributeNames;\n-\t}\n-\n-\t@Override\n-\tpublic void setUpdatableAttributeNames(List<String> updatableAttributeNames) {\n-\t\tthis.updatableAttributeNames = updatableAttributeNames;\n-\t}\n-\n-\t@Override\n-\tpublic List<String> getPerunAttributeNames() {\n-\t\tList<String> attrNames = new ArrayList<String>();\n-\t\tfor(PerunAttribute<T> attrDesc: getAttributeDescriptions()) {\n-\t\t\tif(!attrDesc.requiresAttributeBean()) continue;\n-\t\t\tAttributeValueExtractor extractor = attrDesc.isMultiValued() ? (AttributeValueExtractor)attrDesc.getMultipleValuesExtractor() : (AttributeValueExtractor)attrDesc.getSingleValueExtractor();\n-\t\t\tattrNames.add(extractor.getNamespace() + \":\" + extractor.getName());\n-\t\t}\n-\t\treturn attrNames;\n-\t}\n-\n-\tprotected String getBaseDN() {\n-\t\treturn ldapProperties.getLdapBase();\n-\t}\n-\n-\tprotected Name addBaseDN(Name entryDN) {\n-\t\ttry {\n-\t\t\treturn LdapNameBuilder.newInstance(getBaseDN()).build().addAll(entryDN);\n-\t\t} catch (InvalidNameException e) {\n-\t\t\treturn entryDN;\n-\t\t}\n-\t}\n-\n-\tabstract protected Name buildDN(T bean);\n-\t\n-\tabstract protected void mapToContext(T bean, DirContextOperations context) throws InternalErrorException;\n-\n-\t/**\n-\t * Takes data from Perun bean and stores them into LDAP entry (context) for creation or update.\n-\t * List of attributes to fill-in is given as parameter; if attribute has no value, it will be removed.\n-\t * Attribute definitions that require data from Attribute bean are ignored.\n-\t *\n-\t * @param bean - Perun bean containing the basic data\n-\t * @param context - LDAP context (ie. entry) that should be filled\n-\t * @param attrs - list of known attributes\n-\t * @throws InternalErrorException\n-\t */\n-\tprotected void mapToContext(T bean, DirContextOperations context, Iterable<PerunAttribute<T>> attrs) throws InternalErrorException {\n-\t\tfor(PerunAttribute<T> attr: attrs) {\n-\n-\t\t\t// skip attributes not sources from object itself\n-\t\t\tif(attr.requiresAttributeBean())\n-\t\t\t\tcontinue;\n-\n-\t\t\t// clear attributes marked for deletion\n-\t\t\tif (attr.isDeleted()) {\n-\t\t\t\tlog.debug(\"Clearing LDAP attribute marked for deletion: {}\", attr.getName());\n-\t\t\t\tcontext.setAttributeValues(attr.getName(), null);\n-\t\t\t\tcontinue;\n-\t\t\t}\n-\n-\t\t\tString[] values;\n-\t\t\tif(attr.isMultiValued()) {\n-\t\t\t\tvalues = attr.getValues(bean);\n-\t\t\t} else {\n-\t\t\t\tif(attr.hasValue(bean)) {\n-\t\t\t\t\tvalues = new String[] { attr.getValue(bean) };\n-\t\t\t\t} else {\n-\t\t\t\t\tvalues = null;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif(attr.isRequired() && (values == null || values.length == 0)) {\n-\t\t\t\tthrow new InternalErrorException(\"Value of required attribute \" +  attr.getName() + \" is empty\");\n-\t\t\t}\n-\t\t\tcontext.setAttributeValues(attr.getName(), values);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t *\n-\t *\n-\t * @param bean\n-\t * @param entry\n-\t * @param attrDef\n-\t * @param attr\n-\t */\n-\tprotected void mapToContext(T bean, DirContextOperations entry, PerunAttribute<T> attrDef, AttributeDefinition attr) throws InternalErrorException {\n-\n-\t\tif (attrDef.isDeleted()) {\n-\t\t\t// clear attributes marked for deletion\n-\t\t\tentry.setAttributeValues(attrDef.getName(attr), null);\n-\t\t\tlog.debug(\"Clearing LDAP attribute marked for deletion: {}\", attrDef.getName(attr));\n-\t\t\treturn;\n-\t\t}\n-\n-\t\tObject[] values;\n-\t\tif(attr instanceof Attribute) {\n-\t\t\tif(attrDef.isMultiValued()) {\n-\t\t\t\tvalues = attrDef.getValues(bean, (Attribute)attr);\n-\t\t\t} else {\n-\t\t\t\tif(attrDef.hasValue(bean, (Attribute)attr)) {\n-\t\t\t\tvalues = Arrays.asList(attrDef.getValue(bean, (Attribute)attr)).toArray();\n-\t\t\t\t} else {\n-\t\t\t\t\tvalues = null;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif(attrDef.isRequired() && (values == null || values.length == 0)) {\n-\t\t\t\tthrow new InternalErrorException(\"Value of required attribute \" +  attrDef.getName() + \" is empty\");\n-\t\t\t}\n-\t\t} else {\n-\t\t\tvalues = null;\n-\t\t}\n-\t\tentry.setAttributeValues(attrDef.getName(attr), values);\n-\t}\n-\n-\tprotected Iterable<PerunAttribute<T>> findAttributeDescriptionsByLdapName(Iterable<PerunAttribute<T>> attrs, Iterable<String> attrNames) {\n-\t\tList<PerunAttribute<T>> result = new ArrayList<PerunAttribute<T>>();\n-\t\tfor(PerunAttribute<T> attrDesc : attrs) {\n-\t\t\tString descName = attrDesc.getName();\n-\t\t\tfor(String attrName : attrNames) {\n-\t\t\t\tif(descName.contains(\";\")) {\n-\t\t\t\t\t// tagged names are taken as prefixes\n-\t\t\t\t\tif(attrName.startsWith(descName)) result.add(attrDesc);\n-\t\t\t\t} else {\n-\t\t\t\t\t// names without options are compared as a whole\n-\t\t\t\t\tif(descName.equals(attrName)) result.add(attrDesc);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\treturn result;\n-\t}\n-\n-\t/**\n-\t * Find attribute description for given Perun AttributeDefinition, ie. find which attribute describes\n-\t * how to extract value from this AttributeDefinition.\n-\t *\n-\t * @param attrs\n-\t * @param attr\n-\t * @return\n-\t */\n-\tprotected List<PerunAttribute<T>> findAttributeDescriptionsByPerunAttr(List<PerunAttribute<T>> attrs, AttributeDefinition attr) {\n-\t\tList<PerunAttribute<T>> result = new ArrayList<PerunAttribute<T>>();\n-\t\tfor (PerunAttribute<T> attrDef : attrs) {\n-\t\t\tAttributeValueExtractor extractor = null;\n-\t\t\tif(attrDef.isMultiValued()) {\n-\t\t\t\tPerunAttribute.MultipleValuesExtractor<T> ext = attrDef.getMultipleValuesExtractor();\n-\t\t\t\tif(ext instanceof AttributeValueExtractor) {\n-\t\t\t\t\t\textractor = (AttributeValueExtractor)ext;\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tPerunAttribute.SingleValueExtractor<T> ext = attrDef.getSingleValueExtractor();\n-\t\t\t\tif(ext instanceof AttributeValueExtractor) {\n-\t\t\t\t\textractor = (AttributeValueExtractor)ext;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif(extractor != null && extractor.appliesToAttribute(attr)) {\n-\t\t\t\tresult.add(attrDef);\n-\t\t\t}\n-\t\t}\n-\t\treturn result;\n-\t}\n-\n-\tprotected ContextMapper<Name> getNameMapper() {\n-\t\treturn new AbstractContextMapper<Name>() {\n-\n-\t\t\t@Override\n-\t\t\tprotected Name doMapFromContext(DirContextOperations ctx) {\n-\t\t\t\treturn ctx.getDn();\n-\t\t\t}\n-\t\t};\n-\t}\n-\n-}\n+\n+ private final static Logger log = LoggerFactory.getLogger(AbstractPerunEntry.class);\n+\n+\n+ protected class SyncOperationImpl implements SyncOperation {\n+  public DirContextOperations entry;\n+\n+  public boolean isNew;\n+\n+\n+  public SyncOperationImpl(DirContextOperations entry, boolean isNew) {\n+   this.entry = entry;\n+   this.isNew = isNew;\n+  }\n+\n+  @Override\n+  public boolean isNew() {\n+   return isNew;\n+  }\n+\n+  @Override\n+  public DirContextOperations getEntry() {\n+   return entry;\n+  }\n+ }\n+\n+ @Autowired\n+ protected LdapTemplate ldapTemplate;\n+\n+ @Autowired\n+ protected LdapProperties ldapProperties;\n+ private List<PerunAttribute<T>> attributeDescriptions;\n+ private PerunAttributeConfigurer<T> attributeDescriptionsExt;\n+ private List<String> updatableAttributeNames;\n+\n+ public void afterPropertiesSet() {\n+  if (attributeDescriptions == null) {\n+   attributeDescriptions = new ArrayList<PerunAttribute<T>>();\n+  }\n+  attributeDescriptions.addAll(getDefaultAttributeDescriptions());\n+  if (updatableAttributeNames == null) {\n+   updatableAttributeNames = new ArrayList<String>();\n+  }\n+  updatableAttributeNames.addAll(getDefaultUpdatableAttributes());\n+\n+  // add attributes from extension list\n+  List<PerunAttribute<T>> attrsExt = attributeDescriptionsExt.getAttributeDescriptions();\n+  if (attrsExt != null) {\n+   attributeDescriptions.addAll(attrsExt);\n+  }\n+ }\n+\n+ abstract\n+ protected List<String> getDefaultUpdatableAttributes();\n+\n+ abstract\n+ protected List<PerunAttribute<T>> getDefaultAttributeDescriptions();\n+\n+ /* (non-Javadoc)\n+  * @see cz.metacentrum.perun.ldapc.model.impl.PerunEntry#addEntry(cz.metacentrum.perun.core.api.PerunBean)\n+  */\n+\n+ @Override\n+ public void addEntry(T bean) throws InternalErrorException {\n+  DirContextOperations context = new DirContextAdapter(buildDN(bean));\n+  mapToContext(bean, context);\n+  ldapTemplate.bind(context);\n+ }\n+\n+ @Override\n+ public void modifyEntry(T bean) throws InternalErrorException {\n+  modifyEntry(bean, attributeDescriptions, updatableAttributeNames);\n+ }\n+\n+ @Override\n+ public void modifyEntry(T bean, String... attrNames) throws InternalErrorException {\n+  modifyEntry(bean, attributeDescriptions, Arrays.asList(attrNames));\n+ }\n+\n+ /* (non-Javadoc)\n+  * @see cz.metacentrum.perun.ldapc.model.impl.PerunEntry#modifyEntry(cz.metacentrum.perun.core.api.PerunBean)\n+  */\n+\n+ @Override\n+ public void modifyEntry(T bean, Iterable<PerunAttribute<T>> attrs, String... attrNames) throws InternalErrorException {\n+  modifyEntry(bean, attrs, Arrays.asList(attrNames));\n+ }\n+\n+ protected void modifyEntry(T bean, Iterable<PerunAttribute<T>> attrs, List<String> attrNames) throws InternalErrorException {\n+  DirContextOperations entry = findByDN(buildDN(bean));\n+  mapToContext(bean, entry, findAttributeDescriptionsByLdapName(attrs, attrNames));\n+  ldapTemplate.modifyAttributes(entry);\n+ }\n+\n+ @Override\n+ public void modifyEntry(T bean, AttributeDefinition attr) throws InternalErrorException {\n+  DirContextOperations entry = findByDN(buildDN(bean));\n+  List<PerunAttribute<T>> attrDefs = findAttributeDescriptionsByPerunAttr(getAttributeDescriptions(), attr);\n+  if (attrDefs.isEmpty()) {\n+   // this is not exceptional situation\n+   // throw new InternalErrorException(\"Attribute description for attribute \" + attr.getName() + \" not found\");\n+   log.info(\"Attribute description for attribute {} not found, not modifying entry.\", attr.getName());\n+   return;\n+  }\n+\n+  for (PerunAttribute<T> attrDef : attrDefs) {\n+   mapToContext(bean, entry, attrDef, attr);\n+  }\n+  ldapTemplate.modifyAttributes(entry);\n+ }\n+\n+ @Override\n+ public void modifyEntry(T bean, PerunAttribute<T> attrDef, AttributeDefinition attr) throws InternalErrorException {\n+  DirContextOperations entry = findByDN(buildDN(bean));\n+  mapToContext(bean, entry, attrDef, attr);\n+  ldapTemplate.modifyAttributes(entry);\n+ }\n+\n+ /* (non-Javadoc)\n+  * @see cz.metacentrum.perun.ldapc.model.impl.PerunEntry#deleteEntry(cz.metacentrum.perun.core.api.PerunBean)\n+  */\n+\n+ @Override\n+ public void deleteEntry(T bean) throws InternalErrorException {\n+  deleteEntry(buildDN(bean));\n+ }\n+\n+ @Override\n+ public void deleteEntry(Name dn) throws InternalErrorException {\n+  try {\n+   ldapTemplate.unbind(dn);\n+  } catch (NameNotFoundException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public SyncOperation beginSynchronizeEntry(T bean) throws InternalErrorException {\n+  DirContextOperations entry;\n+  boolean newEntry = false;\n+  try {\n+   entry = findByDN(buildDN(bean));\n+  } catch (NameNotFoundException e) {\n+   newEntry = true;\n+   entry = new DirContextAdapter(buildDN(bean));\n+  }\n+  if (newEntry) {\n+   log.debug(\"Creating new entry {} \", entry.toString());\n+   // map with objectclasses\n+   mapToContext(bean, entry);\n+   // ldapTemplate.bind(entry);\n+  } else {\n+   log.debug(\"Modifying entry {} \", entry.toString());\n+   // map without objectclasses (entry exists)\n+   mapToContext(bean, entry, getAttributeDescriptions());\n+   //ldapTemplate.modifyAttributes(entry);\n+  }\n+\n+  return new SyncOperationImpl(entry, newEntry);\n+ }\n+\n+ @Override\n+ public SyncOperation beginSynchronizeEntry(T bean, Iterable<Attribute> attrs) throws InternalErrorException {\n+  DirContextOperations entry;\n+  boolean newEntry = false;\n+  try {\n+   entry = findByDN(buildDN(bean));\n+  } catch (NameNotFoundException e) {\n+   newEntry = true;\n+   entry = new DirContextAdapter(buildDN(bean));\n+  }\n+  mapToContext(bean, entry);\n+  for (Attribute attribute : attrs) {\n+\n+   for (PerunAttribute<T> attributeDesc : findAttributeDescriptionsByPerunAttr(attributeDescriptions, attribute)) {\n+    mapToContext(bean, entry, attributeDesc, attribute);\n+   }\n+  }\n+  /*\n+  if(newEntry) {\n+   ldapTemplate.bind(entry);\n+  } else {\n+   ldapTemplate.modifyAttributes(entry);\n+  }\n+  */\n+\n+  return new SyncOperationImpl(entry, newEntry);\n+ }\n+\n+ @Override\n+ public void commitSyncOperation(SyncOperation op) throws InternalErrorException {\n+  if (op.isNew()) {\n+   ldapTemplate.bind(op.getEntry());\n+  } else {\n+   ldapTemplate.modifyAttributes(op.getEntry());\n+  }\n+ }\n+\n+ @Override\n+ public void synchronizeEntry(T bean) throws InternalErrorException {\n+  commitSyncOperation(beginSynchronizeEntry(bean));\n+ }\n+\n+ @Override\n+ public void synchronizeEntry(T bean, Iterable<Attribute> attrs) throws InternalErrorException {\n+  commitSyncOperation(beginSynchronizeEntry(bean, attrs));\n+ }\n+\n+ @Override\n+ public DirContextOperations findByDN(Name dn) {\n+  Name baseDN = LdapNameBuilder.newInstance(this.getBaseDN()).build();\n+  if (dn.startsWith(baseDN)) {\n+   return ldapTemplate.lookupContext(dn.getSuffix(baseDN.size()));\n+  }\n+\n+  return ldapTemplate.lookupContext(dn);\n+ }\n+\n+ @Override\n+ public DirContextOperations findById(String... id) {\n+  return ldapTemplate.lookupContext(getEntryDN(id));\n+ }\n+\n+ abstract public Name getEntryDN(String... id);\n+\n+ @Override\n+ public Boolean entryAttributeExists(T bean, String ldapAttributeName) {\n+  DirContextOperations entry = findByDN(buildDN(bean));\n+  String value = entry.getStringAttribute(ldapAttributeName);\n+  return (value != null);\n+ }\n+\n+ @Override\n+ public void removeAllAttributes(T bean) {\n+  DirContextOperations entry = findByDN(buildDN(bean));\n+  /* we have to find all existing entry attributes to resolve all the present options in names */\n+  NamingEnumeration<String> attrNames = entry.getAttributes().getIDs();\n+  while (attrNames.hasMoreElements()) {\n+   String attrName = attrNames.nextElement();\n+   Iterable<PerunAttribute<T>> attrDefs = findAttributeDescriptionsByLdapName(getAttributeDescriptions(), Arrays.asList(attrName));\n+   for (PerunAttribute<T> attrDef : attrDefs) {\n+    if (attrDef.requiresAttributeBean() && !attrDef.isRequired()) {\n+     entry.setAttributeValues(attrName, null);\n+    }\n+   }\n+  }\n+  if (entry.getModificationItems().length > 0) {\n+   ldapTemplate.modifyAttributes(entry);\n+  }\n+ }\n+\n+ @Override\n+ public Boolean entryExists(T bean) {\n+  DirContextOperations entry;\n+  try {\n+   entry = findByDN(buildDN(bean));\n+  } catch (NameNotFoundException e) {\n+   return false;\n+  }\n+  if (entry == null) return false;\n+  else return true;\n+ }\n+\n+ @Override\n+ public List<PerunAttribute<T>> getAttributeDescriptions() {\n+  return attributeDescriptions;\n+ }\n+\n+ @Override\n+ public void setAttributeDescriptions(List<PerunAttribute<T>> attributeDescriptions) {\n+  this.attributeDescriptions = attributeDescriptions;\n+ }\n+\n+ public PerunAttributeConfigurer<T> getAttributeDescriptionsExt() {\n+  return attributeDescriptionsExt;\n+ }\n+\n+ public void setAttributeDescriptionsExt(PerunAttributeConfigurer<T> attributeDescriptionsExt) {\n+  this.attributeDescriptionsExt = attributeDescriptionsExt;\n+ }\n+\n+ @Override\n+ public List<String> getUpdatableAttributeNames() {\n+  return updatableAttributeNames;\n+ }\n+\n+ @Override\n+ public void setUpdatableAttributeNames(List<String> updatableAttributeNames) {\n+  this.updatableAttributeNames = updatableAttributeNames;\n+ }\n+\n+ @Override\n+ public List<String> getPerunAttributeNames() {\n+  List<String> attrNames = new ArrayList<String>();\n+  for (PerunAttribute<T> attrDesc : getAttributeDescriptions()) {\n+   if (!attrDesc.requiresAttributeBean()) continue;\n+   AttributeValueExtractor extractor = attrDesc.isMultiValued() ? (AttributeValueExtractor) attrDesc.getMultipleValuesExtractor() : (AttributeValueExtractor) attrDesc.getSingleValueExtractor();\n+   attrNames.add(extractor.getNamespace() + \":\" + extractor.getName());\n+  }\n+\n+  return attrNames;\n+ }\n+\n+ protected String getBaseDN() {\n+  return ldapProperties.getLdapBase();\n+ }\n+\n+ protected Name addBaseDN(Name entryDN) {\n+  try {\n+   return LdapNameBuilder.newInstance(getBaseDN()).build().addAll(entryDN);\n+  } catch (InvalidNameException e) {\n+   return entryDN;\n+  }\n+ }\n+\n+ abstract\n+ protected Name buildDN(T bean);\n+\n+ abstract\n+ protected void mapToContext(T bean, DirContextOperations context) throws InternalErrorException;\n+\n+ /**\n+  * Takes data from Perun bean and stores them into LDAP entry (context) for creation or update.\n+  * List of attributes to fill-in is given as parameter; if attribute has no value, it will be removed.\n+  * Attribute definitions that require data from Attribute bean are ignored.\n+  *\n+  * @param bean - Perun bean containing the basic data\n+  * @param context - LDAP context (ie. entry) that should be filled\n+  * @param attrs - list of known attributes\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ protected void mapToContext(T bean, DirContextOperations context, Iterable<PerunAttribute<T>> attrs) throws InternalErrorException {\n+\n+  for (PerunAttribute<T> attr : attrs) {\n+\n+   // skip attributes not sources from object itself\n+   if (attr.requiresAttributeBean()) continue;\n+\n+   // clear attributes marked for deletion\n+   if (attr.isDeleted()) {\n+    log.debug(\"Clearing LDAP attribute marked for deletion: {}\", attr.getName());\n+    context.setAttributeValues(attr.getName(), null);\n+    continue;\n+   }\n+   String[] values;\n+   if (attr.isMultiValued()) {\n+    values = attr.getValues(bean);\n+   } else {\n+    if (attr.hasValue(bean)) {\n+     values = new String[] {attr.getValue(bean)};\n+    } else {\n+     values = null;\n+    }\n+   }\n+   if (attr.isRequired() && (values == null || values.length == 0)) {\n+    throw new InternalErrorException(\"Value of required attribute \" + attr.getName() + \" is empty\");\n+   }\n+   context.setAttributeValues(attr.getName(), values);\n+  }\n+ }\n+\n+ /**\n+  *\n+  *\n+  * @param bean\n+  * @param entry\n+  * @param attrDef\n+  * @param attr\n+  */\n+\n+ protected void mapToContext(T bean, DirContextOperations entry, PerunAttribute<T> attrDef, AttributeDefinition attr) throws InternalErrorException {\n+  if (attrDef.isDeleted()) {\n+   // clear attributes marked for deletion\n+   entry.setAttributeValues(attrDef.getName(attr), null);\n+   log.debug(\"Clearing LDAP attribute marked for deletion: {}\", attrDef.getName(attr));\n+   return;\n+  }\n+  Object[] values;\n+  if (attr instanceof Attribute) {\n+   if (attrDef.isMultiValued()) {\n+    values = attrDef.getValues(bean, (Attribute) attr);\n+   } else {\n+    if (attrDef.hasValue(bean, (Attribute) attr)) {\n+     values = Arrays.asList(attrDef.getValue(bean, (Attribute) attr)).toArray();\n+    } else {\n+     values = null;\n+    }\n+   }\n+   if (attrDef.isRequired() && (values == null || values.length == 0)) {\n+    throw new InternalErrorException(\"Value of required attribute \" + attrDef.getName() + \" is empty\");\n+   }\n+  } else {\n+   values = null;\n+  }\n+  entry.setAttributeValues(attrDef.getName(attr), values);\n+ }\n+\n+ protected Iterable<PerunAttribute<T>> findAttributeDescriptionsByLdapName(Iterable<PerunAttribute<T>> attrs, Iterable<String> attrNames) {\n+  List<PerunAttribute<T>> result = new ArrayList<PerunAttribute<T>>();\n+  for (PerunAttribute<T> attrDesc : attrs) {\n+   String descName = attrDesc.getName();\n+   for (String attrName : attrNames) {\n+    if (descName.contains(\";\")) {\n+     // tagged names are taken as prefixes\n+     if (attrName.startsWith(descName)) result.add(attrDesc);\n+    } else {\n+     // names without options are compared as a whole\n+     if (descName.equals(attrName)) result.add(attrDesc);\n+    }\n+   }\n+  }\n+\n+  return result;\n+ }\n+\n+ /**\n+  * Find attribute description for given Perun AttributeDefinition, ie. find which attribute describes\n+  * how to extract value from this AttributeDefinition.\n+  *\n+  * @param attrs\n+  * @param attr\n+  * @return\n+  */\n+\n+ protected List<PerunAttribute<T>> findAttributeDescriptionsByPerunAttr(List<PerunAttribute<T>> attrs, AttributeDefinition attr) {\n+  List<PerunAttribute<T>> result = new ArrayList<PerunAttribute<T>>();\n+  for (PerunAttribute<T> attrDef : attrs) {\n+   AttributeValueExtractor extractor = null;\n+   if (attrDef.isMultiValued()) {\n+    PerunAttribute.MultipleValuesExtractor<T> ext = attrDef.getMultipleValuesExtractor();\n+    if (ext instanceof AttributeValueExtractor) {\n+     extractor = (AttributeValueExtractor) ext;\n+    }\n+   } else {\n+    PerunAttribute.SingleValueExtractor<T> ext = attrDef.getSingleValueExtractor();\n+    if (ext instanceof AttributeValueExtractor) {\n+     extractor = (AttributeValueExtractor) ext;\n+    }\n+   }\n+   if (extractor != null && extractor.appliesToAttribute(attr)) {\n+    result.add(attrDef);\n+   }\n+  }\n+\n+  return result;\n+ }\n+\n+ protected ContextMapper<Name> getNameMapper() {\n+  return new AbstractContextMapper<Name>() {\n+   @Override\n+   protected Name doMapFromContext(DirContextOperations ctx) {\n+    return ctx.getDn();\n+   }\n+  };\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 463
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/167/AbstractPerunEntry.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/167/AbstractPerunEntry.java\nindex a792b5db182..fa8abb5abae 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/167/AbstractPerunEntry.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/167/AbstractPerunEntry.java\n@@ -337,7 +337,7 @@ public abstract class AbstractPerunEntry<T extends PerunBean> implements Initial\n \t}\n \n \tabstract protected Name buildDN(T bean);\n-\t\n+\n \tabstract protected void mapToContext(T bean, DirContextOperations context) throws InternalErrorException;\n \n \t/**\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/167/AbstractPerunEntry.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/167/AbstractPerunEntry.java\nindex a792b5db182..006771c8882 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/167/AbstractPerunEntry.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/167/AbstractPerunEntry.java\n@@ -336,8 +336,9 @@ public abstract class AbstractPerunEntry<T extends PerunBean> implements Initial\n \t\t}\n \t}\n \n-\tabstract protected Name buildDN(T bean);\n-\t\n+\tabstract protected Name buildDN(T bean)\n+\n+\t;\n \tabstract protected void mapToContext(T bean, DirContextOperations context) throws InternalErrorException;\n \n \t/**\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}