{
    "project_name": "couchbase-couchbase-jvm-core",
    "error_id": "3",
    "information": {
        "errors": [
            {
                "line": "54",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 136).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "     * <li>Key and value pairs in JSON documents, or the key exclusively\n     * <li>Application/Admin usernames that identify the human person\n     * <li>Query statements included in the log file collected by support that leak the document fields (Select floor_price from stock).\n     * <li>Names and email addresses asked during product registration and alerting\n     * <li>Usernames\n     * <li>Document xattrs",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "54",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "54",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/3/RedactableArgument.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/intellij/3/RedactableArgument.java\nindex f739ef9ecc4..facaf5d8ee6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/3/RedactableArgument.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/intellij/3/RedactableArgument.java\n@@ -37,7 +37,7 @@ public class RedactableArgument {\n     /**\n      * Creates a new {@link RedactableArgument}.\n      *\n-     * @param type type of the redactable argument.\n+     * @param type    type of the redactable argument.\n      * @param message message of the redactable argument.\n      */\n     private RedactableArgument(final ArgumentType type, final Object message) {\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "54",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "137",
                    "severity": "warning",
                    "message": "'switch rcurly' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/3/RedactableArgument.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/naturalize/3/RedactableArgument.java\nindex f739ef9ecc4..0a9c61684bc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/3/RedactableArgument.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/naturalize/3/RedactableArgument.java\n@@ -134,7 +134,7 @@ public class RedactableArgument {\n                 break;\n             default:\n                 throw new AssertionError(\"Unexpected redaction level: \" + redactionLevel);\n-        }\n+    }\n \n         return redact ? \"<\" + type.tagName + \">\" + message() + \"</\" + type.tagName + \">\" : message();\n     }\n@@ -168,4 +168,4 @@ public class RedactableArgument {\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "58",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "134",
                    "column": "15",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'switch' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "135",
                    "severity": "warning",
                    "message": "'case' child has incorrect indentation level 31, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "136",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 31, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "137",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 31, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "138",
                    "severity": "warning",
                    "message": "'case' child has incorrect indentation level 31, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "139",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 31, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "140",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 31, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "141",
                    "severity": "warning",
                    "message": "'case' child has incorrect indentation level 31, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "142",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 31, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "143",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 31, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "144",
                    "severity": "warning",
                    "message": "'case' child has incorrect indentation level 31, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "145",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 12, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/3/RedactableArgument.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/codebuff/3/RedactableArgument.java\nindex f739ef9ecc4..490f4435df7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/3/RedactableArgument.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/codebuff/3/RedactableArgument.java\n@@ -22,11 +22,14 @@ package com.couchbase.client.core.logging;\n  * @author Michael Nitschinger\n  * @since 1.5.3\n  */\n+\n+\n public class RedactableArgument {\n \n     /**\n      * The type of the redactable argument.\n      */\n+\n     private final ArgumentType type;\n \n     /**\n@@ -40,6 +43,7 @@ public class RedactableArgument {\n      * @param type type of the redactable argument.\n      * @param message message of the redactable argument.\n      */\n+\n     private RedactableArgument(final ArgumentType type, final Object message) {\n         this.type = type;\n         this.message = message;\n@@ -60,6 +64,7 @@ public class RedactableArgument {\n      * @param message the message to redact.\n      * @return a new {@link RedactableArgument}.\n      */\n+\n     public static RedactableArgument user(final Object message) {\n         return new RedactableArgument(ArgumentType.USER, message);\n     }\n@@ -81,6 +86,7 @@ public class RedactableArgument {\n      * @param message the message to redact.\n      * @return a new {@link RedactableArgument}.\n      */\n+\n     public static RedactableArgument meta(final Object message) {\n         return new RedactableArgument(ArgumentType.META, message);\n     }\n@@ -99,6 +105,7 @@ public class RedactableArgument {\n      * @param message the message to redact.\n      * @return a new {@link RedactableArgument}.\n      */\n+\n     public static RedactableArgument system(final Object message) {\n         return new RedactableArgument(ArgumentType.SYSTEM, message);\n     }\n@@ -106,6 +113,7 @@ public class RedactableArgument {\n     /**\n      * The type of this redactable argument.\n      */\n+\n     public ArgumentType type() {\n         return type;\n     }\n@@ -113,52 +121,59 @@ public class RedactableArgument {\n     /**\n      * The message of this redactable argument.\n      */\n+\n     public String message() {\n         return String.valueOf(message);\n     }\n \n+\n     @Override\n     public String toString() {\n         final RedactionLevel redactionLevel = CouchbaseLoggerFactory.getRedactionLevel();\n-\n         final boolean redact;\n-        switch (redactionLevel) {\n-            case NONE:\n-                redact = false;\n-                break;\n-            case PARTIAL:\n-                redact = (type == ArgumentType.USER);\n-                break;\n-            case FULL:\n-                redact = true;\n-                break;\n-            default:\n-                throw new AssertionError(\"Unexpected redaction level: \" + redactionLevel);\n+        switch(redactionLevel) {\n+                               case NONE:\n+                               redact = false;\n+                               break;\n+                               case PARTIAL:\n+                               redact = (type == ArgumentType.USER);\n+                               break;\n+                               case FULL:\n+                               redact = true;\n+                               break;\n+                               default:\n+            throw new AssertionError(\"Unexpected redaction level: \" + redactionLevel);\n         }\n-\n         return redact ? \"<\" + type.tagName + \">\" + message() + \"</\" + type.tagName + \">\" : message();\n     }\n \n     /**\n      * The type of the redactable argument.\n      */\n+\n     public enum ArgumentType {\n         /**\n          * User data is data that is stored into Couchbase by\n          * the application user account.\n          */\n+\n+\n         USER(\"ud\"),\n \n         /**\n          * Metadata is logical data needed by Couchbase to\n          * store and process user data.\n          */\n+\n+\n         META(\"md\"),\n \n         /**\n          * System data is data from other parts of the system\n          * Couchbase interacts with over the network.\n          */\n+\n+\n         SYSTEM(\"sd\");\n \n         private final String tagName;\n@@ -166,6 +181,6 @@ public class RedactableArgument {\n         ArgumentType(String tagName) {\n             this.tagName = tagName;\n         }\n-    }\n \n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 34
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "54",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "54",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}