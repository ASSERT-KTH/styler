{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1294",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1294/OnlineBackupCommand.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1294/OnlineBackupCommand.java\nindex 774229e8dc5..1f840824b9a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1294/OnlineBackupCommand.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1294/OnlineBackupCommand.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.backup.impl;\n \n import java.nio.file.Path;\n@@ -28,55 +29,55 @@ import org.neo4j.commandline.admin.OutsideWorld;\n \n class OnlineBackupCommand implements AdminCommand\n {\n-    private final OutsideWorld outsideWorld;\n-    private final OnlineBackupContextBuilder contextBuilder;\n-    private final BackupStrategyCoordinatorFactory backupStrategyCoordinatorFactory;\n-    private final BackupSupportingClassesFactory backupSupportingClassesFactory;\n+  private final OutsideWorld outsideWorld;\n+  private final OnlineBackupContextBuilder contextBuilder;\n+  private final BackupStrategyCoordinatorFactory backupStrategyCoordinatorFactory;\n+  private final BackupSupportingClassesFactory backupSupportingClassesFactory;\n \n-    /**\n-     * The entry point for neo4j admin tool's online backup functionality.\n-     *\n-     * @param outsideWorld provides a way to interact with the filesystem and output streams\n-     * @param contextBuilder helper class to validate, process and return a grouped result of processing the command line arguments\n-     * @param backupSupportingClassesFactory necessary for constructing the strategy for backing up over the causal clustering transaction protocol\n-     * @param backupStrategyCoordinatorFactory class that actually handles the logic of performing a backup\n-     */\n-    OnlineBackupCommand( OutsideWorld outsideWorld, OnlineBackupContextBuilder contextBuilder,\n-                         BackupSupportingClassesFactory backupSupportingClassesFactory,\n-                         BackupStrategyCoordinatorFactory backupStrategyCoordinatorFactory )\n-    {\n-        this.outsideWorld = outsideWorld;\n-        this.contextBuilder = contextBuilder;\n-        this.backupSupportingClassesFactory = backupSupportingClassesFactory;\n-        this.backupStrategyCoordinatorFactory = backupStrategyCoordinatorFactory;\n-    }\n+  /**\n+   * The entry point for neo4j admin tool's online backup functionality.\n+   *\n+   * @param outsideWorld                     provides a way to interact with the filesystem and output streams\n+   * @param contextBuilder                   helper class to validate, process and return a grouped result of processing the command line arguments\n+   * @param backupSupportingClassesFactory   necessary for constructing the strategy for backing up over the causal clustering transaction protocol\n+   * @param backupStrategyCoordinatorFactory class that actually handles the logic of performing a backup\n+   */\n+  OnlineBackupCommand(OutsideWorld outsideWorld, OnlineBackupContextBuilder contextBuilder,\n+                      BackupSupportingClassesFactory backupSupportingClassesFactory,\n+                      BackupStrategyCoordinatorFactory backupStrategyCoordinatorFactory)\n+  {\n+    this.outsideWorld = outsideWorld;\n+    this.contextBuilder = contextBuilder;\n+    this.backupSupportingClassesFactory = backupSupportingClassesFactory;\n+    this.backupStrategyCoordinatorFactory = backupStrategyCoordinatorFactory;\n+  }\n \n-    @Override\n-    public void execute( String[] args ) throws IncorrectUsage, CommandFailed\n-    {\n-        OnlineBackupContext onlineBackupContext = contextBuilder.createContext( args );\n-        BackupSupportingClasses backupSupportingClasses =\n-                backupSupportingClassesFactory.createSupportingClasses( onlineBackupContext.getConfig() );\n+  @Override\n+  public void execute(String[] args) throws IncorrectUsage, CommandFailed\n+  {\n+    OnlineBackupContext onlineBackupContext = contextBuilder.createContext(args);\n+    BackupSupportingClasses backupSupportingClasses =\n+        backupSupportingClassesFactory.createSupportingClasses(onlineBackupContext.getConfig());\n \n-        // Make sure destination exists\n-        checkDestination( onlineBackupContext.getRequiredArguments().getDirectory() );\n-        checkDestination( onlineBackupContext.getRequiredArguments().getReportDir() );\n+    // Make sure destination exists\n+    checkDestination(onlineBackupContext.getRequiredArguments().getDirectory());\n+    checkDestination(onlineBackupContext.getRequiredArguments().getReportDir());\n \n-        BackupStrategyCoordinator backupStrategyCoordinator = backupStrategyCoordinatorFactory.backupStrategyCoordinator(\n-                onlineBackupContext,\n-                backupSupportingClasses.getBackupProtocolService(),\n-                backupSupportingClasses.getBackupDelegator(),\n-                backupSupportingClasses.getPageCache() );\n+    BackupStrategyCoordinator backupStrategyCoordinator = backupStrategyCoordinatorFactory.backupStrategyCoordinator(\n+        onlineBackupContext,\n+        backupSupportingClasses.getBackupProtocolService(),\n+        backupSupportingClasses.getBackupDelegator(),\n+        backupSupportingClasses.getPageCache());\n \n-        backupStrategyCoordinator.performBackup( onlineBackupContext );\n-        outsideWorld.stdOutLine( \"Backup complete.\" );\n-    }\n+    backupStrategyCoordinator.performBackup(onlineBackupContext);\n+    outsideWorld.stdOutLine(\"Backup complete.\");\n+  }\n \n-    private void checkDestination( Path path ) throws CommandFailed\n+  private void checkDestination(Path path) throws CommandFailed\n+  {\n+    if (!outsideWorld.fileSystem().isDirectory(path.toFile()))\n     {\n-        if ( !outsideWorld.fileSystem().isDirectory( path.toFile() ) )\n-        {\n-            throw new CommandFailed( String.format( \"Directory '%s' does not exist.\", path ) );\n-        }\n+      throw new CommandFailed(String.format(\"Directory '%s' does not exist.\", path));\n     }\n+  }\n }\n",
            "diff_size": 47
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1294/OnlineBackupCommand.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1294/OnlineBackupCommand.java\nindex 774229e8dc5..ee4bf2aa271 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1294/OnlineBackupCommand.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1294/OnlineBackupCommand.java\n@@ -41,10 +41,9 @@ class OnlineBackupCommand implements AdminCommand\n      * @param backupSupportingClassesFactory necessary for constructing the strategy for backing up over the causal clustering transaction protocol\n      * @param backupStrategyCoordinatorFactory class that actually handles the logic of performing a backup\n      */\n-    OnlineBackupCommand( OutsideWorld outsideWorld, OnlineBackupContextBuilder contextBuilder,\n-                         BackupSupportingClassesFactory backupSupportingClassesFactory,\n+    OnlineBackupCommand( OutsideWorld outsideWorld, OnlineBackupContextBuilder contextBuilder, BackupSupportingClassesFactory backupSupportingClassesFactory,\n                          BackupStrategyCoordinatorFactory backupStrategyCoordinatorFactory )\n-    {\n+{\n         this.outsideWorld = outsideWorld;\n         this.contextBuilder = contextBuilder;\n         this.backupSupportingClassesFactory = backupSupportingClassesFactory;\n@@ -55,20 +54,13 @@ class OnlineBackupCommand implements AdminCommand\n     public void execute( String[] args ) throws IncorrectUsage, CommandFailed\n     {\n         OnlineBackupContext onlineBackupContext = contextBuilder.createContext( args );\n-        BackupSupportingClasses backupSupportingClasses =\n-                backupSupportingClassesFactory.createSupportingClasses( onlineBackupContext.getConfig() );\n-\n-        // Make sure destination exists\n+        BackupSupportingClasses backupSupportingClasses = backupSupportingClassesFactory.createSupportingClasses( onlineBackupContext.getConfig() );\n+    // Make sure destination exists\n         checkDestination( onlineBackupContext.getRequiredArguments().getDirectory() );\n         checkDestination( onlineBackupContext.getRequiredArguments().getReportDir() );\n-\n-        BackupStrategyCoordinator backupStrategyCoordinator = backupStrategyCoordinatorFactory.backupStrategyCoordinator(\n-                onlineBackupContext,\n-                backupSupportingClasses.getBackupProtocolService(),\n-                backupSupportingClasses.getBackupDelegator(),\n-                backupSupportingClasses.getPageCache() );\n-\n-        backupStrategyCoordinator.performBackup( onlineBackupContext );\n+BackupStrategyCoordinator backupStrategyCoordinator = backupStrategyCoordinatorFactory.backupStrategyCoordinator( onlineBackupContext,\n+                backupSupportingClasses.getBackupProtocolService(), backupSupportingClasses.getBackupDelegator(), backupSupportingClasses.getPageCache() );\n+backupStrategyCoordinator.performBackup( onlineBackupContext );\n         outsideWorld.stdOutLine( \"Backup complete.\" );\n     }\n \n@@ -79,4 +71,4 @@ class OnlineBackupCommand implements AdminCommand\n             throw new CommandFailed( String.format( \"Directory '%s' does not exist.\", path ) );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}