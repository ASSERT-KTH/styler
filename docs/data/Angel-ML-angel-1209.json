{
    "project_name": "Angel-ML-angel",
    "error_id": "1209",
    "information": {
        "errors": [
            {
                "line": "56",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 112).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "   * Filter elements that absolute value less than a specific value if need.\n   * @param x a float value\n   * @return If over half part elements are filtered, return a new sparse int vector, otherwise just return this\n   */\n  public abstract TFloatVector filter(float x);\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1209/TFloatVector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/1209/TFloatVector.java\nindex 30703fd137a..4ce787c0971 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1209/TFloatVector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/1209/TFloatVector.java\n@@ -18,18 +18,21 @@ public abstract class TFloatVector extends TVector {\n \n   /**\n    * Get all indexes of vector\n+   *\n    * @return all indexes of vector\n    */\n   public abstract int[] getIndices();\n \n   /**\n    * Get all values of vector\n+   *\n    * @return all values of vector\n    */\n   public abstract float[] getValues();\n \n   /**\n    * Get a vector element by a index\n+   *\n    * @param index element index\n    * @return element value\n    */\n@@ -37,6 +40,7 @@ public abstract class TFloatVector extends TVector {\n \n   /**\n    * Set a vector element\n+   *\n    * @param index element index\n    * @param value element value\n    */\n@@ -44,14 +48,16 @@ public abstract class TFloatVector extends TVector {\n \n   /**\n    * Plus a update value to a vector element\n+   *\n    * @param index element index\n    * @param delta update value\n    * @return this\n    */\n-  public abstract TFloatVector plusBy(int index, float delta );\n+  public abstract TFloatVector plusBy(int index, float delta);\n \n   /**\n    * Filter elements that absolute value less than a specific value if need.\n+   *\n    * @param x a float value\n    * @return If over half part elements are filtered, return a new sparse int vector, otherwise just return this\n    */\n@@ -59,6 +65,7 @@ public abstract class TFloatVector extends TVector {\n \n   /**\n    * Times all elements by a int factor\n+   *\n    * @param x factor\n    * @return a new vector\n    */\n@@ -66,6 +73,7 @@ public abstract class TFloatVector extends TVector {\n \n   /**\n    * Times all elements by a int factor\n+   *\n    * @param x factor\n    * @return this\n    */\n@@ -73,37 +81,51 @@ public abstract class TFloatVector extends TVector {\n \n   /**\n    * Plus the vector with a update vector that has same dimension\n+   *\n    * @param other update vector\n-   * @param x factor\n+   * @param x     factor\n    * @return a new result vector\n    */\n   public abstract TVector plus(TAbstractVector other, float x);\n \n   /**\n    * Plus the vector with a update vector that has same dimension\n+   *\n    * @param other update vector\n-   * @param x factor\n+   * @param x     factor\n    * @return this\n    */\n   public abstract TFloatVector plusBy(TAbstractVector other, float x);\n \n   @Override\n-  public TVector plusBy(int index, double delta) { return  plusBy(index, (float) delta);}\n+  public TVector plusBy(int index, double delta) {\n+    return plusBy(index, (float) delta);\n+  }\n \n   @Override\n-  public TVector filter(double x) { return  filter((float)x); }\n+  public TVector filter(double x) {\n+    return filter((float) x);\n+  }\n \n   @Override\n-  public TVector times(double x) { return  times((float)x); }\n+  public TVector times(double x) {\n+    return times((float) x);\n+  }\n \n   @Override\n-  public TVector timesBy(double x) { return  timesBy((float) x); }\n+  public TVector timesBy(double x) {\n+    return timesBy((float) x);\n+  }\n \n   @Override\n-  public TVector plus(TAbstractVector other, double x) { return  plus(other, (float) x); }\n+  public TVector plus(TAbstractVector other, double x) {\n+    return plus(other, (float) x);\n+  }\n \n   @Override\n-  public TVector plusBy(TAbstractVector other, double x) { return  plusBy(other, (float) x); }\n+  public TVector plusBy(TAbstractVector other, double x) {\n+    return plusBy(other, (float) x);\n+  }\n \n   public abstract double sum();\n }\n",
            "diff_size": 31
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1209/TFloatVector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/1209/TFloatVector.java\nindex 30703fd137a..d5041e58032 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1209/TFloatVector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/1209/TFloatVector.java\n@@ -48,7 +48,7 @@ public abstract class TFloatVector extends TVector {\n    * @param delta update value\n    * @return this\n    */\n-  public abstract TFloatVector plusBy(int index, float delta );\n+  public abstract TFloatVector plusBy(int index, float delta);\n \n   /**\n    * Filter elements that absolute value less than a specific value if need.\n@@ -88,22 +88,34 @@ public abstract class TFloatVector extends TVector {\n   public abstract TFloatVector plusBy(TAbstractVector other, float x);\n \n   @Override\n-  public TVector plusBy(int index, double delta) { return  plusBy(index, (float) delta);}\n+  public TVector plusBy(int index, double delta) {\n+  return plusBy(index, (float) delta);\n+  }\n \n   @Override\n-  public TVector filter(double x) { return  filter((float)x); }\n+  public TVector filter(double x) {\n+  return filter((float) x);\n+  }\n \n   @Override\n-  public TVector times(double x) { return  times((float)x); }\n+  public TVector times(double x) {\n+  return times((float) x);\n+  }\n \n   @Override\n-  public TVector timesBy(double x) { return  timesBy((float) x); }\n+  public TVector timesBy(double x) {\n+  return timesBy((float) x);\n+  }\n \n   @Override\n-  public TVector plus(TAbstractVector other, double x) { return  plus(other, (float) x); }\n+  public TVector plus(TAbstractVector other, double x) {\n+  return plus(other, (float) x);\n+  }\n \n   @Override\n-  public TVector plusBy(TAbstractVector other, double x) { return  plusBy(other, (float) x); }\n+  public TVector plusBy(TAbstractVector other, double x) {\n+  return plusBy(other, (float) x);\n+  }\n \n   public abstract double sum();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1209/TFloatVector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/1209/TFloatVector.java\nindex 30703fd137a..34e0e5656fe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1209/TFloatVector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/1209/TFloatVector.java\n@@ -6,6 +6,7 @@ import com.tencent.angel.ml.math.TVector;\n /**\n  * Base class of float vector.\n  */\n+\n public abstract class TFloatVector extends TVector {\n \n   public TFloatVector() {\n@@ -20,12 +21,14 @@ public abstract class TFloatVector extends TVector {\n    * Get all indexes of vector\n    * @return all indexes of vector\n    */\n+\n   public abstract int[] getIndices();\n \n   /**\n    * Get all values of vector\n    * @return all values of vector\n    */\n+\n   public abstract float[] getValues();\n \n   /**\n@@ -33,6 +36,7 @@ public abstract class TFloatVector extends TVector {\n    * @param index element index\n    * @return element value\n    */\n+\n   public abstract float get(int index);\n \n   /**\n@@ -40,6 +44,7 @@ public abstract class TFloatVector extends TVector {\n    * @param index element index\n    * @param value element value\n    */\n+\n   public abstract TFloatVector set(int index, float value);\n \n   /**\n@@ -48,13 +53,15 @@ public abstract class TFloatVector extends TVector {\n    * @param delta update value\n    * @return this\n    */\n-  public abstract TFloatVector plusBy(int index, float delta );\n+\n+  public abstract TFloatVector plusBy(int index, float delta);\n \n   /**\n    * Filter elements that absolute value less than a specific value if need.\n    * @param x a float value\n    * @return If over half part elements are filtered, return a new sparse int vector, otherwise just return this\n    */\n+\n   public abstract TFloatVector filter(float x);\n \n   /**\n@@ -62,6 +69,7 @@ public abstract class TFloatVector extends TVector {\n    * @param x factor\n    * @return a new vector\n    */\n+\n   public abstract TFloatVector times(float x);\n \n   /**\n@@ -69,6 +77,7 @@ public abstract class TFloatVector extends TVector {\n    * @param x factor\n    * @return this\n    */\n+\n   public abstract TFloatVector timesBy(float x);\n \n   /**\n@@ -77,6 +86,7 @@ public abstract class TFloatVector extends TVector {\n    * @param x factor\n    * @return a new result vector\n    */\n+\n   public abstract TVector plus(TAbstractVector other, float x);\n \n   /**\n@@ -85,25 +95,39 @@ public abstract class TFloatVector extends TVector {\n    * @param x factor\n    * @return this\n    */\n+\n   public abstract TFloatVector plusBy(TAbstractVector other, float x);\n \n   @Override\n-  public TVector plusBy(int index, double delta) { return  plusBy(index, (float) delta);}\n+  public TVector plusBy(int index, double delta) {\n+    return plusBy(index, (float) delta);\n+  }\n \n   @Override\n-  public TVector filter(double x) { return  filter((float)x); }\n+  public TVector filter(double x) {\n+    return filter((float) x);\n+  }\n \n   @Override\n-  public TVector times(double x) { return  times((float)x); }\n+  public TVector times(double x) {\n+    return times((float) x);\n+  }\n \n   @Override\n-  public TVector timesBy(double x) { return  timesBy((float) x); }\n+  public TVector timesBy(double x) {\n+    return timesBy((float) x);\n+  }\n \n   @Override\n-  public TVector plus(TAbstractVector other, double x) { return  plus(other, (float) x); }\n+  public TVector plus(TAbstractVector other, double x) {\n+    return plus(other, (float) x);\n+  }\n \n   @Override\n-  public TVector plusBy(TAbstractVector other, double x) { return  plusBy(other, (float) x); }\n+  public TVector plusBy(TAbstractVector other, double x) {\n+    return plusBy(other, (float) x);\n+  }\n \n   public abstract double sum();\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 32
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}