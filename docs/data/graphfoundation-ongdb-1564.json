{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1564",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "44",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "121",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "8",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1564/ProtocolRepository.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1564/ProtocolRepository.java\nindex e8f22b96ed7..beb94d441c4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1564/ProtocolRepository.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1564/ProtocolRepository.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.causalclustering.protocol.handshake;\n \n import java.util.Collection;\n@@ -34,69 +35,68 @@ import org.neo4j.causalclustering.protocol.Protocol;\n import org.neo4j.helpers.collection.Pair;\n import org.neo4j.stream.Streams;\n \n-public abstract class ProtocolRepository<U extends Comparable<U>,T extends Protocol<U>>\n+public abstract class ProtocolRepository<U extends Comparable<U>, T extends Protocol<U>>\n {\n-    private final Map<Pair<String, U>,T> protocolMap;\n-    private final BiFunction<String,Set<U>,ProtocolSelection<U,T>> protocolSelectionFactory;\n-    private Function<String,Comparator<T>> comparator;\n+  private final Map<Pair<String, U>, T> protocolMap;\n+  private final BiFunction<String, Set<U>, ProtocolSelection<U, T>> protocolSelectionFactory;\n+  private Function<String, Comparator<T>> comparator;\n \n-    public ProtocolRepository( T[] protocols, Function<String,Comparator<T>> comparators,\n-            BiFunction<String,Set<U>,ProtocolSelection<U,T>> protocolSelectionFactory )\n+  public ProtocolRepository(T[] protocols, Function<String, Comparator<T>> comparators,\n+                            BiFunction<String, Set<U>, ProtocolSelection<U, T>> protocolSelectionFactory)\n+  {\n+    this.protocolSelectionFactory = protocolSelectionFactory;\n+    Map<Pair<String, U>, T> map = new HashMap<>();\n+    for (T protocol : protocols)\n     {\n-        this.protocolSelectionFactory = protocolSelectionFactory;\n-        Map<Pair<String, U>,T> map = new HashMap<>();\n-        for ( T protocol : protocols )\n-        {\n-            Protocol<U> previous = map.put( Pair.of( protocol.category(), protocol.implementation() ), protocol );\n-            if ( previous != null )\n-            {\n-                throw new IllegalArgumentException(\n-                        String.format( \"Multiple protocols with same identifier and version supplied: %s and %s\", protocol, previous ) );\n-            }\n-        }\n-        protocolMap = Collections.unmodifiableMap( map );\n-        this.comparator = comparators;\n+      Protocol<U> previous = map.put(Pair.of(protocol.category(), protocol.implementation()), protocol);\n+      if (previous != null)\n+      {\n+        throw new IllegalArgumentException(\n+            String.format(\"Multiple protocols with same identifier and version supplied: %s and %s\", protocol, previous));\n+      }\n     }\n+    protocolMap = Collections.unmodifiableMap(map);\n+    this.comparator = comparators;\n+  }\n \n-    Optional<T> select( String protocolName, U version )\n-    {\n-        return Optional.ofNullable( protocolMap.get( Pair.of( protocolName, version ) ) );\n-    }\n-\n-    Optional<T> select( String protocolName, Set<U> versions )\n-    {\n-        return versions\n-                .stream()\n-                .map( version -> select( protocolName, version ) )\n-                .flatMap( Streams::ofOptional )\n-                .max( comparator.apply( protocolName ) );\n-    }\n+  Optional<T> select(String protocolName, U version)\n+  {\n+    return Optional.ofNullable(protocolMap.get(Pair.of(protocolName, version)));\n+  }\n \n-    public ProtocolSelection<U,T> getAll( Protocol.Category<T> category, Collection<U> versions )\n-    {\n-        Set<U> selectedVersions = protocolMap\n-                .entrySet()\n-                .stream()\n-                .map( Map.Entry::getKey )\n-                .filter( pair -> pair.first().equals( category.canonicalName() ) )\n-                .map( Pair::other )\n-                .filter( version -> versions.isEmpty() || versions.contains( version ) )\n-                .collect( Collectors.toSet() );\n+  Optional<T> select(String protocolName, Set<U> versions)\n+  {\n+    return versions\n+        .stream()\n+        .map(version -> select(protocolName, version))\n+        .flatMap(Streams::ofOptional)\n+        .max(comparator.apply(protocolName));\n+  }\n \n-        if ( selectedVersions.isEmpty() )\n-        {\n-            throw new IllegalArgumentException( String.format(\n-                    \"Attempted to select protocols for %s versions %s but no match in known protocols %s\", category, versions, protocolMap\n-            ) );\n-        }\n-        else\n-        {\n-            return protocolSelectionFactory.apply( category.canonicalName(), selectedVersions );\n-        }\n-    }\n+  public ProtocolSelection<U, T> getAll(Protocol.Category<T> category, Collection<U> versions)\n+  {\n+    Set<U> selectedVersions = protocolMap\n+        .entrySet()\n+        .stream()\n+        .map(Map.Entry::getKey)\n+        .filter(pair -> pair.first().equals(category.canonicalName()))\n+        .map(Pair::other)\n+        .filter(version -> versions.isEmpty() || versions.contains(version))\n+        .collect(Collectors.toSet());\n \n-    static <U extends Comparable<U>, T extends Protocol<U>> Comparator<T> versionNumberComparator()\n+    if (selectedVersions.isEmpty())\n     {\n-        return Comparator.comparing( Protocol::implementation );\n+      throw new IllegalArgumentException(String.format(\n+          \"Attempted to select protocols for %s versions %s but no match in known protocols %s\", category, versions, protocolMap\n+      ));\n+    } else\n+    {\n+      return protocolSelectionFactory.apply(category.canonicalName(), selectedVersions);\n     }\n+  }\n+\n+  static <U extends Comparable<U>, T extends Protocol<U>> Comparator<T> versionNumberComparator()\n+  {\n+    return Comparator.comparing(Protocol::implementation);\n+  }\n }\n",
            "diff_size": 74
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 278).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "74",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 186).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1564/ProtocolRepository.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1564/ProtocolRepository.java\nindex e8f22b96ed7..ed1b23a3b5a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1564/ProtocolRepository.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1564/ProtocolRepository.java\n@@ -34,14 +34,13 @@ import org.neo4j.causalclustering.protocol.Protocol;\n import org.neo4j.helpers.collection.Pair;\n import org.neo4j.stream.Streams;\n \n-public abstract class ProtocolRepository<U extends Comparable<U>,T extends Protocol<U>>\n+public abstract class ProtocolRepository<U extends Comparable<U>, T extends Protocol<U>>\n {\n     private final Map<Pair<String, U>,T> protocolMap;\n-    private final BiFunction<String,Set<U>,ProtocolSelection<U,T>> protocolSelectionFactory;\n+    private final BiFunction<String,Set<U>, ProtocolSelection<U,T>> protocolSelectionFactory;\n     private Function<String,Comparator<T>> comparator;\n \n-    public ProtocolRepository( T[] protocols, Function<String,Comparator<T>> comparators,\n-            BiFunction<String,Set<U>,ProtocolSelection<U,T>> protocolSelectionFactory )\n+    public ProtocolRepository( T[] protocols, Function<String,Comparator<T>> comparators, BiFunction<String,Set<U>, ProtocolSelection<U,T>> protocolSelectionFactory )\n     {\n         this.protocolSelectionFactory = protocolSelectionFactory;\n         Map<Pair<String, U>,T> map = new HashMap<>();\n@@ -50,9 +49,8 @@ public abstract class ProtocolRepository<U extends Comparable<U>,T extends Proto\n             Protocol<U> previous = map.put( Pair.of( protocol.category(), protocol.implementation() ), protocol );\n             if ( previous != null )\n             {\n-                throw new IllegalArgumentException(\n-                        String.format( \"Multiple protocols with same identifier and version supplied: %s and %s\", protocol, previous ) );\n-            }\n+                throw new IllegalArgumentException( String.format( \"Multiple protocols with same identifier and version supplied: %s and %s\", protocol, previous ) );\n+    }\n         }\n         protocolMap = Collections.unmodifiableMap( map );\n         this.comparator = comparators;\n@@ -65,29 +63,15 @@ public abstract class ProtocolRepository<U extends Comparable<U>,T extends Proto\n \n     Optional<T> select( String protocolName, Set<U> versions )\n     {\n-        return versions\n-                .stream()\n-                .map( version -> select( protocolName, version ) )\n-                .flatMap( Streams::ofOptional )\n-                .max( comparator.apply( protocolName ) );\n+        return versions.stream().map( version -> select( protocolName, version ) ).flatMap( Streams::ofOptional ).max( comparator.apply( protocolName ) );\n     }\n \n     public ProtocolSelection<U,T> getAll( Protocol.Category<T> category, Collection<U> versions )\n     {\n-        Set<U> selectedVersions = protocolMap\n-                .entrySet()\n-                .stream()\n-                .map( Map.Entry::getKey )\n-                .filter( pair -> pair.first().equals( category.canonicalName() ) )\n-                .map( Pair::other )\n-                .filter( version -> versions.isEmpty() || versions.contains( version ) )\n-                .collect( Collectors.toSet() );\n-\n-        if ( selectedVersions.isEmpty() )\n+        Set<U> selectedVersions = protocolMap.entrySet().stream().map( Map.Entry::getKey ).filter( pair -> pair.first().equals( category.canonicalName() ) ).map( Pair::other ).filter( version -> versions.isEmpty() || versions.contains( version ) ).collect( Collectors.toSet() );\n+if ( selectedVersions.isEmpty() )\n         {\n-            throw new IllegalArgumentException( String.format(\n-                    \"Attempted to select protocols for %s versions %s but no match in known protocols %s\", category, versions, protocolMap\n-            ) );\n+            throw new IllegalArgumentException( String.format( \"Attempted to select protocols for %s versions %s but no match in known protocols %s\", category, versions, protocolMap ) );\n         }\n         else\n         {\n@@ -99,4 +83,4 @@ public abstract class ProtocolRepository<U extends Comparable<U>,T extends Proto\n     {\n         return Comparator.comparing( Protocol::implementation );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 26
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}