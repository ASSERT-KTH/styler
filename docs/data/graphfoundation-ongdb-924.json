{
    "project_name": "graphfoundation-ongdb",
    "error_id": "924",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "40",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "65",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "116",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "137",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "118",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "168",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "178",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "182",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "188",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "201",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "150",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/924/CRSCalculator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/924/CRSCalculator.java\nindex 5fc7c7d625a..fd53c800425 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/924/CRSCalculator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/924/CRSCalculator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.values.storable;\n \n import java.util.Arrays;\n@@ -36,194 +37,187 @@ import static java.lang.Math.toRadians;\n \n public abstract class CRSCalculator\n {\n-    public abstract double distance( PointValue p1, PointValue p2 );\n+  public abstract double distance(PointValue p1, PointValue p2);\n \n-    public abstract List<Pair<PointValue,PointValue>> boundingBox( PointValue center, double distance );\n+  public abstract List<Pair<PointValue, PointValue>> boundingBox(PointValue center, double distance);\n \n-    protected static double pythagoras( double[] a, double[] b )\n+  protected static double pythagoras(double[] a, double[] b)\n+  {\n+    double sqrSum = 0.0;\n+    for (int i = 0; i < a.length; i++)\n     {\n-        double sqrSum = 0.0;\n-        for ( int i = 0; i < a.length; i++ )\n-        {\n-            double diff = a[i] - b[i];\n-            sqrSum += diff * diff;\n-        }\n-        return sqrt( sqrSum );\n+      double diff = a[i] - b[i];\n+      sqrSum += diff * diff;\n     }\n+    return sqrt(sqrSum);\n+  }\n \n-    public static class CartesianCalculator extends CRSCalculator\n-    {\n-        int dimension;\n+  public static class CartesianCalculator extends CRSCalculator\n+  {\n+    int dimension;\n \n-        CartesianCalculator( int dimension )\n-        {\n-            this.dimension = dimension;\n-        }\n+    CartesianCalculator(int dimension)\n+    {\n+      this.dimension = dimension;\n+    }\n \n-        @Override\n-        public double distance( PointValue p1, PointValue p2 )\n-        {\n-            assert p1.getCoordinateReferenceSystem().getDimension() == dimension;\n-            assert p2.getCoordinateReferenceSystem().getDimension() == dimension;\n-            return pythagoras( p1.coordinate(), p2.coordinate() );\n-        }\n+    @Override\n+    public double distance(PointValue p1, PointValue p2)\n+    {\n+      assert p1.getCoordinateReferenceSystem().getDimension() == dimension;\n+      assert p2.getCoordinateReferenceSystem().getDimension() == dimension;\n+      return pythagoras(p1.coordinate(), p2.coordinate());\n+    }\n \n-        @Override\n-        public List<Pair<PointValue,PointValue>> boundingBox( PointValue center, double distance )\n-        {\n-            assert center.getCoordinateReferenceSystem().getDimension() == dimension;\n-            double[] coordinates = center.coordinate();\n-            double[] min = new double[dimension];\n-            double[] max = new double[dimension];\n-            for ( int i = 0; i < dimension; i++ )\n-            {\n-                min[i] = coordinates[i] - distance;\n-                max[i] = coordinates[i] + distance;\n-            }\n-            CoordinateReferenceSystem crs = center.getCoordinateReferenceSystem();\n-            return Collections.singletonList( Pair.of( Values.pointValue( crs, min ), Values.pointValue( crs, max ) ) );\n-        }\n+    @Override\n+    public List<Pair<PointValue, PointValue>> boundingBox(PointValue center, double distance)\n+    {\n+      assert center.getCoordinateReferenceSystem().getDimension() == dimension;\n+      double[] coordinates = center.coordinate();\n+      double[] min = new double[dimension];\n+      double[] max = new double[dimension];\n+      for (int i = 0; i < dimension; i++)\n+      {\n+        min[i] = coordinates[i] - distance;\n+        max[i] = coordinates[i] + distance;\n+      }\n+      CoordinateReferenceSystem crs = center.getCoordinateReferenceSystem();\n+      return Collections.singletonList(Pair.of(Values.pointValue(crs, min), Values.pointValue(crs, max)));\n     }\n+  }\n \n-    public static class GeographicCalculator extends CRSCalculator\n+  public static class GeographicCalculator extends CRSCalculator\n+  {\n+    public static final double EARTH_RADIUS_METERS = 6378140.0;\n+    private static final double EXTENSION_FACTOR = 1.0001;\n+    int dimension;\n+\n+    GeographicCalculator(int dimension)\n     {\n-        public static final double EARTH_RADIUS_METERS = 6378140.0;\n-        private static final double EXTENSION_FACTOR = 1.0001;\n-        int dimension;\n+      this.dimension = dimension;\n+    }\n \n-        GeographicCalculator( int dimension )\n+    @Override\n+    public double distance(PointValue p1, PointValue p2)\n+    {\n+      assert p1.getCoordinateReferenceSystem().getDimension() == dimension;\n+      assert p2.getCoordinateReferenceSystem().getDimension() == dimension;\n+      double[] c1Coord = p1.coordinate();\n+      double[] c2Coord = p2.coordinate();\n+      double[] c1 = new double[] {toRadians(c1Coord[0]), toRadians(c1Coord[1])};\n+      double[] c2 = new double[] {toRadians(c2Coord[0]), toRadians(c2Coord[1])};\n+      double dx = c2[0] - c1[0];\n+      double dy = c2[1] - c1[1];\n+      double alpha = pow(sin(dy / 2), 2.0) + cos(c1[1]) * cos(c2[1]) * pow(sin(dx / 2.0), 2.0);\n+      double greatCircleDistance = 2.0 * atan2(sqrt(alpha), sqrt(1 - alpha));\n+      if (dimension == 2)\n+      {\n+        return EARTH_RADIUS_METERS * greatCircleDistance;\n+      } else if (dimension == 3)\n+      {\n+        // get average height\n+        double avgHeight = (p1.coordinate()[2] + p2.coordinate()[2]) / 2;\n+        double distance2D = (EARTH_RADIUS_METERS + avgHeight) * greatCircleDistance;\n+\n+        double[] a = new double[dimension - 1];\n+        double[] b = new double[dimension - 1];\n+        a[0] = distance2D;\n+        b[0] = 0.0;\n+        for (int i = 1; i < dimension - 1; i++)\n         {\n-            this.dimension = dimension;\n+          a[i] = 0.0;\n+          b[i] = c1Coord[i + 1] - c2Coord[i + 1];\n         }\n+        return pythagoras(a, b);\n+      } else\n+      {\n+        // The above calculation works for more than 3D if all higher dimensions are orthogonal to the 3rd dimension.\n+        // This might not be true in the general case, and so until we genuinely support higher dimensions fullstack\n+        // we will explicitly disabled them here for now.\n+        throw new UnsupportedOperationException(\"More than 3 dimensions are not supported for distance calculations.\");\n+      }\n+    }\n \n-        @Override\n-        public double distance( PointValue p1, PointValue p2 )\n+    @Override\n+    // http://janmatuschek.de/LatitudeLongitudeBoundingCoordinates\n+    // But calculating in degrees instead of radians to avoid rounding errors\n+    public List<Pair<PointValue, PointValue>> boundingBox(PointValue center, double distance)\n+    {\n+      if (distance == 0.0)\n+      {\n+        return Collections.singletonList(Pair.of(center, center));\n+      }\n+\n+      // Extend the distance slightly to assure that all relevant points lies inside the bounding box,\n+      // with rounding errors taken into account\n+      double extendedDistance = distance * EXTENSION_FACTOR;\n+\n+      CoordinateReferenceSystem crs = center.getCoordinateReferenceSystem();\n+      double lat = center.coordinate()[1];\n+      double lon = center.coordinate()[0];\n+\n+      double r = extendedDistance / EARTH_RADIUS_METERS;\n+\n+      double latMin = lat - toDegrees(r);\n+      double latMax = lat + toDegrees(r);\n+\n+      // If your query circle includes one of the poles\n+      if (latMax >= 90)\n+      {\n+        return Collections.singletonList(boundingBoxOf(-180, 180, latMin, 90, center, distance));\n+      } else if (latMin <= -90)\n+      {\n+        return Collections.singletonList(boundingBoxOf(-180, 180, -90, latMax, center, distance));\n+      } else\n+      {\n+        double deltaLon = toDegrees(asin(sin(r) / cos(toRadians(lat))));\n+        double lonMin = lon - deltaLon;\n+        double lonMax = lon + deltaLon;\n+\n+        // If you query circle wraps around the dateline\n+        if (lonMin < -180 && lonMax > 180)\n         {\n-            assert p1.getCoordinateReferenceSystem().getDimension() == dimension;\n-            assert p2.getCoordinateReferenceSystem().getDimension() == dimension;\n-            double[] c1Coord = p1.coordinate();\n-            double[] c2Coord = p2.coordinate();\n-            double[] c1 = new double[]{toRadians( c1Coord[0] ), toRadians( c1Coord[1] )};\n-            double[] c2 = new double[]{toRadians( c2Coord[0] ), toRadians( c2Coord[1] )};\n-            double dx = c2[0] - c1[0];\n-            double dy = c2[1] - c1[1];\n-            double alpha = pow( sin( dy / 2 ), 2.0 ) + cos( c1[1] ) * cos( c2[1] ) * pow( sin( dx / 2.0 ), 2.0 );\n-            double greatCircleDistance = 2.0 * atan2( sqrt( alpha ), sqrt( 1 - alpha ) );\n-            if ( dimension == 2 )\n-            {\n-                return EARTH_RADIUS_METERS * greatCircleDistance;\n-            }\n-            else if ( dimension == 3 )\n-            {\n-                // get average height\n-                double avgHeight = (p1.coordinate()[2] + p2.coordinate()[2]) / 2;\n-                double distance2D = (EARTH_RADIUS_METERS + avgHeight) * greatCircleDistance;\n-\n-                double[] a = new double[dimension - 1];\n-                double[] b = new double[dimension - 1];\n-                a[0] = distance2D;\n-                b[0] = 0.0;\n-                for ( int i = 1; i < dimension - 1; i++ )\n-                {\n-                    a[i] = 0.0;\n-                    b[i] = c1Coord[i + 1] - c2Coord[i + 1];\n-                }\n-                return pythagoras( a, b );\n-            }\n-            else\n-            {\n-                // The above calculation works for more than 3D if all higher dimensions are orthogonal to the 3rd dimension.\n-                // This might not be true in the general case, and so until we genuinely support higher dimensions fullstack\n-                // we will explicitly disabled them here for now.\n-                throw new UnsupportedOperationException( \"More than 3 dimensions are not supported for distance calculations.\" );\n-            }\n-        }\n-\n-        @Override\n-        // http://janmatuschek.de/LatitudeLongitudeBoundingCoordinates\n-        // But calculating in degrees instead of radians to avoid rounding errors\n-        public List<Pair<PointValue,PointValue>> boundingBox( PointValue center, double distance )\n+          // Large rectangle covering all longitudes\n+          return Collections.singletonList(boundingBoxOf(-180, 180, latMin, latMax, center, distance));\n+        } else if (lonMin < -180)\n+        {\n+          // two small rectangles east and west of dateline\n+          Pair<PointValue, PointValue> box1 = boundingBoxOf(lonMin + 360, 180, latMin, latMax, center, distance);\n+          Pair<PointValue, PointValue> box2 = boundingBoxOf(-180, lonMax, latMin, latMax, center, distance);\n+          return Arrays.asList(box1, box2);\n+        } else if (lonMax > 180)\n         {\n-            if ( distance == 0.0 )\n-            {\n-                return Collections.singletonList( Pair.of( center, center ) );\n-            }\n-\n-            // Extend the distance slightly to assure that all relevant points lies inside the bounding box,\n-            // with rounding errors taken into account\n-            double extendedDistance = distance * EXTENSION_FACTOR;\n-\n-            CoordinateReferenceSystem crs = center.getCoordinateReferenceSystem();\n-            double lat = center.coordinate()[1];\n-            double lon = center.coordinate()[0];\n-\n-            double r = extendedDistance / EARTH_RADIUS_METERS;\n-\n-            double latMin = lat - toDegrees( r );\n-            double latMax = lat + toDegrees( r );\n-\n-            // If your query circle includes one of the poles\n-            if ( latMax >= 90 )\n-            {\n-                return Collections.singletonList( boundingBoxOf( -180, 180, latMin, 90, center, distance ) );\n-            }\n-            else if ( latMin <= -90 )\n-            {\n-                return Collections.singletonList( boundingBoxOf( -180, 180, -90, latMax, center, distance ) );\n-            }\n-            else\n-            {\n-                double deltaLon = toDegrees( asin( sin( r ) / cos( toRadians( lat ) ) ) );\n-                double lonMin = lon - deltaLon;\n-                double lonMax = lon + deltaLon;\n-\n-                // If you query circle wraps around the dateline\n-                if ( lonMin < -180 && lonMax > 180 )\n-                {\n-                    // Large rectangle covering all longitudes\n-                    return Collections.singletonList( boundingBoxOf( -180, 180, latMin, latMax, center, distance ) );\n-                }\n-                else if ( lonMin < -180 )\n-                {\n-                    // two small rectangles east and west of dateline\n-                    Pair<PointValue,PointValue> box1 = boundingBoxOf( lonMin + 360, 180, latMin, latMax, center, distance );\n-                    Pair<PointValue,PointValue> box2 = boundingBoxOf( -180, lonMax, latMin, latMax, center, distance );\n-                    return Arrays.asList( box1, box2 );\n-                }\n-                else if ( lonMax > 180 )\n-                {\n-                    // two small rectangles east and west of dateline\n-                    Pair<PointValue,PointValue> box1 = boundingBoxOf( lonMin, 180, latMin, latMax, center, distance );\n-                    Pair<PointValue,PointValue> box2 = boundingBoxOf( -180, lonMax - 360, latMin, latMax, center, distance );\n-                    return Arrays.asList( box1, box2 );\n-                }\n-                else\n-                {\n-                    return Collections.singletonList( boundingBoxOf( lonMin, lonMax, latMin, latMax, center, distance ) );\n-                }\n-            }\n+          // two small rectangles east and west of dateline\n+          Pair<PointValue, PointValue> box1 = boundingBoxOf(lonMin, 180, latMin, latMax, center, distance);\n+          Pair<PointValue, PointValue> box2 = boundingBoxOf(-180, lonMax - 360, latMin, latMax, center, distance);\n+          return Arrays.asList(box1, box2);\n+        } else\n+        {\n+          return Collections.singletonList(boundingBoxOf(lonMin, lonMax, latMin, latMax, center, distance));\n         }\n+      }\n+    }\n \n-        private Pair<PointValue,PointValue> boundingBoxOf( double minLon, double maxLon, double minLat, double maxLat, PointValue center, double distance )\n+    private Pair<PointValue, PointValue> boundingBoxOf(double minLon, double maxLon, double minLat, double maxLat, PointValue center, double distance)\n+    {\n+      CoordinateReferenceSystem crs = center.getCoordinateReferenceSystem();\n+      int dimension = center.getCoordinateReferenceSystem().getDimension();\n+      double[] min = new double[dimension];\n+      double[] max = new double[dimension];\n+      min[0] = minLon;\n+      min[1] = minLat;\n+      max[0] = maxLon;\n+      max[1] = maxLat;\n+      if (dimension > 2)\n+      {\n+        double[] coordinates = center.coordinate();\n+        for (int i = 2; i < dimension; i++)\n         {\n-            CoordinateReferenceSystem crs = center.getCoordinateReferenceSystem();\n-            int dimension = center.getCoordinateReferenceSystem().getDimension();\n-            double[] min = new double[dimension];\n-            double[] max = new double[dimension];\n-            min[0] = minLon;\n-            min[1] = minLat;\n-            max[0] = maxLon;\n-            max[1] = maxLat;\n-            if ( dimension > 2 )\n-            {\n-                double[] coordinates = center.coordinate();\n-                for ( int i = 2; i < dimension; i++ )\n-                {\n-                    min[i] = coordinates[i] - distance;\n-                    max[i] = coordinates[i] + distance;\n-                }\n-            }\n-            return Pair.of( Values.pointValue( crs, min ), Values.pointValue( crs, max ) );\n+          min[i] = coordinates[i] - distance;\n+          max[i] = coordinates[i] + distance;\n         }\n+      }\n+      return Pair.of(Values.pointValue(crs, min), Values.pointValue(crs, max));\n     }\n+  }\n }\n",
            "diff_size": 271
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}