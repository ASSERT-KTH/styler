{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3142",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "40",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3142/RepresentationFormatRepository.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3142/RepresentationFormatRepository.java\nindex 70e74b68c93..7cdb367fd73 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3142/RepresentationFormatRepository.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3142/RepresentationFormatRepository.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.server.rest.repr;\n \n import java.net.URI;\n@@ -33,111 +34,111 @@ import org.neo4j.server.rest.repr.formats.JsonFormat;\n \n public final class RepresentationFormatRepository\n {\n-    private final Map<MediaType, RepresentationFormat> formats;\n-    private final AbstractNeoServer injectorProvider;\n+  private final Map<MediaType, RepresentationFormat> formats;\n+  private final AbstractNeoServer injectorProvider;\n \n-    public RepresentationFormatRepository( AbstractNeoServer injectorProvider )\n+  public RepresentationFormatRepository(AbstractNeoServer injectorProvider)\n+  {\n+    this.injectorProvider = injectorProvider;\n+    this.formats = new HashMap<>();\n+    for (RepresentationFormat format : Service.load(RepresentationFormat.class))\n     {\n-        this.injectorProvider = injectorProvider;\n-        this.formats = new HashMap<>();\n-        for ( RepresentationFormat format : Service.load( RepresentationFormat.class ) )\n-        {\n-            formats.put( format.mediaType, format );\n-        }\n+      formats.put(format.mediaType, format);\n     }\n+  }\n \n-    public OutputFormat outputFormat( List<MediaType> acceptable, URI baseUri,\n-            MultivaluedMap<String,String> requestHeaders )\n+  public OutputFormat outputFormat(List<MediaType> acceptable, URI baseUri,\n+                                   MultivaluedMap<String, String> requestHeaders)\n+  {\n+    RepresentationFormat format = forHeaders(acceptable, requestHeaders);\n+    if (format == null)\n     {\n-        RepresentationFormat format = forHeaders( acceptable, requestHeaders );\n-        if ( format == null )\n-        {\n-            format = forMediaTypes( acceptable );\n-        }\n-        if ( format == null )\n-        {\n-            format = useDefault( acceptable );\n-        }\n-        return new OutputFormat( format, baseUri, getExtensionManager() );\n+      format = forMediaTypes(acceptable);\n     }\n-\n-    private PluginManager getExtensionManager()\n+    if (format == null)\n     {\n-        return injectorProvider == null ? null : injectorProvider.getExtensionManager();\n+      format = useDefault(acceptable);\n     }\n+    return new OutputFormat(format, baseUri, getExtensionManager());\n+  }\n+\n+  private PluginManager getExtensionManager()\n+  {\n+    return injectorProvider == null ? null : injectorProvider.getExtensionManager();\n+  }\n \n-    private RepresentationFormat forHeaders( List<MediaType> acceptable, MultivaluedMap<String,String> requestHeaders )\n+  private RepresentationFormat forHeaders(List<MediaType> acceptable, MultivaluedMap<String, String> requestHeaders)\n+  {\n+    if (requestHeaders == null)\n+    {\n+      return null;\n+    }\n+    if (!containsType(acceptable, MediaType.APPLICATION_JSON_TYPE))\n     {\n-        if ( requestHeaders == null )\n-        {\n-            return null;\n-        }\n-        if ( !containsType( acceptable, MediaType.APPLICATION_JSON_TYPE ) )\n-        {\n-            return null;\n-        }\n-        String streamHeader = requestHeaders.getFirst( StreamingFormat.STREAM_HEADER );\n-        if ( \"true\".equalsIgnoreCase( streamHeader ) )\n-        {\n-            return formats.get( StreamingFormat.MEDIA_TYPE );\n-        }\n-        return null;\n+      return null;\n     }\n+    String streamHeader = requestHeaders.getFirst(StreamingFormat.STREAM_HEADER);\n+    if (\"true\".equalsIgnoreCase(streamHeader))\n+    {\n+      return formats.get(StreamingFormat.MEDIA_TYPE);\n+    }\n+    return null;\n+  }\n \n-    private boolean containsType( List<MediaType> mediaTypes, MediaType mediaType )\n+  private boolean containsType(List<MediaType> mediaTypes, MediaType mediaType)\n+  {\n+    for (MediaType type : mediaTypes)\n     {\n-        for ( MediaType type : mediaTypes )\n-        {\n-            if ( mediaType.getType().equals( type.getType() ) && mediaType.getSubtype().equals( type.getSubtype() ) )\n-            {\n-                return true;\n-            }\n-        }\n-        return false;\n+      if (mediaType.getType().equals(type.getType()) && mediaType.getSubtype().equals(type.getSubtype()))\n+      {\n+        return true;\n+      }\n     }\n+    return false;\n+  }\n \n-    private RepresentationFormat forMediaTypes( List<MediaType> acceptable )\n+  private RepresentationFormat forMediaTypes(List<MediaType> acceptable)\n+  {\n+    for (MediaType type : acceptable)\n     {\n-        for ( MediaType type : acceptable )\n-        {\n-            RepresentationFormat format = formats.get( type );\n-            if ( format != null )\n-            {\n-                return format;\n-            }\n-        }\n-        return null;\n+      RepresentationFormat format = formats.get(type);\n+      if (format != null)\n+      {\n+        return format;\n+      }\n     }\n+    return null;\n+  }\n \n-    public InputFormat inputFormat( MediaType type )\n+  public InputFormat inputFormat(MediaType type)\n+  {\n+    if (type == null)\n     {\n-        if ( type == null )\n-        {\n-            return useDefault();\n-        }\n-\n-        RepresentationFormat format = formats.get( type );\n-        if ( format != null )\n-        {\n-            return format;\n-        }\n-\n-        format = formats.get( new MediaType( type.getType(), type.getSubtype() ) );\n-        if ( format != null )\n-        {\n-            return format;\n-        }\n-\n-        return useDefault( type );\n+      return useDefault();\n     }\n \n-    private DefaultFormat useDefault( final List<MediaType> acceptable )\n+    RepresentationFormat format = formats.get(type);\n+    if (format != null)\n     {\n-        return useDefault( acceptable.toArray( new MediaType[acceptable.size()] ) );\n+      return format;\n     }\n \n-    private DefaultFormat useDefault( final MediaType... type )\n+    format = formats.get(new MediaType(type.getType(), type.getSubtype()));\n+    if (format != null)\n     {\n-        return new DefaultFormat( new JsonFormat(), formats.keySet(), type );\n+      return format;\n     }\n+\n+    return useDefault(type);\n+  }\n+\n+  private DefaultFormat useDefault(final List<MediaType> acceptable)\n+  {\n+    return useDefault(acceptable.toArray(new MediaType[acceptable.size()]));\n+  }\n+\n+  private DefaultFormat useDefault(final MediaType... type)\n+  {\n+    return new DefaultFormat(new JsonFormat(), formats.keySet(), type);\n+  }\n }\n",
            "diff_size": 135
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3142/RepresentationFormatRepository.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3142/RepresentationFormatRepository.java\nindex 70e74b68c93..1a23f70f337 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3142/RepresentationFormatRepository.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3142/RepresentationFormatRepository.java\n@@ -33,7 +33,7 @@ import org.neo4j.server.rest.repr.formats.JsonFormat;\n \n public final class RepresentationFormatRepository\n {\n-    private final Map<MediaType, RepresentationFormat> formats;\n+    private final Map<MediaType,RepresentationFormat> formats;\n     private final AbstractNeoServer injectorProvider;\n \n     public RepresentationFormatRepository( AbstractNeoServer injectorProvider )\n@@ -46,15 +46,15 @@ public final class RepresentationFormatRepository\n         }\n     }\n \n-    public OutputFormat outputFormat( List<MediaType> acceptable, URI baseUri,\n-            MultivaluedMap<String,String> requestHeaders )\n+    public OutputFormat outputFormat( List<MediaType> acceptable, URI baseUri, MultivaluedMap<String,String> requestHeaders )\n     {\n         RepresentationFormat format = forHeaders( acceptable, requestHeaders );\n         if ( format == null )\n         {\n             format = forMediaTypes( acceptable );\n         }\n-        if ( format == null )\n+\n+if ( format == null )\n         {\n             format = useDefault( acceptable );\n         }\n@@ -72,11 +72,13 @@ public final class RepresentationFormatRepository\n         {\n             return null;\n         }\n-        if ( !containsType( acceptable, MediaType.APPLICATION_JSON_TYPE ) )\n+\n+if ( !containsType( acceptable, MediaType.APPLICATION_JSON_TYPE ) )\n         {\n             return null;\n         }\n-        String streamHeader = requestHeaders.getFirst( StreamingFormat.STREAM_HEADER );\n+\n+String streamHeader = requestHeaders.getFirst( StreamingFormat.STREAM_HEADER );\n         if ( \"true\".equalsIgnoreCase( streamHeader ) )\n         {\n             return formats.get( StreamingFormat.MEDIA_TYPE );\n@@ -140,4 +142,4 @@ public final class RepresentationFormatRepository\n     {\n         return new DefaultFormat( new JsonFormat(), formats.keySet(), type );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}