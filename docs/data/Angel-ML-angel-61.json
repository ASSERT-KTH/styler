{
    "project_name": "Angel-ML-angel",
    "error_id": "61",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "89",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 159).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "97",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 119).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "115",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "132",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "136",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "138",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "144",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "146",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "160",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 184).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "181",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "184",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 117).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "185",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 10, expected is 17, indentation should be the same level as line 186.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "187",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "188",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 10, expected is 17, indentation should be the same level as line 189.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "211",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "217",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 117).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "223",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "227",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/61/StorageSwitch.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/61/StorageSwitch.java\nindex 0e0015d6ab9..77a20f9b3ca 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/61/StorageSwitch.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/61/StorageSwitch.java\n@@ -30,7 +30,8 @@ import java.lang.reflect.Method;\n \n public class StorageSwitch {\n \n-  private static Storage emptyStorage(Storage target, StorageMethod method, long capacity) {\n+  private static Storage emptyStorage(\n+    Storage target, StorageMethod method, long capacity) {\n     try {\n       if (capacity <= 0) {\n         Method m = target.getClass().getDeclaredMethod(method.toString());\n@@ -39,10 +40,9 @@ public class StorageSwitch {\n         Method m = target.getClass().getDeclaredMethod(method.toString(), int.class);\n         return (Storage) m.invoke(target, (int) capacity);\n       }\n-    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {\n+    } catch (NoSuchMethodException|IllegalAccessException| InvocationTargetException e) {\n       e.printStackTrace();\n     }\n-\n     return null;\n   }\n \n@@ -50,10 +50,9 @@ public class StorageSwitch {\n     try {\n       Method m = target.getClass().getDeclaredMethod(method.toString());\n       return (Storage) m.invoke(target);\n-    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {\n+    } catch (NoSuchMethodException|IllegalAccessException| InvocationTargetException e) {\n       e.printStackTrace();\n     }\n-\n     return null;\n   }\n \n@@ -65,7 +64,8 @@ public class StorageSwitch {\n     }\n   }\n \n-  private static Storage union(Vector v1, Vector v2, Binary op) {\n+  private static Storage union(\n+    Vector v1, Vector v2, Binary op) {\n     if (v1.isDense()) {\n       // KeepStorage is guaranteed\n       if (op.isInplace()) {\n@@ -86,10 +86,7 @@ public class StorageSwitch {\n       } else {// v2.isSparse() || v2.isSorted()\n         long v1Size = v1.getSize();\n         long v2Size = v2.getSize();\n-\n-        if (v1Size >= v2Size * Constant.sparseThreshold &&\n-            (v1Size + v2Size) * Constant.intersectionCoeff\n-                <= Constant.sparseDenseStorageThreshold * v1.dim()) {\n+        if (v1Size >= v2Size * Constant.sparseThreshold && (v1Size + v2Size) * Constant.intersectionCoeff <= Constant.sparseDenseStorageThreshold * v1.dim()) {\n           // we gauss the indices of v2 maybe is a subset of v1, or overlap is very large\n           // KeepStorage is guaranteed\n           if (op.isInplace()) {\n@@ -97,8 +94,7 @@ public class StorageSwitch {\n           } else {\n             return v1.copy().getStorage();\n           }\n-        } else if ((v1Size + v2Size) * Constant.intersectionCoeff\n-            >= Constant.sparseDenseStorageThreshold * v1.dim()) {\n+        } else if ((v1Size + v2Size) * Constant.intersectionCoeff >= Constant.sparseDenseStorageThreshold * v1.dim()) {\n           // we gauss dense storage is more efficient\n           if (op.isKeepStorage() || v1.getStorage() instanceof LongKeyVectorStorage) {\n             return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, v1.dim());\n@@ -116,8 +112,7 @@ public class StorageSwitch {\n               return v1.copy().getStorage();\n             }\n           } else {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptySparse,\n-                allocSize(v1Size, v2Size, v1.dim()));\n+            return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, allocSize(v1Size, v2Size, v1.dim()));\n           }\n         }\n       }\n@@ -134,41 +129,35 @@ public class StorageSwitch {\n       } else {// v2.isSparse() || v2.isSorted()\n         long v1Size = v1.getSize();\n         long v2Size = v2.getSize();\n-\n-        if ((v1Size + v2Size) * Constant.intersectionCoeff\n-            >= Constant.sortedDenseStorageThreshold * v1.dim()) {\n+        if ((v1Size + v2Size) * Constant.intersectionCoeff >= Constant.sortedDenseStorageThreshold * v1.dim()) {\n           // we gauss dense storage is more efficient\n           if (op.isKeepStorage()) {\n             // prevent rehash\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptySorted,\n-                allocSize(v1Size, v2Size, v1.dim()));\n+            return emptyStorage(v1.getStorage(), StorageMethod.emptySorted, allocSize(v1Size, v2Size, v1.dim()));\n           } else if (v1.getStorage() instanceof LongKeyVectorStorage) {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptySparse,\n-                allocSize(v1Size, v2Size, v1.dim()));\n+                   return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, allocSize(v1Size, v2Size, v1.dim()));\n           } else {\n             return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n           }\n         } else {\n           if (op.isKeepStorage()) {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptySorted,\n-                allocSize(v1Size, v2Size, v1.dim()));\n+            return emptyStorage(v1.getStorage(), StorageMethod.emptySorted, allocSize(v1Size, v2Size, v1.dim()));\n           } else {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptySparse,\n-                allocSize(v1Size, v2Size, v1.dim()));\n+            return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, allocSize(v1Size, v2Size, v1.dim()));\n           }\n         }\n       }\n     }\n   }\n \n-  private static Storage intersection(Vector v1, Vector v2, Binary op) {\n+  private static Storage intersection(\n+    Vector v1, Vector v2, Binary op) {\n     if (v1.isDense()) {\n       if (v2.isDense()) {\n         // KeepStorage is guaranteed\n         return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n       } else {// v2.isSparse() || v2.isSorted()\n-        if ((!v2.isSorted() && v2.getSize() >= Constant.sparseDenseStorageThreshold * v2.dim()) ||\n-            (v2.isSorted() && v2.getSize() >= Constant.sortedDenseStorageThreshold * v2.dim())) {\n+        if ((!v2.isSorted() && v2.getSize() >= Constant.sparseDenseStorageThreshold * v2.dim()) || (v2.isSorted() && v2.getSize() >= Constant.sortedDenseStorageThreshold * v2.dim())) {\n           // dense preferred, KeepStorage is guaranteed\n           return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n         } else { // sparse preferred\n@@ -189,29 +178,26 @@ public class StorageSwitch {\n           return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n         }\n       } else { // v2.isSparse() || v2.isSorted()\n-        if (v1.getSize() >= v2.getSize()\n-            && v2.getSize() <= Constant.sparseDenseStorageThreshold * v2.dim()) {\n+        if (v1.getSize() >= v2.getSize() && v2.getSize() <= Constant.sparseDenseStorageThreshold * v2.dim()) {\n           // sparse preferred, keep storage guaranteed\n           return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, v2.getSize());\n-        } else if (v1.getSize() <= v2.getSize()\n-            && v1.getSize() <= Constant.sparseDenseStorageThreshold * v1.dim()) {\n+        } else if (v1.getSize() <= v2.getSize() && v1.getSize() <= Constant.sparseDenseStorageThreshold * v1.dim()) {\n           // sparse preferred, keep storage guaranteed\n-          return emptyStorage(v1.getStorage(), StorageMethod.emptySparse);\n-        } else if (v1.getSize() > v2.getSize()\n-            && v2.getSize() > Constant.sparseDenseStorageThreshold * v2.dim()) {\n+                 return emptyStorage(v1.getStorage(), StorageMethod.emptySparse);\n+        } else if (v1.getSize() > v2.getSize() && v2.getSize() > Constant.sparseDenseStorageThreshold * v2.dim()) {\n           // preferred dense\n-          if (op.isKeepStorage() || v1.getStorage() instanceof LongKeyVectorStorage) {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, v2.getSize());\n-          } else {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n-          }\n-        } else { // preferred dense\n-          if (op.isKeepStorage() || v1.getStorage() instanceof LongKeyVectorStorage) {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptySparse);\n-          } else {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n-          }\n-        }\n+                 if (op.isKeepStorage() || v1.getStorage() instanceof LongKeyVectorStorage) {\n+                   return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, v2.getSize());\n+                 } else {\n+                   return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n+                 }\n+               } else { // preferred dense\n+                 if (op.isKeepStorage() || v1.getStorage() instanceof LongKeyVectorStorage) {\n+                   return emptyStorage(v1.getStorage(), StorageMethod.emptySparse);\n+                 } else {\n+                   return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n+                 }\n+               }\n       }\n     } else {//v1.isSorted()\n       if (v2.isDense()) {\n@@ -222,43 +208,41 @@ public class StorageSwitch {\n           return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n         }\n       } else { // v2.isSparse() || v2.isSorted()\n-        if (v1.getSize() >= v2.getSize()\n-            && v2.getSize() <= Constant.sortedDenseStorageThreshold * v2.dim()) {\n+        if (v1.getSize() >= v2.getSize() && v2.getSize() <= Constant.sortedDenseStorageThreshold * v2.dim()) {\n           if (op.isKeepStorage()) {\n             return emptyStorage(v1.getStorage(), StorageMethod.emptySorted, v2.getSize());\n           } else {\n             return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, v2.getSize());\n           }\n-        } else if (v1.getSize() <= v2.getSize()\n-            && v1.getSize() <= Constant.sortedDenseStorageThreshold * v1.dim()) {\n+        } else if (v1.getSize() <= v2.getSize() && v1.getSize() <= Constant.sortedDenseStorageThreshold * v1.dim()) {\n           if (op.isKeepStorage()) {\n             return emptyStorage(v1.getStorage(), StorageMethod.emptySorted);\n           } else {\n             return emptyStorage(v1.getStorage(), StorageMethod.emptySparse);\n           }\n-        } else if (v1.getSize() > v2.getSize()\n-            && v2.getSize() > Constant.sortedDenseStorageThreshold * v2.dim()) {\n-          if (op.isKeepStorage()) {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptySorted, v2.getSize());\n-          } else if (v1.getStorage() instanceof LongKeyVectorStorage) {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, v2.getSize());\n-          } else {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n-          }\n-        } else {\n-          if (op.isKeepStorage()) {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptySorted);\n-          } else if (v1.getStorage() instanceof LongKeyVectorStorage) {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptySparse);\n-          } else {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n-          }\n-        }\n+        } else if (v1.getSize() > v2.getSize() && v2.getSize() > Constant.sortedDenseStorageThreshold * v2.dim()) {\n+                 if (op.isKeepStorage()) {\n+                   return emptyStorage(v1.getStorage(), StorageMethod.emptySorted, v2.getSize());\n+                 } else if (v1.getStorage() instanceof LongKeyVectorStorage) {\n+                          return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, v2.getSize());\n+                 } else {\n+                   return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n+                 }\n+               } else {\n+                 if (op.isKeepStorage()) {\n+                   return emptyStorage(v1.getStorage(), StorageMethod.emptySorted);\n+                 } else if (v1.getStorage() instanceof LongKeyVectorStorage) {\n+                          return emptyStorage(v1.getStorage(), StorageMethod.emptySparse);\n+                 } else {\n+                   return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n+                 }\n+               }\n       }\n     }\n   }\n \n-  private static Storage all(Vector v1, Vector v2, Binary op) {\n+  private static Storage all(\n+    Vector v1, Vector v2, Binary op) {\n     if (v1.isDense()) {\n       if (op.isInplace()) {\n         return v1.getStorage();\n@@ -273,24 +257,26 @@ public class StorageSwitch {\n           return emptyStorage(v1.getStorage(), StorageMethod.emptySorted, v1.dim());\n         }\n       } else if (v1.getStorage() instanceof LongKeyVectorStorage) {\n-        return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, v1.dim());\n+               return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, v1.dim());\n       } else {\n         return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n       }\n     }\n   }\n \n-  public static Storage apply(Vector v1, Vector v2, Binary op) {\n+  public static Storage apply(\n+    Vector v1, Vector v2, Binary op) {\n     if (op.getOpType() == OpType.UNION) {\n       return union(v1, v2, op);\n     } else if (op.getOpType() == OpType.INTERSECTION) {\n-      return intersection(v1, v2, op);\n+             return intersection(v1, v2, op);\n     } else {// OpType.ALL\n       return all(v1, v2, op);\n     }\n   }\n \n-  public static Storage[] applyComp(ComponentVector v1, Vector v2, Binary op) {\n+  public static Storage[] applyComp(\n+    ComponentVector v1, Vector v2, Binary op) {\n     Vector[] parts = v1.getPartitions();\n     Storage[] resParts = new Storage[parts.length];\n     int k = 0;\n@@ -334,7 +320,7 @@ public class StorageSwitch {\n           if (part.isDense()) {\n             resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptyDense);\n           } else if (part.isSparse()) {\n-            resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySparse);\n+                   resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySparse);\n           } else {\n             if (op.isKeepStorage()) {\n               resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySorted);\n@@ -351,9 +337,9 @@ public class StorageSwitch {\n               if (part.isDense()) {\n                 resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptyDense);\n               } else if (part.isSparse()) {\n-                resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySparse);\n+                       resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySparse);\n               } else {\n-                resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySorted);\n+                       resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySorted);\n               }\n             } else {\n               resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySparse);\n@@ -365,7 +351,7 @@ public class StorageSwitch {\n             if (part.isDense()) {\n               resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptyDense);\n             } else if (part.isSparse()) {\n-              resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySparse);\n+                     resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySparse);\n             } else {\n               if (op.isKeepStorage()) {\n                 resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySorted);\n@@ -406,8 +392,5 @@ public class StorageSwitch {\n     return resParts;\n   }\n \n-  private enum StorageMethod {\n-    emptyDense, emptySparse, emptySorted\n-  }\n-\n-}\n+  private enum StorageMethod{emptyDense, emptySparse, emptySorted}\n+}\n\\ No newline at end of file\n",
            "diff_size": 89
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}