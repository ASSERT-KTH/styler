{
    "project_name": "Angel-ML-angel",
    "error_id": "603",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/603/IntIntVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/603/IntIntVectorStorage.java\nindex 3ebf9e93939..aad8a2493c5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/603/IntIntVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/603/IntIntVectorStorage.java\n@@ -189,7 +189,7 @@ public class IntIntVectorStorage extends IntIntStorage {\n \n   @Override\n   public IntIntVectorStorage adaptiveClone() {\n-    if(isSparse()) {\n+    if (isSparse()) {\n       return new IntIntVectorStorage(VFactory\n           .sortedIntVector(vector.getDim(), vector.getStorage().getIndices(),\n               vector.getStorage().getValues()), indexOffset);\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "89",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "189",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/603/IntIntVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/603/IntIntVectorStorage.java\nindex 3ebf9e93939..d46c31f3eff 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/603/IntIntVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/603/IntIntVectorStorage.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ps.storage.vector.storage;\n \n import com.tencent.angel.common.ByteBufSerdeUtils;\n@@ -62,7 +61,7 @@ public class IntIntVectorStorage extends IntIntStorage {\n     if (keyType != KeyType.INT) {\n       throw new UnsupportedOperationException(\n           this.getClass().getName() + \" only support int type index now\");\n-    }\n+  }\n \n     if (func != null) {\n       for (int i = 0; i < indexSize; i++) {\n@@ -82,15 +81,12 @@ public class IntIntVectorStorage extends IntIntStorage {\n       case T_INT_SPARSE_COMPONENT:\n         updateUseSparse(buf, op);\n         break;\n-\n-      case T_INT_DENSE:\n+  case T_INT_DENSE:\n       case T_INT_DENSE_COMPONENT:\n         updateUseDense(buf, op);\n         break;\n-\n-      default: {\n-        throw new UnsupportedOperationException(\n-            \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+  default: {\n+        throw new UnsupportedOperationException(\"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n       }\n     }\n   }\n@@ -190,10 +186,9 @@ public class IntIntVectorStorage extends IntIntStorage {\n   @Override\n   public IntIntVectorStorage adaptiveClone() {\n     if(isSparse()) {\n-      return new IntIntVectorStorage(VFactory\n-          .sortedIntVector(vector.getDim(), vector.getStorage().getIndices(),\n+      return new IntIntVectorStorage(VFactory.sortedIntVector(vector.getDim(), vector.getStorage().getIndices(),\n               vector.getStorage().getValues()), indexOffset);\n-    } else {\n+  } else {\n       return this;\n     }\n   }\n@@ -257,8 +252,7 @@ public class IntIntVectorStorage extends IntIntStorage {\n           entry = iter.next();\n           mergedRow.set(entry.getIntKey() + (int) indexOffset, entry.getIntValue());\n         }\n-\n-        break;\n+break;\n       }\n \n       case SORTED: {\n@@ -267,8 +261,7 @@ public class IntIntVectorStorage extends IntIntStorage {\n         for (int i = 0; i < indices.length; i++) {\n           mergedRow.set(indices[i] + (int) indexOffset, values[i]);\n         }\n-\n-        break;\n+break;\n       }\n \n       default:\n@@ -319,4 +312,4 @@ public class IntIntVectorStorage extends IntIntStorage {\n   public IntIntVectorStorage deepClone() {\n     return new IntIntVectorStorage(vector.copy(), indexOffset);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "66",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "194",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/603/IntIntVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/603/IntIntVectorStorage.java\nindex 3ebf9e93939..6d37aef1fee 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/603/IntIntVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/603/IntIntVectorStorage.java\n@@ -33,11 +33,13 @@ import it.unimi.dsi.fastutil.objects.ObjectIterator;\n /**\n  * A int key double value storage: use a IntIntVector as storage\n  */\n+\n public class IntIntVectorStorage extends IntIntStorage {\n \n   /**\n    * A vector storage: it can use DENSE,SPARSE and SORTED storage type\n    */\n+\n   private IntIntVector vector;\n \n   public IntIntVectorStorage(IntIntVector vector, long indexOffset) {\n@@ -58,10 +60,10 @@ public class IntIntVectorStorage extends IntIntStorage {\n   }\n \n   @Override\n-  public void indexGet(KeyType keyType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func) {\n+  public void indexGet(\n+    KeyType keyType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func) {\n     if (keyType != KeyType.INT) {\n-      throw new UnsupportedOperationException(\n-          this.getClass().getName() + \" only support int type index now\");\n+      throw new UnsupportedOperationException(this.getClass().getName() + \" only support int type index now\");\n     }\n \n     if (func != null) {\n@@ -76,22 +78,21 @@ public class IntIntVectorStorage extends IntIntStorage {\n   }\n \n   @Override\n-  public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n+  public void update(\n+    RowType updateType, ByteBuf buf, UpdateOp op) {\n     switch (updateType) {\n       case T_INT_SPARSE:\n       case T_INT_SPARSE_COMPONENT:\n         updateUseSparse(buf, op);\n         break;\n-\n       case T_INT_DENSE:\n       case T_INT_DENSE_COMPONENT:\n         updateUseDense(buf, op);\n         break;\n-\n       default: {\n-        throw new UnsupportedOperationException(\n-            \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+        throw new UnsupportedOperationException(\"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n       }\n+\n     }\n   }\n \n@@ -189,10 +190,8 @@ public class IntIntVectorStorage extends IntIntStorage {\n \n   @Override\n   public IntIntVectorStorage adaptiveClone() {\n-    if(isSparse()) {\n-      return new IntIntVectorStorage(VFactory\n-          .sortedIntVector(vector.getDim(), vector.getStorage().getIndices(),\n-              vector.getStorage().getValues()), indexOffset);\n+    if (isSparse()) {\n+      return new IntIntVectorStorage(VFactory.sortedIntVector(vector.getDim(), vector.getStorage().getIndices(), vector.getStorage().getValues()), indexOffset);\n     } else {\n       return this;\n     }\n@@ -257,7 +256,6 @@ public class IntIntVectorStorage extends IntIntStorage {\n           entry = iter.next();\n           mergedRow.set(entry.getIntKey() + (int) indexOffset, entry.getIntValue());\n         }\n-\n         break;\n       }\n \n@@ -267,7 +265,6 @@ public class IntIntVectorStorage extends IntIntStorage {\n         for (int i = 0; i < indices.length; i++) {\n           mergedRow.set(indices[i] + (int) indexOffset, values[i]);\n         }\n-\n         break;\n       }\n \n@@ -319,4 +316,5 @@ public class IntIntVectorStorage extends IntIntStorage {\n   public IntIntVectorStorage deepClone() {\n     return new IntIntVectorStorage(vector.copy(), indexOffset);\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}