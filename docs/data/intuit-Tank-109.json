{
    "project_name": "intuit-Tank",
    "error_id": "109",
    "information": {
        "errors": [
            {
                "line": "83",
                "column": "50",
                "severity": "warning",
                "message": "'(' is followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
            }
        ]
    },
    "source_code": "    }\n\n    public List<ScriptStep> transactionsToRequest( Collection<Transaction> entries) {\n        List<ScriptStep> result = new ArrayList<ScriptStep>();\n        int index = 0;\n        for (Transaction transaction : entries) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/109/OwaspReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/109/OwaspReader.java\nindex b46e88edba6..f3ce7d6fa36 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/109/OwaspReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/109/OwaspReader.java\n@@ -80,7 +80,7 @@ public class OwaspReader implements RecordedScriptReader {\n                 .parse(reader));\n     }\n \n-    public List<ScriptStep> transactionsToRequest( Collection<Transaction> entries) {\n+    public List<ScriptStep> transactionsToRequest(Collection<Transaction> entries) {\n         List<ScriptStep> result = new ArrayList<ScriptStep>();\n         int index = 0;\n         for (Transaction transaction : entries) {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/109/OwaspReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/109/OwaspReader.java\nindex b46e88edba6..0a08e411605 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/109/OwaspReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/109/OwaspReader.java\n@@ -1,6 +1,7 @@\n /**\n  * Copyright 2011 Intuit Inc. All Rights Reserved\n  */\n+\n package com.intuit.tank.script.util;\n \n /*\n@@ -54,272 +55,272 @@ import com.intuit.tank.vm.exception.WatsParseException;\n  * @author dangleton patterns: Util\n  */\n public class OwaspReader implements RecordedScriptReader {\n-    private static final Logger LOG = LogManager.getLogger(OwaspReader.class);\n+  private static final Logger LOG = LogManager.getLogger(OwaspReader.class);\n \n-    /**\n-     * private constructor to implement the Util Pattern\n-     */\n-    public OwaspReader() {\n-        // empty constructor\n-    }\n+  /**\n+   * private constructor to implement the Util Pattern\n+   */\n+  public OwaspReader() {\n+    // empty constructor\n+  }\n \n-    /**\n-     * @inheritDoc\n-     */\n-    @Override\n-    public List<ScriptStep> read(String xml) throws WatsParseException {\n-        return read(new StringReader(xml));\n-    }\n+  /**\n+   * @inheritDoc\n+   */\n+  @Override\n+  public List<ScriptStep> read(String xml) throws WatsParseException {\n+    return read(new StringReader(xml));\n+  }\n \n-    /**\n-     * @inheritDoc\n-     */\n-    @Override\n-    public List<ScriptStep> read(Reader reader) throws WatsParseException {\n-        return transactionsToRequest(new WebConversationJaxbParseXML()\n-                .parse(reader));\n-    }\n+  /**\n+   * @inheritDoc\n+   */\n+  @Override\n+  public List<ScriptStep> read(Reader reader) throws WatsParseException {\n+    return transactionsToRequest(new WebConversationJaxbParseXML()\n+      .parse(reader));\n+  }\n \n-    public List<ScriptStep> transactionsToRequest( Collection<Transaction> entries) {\n-        List<ScriptStep> result = new ArrayList<ScriptStep>();\n-        int index = 0;\n-        for (Transaction transaction : entries) {\n-            result.add(transactionToResult(transaction, ++index));\n-        }\n-        return result;\n+  public List<ScriptStep> transactionsToRequest(Collection<Transaction> entries) {\n+    List<ScriptStep> result = new ArrayList<ScriptStep>();\n+    int index = 0;\n+    for (Transaction transaction : entries) {\n+      result.add(transactionToResult(transaction, ++index));\n     }\n+    return result;\n+  }\n \n-    /**\n-     * @param fromXml\n-     * @param currentIndex\n-     * @return\n-     * @throws MalformedURLException\n-     */\n-    private ScriptStep transactionToResult(Transaction fromXml, int currentIndex) {\n+  /**\n+   * @param fromXml\n+   * @param currentIndex\n+   * @return\n+   * @throws MalformedURLException\n+   */\n+  private ScriptStep transactionToResult(Transaction fromXml, int currentIndex) {\n \n-        try {\n-            HeaderParser requestParser = new HeaderParser(HeaderType.Request,\n-                    fromXml.getRequest().getFirstLine(), fromXml.getRequest()\n-                            .getHeaders());\n-            HeaderParser responseParser = new HeaderParser(HeaderType.Response,\n-                    fromXml.getResponse().getFirstLine(), fromXml.getResponse()\n-                            .getHeaders());\n-            ScriptStep entry = new ScriptStep();\n-            entry.setStepIndex(currentIndex);\n-            entry.setType(ScriptConstants.REQUEST);\n+    try {\n+      HeaderParser requestParser = new HeaderParser(HeaderType.Request,\n+        fromXml.getRequest().getFirstLine(), fromXml.getRequest()\n+        .getHeaders());\n+      HeaderParser responseParser = new HeaderParser(HeaderType.Response,\n+        fromXml.getResponse().getFirstLine(), fromXml.getResponse()\n+        .getHeaders());\n+      ScriptStep entry = new ScriptStep();\n+      entry.setStepIndex(currentIndex);\n+      entry.setType(ScriptConstants.REQUEST);\n \n-            // String url = fromXml.getUrl();\n-            entry.setUrl(requestParser.getUrl(fromXml.getRequest()\n-                    .getProtocol()));\n-            try {\n-                entry.setHostname(requestParser.getHost());\n-                entry.setProtocol(fromXml.getRequest().getProtocol().name());\n-                entry.setSimplePath(requestParser.getPath());\n-            } catch (Exception e) {\n-                LOG.error(\n-                        \"url is not valid: ignoring host, protocol, and path\",\n-                        e);\n-            }\n-            String mimeType = responseParser.getContentType();\n-            entry.setMethod(requestParser.getMethod());\n-            entry.setMimetype(mimeType);\n-            entry.setResult(responseParser.getStatusMessage());\n-            entry.setRequestheaders(populateHeaders(\n-                    requestParser.getPassThroughHeaders(),\n-                    RequestDataType.requestHeader.name()));\n-            entry.setReqFormat(findRequestFormat(requestParser.getContentType()));\n-            entry.setRespFormat(findResponseFormat(responseParser\n-                    .getContentType()));\n+      // String url = fromXml.getUrl();\n+      entry.setUrl(requestParser.getUrl(fromXml.getRequest()\n+        .getProtocol()));\n+      try {\n+        entry.setHostname(requestParser.getHost());\n+        entry.setProtocol(fromXml.getRequest().getProtocol().name());\n+        entry.setSimplePath(requestParser.getPath());\n+      } catch (Exception e) {\n+        LOG.error(\n+          \"url is not valid: ignoring host, protocol, and path\",\n+          e);\n+      }\n+      String mimeType = responseParser.getContentType();\n+      entry.setMethod(requestParser.getMethod());\n+      entry.setMimetype(mimeType);\n+      entry.setResult(responseParser.getStatusMessage());\n+      entry.setRequestheaders(populateHeaders(\n+        requestParser.getPassThroughHeaders(),\n+        RequestDataType.requestHeader.name()));\n+      entry.setReqFormat(findRequestFormat(requestParser.getContentType()));\n+      entry.setRespFormat(findResponseFormat(responseParser\n+        .getContentType()));\n \n-            entry.setResponseheaders(populateHeaders(\n-                    responseParser.getPassThroughHeaders(),\n-                    RequestDataType.responseHeader.name()));\n+      entry.setResponseheaders(populateHeaders(\n+        responseParser.getPassThroughHeaders(),\n+        RequestDataType.responseHeader.name()));\n \n-            entry.setRequestCookies(populateCookies(requestParser.getCookies(),\n-                    RequestDataType.requestCookie.name()));\n-            entry.setResponseCookies(populateCookies(\n-                    responseParser.getCookies(),\n-                    RequestDataType.responseCookie.name()));\n-            String bodyAsString = fromXml.getRequest().getBodyAsString();\n-            // entry.setPayload(bodyAsString);\n-            if (!StringUtils.isEmpty(bodyAsString)) {\n-                if (ScriptConstants.JSON_TYPE.equalsIgnoreCase(entry.getReqFormat())\n-                        || ScriptConstants.XML_TYPE.equalsIgnoreCase(entry.getReqFormat())\n-                        || ScriptConstants.PLAIN_TEXT_TYPE.equalsIgnoreCase(entry.getReqFormat())) {\n-                    entry.setPayload(bodyAsString);\n-                } else if (ScriptConstants.MULTI_PART_TYPE.equalsIgnoreCase(entry.getReqFormat())) {\n-                    entry.setPayload(new String(Base64.encodeBase64(fromXml.getRequest().getBody())));\n-                } else {\n-                    entry.setPostDatas(formDataToSet(requestParser\n-                            .getPostParameters(bodyAsString),\n-                            RequestDataType.requestPostData.name()));\n-                }\n-            }\n-            entry.setResponse(fromXml.getResponse().getBodyAsString());\n-            entry.setQueryStrings(formDataToSet(requestParser.getQueryParams(),\n-                    RequestDataType.queryString.name()));\n-            return entry;\n-        } catch (Exception e) {\n-            LOG.error(\"Error processing script at step \"\n-                    + currentIndex + \": \" + e.toString(), e);\n-            if (e instanceof RuntimeException) {\n-                String err = e.getCause() != null ? e.getCause().toString() : e\n-                        .toString();\n-                throw new RuntimeException(\"Error processing script at step \"\n-                        + currentIndex + \": \" + err);\n-            }\n-            throw new RuntimeException(\"Error processing script at step \"\n-                    + currentIndex + \": \" + e.toString());\n+      entry.setRequestCookies(populateCookies(requestParser.getCookies(),\n+        RequestDataType.requestCookie.name()));\n+      entry.setResponseCookies(populateCookies(\n+        responseParser.getCookies(),\n+        RequestDataType.responseCookie.name()));\n+      String bodyAsString = fromXml.getRequest().getBodyAsString();\n+      // entry.setPayload(bodyAsString);\n+      if (!StringUtils.isEmpty(bodyAsString)) {\n+        if (ScriptConstants.JSON_TYPE.equalsIgnoreCase(entry.getReqFormat())\n+          || ScriptConstants.XML_TYPE.equalsIgnoreCase(entry.getReqFormat())\n+          || ScriptConstants.PLAIN_TEXT_TYPE.equalsIgnoreCase(entry.getReqFormat())) {\n+          entry.setPayload(bodyAsString);\n+        } else if (ScriptConstants.MULTI_PART_TYPE.equalsIgnoreCase(entry.getReqFormat())) {\n+          entry.setPayload(new String(Base64.encodeBase64(fromXml.getRequest().getBody())));\n+        } else {\n+          entry.setPostDatas(formDataToSet(requestParser\n+              .getPostParameters(bodyAsString),\n+            RequestDataType.requestPostData.name()));\n         }\n-\n+      }\n+      entry.setResponse(fromXml.getResponse().getBodyAsString());\n+      entry.setQueryStrings(formDataToSet(requestParser.getQueryParams(),\n+        RequestDataType.queryString.name()));\n+      return entry;\n+    } catch (Exception e) {\n+      LOG.error(\"Error processing script at step \"\n+        + currentIndex + \": \" + e.toString(), e);\n+      if (e instanceof RuntimeException) {\n+        String err = e.getCause() != null ? e.getCause().toString() : e\n+          .toString();\n+        throw new RuntimeException(\"Error processing script at step \"\n+          + currentIndex + \": \" + err);\n+      }\n+      throw new RuntimeException(\"Error processing script at step \"\n+        + currentIndex + \": \" + e.toString());\n     }\n \n-    /**\n-     * @param contentType\n-     * @return\n-     */\n-    private String findRequestFormat(String contentType) {\n-        String ret = ScriptConstants.NVP_TYPE;\n-        if (!StringUtils.isBlank(contentType)) {\n-            if (contentType.toLowerCase().contains(ScriptConstants.JSON_TYPE)) {\n-                ret = ScriptConstants.JSON_TYPE;\n-            } else if (contentType.toLowerCase().contains(\n-                    ScriptConstants.XML_TYPE)) {\n-                ret = ScriptConstants.XML_TYPE;\n-            } else if (contentType.toLowerCase().contains(\n-                    ScriptConstants.PLAIN_TEXT_TYPE)) {\n-                ret = ScriptConstants.PLAIN_TEXT_TYPE;\n-            } else if (contentType.toLowerCase().contains(ScriptConstants.MULTI_PART_TYPE)) {\n-                ret = ScriptConstants.MULTI_PART_TYPE;\n-            }\n-        }\n-        return ret;\n-    }\n+  }\n \n-    /**\n-     * @param contentType\n-     * @return\n-     */\n-    private String findResponseFormat(String contentType) {\n-        String ret = ScriptConstants.NVP_TYPE;\n-        if (!StringUtils.isEmpty(contentType)) {\n-            if (contentType.toLowerCase().contains(ScriptConstants.JSON_TYPE)) {\n-                ret = ScriptConstants.JSON_TYPE;\n-            } else if (contentType.toLowerCase().contains(\n-                    ScriptConstants.XML_TYPE)) {\n-                ret = ScriptConstants.XML_TYPE;\n-            } else if (contentType.toLowerCase().contains(\n-                    ScriptConstants.PLAIN_TEXT_TYPE)) {\n-                ret = ScriptConstants.PLAIN_TEXT_TYPE;\n-            }\n-        }\n-        return ret;\n+  /**\n+   * @param contentType\n+   * @return\n+   */\n+  private String findRequestFormat(String contentType) {\n+    String ret = ScriptConstants.NVP_TYPE;\n+    if (!StringUtils.isBlank(contentType)) {\n+      if (contentType.toLowerCase().contains(ScriptConstants.JSON_TYPE)) {\n+        ret = ScriptConstants.JSON_TYPE;\n+      } else if (contentType.toLowerCase().contains(\n+        ScriptConstants.XML_TYPE)) {\n+        ret = ScriptConstants.XML_TYPE;\n+      } else if (contentType.toLowerCase().contains(\n+        ScriptConstants.PLAIN_TEXT_TYPE)) {\n+        ret = ScriptConstants.PLAIN_TEXT_TYPE;\n+      } else if (contentType.toLowerCase().contains(ScriptConstants.MULTI_PART_TYPE)) {\n+        ret = ScriptConstants.MULTI_PART_TYPE;\n+      }\n     }\n+    return ret;\n+  }\n \n-    private Set<RequestData> populateCookies(List<Cookie> list, String type) {\n-        Set<RequestData> cs = new HashSet<RequestData>();\n-        if (list != null) {\n-            for (Cookie c : list) {\n-                RequestData cookie = new RequestData();\n-                cookie.setType(type);\n-                cookie.setKey(c.getKey());\n-                cookie.setValue(c.getValue());\n-                cs.add(cookie);\n-            }\n-        }\n-        return cs;\n+  /**\n+   * @param contentType\n+   * @return\n+   */\n+  private String findResponseFormat(String contentType) {\n+    String ret = ScriptConstants.NVP_TYPE;\n+    if (!StringUtils.isEmpty(contentType)) {\n+      if (contentType.toLowerCase().contains(ScriptConstants.JSON_TYPE)) {\n+        ret = ScriptConstants.JSON_TYPE;\n+      } else if (contentType.toLowerCase().contains(\n+        ScriptConstants.XML_TYPE)) {\n+        ret = ScriptConstants.XML_TYPE;\n+      } else if (contentType.toLowerCase().contains(\n+        ScriptConstants.PLAIN_TEXT_TYPE)) {\n+        ret = ScriptConstants.PLAIN_TEXT_TYPE;\n+      }\n     }\n+    return ret;\n+  }\n \n-    private Set<RequestData> populateHeaders(List<Header> headers, String type) {\n-        return headers.stream().map(h -> new RequestData(h.getKey(), h.getValue(), type)).collect(Collectors.toSet());\n+  private Set<RequestData> populateCookies(List<Cookie> list, String type) {\n+    Set<RequestData> cs = new HashSet<RequestData>();\n+    if (list != null) {\n+      for (Cookie c : list) {\n+        RequestData cookie = new RequestData();\n+        cookie.setType(type);\n+        cookie.setKey(c.getKey());\n+        cookie.setValue(c.getValue());\n+        cs.add(cookie);\n+      }\n     }\n+    return cs;\n+  }\n \n-    /**\n-     * @param params\n-     * @param type\n-     * @return\n-     */\n-    private Set<RequestData> formDataToSet(List<KeyValuePair> params,\n-            String type) {\n-        Set<RequestData> map = new HashSet<RequestData>();\n-        if (params != null) {\n-            for (KeyValuePair param : params) {\n-                String name = param.getKey();\n-                String value = param.getValue();\n-                if (value != null) {\n-                    try {\n-                        value = URLDecoder.decode(value, ScriptConstants.UTF);\n-                    } catch (UnsupportedEncodingException e) {\n-                        // never happens since utf-8 is universally supported\n-                    }\n-                    value = value.replaceAll(\"[\\\\r\\\\n]\", \"\").replaceAll(\n-                            \">\\\\s+<\", \"><\");\n-                }\n-                RequestData data = new RequestData();\n-                data.setKey(name);\n-                data.setValue(value);\n-                data.setType(type);\n+  private Set<RequestData> populateHeaders(List<Header> headers, String type) {\n+    return headers.stream().map(h -> new RequestData(h.getKey(), h.getValue(), type)).collect(Collectors.toSet());\n+  }\n \n-                map.add(data);\n-            }\n+  /**\n+   * @param params\n+   * @param type\n+   * @return\n+   */\n+  private Set<RequestData> formDataToSet(List<KeyValuePair> params,\n+                                         String type) {\n+    Set<RequestData> map = new HashSet<RequestData>();\n+    if (params != null) {\n+      for (KeyValuePair param : params) {\n+        String name = param.getKey();\n+        String value = param.getValue();\n+        if (value != null) {\n+          try {\n+            value = URLDecoder.decode(value, ScriptConstants.UTF);\n+          } catch (UnsupportedEncodingException e) {\n+            // never happens since utf-8 is universally supported\n+          }\n+          value = value.replaceAll(\"[\\\\r\\\\n]\", \"\").replaceAll(\n+            \">\\\\s+<\", \"><\");\n         }\n-        return map;\n-    }\n+        RequestData data = new RequestData();\n+        data.setKey(name);\n+        data.setValue(value);\n+        data.setType(type);\n \n-    /**\n-     * @param response\n-     * @return\n-     * @throws JSONException\n-     */\n-    public static Set<RequestData> rawJsonToSet(String response)\n-            throws JSONException {\n-        JSONObject jsonObject = new JSONObject(response);\n-        String[] names = JSONObject.getNames(jsonObject);\n-        List<RequestData> itemList = new ArrayList<RequestData>();\n-        for (String name : names) {\n-            traverse(name, jsonObject, itemList, new RequestDataBuilder(\n-                    RequestDataType.requestPostData.name()));\n-        }\n+        map.add(data);\n+      }\n+    }\n+    return map;\n+  }\n \n-        return new LinkedHashSet<RequestData>(itemList);\n+  /**\n+   * @param response\n+   * @return\n+   * @throws JSONException\n+   */\n+  public static Set<RequestData> rawJsonToSet(String response)\n+    throws JSONException {\n+    JSONObject jsonObject = new JSONObject(response);\n+    String[] names = JSONObject.getNames(jsonObject);\n+    List<RequestData> itemList = new ArrayList<RequestData>();\n+    for (String name : names) {\n+      traverse(name, jsonObject, itemList, new RequestDataBuilder(\n+        RequestDataType.requestPostData.name()));\n     }\n \n-    private static void traverse(String name, JSONObject jsonObject,\n-            List<RequestData> itemList, RequestDataBuilder dataItem) {\n-        try {\n-            Object childObject = jsonObject.get(name);\n-            if (childObject instanceof JSONArray) {\n-                JSONArray jsonArray = (JSONArray) childObject;\n-                dataItem.addPathElement(name);\n-                for (int i = 0; i < jsonArray.length(); i++) {\n-                    Object child = jsonArray.get(i);\n-                    RequestDataBuilder copy = dataItem.copy();\n-                    copy.addPathElement(\"[\" + i + \"]\");\n-                    if (child instanceof JSONObject) {\n-                        JSONObject childJson = (JSONObject) child;\n-                        String[] names = JSONObject.getNames(childJson);\n-                        for (String childName : names) {\n-                            traverse(childName, childJson, itemList, copy);\n+    return new LinkedHashSet<RequestData>(itemList);\n+  }\n+\n+  private static void traverse(String name, JSONObject jsonObject,\n+                               List<RequestData> itemList, RequestDataBuilder dataItem) {\n+    try {\n+      Object childObject = jsonObject.get(name);\n+      if (childObject instanceof JSONArray) {\n+        JSONArray jsonArray = (JSONArray) childObject;\n+        dataItem.addPathElement(name);\n+        for (int i = 0; i < jsonArray.length(); i++) {\n+          Object child = jsonArray.get(i);\n+          RequestDataBuilder copy = dataItem.copy();\n+          copy.addPathElement(\"[\" + i + \"]\");\n+          if (child instanceof JSONObject) {\n+            JSONObject childJson = (JSONObject) child;\n+            String[] names = JSONObject.getNames(childJson);\n+            for (String childName : names) {\n+              traverse(childName, childJson, itemList, copy);\n \n-                        }\n-                    }\n-                }\n-            } else if (childObject instanceof JSONObject) {\n-                JSONObject childJson = (JSONObject) childObject;\n-                String[] names = JSONObject.getNames(childJson);\n-                dataItem.addPathElement(name);\n-                if (names != null) {\n-                    for (String childName : names) {\n-                        traverse(childName, childJson, itemList, dataItem.copy());\n-                    }\n-                }\n-            } else {\n-                RequestData item = dataItem.build(name,\n-                        jsonObject.getString(name));\n-                itemList.add(item);\n             }\n-        } catch (Exception e) {\n-            throw new RuntimeException(e);\n+          }\n+        }\n+      } else if (childObject instanceof JSONObject) {\n+        JSONObject childJson = (JSONObject) childObject;\n+        String[] names = JSONObject.getNames(childJson);\n+        dataItem.addPathElement(name);\n+        if (names != null) {\n+          for (String childName : names) {\n+            traverse(childName, childJson, itemList, dataItem.copy());\n+          }\n         }\n+      } else {\n+        RequestData item = dataItem.build(name,\n+          jsonObject.getString(name));\n+        itemList.add(item);\n+      }\n+    } catch (Exception e) {\n+      throw new RuntimeException(e);\n     }\n+  }\n }\n",
            "diff_size": 325
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/109/OwaspReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/109/OwaspReader.java\nindex b46e88edba6..fd081486f61 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/109/OwaspReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/109/OwaspReader.java\n@@ -80,7 +80,7 @@ public class OwaspReader implements RecordedScriptReader {\n                 .parse(reader));\n     }\n \n-    public List<ScriptStep> transactionsToRequest( Collection<Transaction> entries) {\n+    public List<ScriptStep> transactionsToRequest(Collection<Transaction> entries) {\n         List<ScriptStep> result = new ArrayList<ScriptStep>();\n         int index = 0;\n         for (Transaction transaction : entries) {\n@@ -322,4 +322,4 @@ public class OwaspReader implements RecordedScriptReader {\n             throw new RuntimeException(e);\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "107",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 150).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "108",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 154).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "127",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "130",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "132",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "136",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 228).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "141",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "263",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/109/OwaspReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/109/OwaspReader.java\nindex b46e88edba6..cc46439b64e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/109/OwaspReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/109/OwaspReader.java\n@@ -16,6 +16,8 @@ package com.intuit.tank.script.util;\n  * #L%\n  */\n \n+\n+\n import java.io.Reader;\n import java.io.StringReader;\n import java.io.UnsupportedEncodingException;\n@@ -28,7 +30,6 @@ import java.util.LinkedHashSet;\n import java.util.List;\n import java.util.Set;\n import java.util.stream.Collectors;\n-\n import org.apache.commons.codec.binary.Base64;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.logging.log4j.LogManager;\n@@ -36,7 +37,6 @@ import org.apache.logging.log4j.Logger;\n import org.json.JSONArray;\n import org.json.JSONException;\n import org.json.JSONObject;\n-\n import com.intuit.tank.conversation.Cookie;\n import com.intuit.tank.conversation.Header;\n import com.intuit.tank.conversation.Transaction;\n@@ -53,12 +53,16 @@ import com.intuit.tank.vm.exception.WatsParseException;\n /**\n  * @author dangleton patterns: Util\n  */\n+\n+\n public class OwaspReader implements RecordedScriptReader {\n+\n     private static final Logger LOG = LogManager.getLogger(OwaspReader.class);\n \n     /**\n      * private constructor to implement the Util Pattern\n      */\n+\n     public OwaspReader() {\n         // empty constructor\n     }\n@@ -66,6 +70,7 @@ public class OwaspReader implements RecordedScriptReader {\n     /**\n      * @inheritDoc\n      */\n+\n     @Override\n     public List<ScriptStep> read(String xml) throws WatsParseException {\n         return read(new StringReader(xml));\n@@ -74,13 +79,14 @@ public class OwaspReader implements RecordedScriptReader {\n     /**\n      * @inheritDoc\n      */\n+\n     @Override\n     public List<ScriptStep> read(Reader reader) throws WatsParseException {\n-        return transactionsToRequest(new WebConversationJaxbParseXML()\n-                .parse(reader));\n+        return transactionsToRequest(new WebConversationJaxbParseXML().parse(reader));\n     }\n \n-    public List<ScriptStep> transactionsToRequest( Collection<Transaction> entries) {\n+\n+    public List<ScriptStep> transactionsToRequest(Collection<Transaction> entries) {\n         List<ScriptStep> result = new ArrayList<ScriptStep>();\n         int index = 0;\n         for (Transaction transaction : entries) {\n@@ -95,103 +101,76 @@ public class OwaspReader implements RecordedScriptReader {\n      * @return\n      * @throws MalformedURLException\n      */\n-    private ScriptStep transactionToResult(Transaction fromXml, int currentIndex) {\n \n+    private ScriptStep transactionToResult(Transaction fromXml, int currentIndex) {\n         try {\n-            HeaderParser requestParser = new HeaderParser(HeaderType.Request,\n-                    fromXml.getRequest().getFirstLine(), fromXml.getRequest()\n-                            .getHeaders());\n-            HeaderParser responseParser = new HeaderParser(HeaderType.Response,\n-                    fromXml.getResponse().getFirstLine(), fromXml.getResponse()\n-                            .getHeaders());\n+            HeaderParser requestParser = new HeaderParser(HeaderType.Request, fromXml.getRequest().getFirstLine(), fromXml.getRequest().getHeaders());\n+            HeaderParser responseParser = new HeaderParser(HeaderType.Response, fromXml.getResponse().getFirstLine(), fromXml.getResponse().getHeaders());\n             ScriptStep entry = new ScriptStep();\n             entry.setStepIndex(currentIndex);\n             entry.setType(ScriptConstants.REQUEST);\n \n             // String url = fromXml.getUrl();\n-            entry.setUrl(requestParser.getUrl(fromXml.getRequest()\n-                    .getProtocol()));\n+            entry.setUrl(requestParser.getUrl(fromXml.getRequest().getProtocol()));\n             try {\n                 entry.setHostname(requestParser.getHost());\n                 entry.setProtocol(fromXml.getRequest().getProtocol().name());\n                 entry.setSimplePath(requestParser.getPath());\n             } catch (Exception e) {\n-                LOG.error(\n-                        \"url is not valid: ignoring host, protocol, and path\",\n-                        e);\n+                LOG.error(\"url is not valid: ignoring host, protocol, and path\",\n+e);\n             }\n             String mimeType = responseParser.getContentType();\n             entry.setMethod(requestParser.getMethod());\n             entry.setMimetype(mimeType);\n             entry.setResult(responseParser.getStatusMessage());\n-            entry.setRequestheaders(populateHeaders(\n-                    requestParser.getPassThroughHeaders(),\n-                    RequestDataType.requestHeader.name()));\n+            entry.setRequestheaders(populateHeaders(requestParser.getPassThroughHeaders(), RequestDataType.requestHeader.name()));\n             entry.setReqFormat(findRequestFormat(requestParser.getContentType()));\n-            entry.setRespFormat(findResponseFormat(responseParser\n-                    .getContentType()));\n-\n-            entry.setResponseheaders(populateHeaders(\n-                    responseParser.getPassThroughHeaders(),\n-                    RequestDataType.responseHeader.name()));\n-\n-            entry.setRequestCookies(populateCookies(requestParser.getCookies(),\n-                    RequestDataType.requestCookie.name()));\n-            entry.setResponseCookies(populateCookies(\n-                    responseParser.getCookies(),\n-                    RequestDataType.responseCookie.name()));\n+            entry.setRespFormat(findResponseFormat(responseParser.getContentType()));\n+            entry.setResponseheaders(populateHeaders(responseParser.getPassThroughHeaders(), RequestDataType.responseHeader.name()));\n+            entry.setRequestCookies(populateCookies(requestParser.getCookies(), RequestDataType.requestCookie.name()));\n+            entry.setResponseCookies(populateCookies(responseParser.getCookies(), RequestDataType.responseCookie.name()));\n             String bodyAsString = fromXml.getRequest().getBodyAsString();\n             // entry.setPayload(bodyAsString);\n             if (!StringUtils.isEmpty(bodyAsString)) {\n-                if (ScriptConstants.JSON_TYPE.equalsIgnoreCase(entry.getReqFormat())\n-                        || ScriptConstants.XML_TYPE.equalsIgnoreCase(entry.getReqFormat())\n-                        || ScriptConstants.PLAIN_TEXT_TYPE.equalsIgnoreCase(entry.getReqFormat())) {\n+                if (ScriptConstants.JSON_TYPE.equalsIgnoreCase(entry.getReqFormat()) || ScriptConstants.XML_TYPE.equalsIgnoreCase(entry.getReqFormat()) || ScriptConstants.PLAIN_TEXT_TYPE.equalsIgnoreCase(entry.getReqFormat())) {\n                     entry.setPayload(bodyAsString);\n                 } else if (ScriptConstants.MULTI_PART_TYPE.equalsIgnoreCase(entry.getReqFormat())) {\n                     entry.setPayload(new String(Base64.encodeBase64(fromXml.getRequest().getBody())));\n                 } else {\n-                    entry.setPostDatas(formDataToSet(requestParser\n-                            .getPostParameters(bodyAsString),\n-                            RequestDataType.requestPostData.name()));\n+                    entry.setPostDatas(formDataToSet(requestParser.getPostParameters(bodyAsString), RequestDataType.requestPostData.name()));\n                 }\n             }\n             entry.setResponse(fromXml.getResponse().getBodyAsString());\n-            entry.setQueryStrings(formDataToSet(requestParser.getQueryParams(),\n-                    RequestDataType.queryString.name()));\n+            entry.setQueryStrings(formDataToSet(requestParser.getQueryParams(), RequestDataType.queryString.name()));\n             return entry;\n         } catch (Exception e) {\n-            LOG.error(\"Error processing script at step \"\n-                    + currentIndex + \": \" + e.toString(), e);\n+            LOG.error(\"Error processing script at step \" + currentIndex + \": \" + e.toString(), e);\n             if (e instanceof RuntimeException) {\n-                String err = e.getCause() != null ? e.getCause().toString() : e\n-                        .toString();\n-                throw new RuntimeException(\"Error processing script at step \"\n-                        + currentIndex + \": \" + err);\n+                String err = e.getCause() != null ? e.getCause().toString() : e.toString();\n+                throw new RuntimeException(\"Error processing script at step \" + currentIndex + \": \" + err);\n             }\n-            throw new RuntimeException(\"Error processing script at step \"\n-                    + currentIndex + \": \" + e.toString());\n+            throw new RuntimeException(\"Error processing script at step \" + currentIndex + \": \" + e.toString());\n         }\n-\n     }\n \n     /**\n      * @param contentType\n      * @return\n      */\n+\n     private String findRequestFormat(String contentType) {\n         String ret = ScriptConstants.NVP_TYPE;\n         if (!StringUtils.isBlank(contentType)) {\n             if (contentType.toLowerCase().contains(ScriptConstants.JSON_TYPE)) {\n                 ret = ScriptConstants.JSON_TYPE;\n-            } else if (contentType.toLowerCase().contains(\n-                    ScriptConstants.XML_TYPE)) {\n+            } else if (contentType.toLowerCase().contains(ScriptConstants.XML_TYPE)) {\n                 ret = ScriptConstants.XML_TYPE;\n-            } else if (contentType.toLowerCase().contains(\n-                    ScriptConstants.PLAIN_TEXT_TYPE)) {\n-                ret = ScriptConstants.PLAIN_TEXT_TYPE;\n+            } else if (contentType.toLowerCase().contains(ScriptConstants.PLAIN_TEXT_TYPE)) {\n+                       ret = ScriptConstants.PLAIN_TEXT_TYPE;\n             } else if (contentType.toLowerCase().contains(ScriptConstants.MULTI_PART_TYPE)) {\n-                ret = ScriptConstants.MULTI_PART_TYPE;\n-            }\n+                       ret = ScriptConstants.MULTI_PART_TYPE;\n+                   }\n         }\n         return ret;\n     }\n@@ -200,18 +179,17 @@ public class OwaspReader implements RecordedScriptReader {\n      * @param contentType\n      * @return\n      */\n+\n     private String findResponseFormat(String contentType) {\n         String ret = ScriptConstants.NVP_TYPE;\n         if (!StringUtils.isEmpty(contentType)) {\n             if (contentType.toLowerCase().contains(ScriptConstants.JSON_TYPE)) {\n                 ret = ScriptConstants.JSON_TYPE;\n-            } else if (contentType.toLowerCase().contains(\n-                    ScriptConstants.XML_TYPE)) {\n+            } else if (contentType.toLowerCase().contains(ScriptConstants.XML_TYPE)) {\n                 ret = ScriptConstants.XML_TYPE;\n-            } else if (contentType.toLowerCase().contains(\n-                    ScriptConstants.PLAIN_TEXT_TYPE)) {\n-                ret = ScriptConstants.PLAIN_TEXT_TYPE;\n-            }\n+            } else if (contentType.toLowerCase().contains(ScriptConstants.PLAIN_TEXT_TYPE)) {\n+                       ret = ScriptConstants.PLAIN_TEXT_TYPE;\n+                   }\n         }\n         return ret;\n     }\n@@ -231,7 +209,7 @@ public class OwaspReader implements RecordedScriptReader {\n     }\n \n     private Set<RequestData> populateHeaders(List<Header> headers, String type) {\n-        return headers.stream().map(h -> new RequestData(h.getKey(), h.getValue(), type)).collect(Collectors.toSet());\n+        return headers.stream().map(h-> new RequestData(h.getKey(), h.getValue(), type)).collect(Collectors.toSet());\n     }\n \n     /**\n@@ -239,8 +217,8 @@ public class OwaspReader implements RecordedScriptReader {\n      * @param type\n      * @return\n      */\n-    private Set<RequestData> formDataToSet(List<KeyValuePair> params,\n-            String type) {\n+\n+    private Set<RequestData> formDataToSet(List<KeyValuePair> params, String type) {\n         Set<RequestData> map = new HashSet<RequestData>();\n         if (params != null) {\n             for (KeyValuePair param : params) {\n@@ -251,15 +229,14 @@ public class OwaspReader implements RecordedScriptReader {\n                         value = URLDecoder.decode(value, ScriptConstants.UTF);\n                     } catch (UnsupportedEncodingException e) {\n                         // never happens since utf-8 is universally supported\n+\n                     }\n-                    value = value.replaceAll(\"[\\\\r\\\\n]\", \"\").replaceAll(\n-                            \">\\\\s+<\", \"><\");\n+                    value = value.replaceAll(\"[\\\\r\\\\n]\", \"\").replaceAll(\">\\\\s+<\", \"><\");\n                 }\n                 RequestData data = new RequestData();\n                 data.setKey(name);\n                 data.setValue(value);\n                 data.setType(type);\n-\n                 map.add(data);\n             }\n         }\n@@ -271,21 +248,19 @@ public class OwaspReader implements RecordedScriptReader {\n      * @return\n      * @throws JSONException\n      */\n-    public static Set<RequestData> rawJsonToSet(String response)\n-            throws JSONException {\n+\n+\n+    public static Set<RequestData> rawJsonToSet(String response) throws JSONException {\n         JSONObject jsonObject = new JSONObject(response);\n         String[] names = JSONObject.getNames(jsonObject);\n         List<RequestData> itemList = new ArrayList<RequestData>();\n         for (String name : names) {\n-            traverse(name, jsonObject, itemList, new RequestDataBuilder(\n-                    RequestDataType.requestPostData.name()));\n+            traverse(name, jsonObject, itemList, new RequestDataBuilder(RequestDataType.requestPostData.name()));\n         }\n-\n         return new LinkedHashSet<RequestData>(itemList);\n     }\n \n-    private static void traverse(String name, JSONObject jsonObject,\n-            List<RequestData> itemList, RequestDataBuilder dataItem) {\n+    private static void traverse(String name, JSONObject jsonObject, List<RequestData> itemList, RequestDataBuilder dataItem) {\n         try {\n             Object childObject = jsonObject.get(name);\n             if (childObject instanceof JSONArray) {\n@@ -300,7 +275,6 @@ public class OwaspReader implements RecordedScriptReader {\n                         String[] names = JSONObject.getNames(childJson);\n                         for (String childName : names) {\n                             traverse(childName, childJson, itemList, copy);\n-\n                         }\n                     }\n                 }\n@@ -314,12 +288,11 @@ public class OwaspReader implements RecordedScriptReader {\n                     }\n                 }\n             } else {\n-                RequestData item = dataItem.build(name,\n-                        jsonObject.getString(name));\n+                RequestData item = dataItem.build(name, jsonObject.getString(name));\n                 itemList.add(item);\n             }\n         } catch (Exception e) {\n             throw new RuntimeException(e);\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 93
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/109/OwaspReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/109/OwaspReader.java\nindex b46e88edba6..f3ce7d6fa36 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/109/OwaspReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/109/OwaspReader.java\n@@ -80,7 +80,7 @@ public class OwaspReader implements RecordedScriptReader {\n                 .parse(reader));\n     }\n \n-    public List<ScriptStep> transactionsToRequest( Collection<Transaction> entries) {\n+    public List<ScriptStep> transactionsToRequest(Collection<Transaction> entries) {\n         List<ScriptStep> result = new ArrayList<ScriptStep>();\n         int index = 0;\n         for (Transaction transaction : entries) {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/109/OwaspReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/109/OwaspReader.java\nindex b46e88edba6..f3ce7d6fa36 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/109/OwaspReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/109/OwaspReader.java\n@@ -80,7 +80,7 @@ public class OwaspReader implements RecordedScriptReader {\n                 .parse(reader));\n     }\n \n-    public List<ScriptStep> transactionsToRequest( Collection<Transaction> entries) {\n+    public List<ScriptStep> transactionsToRequest(Collection<Transaction> entries) {\n         List<ScriptStep> result = new ArrayList<ScriptStep>();\n         int index = 0;\n         for (Transaction transaction : entries) {\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff"
    ]
}