{
    "project_name": "apache-metron",
    "error_id": "2",
    "information": {
        "errors": [
            {
                "line": "189",
                "severity": "warning",
                "message": "Line is longer than 100 characters (found 120).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "            )\n        )\n        // Ensures that it's a meta alert with active status or that it's an alert (signified by having no status field)\n        .must(boolQuery()\n            .should(termQuery(MetaAlertDao.STATUS_FIELD, MetaAlertStatus.ACTIVE.getStatusString()))\n            .should(boolQuery().mustNot(existsQuery(MetaAlertDao.STATUS_FIELD)))",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "188",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/errored/1/2/ElasticsearchMetaAlertDao.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/styler/2/ElasticsearchMetaAlertDao.java\nindex 34099734bda..9825513a235 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/errored/1/2/ElasticsearchMetaAlertDao.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/styler/2/ElasticsearchMetaAlertDao.java\n@@ -185,8 +185,7 @@ public class ElasticsearchMetaAlertDao implements MetaAlertDao {\n                 new QueryStringQueryBuilder(searchRequest.getQuery())\n                 )\n             )\n-        )\n-        // Ensures that it's a meta alert with active status or that it's an alert (signified by having no status field)\n+        )// Ensures that it's a meta alert with active status or that it's an alert (signified by having no status field)\n         .must(boolQuery()\n             .should(termQuery(MetaAlertDao.STATUS_FIELD, MetaAlertStatus.ACTIVE.getStatusString()))\n             .should(boolQuery().mustNot(existsQuery(MetaAlertDao.STATUS_FIELD)))\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "191",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/errored/1/2/ElasticsearchMetaAlertDao.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/intellij/2/ElasticsearchMetaAlertDao.java\nindex 34099734bda..550745b8fa3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/errored/1/2/ElasticsearchMetaAlertDao.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/intellij/2/ElasticsearchMetaAlertDao.java\n@@ -77,6 +77,7 @@ public class ElasticsearchMetaAlertDao implements MetaAlertDao {\n \n   /**\n    * Wraps an {@link org.apache.metron.indexing.dao.IndexDao} to handle meta alerts.\n+   *\n    * @param indexDao The Dao to wrap\n    */\n   public ElasticsearchMetaAlertDao(IndexDao indexDao) {\n@@ -85,11 +86,12 @@ public class ElasticsearchMetaAlertDao implements MetaAlertDao {\n \n   /**\n    * Wraps an {@link org.apache.metron.indexing.dao.IndexDao} to handle meta alerts.\n-   * @param indexDao The Dao to wrap\n+   *\n+   * @param indexDao         The Dao to wrap\n    * @param triageLevelField The field name to use as the threat scoring field\n    */\n   public ElasticsearchMetaAlertDao(IndexDao indexDao, String index, String triageLevelField,\n-      String threatSort) {\n+                                   String threatSort) {\n     init(indexDao, threatSort);\n     this.index = index;\n     this.threatTriageField = triageLevelField;\n@@ -224,6 +226,7 @@ public class ElasticsearchMetaAlertDao implements MetaAlertDao {\n \n   /**\n    * Given an alert GUID, retrieve all associated meta alerts.\n+   *\n    * @param guid The GUID of the child alert\n    * @return The Elasticsearch response containing the meta alerts\n    */\n@@ -253,6 +256,7 @@ public class ElasticsearchMetaAlertDao implements MetaAlertDao {\n \n   /**\n    * Return child documents after retrieving them from Elasticsearch.\n+   *\n    * @param request The request detailing which child alerts we need\n    * @return The Elasticsearch response to our request for alerts\n    */\n@@ -266,8 +270,9 @@ public class ElasticsearchMetaAlertDao implements MetaAlertDao {\n \n   /**\n    * Build the Document representing a meta alert to be created.\n+   *\n    * @param multiGetResponse The Elasticsearch results for the meta alerts child documents\n-   * @param groups The groups used to create this meta alert\n+   * @param groups           The groups used to create this meta alert\n    * @return A Document representing the new meta alert\n    */\n   protected Document buildCreateDocument(MultiGetResponse multiGetResponse, List<String> groups) {\n@@ -294,8 +299,9 @@ public class ElasticsearchMetaAlertDao implements MetaAlertDao {\n \n   /**\n    * Process an update to a meta alert itself.\n+   *\n    * @param update The update Document to be applied\n-   * @param index The optional index to update to\n+   * @param index  The optional index to update to\n    * @throws IOException If there's a problem running the update\n    */\n   protected void handleMetaUpdate(Document update, Optional<String> index) throws IOException {\n@@ -312,8 +318,9 @@ public class ElasticsearchMetaAlertDao implements MetaAlertDao {\n \n   /**\n    * Takes care of upserting a child alert to a meta alert.\n+   *\n    * @param update The update Document to be applied\n-   * @param hit The meta alert to be updated\n+   * @param hit    The meta alert to be updated\n    * @throws IOException If there's an issue running the upsert\n    */\n   protected void handleAlertUpdate(Document update, SearchHit hit) throws IOException {\n@@ -365,6 +372,7 @@ public class ElasticsearchMetaAlertDao implements MetaAlertDao {\n \n   /**\n    * Calculate the meta alert scores for a Document.\n+   *\n    * @param document The Document containing scores\n    * @return Set of score statistics\n    */\n@@ -390,8 +398,9 @@ public class ElasticsearchMetaAlertDao implements MetaAlertDao {\n \n   /**\n    * Builds the updated meta alert based on the update.\n+   *\n    * @param update The update Document for the meta alert\n-   * @param hit The meta alert to be updated\n+   * @param hit    The meta alert to be updated\n    * @return A builder for Elasticsearch to use\n    * @throws IOException If we have an issue building the result\n    */\n",
            "diff_size": 15
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "93",
                    "severity": "warning",
                    "message": "'ctor def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "139",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 2, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "140",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 14, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "141",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 14, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "142",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 14, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "143",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 14, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "144",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 14, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "145",
                    "severity": "warning",
                    "message": "'block rcurly' has incorrect indentation level 12, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "146",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "150",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "151",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "161",
                    "severity": "warning",
                    "message": "'try' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "175",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 218).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "178",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "179",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 183).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "196",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "215",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "218",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "223",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "263",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "303",
                    "column": "17",
                    "severity": "warning",
                    "message": "WhitespaceAround: '>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "314",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "315",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "320",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "337",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "348",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "358",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "359",
                    "severity": "warning",
                    "message": "Comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 360.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "398",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/errored/1/2/ElasticsearchMetaAlertDao.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/naturalize/2/ElasticsearchMetaAlertDao.java\nindex 34099734bda..57f76125bb0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/errored/1/2/ElasticsearchMetaAlertDao.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/naturalize/2/ElasticsearchMetaAlertDao.java\n@@ -90,7 +90,7 @@ public class ElasticsearchMetaAlertDao implements MetaAlertDao {\n    */\n   public ElasticsearchMetaAlertDao(IndexDao indexDao, String index, String triageLevelField,\n       String threatSort) {\n-    init(indexDao, threatSort);\n+  init(indexDao, threatSort);\n     this.index = index;\n     this.threatTriageField = triageLevelField;\n   }\n@@ -114,8 +114,7 @@ public class ElasticsearchMetaAlertDao implements MetaAlertDao {\n       this.elasticsearchDao = (ElasticsearchDao) indexDao;\n     } else {\n       throw new IllegalArgumentException(\n-          \"Need an ElasticsearchDao when using ElasticsearchMetaAlertDao\"\n-      );\n+          \"Need an ElasticsearchDao when using ElasticsearchMetaAlertDao\");\n     }\n \n     if (threatSort != null) {\n@@ -136,23 +135,20 @@ public class ElasticsearchMetaAlertDao implements MetaAlertDao {\n     org.elasticsearch.action.search.SearchResponse esResponse = getMetaAlertsForAlert(guid.trim());\n     SearchResponse searchResponse = new SearchResponse();\n     searchResponse.setTotal(esResponse.getHits().getTotalHits());\n-    searchResponse.setResults(\n-        Arrays.stream(esResponse.getHits().getHits()).map(searchHit -> {\n-              SearchResult searchResult = new SearchResult();\n+    searchResponse.setResults(Arrays.stream(esResponse.getHits().getHits()).map(searchHit -> {\n+  SearchResult searchResult = new SearchResult();\n               searchResult.setId(searchHit.getId());\n               searchResult.setSource(searchHit.getSource());\n               searchResult.setScore(searchHit.getScore());\n               searchResult.setIndex(searchHit.getIndex());\n               return searchResult;\n-            }\n-        ).collect(Collectors.toList()));\n-    return searchResponse;\n+            }).collect(Collectors.toList()));\n+return searchResponse;\n   }\n \n   @Override\n-  public MetaAlertCreateResponse createMetaAlert(MetaAlertCreateRequest request)\n-      throws InvalidCreateException, IOException {\n-    if (request.getGuidToIndices().isEmpty()) {\n+  public MetaAlertCreateResponse createMetaAlert(MetaAlertCreateRequest request) throws InvalidCreateException, IOException {\n+  if (request.getGuidToIndices().isEmpty()) {\n       throw new InvalidCreateException(\"MetaAlertCreateRequest must contain alert GUIDs\");\n     }\n     if (request.getGroups().isEmpty()) {\n@@ -162,8 +158,7 @@ public class ElasticsearchMetaAlertDao implements MetaAlertDao {\n     // Retrieve the documents going into the meta alert\n     MultiGetResponse multiGetResponse = getDocumentsByGuid(request);\n     Document createDoc = buildCreateDocument(multiGetResponse, request.getGroups());\n-\n-    try {\n+try {\n       handleMetaUpdate(createDoc, Optional.of(METAALERTS_INDEX));\n       MetaAlertCreateResponse createResponse = new MetaAlertCreateResponse();\n       createResponse.setCreated(true);\n@@ -177,21 +172,11 @@ public class ElasticsearchMetaAlertDao implements MetaAlertDao {\n   @Override\n   public SearchResponse search(SearchRequest searchRequest) throws InvalidSearchException {\n     // Wrap the query to also get any meta-alerts.\n-    QueryBuilder qb = constantScoreQuery(boolQuery()\n-        .must(boolQuery()\n-            .should(new QueryStringQueryBuilder(searchRequest.getQuery()))\n-            .should(nestedQuery(\n-                ALERT_FIELD,\n-                new QueryStringQueryBuilder(searchRequest.getQuery())\n-                )\n+    QueryBuilder qb = constantScoreQuery(boolQuery().must(boolQuery().should(new QueryStringQueryBuilder(searchRequest.getQuery())).should(nestedQuery(ALERT_FIELD, new QueryStringQueryBuilder(searchRequest.getQuery()))\n             )\n         )\n         // Ensures that it's a meta alert with active status or that it's an alert (signified by having no status field)\n-        .must(boolQuery()\n-            .should(termQuery(MetaAlertDao.STATUS_FIELD, MetaAlertStatus.ACTIVE.getStatusString()))\n-            .should(boolQuery().mustNot(existsQuery(MetaAlertDao.STATUS_FIELD)))\n-        )\n-    );\n+        .must(boolQuery().should(termQuery(MetaAlertDao.STATUS_FIELD, MetaAlertStatus.ACTIVE.getStatusString())).should(boolQuery().mustNot(existsQuery(MetaAlertDao.STATUS_FIELD)))));\n     return elasticsearchDao.search(searchRequest, qb);\n   }\n \n@@ -208,9 +193,7 @@ public class ElasticsearchMetaAlertDao implements MetaAlertDao {\n     } else {\n       // We need to update an alert itself.  Only that portion of the update can be delegated.\n       // We still need to get meta alerts potentially associated with it and update.\n-      org.elasticsearch.action.search.SearchResponse response = getMetaAlertsForAlert(\n-          update.getGuid()\n-      );\n+      org.elasticsearch.action.search.SearchResponse response = getMetaAlertsForAlert(update.getGuid());\n \n       // Each hit, if any, is a metaalert that needs to be updated\n       for (SearchHit hit : response.getHits()) {\n@@ -228,27 +211,16 @@ public class ElasticsearchMetaAlertDao implements MetaAlertDao {\n    * @return The Elasticsearch response containing the meta alerts\n    */\n   protected org.elasticsearch.action.search.SearchResponse getMetaAlertsForAlert(String guid) {\n-    QueryBuilder qb = boolQuery()\n-        .must(\n-            nestedQuery(\n-                ALERT_FIELD,\n-                boolQuery()\n-                    .must(termQuery(ALERT_FIELD + \".\" + Constants.GUID, guid))\n-            ).innerHit(new QueryInnerHitBuilder())\n+    QueryBuilder qb = boolQuery().must(nestedQuery(ALERT_FIELD,\n+                boolQuery().must(termQuery(ALERT_FIELD + \".\" + Constants.GUID, guid))).innerHit(new QueryInnerHitBuilder())\n         )\n         .must(termQuery(STATUS_FIELD, MetaAlertStatus.ACTIVE.getStatusString()));\n-    SearchRequest sr = new SearchRequest();\n+SearchRequest sr = new SearchRequest();\n     ArrayList<String> indices = new ArrayList<>();\n     indices.add(index);\n     sr.setIndices(indices);\n     return elasticsearchDao\n-        .getClient()\n-        .prepareSearch(index)\n-        .addFields(\"*\")\n-        .setFetchSource(true)\n-        .setQuery(qb)\n-        .execute()\n-        .actionGet();\n+        .getClient().prepareSearch(index).addFields(\"*\").setFetchSource(true).setQuery(qb).execute().actionGet();\n   }\n \n   /**\n@@ -288,8 +260,7 @@ public class ElasticsearchMetaAlertDao implements MetaAlertDao {\n     metaSource.put(Constants.Fields.TIMESTAMP.getName(), System.currentTimeMillis());\n     metaSource.put(GROUPS_FIELD, groups);\n     metaSource.put(STATUS_FIELD, MetaAlertStatus.ACTIVE.getStatusString());\n-\n-    return new Document(metaSource, guid, METAALERT_TYPE, System.currentTimeMillis());\n+return new Document(metaSource, guid, METAALERT_TYPE, System.currentTimeMillis());\n   }\n \n   /**\n@@ -320,26 +291,19 @@ public class ElasticsearchMetaAlertDao implements MetaAlertDao {\n     XContentBuilder builder = buildUpdatedMetaAlert(update, hit);\n \n     // Run the meta alert's update\n-    IndexRequest indexRequest = new IndexRequest(\n-        METAALERTS_INDEX,\n-        METAALERT_DOC,\n-        hit.getId()\n-    ).source(builder);\n-    UpdateRequest updateRequest = new UpdateRequest(\n-        METAALERTS_INDEX,\n-        METAALERT_DOC,\n-        hit.getId()\n-    ).doc(builder).upsert(indexRequest);\n+    IndexRequest indexRequest = new IndexRequest(METAALERTS_INDEX, METAALERT_DOC,\n+        hit.getId()).source(builder);\n+    UpdateRequest updateRequest = new UpdateRequest(METAALERTS_INDEX, METAALERT_DOC,\n+        hit.getId()).doc(builder).upsert(indexRequest);\n     try {\n       UpdateResponse updateResponse = elasticsearchDao.getClient().update(updateRequest).get();\n \n       ShardInfo shardInfo = updateResponse.getShardInfo();\n       int failed = shardInfo.getFailed();\n-      if (failed > 0) {\n+      if (failed> 0) {\n         throw new IOException(\n             \"ElasticsearchMetaAlertDao upsert failed: \"\n-                + Arrays.toString(shardInfo.getFailures())\n-        );\n+                + Arrays.toString(shardInfo.getFailures()));\n       }\n     } catch (Exception e) {\n       throw new IOException(e.getMessage(), e);\n@@ -347,15 +311,13 @@ public class ElasticsearchMetaAlertDao implements MetaAlertDao {\n   }\n \n   @Override\n-  public Map<String, Map<String, FieldType>> getColumnMetadata(List<String> indices)\n-      throws IOException {\n-    return indexDao.getColumnMetadata(indices);\n+  public Map<String, Map<String, FieldType>> getColumnMetadata(List<String> indices) throws IOException {\n+  return indexDao.getColumnMetadata(indices);\n   }\n \n   @Override\n-  public Map<String, FieldType> getCommonColumnMetadata(List<String> indices) throws\n-      IOException {\n-    return indexDao.getCommonColumnMetadata(indices);\n+  public Map<String, FieldType> getCommonColumnMetadata(List<String> indices) throws IOException {\n+  return indexDao.getCommonColumnMetadata(indices);\n   }\n \n   @Override\n@@ -372,8 +334,7 @@ public class ElasticsearchMetaAlertDao implements MetaAlertDao {\n   protected MetaScores calculateMetaScores(Document document) {\n     List<Object> alertsRaw = ((List<Object>) document.getDocument().get(ALERT_FIELD));\n     if (alertsRaw == null || alertsRaw.isEmpty()) {\n-      throw new IllegalArgumentException(\"No alerts to use in calculation for doc GUID: \"\n-          + document.getDocument().get(Constants.GUID));\n+      throw new IllegalArgumentException(\"No alerts to use in calculation for doc GUID: \" + document.getDocument().get(Constants.GUID));\n     }\n \n     ArrayList<Double> scores = new ArrayList<>();\n@@ -384,8 +345,7 @@ public class ElasticsearchMetaAlertDao implements MetaAlertDao {\n         scores.add(scoreNum);\n       }\n     }\n-\n-    return new MetaScores(scores);\n+return new MetaScores(scores);\n   }\n \n   /**\n@@ -395,9 +355,8 @@ public class ElasticsearchMetaAlertDao implements MetaAlertDao {\n    * @return A builder for Elasticsearch to use\n    * @throws IOException If we have an issue building the result\n    */\n-  protected XContentBuilder buildUpdatedMetaAlert(Document update, SearchHit hit)\n-      throws IOException {\n-    // Make sure to get all the threat scores while we're going through the docs\n+  protected XContentBuilder buildUpdatedMetaAlert(Document update, SearchHit hit) throws IOException {\n+  // Make sure to get all the threat scores while we're going through the docs\n     List<Double> scores = new ArrayList<>();\n     // Start building the new version of the metaalert\n     XContentBuilder builder = jsonBuilder().startObject();\n@@ -436,8 +395,7 @@ public class ElasticsearchMetaAlertDao implements MetaAlertDao {\n       }\n     }\n     builder.endObject();\n-\n-    return builder;\n+return builder;\n   }\n \n   private Double parseThreatField(Object threatRaw) {\n@@ -449,4 +407,4 @@ public class ElasticsearchMetaAlertDao implements MetaAlertDao {\n     }\n     return threat;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 75
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "188",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/errored/1/2/ElasticsearchMetaAlertDao.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/styler_random/2/ElasticsearchMetaAlertDao.java\nindex 34099734bda..9825513a235 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/errored/1/2/ElasticsearchMetaAlertDao.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/styler_random/2/ElasticsearchMetaAlertDao.java\n@@ -185,8 +185,7 @@ public class ElasticsearchMetaAlertDao implements MetaAlertDao {\n                 new QueryStringQueryBuilder(searchRequest.getQuery())\n                 )\n             )\n-        )\n-        // Ensures that it's a meta alert with active status or that it's an alert (signified by having no status field)\n+        )// Ensures that it's a meta alert with active status or that it's an alert (signified by having no status field)\n         .must(boolQuery()\n             .should(termQuery(MetaAlertDao.STATUS_FIELD, MetaAlertStatus.ACTIVE.getStatusString()))\n             .should(boolQuery().mustNot(existsQuery(MetaAlertDao.STATUS_FIELD)))\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "188",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/errored/1/2/ElasticsearchMetaAlertDao.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/styler_three_grams/2/ElasticsearchMetaAlertDao.java\nindex 34099734bda..9825513a235 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/errored/1/2/ElasticsearchMetaAlertDao.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/styler_three_grams/2/ElasticsearchMetaAlertDao.java\n@@ -185,8 +185,7 @@ public class ElasticsearchMetaAlertDao implements MetaAlertDao {\n                 new QueryStringQueryBuilder(searchRequest.getQuery())\n                 )\n             )\n-        )\n-        // Ensures that it's a meta alert with active status or that it's an alert (signified by having no status field)\n+        )// Ensures that it's a meta alert with active status or that it's an alert (signified by having no status field)\n         .must(boolQuery()\n             .should(termQuery(MetaAlertDao.STATUS_FIELD, MetaAlertStatus.ACTIVE.getStatusString()))\n             .should(boolQuery().mustNot(existsQuery(MetaAlertDao.STATUS_FIELD)))\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}