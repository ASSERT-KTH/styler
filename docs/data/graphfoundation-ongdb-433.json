{
    "project_name": "graphfoundation-ongdb",
    "error_id": "433",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "51",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/433/SingleSourceSingleSinkShortestPath.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/433/SingleSourceSingleSinkShortestPath.java\nindex ab1c162bb53..ecc1b8d3e12 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/433/SingleSourceSingleSinkShortestPath.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/433/SingleSourceSingleSinkShortestPath.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphalgo.impl.shortestpath;\n \n import java.util.List;\n@@ -31,93 +32,102 @@ import org.neo4j.graphdb.RelationshipType;\n  * An object implementing this encapsulates an algorithm able to solve the\n  * single source single sink shortest path problem. I.e. it can find the\n  * shortest path(s) between two given nodes in a network.\n+ *\n+ * @param <CostType> The datatype the edge weights are represented by.\n  * @author Patrik Larsson\n- * @param <CostType>\n- *            The datatype the edge weights are represented by.\n  */\n public interface SingleSourceSingleSinkShortestPath<CostType>\n {\n-    /**\n-     * This resets the calculation if we for some reason would like to redo it.\n-     */\n-    void reset();\n+  /**\n+   * This resets the calculation if we for some reason would like to redo it.\n+   */\n+  void reset();\n \n-    /**\n-     * This sets the start node. The found paths will start in this node.\n-     * @param node\n-     *            The start node.\n-     */\n-    void setStartNode( Node node );\n+  /**\n+   * This sets the start node. The found paths will start in this node.\n+   *\n+   * @param node The start node.\n+   */\n+  void setStartNode(Node node);\n \n-    /**\n-     * This sets the end node. The found paths will end in this node.\n-     * @param node\n-     *            The end node.\n-     */\n-    void setEndNode( Node node );\n+  /**\n+   * This sets the end node. The found paths will end in this node.\n+   *\n+   * @param node The end node.\n+   */\n+  void setEndNode(Node node);\n \n-    /**\n-     * A call to this will run the algorithm to find a single shortest path, if\n-     * not already done, and return it as an alternating list of\n-     * Node/Relationship.\n-     * @return The path as an alternating list of Node/Relationship.\n-     */\n-    List<PropertyContainer> getPath();\n+  /**\n+   * A call to this will run the algorithm to find a single shortest path, if\n+   * not already done, and return it as an alternating list of\n+   * Node/Relationship.\n+   *\n+   * @return The path as an alternating list of Node/Relationship.\n+   */\n+  List<PropertyContainer> getPath();\n \n-    /**\n-     * A call to this will run the algorithm to find a single shortest path, if\n-     * not already done, and return it as a list of nodes.\n-     * @return The path as a list of nodes.\n-     */\n-    List<Node> getPathAsNodes();\n+  /**\n+   * A call to this will run the algorithm to find a single shortest path, if\n+   * not already done, and return it as a list of nodes.\n+   *\n+   * @return The path as a list of nodes.\n+   */\n+  List<Node> getPathAsNodes();\n \n-    /**\n-     * A call to this will run the algorithm to find a single shortest path, if\n-     * not already done, and return it as a list of Relationships.\n-     * @return The path as a list of Relationships.\n-     */\n-    List<Relationship> getPathAsRelationships();\n+  /**\n+   * A call to this will run the algorithm to find a single shortest path, if\n+   * not already done, and return it as a list of Relationships.\n+   *\n+   * @return The path as a list of Relationships.\n+   */\n+  List<Relationship> getPathAsRelationships();\n \n-    /**\n-     * A call to this will run the algorithm to find all shortest paths, if not\n-     * already done, and return them as alternating lists of Node/Relationship.\n-     * @return A list of the paths as alternating lists of Node/Relationship.\n-     */\n-    List<List<PropertyContainer>> getPaths();\n+  /**\n+   * A call to this will run the algorithm to find all shortest paths, if not\n+   * already done, and return them as alternating lists of Node/Relationship.\n+   *\n+   * @return A list of the paths as alternating lists of Node/Relationship.\n+   */\n+  List<List<PropertyContainer>> getPaths();\n \n-    /**\n-     * A call to this will run the algorithm to find all shortest paths, if not\n-     * already done, and return them as lists of nodes.\n-     * @return A list of the paths as lists of nodes.\n-     */\n-    List<List<Node>> getPathsAsNodes();\n+  /**\n+   * A call to this will run the algorithm to find all shortest paths, if not\n+   * already done, and return them as lists of nodes.\n+   *\n+   * @return A list of the paths as lists of nodes.\n+   */\n+  List<List<Node>> getPathsAsNodes();\n \n-    /**\n-     * A call to this will run the algorithm to find all shortest paths, if not\n-     * already done, and return them as lists of relationships.\n-     * @return A list of the paths as lists of relationships.\n-     */\n-    List<List<Relationship>> getPathsAsRelationships();\n+  /**\n+   * A call to this will run the algorithm to find all shortest paths, if not\n+   * already done, and return them as lists of relationships.\n+   *\n+   * @return A list of the paths as lists of relationships.\n+   */\n+  List<List<Relationship>> getPathsAsRelationships();\n \n-    /**\n-     * A call to this will run the algorithm to find the cost for the shortest\n-     * paths between the start node and the end node, if not calculated before.\n-     * This will usually find a single shortest path.\n-     * @return The total weight of the shortest path(s).\n-     */\n-    CostType getCost();\n+  /**\n+   * A call to this will run the algorithm to find the cost for the shortest\n+   * paths between the start node and the end node, if not calculated before.\n+   * This will usually find a single shortest path.\n+   *\n+   * @return The total weight of the shortest path(s).\n+   */\n+  CostType getCost();\n \n-    /**\n-     * This can be used to retrieve the Direction in which relationships should\n-     * be in the shortest path(s).\n-     * @return The direction.\n-     */\n-    Direction getDirection();\n+  /**\n+   * This can be used to retrieve the Direction in which relationships should\n+   * be in the shortest path(s).\n+   *\n+   * @return The direction.\n+   */\n+  Direction getDirection();\n \n-    /**\n-     * This can be used to retrieve the types of relationships that are\n-     * traversed.\n-     * @return The relationship type(s).\n-     */\n-    RelationshipType[] getRelationshipTypes();\n+  /**\n+   * This can be used to retrieve the types of relationships that are\n+   * traversed.\n+   *\n+   * @return The relationship type(s).\n+   */\n+  RelationshipType[] getRelationshipTypes();\n }\n",
            "diff_size": 86
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/433/SingleSourceSingleSinkShortestPath.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/433/SingleSourceSingleSinkShortestPath.java\nindex ab1c162bb53..3731600d7ac 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/433/SingleSourceSingleSinkShortestPath.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/433/SingleSourceSingleSinkShortestPath.java\n@@ -120,4 +120,4 @@ public interface SingleSourceSingleSinkShortestPath<CostType>\n      * @return The relationship type(s).\n      */\n     RelationshipType[] getRelationshipTypes();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}