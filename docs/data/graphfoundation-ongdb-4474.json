{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4474",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "39",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "73",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "96",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "120",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "132",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "159",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "186",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "202",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "220",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "238",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "254",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "269",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "284",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4474/RelationshipSelections.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4474/RelationshipSelections.java\nindex e5c0dcdf2e5..033f47ea5c5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4474/RelationshipSelections.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4474/RelationshipSelections.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.kernel.api.helpers;\n \n import org.neo4j.graphdb.ResourceIterator;\n@@ -30,272 +31,260 @@ import org.neo4j.internal.kernel.api.RelationshipTraversalCursor;\n  */\n public final class RelationshipSelections\n {\n-    static final long UNINITIALIZED = -2L;\n-    static final long NO_ID = -1L;\n+  static final long UNINITIALIZED = -2L;\n+  static final long NO_ID = -1L;\n \n-    private RelationshipSelections()\n-    {\n-        throw new UnsupportedOperationException( \"Do not instantiate\" );\n-    }\n+  private RelationshipSelections()\n+  {\n+    throw new UnsupportedOperationException(\"Do not instantiate\");\n+  }\n \n-    /**\n-     * Returns an outgoing selection cursor given the provided node cursor and relationship types.\n-     *\n-     * @param cursors A cursor factor used for allocating the needed cursors\n-     * @param node A node cursor positioned at the current node.\n-     * @param types The types of the relationship\n-     * @return A cursor that allows traversing the relationship chain.\n-     */\n-    public static RelationshipSelectionCursor outgoingCursor( CursorFactory cursors, NodeCursor node, int[] types )\n+  /**\n+   * Returns an outgoing selection cursor given the provided node cursor and relationship types.\n+   *\n+   * @param cursors A cursor factor used for allocating the needed cursors\n+   * @param node    A node cursor positioned at the current node.\n+   * @param types   The types of the relationship\n+   * @return A cursor that allows traversing the relationship chain.\n+   */\n+  public static RelationshipSelectionCursor outgoingCursor(CursorFactory cursors, NodeCursor node, int[] types)\n+  {\n+    if (node.isDense())\n     {\n-        if ( node.isDense() )\n-        {\n-            RelationshipDenseSelectionCursor selectionCursor = new RelationshipDenseSelectionCursor();\n-            setupOutgoingDense( selectionCursor, cursors, node, types );\n-            return selectionCursor;\n-        }\n-        else\n-        {\n-            RelationshipSparseSelectionCursor selectionCursor = new RelationshipSparseSelectionCursor();\n-            setupOutgoingSparse( selectionCursor, cursors, node, types );\n-            return selectionCursor;\n-        }\n+      RelationshipDenseSelectionCursor selectionCursor = new RelationshipDenseSelectionCursor();\n+      setupOutgoingDense(selectionCursor, cursors, node, types);\n+      return selectionCursor;\n+    } else\n+    {\n+      RelationshipSparseSelectionCursor selectionCursor = new RelationshipSparseSelectionCursor();\n+      setupOutgoingSparse(selectionCursor, cursors, node, types);\n+      return selectionCursor;\n     }\n+  }\n \n-    /**\n-     * Returns an incoming selection cursor given the provided node cursor and relationship types.\n-     *\n-     * @param cursors A cursor factor used for allocating the needed cursors\n-     * @param node A node cursor positioned at the current node.\n-     * @param types The types of the relationship\n-     * @return A cursor that allows traversing the relationship chain.\n-     */\n-    public static RelationshipSelectionCursor incomingCursor( CursorFactory cursors, NodeCursor node, int[] types )\n+  /**\n+   * Returns an incoming selection cursor given the provided node cursor and relationship types.\n+   *\n+   * @param cursors A cursor factor used for allocating the needed cursors\n+   * @param node    A node cursor positioned at the current node.\n+   * @param types   The types of the relationship\n+   * @return A cursor that allows traversing the relationship chain.\n+   */\n+  public static RelationshipSelectionCursor incomingCursor(CursorFactory cursors, NodeCursor node, int[] types)\n+  {\n+    if (node.isDense())\n+    {\n+      RelationshipDenseSelectionCursor selectionCursor = new RelationshipDenseSelectionCursor();\n+      setupIncomingDense(selectionCursor, cursors, node, types);\n+      return selectionCursor;\n+    } else\n     {\n-        if ( node.isDense() )\n-        {\n-            RelationshipDenseSelectionCursor selectionCursor = new RelationshipDenseSelectionCursor();\n-            setupIncomingDense( selectionCursor, cursors, node, types );\n-            return selectionCursor;\n-        }\n-        else\n-        {\n-            RelationshipSparseSelectionCursor selectionCursor = new RelationshipSparseSelectionCursor();\n-            setupIncomingSparse( selectionCursor, cursors, node, types );\n-            return selectionCursor;\n-        }\n+      RelationshipSparseSelectionCursor selectionCursor = new RelationshipSparseSelectionCursor();\n+      setupIncomingSparse(selectionCursor, cursors, node, types);\n+      return selectionCursor;\n     }\n+  }\n \n-    /**\n-     * Returns a multi-directed selection cursor given the provided node cursor and relationship types.\n-     *\n-     * @param cursors A cursor factor used for allocating the needed cursors\n-     * @param node A node cursor positioned at the current node.\n-     * @param types The types of the relationship\n-     * @return A cursor that allows traversing the relationship chain.\n-     */\n-    public static RelationshipSelectionCursor allCursor( CursorFactory cursors, NodeCursor node, int[] types )\n+  /**\n+   * Returns a multi-directed selection cursor given the provided node cursor and relationship types.\n+   *\n+   * @param cursors A cursor factor used for allocating the needed cursors\n+   * @param node    A node cursor positioned at the current node.\n+   * @param types   The types of the relationship\n+   * @return A cursor that allows traversing the relationship chain.\n+   */\n+  public static RelationshipSelectionCursor allCursor(CursorFactory cursors, NodeCursor node, int[] types)\n+  {\n+    if (node.isDense())\n+    {\n+      RelationshipDenseSelectionCursor selectionCursor = new RelationshipDenseSelectionCursor();\n+      setupAllDense(selectionCursor, cursors, node, types);\n+      return selectionCursor;\n+    } else\n     {\n-        if ( node.isDense() )\n-        {\n-            RelationshipDenseSelectionCursor selectionCursor = new RelationshipDenseSelectionCursor();\n-            setupAllDense( selectionCursor, cursors, node, types );\n-            return selectionCursor;\n-        }\n-        else\n-        {\n-            RelationshipSparseSelectionCursor selectionCursor = new RelationshipSparseSelectionCursor();\n-            setupAllSparse( selectionCursor, cursors, node, types );\n-            return selectionCursor;\n-        }\n+      RelationshipSparseSelectionCursor selectionCursor = new RelationshipSparseSelectionCursor();\n+      setupAllSparse(selectionCursor, cursors, node, types);\n+      return selectionCursor;\n     }\n+  }\n \n-    /**\n-     * Returns an outgoing resource iterator given the provided node cursor, direction and relationship types.\n-     *\n-     * @param cursors A cursor factor used for allocating the needed cursors\n-     * @param node A node cursor positioned at the current node.\n-     * @param types The types of the relationship\n-     * @param factory factory for creating instance of generic type T\n-     * @return An iterator that allows traversing the relationship chain.\n-     */\n-    public static <T> ResourceIterator<T> outgoingIterator( CursorFactory cursors, NodeCursor node, int[] types,\n-            RelationshipFactory<T> factory )\n+  /**\n+   * Returns an outgoing resource iterator given the provided node cursor, direction and relationship types.\n+   *\n+   * @param cursors A cursor factor used for allocating the needed cursors\n+   * @param node    A node cursor positioned at the current node.\n+   * @param types   The types of the relationship\n+   * @param factory factory for creating instance of generic type T\n+   * @return An iterator that allows traversing the relationship chain.\n+   */\n+  public static <T> ResourceIterator<T> outgoingIterator(CursorFactory cursors, NodeCursor node, int[] types,\n+                                                         RelationshipFactory<T> factory)\n+  {\n+    if (node.isDense())\n     {\n-        if ( node.isDense() )\n-        {\n-            RelationshipDenseSelectionIterator<T> selectionIterator =\n-                    new RelationshipDenseSelectionIterator<>( factory );\n-            setupOutgoingDense( selectionIterator, cursors, node, types );\n-            return selectionIterator;\n-        }\n-        else\n-        {\n-            RelationshipSparseSelectionIterator<T> selectionIterator =\n-                    new RelationshipSparseSelectionIterator<>( factory );\n-            setupOutgoingSparse( selectionIterator, cursors, node, types );\n-            return selectionIterator;\n-        }\n+      RelationshipDenseSelectionIterator<T> selectionIterator =\n+          new RelationshipDenseSelectionIterator<>(factory);\n+      setupOutgoingDense(selectionIterator, cursors, node, types);\n+      return selectionIterator;\n+    } else\n+    {\n+      RelationshipSparseSelectionIterator<T> selectionIterator =\n+          new RelationshipSparseSelectionIterator<>(factory);\n+      setupOutgoingSparse(selectionIterator, cursors, node, types);\n+      return selectionIterator;\n     }\n+  }\n \n-    /**\n-     * Returns an incoming resource iterator given the provided node cursor, direction and relationship types.\n-     *\n-     * @param cursors A cursor factor used for allocating the needed cursors\n-     * @param node A node cursor positioned at the current node.\n-     * @param types The types of the relationship\n-     * @param factory factory for creating instance of generic type T\n-     * @return An iterator that allows traversing the relationship chain.\n-     */\n-    public static <T> ResourceIterator<T> incomingIterator( CursorFactory cursors, NodeCursor node, int[] types,\n-            RelationshipFactory<T> factory )\n+  /**\n+   * Returns an incoming resource iterator given the provided node cursor, direction and relationship types.\n+   *\n+   * @param cursors A cursor factor used for allocating the needed cursors\n+   * @param node    A node cursor positioned at the current node.\n+   * @param types   The types of the relationship\n+   * @param factory factory for creating instance of generic type T\n+   * @return An iterator that allows traversing the relationship chain.\n+   */\n+  public static <T> ResourceIterator<T> incomingIterator(CursorFactory cursors, NodeCursor node, int[] types,\n+                                                         RelationshipFactory<T> factory)\n+  {\n+    if (node.isDense())\n+    {\n+      RelationshipDenseSelectionIterator<T> selectionIterator =\n+          new RelationshipDenseSelectionIterator<>(factory);\n+      setupIncomingDense(selectionIterator, cursors, node, types);\n+      return selectionIterator;\n+    } else\n     {\n-        if ( node.isDense() )\n-        {\n-            RelationshipDenseSelectionIterator<T> selectionIterator =\n-                    new RelationshipDenseSelectionIterator<>( factory );\n-            setupIncomingDense( selectionIterator, cursors, node, types );\n-            return selectionIterator;\n-        }\n-        else\n-        {\n-            RelationshipSparseSelectionIterator<T> selectionIterator =\n-                    new RelationshipSparseSelectionIterator<>( factory );\n-            setupIncomingSparse( selectionIterator, cursors, node, types );\n-            return selectionIterator;\n-        }\n+      RelationshipSparseSelectionIterator<T> selectionIterator =\n+          new RelationshipSparseSelectionIterator<>(factory);\n+      setupIncomingSparse(selectionIterator, cursors, node, types);\n+      return selectionIterator;\n     }\n+  }\n \n-    /**\n-     * Returns a multi-directed resource iterator given the provided node cursor, direction and relationship types.\n-     *\n-     * @param cursors A cursor factor used for allocating the needed cursors\n-     * @param node A node cursor positioned at the current node.\n-     * @param types The types of the relationship\n-     * @param factory factory for creating instance of generic type T\n-     * @return An iterator that allows traversing the relationship chain.\n-     */\n-    public static <T> ResourceIterator<T> allIterator( CursorFactory cursors, NodeCursor node, int[] types,\n-            RelationshipFactory<T> factory )\n+  /**\n+   * Returns a multi-directed resource iterator given the provided node cursor, direction and relationship types.\n+   *\n+   * @param cursors A cursor factor used for allocating the needed cursors\n+   * @param node    A node cursor positioned at the current node.\n+   * @param types   The types of the relationship\n+   * @param factory factory for creating instance of generic type T\n+   * @return An iterator that allows traversing the relationship chain.\n+   */\n+  public static <T> ResourceIterator<T> allIterator(CursorFactory cursors, NodeCursor node, int[] types,\n+                                                    RelationshipFactory<T> factory)\n+  {\n+    if (node.isDense())\n+    {\n+      RelationshipDenseSelectionIterator<T> selectionIterator =\n+          new RelationshipDenseSelectionIterator<>(factory);\n+      setupAllDense(selectionIterator, cursors, node, types);\n+      return selectionIterator;\n+    } else\n     {\n-        if ( node.isDense() )\n-        {\n-            RelationshipDenseSelectionIterator<T> selectionIterator =\n-                    new RelationshipDenseSelectionIterator<>( factory );\n-            setupAllDense( selectionIterator, cursors, node, types );\n-            return selectionIterator;\n-        }\n-        else\n-        {\n-            RelationshipSparseSelectionIterator<T> selectionIterator =\n-                    new RelationshipSparseSelectionIterator<>( factory );\n-            setupAllSparse( selectionIterator, cursors, node, types );\n-            return selectionIterator;\n-        }\n+      RelationshipSparseSelectionIterator<T> selectionIterator =\n+          new RelationshipSparseSelectionIterator<>(factory);\n+      setupAllSparse(selectionIterator, cursors, node, types);\n+      return selectionIterator;\n     }\n+  }\n \n-    private static void setupOutgoingDense( RelationshipDenseSelection denseSelection, CursorFactory cursors,\n-            NodeCursor node, int[] types )\n-    {\n+  private static void setupOutgoingDense(RelationshipDenseSelection denseSelection, CursorFactory cursors,\n+                                         NodeCursor node, int[] types)\n+  {\n \n-        RelationshipGroupCursor groupCursor = cursors.allocateRelationshipGroupCursor();\n-        RelationshipTraversalCursor traversalCursor = cursors.allocateRelationshipTraversalCursor();\n-        try\n-        {\n-            node.relationships( groupCursor );\n-            denseSelection.outgoing( groupCursor, traversalCursor, types );\n-        }\n-        catch ( Throwable t )\n-        {\n-            groupCursor.close();\n-            traversalCursor.close();\n-            throw t;\n-        }\n+    RelationshipGroupCursor groupCursor = cursors.allocateRelationshipGroupCursor();\n+    RelationshipTraversalCursor traversalCursor = cursors.allocateRelationshipTraversalCursor();\n+    try\n+    {\n+      node.relationships(groupCursor);\n+      denseSelection.outgoing(groupCursor, traversalCursor, types);\n+    } catch (Throwable t)\n+    {\n+      groupCursor.close();\n+      traversalCursor.close();\n+      throw t;\n     }\n+  }\n \n-    private static void setupIncomingDense( RelationshipDenseSelection denseSelection, CursorFactory cursors,\n-            NodeCursor node, int[] types )\n-    {\n+  private static void setupIncomingDense(RelationshipDenseSelection denseSelection, CursorFactory cursors,\n+                                         NodeCursor node, int[] types)\n+  {\n \n-        RelationshipGroupCursor groupCursor = cursors.allocateRelationshipGroupCursor();\n-        RelationshipTraversalCursor traversalCursor = cursors.allocateRelationshipTraversalCursor();\n-        try\n-        {\n-            node.relationships( groupCursor );\n-            denseSelection.incoming( groupCursor, traversalCursor, types );\n-        }\n-        catch ( Throwable t )\n-        {\n-            groupCursor.close();\n-            traversalCursor.close();\n-            throw t;\n-        }\n+    RelationshipGroupCursor groupCursor = cursors.allocateRelationshipGroupCursor();\n+    RelationshipTraversalCursor traversalCursor = cursors.allocateRelationshipTraversalCursor();\n+    try\n+    {\n+      node.relationships(groupCursor);\n+      denseSelection.incoming(groupCursor, traversalCursor, types);\n+    } catch (Throwable t)\n+    {\n+      groupCursor.close();\n+      traversalCursor.close();\n+      throw t;\n     }\n+  }\n \n-    private static void setupAllDense( RelationshipDenseSelection denseSelection, CursorFactory cursors,\n-            NodeCursor node, int[] types )\n-    {\n+  private static void setupAllDense(RelationshipDenseSelection denseSelection, CursorFactory cursors,\n+                                    NodeCursor node, int[] types)\n+  {\n \n-        RelationshipGroupCursor groupCursor = cursors.allocateRelationshipGroupCursor();\n-        RelationshipTraversalCursor traversalCursor = cursors.allocateRelationshipTraversalCursor();\n-        try\n-        {\n-            node.relationships( groupCursor );\n-            denseSelection.all( groupCursor, traversalCursor, types );\n-        }\n-        catch ( Throwable t )\n-        {\n-            groupCursor.close();\n-            traversalCursor.close();\n-            throw t;\n-        }\n+    RelationshipGroupCursor groupCursor = cursors.allocateRelationshipGroupCursor();\n+    RelationshipTraversalCursor traversalCursor = cursors.allocateRelationshipTraversalCursor();\n+    try\n+    {\n+      node.relationships(groupCursor);\n+      denseSelection.all(groupCursor, traversalCursor, types);\n+    } catch (Throwable t)\n+    {\n+      groupCursor.close();\n+      traversalCursor.close();\n+      throw t;\n     }\n+  }\n \n-    private static void setupOutgoingSparse( RelationshipSparseSelection sparseSelection,\n-            CursorFactory cursors, NodeCursor node, int[] types )\n+  private static void setupOutgoingSparse(RelationshipSparseSelection sparseSelection,\n+                                          CursorFactory cursors, NodeCursor node, int[] types)\n+  {\n+    RelationshipTraversalCursor traversalCursor = cursors.allocateRelationshipTraversalCursor();\n+    try\n+    {\n+      node.allRelationships(traversalCursor);\n+      sparseSelection.outgoing(traversalCursor, types);\n+    } catch (Throwable t)\n     {\n-        RelationshipTraversalCursor traversalCursor = cursors.allocateRelationshipTraversalCursor();\n-        try\n-        {\n-            node.allRelationships( traversalCursor );\n-            sparseSelection.outgoing( traversalCursor, types );\n-        }\n-        catch ( Throwable t )\n-        {\n-            traversalCursor.close();\n-            throw t;\n-        }\n+      traversalCursor.close();\n+      throw t;\n     }\n+  }\n \n-    private static void setupIncomingSparse( RelationshipSparseSelection sparseSelection,\n-            CursorFactory cursors, NodeCursor node, int[] types )\n+  private static void setupIncomingSparse(RelationshipSparseSelection sparseSelection,\n+                                          CursorFactory cursors, NodeCursor node, int[] types)\n+  {\n+    RelationshipTraversalCursor traversalCursor = cursors.allocateRelationshipTraversalCursor();\n+    try\n     {\n-        RelationshipTraversalCursor traversalCursor = cursors.allocateRelationshipTraversalCursor();\n-        try\n-        {\n-            node.allRelationships( traversalCursor );\n-            sparseSelection.incoming( traversalCursor, types );\n-        }\n-        catch ( Throwable t )\n-        {\n-            traversalCursor.close();\n-            throw t;\n-        }\n+      node.allRelationships(traversalCursor);\n+      sparseSelection.incoming(traversalCursor, types);\n+    } catch (Throwable t)\n+    {\n+      traversalCursor.close();\n+      throw t;\n     }\n+  }\n \n-    private static void setupAllSparse( RelationshipSparseSelection sparseSelection,\n-            CursorFactory cursors, NodeCursor node, int[] types )\n+  private static void setupAllSparse(RelationshipSparseSelection sparseSelection,\n+                                     CursorFactory cursors, NodeCursor node, int[] types)\n+  {\n+    RelationshipTraversalCursor traversalCursor = cursors.allocateRelationshipTraversalCursor();\n+    try\n+    {\n+      node.allRelationships(traversalCursor);\n+      sparseSelection.all(traversalCursor, types);\n+    } catch (Throwable t)\n     {\n-        RelationshipTraversalCursor traversalCursor = cursors.allocateRelationshipTraversalCursor();\n-        try\n-        {\n-            node.allRelationships( traversalCursor );\n-            sparseSelection.all( traversalCursor, types );\n-        }\n-        catch ( Throwable t )\n-        {\n-            traversalCursor.close();\n-            throw t;\n-        }\n+      traversalCursor.close();\n+      throw t;\n     }\n+  }\n }\n",
            "diff_size": 295
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4474/RelationshipSelections.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4474/RelationshipSelections.java\nindex e5c0dcdf2e5..fa434c66aa4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4474/RelationshipSelections.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4474/RelationshipSelections.java\n@@ -119,21 +119,18 @@ public final class RelationshipSelections\n      * @param factory factory for creating instance of generic type T\n      * @return An iterator that allows traversing the relationship chain.\n      */\n-    public static <T> ResourceIterator<T> outgoingIterator( CursorFactory cursors, NodeCursor node, int[] types,\n-            RelationshipFactory<T> factory )\n+    public static <T> ResourceIterator<T> outgoingIterator( CursorFactory cursors, NodeCursor node, int[] types, RelationshipFactory<T> factory )\n     {\n         if ( node.isDense() )\n         {\n-            RelationshipDenseSelectionIterator<T> selectionIterator =\n-                    new RelationshipDenseSelectionIterator<>( factory );\n-            setupOutgoingDense( selectionIterator, cursors, node, types );\n+            RelationshipDenseSelectionIterator<T> selectionIterator = new RelationshipDenseSelectionIterator<>( factory );\n+setupOutgoingDense( selectionIterator, cursors, node, types );\n             return selectionIterator;\n         }\n         else\n         {\n-            RelationshipSparseSelectionIterator<T> selectionIterator =\n-                    new RelationshipSparseSelectionIterator<>( factory );\n-            setupOutgoingSparse( selectionIterator, cursors, node, types );\n+            RelationshipSparseSelectionIterator<T> selectionIterator = new RelationshipSparseSelectionIterator<>( factory );\n+setupOutgoingSparse( selectionIterator, cursors, node, types );\n             return selectionIterator;\n         }\n     }\n@@ -147,21 +144,18 @@ public final class RelationshipSelections\n      * @param factory factory for creating instance of generic type T\n      * @return An iterator that allows traversing the relationship chain.\n      */\n-    public static <T> ResourceIterator<T> incomingIterator( CursorFactory cursors, NodeCursor node, int[] types,\n-            RelationshipFactory<T> factory )\n+    public static <T> ResourceIterator<T> incomingIterator( CursorFactory cursors, NodeCursor node, int[] types, RelationshipFactory<T> factory )\n     {\n         if ( node.isDense() )\n         {\n-            RelationshipDenseSelectionIterator<T> selectionIterator =\n-                    new RelationshipDenseSelectionIterator<>( factory );\n-            setupIncomingDense( selectionIterator, cursors, node, types );\n+            RelationshipDenseSelectionIterator<T> selectionIterator = new RelationshipDenseSelectionIterator<>( factory );\n+setupIncomingDense( selectionIterator, cursors, node, types );\n             return selectionIterator;\n         }\n         else\n         {\n-            RelationshipSparseSelectionIterator<T> selectionIterator =\n-                    new RelationshipSparseSelectionIterator<>( factory );\n-            setupIncomingSparse( selectionIterator, cursors, node, types );\n+            RelationshipSparseSelectionIterator<T> selectionIterator = new RelationshipSparseSelectionIterator<>( factory );\n+setupIncomingSparse( selectionIterator, cursors, node, types );\n             return selectionIterator;\n         }\n     }\n@@ -175,21 +169,18 @@ public final class RelationshipSelections\n      * @param factory factory for creating instance of generic type T\n      * @return An iterator that allows traversing the relationship chain.\n      */\n-    public static <T> ResourceIterator<T> allIterator( CursorFactory cursors, NodeCursor node, int[] types,\n-            RelationshipFactory<T> factory )\n+    public static <T> ResourceIterator<T> allIterator( CursorFactory cursors, NodeCursor node, int[] types, RelationshipFactory<T> factory )\n     {\n         if ( node.isDense() )\n         {\n-            RelationshipDenseSelectionIterator<T> selectionIterator =\n-                    new RelationshipDenseSelectionIterator<>( factory );\n-            setupAllDense( selectionIterator, cursors, node, types );\n+            RelationshipDenseSelectionIterator<T> selectionIterator = new RelationshipDenseSelectionIterator<>( factory );\n+setupAllDense( selectionIterator, cursors, node, types );\n             return selectionIterator;\n         }\n         else\n         {\n-            RelationshipSparseSelectionIterator<T> selectionIterator =\n-                    new RelationshipSparseSelectionIterator<>( factory );\n-            setupAllSparse( selectionIterator, cursors, node, types );\n+            RelationshipSparseSelectionIterator<T> selectionIterator = new RelationshipSparseSelectionIterator<>( factory );\n+setupAllSparse( selectionIterator, cursors, node, types );\n             return selectionIterator;\n         }\n     }\n@@ -197,8 +188,7 @@ public final class RelationshipSelections\n     private static void setupOutgoingDense( RelationshipDenseSelection denseSelection, CursorFactory cursors,\n             NodeCursor node, int[] types )\n     {\n-\n-        RelationshipGroupCursor groupCursor = cursors.allocateRelationshipGroupCursor();\n+    RelationshipGroupCursor groupCursor = cursors.allocateRelationshipGroupCursor();\n         RelationshipTraversalCursor traversalCursor = cursors.allocateRelationshipTraversalCursor();\n         try\n         {\n@@ -216,8 +206,7 @@ public final class RelationshipSelections\n     private static void setupIncomingDense( RelationshipDenseSelection denseSelection, CursorFactory cursors,\n             NodeCursor node, int[] types )\n     {\n-\n-        RelationshipGroupCursor groupCursor = cursors.allocateRelationshipGroupCursor();\n+    RelationshipGroupCursor groupCursor = cursors.allocateRelationshipGroupCursor();\n         RelationshipTraversalCursor traversalCursor = cursors.allocateRelationshipTraversalCursor();\n         try\n         {\n@@ -235,8 +224,7 @@ public final class RelationshipSelections\n     private static void setupAllDense( RelationshipDenseSelection denseSelection, CursorFactory cursors,\n             NodeCursor node, int[] types )\n     {\n-\n-        RelationshipGroupCursor groupCursor = cursors.allocateRelationshipGroupCursor();\n+    RelationshipGroupCursor groupCursor = cursors.allocateRelationshipGroupCursor();\n         RelationshipTraversalCursor traversalCursor = cursors.allocateRelationshipTraversalCursor();\n         try\n         {\n@@ -298,4 +286,4 @@ public final class RelationshipSelections\n             throw t;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 31
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}