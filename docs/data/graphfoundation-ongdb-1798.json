{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1798",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "30",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "30",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "37",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "37",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "80",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1798/ProgressTrackingOutputStream.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1798/ProgressTrackingOutputStream.java\nindex 98848eec07c..9ce04e9df76 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1798/ProgressTrackingOutputStream.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1798/ProgressTrackingOutputStream.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.neo4j.pushtocloud;\n \n import java.io.IOException;\n@@ -23,94 +24,94 @@ import org.neo4j.helpers.progress.ProgressListener;\n \n class ProgressTrackingOutputStream extends OutputStream\n {\n-    private final OutputStream actual;\n-    private final Progress progress;\n+  private final OutputStream actual;\n+  private final Progress progress;\n \n-    ProgressTrackingOutputStream( OutputStream actual, Progress progress )\n-    {\n-        this.actual = actual;\n-        this.progress = progress;\n-    }\n+  ProgressTrackingOutputStream(OutputStream actual, Progress progress)\n+  {\n+    this.actual = actual;\n+    this.progress = progress;\n+  }\n+\n+  @Override\n+  public void write(byte[] b, int off, int len) throws IOException\n+  {\n+    actual.write(b, off, len);\n+    progress.add(len);\n+  }\n+\n+  @Override\n+  public void flush() throws IOException\n+  {\n+    actual.flush();\n+  }\n+\n+  @Override\n+  public void close() throws IOException\n+  {\n+    actual.close();\n+  }\n+\n+  @Override\n+  public void write(int b) throws IOException\n+  {\n+    actual.write(b);\n+    progress.add(1);\n+  }\n \n-    @Override\n-    public void write( byte[] b, int off, int len ) throws IOException\n+  static class Progress\n+  {\n+    private final ProgressListener uploadProgress;\n+    // Why have this as a separate field here? Because we will track local progress while streaming the file,\n+    // i.e. how much we send. But if the upload gets aborted we may take a small step backwards after asking about resume position\n+    // and so to play nice with out progress listener (e.g. hard to remove printed dots from the terminal)\n+    // we won't report until we're caught up with it.\n+    private long highestReportedProgress;\n+    private long progress;\n+    private boolean done;\n+\n+    /**\n+     * @param progressListener {@link ProgressListener} to report upload progress to.\n+     * @param position         initial position to start the upload from. This is only useful if the upload was started and made it part-way\n+     *                         there before the command failed and the command has to be reissued at which point it can be resumed. This position is the position\n+     *                         where the upload will continue from. This is separate from temporary failure where the upload will be retried after some back-off.\n+     *                         That logic will instead make use of {@link #rewindTo(long)}.\n+     */\n+    Progress(ProgressListener progressListener, long position)\n     {\n-        actual.write( b, off, len );\n-        progress.add( len );\n+      uploadProgress = progressListener;\n+      if (position > 0)\n+      {\n+        uploadProgress.add(position);\n+      }\n     }\n \n-    @Override\n-    public void flush() throws IOException\n+    void add(int increment)\n     {\n-        actual.flush();\n+      progress += increment;\n+      if (progress > highestReportedProgress)\n+      {\n+        uploadProgress.add(progress - highestReportedProgress);\n+        highestReportedProgress = progress;\n+      }\n     }\n \n-    @Override\n-    public void close() throws IOException\n+    void rewindTo(long absoluteProgress)\n     {\n-        actual.close();\n+      // May be lower than what we're at, but that's fine\n+      progress = absoluteProgress;\n+      // highestReportedProgress will be kept as it is so that we know when we're caught up to it once more\n     }\n \n-    @Override\n-    public void write( int b ) throws IOException\n+    void done()\n     {\n-        actual.write( b );\n-        progress.add( 1 );\n+      done = true;\n+      uploadProgress.done();\n     }\n \n-    static class Progress\n+    boolean isDone()\n     {\n-        private final ProgressListener uploadProgress;\n-        // Why have this as a separate field here? Because we will track local progress while streaming the file,\n-        // i.e. how much we send. But if the upload gets aborted we may take a small step backwards after asking about resume position\n-        // and so to play nice with out progress listener (e.g. hard to remove printed dots from the terminal)\n-        // we won't report until we're caught up with it.\n-        private long highestReportedProgress;\n-        private long progress;\n-        private boolean done;\n-\n-        /**\n-         * @param progressListener {@link ProgressListener} to report upload progress to.\n-         * @param position initial position to start the upload from. This is only useful if the upload was started and made it part-way\n-         * there before the command failed and the command has to be reissued at which point it can be resumed. This position is the position\n-         * where the upload will continue from. This is separate from temporary failure where the upload will be retried after some back-off.\n-         * That logic will instead make use of {@link #rewindTo(long)}.\n-         */\n-        Progress( ProgressListener progressListener, long position )\n-        {\n-            uploadProgress = progressListener;\n-            if ( position > 0 )\n-            {\n-                uploadProgress.add( position );\n-            }\n-        }\n-\n-        void add( int increment )\n-        {\n-            progress += increment;\n-            if ( progress > highestReportedProgress )\n-            {\n-                uploadProgress.add( progress - highestReportedProgress );\n-                highestReportedProgress = progress;\n-            }\n-        }\n-\n-        void rewindTo( long absoluteProgress )\n-        {\n-            // May be lower than what we're at, but that's fine\n-            progress = absoluteProgress;\n-            // highestReportedProgress will be kept as it is so that we know when we're caught up to it once more\n-        }\n-\n-        void done()\n-        {\n-            done = true;\n-            uploadProgress.done();\n-        }\n-\n-        boolean isDone()\n-        {\n-            return done;\n-        }\n+      return done;\n     }\n+  }\n }\n",
            "diff_size": 129
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "91",
                    "column": "26",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1798/ProgressTrackingOutputStream.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1798/ProgressTrackingOutputStream.java\nindex 98848eec07c..07d50f7ed72 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1798/ProgressTrackingOutputStream.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1798/ProgressTrackingOutputStream.java\n@@ -88,7 +88,7 @@ class ProgressTrackingOutputStream extends OutputStream\n         void add( int increment )\n         {\n             progress += increment;\n-            if ( progress > highestReportedProgress )\n+            if ( progress> highestReportedProgress )\n             {\n                 uploadProgress.add( progress - highestReportedProgress );\n                 highestReportedProgress = progress;\n@@ -113,4 +113,4 @@ class ProgressTrackingOutputStream extends OutputStream\n             return done;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}