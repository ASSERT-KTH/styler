{
    "project_name": "CONNECT-Solution-CONNECT",
    "error_id": "983",
    "information": {
        "errors": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.patientdiscovery.configuration.jmx;\n\nimport gov.hhs.fha.nhinc.configuration.IConfiguration.serviceEnum;\nimport gov.hhs.fha.nhinc.patientdiscovery._10.gateway.ws.EntityPatientDiscoveryDeferredResponseSecured;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/983/PatientDiscoveryDeferredResp10WebServices.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/983/PatientDiscoveryDeferredResp10WebServices.java\nindex 0b60e57c7bb..b68012db923 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/983/PatientDiscoveryDeferredResp10WebServices.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/983/PatientDiscoveryDeferredResp10WebServices.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.patientdiscovery.configuration.jmx;\n \n import gov.hhs.fha.nhinc.configuration.IConfiguration.serviceEnum;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/983/PatientDiscoveryDeferredResp10WebServices.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/983/PatientDiscoveryDeferredResp10WebServices.java\nindex 0b60e57c7bb..6765c65c27c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/983/PatientDiscoveryDeferredResp10WebServices.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/983/PatientDiscoveryDeferredResp10WebServices.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.patientdiscovery.configuration.jmx;\n \n import gov.hhs.fha.nhinc.configuration.IConfiguration.serviceEnum;\n@@ -35,149 +36,148 @@ import gov.hhs.fha.nhinc.patientdiscovery.outbound.deferred.response.OutboundPat\n \n /**\n  * @author msw\n- *\n  */\n public class PatientDiscoveryDeferredResp10WebServices extends AbstractPDDeferredResponseWebServicesMXBean {\n \n-    private final serviceEnum serviceName = serviceEnum.PatientDiscoveryDeferredResponse;\n-\n-    /*\n-     * (non-Javadoc)\n-     *\n-     * @see gov.hhs.fha.nhinc.configuration.jmx.WebServicesMXBean#configureInboundImpl(java.lang.String)\n-     */\n-    @Override\n-    public void configureInboundStdImpl() throws InstantiationException, IllegalAccessException,\n-    ClassNotFoundException {\n-        NhinPatientDiscoveryDeferredResponse nhinPD;\n-        InboundPatientDiscoveryDeferredResponse inboundPD;\n-\n-        nhinPD = retrieveBean(NhinPatientDiscoveryDeferredResponse.class, getNhinBeanName());\n-        inboundPD = retrieveBean(InboundPatientDiscoveryDeferredResponse.class, getStandardInboundBeanName());\n-\n-        nhinPD.setInboundPatientDiscoveryResponse(inboundPD);\n+  private final serviceEnum serviceName = serviceEnum.PatientDiscoveryDeferredResponse;\n+\n+  /*\n+   * (non-Javadoc)\n+   *\n+   * @see gov.hhs.fha.nhinc.configuration.jmx.WebServicesMXBean#configureInboundImpl(java.lang.String)\n+   */\n+  @Override\n+  public void configureInboundStdImpl() throws InstantiationException, IllegalAccessException,\n+      ClassNotFoundException {\n+    NhinPatientDiscoveryDeferredResponse nhinPD;\n+    InboundPatientDiscoveryDeferredResponse inboundPD;\n+\n+    nhinPD = retrieveBean(NhinPatientDiscoveryDeferredResponse.class, getNhinBeanName());\n+    inboundPD = retrieveBean(InboundPatientDiscoveryDeferredResponse.class, getStandardInboundBeanName());\n+\n+    nhinPD.setInboundPatientDiscoveryResponse(inboundPD);\n+  }\n+\n+\n+  @Override\n+  public void configureInboundPtImpl() throws InstantiationException, IllegalAccessException,\n+      ClassNotFoundException {\n+    NhinPatientDiscoveryDeferredResponse nhinPD;\n+    InboundPatientDiscoveryDeferredResponse inboundPD;\n+\n+    nhinPD = retrieveBean(NhinPatientDiscoveryDeferredResponse.class, getNhinBeanName());\n+    inboundPD = retrieveBean(InboundPatientDiscoveryDeferredResponse.class, getPassthroughInboundBeanName());\n+\n+    nhinPD.setInboundPatientDiscoveryResponse(inboundPD);\n+  }\n+\n+  /*\n+   * (non-Javadoc)\n+   *\n+   * @see gov.hhs.fha.nhinc.configuration.jmx.AbstractWebServicesMXBean#configureOutboundImpl(java.lang.String)\n+   */\n+  @Override\n+  public void configureOutboundStdImpl() throws InstantiationException, IllegalAccessException,\n+      ClassNotFoundException {\n+    EntityPatientDiscoveryDeferredResponseUnsecured entityPDUnsecured;\n+    EntityPatientDiscoveryDeferredResponseSecured entityPDSecured;\n+    OutboundPatientDiscoveryDeferredResponse inboundPD;\n+    inboundPD = retrieveBean(OutboundPatientDiscoveryDeferredResponse.class, getStandardOutboundBeanName());\n+    entityPDUnsecured = retrieveBean(EntityPatientDiscoveryDeferredResponseUnsecured.class,\n+        getEntityUnsecuredBeanName());\n+    entityPDSecured = retrieveBean(EntityPatientDiscoveryDeferredResponseSecured.class, getEntitySecuredBeanName());\n+\n+    entityPDUnsecured.setOutboundPatientDiscoveryResponse(inboundPD);\n+    entityPDSecured.setOutboundPatientDiscoveryResponse(inboundPD);\n+  }\n+\n+\n+  @Override\n+  public void configureOutboundPtImpl() throws InstantiationException, IllegalAccessException,\n+      ClassNotFoundException {\n+    EntityPatientDiscoveryDeferredResponseUnsecured entityPDUnsecured;\n+    EntityPatientDiscoveryDeferredResponseSecured entityPDSecured;\n+    OutboundPatientDiscoveryDeferredResponse inboundPD;\n+    inboundPD = retrieveBean(OutboundPatientDiscoveryDeferredResponse.class, getPassthroughOutboundBeanName());\n+    entityPDUnsecured = retrieveBean(EntityPatientDiscoveryDeferredResponseUnsecured.class,\n+        getEntityUnsecuredBeanName());\n+    entityPDSecured = retrieveBean(EntityPatientDiscoveryDeferredResponseSecured.class, getEntitySecuredBeanName());\n+\n+    entityPDUnsecured.setOutboundPatientDiscoveryResponse(inboundPD);\n+    entityPDSecured.setOutboundPatientDiscoveryResponse(inboundPD);\n+  }\n+\n+  /*\n+   * (non-Javadoc)\n+   *\n+   * @see gov.hhs.fha.nhinc.configuration.jmx.WebServicesMXBean#isInboundPassthru()\n+   */\n+  @Override\n+  public boolean isInboundPassthru() {\n+    boolean isPassthru = false;\n+    NhinPatientDiscoveryDeferredResponse nhinPD = retrieveBean(NhinPatientDiscoveryDeferredResponse.class,\n+        getNhinBeanName());\n+    InboundPatientDiscoveryDeferredResponse inboundPatientDiscovery = nhinPD.getInboundPatientDiscovery();\n+    if (compareClassName(inboundPatientDiscovery, DEFAULT_INBOUND_PASSTHRU_IMPL_CLASS_NAME)) {\n+      isPassthru = true;\n     }\n-\n-\n-    @Override\n-    public void configureInboundPtImpl() throws InstantiationException, IllegalAccessException,\n-    ClassNotFoundException {\n-        NhinPatientDiscoveryDeferredResponse nhinPD;\n-        InboundPatientDiscoveryDeferredResponse inboundPD;\n-\n-        nhinPD = retrieveBean(NhinPatientDiscoveryDeferredResponse.class, getNhinBeanName());\n-        inboundPD = retrieveBean(InboundPatientDiscoveryDeferredResponse.class, getPassthroughInboundBeanName());\n-\n-        nhinPD.setInboundPatientDiscoveryResponse(inboundPD);\n+    return isPassthru;\n+  }\n+\n+  /*\n+   * (non-Javadoc)\n+   *\n+   * @see gov.hhs.fha.nhinc.configuration.jmx.WebServicesMXBean#isOutboundPassthru()\n+   */\n+  @Override\n+  public boolean isOutboundPassthru() {\n+    boolean isPassthru = false;\n+    EntityPatientDiscoveryDeferredResponseUnsecured entityPD = retrieveBean(\n+        EntityPatientDiscoveryDeferredResponseUnsecured.class, getEntityUnsecuredBeanName());\n+    OutboundPatientDiscoveryDeferredResponse outboundPatientDiscovery = entityPD.getOutboundPatientDiscovery();\n+    if (compareClassName(outboundPatientDiscovery, DEFAULT_OUTBOUND_PASSTHRU_IMPL_CLASS_NAME)) {\n+      isPassthru = true;\n     }\n-\n-    /*\n-     * (non-Javadoc)\n-     *\n-     * @see gov.hhs.fha.nhinc.configuration.jmx.AbstractWebServicesMXBean#configureOutboundImpl(java.lang.String)\n-     */\n-    @Override\n-    public void configureOutboundStdImpl() throws InstantiationException, IllegalAccessException,\n-    ClassNotFoundException {\n-        EntityPatientDiscoveryDeferredResponseUnsecured entityPDUnsecured;\n-        EntityPatientDiscoveryDeferredResponseSecured entityPDSecured;\n-        OutboundPatientDiscoveryDeferredResponse inboundPD;\n-        inboundPD = retrieveBean(OutboundPatientDiscoveryDeferredResponse.class, getStandardOutboundBeanName());\n-        entityPDUnsecured = retrieveBean(EntityPatientDiscoveryDeferredResponseUnsecured.class,\n-            getEntityUnsecuredBeanName());\n-        entityPDSecured = retrieveBean(EntityPatientDiscoveryDeferredResponseSecured.class, getEntitySecuredBeanName());\n-\n-        entityPDUnsecured.setOutboundPatientDiscoveryResponse(inboundPD);\n-        entityPDSecured.setOutboundPatientDiscoveryResponse(inboundPD);\n+    return isPassthru;\n+  }\n+\n+  @Override\n+  public serviceEnum getServiceName() {\n+    return serviceName;\n+  }\n+\n+  /*\n+   * (non-Javadoc)\n+   *\n+   * @see gov.hhs.fha.nhinc.configuration.jmx.WebServicesMXBean#isOutboundPassthru()\n+   */\n+  @Override\n+  public boolean isOutboundStandard() {\n+    boolean isStandard = false;\n+    EntityPatientDiscoveryDeferredResponseUnsecured entityPD = retrieveBean(\n+        EntityPatientDiscoveryDeferredResponseUnsecured.class, getEntityUnsecuredBeanName());\n+    OutboundPatientDiscoveryDeferredResponse outboundPatientDiscovery = entityPD.getOutboundPatientDiscovery();\n+    if (compareClassName(outboundPatientDiscovery, DEFAULT_OUTBOUND_STANDARD_IMPL_CLASS_NAME)) {\n+      isStandard = true;\n     }\n-\n-\n-    @Override\n-    public void configureOutboundPtImpl() throws InstantiationException, IllegalAccessException,\n-    ClassNotFoundException {\n-        EntityPatientDiscoveryDeferredResponseUnsecured entityPDUnsecured;\n-        EntityPatientDiscoveryDeferredResponseSecured entityPDSecured;\n-        OutboundPatientDiscoveryDeferredResponse inboundPD;\n-        inboundPD = retrieveBean(OutboundPatientDiscoveryDeferredResponse.class, getPassthroughOutboundBeanName());\n-        entityPDUnsecured = retrieveBean(EntityPatientDiscoveryDeferredResponseUnsecured.class,\n-            getEntityUnsecuredBeanName());\n-        entityPDSecured = retrieveBean(EntityPatientDiscoveryDeferredResponseSecured.class, getEntitySecuredBeanName());\n-\n-        entityPDUnsecured.setOutboundPatientDiscoveryResponse(inboundPD);\n-        entityPDSecured.setOutboundPatientDiscoveryResponse(inboundPD);\n-    }\n-\n-    /*\n-     * (non-Javadoc)\n-     *\n-     * @see gov.hhs.fha.nhinc.configuration.jmx.WebServicesMXBean#isInboundPassthru()\n-     */\n-    @Override\n-    public boolean isInboundPassthru() {\n-        boolean isPassthru = false;\n-        NhinPatientDiscoveryDeferredResponse nhinPD = retrieveBean(NhinPatientDiscoveryDeferredResponse.class,\n-            getNhinBeanName());\n-        InboundPatientDiscoveryDeferredResponse inboundPatientDiscovery = nhinPD.getInboundPatientDiscovery();\n-        if (compareClassName(inboundPatientDiscovery, DEFAULT_INBOUND_PASSTHRU_IMPL_CLASS_NAME)) {\n-            isPassthru = true;\n-        }\n-        return isPassthru;\n-    }\n-\n-    /*\n-     * (non-Javadoc)\n-     *\n-     * @see gov.hhs.fha.nhinc.configuration.jmx.WebServicesMXBean#isOutboundPassthru()\n-     */\n-    @Override\n-    public boolean isOutboundPassthru() {\n-        boolean isPassthru = false;\n-        EntityPatientDiscoveryDeferredResponseUnsecured entityPD = retrieveBean(\n-            EntityPatientDiscoveryDeferredResponseUnsecured.class, getEntityUnsecuredBeanName());\n-        OutboundPatientDiscoveryDeferredResponse outboundPatientDiscovery = entityPD.getOutboundPatientDiscovery();\n-        if (compareClassName(outboundPatientDiscovery, DEFAULT_OUTBOUND_PASSTHRU_IMPL_CLASS_NAME)) {\n-            isPassthru = true;\n-        }\n-        return isPassthru;\n-    }\n-\n-    @Override\n-    public serviceEnum getServiceName() {\n-        return serviceName;\n-    }\n-\n-    /*\n-     * (non-Javadoc)\n-     *\n-     * @see gov.hhs.fha.nhinc.configuration.jmx.WebServicesMXBean#isOutboundPassthru()\n-     */\n-    @Override\n-    public boolean isOutboundStandard() {\n-        boolean isStandard = false;\n-        EntityPatientDiscoveryDeferredResponseUnsecured entityPD = retrieveBean(\n-            EntityPatientDiscoveryDeferredResponseUnsecured.class, getEntityUnsecuredBeanName());\n-        OutboundPatientDiscoveryDeferredResponse outboundPatientDiscovery = entityPD.getOutboundPatientDiscovery();\n-        if (compareClassName(outboundPatientDiscovery, DEFAULT_OUTBOUND_STANDARD_IMPL_CLASS_NAME)) {\n-            isStandard = true;\n-        }\n-        return isStandard;\n-    }\n-\n-    /*\n-     * (non-Javadoc)\n-     *\n-     * @see gov.hhs.fha.nhinc.configuration.jmx.WebServicesMXBean#isOutboundPassthru()\n-     */\n-    @Override\n-    public boolean isInboundStandard() {\n-        boolean isStandard = false;\n-        NhinPatientDiscoveryDeferredResponse nhinPD = retrieveBean(\n-            NhinPatientDiscoveryDeferredResponse.class, getNhinBeanName());\n-        InboundPatientDiscoveryDeferredResponse inboundPatientDiscovery = nhinPD.getInboundPatientDiscovery();\n-        if (compareClassName(inboundPatientDiscovery, DEFAULT_INBOUND_STANDARD_IMPL_CLASS_NAME)) {\n-            isStandard = true;\n-        }\n-        return isStandard;\n+    return isStandard;\n+  }\n+\n+  /*\n+   * (non-Javadoc)\n+   *\n+   * @see gov.hhs.fha.nhinc.configuration.jmx.WebServicesMXBean#isOutboundPassthru()\n+   */\n+  @Override\n+  public boolean isInboundStandard() {\n+    boolean isStandard = false;\n+    NhinPatientDiscoveryDeferredResponse nhinPD = retrieveBean(\n+        NhinPatientDiscoveryDeferredResponse.class, getNhinBeanName());\n+    InboundPatientDiscoveryDeferredResponse inboundPatientDiscovery = nhinPD.getInboundPatientDiscovery();\n+    if (compareClassName(inboundPatientDiscovery, DEFAULT_INBOUND_STANDARD_IMPL_CLASS_NAME)) {\n+      isStandard = true;\n     }\n+    return isStandard;\n+  }\n \n }\n",
            "diff_size": 210
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "92",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "131",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "153",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "170",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/983/PatientDiscoveryDeferredResp10WebServices.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/983/PatientDiscoveryDeferredResp10WebServices.java\nindex 0b60e57c7bb..5876a00bad5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/983/PatientDiscoveryDeferredResp10WebServices.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/983/PatientDiscoveryDeferredResp10WebServices.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.patientdiscovery.configuration.jmx;\n \n import gov.hhs.fha.nhinc.configuration.IConfiguration.serviceEnum;\n@@ -47,8 +48,7 @@ public class PatientDiscoveryDeferredResp10WebServices extends AbstractPDDeferre\n      * @see gov.hhs.fha.nhinc.configuration.jmx.WebServicesMXBean#configureInboundImpl(java.lang.String)\n      */\n     @Override\n-    public void configureInboundStdImpl() throws InstantiationException, IllegalAccessException,\n-    ClassNotFoundException {\n+    public void configureInboundStdImpl() throws InstantiationException, IllegalAccessException, ClassNotFoundException {\n         NhinPatientDiscoveryDeferredResponse nhinPD;\n         InboundPatientDiscoveryDeferredResponse inboundPD;\n \n@@ -58,10 +58,8 @@ public class PatientDiscoveryDeferredResp10WebServices extends AbstractPDDeferre\n         nhinPD.setInboundPatientDiscoveryResponse(inboundPD);\n     }\n \n-\n-    @Override\n-    public void configureInboundPtImpl() throws InstantiationException, IllegalAccessException,\n-    ClassNotFoundException {\n+@Override\n+    public void configureInboundPtImpl() throws InstantiationException, IllegalAccessException, ClassNotFoundException {\n         NhinPatientDiscoveryDeferredResponse nhinPD;\n         InboundPatientDiscoveryDeferredResponse inboundPD;\n \n@@ -77,31 +75,28 @@ public class PatientDiscoveryDeferredResp10WebServices extends AbstractPDDeferre\n      * @see gov.hhs.fha.nhinc.configuration.jmx.AbstractWebServicesMXBean#configureOutboundImpl(java.lang.String)\n      */\n     @Override\n-    public void configureOutboundStdImpl() throws InstantiationException, IllegalAccessException,\n-    ClassNotFoundException {\n+    public void configureOutboundStdImpl() throws InstantiationException, IllegalAccessException, ClassNotFoundException {\n         EntityPatientDiscoveryDeferredResponseUnsecured entityPDUnsecured;\n         EntityPatientDiscoveryDeferredResponseSecured entityPDSecured;\n         OutboundPatientDiscoveryDeferredResponse inboundPD;\n         inboundPD = retrieveBean(OutboundPatientDiscoveryDeferredResponse.class, getStandardOutboundBeanName());\n         entityPDUnsecured = retrieveBean(EntityPatientDiscoveryDeferredResponseUnsecured.class,\n             getEntityUnsecuredBeanName());\n-        entityPDSecured = retrieveBean(EntityPatientDiscoveryDeferredResponseSecured.class, getEntitySecuredBeanName());\n+entityPDSecured = retrieveBean(EntityPatientDiscoveryDeferredResponseSecured.class, getEntitySecuredBeanName());\n \n         entityPDUnsecured.setOutboundPatientDiscoveryResponse(inboundPD);\n         entityPDSecured.setOutboundPatientDiscoveryResponse(inboundPD);\n     }\n \n-\n-    @Override\n-    public void configureOutboundPtImpl() throws InstantiationException, IllegalAccessException,\n-    ClassNotFoundException {\n+@Override\n+    public void configureOutboundPtImpl() throws InstantiationException, IllegalAccessException, ClassNotFoundException {\n         EntityPatientDiscoveryDeferredResponseUnsecured entityPDUnsecured;\n         EntityPatientDiscoveryDeferredResponseSecured entityPDSecured;\n         OutboundPatientDiscoveryDeferredResponse inboundPD;\n         inboundPD = retrieveBean(OutboundPatientDiscoveryDeferredResponse.class, getPassthroughOutboundBeanName());\n         entityPDUnsecured = retrieveBean(EntityPatientDiscoveryDeferredResponseUnsecured.class,\n             getEntityUnsecuredBeanName());\n-        entityPDSecured = retrieveBean(EntityPatientDiscoveryDeferredResponseSecured.class, getEntitySecuredBeanName());\n+entityPDSecured = retrieveBean(EntityPatientDiscoveryDeferredResponseSecured.class, getEntitySecuredBeanName());\n \n         entityPDUnsecured.setOutboundPatientDiscoveryResponse(inboundPD);\n         entityPDSecured.setOutboundPatientDiscoveryResponse(inboundPD);\n@@ -117,7 +112,8 @@ public class PatientDiscoveryDeferredResp10WebServices extends AbstractPDDeferre\n         boolean isPassthru = false;\n         NhinPatientDiscoveryDeferredResponse nhinPD = retrieveBean(NhinPatientDiscoveryDeferredResponse.class,\n             getNhinBeanName());\n-        InboundPatientDiscoveryDeferredResponse inboundPatientDiscovery = nhinPD.getInboundPatientDiscovery();\n+\n+InboundPatientDiscoveryDeferredResponse inboundPatientDiscovery = nhinPD.getInboundPatientDiscovery();\n         if (compareClassName(inboundPatientDiscovery, DEFAULT_INBOUND_PASSTHRU_IMPL_CLASS_NAME)) {\n             isPassthru = true;\n         }\n@@ -132,9 +128,9 @@ public class PatientDiscoveryDeferredResp10WebServices extends AbstractPDDeferre\n     @Override\n     public boolean isOutboundPassthru() {\n         boolean isPassthru = false;\n-        EntityPatientDiscoveryDeferredResponseUnsecured entityPD = retrieveBean(\n-            EntityPatientDiscoveryDeferredResponseUnsecured.class, getEntityUnsecuredBeanName());\n-        OutboundPatientDiscoveryDeferredResponse outboundPatientDiscovery = entityPD.getOutboundPatientDiscovery();\n+        EntityPatientDiscoveryDeferredResponseUnsecured entityPD = retrieveBean(EntityPatientDiscoveryDeferredResponseUnsecured.class, getEntityUnsecuredBeanName());\n+\n+OutboundPatientDiscoveryDeferredResponse outboundPatientDiscovery = entityPD.getOutboundPatientDiscovery();\n         if (compareClassName(outboundPatientDiscovery, DEFAULT_OUTBOUND_PASSTHRU_IMPL_CLASS_NAME)) {\n             isPassthru = true;\n         }\n@@ -154,9 +150,9 @@ public class PatientDiscoveryDeferredResp10WebServices extends AbstractPDDeferre\n     @Override\n     public boolean isOutboundStandard() {\n         boolean isStandard = false;\n-        EntityPatientDiscoveryDeferredResponseUnsecured entityPD = retrieveBean(\n-            EntityPatientDiscoveryDeferredResponseUnsecured.class, getEntityUnsecuredBeanName());\n-        OutboundPatientDiscoveryDeferredResponse outboundPatientDiscovery = entityPD.getOutboundPatientDiscovery();\n+        EntityPatientDiscoveryDeferredResponseUnsecured entityPD = retrieveBean(EntityPatientDiscoveryDeferredResponseUnsecured.class, getEntityUnsecuredBeanName());\n+\n+OutboundPatientDiscoveryDeferredResponse outboundPatientDiscovery = entityPD.getOutboundPatientDiscovery();\n         if (compareClassName(outboundPatientDiscovery, DEFAULT_OUTBOUND_STANDARD_IMPL_CLASS_NAME)) {\n             isStandard = true;\n         }\n@@ -171,13 +167,13 @@ public class PatientDiscoveryDeferredResp10WebServices extends AbstractPDDeferre\n     @Override\n     public boolean isInboundStandard() {\n         boolean isStandard = false;\n-        NhinPatientDiscoveryDeferredResponse nhinPD = retrieveBean(\n-            NhinPatientDiscoveryDeferredResponse.class, getNhinBeanName());\n-        InboundPatientDiscoveryDeferredResponse inboundPatientDiscovery = nhinPD.getInboundPatientDiscovery();\n+        NhinPatientDiscoveryDeferredResponse nhinPD = retrieveBean(NhinPatientDiscoveryDeferredResponse.class, getNhinBeanName());\n+\n+InboundPatientDiscoveryDeferredResponse inboundPatientDiscovery = nhinPD.getInboundPatientDiscovery();\n         if (compareClassName(inboundPatientDiscovery, DEFAULT_INBOUND_STANDARD_IMPL_CLASS_NAME)) {\n             isStandard = true;\n         }\n         return isStandard;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 27
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "81",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "94",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "99",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "115",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "133",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "157",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "175",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/983/PatientDiscoveryDeferredResp10WebServices.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/983/PatientDiscoveryDeferredResp10WebServices.java\nindex 0b60e57c7bb..4558a756453 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/983/PatientDiscoveryDeferredResp10WebServices.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/983/PatientDiscoveryDeferredResp10WebServices.java\n@@ -37,7 +37,10 @@ import gov.hhs.fha.nhinc.patientdiscovery.outbound.deferred.response.OutboundPat\n  * @author msw\n  *\n  */\n-public class PatientDiscoveryDeferredResp10WebServices extends AbstractPDDeferredResponseWebServicesMXBean {\n+\n+\n+public class PatientDiscoveryDeferredResp10WebServices extends\n+    AbstractPDDeferredResponseWebServicesMXBean {\n \n     private final serviceEnum serviceName = serviceEnum.PatientDiscoveryDeferredResponse;\n \n@@ -46,28 +49,24 @@ public class PatientDiscoveryDeferredResp10WebServices extends AbstractPDDeferre\n      *\n      * @see gov.hhs.fha.nhinc.configuration.jmx.WebServicesMXBean#configureInboundImpl(java.lang.String)\n      */\n+\n+\n     @Override\n-    public void configureInboundStdImpl() throws InstantiationException, IllegalAccessException,\n-    ClassNotFoundException {\n+    public void configureInboundStdImpl() throws InstantiationException, IllegalAccessException, ClassNotFoundException {\n         NhinPatientDiscoveryDeferredResponse nhinPD;\n         InboundPatientDiscoveryDeferredResponse inboundPD;\n-\n         nhinPD = retrieveBean(NhinPatientDiscoveryDeferredResponse.class, getNhinBeanName());\n         inboundPD = retrieveBean(InboundPatientDiscoveryDeferredResponse.class, getStandardInboundBeanName());\n-\n         nhinPD.setInboundPatientDiscoveryResponse(inboundPD);\n     }\n \n \n     @Override\n-    public void configureInboundPtImpl() throws InstantiationException, IllegalAccessException,\n-    ClassNotFoundException {\n+    public void configureInboundPtImpl() throws InstantiationException, IllegalAccessException, ClassNotFoundException {\n         NhinPatientDiscoveryDeferredResponse nhinPD;\n         InboundPatientDiscoveryDeferredResponse inboundPD;\n-\n         nhinPD = retrieveBean(NhinPatientDiscoveryDeferredResponse.class, getNhinBeanName());\n         inboundPD = retrieveBean(InboundPatientDiscoveryDeferredResponse.class, getPassthroughInboundBeanName());\n-\n         nhinPD.setInboundPatientDiscoveryResponse(inboundPD);\n     }\n \n@@ -76,33 +75,29 @@ public class PatientDiscoveryDeferredResp10WebServices extends AbstractPDDeferre\n      *\n      * @see gov.hhs.fha.nhinc.configuration.jmx.AbstractWebServicesMXBean#configureOutboundImpl(java.lang.String)\n      */\n+\n+\n     @Override\n-    public void configureOutboundStdImpl() throws InstantiationException, IllegalAccessException,\n-    ClassNotFoundException {\n+    public void configureOutboundStdImpl() throws InstantiationException, IllegalAccessException, ClassNotFoundException {\n         EntityPatientDiscoveryDeferredResponseUnsecured entityPDUnsecured;\n         EntityPatientDiscoveryDeferredResponseSecured entityPDSecured;\n         OutboundPatientDiscoveryDeferredResponse inboundPD;\n         inboundPD = retrieveBean(OutboundPatientDiscoveryDeferredResponse.class, getStandardOutboundBeanName());\n-        entityPDUnsecured = retrieveBean(EntityPatientDiscoveryDeferredResponseUnsecured.class,\n-            getEntityUnsecuredBeanName());\n+        entityPDUnsecured = retrieveBean(EntityPatientDiscoveryDeferredResponseUnsecured.class, getEntityUnsecuredBeanName());\n         entityPDSecured = retrieveBean(EntityPatientDiscoveryDeferredResponseSecured.class, getEntitySecuredBeanName());\n-\n         entityPDUnsecured.setOutboundPatientDiscoveryResponse(inboundPD);\n         entityPDSecured.setOutboundPatientDiscoveryResponse(inboundPD);\n     }\n \n \n     @Override\n-    public void configureOutboundPtImpl() throws InstantiationException, IllegalAccessException,\n-    ClassNotFoundException {\n+    public void configureOutboundPtImpl() throws InstantiationException, IllegalAccessException, ClassNotFoundException {\n         EntityPatientDiscoveryDeferredResponseUnsecured entityPDUnsecured;\n         EntityPatientDiscoveryDeferredResponseSecured entityPDSecured;\n         OutboundPatientDiscoveryDeferredResponse inboundPD;\n         inboundPD = retrieveBean(OutboundPatientDiscoveryDeferredResponse.class, getPassthroughOutboundBeanName());\n-        entityPDUnsecured = retrieveBean(EntityPatientDiscoveryDeferredResponseUnsecured.class,\n-            getEntityUnsecuredBeanName());\n+        entityPDUnsecured = retrieveBean(EntityPatientDiscoveryDeferredResponseUnsecured.class, getEntityUnsecuredBeanName());\n         entityPDSecured = retrieveBean(EntityPatientDiscoveryDeferredResponseSecured.class, getEntitySecuredBeanName());\n-\n         entityPDUnsecured.setOutboundPatientDiscoveryResponse(inboundPD);\n         entityPDSecured.setOutboundPatientDiscoveryResponse(inboundPD);\n     }\n@@ -112,11 +107,12 @@ public class PatientDiscoveryDeferredResp10WebServices extends AbstractPDDeferre\n      *\n      * @see gov.hhs.fha.nhinc.configuration.jmx.WebServicesMXBean#isInboundPassthru()\n      */\n+\n+\n     @Override\n     public boolean isInboundPassthru() {\n         boolean isPassthru = false;\n-        NhinPatientDiscoveryDeferredResponse nhinPD = retrieveBean(NhinPatientDiscoveryDeferredResponse.class,\n-            getNhinBeanName());\n+        NhinPatientDiscoveryDeferredResponse nhinPD = retrieveBean(NhinPatientDiscoveryDeferredResponse.class, getNhinBeanName());\n         InboundPatientDiscoveryDeferredResponse inboundPatientDiscovery = nhinPD.getInboundPatientDiscovery();\n         if (compareClassName(inboundPatientDiscovery, DEFAULT_INBOUND_PASSTHRU_IMPL_CLASS_NAME)) {\n             isPassthru = true;\n@@ -129,11 +125,12 @@ public class PatientDiscoveryDeferredResp10WebServices extends AbstractPDDeferre\n      *\n      * @see gov.hhs.fha.nhinc.configuration.jmx.WebServicesMXBean#isOutboundPassthru()\n      */\n+\n+\n     @Override\n     public boolean isOutboundPassthru() {\n         boolean isPassthru = false;\n-        EntityPatientDiscoveryDeferredResponseUnsecured entityPD = retrieveBean(\n-            EntityPatientDiscoveryDeferredResponseUnsecured.class, getEntityUnsecuredBeanName());\n+        EntityPatientDiscoveryDeferredResponseUnsecured entityPD = retrieveBean(EntityPatientDiscoveryDeferredResponseUnsecured.class, getEntityUnsecuredBeanName());\n         OutboundPatientDiscoveryDeferredResponse outboundPatientDiscovery = entityPD.getOutboundPatientDiscovery();\n         if (compareClassName(outboundPatientDiscovery, DEFAULT_OUTBOUND_PASSTHRU_IMPL_CLASS_NAME)) {\n             isPassthru = true;\n@@ -141,6 +138,7 @@ public class PatientDiscoveryDeferredResp10WebServices extends AbstractPDDeferre\n         return isPassthru;\n     }\n \n+\n     @Override\n     public serviceEnum getServiceName() {\n         return serviceName;\n@@ -151,11 +149,12 @@ public class PatientDiscoveryDeferredResp10WebServices extends AbstractPDDeferre\n      *\n      * @see gov.hhs.fha.nhinc.configuration.jmx.WebServicesMXBean#isOutboundPassthru()\n      */\n+\n+\n     @Override\n     public boolean isOutboundStandard() {\n         boolean isStandard = false;\n-        EntityPatientDiscoveryDeferredResponseUnsecured entityPD = retrieveBean(\n-            EntityPatientDiscoveryDeferredResponseUnsecured.class, getEntityUnsecuredBeanName());\n+        EntityPatientDiscoveryDeferredResponseUnsecured entityPD = retrieveBean(EntityPatientDiscoveryDeferredResponseUnsecured.class, getEntityUnsecuredBeanName());\n         OutboundPatientDiscoveryDeferredResponse outboundPatientDiscovery = entityPD.getOutboundPatientDiscovery();\n         if (compareClassName(outboundPatientDiscovery, DEFAULT_OUTBOUND_STANDARD_IMPL_CLASS_NAME)) {\n             isStandard = true;\n@@ -168,11 +167,12 @@ public class PatientDiscoveryDeferredResp10WebServices extends AbstractPDDeferre\n      *\n      * @see gov.hhs.fha.nhinc.configuration.jmx.WebServicesMXBean#isOutboundPassthru()\n      */\n+\n+\n     @Override\n     public boolean isInboundStandard() {\n         boolean isStandard = false;\n-        NhinPatientDiscoveryDeferredResponse nhinPD = retrieveBean(\n-            NhinPatientDiscoveryDeferredResponse.class, getNhinBeanName());\n+        NhinPatientDiscoveryDeferredResponse nhinPD = retrieveBean(NhinPatientDiscoveryDeferredResponse.class, getNhinBeanName());\n         InboundPatientDiscoveryDeferredResponse inboundPatientDiscovery = nhinPD.getInboundPatientDiscovery();\n         if (compareClassName(inboundPatientDiscovery, DEFAULT_INBOUND_STANDARD_IMPL_CLASS_NAME)) {\n             isStandard = true;\n@@ -180,4 +180,4 @@ public class PatientDiscoveryDeferredResp10WebServices extends AbstractPDDeferre\n         return isStandard;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 44
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "28",
                    "severity": "error",
                    "message": "'import' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/983/PatientDiscoveryDeferredResp10WebServices.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_random/983/PatientDiscoveryDeferredResp10WebServices.java\nindex 0b60e57c7bb..1329905a672 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/983/PatientDiscoveryDeferredResp10WebServices.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_random/983/PatientDiscoveryDeferredResp10WebServices.java\n@@ -25,7 +25,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n package gov.hhs.fha.nhinc.patientdiscovery.configuration.jmx;\n-\n import gov.hhs.fha.nhinc.configuration.IConfiguration.serviceEnum;\n import gov.hhs.fha.nhinc.patientdiscovery._10.gateway.ws.EntityPatientDiscoveryDeferredResponseSecured;\n import gov.hhs.fha.nhinc.patientdiscovery._10.gateway.ws.EntityPatientDiscoveryDeferredResponseUnsecured;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/983/PatientDiscoveryDeferredResp10WebServices.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/983/PatientDiscoveryDeferredResp10WebServices.java\nindex 0b60e57c7bb..b68012db923 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/983/PatientDiscoveryDeferredResp10WebServices.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/983/PatientDiscoveryDeferredResp10WebServices.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.patientdiscovery.configuration.jmx;\n \n import gov.hhs.fha.nhinc.configuration.IConfiguration.serviceEnum;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}