{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2830",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "46",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "130",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "73",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2830/BufferingIdGeneratorFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2830/BufferingIdGeneratorFactory.java\nindex 43a77a43de4..947800e5538 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2830/BufferingIdGeneratorFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2830/BufferingIdGeneratorFactory.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.id;\n \n import java.io.File;\n@@ -35,87 +36,87 @@ import org.neo4j.kernel.impl.store.id.configuration.IdTypeConfigurationProvider;\n  */\n public class BufferingIdGeneratorFactory implements IdGeneratorFactory\n {\n-    private final BufferingIdGenerator[/*IdType#ordinal as key*/] overriddenIdGenerators =\n-            new BufferingIdGenerator[IdType.values().length];\n-    private Supplier<KernelTransactionsSnapshot> boundaries;\n-    private Predicate<KernelTransactionsSnapshot> safeThreshold;\n-    private final IdGeneratorFactory delegate;\n-    private final IdTypeConfigurationProvider idTypeConfigurationProvider;\n+  private final BufferingIdGenerator[/*IdType#ordinal as key*/] overriddenIdGenerators =\n+      new BufferingIdGenerator[IdType.values().length];\n+  private Supplier<KernelTransactionsSnapshot> boundaries;\n+  private Predicate<KernelTransactionsSnapshot> safeThreshold;\n+  private final IdGeneratorFactory delegate;\n+  private final IdTypeConfigurationProvider idTypeConfigurationProvider;\n \n-    public BufferingIdGeneratorFactory( IdGeneratorFactory delegate,\n-            IdReuseEligibility eligibleForReuse, IdTypeConfigurationProvider idTypeConfigurationProvider )\n-    {\n-        this.delegate = delegate;\n-        this.idTypeConfigurationProvider = idTypeConfigurationProvider;\n-        this.safeThreshold = snapshot -> snapshot.allClosed() && eligibleForReuse.isEligible( snapshot );\n-    }\n+  public BufferingIdGeneratorFactory(IdGeneratorFactory delegate,\n+                                     IdReuseEligibility eligibleForReuse, IdTypeConfigurationProvider idTypeConfigurationProvider)\n+  {\n+    this.delegate = delegate;\n+    this.idTypeConfigurationProvider = idTypeConfigurationProvider;\n+    this.safeThreshold = snapshot -> snapshot.allClosed() && eligibleForReuse.isEligible(snapshot);\n+  }\n \n-    public void initialize( Supplier<KernelTransactionsSnapshot> transactionsSnapshotSupplier )\n-    {\n-        boundaries = transactionsSnapshotSupplier;\n-    }\n+  public void initialize(Supplier<KernelTransactionsSnapshot> transactionsSnapshotSupplier)\n+  {\n+    boundaries = transactionsSnapshotSupplier;\n+  }\n \n-    @Override\n-    public IdGenerator open( File filename, IdType idType, LongSupplier highId, long maxId )\n-    {\n-        IdTypeConfiguration typeConfiguration = idTypeConfigurationProvider.getIdTypeConfiguration( idType );\n-        return open( filename, typeConfiguration.getGrabSize(), idType, highId, maxId);\n-    }\n+  @Override\n+  public IdGenerator open(File filename, IdType idType, LongSupplier highId, long maxId)\n+  {\n+    IdTypeConfiguration typeConfiguration = idTypeConfigurationProvider.getIdTypeConfiguration(idType);\n+    return open(filename, typeConfiguration.getGrabSize(), idType, highId, maxId);\n+  }\n \n-    @Override\n-    public IdGenerator open( File filename, int grabSize, IdType idType, LongSupplier highId, long maxId )\n-    {\n-        assert boundaries != null : \"Factory needs to be initialized before usage\";\n+  @Override\n+  public IdGenerator open(File filename, int grabSize, IdType idType, LongSupplier highId, long maxId)\n+  {\n+    assert boundaries != null : \"Factory needs to be initialized before usage\";\n \n-        IdGenerator generator = delegate.open( filename, grabSize, idType, highId, maxId );\n-        IdTypeConfiguration typeConfiguration = getIdTypeConfiguration(idType);\n-        if ( typeConfiguration.allowAggressiveReuse() )\n-        {\n-            BufferingIdGenerator bufferingGenerator = new BufferingIdGenerator( generator );\n-            bufferingGenerator.initialize( boundaries, safeThreshold );\n-            overriddenIdGenerators[idType.ordinal()] = bufferingGenerator;\n-            generator = bufferingGenerator;\n-        }\n-        return generator;\n-    }\n-\n-    @Override\n-    public void create( File filename, long highId, boolean throwIfFileExists )\n+    IdGenerator generator = delegate.open(filename, grabSize, idType, highId, maxId);\n+    IdTypeConfiguration typeConfiguration = getIdTypeConfiguration(idType);\n+    if (typeConfiguration.allowAggressiveReuse())\n     {\n-        delegate.create( filename, highId, throwIfFileExists );\n+      BufferingIdGenerator bufferingGenerator = new BufferingIdGenerator(generator);\n+      bufferingGenerator.initialize(boundaries, safeThreshold);\n+      overriddenIdGenerators[idType.ordinal()] = bufferingGenerator;\n+      generator = bufferingGenerator;\n     }\n+    return generator;\n+  }\n \n-    @Override\n-    public IdGenerator get( IdType idType )\n-    {\n-        IdGenerator generator = overriddenIdGenerators[idType.ordinal()];\n-        return generator != null ? generator : delegate.get( idType );\n-    }\n+  @Override\n+  public void create(File filename, long highId, boolean throwIfFileExists)\n+  {\n+    delegate.create(filename, highId, throwIfFileExists);\n+  }\n \n-    public void maintenance()\n-    {\n-        for ( BufferingIdGenerator generator : overriddenIdGenerators )\n-        {\n-            if ( generator != null )\n-            {\n-                generator.maintenance();\n-            }\n-        }\n-    }\n+  @Override\n+  public IdGenerator get(IdType idType)\n+  {\n+    IdGenerator generator = overriddenIdGenerators[idType.ordinal()];\n+    return generator != null ? generator : delegate.get(idType);\n+  }\n \n-    public void clear()\n+  public void maintenance()\n+  {\n+    for (BufferingIdGenerator generator : overriddenIdGenerators)\n     {\n-        for ( BufferingIdGenerator generator : overriddenIdGenerators )\n-        {\n-            if ( generator != null )\n-            {\n-                generator.clear();\n-            }\n-        }\n+      if (generator != null)\n+      {\n+        generator.maintenance();\n+      }\n     }\n+  }\n \n-    private IdTypeConfiguration getIdTypeConfiguration( IdType idType )\n+  public void clear()\n+  {\n+    for (BufferingIdGenerator generator : overriddenIdGenerators)\n     {\n-        return idTypeConfigurationProvider.getIdTypeConfiguration( idType );\n+      if (generator != null)\n+      {\n+        generator.clear();\n+      }\n     }\n+  }\n+\n+  private IdTypeConfiguration getIdTypeConfiguration(IdType idType)\n+  {\n+    return idTypeConfigurationProvider.getIdTypeConfiguration(idType);\n+  }\n }\n",
            "diff_size": 88
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2830/BufferingIdGeneratorFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2830/BufferingIdGeneratorFactory.java\nindex 43a77a43de4..1fe17a514a6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2830/BufferingIdGeneratorFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2830/BufferingIdGeneratorFactory.java\n@@ -35,9 +35,9 @@ import org.neo4j.kernel.impl.store.id.configuration.IdTypeConfigurationProvider;\n  */\n public class BufferingIdGeneratorFactory implements IdGeneratorFactory\n {\n-    private final BufferingIdGenerator[/*IdType#ordinal as key*/] overriddenIdGenerators =\n-            new BufferingIdGenerator[IdType.values().length];\n-    private Supplier<KernelTransactionsSnapshot> boundaries;\n+    private final BufferingIdGenerator[/*IdType#ordinal as key*/] overriddenIdGenerators = new BufferingIdGenerator[IdType.values().length];\n+\n+private Supplier<KernelTransactionsSnapshot> boundaries;\n     private Predicate<KernelTransactionsSnapshot> safeThreshold;\n     private final IdGeneratorFactory delegate;\n     private final IdTypeConfigurationProvider idTypeConfigurationProvider;\n@@ -59,7 +59,7 @@ public class BufferingIdGeneratorFactory implements IdGeneratorFactory\n     public IdGenerator open( File filename, IdType idType, LongSupplier highId, long maxId )\n     {\n         IdTypeConfiguration typeConfiguration = idTypeConfigurationProvider.getIdTypeConfiguration( idType );\n-        return open( filename, typeConfiguration.getGrabSize(), idType, highId, maxId);\n+        return open( filename, typeConfiguration.getGrabSize(), idType, highId, maxId );\n     }\n \n     @Override\n@@ -76,7 +76,8 @@ public class BufferingIdGeneratorFactory implements IdGeneratorFactory\n             overriddenIdGenerators[idType.ordinal()] = bufferingGenerator;\n             generator = bufferingGenerator;\n         }\n-        return generator;\n+\n+return generator;\n     }\n \n     @Override\n@@ -118,4 +119,4 @@ public class BufferingIdGeneratorFactory implements IdGeneratorFactory\n     {\n         return idTypeConfigurationProvider.getIdTypeConfiguration( idType );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}