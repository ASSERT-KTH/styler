{
    "project_name": "wso2-attic-commons",
    "error_id": "275",
    "information": {
        "errors": [
            {
                "line": "151",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 123).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\t * Retrieves the base URI that the BPEL Process execution contextis running relative to.\n\t * \n\t * @return URI - the URI representing the absolute physical file path location that this process is defined within.\n\t */\n\tURI getBaseResourceURI();\n}",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "151",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/275/CompilerContext.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/275/CompilerContext.java\nindex af54bd19b87..3721137a721 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/275/CompilerContext.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/275/CompilerContext.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.ode.bpel.compiler.v2;\n \n import java.net.URI;\n@@ -50,105 +51,106 @@ import org.apache.ode.utils.NSContext;\n  */\n public interface CompilerContext {\n \n-    OExpression constantExpr(boolean value);\n+  OExpression constantExpr(boolean value);\n+\n+  OExpression compileJoinCondition(Expression expr)\n+    throws CompilationException;\n+\n+  OExpression compileExpr(Expression expr)\n+    throws CompilationException;\n+\n+  OLValueExpression compileLValueExpr(Expression expr)\n+    throws CompilationException;\n \n-    OExpression compileJoinCondition(Expression expr)\n-            throws CompilationException;\n+  /**\n+   * BPEL 1.1 legacy.\n+   *\n+   * @param locationstr\n+   * @param nsContext\n+   * @return\n+   * @throws CompilationException\n+   */\n+  OExpression compileExpr(String locationstr, NSContext nsContext)\n+    throws CompilationException;\n \n-    OExpression compileExpr(Expression expr)\n-            throws CompilationException;\n+  OXslSheet compileXslt(String docStrUri)\n+    throws CompilationException;\n \n-    OLValueExpression compileLValueExpr(Expression expr)\n-            throws CompilationException;\n+  OXsdTypeVarType resolveXsdType(QName typeName)\n+    throws CompilationException;\n \n-    /**\n-     * BPEL 1.1 legacy. \n-     * @param locationstr\n-     * @param nsContext\n-     * @return\n-     * @throws CompilationException\n-     */\n-    OExpression compileExpr(String locationstr, NSContext nsContext)\n-            throws CompilationException;\n+  OProcess.OProperty resolveProperty(QName name)\n+    throws CompilationException;\n \n-    OXslSheet compileXslt(String docStrUri)\n-            throws CompilationException;\n+  OScope.Variable resolveVariable(String name)\n+    throws CompilationException;\n \n-    OXsdTypeVarType resolveXsdType(QName typeName)\n-            throws CompilationException;\n+  List<OScope.Variable> getAccessibleVariables();\n \n-    OProcess.OProperty resolveProperty(QName name)\n-            throws CompilationException;\n+  OScope.Variable resolveMessageVariable(String inputVar)\n+    throws CompilationException;\n \n-    OScope.Variable resolveVariable(String name)\n-            throws CompilationException;\n+  OScope.Variable resolveMessageVariable(String inputVar, QName messageType)\n+    throws CompilationException;\n \n-    List<OScope.Variable> getAccessibleVariables();\n+  OMessageVarType.Part resolvePart(OScope.Variable variable, String partname)\n+    throws CompilationException;\n \n-    OScope.Variable resolveMessageVariable(String inputVar)\n-            throws CompilationException;\n+  OMessageVarType.Part resolveHeaderPart(OScope.Variable variable, String partname)\n+    throws CompilationException;\n \n-    OScope.Variable resolveMessageVariable(String inputVar, QName messageType)\n-            throws CompilationException;\n+  OActivity compile(Activity child)\n+    throws CompilationException;\n \n-    OMessageVarType.Part resolvePart(OScope.Variable variable, String partname)\n-            throws CompilationException;\n+  OScope compileSLC(ScopeLikeActivity child, Variable[] variables);\n \n-    OMessageVarType.Part resolveHeaderPart(OScope.Variable variable, String partname)\n-            throws CompilationException;\n+  OPartnerLink resolvePartnerLink(String name)\n+    throws CompilationException;\n \n-    OActivity compile(Activity child)\n-            throws CompilationException;\n+  Operation resolvePartnerRoleOperation(OPartnerLink partnerLink, String operationName)\n+    throws CompilationException;\n \n-    OScope compileSLC(ScopeLikeActivity child, Variable[] variables);\n+  Operation resolveMyRoleOperation(OPartnerLink partnerLink, String operationName)\n+    throws CompilationException;\n \n-    OPartnerLink resolvePartnerLink(String name)\n-            throws CompilationException;\n+  OProcess.OPropertyAlias resolvePropertyAlias(OScope.Variable variable, QName property)\n+    throws CompilationException;\n \n-    Operation resolvePartnerRoleOperation(OPartnerLink partnerLink, String operationName)\n-            throws CompilationException;\n+  void recoveredFromError(SourceLocation where, CompilationException bce)\n+    throws CompilationException;\n \n-    Operation resolveMyRoleOperation(OPartnerLink partnerLink, String operationName)\n-            throws CompilationException;\n+  OLink resolveLink(String linkName)\n+    throws CompilationException;\n \n-    OProcess.OPropertyAlias resolvePropertyAlias(OScope.Variable variable, QName property)\n-            throws CompilationException;\n+  OScope resolveCompensatableScope(String scopeToCompensate)\n+    throws CompilationException;\n \n-    void recoveredFromError(SourceLocation where, CompilationException bce)\n-            throws CompilationException;\n+  OProcess getOProcess()\n+    throws CompilationException;\n \n-    OLink resolveLink(String linkName)\n-            throws CompilationException;\n+  OScope.CorrelationSet resolveCorrelationSet(String csetName)\n+    throws CompilationException;\n \n-    OScope resolveCompensatableScope(String scopeToCompensate)\n-            throws CompilationException;\n+  String getSourceLocation();\n \n-    OProcess getOProcess()\n-            throws CompilationException;\n+  boolean isPartnerLinkAssigned(String plink);\n \n-    OScope.CorrelationSet resolveCorrelationSet(String csetName)\n-            throws CompilationException;\n+  List<OActivity> getActivityStack();\n \n-    String getSourceLocation();\n+  Map<URI, Source> getSchemaSources();\n \n-    boolean isPartnerLinkAssigned(String plink);\n+  OActivity getCurrent();\n \n-    List<OActivity> getActivityStack();\n+  boolean isExtensionDeclared(String namespace);\n \n-    Map<URI, Source> getSchemaSources();\n-    \n-    OActivity getCurrent();\n+  //void setExtensionValidators(Map<QName, ExtensionValidator> extensionValidators);\n \n-    boolean isExtensionDeclared(String namespace);\n-    \n-    //void setExtensionValidators(Map<QName, ExtensionValidator> extensionValidators);\n-    \n-    ExtensionValidator getExtensionValidator(QName extensionElementName);\n+  ExtensionValidator getExtensionValidator(QName extensionElementName);\n \n-\t/**\n-\t * Retrieves the base URI that the BPEL Process execution contextis running relative to.\n-\t * \n-\t * @return URI - the URI representing the absolute physical file path location that this process is defined within.\n-\t */\n-\tURI getBaseResourceURI();\n+  /**\n+   * Retrieves the base URI that the BPEL Process execution contextis running relative to.\n+   *\n+   * @return URI - the URI representing the absolute physical file path location that this process is defined within.\n+   */\n+  URI getBaseResourceURI();\n }\n",
            "diff_size": 91
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "151",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/275/CompilerContext.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/275/CompilerContext.java\nindex af54bd19b87..ff4776dfd0b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/275/CompilerContext.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/275/CompilerContext.java\n@@ -145,10 +145,10 @@ public interface CompilerContext {\n     \n     ExtensionValidator getExtensionValidator(QName extensionElementName);\n \n-\t/**\n+/**\n \t * Retrieves the base URI that the BPEL Process execution contextis running relative to.\n \t * \n \t * @return URI - the URI representing the absolute physical file path location that this process is defined within.\n \t */\n \tURI getBaseResourceURI();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "151",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "151",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}