{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3066",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "60",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "83",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3066/SchemaStore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3066/SchemaStore.java\nindex 4e60e78e0c0..0f4ba18101f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3066/SchemaStore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3066/SchemaStore.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store;\n \n import java.io.File;\n@@ -44,54 +45,54 @@ import static org.neo4j.kernel.impl.store.record.RecordLoad.CHECK;\n \n public class SchemaStore extends AbstractDynamicStore implements Iterable<SchemaRule>\n {\n-    // store version, each store ends with this string (byte encoded)\n-    public static final String TYPE_DESCRIPTOR = \"SchemaStore\";\n-    public static final int BLOCK_SIZE = 56;\n+  // store version, each store ends with this string (byte encoded)\n+  public static final String TYPE_DESCRIPTOR = \"SchemaStore\";\n+  public static final int BLOCK_SIZE = 56;\n \n-    public SchemaStore(\n-            File fileName,\n-            Config conf,\n-            IdType idType,\n-            IdGeneratorFactory idGeneratorFactory,\n-            PageCache pageCache,\n-            LogProvider logProvider,\n-            RecordFormats recordFormats,\n-            OpenOption... openOptions )\n-    {\n-        super( fileName, conf, idType, idGeneratorFactory, pageCache, logProvider, TYPE_DESCRIPTOR, BLOCK_SIZE,\n-                recordFormats.dynamic(), recordFormats.storeVersion(), openOptions );\n-    }\n+  public SchemaStore(\n+      File fileName,\n+      Config conf,\n+      IdType idType,\n+      IdGeneratorFactory idGeneratorFactory,\n+      PageCache pageCache,\n+      LogProvider logProvider,\n+      RecordFormats recordFormats,\n+      OpenOption... openOptions)\n+  {\n+    super(fileName, conf, idType, idGeneratorFactory, pageCache, logProvider, TYPE_DESCRIPTOR, BLOCK_SIZE,\n+        recordFormats.dynamic(), recordFormats.storeVersion(), openOptions);\n+  }\n \n-    @Override\n-    public <FAILURE extends Exception> void accept( Processor<FAILURE> processor, DynamicRecord record ) throws FAILURE\n-    {\n-        processor.processSchema( this, record );\n-    }\n+  @Override\n+  public <FAILURE extends Exception> void accept(Processor<FAILURE> processor, DynamicRecord record) throws FAILURE\n+  {\n+    processor.processSchema(this, record);\n+  }\n \n-    public List<DynamicRecord> allocateFrom( SchemaRule rule )\n-    {\n-        List<DynamicRecord> records = new ArrayList<>();\n-        DynamicRecord record = getRecord( rule.getId(), nextRecord(), CHECK );\n-        DynamicRecordAllocator recordAllocator = new ReusableRecordsCompositeAllocator( singleton( record ), this );\n-        allocateRecordsFromBytes( records, rule.serialize(), recordAllocator );\n-        return records;\n-    }\n+  public List<DynamicRecord> allocateFrom(SchemaRule rule)\n+  {\n+    List<DynamicRecord> records = new ArrayList<>();\n+    DynamicRecord record = getRecord(rule.getId(), nextRecord(), CHECK);\n+    DynamicRecordAllocator recordAllocator = new ReusableRecordsCompositeAllocator(singleton(record), this);\n+    allocateRecordsFromBytes(records, rule.serialize(), recordAllocator);\n+    return records;\n+  }\n \n-    public Iterator<SchemaRule> loadAllSchemaRules()\n-    {\n-        return new SchemaStorage( this ).loadAllSchemaRules();\n-    }\n+  public Iterator<SchemaRule> loadAllSchemaRules()\n+  {\n+    return new SchemaStorage(this).loadAllSchemaRules();\n+  }\n \n-    @Override\n-    public Iterator<SchemaRule> iterator()\n-    {\n-        return loadAllSchemaRules();\n-    }\n+  @Override\n+  public Iterator<SchemaRule> iterator()\n+  {\n+    return loadAllSchemaRules();\n+  }\n \n-    static SchemaRule readSchemaRule( long id, Collection<DynamicRecord> records, byte[] buffer )\n-            throws MalformedSchemaRuleException\n-    {\n-        ByteBuffer scratchBuffer = concatData( records, buffer );\n-        return SchemaRuleSerialization.deserialize( id, scratchBuffer );\n-    }\n+  static SchemaRule readSchemaRule(long id, Collection<DynamicRecord> records, byte[] buffer)\n+      throws MalformedSchemaRuleException\n+  {\n+    ByteBuffer scratchBuffer = concatData(records, buffer);\n+    return SchemaRuleSerialization.deserialize(id, scratchBuffer);\n+  }\n }\n",
            "diff_size": 45
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3066/SchemaStore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3066/SchemaStore.java\nindex 4e60e78e0c0..5e1f21fc5ca 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3066/SchemaStore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3066/SchemaStore.java\n@@ -46,10 +46,10 @@ public class SchemaStore extends AbstractDynamicStore implements Iterable<Schema\n {\n     // store version, each store ends with this string (byte encoded)\n     public static final String TYPE_DESCRIPTOR = \"SchemaStore\";\n-    public static final int BLOCK_SIZE = 56;\n \n-    public SchemaStore(\n-            File fileName,\n+public static final int BLOCK_SIZE = 56;\n+\n+    public SchemaStore( File fileName,\n             Config conf,\n             IdType idType,\n             IdGeneratorFactory idGeneratorFactory,\n@@ -88,10 +88,9 @@ public class SchemaStore extends AbstractDynamicStore implements Iterable<Schema\n         return loadAllSchemaRules();\n     }\n \n-    static SchemaRule readSchemaRule( long id, Collection<DynamicRecord> records, byte[] buffer )\n-            throws MalformedSchemaRuleException\n-    {\n+    static SchemaRule readSchemaRule( long id, Collection<DynamicRecord> records, byte[] buffer ) throws MalformedSchemaRuleException\n+{\n         ByteBuffer scratchBuffer = concatData( records, buffer );\n         return SchemaRuleSerialization.deserialize( id, scratchBuffer );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}