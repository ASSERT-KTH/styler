{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1535",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "84",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "221",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "245",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "278",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "302",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "302",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "312",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "317",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "326",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "326",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "365",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "365",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "370",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "370",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "377",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "378",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "380",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "380",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "397",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "397",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "407",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "407",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "419",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "419",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "427",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "427",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "434",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "434",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "437",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "437",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "440",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "440",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "449",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "449",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "451",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "451",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1535/NetworkSender.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1535/NetworkSender.java\nindex bdc9e94069e..7d6842f5f54 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1535/NetworkSender.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1535/NetworkSender.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.cluster.com;\n \n import org.jboss.netty.bootstrap.ClientBootstrap;\n@@ -75,389 +76,384 @@ import static org.neo4j.helpers.NamedThreadFactory.daemon;\n  * in the cluster.\n  */\n public class NetworkSender\n-        implements MessageSender, Lifecycle\n+    implements MessageSender, Lifecycle\n {\n-    public interface Monitor\n-        extends NamedThreadFactory.Monitor\n+  public interface Monitor\n+      extends NamedThreadFactory.Monitor\n+  {\n+    void queuedMessage(Message message);\n+\n+    void sentMessage(Message message);\n+  }\n+\n+  public interface Configuration\n+  {\n+    int defaultPort(); // This is the default port to try to connect to\n+\n+    int port(); // This is the port we are listening on\n+  }\n+\n+  public interface NetworkChannelsListener\n+  {\n+    void channelOpened(URI to);\n+\n+    void channelClosed(URI to);\n+  }\n+\n+  private ChannelGroup channels;\n+\n+  // Sending\n+  // One executor for each receiving instance, so that one blocking instance cannot block others receiving messages\n+  private final Map<URI, ExecutorService> senderExecutors = new HashMap<>();\n+  private final Set<URI> failedInstances = new HashSet<>(); // Keeps track of what instances we have failed to open\n+  // connections to\n+  private ClientBootstrap clientBootstrap;\n+\n+  private final Monitor monitor;\n+  private final Configuration config;\n+  private final NetworkReceiver receiver;\n+  private final Log msgLog;\n+  private URI me;\n+\n+  private final Map<URI, Channel> connections = new ConcurrentHashMap<>();\n+  private final Listeners<NetworkChannelsListener> listeners = new Listeners<>();\n+\n+  private volatile boolean paused;\n+\n+  public NetworkSender(Monitor monitor, Configuration config, NetworkReceiver receiver, LogProvider logProvider)\n+  {\n+    this.monitor = monitor;\n+    this.config = config;\n+    this.receiver = receiver;\n+    this.msgLog = logProvider.getLog(getClass());\n+    me = URI.create(CLUSTER_SCHEME + \"://0.0.0.0:\" + config.port());\n+    receiver.addNetworkChannelsListener(new NetworkReceiver.NetworkChannelsListener()\n     {\n-        void queuedMessage( Message message );\n-\n-        void sentMessage( Message message );\n-    }\n-\n-    public interface Configuration\n+      @Override\n+      public void listeningAt(URI me)\n+      {\n+        NetworkSender.this.me = me;\n+      }\n+\n+      @Override\n+      public void channelOpened(URI to)\n+      {\n+      }\n+\n+      @Override\n+      public void channelClosed(URI to)\n+      {\n+      }\n+    });\n+  }\n+\n+  @Override\n+  public void init()\n+  {\n+    ThreadRenamingRunnable.setThreadNameDeterminer(ThreadNameDeterminer.CURRENT);\n+  }\n+\n+  @Override\n+  public void start()\n+  {\n+    channels = new DefaultChannelGroup();\n+\n+    // Start client bootstrap\n+    clientBootstrap = new ClientBootstrap(new NioClientSocketChannelFactory(\n+        Executors.newSingleThreadExecutor(daemon(\"Cluster client boss\", monitor)),\n+        Executors.newFixedThreadPool(2, daemon(\"Cluster client worker\", monitor)), 2));\n+    clientBootstrap.setOption(\"tcpNoDelay\", Boolean.TRUE);\n+    clientBootstrap.setPipelineFactory(new NetworkNodePipelineFactory());\n+\n+    msgLog.debug(\"Started NetworkSender for \" + toString(config));\n+  }\n+\n+  private String toString(Configuration config)\n+  {\n+    return \"defaultPort:\" + config.defaultPort() + \", port:\" + config.port();\n+  }\n+\n+  @Override\n+  public void stop()\n+      throws Throwable\n+  {\n+    msgLog.debug(\"Shutting down NetworkSender\");\n+    for (ExecutorService executorService : senderExecutors.values())\n     {\n-        int defaultPort(); // This is the default port to try to connect to\n-\n-        int port(); // This is the port we are listening on\n+      executorService.shutdown();\n     }\n-\n-    public interface NetworkChannelsListener\n+    long totalWaitTime = 0;\n+    long maxWaitTime = SECONDS.toMillis(5);\n+    for (Map.Entry<URI, ExecutorService> entry : senderExecutors.entrySet())\n     {\n-        void channelOpened( URI to );\n-\n-        void channelClosed( URI to );\n+      URI targetAddress = entry.getKey();\n+      ExecutorService executorService = entry.getValue();\n+\n+      long start = currentTimeMillis();\n+      if (!executorService.awaitTermination(maxWaitTime - totalWaitTime, MILLISECONDS))\n+      {\n+        msgLog.warn(\"Could not shut down send executor towards: \" + targetAddress);\n+        break;\n+      }\n+      totalWaitTime += currentTimeMillis() - start;\n     }\n-\n-    private ChannelGroup channels;\n-\n-    // Sending\n-    // One executor for each receiving instance, so that one blocking instance cannot block others receiving messages\n-    private final Map<URI, ExecutorService> senderExecutors = new HashMap<>();\n-    private final Set<URI> failedInstances = new HashSet<>(); // Keeps track of what instances we have failed to open\n-    // connections to\n-    private ClientBootstrap clientBootstrap;\n-\n-    private final Monitor monitor;\n-    private final Configuration config;\n-    private final NetworkReceiver receiver;\n-    private final Log msgLog;\n-    private URI me;\n-\n-    private final Map<URI, Channel> connections = new ConcurrentHashMap<>();\n-    private final Listeners<NetworkChannelsListener> listeners = new Listeners<>();\n-\n-    private volatile boolean paused;\n-\n-    public NetworkSender( Monitor monitor, Configuration config, NetworkReceiver receiver, LogProvider logProvider )\n+    senderExecutors.clear();\n+\n+    channels.close().awaitUninterruptibly();\n+    clientBootstrap.releaseExternalResources();\n+    msgLog.debug(\"Shutting down NetworkSender for \" + toString(config) + \" complete\");\n+  }\n+\n+  @Override\n+  public void shutdown()\n+  {\n+  }\n+\n+  // MessageSender implementation\n+  @Override\n+  public void process(final List<Message<? extends MessageType>> messages)\n+  {\n+    for (Message<? extends MessageType> message : messages)\n     {\n-        this.monitor = monitor;\n-        this.config = config;\n-        this.receiver = receiver;\n-        this.msgLog = logProvider.getLog( getClass() );\n-        me = URI.create( CLUSTER_SCHEME + \"://0.0.0.0:\" + config.port() );\n-        receiver.addNetworkChannelsListener( new NetworkReceiver.NetworkChannelsListener()\n-        {\n-            @Override\n-            public void listeningAt( URI me )\n-            {\n-                NetworkSender.this.me = me;\n-            }\n-\n-            @Override\n-            public void channelOpened( URI to )\n-            {\n-            }\n-\n-            @Override\n-            public void channelClosed( URI to )\n-            {\n-            }\n-        } );\n+      try\n+      {\n+        process(message);\n+      } catch (Exception e)\n+      {\n+        msgLog.warn(\"Error sending message \" + message + \"(\" + e.getMessage() + \")\");\n+      }\n     }\n+  }\n \n-    @Override\n-    public void init()\n+  @Override\n+  public boolean process(Message<? extends MessageType> message)\n+  {\n+    if (!paused)\n     {\n-        ThreadRenamingRunnable.setThreadNameDeterminer( ThreadNameDeterminer.CURRENT );\n+      if (message.hasHeader(Message.HEADER_TO))\n+      {\n+        send(message);\n+      } else\n+      {\n+        // Internal message\n+        receiver.receive(message);\n+      }\n     }\n+    return true;\n+  }\n \n-    @Override\n-    public void start()\n-    {\n-        channels = new DefaultChannelGroup();\n+  public void setPaused(boolean paused)\n+  {\n+    this.paused = paused;\n+  }\n \n-        // Start client bootstrap\n-        clientBootstrap = new ClientBootstrap( new NioClientSocketChannelFactory(\n-                Executors.newSingleThreadExecutor( daemon( \"Cluster client boss\", monitor ) ),\n-                Executors.newFixedThreadPool( 2, daemon( \"Cluster client worker\", monitor ) ), 2 ) );\n-        clientBootstrap.setOption( \"tcpNoDelay\", Boolean.TRUE );\n-        clientBootstrap.setPipelineFactory( new NetworkNodePipelineFactory() );\n+  private URI getURI(InetSocketAddress address) throws URISyntaxException\n+  {\n+    return new URI(CLUSTER_SCHEME + \":/\" + address); // Socket.toString() already prepends a /\n+  }\n \n-        msgLog.debug( \"Started NetworkSender for \" + toString( config ) );\n-    }\n+  private synchronized void send(final Message message)\n+  {\n+    monitor.queuedMessage(message);\n \n-    private String toString( Configuration config )\n-    {\n-        return \"defaultPort:\" + config.defaultPort() + \", port:\" + config.port();\n-    }\n+    final URI to = URI.create(message.getHeader(Message.HEADER_TO));\n \n-    @Override\n-    public void stop()\n-            throws Throwable\n+    ExecutorService senderExecutor = senderExecutors.computeIfAbsent(to, t -> Executors\n+        .newSingleThreadExecutor(new NamedThreadFactory(\"Cluster Sender \" + t.toASCIIString(), monitor)));\n+\n+    senderExecutor.submit(() ->\n     {\n-        msgLog.debug( \"Shutting down NetworkSender\" );\n-        for ( ExecutorService executorService : senderExecutors.values() )\n+      Channel channel = getChannel(to);\n+\n+      try\n+      {\n+        if (channel == null)\n         {\n-            executorService.shutdown();\n+          channel = openChannel(to);\n+          openedChannel(to, channel);\n+\n+          // Instance could be connected to, remove any marker of it being failed\n+          failedInstances.remove(to);\n         }\n-        long totalWaitTime = 0;\n-        long maxWaitTime = SECONDS.toMillis( 5 );\n-        for ( Map.Entry<URI, ExecutorService> entry : senderExecutors.entrySet() )\n+      } catch (Exception e)\n+      {\n+        // Only print out failure message on first fail\n+        if (!failedInstances.contains(to))\n         {\n-            URI targetAddress = entry.getKey();\n-            ExecutorService executorService = entry.getValue();\n-\n-            long start = currentTimeMillis();\n-            if ( !executorService.awaitTermination( maxWaitTime - totalWaitTime, MILLISECONDS ) )\n-            {\n-                msgLog.warn( \"Could not shut down send executor towards: \" + targetAddress );\n-                break;\n-            }\n-            totalWaitTime += currentTimeMillis() - start;\n+          msgLog.warn(e.getMessage());\n+          failedInstances.add(to);\n         }\n-        senderExecutors.clear();\n \n-        channels.close().awaitUninterruptibly();\n-        clientBootstrap.releaseExternalResources();\n-        msgLog.debug( \"Shutting down NetworkSender for \" + toString( config ) + \" complete\" );\n-    }\n+        return;\n+      }\n \n-    @Override\n-    public void shutdown()\n-    {\n-    }\n+      try\n+      {\n+        // Set HEADER_FROM header\n+        message.setHeader(Message.HEADER_FROM, me.toASCIIString());\n \n-    // MessageSender implementation\n-    @Override\n-    public void process( final List<Message<? extends MessageType>> messages )\n-    {\n-        for ( Message<? extends MessageType> message : messages )\n-        {\n-            try\n-            {\n-                process( message );\n-            }\n-            catch ( Exception e )\n-            {\n-                msgLog.warn( \"Error sending message \" + message + \"(\" + e.getMessage() + \")\" );\n-            }\n-        }\n-    }\n+        msgLog.debug(\"Sending to \" + to + \": \" + message);\n \n-    @Override\n-    public boolean process( Message<? extends MessageType> message )\n-    {\n-        if ( !paused )\n+        ChannelFuture future = channel.write(message);\n+        future.addListener(future1 ->\n         {\n-            if ( message.hasHeader( Message.HEADER_TO ) )\n-            {\n-                send( message );\n-            }\n-            else\n-            {\n-                // Internal message\n-                receiver.receive( message );\n-            }\n+          monitor.sentMessage(message);\n+\n+          if (!future1.isSuccess())\n+          {\n+            msgLog.debug(\"Unable to write \" + message + \" to \" + future1.getChannel(),\n+                future1.getCause());\n+            closedChannel(future1.getChannel());\n+\n+            // Try again\n+            send(message);\n+          }\n+        });\n+      } catch (Exception e)\n+      {\n+        if (Exceptions.contains(e, ClosedChannelException.class))\n+        {\n+          msgLog.warn(\"Could not send message, because the connection has been closed.\");\n+        } else\n+        {\n+          msgLog.warn(\"Could not send message\", e);\n         }\n-        return true;\n-    }\n-\n-    public void setPaused( boolean paused )\n+        channel.close();\n+      }\n+    });\n+  }\n+\n+  protected void openedChannel(URI uri, Channel ctxChannel)\n+  {\n+    connections.put(uri, ctxChannel);\n+\n+    listeners.notify(listener -> listener.channelOpened(uri));\n+  }\n+\n+  protected void closedChannel(Channel channelClosed)\n+  {\n+    /*\n+     * Netty channels do not have the remote address set when closed (technically, when not connected). So\n+     * we need to do a reverse lookup\n+     */\n+    URI to = null;\n+    for (Map.Entry<URI, Channel> uriChannelEntry : connections.entrySet())\n     {\n-        this.paused = paused;\n+      if (uriChannelEntry.getValue().equals(channelClosed))\n+      {\n+        to = uriChannelEntry.getKey();\n+        break;\n+      }\n     }\n \n-    private URI getURI( InetSocketAddress address ) throws URISyntaxException\n+    if (to == null)\n     {\n-        return new URI( CLUSTER_SCHEME + \":/\" + address ); // Socket.toString() already prepends a /\n+      /*\n+       * This is normal to happen if a channel fails to open - channelOpened() will not be called and the\n+       * association with the URI will not exist, but channelClosed() will be called anyway.\n+       */\n+      return;\n     }\n \n-    private synchronized void send( final Message message )\n-    {\n-        monitor.queuedMessage( message );\n+    connections.remove(to);\n \n-        final URI to = URI.create( message.getHeader( Message.HEADER_TO ) );\n+    URI uri = to;\n \n-        ExecutorService senderExecutor = senderExecutors.computeIfAbsent( to, t -> Executors\n-                .newSingleThreadExecutor( new NamedThreadFactory( \"Cluster Sender \" + t.toASCIIString(), monitor ) ) );\n+    listeners.notify(listener -> listener.channelClosed(uri));\n+  }\n \n-        senderExecutor.submit( () ->\n-        {\n-            Channel channel = getChannel( to );\n-\n-            try\n-            {\n-                if ( channel == null )\n-                {\n-                    channel = openChannel( to );\n-                    openedChannel( to, channel );\n-\n-                    // Instance could be connected to, remove any marker of it being failed\n-                    failedInstances.remove( to );\n-                }\n-            }\n-            catch ( Exception e )\n-            {\n-                // Only print out failure message on first fail\n-                if ( !failedInstances.contains( to ) )\n-                {\n-                    msgLog.warn( e.getMessage() );\n-                    failedInstances.add( to );\n-                }\n-\n-                return;\n-            }\n-\n-            try\n-            {\n-                // Set HEADER_FROM header\n-                message.setHeader( Message.HEADER_FROM, me.toASCIIString() );\n-\n-                msgLog.debug( \"Sending to \" + to + \": \" + message );\n-\n-                ChannelFuture future = channel.write( message );\n-                future.addListener( future1 ->\n-                {\n-                    monitor.sentMessage( message );\n-\n-                    if ( !future1.isSuccess() )\n-                    {\n-                        msgLog.debug( \"Unable to write \" + message + \" to \" + future1.getChannel(),\n-                                future1.getCause() );\n-                        closedChannel( future1.getChannel() );\n-\n-                        // Try again\n-                        send( message );\n-                    }\n-                } );\n-            }\n-            catch ( Exception e )\n-            {\n-                if ( Exceptions.contains( e, ClosedChannelException.class ) )\n-                {\n-                    msgLog.warn( \"Could not send message, because the connection has been closed.\" );\n-                }\n-                else\n-                {\n-                    msgLog.warn( \"Could not send message\", e );\n-                }\n-                channel.close();\n-            }\n-        } );\n-    }\n+  public Channel getChannel(URI uri)\n+  {\n+    return connections.get(uri);\n+  }\n \n-    protected void openedChannel( URI uri, Channel ctxChannel )\n-    {\n-        connections.put( uri, ctxChannel );\n+  public void addNetworkChannelsListener(NetworkChannelsListener listener)\n+  {\n+    listeners.add(listener);\n+  }\n \n-        listeners.notify( listener -> listener.channelOpened( uri ) );\n-    }\n+  private Channel openChannel(URI clusterUri)\n+  {\n+    SocketAddress destination = new InetSocketAddress(clusterUri.getHost(),\n+        clusterUri.getPort() == -1 ? config.defaultPort() : clusterUri.getPort());\n+    // We must specify the origin address in case the server has multiple IPs per interface\n+    SocketAddress origin = new InetSocketAddress(me.getHost(), 0);\n \n-    protected void closedChannel( Channel channelClosed )\n-    {\n-        /*\n-         * Netty channels do not have the remote address set when closed (technically, when not connected). So\n-         * we need to do a reverse lookup\n-         */\n-        URI to = null;\n-        for ( Map.Entry<URI, Channel> uriChannelEntry : connections.entrySet() )\n-        {\n-            if ( uriChannelEntry.getValue().equals( channelClosed ) )\n-            {\n-                to = uriChannelEntry.getKey();\n-                break;\n-            }\n-        }\n+    msgLog.info(\"Attempting to connect from \" + origin + \" to \" + destination);\n+    ChannelFuture channelFuture = clientBootstrap.connect(destination, origin);\n+    channelFuture.awaitUninterruptibly(5, TimeUnit.SECONDS);\n \n-        if ( to == null )\n-        {\n-            /*\n-             * This is normal to happen if a channel fails to open - channelOpened() will not be called and the\n-             * association with the URI will not exist, but channelClosed() will be called anyway.\n-             */\n-            return;\n-        }\n+    if (channelFuture.isSuccess())\n+    {\n+      Channel channel = channelFuture.getChannel();\n+      msgLog.info(\"Connected from \" + channel.getLocalAddress() + \" to \" + channel.getRemoteAddress());\n+      return channel;\n \n-        connections.remove( to );\n+    }\n \n-        URI uri = to;\n+    Throwable cause = channelFuture.getCause();\n+    msgLog.info(\"Failed to connect to \" + destination + \" due to: \" + cause);\n \n-        listeners.notify( listener -> listener.channelClosed( uri ) );\n-    }\n+    throw new ChannelOpenFailedException(cause);\n+  }\n \n-    public Channel getChannel( URI uri )\n+  private class NetworkNodePipelineFactory\n+      implements ChannelPipelineFactory\n+  {\n+    @Override\n+    public ChannelPipeline getPipeline()\n     {\n-        return connections.get( uri );\n+      ChannelPipeline pipeline = Channels.pipeline();\n+      pipeline.addLast(\"frameEncoder\", new ObjectEncoder(2048));\n+      pipeline.addLast(\"sender\", new NetworkMessageSender());\n+      return pipeline;\n     }\n+  }\n+\n+  private class NetworkMessageSender\n+      extends SimpleChannelHandler\n+  {\n+    private Throwable lastException;\n \n-    public void addNetworkChannelsListener( NetworkChannelsListener listener )\n+    @Override\n+    public void channelConnected(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception\n     {\n-        listeners.add( listener );\n+      Channel ctxChannel = ctx.getChannel();\n+      openedChannel(getURI((InetSocketAddress) ctxChannel.getRemoteAddress()), ctxChannel);\n+      channels.add(ctxChannel);\n     }\n \n-    private Channel openChannel( URI clusterUri )\n+    @Override\n+    public void channelClosed(ChannelHandlerContext ctx, ChannelStateEvent e)\n     {\n-        SocketAddress destination = new InetSocketAddress( clusterUri.getHost(),\n-                clusterUri.getPort() == -1 ? config.defaultPort() : clusterUri.getPort() );\n-        // We must specify the origin address in case the server has multiple IPs per interface\n-        SocketAddress origin = new InetSocketAddress( me.getHost(), 0 );\n-\n-        msgLog.info( \"Attempting to connect from \" + origin + \" to \" + destination );\n-        ChannelFuture channelFuture = clientBootstrap.connect( destination, origin );\n-        channelFuture.awaitUninterruptibly( 5, TimeUnit.SECONDS );\n-\n-        if ( channelFuture.isSuccess() )\n-        {\n-            Channel channel = channelFuture.getChannel();\n-            msgLog.info( \"Connected from \" + channel.getLocalAddress() + \" to \" + channel.getRemoteAddress() );\n-            return channel;\n-\n-        }\n-\n-        Throwable cause = channelFuture.getCause();\n-        msgLog.info( \"Failed to connect to \" + destination + \" due to: \" + cause );\n-\n-        throw new ChannelOpenFailedException( cause );\n+      closedChannel(ctx.getChannel());\n+      channels.remove(ctx.getChannel());\n     }\n \n-    private class NetworkNodePipelineFactory\n-            implements ChannelPipelineFactory\n+    @Override\n+    public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e)\n     {\n-        @Override\n-        public ChannelPipeline getPipeline()\n+      Throwable cause = e.getCause();\n+      if (!(cause instanceof ConnectException || cause instanceof RejectedExecutionException))\n+      {\n+        // If we keep getting the same exception, only output the first one\n+        if (lastException != null && !lastException.getClass().equals(cause.getClass()))\n         {\n-            ChannelPipeline pipeline = Channels.pipeline();\n-            pipeline.addLast( \"frameEncoder\", new ObjectEncoder( 2048 ) );\n-            pipeline.addLast( \"sender\", new NetworkMessageSender() );\n-            return pipeline;\n+          msgLog.error(\"Receive exception:\", cause);\n+          lastException = cause;\n         }\n+      }\n     }\n \n-    private class NetworkMessageSender\n-            extends SimpleChannelHandler\n+    @Override\n+    public void writeComplete(ChannelHandlerContext ctx, WriteCompletionEvent e) throws Exception\n     {\n-        private Throwable lastException;\n-\n-        @Override\n-        public void channelConnected( ChannelHandlerContext ctx, ChannelStateEvent e ) throws Exception\n-        {\n-            Channel ctxChannel = ctx.getChannel();\n-            openedChannel( getURI( (InetSocketAddress) ctxChannel.getRemoteAddress() ), ctxChannel );\n-            channels.add( ctxChannel );\n-        }\n-\n-        @Override\n-        public void channelClosed( ChannelHandlerContext ctx, ChannelStateEvent e )\n-        {\n-            closedChannel( ctx.getChannel() );\n-            channels.remove( ctx.getChannel() );\n-        }\n-\n-        @Override\n-        public void exceptionCaught( ChannelHandlerContext ctx, ExceptionEvent e )\n-        {\n-            Throwable cause = e.getCause();\n-            if ( !(cause instanceof ConnectException || cause instanceof RejectedExecutionException) )\n-            {\n-                // If we keep getting the same exception, only output the first one\n-                if ( lastException != null && !lastException.getClass().equals( cause.getClass() ) )\n-                {\n-                    msgLog.error( \"Receive exception:\", cause );\n-                    lastException = cause;\n-                }\n-            }\n-        }\n-\n-        @Override\n-        public void writeComplete( ChannelHandlerContext ctx, WriteCompletionEvent e ) throws Exception\n-        {\n-            if ( lastException != null )\n-            {\n-                msgLog.error( \"Recovered from:\", lastException );\n-                lastException = null;\n-            }\n-            super.writeComplete( ctx, e );\n-        }\n+      if (lastException != null)\n+      {\n+        msgLog.error(\"Recovered from:\", lastException);\n+        lastException = null;\n+      }\n+      super.writeComplete(ctx, e);\n     }\n+  }\n }\n",
            "diff_size": 511
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}