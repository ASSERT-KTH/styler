{
    "project_name": "seedstack-business",
    "error_id": "47",
    "information": {
        "errors": [
            {
                "line": "8",
                "column": "1",
                "severity": "warning",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\npackage org.seedstack.business.internal.assembler.dsl;\n\nimport static com.google.common.base.Preconditions.checkArgument;\nimport static com.google.common.base.Preconditions.checkNotNull;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/47/ParameterHolder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/styler/47/ParameterHolder.java\nindex 5e21f9c187e..af3465d3a09 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/47/ParameterHolder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/styler/47/ParameterHolder.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.assembler.dsl;\n \n import static com.google.common.base.Preconditions.checkArgument;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/47/ParameterHolder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/intellij/47/ParameterHolder.java\nindex 5e21f9c187e..6ca9f633b63 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/47/ParameterHolder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/intellij/47/ParameterHolder.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.assembler.dsl;\n \n import static com.google.common.base.Preconditions.checkArgument;\n@@ -63,7 +64,7 @@ class ParameterHolder<D> {\n     }\n \n     private void internalAddParameter(Class<? extends Annotation> annotation, int aggregateIndex, int index,\n-            Method getter) {\n+                                      Method getter) {\n         checkState(methodMap != null, \"Cannot add parameter after having called freeze()\");\n         if (methodMap.computeIfAbsent(aggregateIndex, k -> new TreeMap<>())\n                 .putIfAbsent(index, getter) != null) {\n@@ -126,7 +127,7 @@ class ParameterHolder<D> {\n \n         Object uniqueElement = uniqueElement(dto);\n         if (uniqueElement != null) {\n-            return new Object[]{uniqueElement};\n+            return new Object[] {uniqueElement};\n         } else if (aggregateGetters != null) {\n             Object[] values = new Object[aggregateGetters.length];\n             for (int i = 0, length = aggregateGetters.length; i < length; i++) {\n@@ -144,7 +145,7 @@ class ParameterHolder<D> {\n \n         Object uniqueElementForAggregate = uniqueElementForAggregate(dto, aggregateIndex);\n         if (uniqueElementForAggregate != null) {\n-            return new Object[]{uniqueElementForAggregate};\n+            return new Object[] {uniqueElementForAggregate};\n         } else if (tupleGetters != null && aggregateIndex < tupleGetters.length) {\n             Method[] methods = tupleGetters[aggregateIndex];\n             if (methods != null && methods.length > 0) {\n",
            "diff_size": 4
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "8",
                    "column": "1",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "68",
                    "column": "5",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "71",
                    "column": "5",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "74",
                    "column": "22",
                    "severity": "warning",
                    "message": "WhitespaceAround: '>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "75",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "77",
                    "column": "5",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "78",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "80",
                    "column": "5",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "86",
                    "column": "31",
                    "severity": "warning",
                    "message": "WhitespaceAround: '>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "90",
                    "column": "5",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "104",
                    "column": "5",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "116",
                    "column": "5",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 4, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "131",
                    "column": "65",
                    "severity": "warning",
                    "message": "WhitespaceAround: '<' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "133",
                    "column": "1",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 0, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "151",
                    "column": "50",
                    "severity": "warning",
                    "message": "WhitespaceAround: '>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "153",
                    "column": "60",
                    "severity": "warning",
                    "message": "WhitespaceAround: '<' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "155",
                    "column": "1",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 0, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "194",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 196).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "194",
                    "column": "117",
                    "severity": "warning",
                    "message": "WhitespaceAround: '||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/47/ParameterHolder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/naturalize/47/ParameterHolder.java\nindex 5e21f9c187e..2bfc55ca527 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/47/ParameterHolder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/naturalize/47/ParameterHolder.java\n@@ -23,6 +23,7 @@ import org.seedstack.business.internal.BusinessException;\n import org.seedstack.shed.reflect.ReflectUtils;\n \n class ParameterHolder<D> {\n+\n     private final Class<D> dtoClass;\n     private Map<Integer, SortedMap<Integer, Method>> methodMap = new HashMap<>();\n \n@@ -64,31 +65,29 @@ class ParameterHolder<D> {\n \n     private void internalAddParameter(Class<? extends Annotation> annotation, int aggregateIndex, int index,\n             Method getter) {\n-        checkState(methodMap != null, \"Cannot add parameter after having called freeze()\");\n+    checkState(methodMap != null, \"Cannot add parameter after having called freeze()\");\n         if (methodMap.computeIfAbsent(aggregateIndex, k -> new TreeMap<>())\n                 .putIfAbsent(index, getter) != null) {\n-            Method conflictingGetter = methodMap.get(aggregateIndex)\n+    Method conflictingGetter = methodMap.get(aggregateIndex)\n                     .get(index);\n             BusinessException exception;\n-            if (index > -1) {\n-                exception = BusinessException.createNew(\n-                        annotation == AggregateId.class ? BusinessErrorCode.CONFLICTING_DTO_ID_INDEX_MATCHING :\n+            if (index> -1) {\n+                exception = BusinessException.createNew(annotation == AggregateId.class ? BusinessErrorCode.CONFLICTING_DTO_ID_INDEX_MATCHING :\n                                 BusinessErrorCode.CONFLICTING_DTO_FACTORY_INDEX_MATCHING);\n-            } else {\n-                exception = BusinessException.createNew(\n-                        annotation == AggregateId.class ? BusinessErrorCode.CONFLICTING_DTO_ID_MATCHING :\n+    } else {\n+                exception = BusinessException.createNew(annotation == AggregateId.class ? BusinessErrorCode.CONFLICTING_DTO_ID_MATCHING :\n                                 BusinessErrorCode.CONFLICTING_DTO_FACTORY_MATCHING);\n-            }\n+    }\n             exception.put(\"index\", index)\n                     .put(\"dtoClass\", dtoClass)\n                     .put(\"annotation\", annotation)\n                     .put(\"getter\", getter)\n                     .put(\"conflictingGetter\", conflictingGetter);\n-            if (aggregateIndex > -1) {\n+            if (aggregateIndex> -1) {\n                 throw BusinessException.wrap(exception, BusinessErrorCode.CONFLICTING_DTO_TUPLE_MATCHING)\n                         .put(\"dtoClass\", dtoClass)\n                         .put(\"aggregateIndex\", aggregateIndex);\n-            } else {\n+    } else {\n                 throw exception;\n             }\n         }\n@@ -102,7 +101,7 @@ class ParameterHolder<D> {\n             } else {\n                 this.aggregateGetters = aggregateGetters.values()\n                         .toArray(new Method[aggregateGetters.size()]);\n-            }\n+    }\n         } else {\n             tupleGetters = new Method[methodMap.size()][];\n             this.tupleGetter = new Method[methodMap.size()];\n@@ -114,7 +113,7 @@ class ParameterHolder<D> {\n                 } else {\n                     this.tupleGetters[aggregateIndex] = aggregateGetters.values()\n                             .toArray(new Method[aggregateGetters.size()]);\n-                }\n+    }\n             }\n         }\n         methodMap = null;\n@@ -129,7 +128,9 @@ class ParameterHolder<D> {\n             return new Object[]{uniqueElement};\n         } else if (aggregateGetters != null) {\n             Object[] values = new Object[aggregateGetters.length];\n-            for (int i = 0, length = aggregateGetters.length; i < length; i++) {\n+            for (int i = 0, length = aggregateGetters.length; i <length;\n+\n+i++) {\n                 values[i] = ReflectUtils.invoke(aggregateGetters[i], dto);\n             }\n             return values;\n@@ -147,9 +148,11 @@ class ParameterHolder<D> {\n             return new Object[]{uniqueElementForAggregate};\n         } else if (tupleGetters != null && aggregateIndex < tupleGetters.length) {\n             Method[] methods = tupleGetters[aggregateIndex];\n-            if (methods != null && methods.length > 0) {\n+            if (methods != null && methods.length> 0) {\n                 Object[] values = new Object[methods.length];\n-                for (int i = 0, length = methods.length; i < length; i++) {\n+                for (int i = 0, length = methods.length; i <length;\n+\n+i++) {\n                     values[i] = ReflectUtils.invoke(methods[i], dto);\n                 }\n                 return values;\n@@ -188,8 +191,7 @@ class ParameterHolder<D> {\n \n     private boolean isEmptyForAggregateRoot(int aggregateIndex) {\n         checkArgument(aggregateIndex >= 0, \"Aggregate index must be greater than or equal to zero\");\n-        return (tupleGetter == null || tupleGetter.length == 0) && (tupleGetters == null || tupleGetters.length == 0\n-                || aggregateIndex >= tupleGetters.length || tupleGetters[aggregateIndex] == null\n+        return (tupleGetter == null || tupleGetter.length == 0) && (tupleGetters == null || tupleGetters.length == 0|| aggregateIndex >= tupleGetters.length || tupleGetters[aggregateIndex] == null\n                 || tupleGetters[aggregateIndex].length == 0);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "8",
                    "column": "1",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "68",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "70",
                    "column": "9",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'if' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "70",
                    "column": "55",
                    "severity": "warning",
                    "message": "WhitespaceAround: '->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "71",
                    "column": "13",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 12, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "71",
                    "column": "40",
                    "severity": "warning",
                    "message": "WhitespaceAround: '!=' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "73",
                    "column": "17",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 16, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "77",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 199).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "77",
                    "column": "88",
                    "severity": "warning",
                    "message": "WhitespaceAround: '?' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "77",
                    "column": "88",
                    "severity": "warning",
                    "message": "WhitespaceAround: '?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "77",
                    "column": "140",
                    "severity": "warning",
                    "message": "WhitespaceAround: ':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "79",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 187).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "79",
                    "column": "88",
                    "severity": "warning",
                    "message": "WhitespaceAround: '?' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "79",
                    "column": "88",
                    "severity": "warning",
                    "message": "WhitespaceAround: '?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "79",
                    "column": "134",
                    "severity": "warning",
                    "message": "WhitespaceAround: ':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "107",
                    "column": "13",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'for' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "108",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "108",
                    "column": "97",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 96, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "110",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 159).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "110",
                    "column": "97",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 96, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "111",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "111",
                    "column": "97",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 96, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "112",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "112",
                    "column": "101",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 100, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "113",
                    "column": "97",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 96, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "114",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "114",
                    "column": "101",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 100, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "115",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 150).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "116",
                    "column": "97",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 96, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "117",
                    "column": "93",
                    "severity": "warning",
                    "message": "'for rcurly' has incorrect indentation level 92, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "128",
                    "column": "33",
                    "severity": "warning",
                    "message": "'array initialization' child has incorrect indentation level 32, expected level should be one of the following: 16, 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "129",
                    "column": "16",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'if' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "130",
                    "column": "20",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "131",
                    "column": "20",
                    "severity": "warning",
                    "message": "'for' has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "131",
                    "column": "20",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'for' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "132",
                    "column": "1",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 0, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "132",
                    "column": "2",
                    "severity": "warning",
                    "message": "WhitespaceAround: '<' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "132",
                    "column": "2",
                    "severity": "warning",
                    "message": "WhitespaceAround: '<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "133",
                    "column": "1",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 0, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "134",
                    "column": "10",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 9, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "135",
                    "column": "6",
                    "severity": "warning",
                    "message": "'for rcurly' has incorrect indentation level 5, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "136",
                    "column": "20",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "137",
                    "column": "16",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 15, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "138",
                    "column": "20",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "139",
                    "column": "16",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 15, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "148",
                    "column": "33",
                    "severity": "warning",
                    "message": "'array initialization' child has incorrect indentation level 32, expected level should be one of the following: 16, 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "149",
                    "column": "16",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'if' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "149",
                    "column": "39",
                    "severity": "warning",
                    "message": "WhitespaceAround: '&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "149",
                    "column": "57",
                    "severity": "warning",
                    "message": "WhitespaceAround: '<' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "150",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "150",
                    "column": "83",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 82, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "151",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "151",
                    "column": "83",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 82, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "151",
                    "column": "83",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'if' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "151",
                    "column": "101",
                    "severity": "warning",
                    "message": "WhitespaceAround: '&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "152",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "152",
                    "column": "87",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 86, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "153",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "153",
                    "column": "87",
                    "severity": "warning",
                    "message": "'for' has incorrect indentation level 86, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "153",
                    "column": "87",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'for' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "154",
                    "column": "1",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 0, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "154",
                    "column": "2",
                    "severity": "warning",
                    "message": "WhitespaceAround: '<' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "154",
                    "column": "2",
                    "severity": "warning",
                    "message": "WhitespaceAround: '<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "155",
                    "column": "1",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 0, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "156",
                    "column": "10",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 9, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "157",
                    "column": "6",
                    "severity": "warning",
                    "message": "'for rcurly' has incorrect indentation level 5, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "158",
                    "column": "87",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 86, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "159",
                    "column": "83",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 82, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "160",
                    "column": "79",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 78, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "176",
                    "column": "9",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'if' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "176",
                    "column": "31",
                    "severity": "warning",
                    "message": "WhitespaceAround: '&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "176",
                    "column": "49",
                    "severity": "warning",
                    "message": "WhitespaceAround: '<' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "178",
                    "column": "13",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'if' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "186",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "186",
                    "column": "39",
                    "severity": "warning",
                    "message": "WhitespaceAround: '&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "186",
                    "column": "67",
                    "severity": "warning",
                    "message": "WhitespaceAround: '||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "186",
                    "column": "99",
                    "severity": "warning",
                    "message": "WhitespaceAround: '&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "191",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 237).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "191",
                    "column": "36",
                    "severity": "warning",
                    "message": "WhitespaceAround: '||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "191",
                    "column": "63",
                    "severity": "warning",
                    "message": "WhitespaceAround: '&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "191",
                    "column": "87",
                    "severity": "warning",
                    "message": "WhitespaceAround: '||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "191",
                    "column": "114",
                    "severity": "warning",
                    "message": "WhitespaceAround: '||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "191",
                    "column": "154",
                    "severity": "warning",
                    "message": "WhitespaceAround: '||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "191",
                    "column": "193",
                    "severity": "warning",
                    "message": "WhitespaceAround: '||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/47/ParameterHolder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/codebuff/47/ParameterHolder.java\nindex 5e21f9c187e..73f7f76fa52 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/47/ParameterHolder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/codebuff/47/ParameterHolder.java\n@@ -8,9 +8,10 @@\n package org.seedstack.business.internal.assembler.dsl;\n \n import static com.google.common.base.Preconditions.checkArgument;\n+\n import static com.google.common.base.Preconditions.checkNotNull;\n-import static com.google.common.base.Preconditions.checkState;\n \n+import static com.google.common.base.Preconditions.checkState;\n import java.lang.annotation.Annotation;\n import java.lang.reflect.Method;\n import java.util.HashMap;\n@@ -22,7 +23,9 @@ import org.seedstack.business.internal.BusinessErrorCode;\n import org.seedstack.business.internal.BusinessException;\n import org.seedstack.shed.reflect.ReflectUtils;\n \n+\n class ParameterHolder<D> {\n+\n     private final Class<D> dtoClass;\n     private Map<Integer, SortedMap<Integer, Method>> methodMap = new HashMap<>();\n \n@@ -40,19 +43,19 @@ class ParameterHolder<D> {\n \n     void addValue(Class<? extends Annotation> annotation, Method getter) {\n         checkNotNull(getter, \"Getter cannot be null\");\n-        internalAddParameter(annotation, -1, -1, getter);\n+        internalAddParameter(annotation, - 1, - 1, getter);\n     }\n \n     void addParameter(Class<? extends Annotation> annotation, int index, Method getter) {\n         checkNotNull(getter, \"Getter cannot be null\");\n         checkArgument(index >= 0, \"Parameter index must be greater than or equal to zero\");\n-        internalAddParameter(annotation, -1, index, getter);\n+        internalAddParameter(annotation, - 1, index, getter);\n     }\n \n     void addTupleValue(Class<? extends Annotation> annotation, int aggregateIndex, Method getter) {\n         checkNotNull(getter, \"Getter cannot be null\");\n         checkArgument(aggregateIndex >= 0, \"Aggregate index must be greater than or equal to zero\");\n-        internalAddParameter(annotation, aggregateIndex, -1, getter);\n+        internalAddParameter(annotation, aggregateIndex, - 1, getter);\n     }\n \n     void addTupleParameter(Class<? extends Annotation> annotation, int aggregateIndex, int index, Method getter) {\n@@ -62,32 +65,27 @@ class ParameterHolder<D> {\n         internalAddParameter(annotation, aggregateIndex, index, getter);\n     }\n \n-    private void internalAddParameter(Class<? extends Annotation> annotation, int aggregateIndex, int index,\n-            Method getter) {\n+    private void internalAddParameter(Class<? extends Annotation> annotation, int aggregateIndex, int index, Method getter) {\n         checkState(methodMap != null, \"Cannot add parameter after having called freeze()\");\n-        if (methodMap.computeIfAbsent(aggregateIndex, k -> new TreeMap<>())\n-                .putIfAbsent(index, getter) != null) {\n+        if(methodMap.computeIfAbsent(aggregateIndex, k-> new TreeMap<>())\n+            .putIfAbsent(index, getter)!= null) {\n             Method conflictingGetter = methodMap.get(aggregateIndex)\n-                    .get(index);\n+                .get(index);\n+\n             BusinessException exception;\n-            if (index > -1) {\n-                exception = BusinessException.createNew(\n-                        annotation == AggregateId.class ? BusinessErrorCode.CONFLICTING_DTO_ID_INDEX_MATCHING :\n-                                BusinessErrorCode.CONFLICTING_DTO_FACTORY_INDEX_MATCHING);\n+            if (index > - 1) {\n+                exception = BusinessException.createNew(annotation == AggregateId.class?BusinessErrorCode.CONFLICTING_DTO_ID_INDEX_MATCHING: BusinessErrorCode.CONFLICTING_DTO_FACTORY_INDEX_MATCHING);\n             } else {\n-                exception = BusinessException.createNew(\n-                        annotation == AggregateId.class ? BusinessErrorCode.CONFLICTING_DTO_ID_MATCHING :\n-                                BusinessErrorCode.CONFLICTING_DTO_FACTORY_MATCHING);\n+                exception = BusinessException.createNew(annotation == AggregateId.class?BusinessErrorCode.CONFLICTING_DTO_ID_MATCHING: BusinessErrorCode.CONFLICTING_DTO_FACTORY_MATCHING);\n             }\n             exception.put(\"index\", index)\n-                    .put(\"dtoClass\", dtoClass)\n-                    .put(\"annotation\", annotation)\n-                    .put(\"getter\", getter)\n-                    .put(\"conflictingGetter\", conflictingGetter);\n-            if (aggregateIndex > -1) {\n+                .put(\"dtoClass\", dtoClass)\n+            .put(\"annotation\", annotation)\n+            .put(\"getter\", getter).put(\"conflictingGetter\", conflictingGetter);\n+            if (aggregateIndex > - 1) {\n                 throw BusinessException.wrap(exception, BusinessErrorCode.CONFLICTING_DTO_TUPLE_MATCHING)\n-                        .put(\"dtoClass\", dtoClass)\n-                        .put(\"aggregateIndex\", aggregateIndex);\n+                    .put(\"dtoClass\", dtoClass)\n+                    .put(\"aggregateIndex\", aggregateIndex);\n             } else {\n                 throw exception;\n             }\n@@ -95,27 +93,28 @@ class ParameterHolder<D> {\n     }\n \n     ParameterHolder<D> freeze() {\n-        if (methodMap.containsKey(-1)) {\n-            SortedMap<Integer, Method> aggregateGetters = methodMap.get(-1);\n-            if (aggregateGetters.containsKey(-1)) {\n-                this.aggregateGetter = aggregateGetters.get(-1);\n+        if (methodMap.containsKey(- 1)) {\n+            SortedMap<Integer, Method> aggregateGetters = methodMap.get(- 1);\n+            if (aggregateGetters.containsKey(- 1)) {\n+                this.aggregateGetter = aggregateGetters.get(- 1);\n             } else {\n                 this.aggregateGetters = aggregateGetters.values()\n-                        .toArray(new Method[aggregateGetters.size()]);\n+                    .toArray(new Method[aggregateGetters.size()]);\n             }\n         } else {\n-            tupleGetters = new Method[methodMap.size()][];\n+            tupleGetters = new Method[methodMap.size()] [];\n             this.tupleGetter = new Method[methodMap.size()];\n-            for (Map.Entry<Integer, SortedMap<Integer, Method>> entry : methodMap.entrySet()) {\n-                int aggregateIndex = entry.getKey();\n-                SortedMap<Integer, Method> aggregateGetters = entry.getValue();\n-                if (aggregateGetters.containsKey(-1)) {\n-                    this.tupleGetter[aggregateIndex] = aggregateGetters.get(-1);\n-                } else {\n-                    this.tupleGetters[aggregateIndex] = aggregateGetters.values()\n-                            .toArray(new Method[aggregateGetters.size()]);\n-                }\n-            }\n+            for(Map.Entry<Integer, SortedMap<Integer, Method>> entry :methodMap.entrySet()) {\n+                                                                                                int aggregateIndex = entry.getKey();\n+\n+                                                                                                SortedMap<Integer, Method> aggregateGetters = entry.getValue();\n+                                                                                                if (aggregateGetters.containsKey(- 1)) {\n+                                                                                                    this.tupleGetter[aggregateIndex] = aggregateGetters.get(- 1);\n+                                                                                                } else {\n+                                                                                                    this.tupleGetters[aggregateIndex] = aggregateGetters.values()\n+                                                                                                        .toArray(new Method[aggregateGetters.size()]);\n+                                                                                                }\n+                                                                                            }\n         }\n         methodMap = null;\n         return this;\n@@ -123,44 +122,47 @@ class ParameterHolder<D> {\n \n     Object[] parameters(D dto) {\n         checkNotNull(dto, \"DTO cannot be null\");\n-\n         Object uniqueElement = uniqueElement(dto);\n         if (uniqueElement != null) {\n-            return new Object[]{uniqueElement};\n-        } else if (aggregateGetters != null) {\n-            Object[] values = new Object[aggregateGetters.length];\n-            for (int i = 0, length = aggregateGetters.length; i < length; i++) {\n-                values[i] = ReflectUtils.invoke(aggregateGetters[i], dto);\n-            }\n-            return values;\n-        } else {\n-            return new Object[0];\n-        }\n+            return new Object[] {\n+                                uniqueElement};\n+        } else if(aggregateGetters != null) {\n+                   Object[] values = new Object[aggregateGetters.length];\n+                   for(int i = 0, length = aggregateGetters.length;\n+i<length;\n+i++) {\n+         values[i] = ReflectUtils.invoke(aggregateGetters[i], dto);\n+     }\n+                   return values;\n+               } else {\n+                   return new Object[0];\n+               }\n     }\n \n     Object[] parametersOfAggregateRoot(D dto, int aggregateIndex) {\n         checkNotNull(dto, \"DTO cannot be null\");\n         checkArgument(aggregateIndex >= 0, \"Aggregate index must be greater than or equal to zero\");\n-\n         Object uniqueElementForAggregate = uniqueElementForAggregate(dto, aggregateIndex);\n         if (uniqueElementForAggregate != null) {\n-            return new Object[]{uniqueElementForAggregate};\n-        } else if (tupleGetters != null && aggregateIndex < tupleGetters.length) {\n-            Method[] methods = tupleGetters[aggregateIndex];\n-            if (methods != null && methods.length > 0) {\n-                Object[] values = new Object[methods.length];\n-                for (int i = 0, length = methods.length; i < length; i++) {\n-                    values[i] = ReflectUtils.invoke(methods[i], dto);\n-                }\n-                return values;\n-            }\n-        }\n+            return new Object[] {\n+                                uniqueElementForAggregate};\n+        } else if(tupleGetters != null&& aggregateIndex <tupleGetters.length) {\n+                                                                                  Method[] methods = tupleGetters[aggregateIndex];\n+                                                                                  if(methods != null&& methods.length > 0) {\n+                                                                                      Object[] values = new Object[methods.length];\n+                                                                                      for(int i = 0, length = methods.length;\n+i<length;\n+i++) {\n+         values[i] = ReflectUtils.invoke(methods[i], dto);\n+     }\n+                                                                                      return values;\n+                                                                                  }\n+                                                                              }\n         return new Object[0];\n     }\n \n     <I> I uniqueElement(D dto) {\n         checkNotNull(dto, \"DTO cannot be null\");\n-\n         if (aggregateGetter != null) {\n             return ReflectUtils.invoke(aggregateGetter, dto);\n         } else {\n@@ -171,10 +173,9 @@ class ParameterHolder<D> {\n     <I> I uniqueElementForAggregate(D dto, int aggregateIndex) {\n         checkNotNull(dto, \"DTO cannot be null\");\n         checkArgument(aggregateIndex >= 0, \"Aggregate index must be greater than or equal to zero\");\n-\n-        if (tupleGetter != null && aggregateIndex < tupleGetter.length) {\n+        if(tupleGetter != null&& aggregateIndex <tupleGetter.length) {\n             Method method = tupleGetter[aggregateIndex];\n-            if (method != null) {\n+            if(method != null) {\n                 return ReflectUtils.invoke(method, dto);\n             }\n         }\n@@ -182,14 +183,11 @@ class ParameterHolder<D> {\n     }\n \n     boolean isEmpty() {\n-        return aggregateGetter == null && (aggregateGetters == null || aggregateGetters.length == 0)\n-                && isEmptyForAggregateRoot(0);\n+        return aggregateGetter == null&& (aggregateGetters == null|| aggregateGetters.length == 0)&& isEmptyForAggregateRoot(0);\n     }\n \n     private boolean isEmptyForAggregateRoot(int aggregateIndex) {\n         checkArgument(aggregateIndex >= 0, \"Aggregate index must be greater than or equal to zero\");\n-        return (tupleGetter == null || tupleGetter.length == 0) && (tupleGetters == null || tupleGetters.length == 0\n-                || aggregateIndex >= tupleGetters.length || tupleGetters[aggregateIndex] == null\n-                || tupleGetters[aggregateIndex].length == 0);\n+        return (tupleGetter == null|| tupleGetter.length == 0)&& (tupleGetters == null|| tupleGetters.length == 0|| aggregateIndex >= tupleGetters.length|| tupleGetters[aggregateIndex] == null|| tupleGetters[aggregateIndex].length == 0);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 84
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/47/ParameterHolder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/styler_random/47/ParameterHolder.java\nindex 5e21f9c187e..af3465d3a09 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/47/ParameterHolder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/styler_random/47/ParameterHolder.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.assembler.dsl;\n \n import static com.google.common.base.Preconditions.checkArgument;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/47/ParameterHolder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/styler_three_grams/47/ParameterHolder.java\nindex 5e21f9c187e..af3465d3a09 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/47/ParameterHolder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/styler_three_grams/47/ParameterHolder.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.assembler.dsl;\n \n import static com.google.common.base.Preconditions.checkArgument;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}