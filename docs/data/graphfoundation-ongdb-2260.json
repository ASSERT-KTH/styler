{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2260",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2260/AbstractBaseRecord.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2260/AbstractBaseRecord.java\nindex 553e4854ef6..b0b32f9a56a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2260/AbstractBaseRecord.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2260/AbstractBaseRecord.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.record;\n \n import org.neo4j.helpers.CloneableInPublic;\n@@ -28,163 +29,163 @@ import org.neo4j.helpers.CloneableInPublic;\n  */\n public abstract class AbstractBaseRecord implements CloneableInPublic\n {\n-    public static final int NO_ID = -1;\n-    private long id;\n-    // Used for the \"record unit\" feature where one logical record may span two physical records,\n-    // as to still keep low and fixed record size, but support occasionally bigger records.\n-    private long secondaryUnitId;\n-    // This flag is for when a record required a secondary unit, was changed, as a result of that change\n-    // no longer requires that secondary unit and gets updated. In that scenario we still want to know\n-    // about the secondary unit id so that we can free it when the time comes to apply the record to store.\n-    private boolean requiresSecondaryUnit;\n-    private boolean inUse;\n-    private boolean created;\n-    // Flag that indicates usage of fixed references format.\n-    // Fixed references format allows to avoid encoding/decoding of references in variable length format and as result\n-    // speed up records read/write operations.\n-    private boolean useFixedReferences;\n-\n-    protected AbstractBaseRecord( long id )\n-    {\n-        this.id = id;\n-        clear();\n-    }\n-\n-    protected AbstractBaseRecord initialize( boolean inUse )\n-    {\n-        this.inUse = inUse;\n-        this.created = false;\n-        this.secondaryUnitId = NO_ID;\n-        this.requiresSecondaryUnit = false;\n-        this.useFixedReferences = false;\n-        return this;\n-    }\n-\n-    /**\n-     * Clears this record to its initial state. Initializing this record with an {@code initialize-method}\n-     * doesn't require clear the record first, either initialize or clear suffices.\n-     * Subclasses, most specific subclasses only, implements this method by calling initialize with\n-     * zero-like arguments.\n-     */\n-    public void clear()\n-    {\n-        inUse = false;\n-        created = false;\n-        secondaryUnitId = NO_ID;\n-        requiresSecondaryUnit = false;\n-        this.useFixedReferences = false;\n-    }\n-\n-    public long getId()\n-    {\n-        return id;\n-    }\n-\n-    public int getIntId()\n-    {\n-        return Math.toIntExact( id );\n-    }\n-\n-    public final void setId( long id )\n-    {\n-        this.id = id;\n-    }\n-\n-    /**\n-     * Sets a secondary record unit ID for this record. If this is set to something other than {@link #NO_ID}\n-     * then {@link #requiresSecondaryUnit()} will return {@code true}.\n-     * Setting this id is separate from setting {@link #requiresSecondaryUnit()} since this secondary unit id\n-     * may be used to just free that id at the time of updating in the store if a record goes from two to one unit.\n-     */\n-    public void setSecondaryUnitId( long id )\n-    {\n-        this.secondaryUnitId = id;\n-    }\n-\n-    public boolean hasSecondaryUnitId()\n-    {\n-        return secondaryUnitId != NO_ID;\n-    }\n-\n-    /**\n-     * @return secondary record unit ID set by {@link #setSecondaryUnitId(long)}.\n-     */\n-    public long getSecondaryUnitId()\n-    {\n-        return this.secondaryUnitId;\n-    }\n-\n-    public void setRequiresSecondaryUnit( boolean requires )\n-    {\n-        this.requiresSecondaryUnit = requires;\n-    }\n-\n-    /**\n-     * @return whether or not a secondary record unit ID has been assigned.\n-     */\n-    public boolean requiresSecondaryUnit()\n-    {\n-        return requiresSecondaryUnit;\n-    }\n-\n-    public final boolean inUse()\n-    {\n-        return inUse;\n-    }\n-\n-    public void setInUse( boolean inUse )\n-    {\n-        this.inUse = inUse;\n-    }\n-\n-    public final void setCreated()\n-    {\n-        this.created = true;\n-    }\n-\n-    public final boolean isCreated()\n-    {\n-        return created;\n-    }\n-\n-    public boolean isUseFixedReferences()\n-    {\n-        return useFixedReferences;\n-    }\n-\n-    public void setUseFixedReferences( boolean useFixedReferences )\n-    {\n-        this.useFixedReferences = useFixedReferences;\n-    }\n-\n-    @Override\n-    public int hashCode()\n-    {\n-        return (int) (( id >>> 32 ) ^ id );\n-    }\n-\n-    @Override\n-    public boolean equals( Object obj )\n-    {\n-        if ( this == obj )\n-        {\n-            return true;\n-        }\n-        if ( obj == null )\n-        {\n-            return false;\n-        }\n-        if ( getClass() != obj.getClass() )\n-        {\n-            return false;\n-        }\n-        AbstractBaseRecord other = (AbstractBaseRecord) obj;\n-        return id == other.id;\n-    }\n-\n-    @Override\n-    public AbstractBaseRecord clone()\n-    {\n-        throw new UnsupportedOperationException();\n-    }\n+  public static final int NO_ID = -1;\n+  private long id;\n+  // Used for the \"record unit\" feature where one logical record may span two physical records,\n+  // as to still keep low and fixed record size, but support occasionally bigger records.\n+  private long secondaryUnitId;\n+  // This flag is for when a record required a secondary unit, was changed, as a result of that change\n+  // no longer requires that secondary unit and gets updated. In that scenario we still want to know\n+  // about the secondary unit id so that we can free it when the time comes to apply the record to store.\n+  private boolean requiresSecondaryUnit;\n+  private boolean inUse;\n+  private boolean created;\n+  // Flag that indicates usage of fixed references format.\n+  // Fixed references format allows to avoid encoding/decoding of references in variable length format and as result\n+  // speed up records read/write operations.\n+  private boolean useFixedReferences;\n+\n+  protected AbstractBaseRecord(long id)\n+  {\n+    this.id = id;\n+    clear();\n+  }\n+\n+  protected AbstractBaseRecord initialize(boolean inUse)\n+  {\n+    this.inUse = inUse;\n+    this.created = false;\n+    this.secondaryUnitId = NO_ID;\n+    this.requiresSecondaryUnit = false;\n+    this.useFixedReferences = false;\n+    return this;\n+  }\n+\n+  /**\n+   * Clears this record to its initial state. Initializing this record with an {@code initialize-method}\n+   * doesn't require clear the record first, either initialize or clear suffices.\n+   * Subclasses, most specific subclasses only, implements this method by calling initialize with\n+   * zero-like arguments.\n+   */\n+  public void clear()\n+  {\n+    inUse = false;\n+    created = false;\n+    secondaryUnitId = NO_ID;\n+    requiresSecondaryUnit = false;\n+    this.useFixedReferences = false;\n+  }\n+\n+  public long getId()\n+  {\n+    return id;\n+  }\n+\n+  public int getIntId()\n+  {\n+    return Math.toIntExact(id);\n+  }\n+\n+  public final void setId(long id)\n+  {\n+    this.id = id;\n+  }\n+\n+  /**\n+   * Sets a secondary record unit ID for this record. If this is set to something other than {@link #NO_ID}\n+   * then {@link #requiresSecondaryUnit()} will return {@code true}.\n+   * Setting this id is separate from setting {@link #requiresSecondaryUnit()} since this secondary unit id\n+   * may be used to just free that id at the time of updating in the store if a record goes from two to one unit.\n+   */\n+  public void setSecondaryUnitId(long id)\n+  {\n+    this.secondaryUnitId = id;\n+  }\n+\n+  public boolean hasSecondaryUnitId()\n+  {\n+    return secondaryUnitId != NO_ID;\n+  }\n+\n+  /**\n+   * @return secondary record unit ID set by {@link #setSecondaryUnitId(long)}.\n+   */\n+  public long getSecondaryUnitId()\n+  {\n+    return this.secondaryUnitId;\n+  }\n+\n+  public void setRequiresSecondaryUnit(boolean requires)\n+  {\n+    this.requiresSecondaryUnit = requires;\n+  }\n+\n+  /**\n+   * @return whether or not a secondary record unit ID has been assigned.\n+   */\n+  public boolean requiresSecondaryUnit()\n+  {\n+    return requiresSecondaryUnit;\n+  }\n+\n+  public final boolean inUse()\n+  {\n+    return inUse;\n+  }\n+\n+  public void setInUse(boolean inUse)\n+  {\n+    this.inUse = inUse;\n+  }\n+\n+  public final void setCreated()\n+  {\n+    this.created = true;\n+  }\n+\n+  public final boolean isCreated()\n+  {\n+    return created;\n+  }\n+\n+  public boolean isUseFixedReferences()\n+  {\n+    return useFixedReferences;\n+  }\n+\n+  public void setUseFixedReferences(boolean useFixedReferences)\n+  {\n+    this.useFixedReferences = useFixedReferences;\n+  }\n+\n+  @Override\n+  public int hashCode()\n+  {\n+    return (int) ((id >>> 32) ^ id);\n+  }\n+\n+  @Override\n+  public boolean equals(Object obj)\n+  {\n+    if (this == obj)\n+    {\n+      return true;\n+    }\n+    if (obj == null)\n+    {\n+      return false;\n+    }\n+    if (getClass() != obj.getClass())\n+    {\n+      return false;\n+    }\n+    AbstractBaseRecord other = (AbstractBaseRecord) obj;\n+    return id == other.id;\n+  }\n+\n+  @Override\n+  public AbstractBaseRecord clone()\n+  {\n+    throw new UnsupportedOperationException();\n+  }\n }\n",
            "diff_size": 160
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "163",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2260/AbstractBaseRecord.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2260/AbstractBaseRecord.java\nindex 553e4854ef6..8236aa2714e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2260/AbstractBaseRecord.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2260/AbstractBaseRecord.java\n@@ -160,7 +160,7 @@ public abstract class AbstractBaseRecord implements CloneableInPublic\n     @Override\n     public int hashCode()\n     {\n-        return (int) (( id >>> 32 ) ^ id );\n+        return ( int) (( id >>> 32 ) ^ id );\n     }\n \n     @Override\n@@ -170,15 +170,18 @@ public abstract class AbstractBaseRecord implements CloneableInPublic\n         {\n             return true;\n         }\n-        if ( obj == null )\n+\n+if ( obj == null )\n         {\n             return false;\n         }\n-        if ( getClass() != obj.getClass() )\n+\n+if ( getClass() != obj.getClass() )\n         {\n             return false;\n         }\n-        AbstractBaseRecord other = (AbstractBaseRecord) obj;\n+\n+AbstractBaseRecord other = (AbstractBaseRecord) obj;\n         return id == other.id;\n     }\n \n@@ -187,4 +190,4 @@ public abstract class AbstractBaseRecord implements CloneableInPublic\n     {\n         throw new UnsupportedOperationException();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}