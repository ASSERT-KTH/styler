{
    "project_name": "findbugsproject-findbugs",
    "error_id": "16",
    "information": {
        "errors": [
            {
                "line": "15",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "public class PackageClosingListener implements PackageListener {\n\n\t/**\n\t * Does not do anything when package is opened.\n\t */\n\tpublic void packageOpened(PackageEvent vt) {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "16",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/16/PackageClosingListener.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler/16/PackageClosingListener.java\nindex 3dfe00f5458..908c34e99f9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/16/PackageClosingListener.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler/16/PackageClosingListener.java\n@@ -12,10 +12,10 @@ import bluej.extensions.event.PackageListener;\n  */\n public class PackageClosingListener implements PackageListener {\n \n-\t/**\n+/**\n \t * Does not do anything when package is opened.\n \t */\n-\tpublic void packageOpened(PackageEvent vt) {\n+ public void packageOpened(PackageEvent vt) {\n \t}\n \n \t/**\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/16/PackageClosingListener.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/intellij/16/PackageClosingListener.java\nindex 3dfe00f5458..b71dd70fb06 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/16/PackageClosingListener.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/intellij/16/PackageClosingListener.java\n@@ -7,30 +7,31 @@ import bluej.extensions.event.PackageListener;\n /**\n  * Listens for when a package opens or closes. When closes also closes the\n  * ResultsFrame of findbugs if one is open.\n- * @author Kristin Stephens\n  *\n+ * @author Kristin Stephens\n  */\n public class PackageClosingListener implements PackageListener {\n \n-\t/**\n-\t * Does not do anything when package is opened.\n-\t */\n-\tpublic void packageOpened(PackageEvent vt) {\n-\t}\n+    /**\n+     * Does not do anything when package is opened.\n+     */\n+    public void packageOpened(PackageEvent vt) {\n+    }\n \n-\t/**\n-\t * When package is closed will also close the FindBugs results frame\n-\t * if it is open.\n-\t */\n-\tpublic void packageClosing(PackageEvent evt) {\n-\t\ttry {\n-\t\t\tResultsFrame frame = ResultsFrame.getInstance(evt.getPackage().getProject(), false);\n-\t\t\tif(frame != null)\n-\t\t\t\tframe.setVisible(false);\n-\t\t} catch (ProjectNotOpenException e) {\n-\t\t\tLog.recordBug(e);\n-\t\t}\n+    /**\n+     * When package is closed will also close the FindBugs results frame\n+     * if it is open.\n+     */\n+    public void packageClosing(PackageEvent evt) {\n+        try {\n+            ResultsFrame frame = ResultsFrame.getInstance(evt.getPackage().getProject(), false);\n+            if (frame != null) {\n+                frame.setVisible(false);\n+            }\n+        } catch (ProjectNotOpenException e) {\n+            Log.recordBug(e);\n+        }\n \n-\t}\n+    }\n \n }\n",
            "diff_size": 21
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "15",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/16/PackageClosingListener.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/naturalize/16/PackageClosingListener.java\nindex 3dfe00f5458..96e874fd5cc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/16/PackageClosingListener.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/naturalize/16/PackageClosingListener.java\n@@ -11,8 +11,7 @@ import bluej.extensions.event.PackageListener;\n  *\n  */\n public class PackageClosingListener implements PackageListener {\n-\n-\t/**\n+    /**\n \t * Does not do anything when package is opened.\n \t */\n \tpublic void packageOpened(PackageEvent vt) {\n@@ -23,14 +22,12 @@ public class PackageClosingListener implements PackageListener {\n \t * if it is open.\n \t */\n \tpublic void packageClosing(PackageEvent evt) {\n-\t\ttry {\n-\t\t\tResultsFrame frame = ResultsFrame.getInstance(evt.getPackage().getProject(), false);\n-\t\t\tif(frame != null)\n-\t\t\t\tframe.setVisible(false);\n-\t\t} catch (ProjectNotOpenException e) {\n-\t\t\tLog.recordBug(e);\n-\t\t}\n-\n-\t}\n-\n-}\n+    try {\n+    ResultsFrame frame = ResultsFrame.getInstance(evt.getPackage().getProject(), false);\n+\t\t\tif (frame != null)\n+    frame.setVisible(false);\n+    } catch (ProjectNotOpenException e) {\n+    Log.recordBug(e);\n+    }\n+    }\n+    }\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/16/PackageClosingListener.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/codebuff/16/PackageClosingListener.java\nindex 3dfe00f5458..a77e186a97e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/16/PackageClosingListener.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/codebuff/16/PackageClosingListener.java\n@@ -10,27 +10,27 @@ import bluej.extensions.event.PackageListener;\n  * @author Kristin Stephens\n  *\n  */\n-public class PackageClosingListener implements PackageListener {\n \n-\t/**\n-\t * Does not do anything when package is opened.\n-\t */\n-\tpublic void packageOpened(PackageEvent vt) {\n-\t}\n+public class PackageClosingListener implements PackageListener {\n \n-\t/**\n-\t * When package is closed will also close the FindBugs results frame\n-\t * if it is open.\n-\t */\n-\tpublic void packageClosing(PackageEvent evt) {\n-\t\ttry {\n-\t\t\tResultsFrame frame = ResultsFrame.getInstance(evt.getPackage().getProject(), false);\n-\t\t\tif(frame != null)\n-\t\t\t\tframe.setVisible(false);\n-\t\t} catch (ProjectNotOpenException e) {\n-\t\t\tLog.recordBug(e);\n-\t\t}\n+    /**\n+     * Does not do anything when package is opened.\n+     */\n+    public void packageOpened(PackageEvent vt) {\n+    }\n \n-\t}\n+    /**\n+     * When package is closed will also close the FindBugs results frame\n+     * if it is open.\n+     */\n \n-}\n+    public void packageClosing(PackageEvent evt) {\n+        try {\n+            ResultsFrame frame = ResultsFrame.getInstance(evt.getPackage().getProject(), false);\n+            if (frame != null)\n+                frame.setVisible(false);\n+        } catch (ProjectNotOpenException e) {\n+            Log.recordBug(e);\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 32
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "16",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/16/PackageClosingListener.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler_random/16/PackageClosingListener.java\nindex 3dfe00f5458..908c34e99f9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/16/PackageClosingListener.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler_random/16/PackageClosingListener.java\n@@ -12,10 +12,10 @@ import bluej.extensions.event.PackageListener;\n  */\n public class PackageClosingListener implements PackageListener {\n \n-\t/**\n+/**\n \t * Does not do anything when package is opened.\n \t */\n-\tpublic void packageOpened(PackageEvent vt) {\n+ public void packageOpened(PackageEvent vt) {\n \t}\n \n \t/**\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}