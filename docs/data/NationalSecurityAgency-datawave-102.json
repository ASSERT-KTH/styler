{
    "project_name": "NationalSecurityAgency-datawave",
    "error_id": "102",
    "information": {
        "errors": [
            {
                "line": "32",
                "severity": "error",
                "message": "Accumulo non-public classes imported",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
            }
        ]
    },
    "source_code": "import org.apache.accumulo.core.client.admin.SecurityOperations;\nimport org.apache.accumulo.core.client.admin.TableOperations;\nimport org.apache.accumulo.core.client.impl.Tables;\nimport org.apache.accumulo.core.client.security.SecurityErrorCode;\nimport org.apache.accumulo.core.data.ConstraintViolationSummary;\nimport org.apache.accumulo.core.data.KeyExtent;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "32",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "32",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/102/AdminService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/intellij/102/AdminService.java\nindex 932f4d05ec4..34246b187c4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/102/AdminService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/intellij/102/AdminService.java\n@@ -63,529 +63,513 @@ import java.util.concurrent.TimeUnit;\n @Service\n @ConditionalOnProperty(name = \"accumulo.admin.enabled\", havingValue = \"true\", matchIfMissing = true)\n public class AdminService {\n-    \n-    private final Logger log = LoggerFactory.getLogger(this.getClass());\n-    private final MarkingFunctions markingFunctions;\n-    private final Connector warehouseConnector;\n-    \n-    @Autowired\n-    public AdminService(@Qualifier(\"warehouse\") Connector warehouseConnector, MarkingFunctions markingFunctions) {\n-        this.warehouseConnector = warehouseConnector;\n-        this.markingFunctions = markingFunctions;\n+\n+  private final Logger log = LoggerFactory.getLogger(this.getClass());\n+  private final MarkingFunctions markingFunctions;\n+  private final Connector warehouseConnector;\n+\n+  @Autowired\n+  public AdminService(@Qualifier(\"warehouse\") Connector warehouseConnector, MarkingFunctions markingFunctions) {\n+    this.warehouseConnector = warehouseConnector;\n+    this.markingFunctions = markingFunctions;\n+  }\n+\n+  /**\n+   * Grants the specified Accumulo permission to the specified user\n+   *\n+   * @param userName   Accumulo user\n+   * @param permission Accumulo SystemPermission\n+   * @return {@link VoidResponse}\n+   */\n+  public VoidResponse grantSystemPermission(String userName, String permission) {\n+    VoidResponse response = new VoidResponse();\n+    try {\n+      SecurityOperations ops = warehouseConnector.securityOperations();\n+      ops.grantSystemPermission(userName, SystemPermission.valueOf(permission));\n+    } catch (Exception e) {\n+      log.error(\"Failed to grant \" + permission + \" to user \" + userName, e);\n+      throw new RuntimeException(e);\n     }\n-    \n-    /**\n-     * Grants the specified Accumulo permission to the specified user\n-     * \n-     * @param userName\n-     *            Accumulo user\n-     * @param permission\n-     *            Accumulo SystemPermission\n-     * @return {@link VoidResponse}\n-     */\n-    public VoidResponse grantSystemPermission(String userName, String permission) {\n-        VoidResponse response = new VoidResponse();\n-        try {\n-            SecurityOperations ops = warehouseConnector.securityOperations();\n-            ops.grantSystemPermission(userName, SystemPermission.valueOf(permission));\n-        } catch (Exception e) {\n-            log.error(\"Failed to grant \" + permission + \" to user \" + userName, e);\n-            throw new RuntimeException(e);\n-        }\n-        return response;\n+    return response;\n+  }\n+\n+  /**\n+   * Revokes the specified Accumulo permission from the specified user\n+   *\n+   * @param userName   Accumulo user\n+   * @param permission Accumulo SystemPermission\n+   * @return {@link VoidResponse}\n+   */\n+  public VoidResponse revokeSystemPermission(String userName, String permission) {\n+    VoidResponse response = new VoidResponse();\n+    try {\n+      SecurityOperations ops = warehouseConnector.securityOperations();\n+      ops.revokeSystemPermission(userName, SystemPermission.valueOf(permission));\n+    } catch (Exception e) {\n+      log.error(\"Failed to revoke \" + permission + \" to user \" + userName, e);\n+      throw new RuntimeException(e);\n     }\n-    \n-    /**\n-     * Revokes the specified Accumulo permission from the specified user\n-     *\n-     * @param userName\n-     *            Accumulo user\n-     * @param permission\n-     *            Accumulo SystemPermission\n-     * @return {@link VoidResponse}\n-     */\n-    public VoidResponse revokeSystemPermission(String userName, String permission) {\n-        VoidResponse response = new VoidResponse();\n-        try {\n-            SecurityOperations ops = warehouseConnector.securityOperations();\n-            ops.revokeSystemPermission(userName, SystemPermission.valueOf(permission));\n-        } catch (Exception e) {\n-            log.error(\"Failed to revoke \" + permission + \" to user \" + userName, e);\n-            throw new RuntimeException(e);\n-        }\n-        return response;\n+    return response;\n+  }\n+\n+  /**\n+   * Grants the specified table permission to the specified Accumulo user\n+   *\n+   * @param userName   Accumulo user\n+   * @param tableName  Accumulo table\n+   * @param permission Accumulo TablePermission\n+   * @return {@link VoidResponse}\n+   */\n+  public VoidResponse grantTablePermission(String userName, String tableName, String permission) {\n+    VoidResponse response = new VoidResponse();\n+    try {\n+      SecurityOperations ops = warehouseConnector.securityOperations();\n+      ops.grantTablePermission(userName, tableName, TablePermission.valueOf(permission));\n+    } catch (Exception e) {\n+      log.error(\"Failed to grant \" + permission + \" to user \" + userName, e);\n+      throw new RuntimeException(e);\n     }\n-    \n-    /**\n-     * Grants the specified table permission to the specified Accumulo user\n-     *\n-     * @param userName\n-     *            Accumulo user\n-     * @param tableName\n-     *            Accumulo table\n-     * @param permission\n-     *            Accumulo TablePermission\n-     * @return {@link VoidResponse}\n-     */\n-    public VoidResponse grantTablePermission(String userName, String tableName, String permission) {\n-        VoidResponse response = new VoidResponse();\n-        try {\n-            SecurityOperations ops = warehouseConnector.securityOperations();\n-            ops.grantTablePermission(userName, tableName, TablePermission.valueOf(permission));\n-        } catch (Exception e) {\n-            log.error(\"Failed to grant \" + permission + \" to user \" + userName, e);\n-            throw new RuntimeException(e);\n-        }\n-        return response;\n+    return response;\n+  }\n+\n+  /**\n+   * Revokes the specified table permission to the specified Accumulo user\n+   *\n+   * @param userName   Accumulo user\n+   * @param tableName  Accumulo table\n+   * @param permission Accumulo TablePermission\n+   * @return {@link VoidResponse}\n+   */\n+  public VoidResponse revokeTablePermission(String userName, String tableName, String permission) {\n+    VoidResponse response = new VoidResponse();\n+    try {\n+      SecurityOperations ops = warehouseConnector.securityOperations();\n+      ops.revokeTablePermission(userName, tableName, TablePermission.valueOf(permission));\n+    } catch (Exception e) {\n+      log.error(\"Failed to revoke \" + permission + \" to user \" + userName, e);\n+      throw new RuntimeException(e);\n     }\n-    \n-    /**\n-     * Revokes the specified table permission to the specified Accumulo user\n-     *\n-     * @param userName\n-     *            Accumulo user\n-     * @param tableName\n-     *            Accumulo table\n-     * @param permission\n-     *            Accumulo TablePermission\n-     * @return {@link VoidResponse}\n-     */\n-    public VoidResponse revokeTablePermission(String userName, String tableName, String permission) {\n-        VoidResponse response = new VoidResponse();\n-        try {\n-            SecurityOperations ops = warehouseConnector.securityOperations();\n-            ops.revokeTablePermission(userName, tableName, TablePermission.valueOf(permission));\n-        } catch (Exception e) {\n-            log.error(\"Failed to revoke \" + permission + \" to user \" + userName, e);\n-            throw new RuntimeException(e);\n-        }\n-        return response;\n+    return response;\n+  }\n+\n+  /**\n+   * Creates the specified table in Accumulo\n+   *\n+   * @param tableName Table to be created\n+   * @return {@link VoidResponse}\n+   */\n+  public VoidResponse createTable(String tableName) {\n+    VoidResponse response = new VoidResponse();\n+    try {\n+      TableOperations ops = warehouseConnector.tableOperations();\n+      ops.create(tableName);\n+    } catch (Exception e) {\n+      log.error(\"Table creation failed for table: \" + tableName, e);\n+      throw new RuntimeException(e);\n     }\n-    \n-    /**\n-     * Creates the specified table in Accumulo\n-     * \n-     * @param tableName\n-     *            Table to be created\n-     * @return {@link VoidResponse}\n-     */\n-    public VoidResponse createTable(String tableName) {\n-        VoidResponse response = new VoidResponse();\n-        try {\n-            TableOperations ops = warehouseConnector.tableOperations();\n-            ops.create(tableName);\n-        } catch (Exception e) {\n-            log.error(\"Table creation failed for table: \" + tableName, e);\n-            throw new RuntimeException(e);\n-        }\n-        return response;\n+    return response;\n+  }\n+\n+  /**\n+   * Flushes the memory buffer of the specified table to disk (minor compaction)\n+   *\n+   * @param tableName Table to be flushed\n+   * @return {@link VoidResponse}\n+   */\n+  public VoidResponse flushTable(String tableName) {\n+    VoidResponse response = new VoidResponse();\n+    try {\n+      TableOperations ops = warehouseConnector.tableOperations();\n+      ops.flush(tableName, null, null, false);\n+    } catch (Exception e) {\n+      log.error(\"Table flush failed for table: \" + tableName, e);\n+      throw new RuntimeException(e);\n     }\n-    \n-    /**\n-     * Flushes the memory buffer of the specified table to disk (minor compaction)\n-     * \n-     * @param tableName\n-     *            Table to be flushed\n-     * @return {@link VoidResponse}\n-     */\n-    public VoidResponse flushTable(String tableName) {\n-        VoidResponse response = new VoidResponse();\n-        try {\n-            TableOperations ops = warehouseConnector.tableOperations();\n-            ops.flush(tableName, null, null, false);\n-        } catch (Exception e) {\n-            log.error(\"Table flush failed for table: \" + tableName, e);\n-            throw new RuntimeException(e);\n-        }\n-        return response;\n+    return response;\n+  }\n+\n+  /**\n+   * Sets the specified property on the specified Accumulo table\n+   *\n+   * @param tableName     Table to be configured\n+   * @param propertyName  Property to be set\n+   * @param propertyValue Value to be set\n+   * @return {@link VoidResponse}\n+   */\n+  public VoidResponse setTableProperty(String tableName, String propertyName, String propertyValue) {\n+    VoidResponse response = new VoidResponse();\n+    try {\n+      TableOperations ops = warehouseConnector.tableOperations();\n+      ops.setProperty(tableName, propertyName, propertyValue);\n+    } catch (Exception e) {\n+      log.error(\"Failed to set property: \" + propertyName + \", value: \" + propertyValue + \", table: \" + tableName, e);\n+      throw new RuntimeException(e);\n     }\n-    \n-    /**\n-     * Sets the specified property on the specified Accumulo table\n-     * \n-     * @param tableName\n-     *            Table to be configured\n-     * @param propertyName\n-     *            Property to be set\n-     * @param propertyValue\n-     *            Value to be set\n-     * @return {@link VoidResponse}\n-     */\n-    public VoidResponse setTableProperty(String tableName, String propertyName, String propertyValue) {\n-        VoidResponse response = new VoidResponse();\n-        try {\n-            TableOperations ops = warehouseConnector.tableOperations();\n-            ops.setProperty(tableName, propertyName, propertyValue);\n-        } catch (Exception e) {\n-            log.error(\"Failed to set property: \" + propertyName + \", value: \" + propertyValue + \", table: \" + tableName, e);\n-            throw new RuntimeException(e);\n-        }\n-        return response;\n+    return response;\n+  }\n+\n+  /**\n+   * Removes the specified property from the specified Accumulo table\n+   *\n+   * @param tableName    Table to be configured\n+   * @param propertyName Property to be removed\n+   * @return {@link VoidResponse}\n+   */\n+  public VoidResponse removeTableProperty(String tableName, String propertyName) {\n+    VoidResponse response = new VoidResponse();\n+    try {\n+      TableOperations ops = warehouseConnector.tableOperations();\n+      ops.removeProperty(tableName, propertyName);\n+    } catch (Exception e) {\n+      log.error(\"Failed to remove property: \" + propertyName + \", table: \" + tableName, e);\n+      throw new RuntimeException(e);\n     }\n-    \n-    /**\n-     * Removes the specified property from the specified Accumulo table\n-     * \n-     * @param tableName\n-     *            Table to be configured\n-     * @param propertyName\n-     *            Property to be removed\n-     * @return {@link VoidResponse}\n-     */\n-    public VoidResponse removeTableProperty(String tableName, String propertyName) {\n-        VoidResponse response = new VoidResponse();\n-        try {\n-            TableOperations ops = warehouseConnector.tableOperations();\n-            ops.removeProperty(tableName, propertyName);\n-        } catch (Exception e) {\n-            log.error(\"Failed to remove property: \" + propertyName + \", table: \" + tableName, e);\n-            throw new RuntimeException(e);\n-        }\n-        return response;\n+    return response;\n+  }\n+\n+  /**\n+   * Returns the list of Accumulo table names\n+   *\n+   * @return {@link ListTablesResponse}\n+   */\n+  public ListTablesResponse listTables() {\n+    ListTablesResponse response = new ListTablesResponse();\n+    try {\n+      TableOperations ops = warehouseConnector.tableOperations();\n+      SortedSet<String> availableTables = ops.list();\n+      List<String> tables = new ArrayList<>();\n+      tables.addAll(availableTables);\n+      response.setTables(tables);\n+    } catch (Exception e) {\n+      log.error(\"Failed to retrieve table list\", e);\n+      throw new RuntimeException(e);\n     }\n-    \n-    /**\n-     * Returns the list of Accumulo table names\n-     * \n-     * @return {@link ListTablesResponse}\n-     */\n-    public ListTablesResponse listTables() {\n-        ListTablesResponse response = new ListTablesResponse();\n-        try {\n-            TableOperations ops = warehouseConnector.tableOperations();\n-            SortedSet<String> availableTables = ops.list();\n-            List<String> tables = new ArrayList<>();\n-            tables.addAll(availableTables);\n-            response.setTables(tables);\n-        } catch (Exception e) {\n-            log.error(\"Failed to retrieve table list\", e);\n-            throw new RuntimeException(e);\n-        }\n-        return response;\n+    return response;\n+  }\n+\n+  /**\n+   * Returns the current authorizations assigned to the specified Accumulo user\n+   *\n+   * @param userName Accumulo user name\n+   * @return {@link ListUserAuthorizationsResponse}\n+   */\n+  public ListUserAuthorizationsResponse listUserAuthorizations(String userName) {\n+    ListUserAuthorizationsResponse response = new ListUserAuthorizationsResponse();\n+    try {\n+      SecurityOperations ops = warehouseConnector.securityOperations();\n+      Authorizations authorizations = ops.getUserAuthorizations(userName);\n+      List<String> authorizationsList = new ArrayList<>();\n+      for (byte[] b : authorizations.getAuthorizations()) {\n+        authorizationsList.add(new String(b));\n+      }\n+      response.setUserAuthorizations(authorizationsList);\n+    } catch (Exception e) {\n+      log.error(\"Failed to retrieve authorizations for user: \" + userName, e);\n+      throw new RuntimeException(e);\n     }\n-    \n-    /**\n-     * Returns the current authorizations assigned to the specified Accumulo user\n-     * \n-     * @param userName\n-     *            Accumulo user name\n-     * @return {@link ListUserAuthorizationsResponse}\n-     */\n-    public ListUserAuthorizationsResponse listUserAuthorizations(String userName) {\n-        ListUserAuthorizationsResponse response = new ListUserAuthorizationsResponse();\n-        try {\n-            SecurityOperations ops = warehouseConnector.securityOperations();\n-            Authorizations authorizations = ops.getUserAuthorizations(userName);\n-            List<String> authorizationsList = new ArrayList<>();\n-            for (byte[] b : authorizations.getAuthorizations()) {\n-                authorizationsList.add(new String(b));\n-            }\n-            response.setUserAuthorizations(authorizationsList);\n-        } catch (Exception e) {\n-            log.error(\"Failed to retrieve authorizations for user: \" + userName, e);\n-            throw new RuntimeException(e);\n+    return response;\n+  }\n+\n+  /**\n+   * Returns the current permissions granted to the specified Accumulo user\n+   *\n+   * @param userName Accumulo user name\n+   * @return {@link ListUserPermissionsResponse}\n+   */\n+  public ListUserPermissionsResponse listUserPermissions(String userName) {\n+    ListUserPermissionsResponse response = new ListUserPermissionsResponse();\n+    try {\n+      SecurityOperations ops = warehouseConnector.securityOperations();\n+\n+      List<datawave.webservice.response.objects.SystemPermission> systemPermissions = new ArrayList<>();\n+      SystemPermission[] allSystemPerms = SystemPermission.values();\n+      for (SystemPermission next : allSystemPerms) {\n+        if (ops.hasSystemPermission(userName, next)) {\n+          systemPermissions.add(new datawave.webservice.response.objects.SystemPermission(next.name()));\n         }\n-        return response;\n-    }\n-    \n-    /**\n-     * Returns the current permissions granted to the specified Accumulo user\n-     * \n-     * @param userName\n-     *            Accumulo user name\n-     * @return {@link ListUserPermissionsResponse}\n-     */\n-    public ListUserPermissionsResponse listUserPermissions(String userName) {\n-        ListUserPermissionsResponse response = new ListUserPermissionsResponse();\n-        try {\n-            SecurityOperations ops = warehouseConnector.securityOperations();\n-            \n-            List<datawave.webservice.response.objects.SystemPermission> systemPermissions = new ArrayList<>();\n-            SystemPermission[] allSystemPerms = SystemPermission.values();\n-            for (SystemPermission next : allSystemPerms) {\n-                if (ops.hasSystemPermission(userName, next)) {\n-                    systemPermissions.add(new datawave.webservice.response.objects.SystemPermission(next.name()));\n-                }\n-            }\n-            \n-            List<datawave.webservice.response.objects.TablePermission> tablePermissions = new ArrayList<>();\n-            TableOperations tops = warehouseConnector.tableOperations();\n-            SortedSet<String> tables = tops.list();\n-            TablePermission[] allTablePerms = TablePermission.values();\n-            for (String next : tables) {\n-                for (TablePermission nextPerm : allTablePerms) {\n-                    if (ops.hasTablePermission(userName, next, nextPerm)) {\n-                        tablePermissions.add(new datawave.webservice.response.objects.TablePermission(next, nextPerm.name()));\n-                    }\n-                }\n-            }\n-            \n-            List<datawave.webservice.response.objects.NamespacePermission> namespacePermissions = new ArrayList<>();\n-            NamespaceOperations nops = warehouseConnector.namespaceOperations();\n-            SortedSet<String> namespaces = nops.list();\n-            NamespacePermission[] allNamespacePerms = NamespacePermission.values();\n-            for (String next : namespaces) {\n-                for (NamespacePermission nextPerm : allNamespacePerms) {\n-                    if (ops.hasNamespacePermission(userName, next, nextPerm)) {\n-                        namespacePermissions.add(new datawave.webservice.response.objects.NamespacePermission(next, nextPerm.name()));\n-                    }\n-                }\n-            }\n-            \n-            UserPermissions userPermissions = new UserPermissions();\n-            userPermissions.setSystemPermissions(systemPermissions);\n-            userPermissions.setTablePermissions(tablePermissions);\n-            userPermissions.setNamespacePermissions(namespacePermissions);\n-            response.setUserPermissions(userPermissions);\n-            \n-        } catch (Exception e) {\n-            log.error(\"Failed to retrieve permissions for user: \" + userName, e);\n-            throw new RuntimeException(e);\n+      }\n+\n+      List<datawave.webservice.response.objects.TablePermission> tablePermissions = new ArrayList<>();\n+      TableOperations tops = warehouseConnector.tableOperations();\n+      SortedSet<String> tables = tops.list();\n+      TablePermission[] allTablePerms = TablePermission.values();\n+      for (String next : tables) {\n+        for (TablePermission nextPerm : allTablePerms) {\n+          if (ops.hasTablePermission(userName, next, nextPerm)) {\n+            tablePermissions.add(new datawave.webservice.response.objects.TablePermission(next, nextPerm.name()));\n+          }\n         }\n-        return response;\n-    }\n-    \n-    /**\n-     * Returns list of local Accumulo users\n-     * \n-     * @return {@link ListUsersResponse}\n-     */\n-    public ListUsersResponse listUsers() {\n-        ListUsersResponse response = new ListUsersResponse();\n-        try {\n-            SecurityOperations ops = warehouseConnector.securityOperations();\n-            Set<String> users = ops.listLocalUsers();\n-            List<String> userList = new ArrayList<>();\n-            userList.addAll(users);\n-            response.setUsers(userList);\n-        } catch (Exception e) {\n-            log.error(\"Failed to retrieve Accumulo users\", e);\n-            throw new RuntimeException(e);\n+      }\n+\n+      List<datawave.webservice.response.objects.NamespacePermission> namespacePermissions = new ArrayList<>();\n+      NamespaceOperations nops = warehouseConnector.namespaceOperations();\n+      SortedSet<String> namespaces = nops.list();\n+      NamespacePermission[] allNamespacePerms = NamespacePermission.values();\n+      for (String next : namespaces) {\n+        for (NamespacePermission nextPerm : allNamespacePerms) {\n+          if (ops.hasNamespacePermission(userName, next, nextPerm)) {\n+            namespacePermissions\n+                .add(new datawave.webservice.response.objects.NamespacePermission(next, nextPerm.name()));\n+          }\n         }\n-        return response;\n+      }\n+\n+      UserPermissions userPermissions = new UserPermissions();\n+      userPermissions.setSystemPermissions(systemPermissions);\n+      userPermissions.setTablePermissions(tablePermissions);\n+      userPermissions.setNamespacePermissions(namespacePermissions);\n+      response.setUserPermissions(userPermissions);\n+\n+    } catch (Exception e) {\n+      log.error(\"Failed to retrieve permissions for user: \" + userName, e);\n+      throw new RuntimeException(e);\n     }\n-    \n-    /**\n-     * Performs the specified mutations requested by the {@link UpdateRequest} object\n-     * \n-     * @param request\n-     *            {@link UpdateRequest} containing mutations to write to Accumulo\n-     * @return {@link UpdateResponse} instance\n-     */\n-    public UpdateResponse updateAccumulo(UpdateRequest request) {\n-        \n-        UpdateResponse response = new UpdateResponse();\n-        try {\n-            List<TableUpdate> tableUpdateList = request.getTableUpdates();\n-            Set<String> tableNameSet = new HashSet<>();\n-            if (tableUpdateList != null) {\n-                for (TableUpdate tu : tableUpdateList) {\n-                    tableNameSet.add(tu.getTable());\n-                }\n-            }\n-            String[] tableNameArray = new String[tableNameSet.size()];\n-            tableNameSet.toArray(tableNameArray);\n-            \n-            log.trace(\"Processing Update Request - Authorization Passed!\");\n-            \n-            int mutationsAccepted = 0;\n-            int mutationsDenied = 0;\n-            \n-            ArrayList<String> tablesNotFound = new ArrayList<>();\n-            HashMap<String,byte[]> globalDataRefs = new HashMap<>();\n-            \n-            MultiTableBatchWriter writer = warehouseConnector\n-                            .createMultiTableBatchWriter(new BatchWriterConfig().setMaxLatency(3, TimeUnit.SECONDS).setMaxMemory(50000).setMaxWriteThreads(5));\n-            \n-            log.trace(\"Processing Update Request - Connector and MultiTableBatchWriter created!\");\n-            \n-            List<ReferencedValue> refValues = request.getReferencedValues();\n-            if (refValues != null) {\n-                for (ReferencedValue currRef : refValues) {\n-                    String name = currRef.getId();\n-                    byte[] payload = currRef.getValueAsBytes();\n-                    globalDataRefs.put(name, payload);\n-                    log.trace(\"Processing Update Request - Retrieved ReferencedValue '{}' from the message\", name);\n-                }\n-            }\n-            \n-            if (tableUpdateList != null) {\n-                \n-                for (TableUpdate next : tableUpdateList) {\n-                    String tableName = next.getTable();\n-                    List<datawave.webservice.request.objects.Mutation> mutations = next.getMutations();\n-                    \n-                    log.trace(\"Processing Update Request - Processing mutations for '{}'\", tableName);\n-                    \n-                    try {\n-                        BatchWriter bw = writer.getBatchWriter(tableName);\n-                        \n-                        for (datawave.webservice.request.objects.Mutation nextMutation : mutations) {\n-                            String rowId = nextMutation.getRow().getValue();\n-                            \n-                            Mutation m = new Mutation(new Text(rowId));\n-                            \n-                            List<MutationEntry> mutationEntries = nextMutation.getMutationEntries();\n-                            if (mutationEntries != null) {\n-                                \n-                                for (MutationEntry currEntry : mutationEntries) {\n-                                    String colFamily = currEntry.getColFam().getValue();\n-                                    String colQualifier = currEntry.getColQual().getValue();\n-                                    String visibilityString = currEntry.getVisibility();\n-                                    \n-                                    log.trace(\"Mutation visibility string '{}'\", visibilityString);\n-                                    \n-                                    ColumnVisibility visibility = new ColumnVisibility(visibilityString);\n-                                    \n-                                    log.trace(\"Processing Update Request - Processing mutation: {}:{}:{}:{}\", rowId, colFamily, colQualifier, visibility);\n-                                    \n-                                    Object valueInfo = currEntry.getValue();\n-                                    if (valueInfo instanceof ValueReference) {\n-                                        ValueReference ref = (ValueReference) valueInfo;\n-                                        String refid = ref.getId();\n-                                        if (refid != null) {\n-                                            byte[] data = globalDataRefs.get(refid);\n-                                            if (data != null) {\n-                                                m.put(new Text(colFamily), new Text(colQualifier), visibility, new Value(data));\n-                                                mutationsAccepted++;\n-                                                log.trace(\"Processing Update Request - Mutation Accepted (SetValueRef)\");\n-                                            } else {\n-                                                mutationsDenied++;\n-                                                // TODO refid used that is not defined at\n-                                                // the row level!!!\n-                                                log.trace(\"Processing Update Request - Mutation Denied (SetValueRef)\");\n-                                            }\n-                                        } else {\n-                                            // even though this is required in the schema,\n-                                            // it may not actually be there.\n-                                            mutationsDenied++;\n-                                            \n-                                            log.trace(\"Processing Update Request - Mutation Denied (SetValueRef)\");\n-                                        }\n-                                    } else if (valueInfo instanceof OptionallyEncodedString) {\n-                                        OptionallyEncodedString value = (OptionallyEncodedString) valueInfo;\n-                                        \n-                                        m.put(new Text(colFamily), new Text(colQualifier), visibility, new Value(value.getValueAsBytes()));\n-                                        mutationsAccepted++;\n-                                        log.trace(\"Processing Update Request - Mutation Accepted (SetValue)\");\n-                                    } else if (valueInfo instanceof Boolean) {\n-                                        Boolean remove = (Boolean) valueInfo;\n-                                        \n-                                        if (remove.equals(Boolean.TRUE)) {\n-                                            m.putDelete(new Text(colFamily), new Text(colQualifier), visibility);\n-                                            mutationsAccepted++;\n-                                            log.trace(\"Processing Update Request - Mutation Accepted (Remove)\");\n-                                        }\n-                                    } else {\n-                                        mutationsDenied++;\n-                                        // TODO just in case...\n-                                        log.trace(\"Processing Update Request - Mutation Denied (NoValidActionType)\");\n-                                    }\n-                                }\n-                            }\n-                            \n-                            bw.addMutation(m);\n-                        }\n-                    } catch (TableNotFoundException | AccumuloException | AccumuloSecurityException e) {\n-                        log.info(\"Accumulo table operation(s) failed\", e);\n-                        tablesNotFound.add(tableName);\n+    return response;\n+  }\n+\n+  /**\n+   * Returns list of local Accumulo users\n+   *\n+   * @return {@link ListUsersResponse}\n+   */\n+  public ListUsersResponse listUsers() {\n+    ListUsersResponse response = new ListUsersResponse();\n+    try {\n+      SecurityOperations ops = warehouseConnector.securityOperations();\n+      Set<String> users = ops.listLocalUsers();\n+      List<String> userList = new ArrayList<>();\n+      userList.addAll(users);\n+      response.setUsers(userList);\n+    } catch (Exception e) {\n+      log.error(\"Failed to retrieve Accumulo users\", e);\n+      throw new RuntimeException(e);\n+    }\n+    return response;\n+  }\n+\n+  /**\n+   * Performs the specified mutations requested by the {@link UpdateRequest} object\n+   *\n+   * @param request {@link UpdateRequest} containing mutations to write to Accumulo\n+   * @return {@link UpdateResponse} instance\n+   */\n+  public UpdateResponse updateAccumulo(UpdateRequest request) {\n+\n+    UpdateResponse response = new UpdateResponse();\n+    try {\n+      List<TableUpdate> tableUpdateList = request.getTableUpdates();\n+      Set<String> tableNameSet = new HashSet<>();\n+      if (tableUpdateList != null) {\n+        for (TableUpdate tu : tableUpdateList) {\n+          tableNameSet.add(tu.getTable());\n+        }\n+      }\n+      String[] tableNameArray = new String[tableNameSet.size()];\n+      tableNameSet.toArray(tableNameArray);\n+\n+      log.trace(\"Processing Update Request - Authorization Passed!\");\n+\n+      int mutationsAccepted = 0;\n+      int mutationsDenied = 0;\n+\n+      ArrayList<String> tablesNotFound = new ArrayList<>();\n+      HashMap<String, byte[]> globalDataRefs = new HashMap<>();\n+\n+      MultiTableBatchWriter writer = warehouseConnector\n+          .createMultiTableBatchWriter(\n+              new BatchWriterConfig().setMaxLatency(3, TimeUnit.SECONDS).setMaxMemory(50000).setMaxWriteThreads(5));\n+\n+      log.trace(\"Processing Update Request - Connector and MultiTableBatchWriter created!\");\n+\n+      List<ReferencedValue> refValues = request.getReferencedValues();\n+      if (refValues != null) {\n+        for (ReferencedValue currRef : refValues) {\n+          String name = currRef.getId();\n+          byte[] payload = currRef.getValueAsBytes();\n+          globalDataRefs.put(name, payload);\n+          log.trace(\"Processing Update Request - Retrieved ReferencedValue '{}' from the message\", name);\n+        }\n+      }\n+\n+      if (tableUpdateList != null) {\n+\n+        for (TableUpdate next : tableUpdateList) {\n+          String tableName = next.getTable();\n+          List<datawave.webservice.request.objects.Mutation> mutations = next.getMutations();\n+\n+          log.trace(\"Processing Update Request - Processing mutations for '{}'\", tableName);\n+\n+          try {\n+            BatchWriter bw = writer.getBatchWriter(tableName);\n+\n+            for (datawave.webservice.request.objects.Mutation nextMutation : mutations) {\n+              String rowId = nextMutation.getRow().getValue();\n+\n+              Mutation m = new Mutation(new Text(rowId));\n+\n+              List<MutationEntry> mutationEntries = nextMutation.getMutationEntries();\n+              if (mutationEntries != null) {\n+\n+                for (MutationEntry currEntry : mutationEntries) {\n+                  String colFamily = currEntry.getColFam().getValue();\n+                  String colQualifier = currEntry.getColQual().getValue();\n+                  String visibilityString = currEntry.getVisibility();\n+\n+                  log.trace(\"Mutation visibility string '{}'\", visibilityString);\n+\n+                  ColumnVisibility visibility = new ColumnVisibility(visibilityString);\n+\n+                  log.trace(\"Processing Update Request - Processing mutation: {}:{}:{}:{}\", rowId, colFamily,\n+                      colQualifier, visibility);\n+\n+                  Object valueInfo = currEntry.getValue();\n+                  if (valueInfo instanceof ValueReference) {\n+                    ValueReference ref = (ValueReference) valueInfo;\n+                    String refid = ref.getId();\n+                    if (refid != null) {\n+                      byte[] data = globalDataRefs.get(refid);\n+                      if (data != null) {\n+                        m.put(new Text(colFamily), new Text(colQualifier), visibility, new Value(data));\n+                        mutationsAccepted++;\n+                        log.trace(\"Processing Update Request - Mutation Accepted (SetValueRef)\");\n+                      } else {\n+                        mutationsDenied++;\n+                        // TODO refid used that is not defined at\n+                        // the row level!!!\n+                        log.trace(\"Processing Update Request - Mutation Denied (SetValueRef)\");\n+                      }\n+                    } else {\n+                      // even though this is required in the schema,\n+                      // it may not actually be there.\n+                      mutationsDenied++;\n+\n+                      log.trace(\"Processing Update Request - Mutation Denied (SetValueRef)\");\n                     }\n-                }\n-            }\n-            \n-            Map<KeyExtent,Set<SecurityErrorCode>> authFailures = null;\n-            List<ConstraintViolationSummary> cvs = null;\n-            \n-            try {\n-                writer.close();\n-            } catch (MutationsRejectedException e) {\n-                authFailures = e.getAuthorizationFailuresMap();\n-                cvs = e.getConstraintViolationSummaries();\n-            }\n-            \n-            response.setMutationsAccepted(mutationsAccepted);\n-            response.setMutationsDenied(mutationsDenied);\n-            \n-            if (authFailures != null) {\n-                List<AuthorizationFailure> authorizationFailures = new ArrayList<>();\n-                for (Map.Entry<KeyExtent,Set<SecurityErrorCode>> next : authFailures.entrySet()) {\n-                    AuthorizationFailure failure = new AuthorizationFailure();\n-                    \n-                    String mappedTableName = null;\n-                    try {\n-                        mappedTableName = Tables.getTableName(warehouseConnector.getInstance(), next.getKey().getTableId().toString());\n-                    } catch (TableNotFoundException e) {\n-                        mappedTableName = \"unknown\";\n+                  } else if (valueInfo instanceof OptionallyEncodedString) {\n+                    OptionallyEncodedString value = (OptionallyEncodedString) valueInfo;\n+\n+                    m.put(new Text(colFamily), new Text(colQualifier), visibility, new Value(value.getValueAsBytes()));\n+                    mutationsAccepted++;\n+                    log.trace(\"Processing Update Request - Mutation Accepted (SetValue)\");\n+                  } else if (valueInfo instanceof Boolean) {\n+                    Boolean remove = (Boolean) valueInfo;\n+\n+                    if (remove.equals(Boolean.TRUE)) {\n+                      m.putDelete(new Text(colFamily), new Text(colQualifier), visibility);\n+                      mutationsAccepted++;\n+                      log.trace(\"Processing Update Request - Mutation Accepted (Remove)\");\n                     }\n-                    failure.setTableName(new OptionallyEncodedString(mappedTableName));\n-                    failure.setEndRow(new OptionallyEncodedString(next.getKey().getEndRow().toString()));\n-                    failure.setPrevEndRow(new OptionallyEncodedString(next.getKey().getPrevEndRow().toString()));\n-                    // TODO: Add SecurityErrorCode to the AuthorizationFailure object\n-                    authorizationFailures.add(failure);\n+                  } else {\n+                    mutationsDenied++;\n+                    // TODO just in case...\n+                    log.trace(\"Processing Update Request - Mutation Denied (NoValidActionType)\");\n+                  }\n                 }\n-                response.setAuthorizationFailures(authorizationFailures);\n-            }\n-            if (cvs != null) {\n-                List<ConstraintViolation> constraintViolations = new ArrayList<>();\n-                for (ConstraintViolationSummary next : cvs) {\n-                    ConstraintViolation cvsEntry = new ConstraintViolation();\n-                    cvsEntry.setConstraintClass(next.constrainClass);\n-                    cvsEntry.setViolationCode(Integer.valueOf(next.violationCode));\n-                    cvsEntry.setNumberViolations(Long.toString(next.numberOfViolatingMutations));\n-                    cvsEntry.setDescription(next.violationDescription);\n-                    constraintViolations.add(cvsEntry);\n-                }\n-                response.setConstraintViolations(constraintViolations);\n-            }\n-            \n-            if (!tablesNotFound.isEmpty()) {\n-                response.setTableNotFoundList(tablesNotFound);\n+              }\n+\n+              bw.addMutation(m);\n             }\n-            return response;\n-        } catch (Exception e) {\n-            log.error(\"Update operation encountered errors\", e);\n-            throw new RuntimeException(e);\n+          } catch (TableNotFoundException | AccumuloException | AccumuloSecurityException e) {\n+            log.info(\"Accumulo table operation(s) failed\", e);\n+            tablesNotFound.add(tableName);\n+          }\n         }\n+      }\n+\n+      Map<KeyExtent, Set<SecurityErrorCode>> authFailures = null;\n+      List<ConstraintViolationSummary> cvs = null;\n+\n+      try {\n+        writer.close();\n+      } catch (MutationsRejectedException e) {\n+        authFailures = e.getAuthorizationFailuresMap();\n+        cvs = e.getConstraintViolationSummaries();\n+      }\n+\n+      response.setMutationsAccepted(mutationsAccepted);\n+      response.setMutationsDenied(mutationsDenied);\n+\n+      if (authFailures != null) {\n+        List<AuthorizationFailure> authorizationFailures = new ArrayList<>();\n+        for (Map.Entry<KeyExtent, Set<SecurityErrorCode>> next : authFailures.entrySet()) {\n+          AuthorizationFailure failure = new AuthorizationFailure();\n+\n+          String mappedTableName = null;\n+          try {\n+            mappedTableName =\n+                Tables.getTableName(warehouseConnector.getInstance(), next.getKey().getTableId().toString());\n+          } catch (TableNotFoundException e) {\n+            mappedTableName = \"unknown\";\n+          }\n+          failure.setTableName(new OptionallyEncodedString(mappedTableName));\n+          failure.setEndRow(new OptionallyEncodedString(next.getKey().getEndRow().toString()));\n+          failure.setPrevEndRow(new OptionallyEncodedString(next.getKey().getPrevEndRow().toString()));\n+          // TODO: Add SecurityErrorCode to the AuthorizationFailure object\n+          authorizationFailures.add(failure);\n+        }\n+        response.setAuthorizationFailures(authorizationFailures);\n+      }\n+      if (cvs != null) {\n+        List<ConstraintViolation> constraintViolations = new ArrayList<>();\n+        for (ConstraintViolationSummary next : cvs) {\n+          ConstraintViolation cvsEntry = new ConstraintViolation();\n+          cvsEntry.setConstraintClass(next.constrainClass);\n+          cvsEntry.setViolationCode(Integer.valueOf(next.violationCode));\n+          cvsEntry.setNumberViolations(Long.toString(next.numberOfViolatingMutations));\n+          cvsEntry.setDescription(next.violationDescription);\n+          constraintViolations.add(cvsEntry);\n+        }\n+        response.setConstraintViolations(constraintViolations);\n+      }\n+\n+      if (!tablesNotFound.isEmpty()) {\n+        response.setTableNotFoundList(tablesNotFound);\n+      }\n+      return response;\n+    } catch (Exception e) {\n+      log.error(\"Update operation encountered errors\", e);\n+      throw new RuntimeException(e);\n     }\n-    \n-    /**\n-     * Validates that the accumulo user can see this visibility and return the printable strings that correspond with this visibility\n-     * \n-     * @param visibilityArray\n-     *            Array of visibility strings to check\n-     * @return {@link ValidateVisibilityResponse}\n-     */\n-    public ValidateVisibilityResponse validateVisibilities(String[] visibilityArray) {\n-        \n-        ValidateVisibilityResponse response = new ValidateVisibilityResponse();\n+  }\n+\n+  /**\n+   * Validates that the accumulo user can see this visibility and return the printable strings that correspond with this visibility\n+   *\n+   * @param visibilityArray Array of visibility strings to check\n+   * @return {@link ValidateVisibilityResponse}\n+   */\n+  public ValidateVisibilityResponse validateVisibilities(String[] visibilityArray) {\n+\n+    ValidateVisibilityResponse response = new ValidateVisibilityResponse();\n+    try {\n+      SecurityOperations securityOps = warehouseConnector.securityOperations();\n+      Authorizations authorizations = securityOps.getUserAuthorizations(warehouseConnector.whoami());\n+      List<Visibility> visibilityList = new ArrayList<>();\n+\n+      for (String v : visibilityArray) {\n         try {\n-            SecurityOperations securityOps = warehouseConnector.securityOperations();\n-            Authorizations authorizations = securityOps.getUserAuthorizations(warehouseConnector.whoami());\n-            List<Visibility> visibilityList = new ArrayList<>();\n-            \n-            for (String v : visibilityArray) {\n-                try {\n-                    Visibility vis = new Visibility();\n-                    vis.setValid(false);\n-                    visibilityList.add(vis);\n-                    try {\n-                        Map<String,String> markings = markingFunctions.translateFromColumnVisibilityForAuths(new ColumnVisibility(v), authorizations);\n-                        vis.setVisibility(v);\n-                        vis.setValid(true);\n-                        vis.setMarkings(markings);\n-                    } catch (Exception e) {\n-                        response.addMessage(\"Could not interpret \" + v);\n-                    }\n-                } catch (RuntimeException e) {\n-                    log.info(\"Marking functions operation failed\", e);\n-                    response.addMessage(\"Could not interpret \" + v);\n-                }\n-            }\n-            response.setVisibilityList(visibilityList);\n-            return response;\n-        } catch (Exception e) {\n-            log.error(\"ValidateVisibilities operation failed\", e);\n-            throw new RuntimeException(e);\n+          Visibility vis = new Visibility();\n+          vis.setValid(false);\n+          visibilityList.add(vis);\n+          try {\n+            Map<String, String> markings =\n+                markingFunctions.translateFromColumnVisibilityForAuths(new ColumnVisibility(v), authorizations);\n+            vis.setVisibility(v);\n+            vis.setValid(true);\n+            vis.setMarkings(markings);\n+          } catch (Exception e) {\n+            response.addMessage(\"Could not interpret \" + v);\n+          }\n+        } catch (RuntimeException e) {\n+          log.info(\"Marking functions operation failed\", e);\n+          response.addMessage(\"Could not interpret \" + v);\n         }\n+      }\n+      response.setVisibilityList(visibilityList);\n+      return response;\n+    } catch (Exception e) {\n+      log.error(\"ValidateVisibilities operation failed\", e);\n+      throw new RuntimeException(e);\n     }\n+  }\n }\n",
            "diff_size": 601
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "32",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/102/AdminService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/naturalize/102/AdminService.java\nindex 932f4d05ec4..035c0715885 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/102/AdminService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/naturalize/102/AdminService.java\n@@ -394,8 +394,7 @@ public class AdminService {\n             ArrayList<String> tablesNotFound = new ArrayList<>();\n             HashMap<String,byte[]> globalDataRefs = new HashMap<>();\n             \n-            MultiTableBatchWriter writer = warehouseConnector\n-                            .createMultiTableBatchWriter(new BatchWriterConfig().setMaxLatency(3, TimeUnit.SECONDS).setMaxMemory(50000).setMaxWriteThreads(5));\n+            MultiTableBatchWriter writer = warehouseConnector.createMultiTableBatchWriter(new BatchWriterConfig().setMaxLatency(3, TimeUnit.SECONDS).setMaxMemory(50000).setMaxWriteThreads(5));\n             \n             log.trace(\"Processing Update Request - Connector and MultiTableBatchWriter created!\");\n             \n@@ -426,21 +425,20 @@ public class AdminService {\n                             Mutation m = new Mutation(new Text(rowId));\n                             \n                             List<MutationEntry> mutationEntries = nextMutation.getMutationEntries();\n-                            if (mutationEntries != null) {\n+if (mutationEntries != null) {\n                                 \n                                 for (MutationEntry currEntry : mutationEntries) {\n-                                    String colFamily = currEntry.getColFam().getValue();\n+    String colFamily = currEntry.getColFam().getValue();\n                                     String colQualifier = currEntry.getColQual().getValue();\n                                     String visibilityString = currEntry.getVisibility();\n-                                    \n-                                    log.trace(\"Mutation visibility string '{}'\", visibilityString);\n+log.trace(\"Mutation visibility string '{}'\", visibilityString);\n                                     \n                                     ColumnVisibility visibility = new ColumnVisibility(visibilityString);\n                                     \n                                     log.trace(\"Processing Update Request - Processing mutation: {}:{}:{}:{}\", rowId, colFamily, colQualifier, visibility);\n                                     \n                                     Object valueInfo = currEntry.getValue();\n-                                    if (valueInfo instanceof ValueReference) {\n+if (valueInfo instanceof ValueReference) {\n                                         ValueReference ref = (ValueReference) valueInfo;\n                                         String refid = ref.getId();\n                                         if (refid != null) {\n@@ -459,9 +457,8 @@ public class AdminService {\n                                             // even though this is required in the schema,\n                                             // it may not actually be there.\n                                             mutationsDenied++;\n-                                            \n-                                            log.trace(\"Processing Update Request - Mutation Denied (SetValueRef)\");\n-                                        }\n+log.trace(\"Processing Update Request - Mutation Denied (SetValueRef)\");\n+    }\n                                     } else if (valueInfo instanceof OptionallyEncodedString) {\n                                         OptionallyEncodedString value = (OptionallyEncodedString) valueInfo;\n                                         \n@@ -472,7 +469,7 @@ public class AdminService {\n                                         Boolean remove = (Boolean) valueInfo;\n                                         \n                                         if (remove.equals(Boolean.TRUE)) {\n-                                            m.putDelete(new Text(colFamily), new Text(colQualifier), visibility);\n+    m.putDelete(new Text(colFamily), new Text(colQualifier), visibility);\n                                             mutationsAccepted++;\n                                             log.trace(\"Processing Update Request - Mutation Accepted (Remove)\");\n                                         }\n@@ -485,7 +482,7 @@ public class AdminService {\n                             }\n                             \n                             bw.addMutation(m);\n-                        }\n+    }\n                     } catch (TableNotFoundException | AccumuloException | AccumuloSecurityException e) {\n                         log.info(\"Accumulo table operation(s) failed\", e);\n                         tablesNotFound.add(tableName);\n@@ -588,4 +585,4 @@ public class AdminService {\n             throw new RuntimeException(e);\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "32",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/102/AdminService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/codebuff/102/AdminService.java\nindex 932f4d05ec4..ed8ab31fea6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/102/AdminService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/codebuff/102/AdminService.java\n@@ -47,7 +47,6 @@ import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.stereotype.Service;\n-\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.HashSet;\n@@ -60,14 +59,14 @@ import java.util.concurrent.TimeUnit;\n /**\n  * This service provides utility methods for common Accumulo operations and administrative functions\n  */\n+\n @Service\n @ConditionalOnProperty(name = \"accumulo.admin.enabled\", havingValue = \"true\", matchIfMissing = true)\n public class AdminService {\n-    \n     private final Logger log = LoggerFactory.getLogger(this.getClass());\n     private final MarkingFunctions markingFunctions;\n     private final Connector warehouseConnector;\n-    \n+\n     @Autowired\n     public AdminService(@Qualifier(\"warehouse\") Connector warehouseConnector, MarkingFunctions markingFunctions) {\n         this.warehouseConnector = warehouseConnector;\n@@ -83,6 +82,7 @@ public class AdminService {\n      *            Accumulo SystemPermission\n      * @return {@link VoidResponse}\n      */\n+\n     public VoidResponse grantSystemPermission(String userName, String permission) {\n         VoidResponse response = new VoidResponse();\n         try {\n@@ -104,6 +104,7 @@ public class AdminService {\n      *            Accumulo SystemPermission\n      * @return {@link VoidResponse}\n      */\n+\n     public VoidResponse revokeSystemPermission(String userName, String permission) {\n         VoidResponse response = new VoidResponse();\n         try {\n@@ -127,6 +128,7 @@ public class AdminService {\n      *            Accumulo TablePermission\n      * @return {@link VoidResponse}\n      */\n+\n     public VoidResponse grantTablePermission(String userName, String tableName, String permission) {\n         VoidResponse response = new VoidResponse();\n         try {\n@@ -150,6 +152,7 @@ public class AdminService {\n      *            Accumulo TablePermission\n      * @return {@link VoidResponse}\n      */\n+\n     public VoidResponse revokeTablePermission(String userName, String tableName, String permission) {\n         VoidResponse response = new VoidResponse();\n         try {\n@@ -169,6 +172,7 @@ public class AdminService {\n      *            Table to be created\n      * @return {@link VoidResponse}\n      */\n+\n     public VoidResponse createTable(String tableName) {\n         VoidResponse response = new VoidResponse();\n         try {\n@@ -188,6 +192,7 @@ public class AdminService {\n      *            Table to be flushed\n      * @return {@link VoidResponse}\n      */\n+\n     public VoidResponse flushTable(String tableName) {\n         VoidResponse response = new VoidResponse();\n         try {\n@@ -211,6 +216,7 @@ public class AdminService {\n      *            Value to be set\n      * @return {@link VoidResponse}\n      */\n+\n     public VoidResponse setTableProperty(String tableName, String propertyName, String propertyValue) {\n         VoidResponse response = new VoidResponse();\n         try {\n@@ -232,6 +238,7 @@ public class AdminService {\n      *            Property to be removed\n      * @return {@link VoidResponse}\n      */\n+\n     public VoidResponse removeTableProperty(String tableName, String propertyName) {\n         VoidResponse response = new VoidResponse();\n         try {\n@@ -249,6 +256,7 @@ public class AdminService {\n      * \n      * @return {@link ListTablesResponse}\n      */\n+\n     public ListTablesResponse listTables() {\n         ListTablesResponse response = new ListTablesResponse();\n         try {\n@@ -271,6 +279,7 @@ public class AdminService {\n      *            Accumulo user name\n      * @return {@link ListUserAuthorizationsResponse}\n      */\n+\n     public ListUserAuthorizationsResponse listUserAuthorizations(String userName) {\n         ListUserAuthorizationsResponse response = new ListUserAuthorizationsResponse();\n         try {\n@@ -295,11 +304,11 @@ public class AdminService {\n      *            Accumulo user name\n      * @return {@link ListUserPermissionsResponse}\n      */\n+\n     public ListUserPermissionsResponse listUserPermissions(String userName) {\n         ListUserPermissionsResponse response = new ListUserPermissionsResponse();\n         try {\n             SecurityOperations ops = warehouseConnector.securityOperations();\n-            \n             List<datawave.webservice.response.objects.SystemPermission> systemPermissions = new ArrayList<>();\n             SystemPermission[] allSystemPerms = SystemPermission.values();\n             for (SystemPermission next : allSystemPerms) {\n@@ -307,7 +316,7 @@ public class AdminService {\n                     systemPermissions.add(new datawave.webservice.response.objects.SystemPermission(next.name()));\n                 }\n             }\n-            \n+\n             List<datawave.webservice.response.objects.TablePermission> tablePermissions = new ArrayList<>();\n             TableOperations tops = warehouseConnector.tableOperations();\n             SortedSet<String> tables = tops.list();\n@@ -319,7 +328,7 @@ public class AdminService {\n                     }\n                 }\n             }\n-            \n+\n             List<datawave.webservice.response.objects.NamespacePermission> namespacePermissions = new ArrayList<>();\n             NamespaceOperations nops = warehouseConnector.namespaceOperations();\n             SortedSet<String> namespaces = nops.list();\n@@ -331,13 +340,12 @@ public class AdminService {\n                     }\n                 }\n             }\n-            \n+\n             UserPermissions userPermissions = new UserPermissions();\n             userPermissions.setSystemPermissions(systemPermissions);\n             userPermissions.setTablePermissions(tablePermissions);\n             userPermissions.setNamespacePermissions(namespacePermissions);\n             response.setUserPermissions(userPermissions);\n-            \n         } catch (Exception e) {\n             log.error(\"Failed to retrieve permissions for user: \" + userName, e);\n             throw new RuntimeException(e);\n@@ -350,6 +358,7 @@ public class AdminService {\n      * \n      * @return {@link ListUsersResponse}\n      */\n+\n     public ListUsersResponse listUsers() {\n         ListUsersResponse response = new ListUsersResponse();\n         try {\n@@ -372,8 +381,8 @@ public class AdminService {\n      *            {@link UpdateRequest} containing mutations to write to Accumulo\n      * @return {@link UpdateResponse} instance\n      */\n+\n     public UpdateResponse updateAccumulo(UpdateRequest request) {\n-        \n         UpdateResponse response = new UpdateResponse();\n         try {\n             List<TableUpdate> tableUpdateList = request.getTableUpdates();\n@@ -383,22 +392,18 @@ public class AdminService {\n                     tableNameSet.add(tu.getTable());\n                 }\n             }\n+\n             String[] tableNameArray = new String[tableNameSet.size()];\n             tableNameSet.toArray(tableNameArray);\n-            \n             log.trace(\"Processing Update Request - Authorization Passed!\");\n-            \n+\n             int mutationsAccepted = 0;\n             int mutationsDenied = 0;\n-            \n             ArrayList<String> tablesNotFound = new ArrayList<>();\n             HashMap<String,byte[]> globalDataRefs = new HashMap<>();\n-            \n-            MultiTableBatchWriter writer = warehouseConnector\n-                            .createMultiTableBatchWriter(new BatchWriterConfig().setMaxLatency(3, TimeUnit.SECONDS).setMaxMemory(50000).setMaxWriteThreads(5));\n-            \n+            MultiTableBatchWriter writer = warehouseConnector.createMultiTableBatchWriter(new BatchWriterConfig().setMaxLatency(3, TimeUnit.SECONDS).setMaxMemory(50000).setMaxWriteThreads(5));\n             log.trace(\"Processing Update Request - Connector and MultiTableBatchWriter created!\");\n-            \n+\n             List<ReferencedValue> refValues = request.getReferencedValues();\n             if (refValues != null) {\n                 for (ReferencedValue currRef : refValues) {\n@@ -408,37 +413,29 @@ public class AdminService {\n                     log.trace(\"Processing Update Request - Retrieved ReferencedValue '{}' from the message\", name);\n                 }\n             }\n-            \n+\n+\n             if (tableUpdateList != null) {\n-                \n                 for (TableUpdate next : tableUpdateList) {\n                     String tableName = next.getTable();\n                     List<datawave.webservice.request.objects.Mutation> mutations = next.getMutations();\n-                    \n                     log.trace(\"Processing Update Request - Processing mutations for '{}'\", tableName);\n-                    \n                     try {\n                         BatchWriter bw = writer.getBatchWriter(tableName);\n-                        \n                         for (datawave.webservice.request.objects.Mutation nextMutation : mutations) {\n                             String rowId = nextMutation.getRow().getValue();\n-                            \n                             Mutation m = new Mutation(new Text(rowId));\n-                            \n                             List<MutationEntry> mutationEntries = nextMutation.getMutationEntries();\n                             if (mutationEntries != null) {\n-                                \n                                 for (MutationEntry currEntry : mutationEntries) {\n                                     String colFamily = currEntry.getColFam().getValue();\n                                     String colQualifier = currEntry.getColQual().getValue();\n                                     String visibilityString = currEntry.getVisibility();\n-                                    \n                                     log.trace(\"Mutation visibility string '{}'\", visibilityString);\n-                                    \n+\n                                     ColumnVisibility visibility = new ColumnVisibility(visibilityString);\n-                                    \n                                     log.trace(\"Processing Update Request - Processing mutation: {}:{}:{}:{}\", rowId, colFamily, colQualifier, visibility);\n-                                    \n+\n                                     Object valueInfo = currEntry.getValue();\n                                     if (valueInfo instanceof ValueReference) {\n                                         ValueReference ref = (ValueReference) valueInfo;\n@@ -459,31 +456,27 @@ public class AdminService {\n                                             // even though this is required in the schema,\n                                             // it may not actually be there.\n                                             mutationsDenied++;\n-                                            \n                                             log.trace(\"Processing Update Request - Mutation Denied (SetValueRef)\");\n                                         }\n                                     } else if (valueInfo instanceof OptionallyEncodedString) {\n                                         OptionallyEncodedString value = (OptionallyEncodedString) valueInfo;\n-                                        \n                                         m.put(new Text(colFamily), new Text(colQualifier), visibility, new Value(value.getValueAsBytes()));\n                                         mutationsAccepted++;\n                                         log.trace(\"Processing Update Request - Mutation Accepted (SetValue)\");\n-                                    } else if (valueInfo instanceof Boolean) {\n-                                        Boolean remove = (Boolean) valueInfo;\n-                                        \n-                                        if (remove.equals(Boolean.TRUE)) {\n-                                            m.putDelete(new Text(colFamily), new Text(colQualifier), visibility);\n-                                            mutationsAccepted++;\n-                                            log.trace(\"Processing Update Request - Mutation Accepted (Remove)\");\n-                                        }\n+                                                                                } else if (valueInfo instanceof Boolean) {\n+                                               Boolean remove = (Boolean) valueInfo;\n+                                               if (remove.equals(Boolean.TRUE)) {\n+                                                   m.putDelete(new Text(colFamily), new Text(colQualifier), visibility);\n+                                                   mutationsAccepted++;\n+                                                   log.trace(\"Processing Update Request - Mutation Accepted (Remove)\");\n+                                               }\n                                     } else {\n-                                        mutationsDenied++;\n+                                               mutationsDenied++;\n                                         // TODO just in case...\n-                                        log.trace(\"Processing Update Request - Mutation Denied (NoValidActionType)\");\n-                                    }\n+                                               log.trace(\"Processing Update Request - Mutation Denied (NoValidActionType)\");\n+                                           }\n                                 }\n                             }\n-                            \n                             bw.addMutation(m);\n                         }\n                     } catch (TableNotFoundException | AccumuloException | AccumuloSecurityException e) {\n@@ -492,25 +485,21 @@ public class AdminService {\n                     }\n                 }\n             }\n-            \n+\n             Map<KeyExtent,Set<SecurityErrorCode>> authFailures = null;\n             List<ConstraintViolationSummary> cvs = null;\n-            \n             try {\n                 writer.close();\n             } catch (MutationsRejectedException e) {\n                 authFailures = e.getAuthorizationFailuresMap();\n                 cvs = e.getConstraintViolationSummaries();\n             }\n-            \n             response.setMutationsAccepted(mutationsAccepted);\n             response.setMutationsDenied(mutationsDenied);\n-            \n             if (authFailures != null) {\n                 List<AuthorizationFailure> authorizationFailures = new ArrayList<>();\n                 for (Map.Entry<KeyExtent,Set<SecurityErrorCode>> next : authFailures.entrySet()) {\n                     AuthorizationFailure failure = new AuthorizationFailure();\n-                    \n                     String mappedTableName = null;\n                     try {\n                         mappedTableName = Tables.getTableName(warehouseConnector.getInstance(), next.getKey().getTableId().toString());\n@@ -525,6 +514,8 @@ public class AdminService {\n                 }\n                 response.setAuthorizationFailures(authorizationFailures);\n             }\n+\n+\n             if (cvs != null) {\n                 List<ConstraintViolation> constraintViolations = new ArrayList<>();\n                 for (ConstraintViolationSummary next : cvs) {\n@@ -537,7 +528,8 @@ public class AdminService {\n                 }\n                 response.setConstraintViolations(constraintViolations);\n             }\n-            \n+\n+\n             if (!tablesNotFound.isEmpty()) {\n                 response.setTableNotFoundList(tablesNotFound);\n             }\n@@ -555,14 +547,13 @@ public class AdminService {\n      *            Array of visibility strings to check\n      * @return {@link ValidateVisibilityResponse}\n      */\n+\n     public ValidateVisibilityResponse validateVisibilities(String[] visibilityArray) {\n-        \n         ValidateVisibilityResponse response = new ValidateVisibilityResponse();\n         try {\n             SecurityOperations securityOps = warehouseConnector.securityOperations();\n             Authorizations authorizations = securityOps.getUserAuthorizations(warehouseConnector.whoami());\n             List<Visibility> visibilityList = new ArrayList<>();\n-            \n             for (String v : visibilityArray) {\n                 try {\n                     Visibility vis = new Visibility();\n@@ -588,4 +579,4 @@ public class AdminService {\n             throw new RuntimeException(e);\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 72
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "32",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "32",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}