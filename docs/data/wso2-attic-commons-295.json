{
    "project_name": "wso2-attic-commons",
    "error_id": "295",
    "information": {
        "errors": [
            {
                "line": "55",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 125).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "   * (non-Javadoc)\n   * \n   * @see org.wsi.test.profile.validator.impl.BaseValidatorImpl.AssertionProcess#validate(org.wsi.test.profile.TestAssertion,\n   *      org.wsi.test.profile.validator.EntryContext)\n   */\n  public AssertionResult validate(TestAssertion testAssertion,",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/295/BP2201.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/295/BP2201.java\nindex 324ddfc3ebd..52253a5ac18 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/295/BP2201.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/295/BP2201.java\n@@ -8,7 +8,9 @@\n  * Contributors:\n  *   IBM - Initial API and implementation\n  *******************************************************************************/\n+\n package org.eclipse.wst.wsi.internal.core.profile.validator.impl.wsdl;\n+\n import java.io.FileInputStream;\n import java.io.InputStreamReader;\n import java.io.Reader;\n@@ -26,50 +28,45 @@ import org.eclipse.wst.wsi.internal.core.report.AssertionResult;\n import org.eclipse.wst.wsi.internal.core.util.StringTokenizer;\n \n /**\n- * BP2201. \n+ * BP2201.\n  * <context>For a candidate Web service definition within a WSDL document with a XML declaration statement. </context>\n  * <assertionDescription>The XML declaration statement uses UTF-8 or UTF-16 for the encoding. </assertionDescription>\n  */\n-public class BP2201 extends AssertionProcess\n-{\n+public class BP2201 extends AssertionProcess {\n   private final WSDLValidatorImpl validator;\n \n   /**\n    * @param WSDLValidatorImpl\n    */\n-  public BP2201(WSDLValidatorImpl impl)\n-  {\n+  public BP2201(WSDLValidatorImpl impl) {\n     super(impl);\n     this.validator = impl;\n   }\n \n-  private final char[] OMMITED_XML_DECLARATION_DELIMITERS = new char[]{0x20,\n-      0x9, 0xD, 0xA, '\\'', '\\\"'};\n-  private final char[] XML_DECLARATION_DELIMITERS = new char[]{'='};\n+  private final char[] OMMITED_XML_DECLARATION_DELIMITERS = new char[] {0x20,\n+    0x9, 0xD, 0xA, '\\'', '\\\"'};\n+  private final char[] XML_DECLARATION_DELIMITERS = new char[] {'='};\n   private final String UTF_8_ENCODING = \"UTF-8\";\n   private final String UTF_16_ENCODING = \"UTF-16\";\n   private final String ENCODING_TOKEN = \"encoding\";\n+\n   /*\n    * (non-Javadoc)\n-   * \n+   *\n    * @see org.wsi.test.profile.validator.impl.BaseValidatorImpl.AssertionProcess#validate(org.wsi.test.profile.TestAssertion,\n    *      org.wsi.test.profile.validator.EntryContext)\n    */\n   public AssertionResult validate(TestAssertion testAssertion,\n-      EntryContext entryContext) throws WSIException\n-  {\n+                                  EntryContext entryContext) throws WSIException {\n     result = AssertionResult.RESULT_PASSED;\n     Definition definition = (Definition) entryContext.getEntry()\n-        .getEntryDetail();\n+      .getEntryDetail();\n     String location = definition.getDocumentBaseURI();\n     String xmlDecl = readXMLDeclarationStatement(location);\n-    if (xmlDecl == null)\n-    {\n+    if (xmlDecl == null) {\n       result = AssertionResult.RESULT_NOT_APPLICABLE;\n-    } else\n-    {\n-      if (!validEncoding(xmlDecl))\n-      {\n+    } else {\n+      if (!validEncoding(xmlDecl)) {\n         result = AssertionResult.RESULT_FAILED;\n         failureDetail = validator.createFailureDetail(xmlDecl, entryContext);\n       }\n@@ -77,110 +74,90 @@ public class BP2201 extends AssertionProcess\n     // Return assertion result\n     return validator.createAssertionResult(testAssertion, result, failureDetail);\n   }\n+\n   /**\n    * Reads an XML declaration statement.\n-   * \n+   *\n    * @param location\n    * @return String\n    */\n-  private String readXMLDeclarationStatement(String location)\n-  {\n+  private String readXMLDeclarationStatement(String location) {\n     String result = null;\n-    if (location != null)\n-    {\n+    if (location != null) {\n       URL url = null;\n       Reader reader = null;\n-      try\n-      {\n-        try\n-        {\n+      try {\n+        try {\n           url = new URL(location);\n-        } catch (MalformedURLException e)\n-        {\n+        } catch (MalformedURLException e) {\n           // we should try to access location as file\n         }\n-        if (url != null)\n-        {\n+        if (url != null) {\n           reader = new InputStreamReader(url.openStream());\n-        } else\n-        {\n+        } else {\n           reader = new InputStreamReader(new FileInputStream(location));\n         }\n         int charCode;\n         boolean end = false;\n-        if (reader.ready())\n-        {\n+        if (reader.ready()) {\n           charCode = reader.read();\n-          while (reader.ready() && !(charCode == '<'))\n-          {\n+          while (reader.ready() && !(charCode == '<')) {\n             charCode = reader.read();\n           }\n           char[] c = new char[4];\n           reader.read(c);\n           StringBuffer buf = new StringBuffer();\n-          if (new String(c).toLowerCase().equals(\"?xml\"))\n-          {\n+          if (new String(c).toLowerCase().equals(\"?xml\")) {\n             buf.append(\"<?xml\");\n-            while (reader.ready() && !end)\n-            {\n+            while (reader.ready() && !end) {\n               charCode = reader.read();\n               buf.append((char) charCode);\n               end = charCode == '>';\n             }\n-          } else\n-          {\n+          } else {\n             // NOTE: This result does not get propogated back!\n             this.result = AssertionResult.RESULT_NOT_APPLICABLE;\n             return null;\n           }\n           result = buf.toString();\n         }\n-      } catch (Exception e)\n-      {\n+      } catch (Exception e) {\n         //VERBOSE\n-        if (validator.verboseOption)\n-        {\n+        if (validator.verboseOption) {\n           System.err.println(\"  [WSI2201] Exception: \" + e.getMessage());\n         }\n-      } finally\n-      {\n-        if (reader != null)\n-        {\n-          try\n-          {\n+      } finally {\n+        if (reader != null) {\n+          try {\n             reader.close();\n-          } catch (Throwable e)\n-          {\n+          } catch (Throwable e) {\n           }\n         }\n       }\n     }\n     return result;\n   }\n+\n   /*\n    * Verify xml declaration contains utf-16 or utf-8 encoding. @param xmlDecl -\n    * xml declaration @return\n    */\n-  private boolean validEncoding(String xmlDecl)\n-  {\n+  private boolean validEncoding(String xmlDecl) {\n     //boolean result = false;\n     boolean result = true;\n-    if (xmlDecl != null)\n-    {\n+    if (xmlDecl != null) {\n       StringTokenizer st = new StringTokenizer(\n-          OMMITED_XML_DECLARATION_DELIMITERS, XML_DECLARATION_DELIMITERS);\n+        OMMITED_XML_DECLARATION_DELIMITERS, XML_DECLARATION_DELIMITERS);\n       Enumeration tokens = st.parse(xmlDecl);\n       boolean found = false;\n-      while (tokens.hasMoreElements() && !found)\n-      {\n+      while (tokens.hasMoreElements() && !found) {\n         String token = (String) tokens.nextElement();\n-        if (token.equals(ENCODING_TOKEN))\n-        {\n+        if (token.equals(ENCODING_TOKEN)) {\n           found = true;\n           tokens.nextElement();\n           String enc = (String) tokens.nextElement();\n           result = UTF_8_ENCODING.equalsIgnoreCase(enc)\n-              || UTF_16_ENCODING.equalsIgnoreCase(enc);\n+            || UTF_16_ENCODING.equalsIgnoreCase(enc);\n         }\n       }\n     }\n",
            "diff_size": 70
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/295/BP2201.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/295/BP2201.java\nindex 324ddfc3ebd..c1b329fb5e6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/295/BP2201.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/295/BP2201.java\n@@ -66,7 +66,8 @@ public class BP2201 extends AssertionProcess\n     if (xmlDecl == null)\n     {\n       result = AssertionResult.RESULT_NOT_APPLICABLE;\n-    } else\n+    }\n+else\n     {\n       if (!validEncoding(xmlDecl))\n       {\n@@ -102,7 +103,8 @@ public class BP2201 extends AssertionProcess\n         if (url != null)\n         {\n           reader = new InputStreamReader(url.openStream());\n-        } else\n+        }\n+else\n         {\n           reader = new InputStreamReader(new FileInputStream(location));\n         }\n@@ -127,7 +129,8 @@ public class BP2201 extends AssertionProcess\n               buf.append((char) charCode);\n               end = charCode == '>';\n             }\n-          } else\n+          }\n+else\n           {\n             // NOTE: This result does not get propogated back!\n             this.result = AssertionResult.RESULT_NOT_APPLICABLE;\n@@ -142,7 +145,9 @@ public class BP2201 extends AssertionProcess\n         {\n           System.err.println(\"  [WSI2201] Exception: \" + e.getMessage());\n         }\n-      } finally\n+      }\n+\n+finally\n       {\n         if (reader != null)\n         {\n@@ -186,4 +191,4 @@ public class BP2201 extends AssertionProcess\n     }\n     return result;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}