{
    "project_name": "Angel-ML-angel",
    "error_id": "361",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/361/AngelRunJar.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/361/AngelRunJar.java\nindex 630fe92831c..9838d15c087 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/361/AngelRunJar.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/361/AngelRunJar.java\n@@ -13,9 +13,8 @@\n  * or implied. See the License for the specific language governing permissions and limitations under\r\n  * the License.\r\n  *\r\n- */\r\n-\r\n-\r\n+ */\n+\n package com.tencent.angel.utils;\r\n \r\n import com.tencent.angel.AppSubmitter;\r\n@@ -71,8 +70,8 @@ public class AngelRunJar {\n     }\r\n     // instance submitter class\r\n     final String submitClassName =\r\n-        conf.get(AngelConf.ANGEL_APP_SUBMIT_CLASS, AngelConf.DEFAULT_ANGEL_APP_SUBMIT_CLASS);\r\n-    setKerberos(conf);\r\n+        conf.get(AngelConf.ANGEL_APP_SUBMIT_CLASS, AngelConf.DEFAULT_ANGEL_APP_SUBMIT_CLASS);\n+setKerberos(conf);\r\n     UserGroupInformation ugi = UGITools.getCurrentUser(conf);\r\n     ugi.doAs(new PrivilegedExceptionAction<String>() {\r\n       @Override\r\n@@ -93,4 +92,4 @@ public class AngelRunJar {\n       }\r\n     });\r\n   }\r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "74",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/361/AngelRunJar.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/361/AngelRunJar.java\nindex 630fe92831c..4605a1a84e4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/361/AngelRunJar.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/361/AngelRunJar.java\n@@ -16,81 +16,83 @@\n  */\r\n \r\n \r\n-package com.tencent.angel.utils;\r\n-\r\n-import com.tencent.angel.AppSubmitter;\r\n-import com.tencent.angel.conf.AngelConf;\r\n-import com.tencent.angel.exception.InvalidParameterException;\r\n-import org.apache.commons.logging.Log;\r\n-import org.apache.commons.logging.LogFactory;\r\n-import org.apache.hadoop.conf.Configuration;\r\n-import org.apache.hadoop.security.UserGroupInformation;\r\n-\r\n-import java.io.File;\r\n-import java.io.FileNotFoundException;\r\n-import java.io.IOException;\r\n+package com.tencent.angel.utils;\n+\n+import com.tencent.angel.AppSubmitter;\n+import com.tencent.angel.conf.AngelConf;\n+import com.tencent.angel.exception.InvalidParameterException;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.security.UserGroupInformation;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n import java.security.PrivilegedExceptionAction;\r\n \r\n /**\r\n  * Java class running tools for Angel.\r\n- */\r\n-public class AngelRunJar {\r\n-\r\n-  private static final Log LOG = LogFactory.getLog(AngelRunJar.class);\r\n-  private static final String angelSysConfFile = \"angel-site.xml\";\r\n-\r\n-  public static void main(String[] args) {\r\n-    try {\r\n-      submit(ConfUtils.initConf(args));\r\n-    } catch (Exception x) {\r\n-      LOG.fatal(\"submit job failed \", x);\r\n-      System.exit(-1);\r\n+ */\n+\n+public class AngelRunJar {\n+\n+  private static final Log LOG = LogFactory.getLog(AngelRunJar.class);\n+  private static final String angelSysConfFile = \"angel-site.xml\";\n+\n+  public static void main(String[] args) {\n+    try {\n+      submit(ConfUtils.initConf(args));\n+    } catch (Exception x) {\n+      LOG.fatal(\"submit job failed \", x);\n+      System.exit(-1);\n+    }\n+  }\n+\n+  private static void setKerberos(Configuration conf) throws IOException {\n+    String keytab = conf.get(AngelConf.ANGEL_KERBEROS_KEYTAB);\n+    String principal = conf.get(AngelConf.ANGEL_KERBEROS_PRINCIPAL);\n+    Boolean loginFromKeytab = principal != null;\n+    if (loginFromKeytab) {\n+      if (!new File(keytab).exists()) {\n+        throw new FileNotFoundException(\"Keytab file: \" + keytab + \" does not exist\");\n+      } else {\n+        LOG.info(\"Kerberos credentials: principal = \" + principal + \", keytab = \" + keytab);\n+        conf.set(\"hadoop.security.authentication\", \"kerberos\");\n+        UserGroupInformation.setConfiguration(conf);\n+        UserGroupInformation.loginUserFromKeytab(principal, keytab);\n+      }\n+    }\n+  }\n+\n+  public static void submit(Configuration conf) throws Exception {\n+    LOG.info(\"angel python file: \" + conf.get(\"angel.pyangel.pyfile\"));\n+    if (null != conf.get(\"angel.pyangel.pyfile\")) {\n+      conf.set(AngelConf.ANGEL_APP_SUBMIT_CLASS, \"com.tencent.angel.api.python.PythonRunner\");\n     }\r\n-  }\r\n-\r\n-  private static void setKerberos(Configuration conf) throws IOException {\r\n-    String keytab = conf.get(AngelConf.ANGEL_KERBEROS_KEYTAB);\r\n-    String principal = conf.get(AngelConf.ANGEL_KERBEROS_PRINCIPAL);\r\n-    Boolean loginFromKeytab = principal != null;\r\n-    if (loginFromKeytab) {\r\n-      if (!new File(keytab).exists()) {\r\n-        throw new FileNotFoundException(\"Keytab file: \" + keytab + \" does not exist\");\r\n-      } else {\r\n-        LOG.info(\"Kerberos credentials: principal = \" + principal + \", keytab = \" + keytab);\r\n-        conf.set(\"hadoop.security.authentication\", \"kerberos\");\r\n-        UserGroupInformation.setConfiguration(conf);\r\n-        UserGroupInformation.loginUserFromKeytab(principal, keytab);\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n-  public static void submit(Configuration conf) throws Exception {\r\n-    LOG.info(\"angel python file: \" + conf.get(\"angel.pyangel.pyfile\"));\r\n-    if (null != conf.get(\"angel.pyangel.pyfile\")) {\r\n-      conf.set(AngelConf.ANGEL_APP_SUBMIT_CLASS, \"com.tencent.angel.api.python.PythonRunner\");\r\n-    }\r\n-    // instance submitter class\r\n-    final String submitClassName =\r\n-        conf.get(AngelConf.ANGEL_APP_SUBMIT_CLASS, AngelConf.DEFAULT_ANGEL_APP_SUBMIT_CLASS);\r\n-    setKerberos(conf);\r\n-    UserGroupInformation ugi = UGITools.getCurrentUser(conf);\r\n-    ugi.doAs(new PrivilegedExceptionAction<String>() {\r\n-      @Override\r\n-      public String run() throws Exception {\r\n-        AppSubmitter submmiter = null;\r\n-        try {\r\n-          Class<?> submitClass = Class.forName(submitClassName);\r\n-          submmiter = (AppSubmitter) submitClass.newInstance();\r\n-          LOG.info(\"submitClass: \" + submitClass.getName());\r\n-        } catch (Exception x) {\r\n-          String message = \"load submit class failed \" + x.getMessage();\r\n-          LOG.fatal(message, x);\r\n-          throw new InvalidParameterException(message);\r\n-        }\r\n-\r\n-        submmiter.submit(conf);\r\n-        return \"OK\";\r\n-      }\r\n-    });\r\n-  }\r\n-}\r\n+    // instance submitter class\n+\n+    final String submitClassName = conf.get(AngelConf.ANGEL_APP_SUBMIT_CLASS, AngelConf.DEFAULT_ANGEL_APP_SUBMIT_CLASS);\n+    setKerberos(conf);\n+    UserGroupInformation ugi = UGITools.getCurrentUser(conf);\n+    ugi.doAs(new PrivilegedExceptionAction<String>() {\n+\n+\n+      @Override\n+      public String run() throws Exception {\n+        AppSubmitter submmiter = null;\n+        try {\n+          Class<?> submitClass = Class.forName(submitClassName);\n+          submmiter = (AppSubmitter) submitClass.newInstance();\n+          LOG.info(\"submitClass: \" + submitClass.getName());\n+        } catch (Exception x) {\n+          String message = \"load submit class failed \" + x.getMessage();\n+          LOG.fatal(message, x);\n+          throw new InvalidParameterException(message);\n+        }\n+        submmiter.submit(conf);\n+        return \"OK\";\n+      }\n+    });\n+  }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 97
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}