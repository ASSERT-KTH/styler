{
    "project_name": "neo4j-neo4j",
    "error_id": "3079",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "59",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "120",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "155",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "144",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "75",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "154",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "142",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "119",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "145",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "80",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "129",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "130",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "187",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "155",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "119",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "77",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "77",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3079/AbstractCypherResource.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3079/AbstractCypherResource.java\nindex 91b9ecd9ca3..0869c9f8480 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3079/AbstractCypherResource.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3079/AbstractCypherResource.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.server.http.cypher;\n \n import java.net.URI;\n@@ -55,173 +56,171 @@ public abstract class AbstractCypherResource\n     private final Log log;\n     private final String databaseName;\n \n-    AbstractCypherResource( HttpTransactionManager httpTransactionManager, UriInfo uriInfo, Log log, String databaseName )\n+    AbstractCypherResource(HttpTransactionManager httpTransactionManager, UriInfo uriInfo, Log log, String databaseName)\n     {\n         this.httpTransactionManager = httpTransactionManager;\n         this.databaseName = databaseName;\n-        this.uriScheme = new TransactionUriBuilder( dbUri( uriInfo, databaseName ), cypherUri( uriInfo, databaseName ) );\n+        this.uriScheme = new TransactionUriBuilder(dbUri(uriInfo, databaseName), cypherUri(uriInfo, databaseName));\n         this.log = log;\n     }\n \n-    protected abstract URI dbUri( UriInfo uriInfo, String databaseName );\n+    protected abstract URI dbUri(UriInfo uriInfo, String databaseName);\n \n-    protected abstract URI cypherUri( UriInfo uriInfo, String databaseName );\n+    protected abstract URI cypherUri(UriInfo uriInfo, String databaseName);\n \n     @POST\n-    public Response executeStatementsInNewTransaction( InputEventStream inputEventStream, @Context HttpServletRequest request, @Context HttpHeaders headers )\n+    public Response executeStatementsInNewTransaction(InputEventStream inputEventStream, @Context HttpServletRequest request, @Context HttpHeaders headers)\n     {\n-        InputEventStream inputStream = ensureNotNull( inputEventStream );\n+        InputEventStream inputStream = ensureNotNull(inputEventStream);\n \n-        var graphDatabaseAPI = httpTransactionManager.getGraphDatabaseAPI( databaseName );\n-        return graphDatabaseAPI.map( databaseAPI -> {\n-            if ( isDatabaseNotAvailable( databaseAPI ) )\n+        var graphDatabaseAPI = httpTransactionManager.getGraphDatabaseAPI(databaseName);\n+        return graphDatabaseAPI.map(databaseAPI -> {\n+            if (isDatabaseNotAvailable(databaseAPI))\n             {\n-                return createNonAvailableDatabaseResponse( inputStream.getParameters() );\n+                return createNonAvailableDatabaseResponse(inputStream.getParameters());\n             }\n-            final TransactionFacade transactionFacade = httpTransactionManager.createTransactionFacade( databaseAPI );\n-            TransactionHandle transactionHandle = createNewTransactionHandle( transactionFacade, request, headers, false );\n+            final TransactionFacade transactionFacade = httpTransactionManager.createTransactionFacade(databaseAPI);\n+            TransactionHandle transactionHandle = createNewTransactionHandle(transactionFacade, request, headers, false);\n \n-            Invocation invocation = new Invocation( log, transactionHandle, uriScheme.txCommitUri( transactionHandle.getId() ), inputStream, false );\n-            OutputEventStreamImpl outputStream = new OutputEventStreamImpl( inputStream.getParameters(), transactionHandle, uriScheme, invocation::execute );\n-            return Response.created( transactionHandle.uri() ).entity( outputStream ).build();\n+            Invocation invocation = new Invocation(log, transactionHandle, uriScheme.txCommitUri(transactionHandle.getId()), inputStream, false);\n+            OutputEventStreamImpl outputStream = new OutputEventStreamImpl(inputStream.getParameters(), transactionHandle, uriScheme, invocation::execute);\n+            return Response.created(transactionHandle.uri()).entity(outputStream).build();\n \n-        } ).orElse( createNonExistentDatabaseResponse( inputStream.getParameters() ) );\n+        }).orElse(createNonExistentDatabaseResponse(inputStream.getParameters()));\n     }\n \n     @POST\n-    @Path( \"/{id}\" )\n-    public Response executeStatements( @PathParam( \"id\" ) long id, InputEventStream inputEventStream )\n+    @Path(\"/{id}\")\n+    public Response executeStatements(@PathParam(\"id\") long id, InputEventStream inputEventStream)\n     {\n-        return executeInExistingTransaction( id, inputEventStream, false );\n+        return executeInExistingTransaction(id, inputEventStream, false);\n     }\n \n     @POST\n-    @Path( \"/{id}/commit\" )\n-    public Response commitTransaction( @PathParam( \"id\" ) long id, InputEventStream inputEventStream )\n+    @Path(\"/{id}/commit\")\n+    public Response commitTransaction(@PathParam(\"id\") long id, InputEventStream inputEventStream)\n     {\n-        return executeInExistingTransaction( id, inputEventStream, true );\n+        return executeInExistingTransaction(id, inputEventStream, true);\n     }\n \n     @POST\n-    @Path( \"/commit\" )\n-    public Response commitNewTransaction( InputEventStream inputEventStream, @Context HttpServletRequest request, @Context HttpHeaders headers )\n+    @Path(\"/commit\")\n+    public Response commitNewTransaction(InputEventStream inputEventStream, @Context HttpServletRequest request, @Context HttpHeaders headers)\n     {\n-        InputEventStream inputStream = ensureNotNull( inputEventStream );\n+        InputEventStream inputStream = ensureNotNull(inputEventStream);\n \n-        Optional<GraphDatabaseAPI> graphDatabaseAPI = httpTransactionManager.getGraphDatabaseAPI( databaseName );\n-        return graphDatabaseAPI.map( databaseAPI ->\n+        Optional<GraphDatabaseAPI> graphDatabaseAPI = httpTransactionManager.getGraphDatabaseAPI(databaseName);\n+        return graphDatabaseAPI.map(databaseAPI ->\n         {\n-            if ( isDatabaseNotAvailable( databaseAPI ) )\n+            if (isDatabaseNotAvailable(databaseAPI))\n             {\n-                return createNonAvailableDatabaseResponse( inputStream.getParameters() );\n+                return createNonAvailableDatabaseResponse(inputStream.getParameters());\n             }\n-            final TransactionFacade transactionFacade = httpTransactionManager.createTransactionFacade( databaseAPI );\n-            TransactionHandle transactionHandle = createNewTransactionHandle( transactionFacade, request, headers, true );\n+            final TransactionFacade transactionFacade = httpTransactionManager.createTransactionFacade(databaseAPI);\n+            TransactionHandle transactionHandle = createNewTransactionHandle(transactionFacade, request, headers, true);\n \n-            Invocation invocation = new Invocation( log, transactionHandle, null, inputStream, true );\n+            Invocation invocation = new Invocation(log, transactionHandle, null, inputStream, true);\n             OutputEventStreamImpl outputStream =\n-                    new OutputEventStreamImpl( inputStream.getParameters(), transactionHandle, uriScheme, invocation::execute );\n-            return Response.ok( outputStream ).build();\n-        } ).orElse( createNonExistentDatabaseResponse( inputStream.getParameters() ) );\n+              new OutputEventStreamImpl(inputStream.getParameters(), transactionHandle, uriScheme, invocation::execute);\n+            return Response.ok(outputStream).build();\n+        }).orElse(createNonExistentDatabaseResponse(inputStream.getParameters()));\n     }\n \n     @DELETE\n-    @Path( \"/{id}\" )\n-    public Response rollbackTransaction( @PathParam( \"id\" ) final long id )\n+    @Path(\"/{id}\")\n+    public Response rollbackTransaction(@PathParam(\"id\") final long id)\n     {\n-        Optional<GraphDatabaseAPI> graphDatabaseAPI = httpTransactionManager.getGraphDatabaseAPI( databaseName );\n-        return graphDatabaseAPI.map( databaseAPI ->\n+        Optional<GraphDatabaseAPI> graphDatabaseAPI = httpTransactionManager.getGraphDatabaseAPI(databaseName);\n+        return graphDatabaseAPI.map(databaseAPI ->\n         {\n-            if ( isDatabaseNotAvailable( databaseAPI ) )\n+            if (isDatabaseNotAvailable(databaseAPI))\n             {\n-                return createNonAvailableDatabaseResponse( emptyMap() );\n+                return createNonAvailableDatabaseResponse(emptyMap());\n             }\n-            final TransactionFacade transactionFacade = httpTransactionManager.createTransactionFacade( databaseAPI );\n+            final TransactionFacade transactionFacade = httpTransactionManager.createTransactionFacade(databaseAPI);\n             TransactionHandle transactionHandle;\n             try\n             {\n-                transactionHandle = transactionFacade.terminate( id );\n-            }\n-            catch ( TransactionLifecycleException e )\n+                transactionHandle = transactionFacade.terminate(id);\n+            } catch (TransactionLifecycleException e)\n             {\n-                return invalidTransaction( e, emptyMap() );\n+                return invalidTransaction(e, emptyMap());\n             }\n \n-            RollbackInvocation invocation = new RollbackInvocation( log, transactionHandle );\n-            OutputEventStreamImpl outputEventStream = new OutputEventStreamImpl( emptyMap(), null, uriScheme, invocation::execute );\n-            return Response.ok().entity( outputEventStream ).build();\n+            RollbackInvocation invocation = new RollbackInvocation(log, transactionHandle);\n+            OutputEventStreamImpl outputEventStream = new OutputEventStreamImpl(emptyMap(), null, uriScheme, invocation::execute);\n+            return Response.ok().entity(outputEventStream).build();\n \n-        } ).orElse( createNonExistentDatabaseResponse( emptyMap() ) );\n+        }).orElse(createNonExistentDatabaseResponse(emptyMap()));\n     }\n \n-    private boolean isDatabaseNotAvailable( GraphDatabaseAPI databaseAPI )\n+    private boolean isDatabaseNotAvailable(GraphDatabaseAPI databaseAPI)\n     {\n-        return !databaseAPI.isAvailable( 0 );\n+        return !databaseAPI.isAvailable(0);\n     }\n \n-    private TransactionHandle createNewTransactionHandle( TransactionFacade transactionFacade, HttpServletRequest request, HttpHeaders headers,\n-            boolean implicitTransaction )\n+    private TransactionHandle createNewTransactionHandle(TransactionFacade transactionFacade, HttpServletRequest request, HttpHeaders headers,\n+                                                         boolean implicitTransaction)\n     {\n-        LoginContext loginContext = AuthorizedRequestWrapper.getLoginContextFromHttpServletRequest( request );\n-        long customTransactionTimeout = getTransactionTimeout( headers, log );\n-        ClientConnectionInfo connectionInfo = HttpConnectionInfoFactory.create( request );\n-        return transactionFacade.newTransactionHandle( uriScheme, implicitTransaction, loginContext, connectionInfo, customTransactionTimeout );\n+        LoginContext loginContext = AuthorizedRequestWrapper.getLoginContextFromHttpServletRequest(request);\n+        long customTransactionTimeout = getTransactionTimeout(headers, log);\n+        ClientConnectionInfo connectionInfo = HttpConnectionInfoFactory.create(request);\n+        return transactionFacade.newTransactionHandle(uriScheme, implicitTransaction, loginContext, connectionInfo, customTransactionTimeout);\n     }\n \n-    private Response executeInExistingTransaction( long transactionId, InputEventStream inputEventStream, boolean finishWithCommit )\n+    private Response executeInExistingTransaction(long transactionId, InputEventStream inputEventStream, boolean finishWithCommit)\n     {\n-        InputEventStream inputStream = ensureNotNull( inputEventStream );\n+        InputEventStream inputStream = ensureNotNull(inputEventStream);\n \n-        Optional<GraphDatabaseAPI> graphDatabaseAPI = httpTransactionManager.getGraphDatabaseAPI( databaseName );\n-        return graphDatabaseAPI.map( databaseAPI ->\n+        Optional<GraphDatabaseAPI> graphDatabaseAPI = httpTransactionManager.getGraphDatabaseAPI(databaseName);\n+        return graphDatabaseAPI.map(databaseAPI ->\n         {\n-            if ( isDatabaseNotAvailable( databaseAPI ) )\n+            if (isDatabaseNotAvailable(databaseAPI))\n             {\n-                return createNonAvailableDatabaseResponse( inputStream.getParameters() );\n+                return createNonAvailableDatabaseResponse(inputStream.getParameters());\n             }\n-            final TransactionFacade transactionFacade = httpTransactionManager.createTransactionFacade( databaseAPI );\n+            final TransactionFacade transactionFacade = httpTransactionManager.createTransactionFacade(databaseAPI);\n             TransactionHandle transactionHandle;\n             try\n             {\n-                transactionHandle = transactionFacade.findTransactionHandle( transactionId );\n-            }\n-            catch ( TransactionLifecycleException e )\n+                transactionHandle = transactionFacade.findTransactionHandle(transactionId);\n+            } catch (TransactionLifecycleException e)\n             {\n-                return invalidTransaction( e, inputStream.getParameters() );\n+                return invalidTransaction(e, inputStream.getParameters());\n             }\n-            Invocation invocation = new Invocation( log, transactionHandle, uriScheme.txCommitUri( transactionHandle.getId() ), inputStream, finishWithCommit );\n+            Invocation invocation = new Invocation(log, transactionHandle, uriScheme.txCommitUri(transactionHandle.getId()), inputStream, finishWithCommit);\n             OutputEventStreamImpl outputEventStream =\n-                    new OutputEventStreamImpl( inputStream.getParameters(), transactionHandle, uriScheme, invocation::execute );\n-            return Response.ok( outputEventStream ).build();\n-        } ).orElse( createNonExistentDatabaseResponse( inputStream.getParameters() ) );\n+              new OutputEventStreamImpl(inputStream.getParameters(), transactionHandle, uriScheme, invocation::execute);\n+            return Response.ok(outputEventStream).build();\n+        }).orElse(createNonExistentDatabaseResponse(inputStream.getParameters()));\n     }\n \n-    private Response invalidTransaction( TransactionLifecycleException e, Map<String,Object> parameters )\n+    private Response invalidTransaction(TransactionLifecycleException e, Map<String, Object> parameters)\n     {\n-        ErrorInvocation errorInvocation = new ErrorInvocation( e.toNeo4jError() );\n-        return Response.status( Response.Status.NOT_FOUND ).entity(\n-                new OutputEventStreamImpl( parameters, null, uriScheme, errorInvocation::execute ) ).build();\n+        ErrorInvocation errorInvocation = new ErrorInvocation(e.toNeo4jError());\n+        return Response.status(Response.Status.NOT_FOUND).entity(\n+          new OutputEventStreamImpl(parameters, null, uriScheme, errorInvocation::execute)).build();\n     }\n \n-    private InputEventStream ensureNotNull( InputEventStream inputEventStream )\n+    private InputEventStream ensureNotNull(InputEventStream inputEventStream)\n     {\n-        return requireNonNullElse( inputEventStream, InputEventStream.EMPTY );\n+        return requireNonNullElse(inputEventStream, InputEventStream.EMPTY);\n     }\n \n-    private Response createNonExistentDatabaseResponse( Map<String,Object> parameters )\n+    private Response createNonExistentDatabaseResponse(Map<String, Object> parameters)\n     {\n-        ErrorInvocation errorInvocation = new ErrorInvocation( new Neo4jError( Status.Database.DatabaseNotFound,\n-                String.format( \"The database requested does not exists. Requested database name: '%s'.\", databaseName ) ) );\n-        return Response.status( Response.Status.NOT_FOUND ).entity(\n-                new OutputEventStreamImpl( parameters, null, uriScheme, errorInvocation::execute ) ).build();\n+        ErrorInvocation errorInvocation = new ErrorInvocation(new Neo4jError(Status.Database.DatabaseNotFound,\n+          String.format(\"The database requested does not exists. Requested database name: '%s'.\", databaseName)));\n+        return Response.status(Response.Status.NOT_FOUND).entity(\n+          new OutputEventStreamImpl(parameters, null, uriScheme, errorInvocation::execute)).build();\n     }\n \n-    private Response createNonAvailableDatabaseResponse( Map<String,Object> parameters )\n+    private Response createNonAvailableDatabaseResponse(Map<String, Object> parameters)\n     {\n-        ErrorInvocation errorInvocation = new ErrorInvocation( new Neo4jError( Status.Database.DatabaseUnavailable,\n-                String.format( \"Requested database is not available. Requested database name: '%s'.\", databaseName ) ) );\n-        return Response.status( Response.Status.NOT_FOUND ).entity(\n-                new OutputEventStreamImpl( parameters, null, uriScheme, errorInvocation::execute ) ).build();\n+        ErrorInvocation errorInvocation = new ErrorInvocation(new Neo4jError(Status.Database.DatabaseUnavailable,\n+          String.format(\"Requested database is not available. Requested database name: '%s'.\", databaseName)));\n+        return Response.status(Response.Status.NOT_FOUND).entity(\n+          new OutputEventStreamImpl(parameters, null, uriScheme, errorInvocation::execute)).build();\n     }\n \n     private static class TransactionUriBuilder implements TransactionUriScheme\n@@ -229,22 +228,22 @@ public abstract class AbstractCypherResource\n         private final URI dbUri;\n         private final URI cypherUri;\n \n-        TransactionUriBuilder( URI dbUri, URI cypherUri )\n+        TransactionUriBuilder(URI dbUri, URI cypherUri)\n         {\n             this.dbUri = dbUri;\n             this.cypherUri = cypherUri;\n         }\n \n         @Override\n-        public URI txUri( long id )\n+        public URI txUri(long id)\n         {\n-            return transactionBuilder( id ).build();\n+            return transactionBuilder(id).build();\n         }\n \n         @Override\n-        public URI txCommitUri( long id )\n+        public URI txCommitUri(long id)\n         {\n-            return transactionBuilder( id ).path( \"/commit\" ).build();\n+            return transactionBuilder(id).path(\"/commit\").build();\n         }\n \n         @Override\n@@ -253,9 +252,9 @@ public abstract class AbstractCypherResource\n             return dbUri;\n         }\n \n-        private UriBuilder transactionBuilder( long id )\n+        private UriBuilder transactionBuilder(long id)\n         {\n-            return UriBuilder.fromUri( cypherUri ).path( \"/\" + id );\n+            return UriBuilder.fromUri(cypherUri).path(\"/\" + id);\n         }\n     }\n }\n",
            "diff_size": 97
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}