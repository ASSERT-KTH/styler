{
    "project_name": "opencb-opencga",
    "error_id": "38",
    "information": {
        "errors": [
            {
                "line": "165",
                "column": "105",
                "severity": "error",
                "message": "'+' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "                        ? \"\"\n                        : \" Available studies: [ \" + String.join(\", \", allStudyNames) + \" ]\";\n                throw new VariantQueryException(\"Only one study is allowed when returning \" + of + \", \" +\n                        \"please use '--include-study' to select the returned study. \" + availableStudies);\n            }\n        }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "165",
                    "column": "105",
                    "severity": "error",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "165",
                    "column": "97",
                    "severity": "error",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/38/VariantQueryCommandUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/38/VariantQueryCommandUtils.java\nindex 14c090b842f..0eaab1a27b3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/38/VariantQueryCommandUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/38/VariantQueryCommandUtils.java\n@@ -48,185 +48,185 @@ import static org.opencb.opencga.storage.core.variant.adaptors.VariantQueryParam\n  */\n public class VariantQueryCommandUtils {\n \n-    private static Logger logger = LoggerFactory.getLogger(VariantQueryCommandUtils.class);\n-\n-    public static Query parseBasicVariantQuery(StorageVariantCommandOptions.BasicVariantQueryOptions options,\n-                                               Query query) throws IOException {\n-\n-        /*\n-         * Parse Variant parameters\n-         */\n-        if (options.region != null && !options.region.isEmpty()) {\n-            query.put(REGION.key(), options.region);\n-        } else if (options.regionFile != null && !options.regionFile.isEmpty()) {\n-            Path gffPath = Paths.get(options.regionFile);\n-            FileUtils.checkFile(gffPath);\n-            String regionsFromFile = Files.readAllLines(gffPath).stream().map(line -> {\n-                String[] array = line.split(\"\\t\");\n-                return Region.normalizeChromosome(array[0]) + \":\" + array[3] + \"-\" + array[4];\n-            }).collect(Collectors.joining(\",\"));\n-            query.put(REGION.key(), regionsFromFile);\n-        }\n-\n-        addParam(query, ID, options.id);\n-        addParam(query, GENE, options.gene);\n-        addParam(query, TYPE, options.type);\n-\n-        /**\n-         * Annotation parameters\n-         */\n-        addParam(query, ANNOT_CONSEQUENCE_TYPE, options.consequenceType);\n-        addParam(query, ANNOT_POPULATION_ALTERNATE_FREQUENCY, options.populationFreqAlt);\n-        addParam(query, ANNOT_CONSERVATION, options.conservation);\n-        addParam(query, ANNOT_FUNCTIONAL_SCORE, options.functionalScore);\n-        addParam(query, ANNOT_PROTEIN_SUBSTITUTION, options.proteinSubstitution);\n-\n-        /*\n-         * Stats parameters\n-         */\n-        addParam(query, STATS_ALT, options.rf);\n-        addParam(query, STATS_REF, options.af);\n-        addParam(query, STATS_MAF, options.maf);\n-\n-        return query;\n+  private static Logger logger = LoggerFactory.getLogger(VariantQueryCommandUtils.class);\n+\n+  public static Query parseBasicVariantQuery(StorageVariantCommandOptions.BasicVariantQueryOptions options,\n+                                             Query query) throws IOException {\n+\n+    /*\n+     * Parse Variant parameters\n+     */\n+    if (options.region != null && !options.region.isEmpty()) {\n+      query.put(REGION.key(), options.region);\n+    } else if (options.regionFile != null && !options.regionFile.isEmpty()) {\n+      Path gffPath = Paths.get(options.regionFile);\n+      FileUtils.checkFile(gffPath);\n+      String regionsFromFile = Files.readAllLines(gffPath).stream().map(line -> {\n+        String[] array = line.split(\"\\t\");\n+        return Region.normalizeChromosome(array[0]) + \":\" + array[3] + \"-\" + array[4];\n+      }).collect(Collectors.joining(\",\"));\n+      query.put(REGION.key(), regionsFromFile);\n     }\n \n-    public static Query parseQuery(StorageVariantCommandOptions.GenericVariantSearchOptions options, Query query)\n-            throws Exception {\n-        query = parseBasicVariantQuery(options, query);\n-        addParam(query, ANNOT_CLINVAR, options.clinvar);\n-        addParam(query, ANNOT_COSMIC, options.cosmic);\n-        return query;\n-    }\n-\n-    public static Query parseQuery(StorageVariantCommandOptions.VariantQueryCommandOptions queryVariantsOptions, List<String> studyNames)\n-            throws Exception {\n-        VariantWriterFactory.VariantOutputFormat of = VariantWriterFactory.toOutputFormat(queryVariantsOptions.outputFormat, (URI) null);\n-        return parseGenericVariantQuery(\n-                queryVariantsOptions, queryVariantsOptions.study, studyNames, queryVariantsOptions.commonQueryOptions.count, of);\n-    }\n-\n-    protected static Query parseGenericVariantQuery(StorageVariantCommandOptions.GenericVariantQueryOptions queryVariantsOptions,\n-                                                    String studiesFilter, Collection<String> allStudyNames, boolean count,\n-                                                    VariantWriterFactory.VariantOutputFormat of)\n-            throws IOException {\n-\n-        Query query = new Query();\n-        parseBasicVariantQuery(queryVariantsOptions, query);\n-\n-\n-        addParam(query, STUDY, studiesFilter);\n-        addParam(query, INCLUDE_STUDY, queryVariantsOptions.includeStudy);\n-        addParam(query, FILE, queryVariantsOptions.file);\n-        addParam(query, INCLUDE_FILE, queryVariantsOptions.includeFile);\n-        addParam(query, FILTER, queryVariantsOptions.filter);\n-        addParam(query, QUAL, queryVariantsOptions.qual);\n-        addParam(query, FILE_DATA, queryVariantsOptions.fileData);\n-        addParam(query, GENOTYPE, queryVariantsOptions.sampleGenotype);\n-        addParam(query, SAMPLE, queryVariantsOptions.samples);\n-        addParam(query, SAMPLE_DATA, queryVariantsOptions.sampleData);\n-        addParam(query, SCORE, queryVariantsOptions.score);\n-        addParam(query, INCLUDE_SAMPLE, queryVariantsOptions.includeSample);\n-        addParam(query, INCLUDE_SAMPLE_DATA, queryVariantsOptions.includeSampleData);\n-        addParam(query, INCLUDE_GENOTYPE, queryVariantsOptions.includeGenotype);\n-        addParam(query, INCLUDE_SAMPLE_ID, queryVariantsOptions.includeSampleId);\n-        addParam(query, UNKNOWN_GENOTYPE, queryVariantsOptions.unknownGenotype);\n-        addParam(query, SAMPLE_METADATA, queryVariantsOptions.samplesMetadata);\n-        addParam(query, SAMPLE_LIMIT, queryVariantsOptions.sampleLimit);\n-        addParam(query, SAMPLE_SKIP, queryVariantsOptions.sampleSkip);\n-\n-        /**\n-         * Annotation parameters\n-         */\n-        addParam(query, ANNOT_BIOTYPE, queryVariantsOptions.geneBiotype);\n-        addParam(query, ANNOT_POPULATION_MINOR_ALLELE_FREQUENCY, queryVariantsOptions.populationFreqMaf);\n-        addParam(query, ANNOT_POPULATION_REFERENCE_FREQUENCY, queryVariantsOptions.populationFreqRef);\n-        addParam(query, ANNOT_TRANSCRIPT_FLAG, queryVariantsOptions.flags);\n+    addParam(query, ID, options.id);\n+    addParam(query, GENE, options.gene);\n+    addParam(query, TYPE, options.type);\n+\n+    /**\n+     * Annotation parameters\n+     */\n+    addParam(query, ANNOT_CONSEQUENCE_TYPE, options.consequenceType);\n+    addParam(query, ANNOT_POPULATION_ALTERNATE_FREQUENCY, options.populationFreqAlt);\n+    addParam(query, ANNOT_CONSERVATION, options.conservation);\n+    addParam(query, ANNOT_FUNCTIONAL_SCORE, options.functionalScore);\n+    addParam(query, ANNOT_PROTEIN_SUBSTITUTION, options.proteinSubstitution);\n+\n+    /*\n+     * Stats parameters\n+     */\n+    addParam(query, STATS_ALT, options.rf);\n+    addParam(query, STATS_REF, options.af);\n+    addParam(query, STATS_MAF, options.maf);\n+\n+    return query;\n+  }\n+\n+  public static Query parseQuery(StorageVariantCommandOptions.GenericVariantSearchOptions options, Query query)\n+      throws Exception {\n+    query = parseBasicVariantQuery(options, query);\n+    addParam(query, ANNOT_CLINVAR, options.clinvar);\n+    addParam(query, ANNOT_COSMIC, options.cosmic);\n+    return query;\n+  }\n+\n+  public static Query parseQuery(StorageVariantCommandOptions.VariantQueryCommandOptions queryVariantsOptions, List<String> studyNames)\n+      throws Exception {\n+    VariantWriterFactory.VariantOutputFormat of = VariantWriterFactory.toOutputFormat(queryVariantsOptions.outputFormat, (URI) null);\n+    return parseGenericVariantQuery(\n+        queryVariantsOptions, queryVariantsOptions.study, studyNames, queryVariantsOptions.commonQueryOptions.count, of);\n+  }\n+\n+  protected static Query parseGenericVariantQuery(StorageVariantCommandOptions.GenericVariantQueryOptions queryVariantsOptions,\n+                                                  String studiesFilter, Collection<String> allStudyNames, boolean count,\n+                                                  VariantWriterFactory.VariantOutputFormat of)\n+      throws IOException {\n+\n+    Query query = new Query();\n+    parseBasicVariantQuery(queryVariantsOptions, query);\n+\n+\n+    addParam(query, STUDY, studiesFilter);\n+    addParam(query, INCLUDE_STUDY, queryVariantsOptions.includeStudy);\n+    addParam(query, FILE, queryVariantsOptions.file);\n+    addParam(query, INCLUDE_FILE, queryVariantsOptions.includeFile);\n+    addParam(query, FILTER, queryVariantsOptions.filter);\n+    addParam(query, QUAL, queryVariantsOptions.qual);\n+    addParam(query, FILE_DATA, queryVariantsOptions.fileData);\n+    addParam(query, GENOTYPE, queryVariantsOptions.sampleGenotype);\n+    addParam(query, SAMPLE, queryVariantsOptions.samples);\n+    addParam(query, SAMPLE_DATA, queryVariantsOptions.sampleData);\n+    addParam(query, SCORE, queryVariantsOptions.score);\n+    addParam(query, INCLUDE_SAMPLE, queryVariantsOptions.includeSample);\n+    addParam(query, INCLUDE_SAMPLE_DATA, queryVariantsOptions.includeSampleData);\n+    addParam(query, INCLUDE_GENOTYPE, queryVariantsOptions.includeGenotype);\n+    addParam(query, INCLUDE_SAMPLE_ID, queryVariantsOptions.includeSampleId);\n+    addParam(query, UNKNOWN_GENOTYPE, queryVariantsOptions.unknownGenotype);\n+    addParam(query, SAMPLE_METADATA, queryVariantsOptions.samplesMetadata);\n+    addParam(query, SAMPLE_LIMIT, queryVariantsOptions.sampleLimit);\n+    addParam(query, SAMPLE_SKIP, queryVariantsOptions.sampleSkip);\n+\n+    /**\n+     * Annotation parameters\n+     */\n+    addParam(query, ANNOT_BIOTYPE, queryVariantsOptions.geneBiotype);\n+    addParam(query, ANNOT_POPULATION_MINOR_ALLELE_FREQUENCY, queryVariantsOptions.populationFreqMaf);\n+    addParam(query, ANNOT_POPULATION_REFERENCE_FREQUENCY, queryVariantsOptions.populationFreqRef);\n+    addParam(query, ANNOT_TRANSCRIPT_FLAG, queryVariantsOptions.flags);\n //        addParam(query, ANNOT_GENE_TRAITS, queryVariantsOptions.geneTrait);\n-        addParam(query, ANNOT_GENE_TRAIT_ID, queryVariantsOptions.geneTraitId);\n-        addParam(query, ANNOT_GENE_TRAIT_NAME, queryVariantsOptions.geneTraitName);\n-        addParam(query, ANNOT_GO, queryVariantsOptions.go);\n-        addParam(query, ANNOT_PROTEIN_KEYWORD, queryVariantsOptions.proteinKeywords);\n-        addParam(query, ANNOT_DRUG, queryVariantsOptions.drugs);\n-        addParam(query, ANNOT_TRAIT, queryVariantsOptions.trait);\n-        addParam(query, ANNOT_XREF, queryVariantsOptions.xref);\n-        addParam(query, ANNOT_CLINICAL_SIGNIFICANCE, queryVariantsOptions.clinicalSignificance);\n-\n-        addParam(query, STATS_MGF, queryVariantsOptions.mgf);\n-        addParam(query, STATS_PASS_FREQ, queryVariantsOptions.cohortStatsPass);\n-        addParam(query, MISSING_ALLELES, queryVariantsOptions.missingAlleleCount);\n-        addParam(query, MISSING_GENOTYPES, queryVariantsOptions.missingGenotypeCount);\n-\n-        if (!of.isMultiStudyOutput()) {\n-            if (VariantQueryUtils.isOutputMultiStudy(query, null, allStudyNames)) {\n-                String availableStudies = allStudyNames == null || allStudyNames.isEmpty()\n-                        ? \"\"\n-                        : \" Available studies: [ \" + String.join(\", \", allStudyNames) + \" ]\";\n-                throw new VariantQueryException(\"Only one study is allowed when returning \" + of + \", \" +\n-                        \"please use '--include-study' to select the returned study. \" + availableStudies);\n-            }\n-        }\n-\n-        return query;\n+    addParam(query, ANNOT_GENE_TRAIT_ID, queryVariantsOptions.geneTraitId);\n+    addParam(query, ANNOT_GENE_TRAIT_NAME, queryVariantsOptions.geneTraitName);\n+    addParam(query, ANNOT_GO, queryVariantsOptions.go);\n+    addParam(query, ANNOT_PROTEIN_KEYWORD, queryVariantsOptions.proteinKeywords);\n+    addParam(query, ANNOT_DRUG, queryVariantsOptions.drugs);\n+    addParam(query, ANNOT_TRAIT, queryVariantsOptions.trait);\n+    addParam(query, ANNOT_XREF, queryVariantsOptions.xref);\n+    addParam(query, ANNOT_CLINICAL_SIGNIFICANCE, queryVariantsOptions.clinicalSignificance);\n+\n+    addParam(query, STATS_MGF, queryVariantsOptions.mgf);\n+    addParam(query, STATS_PASS_FREQ, queryVariantsOptions.cohortStatsPass);\n+    addParam(query, MISSING_ALLELES, queryVariantsOptions.missingAlleleCount);\n+    addParam(query, MISSING_GENOTYPES, queryVariantsOptions.missingGenotypeCount);\n+\n+    if (!of.isMultiStudyOutput()) {\n+      if (VariantQueryUtils.isOutputMultiStudy(query, null, allStudyNames)) {\n+        String availableStudies = allStudyNames == null || allStudyNames.isEmpty()\n+            ? \"\"\n+            : \" Available studies: [ \" + String.join(\", \", allStudyNames) + \" ]\";\n+        throw new VariantQueryException(\"Only one study is allowed when returning \" + of + \", \" +\n+            \"please use '--include-study' to select the returned study. \" + availableStudies);\n+      }\n     }\n \n-    public static QueryOptions parseQueryOptions(StorageVariantCommandOptions.VariantQueryCommandOptions queryVariantsOptions) {\n-        QueryOptions queryOptions = new QueryOptions();\n+    return query;\n+  }\n \n-        if (StringUtils.isNotEmpty(queryVariantsOptions.commonQueryOptions.include)) {\n-            queryOptions.put(QueryOptions.INCLUDE, queryVariantsOptions.commonQueryOptions.include);\n-        }\n+  public static QueryOptions parseQueryOptions(StorageVariantCommandOptions.VariantQueryCommandOptions queryVariantsOptions) {\n+    QueryOptions queryOptions = new QueryOptions();\n \n-        if (StringUtils.isNotEmpty(queryVariantsOptions.commonQueryOptions.exclude)) {\n-            queryOptions.put(QueryOptions.EXCLUDE, queryVariantsOptions.commonQueryOptions.exclude);\n-        }\n-\n-        if (queryVariantsOptions.commonQueryOptions.skip > 0) {\n-            queryOptions.put(QueryOptions.SKIP, queryVariantsOptions.commonQueryOptions.skip);\n-        }\n-\n-        if (queryVariantsOptions.commonQueryOptions.limit > 0) {\n-            queryOptions.put(QueryOptions.LIMIT, queryVariantsOptions.commonQueryOptions.limit);\n-        }\n+    if (StringUtils.isNotEmpty(queryVariantsOptions.commonQueryOptions.include)) {\n+      queryOptions.put(QueryOptions.INCLUDE, queryVariantsOptions.commonQueryOptions.include);\n+    }\n \n-        if (queryVariantsOptions.commonQueryOptions.count) {\n-            queryOptions.put(QueryOptions.COUNT, true);\n-        }\n+    if (StringUtils.isNotEmpty(queryVariantsOptions.commonQueryOptions.exclude)) {\n+      queryOptions.put(QueryOptions.EXCLUDE, queryVariantsOptions.commonQueryOptions.exclude);\n+    }\n \n-        if (queryVariantsOptions.sort) {\n-            queryOptions.put(QueryOptions.SORT, true);\n-        }\n+    if (queryVariantsOptions.commonQueryOptions.skip > 0) {\n+      queryOptions.put(QueryOptions.SKIP, queryVariantsOptions.commonQueryOptions.skip);\n+    }\n \n-        if (queryVariantsOptions.summary) {\n-            queryOptions.put(VariantField.SUMMARY, true);\n-        }\n+    if (queryVariantsOptions.commonQueryOptions.limit > 0) {\n+      queryOptions.put(QueryOptions.LIMIT, queryVariantsOptions.commonQueryOptions.limit);\n+    }\n \n-        queryOptions.putAll(queryVariantsOptions.commonOptions.params);\n+    if (queryVariantsOptions.commonQueryOptions.count) {\n+      queryOptions.put(QueryOptions.COUNT, true);\n+    }\n \n-        return queryOptions;\n+    if (queryVariantsOptions.sort) {\n+      queryOptions.put(QueryOptions.SORT, true);\n     }\n \n-    protected static void addParam(ObjectMap query, QueryParam key, Collection value) {\n-        if (CollectionUtils.isNotEmpty(value)) {\n-            query.put(key.key(), value);\n-        }\n+    if (queryVariantsOptions.summary) {\n+      queryOptions.put(VariantField.SUMMARY, true);\n     }\n \n-    protected static void addParam(ObjectMap query, QueryParam key, String value) {\n-        query.putIfNotEmpty(key.key(), value);\n+    queryOptions.putAll(queryVariantsOptions.commonOptions.params);\n \n+    return queryOptions;\n+  }\n+\n+  protected static void addParam(ObjectMap query, QueryParam key, Collection value) {\n+    if (CollectionUtils.isNotEmpty(value)) {\n+      query.put(key.key(), value);\n     }\n+  }\n+\n+  protected static void addParam(ObjectMap query, QueryParam key, String value) {\n+    query.putIfNotEmpty(key.key(), value);\n+\n+  }\n \n-    protected static void addParam(ObjectMap query, QueryParam key, boolean value) {\n-        if (value) {\n-            query.put(key.key(), true);\n-        }\n+  protected static void addParam(ObjectMap query, QueryParam key, boolean value) {\n+    if (value) {\n+      query.put(key.key(), true);\n     }\n+  }\n \n-    protected static void addParam(ObjectMap query, QueryParam key, long value) {\n-        if (value > 0) {\n-            query.put(key.key(), value);\n-        }\n+  protected static void addParam(ObjectMap query, QueryParam key, long value) {\n+    if (value > 0) {\n+      query.put(key.key(), value);\n     }\n+  }\n \n }\n",
            "diff_size": 198
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "163",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 188).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/38/VariantQueryCommandUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/38/VariantQueryCommandUtils.java\nindex 14c090b842f..b752346c964 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/38/VariantQueryCommandUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/38/VariantQueryCommandUtils.java\n@@ -52,8 +52,7 @@ public class VariantQueryCommandUtils {\n \n     public static Query parseBasicVariantQuery(StorageVariantCommandOptions.BasicVariantQueryOptions options,\n                                                Query query) throws IOException {\n-\n-        /*\n+    /*\n          * Parse Variant parameters\n          */\n         if (options.region != null && !options.region.isEmpty()) {\n@@ -108,8 +107,7 @@ public class VariantQueryCommandUtils {\n \n     protected static Query parseGenericVariantQuery(StorageVariantCommandOptions.GenericVariantQueryOptions queryVariantsOptions,\n                                                     String studiesFilter, Collection<String> allStudyNames, boolean count,\n-                                                    VariantWriterFactory.VariantOutputFormat of)\n-            throws IOException {\n+                                                    VariantWriterFactory.VariantOutputFormat of) throws IOException {\n \n         Query query = new Query();\n         parseBasicVariantQuery(queryVariantsOptions, query);\n@@ -162,8 +160,7 @@ public class VariantQueryCommandUtils {\n                 String availableStudies = allStudyNames == null || allStudyNames.isEmpty()\n                         ? \"\"\n                         : \" Available studies: [ \" + String.join(\", \", allStudyNames) + \" ]\";\n-                throw new VariantQueryException(\"Only one study is allowed when returning \" + of + \", \" +\n-                        \"please use '--include-study' to select the returned study. \" + availableStudies);\n+                throw new VariantQueryException(\"Only one study is allowed when returning \" + of + \", \" + \"please use '--include-study' to select the returned study. \" + availableStudies);\n             }\n         }\n \n@@ -229,4 +226,4 @@ public class VariantQueryCommandUtils {\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "165",
                    "column": "105",
                    "severity": "error",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "165",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 188).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/38/VariantQueryCommandUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/38/VariantQueryCommandUtils.java\nindex 14c090b842f..ee188feb66d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/38/VariantQueryCommandUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/38/VariantQueryCommandUtils.java\n@@ -162,8 +162,7 @@ public class VariantQueryCommandUtils {\n                 String availableStudies = allStudyNames == null || allStudyNames.isEmpty()\n                         ? \"\"\n                         : \" Available studies: [ \" + String.join(\", \", allStudyNames) + \" ]\";\n-                throw new VariantQueryException(\"Only one study is allowed when returning \" + of + \", \" +\n-                        \"please use '--include-study' to select the returned study. \" + availableStudies);\n+                throw new VariantQueryException(\"Only one study is allowed when returning \" + of + \", \" + \"please use '--include-study' to select the returned study. \" + availableStudies);\n             }\n         }\n \n",
            "diff_size": 2
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}