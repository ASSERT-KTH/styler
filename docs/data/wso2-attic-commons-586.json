{
    "project_name": "wso2-attic-commons",
    "error_id": "586",
    "information": {
        "errors": [
            {
                "line": "127",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 167).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    @Override\n    public void save(PersistenceManagementEvent persistenceManagementEvent) {\n        persistenceStore.save(persistenceManagementEvent,nodeId,new PersistenceObject(new ArrayList<StateEvent>(currentEvents),new ArrayList<StateEvent>(nextEvents)));\n    }\n\n    @Override",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/586/PatternSingleStreamReceiver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/586/PatternSingleStreamReceiver.java\nindex c5f105fdb1a..6644e0c8847 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/586/PatternSingleStreamReceiver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/586/PatternSingleStreamReceiver.java\n@@ -124,7 +124,8 @@ public class PatternSingleStreamReceiver implements StreamReceiver, StreamElemen\n \n     @Override\n     public void save(PersistenceManagementEvent persistenceManagementEvent) {\n-        persistenceStore.save(persistenceManagementEvent,nodeId,new PersistenceObject(new ArrayList<StateEvent>(currentEvents),new ArrayList<StateEvent>(nextEvents)));\n+        persistenceStore.save(persistenceManagementEvent,nodeId,new PersistenceObject(new ArrayList<StateEvent\n+            >(currentEvents),new ArrayList<StateEvent>(nextEvents)));\n     }\n \n     @Override\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/586/PatternSingleStreamReceiver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/586/PatternSingleStreamReceiver.java\nindex c5f105fdb1a..19b909897b2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/586/PatternSingleStreamReceiver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/586/PatternSingleStreamReceiver.java\n@@ -1,20 +1,21 @@\n /*\n-*  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n+ *  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n package org.wso2.siddhi.core.query.stream.recevier.pattern;\n \n import org.apache.log4j.Logger;\n@@ -36,101 +37,102 @@ import java.util.concurrent.BlockingQueue;\n import java.util.concurrent.LinkedBlockingQueue;\n \n public class PatternSingleStreamReceiver implements StreamReceiver, StreamElement, Persister {\n-    static final Logger log = Logger.getLogger(PatternSingleStreamReceiver.class);\n-    protected int complexEventSize;\n-    protected PatternState state;\n-    protected PatternState nextState;\n-    protected PatternState nextEveryState;\n-    protected StreamProcessor firstSimpleStreamProcessor;\n-    protected BlockingQueue<StateEvent> currentEvents = new LinkedBlockingQueue<StateEvent>();\n-    protected BlockingQueue<StateEvent> nextEvents = new LinkedBlockingQueue<StateEvent>();\n-    //    private final boolean first;\n-    protected final int currentState;\n-    protected String nodeId;\n-    protected PersistenceStore persistenceStore;\n-\n-\n-    public PatternSingleStreamReceiver(PatternState state,\n-                                       StreamProcessor firstSimpleStreamProcessor,\n-                                       int complexEventSize) {\n-        this.state = state;\n-        this.nextState = state.getNextState();\n-        this.nextEveryState = state.getNextEveryState();\n-        this.currentState = state.getStateNumber();\n-        this.complexEventSize = complexEventSize;\n-        this.firstSimpleStreamProcessor = firstSimpleStreamProcessor;\n+  static final Logger log = Logger.getLogger(PatternSingleStreamReceiver.class);\n+  protected int complexEventSize;\n+  protected PatternState state;\n+  protected PatternState nextState;\n+  protected PatternState nextEveryState;\n+  protected StreamProcessor firstSimpleStreamProcessor;\n+  protected BlockingQueue<StateEvent> currentEvents = new LinkedBlockingQueue<StateEvent>();\n+  protected BlockingQueue<StateEvent> nextEvents = new LinkedBlockingQueue<StateEvent>();\n+  //    private final boolean first;\n+  protected final int currentState;\n+  protected String nodeId;\n+  protected PersistenceStore persistenceStore;\n+\n+\n+  public PatternSingleStreamReceiver(PatternState state,\n+                                     StreamProcessor firstSimpleStreamProcessor,\n+                                     int complexEventSize) {\n+    this.state = state;\n+    this.nextState = state.getNextState();\n+    this.nextEveryState = state.getNextEveryState();\n+    this.currentState = state.getStateNumber();\n+    this.complexEventSize = complexEventSize;\n+    this.firstSimpleStreamProcessor = firstSimpleStreamProcessor;\n //        init(state, complexEventSize);\n-    }\n+  }\n \n-    public void init() {\n-        if (state.isFirst()) {\n-            //first event\n-            addToNextEvents(new InStateEvent(new StreamEvent[complexEventSize]));\n-        }\n+  public void init() {\n+    if (state.isFirst()) {\n+      //first event\n+      addToNextEvents(new InStateEvent(new StreamEvent[complexEventSize]));\n     }\n+  }\n \n-    @Override\n-    public void receive(StreamEvent event) {\n-        if (log.isDebugEnabled()) {\n-            log.debug(\"pr state=\" + currentState + \" event=\" + event + \" ||currentEvents=\" + currentEvents);\n-        }\n-        for (StateEvent currentEvent : currentEvents) {\n-\n-            currentEvent.setStreamEvent(currentState, event);\n-            firstSimpleStreamProcessor.process(currentEvent);\n-            if (currentEvent.getEventState() < currentState) {\n-                currentEvent.setStreamEvent(currentState, null);\n-                addToNextEvents(currentEvent);\n-            }\n-        }\n+  @Override\n+  public void receive(StreamEvent event) {\n+    if (log.isDebugEnabled()) {\n+      log.debug(\"pr state=\" + currentState + \" event=\" + event + \" ||currentEvents=\" + currentEvents);\n+    }\n+    for (StateEvent currentEvent : currentEvents) {\n+\n+      currentEvent.setStreamEvent(currentState, event);\n+      firstSimpleStreamProcessor.process(currentEvent);\n+      if (currentEvent.getEventState() < currentState) {\n+        currentEvent.setStreamEvent(currentState, null);\n+        addToNextEvents(currentEvent);\n+      }\n+    }\n //        currentEvents.clear();\n //        }\n-    }\n+  }\n \n-    public String getStreamId() {\n-        return state.getSingleStream().getStreamId();\n-    }\n+  public String getStreamId() {\n+    return state.getSingleStream().getStreamId();\n+  }\n \n-    public void addToNextEvents(StateEvent stateEvent) {\n+  public void addToNextEvents(StateEvent stateEvent) {\n //        System.out.println(\"add to next ss\");\n-        try {\n-            nextEvents.put(stateEvent);\n-        } catch (InterruptedException e) {\n-            e.printStackTrace();\n-        }\n+    try {\n+      nextEvents.put(stateEvent);\n+    } catch (InterruptedException e) {\n+      e.printStackTrace();\n     }\n+  }\n \n-    public void moveNextEventsToCurrentEvents() {\n-        //todo need to check which is faster\n-        // 1\n+  public void moveNextEventsToCurrentEvents() {\n+    //todo need to check which is faster\n+    // 1\n //        currentEvents.clear();\n //        currentEvents.addAll(nextEvents);\n //        nextEvents.clear();\n \n //        // 2\n-        currentEvents = nextEvents;\n-        nextEvents = new LinkedBlockingQueue<StateEvent>();\n-    }\n-\n-    @Override\n-    public void setNodeId(String nodeId) {\n-        this.nodeId = nodeId;\n-    }\n-\n-    @Override\n-    public void setPersistenceStore(PersistenceStore persistenceStore) {\n-        this.persistenceStore=persistenceStore;\n-    }\n-\n-    @Override\n-    public void save(PersistenceManagementEvent persistenceManagementEvent) {\n-        persistenceStore.save(persistenceManagementEvent,nodeId,new PersistenceObject(new ArrayList<StateEvent>(currentEvents),new ArrayList<StateEvent>(nextEvents)));\n-    }\n-\n-    @Override\n-    public void load(PersistenceManagementEvent persistenceManagementEvent) {\n-      PersistenceObject persistenceObject = persistenceStore.load(persistenceManagementEvent,nodeId);\n-        currentEvents=new LinkedBlockingQueue<StateEvent>((List)persistenceObject.getData()[0]);\n-        nextEvents=new LinkedBlockingQueue<StateEvent>((List)persistenceObject.getData()[1]);\n-    }\n+    currentEvents = nextEvents;\n+    nextEvents = new LinkedBlockingQueue<StateEvent>();\n+  }\n+\n+  @Override\n+  public void setNodeId(String nodeId) {\n+    this.nodeId = nodeId;\n+  }\n+\n+  @Override\n+  public void setPersistenceStore(PersistenceStore persistenceStore) {\n+    this.persistenceStore = persistenceStore;\n+  }\n+\n+  @Override\n+  public void save(PersistenceManagementEvent persistenceManagementEvent) {\n+    persistenceStore.save(persistenceManagementEvent, nodeId,\n+      new PersistenceObject(new ArrayList<StateEvent>(currentEvents), new ArrayList<StateEvent>(nextEvents)));\n+  }\n+\n+  @Override\n+  public void load(PersistenceManagementEvent persistenceManagementEvent) {\n+    PersistenceObject persistenceObject = persistenceStore.load(persistenceManagementEvent, nodeId);\n+    currentEvents = new LinkedBlockingQueue<StateEvent>((List) persistenceObject.getData()[0]);\n+    nextEvents = new LinkedBlockingQueue<StateEvent>((List) persistenceObject.getData()[1]);\n+  }\n }\n",
            "diff_size": 101
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "127",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/586/PatternSingleStreamReceiver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/586/PatternSingleStreamReceiver.java\nindex c5f105fdb1a..6644e0c8847 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/586/PatternSingleStreamReceiver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/586/PatternSingleStreamReceiver.java\n@@ -124,7 +124,8 @@ public class PatternSingleStreamReceiver implements StreamReceiver, StreamElemen\n \n     @Override\n     public void save(PersistenceManagementEvent persistenceManagementEvent) {\n-        persistenceStore.save(persistenceManagementEvent,nodeId,new PersistenceObject(new ArrayList<StateEvent>(currentEvents),new ArrayList<StateEvent>(nextEvents)));\n+        persistenceStore.save(persistenceManagementEvent,nodeId,new PersistenceObject(new ArrayList<StateEvent\n+            >(currentEvents),new ArrayList<StateEvent>(nextEvents)));\n     }\n \n     @Override\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}