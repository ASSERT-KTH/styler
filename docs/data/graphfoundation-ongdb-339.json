{
    "project_name": "graphfoundation-ongdb",
    "error_id": "339",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/339/TimeUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/339/TimeUtil.java\nindex 1eca2cbd7b8..cb4e86226c2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/339/TimeUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/339/TimeUtil.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.helpers;\n \n import java.util.concurrent.TimeUnit;\n@@ -32,101 +33,101 @@ import static java.util.concurrent.TimeUnit.SECONDS;\n \n public final class TimeUtil\n {\n-    public static final TimeUnit DEFAULT_TIME_UNIT = TimeUnit.SECONDS;\n+  public static final TimeUnit DEFAULT_TIME_UNIT = TimeUnit.SECONDS;\n \n-    public static final String VALID_TIME_DESCRIPTION = \"Valid units are: 'ms', 's', 'm' and 'h'; default unit is 's'\";\n+  public static final String VALID_TIME_DESCRIPTION = \"Valid units are: 'ms', 's', 'm' and 'h'; default unit is 's'\";\n \n-    public static final Function<String,Long> parseTimeMillis = timeWithOrWithoutUnit ->\n+  public static final Function<String, Long> parseTimeMillis = timeWithOrWithoutUnit ->\n+  {\n+    int unitIndex = -1;\n+    for (int i = 0; i < timeWithOrWithoutUnit.length(); i++)\n     {\n-        int unitIndex = -1;\n-        for ( int i = 0; i < timeWithOrWithoutUnit.length(); i++ )\n-        {\n-            char ch = timeWithOrWithoutUnit.charAt( i );\n-            if ( !Character.isDigit( ch ) )\n-            {\n-                unitIndex = i;\n-                break;\n-            }\n-        }\n-        if ( unitIndex == -1 )\n-        {\n-            return DEFAULT_TIME_UNIT.toMillis( Integer.parseInt( timeWithOrWithoutUnit ) );\n-        }\n-\n-        String unit = timeWithOrWithoutUnit.substring( unitIndex ).toLowerCase();\n-        if ( unitIndex == 0 )\n-        {\n-            throw new IllegalArgumentException( \"Missing numeric value\" );\n-        }\n-\n-        // We have digits\n-        int amount = Integer.parseInt( timeWithOrWithoutUnit.substring( 0, unitIndex ) );\n-        switch ( unit )\n-        {\n-        case \"ms\":\n-            return TimeUnit.MILLISECONDS.toMillis( amount );\n-        case \"s\":\n-            return TimeUnit.SECONDS.toMillis( amount );\n-        case \"m\":\n-            return TimeUnit.MINUTES.toMillis( amount );\n-        case \"h\":\n-            return TimeUnit.HOURS.toMillis( amount );\n-        default:\n-            throw new IllegalArgumentException( \"Unrecognized unit '\" + unit + \"'. \" + VALID_TIME_DESCRIPTION );\n-        }\n-    };\n+      char ch = timeWithOrWithoutUnit.charAt(i);\n+      if (!Character.isDigit(ch))\n+      {\n+        unitIndex = i;\n+        break;\n+      }\n+    }\n+    if (unitIndex == -1)\n+    {\n+      return DEFAULT_TIME_UNIT.toMillis(Integer.parseInt(timeWithOrWithoutUnit));\n+    }\n \n-    public static String nanosToString( long nanos )\n+    String unit = timeWithOrWithoutUnit.substring(unitIndex).toLowerCase();\n+    if (unitIndex == 0)\n     {\n-        assert nanos >= 0;\n-        long nanoSeconds = nanos;\n-        StringBuilder timeString = new StringBuilder();\n+      throw new IllegalArgumentException(\"Missing numeric value\");\n+    }\n \n-        long days = DAYS.convert( nanoSeconds, NANOSECONDS );\n-        if ( days > 0 )\n-        {\n-            nanoSeconds -= DAYS.toNanos( days );\n-            timeString.append( days ).append( 'd' );\n-        }\n-        long hours = HOURS.convert( nanoSeconds, NANOSECONDS );\n-        if ( hours > 0 )\n-        {\n-            nanoSeconds -= HOURS.toNanos( hours );\n-            timeString.append( hours ).append( 'h' );\n-        }\n-        long minutes = MINUTES.convert( nanoSeconds, NANOSECONDS );\n-        if ( minutes > 0 )\n-        {\n-            nanoSeconds -= MINUTES.toNanos( minutes );\n-            timeString.append( minutes ).append( 'm' );\n-        }\n-        long seconds = SECONDS.convert( nanoSeconds, NANOSECONDS );\n-        if ( seconds > 0 )\n-        {\n-            nanoSeconds -= SECONDS.toNanos( seconds );\n-            timeString.append( seconds ).append( 's' );\n-        }\n-        long milliseconds = MILLISECONDS.convert( nanoSeconds, NANOSECONDS );\n-        if ( milliseconds > 0 )\n-        {\n-            nanoSeconds -= MILLISECONDS.toNanos( milliseconds );\n-            timeString.append( milliseconds ).append( \"ms\" );\n-        }\n-        long microseconds = MICROSECONDS.convert( nanoSeconds, NANOSECONDS );\n-        if ( microseconds > 0 )\n-        {\n-            nanoSeconds -= MICROSECONDS.toNanos( microseconds );\n-            timeString.append( microseconds ).append( \"\u03bcs\" );\n-        }\n-        if ( nanoSeconds > 0 || timeString.length() == 0 )\n-        {\n-            timeString.append( nanoSeconds ).append( \"ns\" );\n-        }\n-        return timeString.toString();\n+    // We have digits\n+    int amount = Integer.parseInt(timeWithOrWithoutUnit.substring(0, unitIndex));\n+    switch (unit)\n+    {\n+      case \"ms\":\n+        return TimeUnit.MILLISECONDS.toMillis(amount);\n+      case \"s\":\n+        return TimeUnit.SECONDS.toMillis(amount);\n+      case \"m\":\n+        return TimeUnit.MINUTES.toMillis(amount);\n+      case \"h\":\n+        return TimeUnit.HOURS.toMillis(amount);\n+      default:\n+        throw new IllegalArgumentException(\"Unrecognized unit '\" + unit + \"'. \" + VALID_TIME_DESCRIPTION);\n     }\n+  };\n+\n+  public static String nanosToString(long nanos)\n+  {\n+    assert nanos >= 0;\n+    long nanoSeconds = nanos;\n+    StringBuilder timeString = new StringBuilder();\n \n-    private TimeUtil()\n+    long days = DAYS.convert(nanoSeconds, NANOSECONDS);\n+    if (days > 0)\n+    {\n+      nanoSeconds -= DAYS.toNanos(days);\n+      timeString.append(days).append('d');\n+    }\n+    long hours = HOURS.convert(nanoSeconds, NANOSECONDS);\n+    if (hours > 0)\n     {\n-        throw new AssertionError(); // no instances\n+      nanoSeconds -= HOURS.toNanos(hours);\n+      timeString.append(hours).append('h');\n     }\n+    long minutes = MINUTES.convert(nanoSeconds, NANOSECONDS);\n+    if (minutes > 0)\n+    {\n+      nanoSeconds -= MINUTES.toNanos(minutes);\n+      timeString.append(minutes).append('m');\n+    }\n+    long seconds = SECONDS.convert(nanoSeconds, NANOSECONDS);\n+    if (seconds > 0)\n+    {\n+      nanoSeconds -= SECONDS.toNanos(seconds);\n+      timeString.append(seconds).append('s');\n+    }\n+    long milliseconds = MILLISECONDS.convert(nanoSeconds, NANOSECONDS);\n+    if (milliseconds > 0)\n+    {\n+      nanoSeconds -= MILLISECONDS.toNanos(milliseconds);\n+      timeString.append(milliseconds).append(\"ms\");\n+    }\n+    long microseconds = MICROSECONDS.convert(nanoSeconds, NANOSECONDS);\n+    if (microseconds > 0)\n+    {\n+      nanoSeconds -= MICROSECONDS.toNanos(microseconds);\n+      timeString.append(microseconds).append(\"\u03bcs\");\n+    }\n+    if (nanoSeconds > 0 || timeString.length() == 0)\n+    {\n+      timeString.append(nanoSeconds).append(\"ns\");\n+    }\n+    return timeString.toString();\n+  }\n+\n+  private TimeUtil()\n+  {\n+    throw new AssertionError(); // no instances\n+  }\n }\n",
            "diff_size": 142
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/339/TimeUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/339/TimeUtil.java\nindex 1eca2cbd7b8..8bfdaecb776 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/339/TimeUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/339/TimeUtil.java\n@@ -118,15 +118,17 @@ public final class TimeUtil\n             nanoSeconds -= MICROSECONDS.toNanos( microseconds );\n             timeString.append( microseconds ).append( \"\u03bcs\" );\n         }\n-        if ( nanoSeconds > 0 || timeString.length() == 0 )\n+\n+if ( nanoSeconds > 0 || timeString.length() == 0 )\n         {\n             timeString.append( nanoSeconds ).append( \"ns\" );\n         }\n-        return timeString.toString();\n+\n+return timeString.toString();\n     }\n \n     private TimeUtil()\n     {\n         throw new AssertionError(); // no instances\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}