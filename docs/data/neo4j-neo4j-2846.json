{
    "project_name": "neo4j-neo4j",
    "error_id": "2846",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "60",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "122",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "133",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "142",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2846/StoreFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2846/StoreFactory.java\nindex a97777c2b56..83e3118240f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2846/StoreFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2846/StoreFactory.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store;\n \n import org.eclipse.collections.api.set.ImmutableSet;\n@@ -56,17 +57,17 @@ public class StoreFactory\n     private final PageCacheTracer cacheTracer;\n     private final ImmutableSet<OpenOption> openOptions;\n \n-    public StoreFactory( DatabaseLayout directoryStructure, Config config, IdGeneratorFactory idGeneratorFactory, PageCache pageCache,\n-            FileSystemAbstraction fileSystemAbstraction, LogProvider logProvider, PageCacheTracer cacheTracer )\n+    public StoreFactory(DatabaseLayout directoryStructure, Config config, IdGeneratorFactory idGeneratorFactory, PageCache pageCache,\n+                        FileSystemAbstraction fileSystemAbstraction, LogProvider logProvider, PageCacheTracer cacheTracer)\n     {\n-        this( directoryStructure, config, idGeneratorFactory, pageCache, fileSystemAbstraction,\n-                selectForStoreOrConfig( config, directoryStructure, fileSystemAbstraction, pageCache, logProvider, cacheTracer ),\n-                logProvider, cacheTracer, immutable.empty() );\n+        this(directoryStructure, config, idGeneratorFactory, pageCache, fileSystemAbstraction,\n+          selectForStoreOrConfig(config, directoryStructure, fileSystemAbstraction, pageCache, logProvider, cacheTracer),\n+          logProvider, cacheTracer, immutable.empty());\n     }\n \n-    public StoreFactory( DatabaseLayout databaseLayout, Config config, IdGeneratorFactory idGeneratorFactory, PageCache pageCache,\n-            FileSystemAbstraction fileSystemAbstraction, RecordFormats recordFormats, LogProvider logProvider, PageCacheTracer cacheTracer,\n-            ImmutableSet<OpenOption> openOptions )\n+    public StoreFactory(DatabaseLayout databaseLayout, Config config, IdGeneratorFactory idGeneratorFactory, PageCache pageCache,\n+                        FileSystemAbstraction fileSystemAbstraction, RecordFormats recordFormats, LogProvider logProvider, PageCacheTracer cacheTracer,\n+                        ImmutableSet<OpenOption> openOptions)\n     {\n         this.databaseLayout = databaseLayout;\n         this.config = config;\n@@ -74,84 +75,87 @@ public class StoreFactory\n         this.fileSystemAbstraction = fileSystemAbstraction;\n         this.recordFormats = recordFormats;\n         this.cacheTracer = cacheTracer;\n-        this.openOptions = buildOpenOptions( config, recordFormats, openOptions );\n+        this.openOptions = buildOpenOptions(config, recordFormats, openOptions);\n         this.logProvider = logProvider;\n         this.pageCache = pageCache;\n-        configureRecordFormat( recordFormats, config );\n+        configureRecordFormat(recordFormats, config);\n     }\n \n     /**\n      * Open {@link NeoStores} with all possible stores. If some store does not exist it will <b>not</b> be created.\n+     *\n      * @return container with all opened stores\n      */\n     public NeoStores openAllNeoStores()\n     {\n-        return openNeoStores( false, StoreType.values() );\n+        return openNeoStores(false, StoreType.values());\n     }\n \n     /**\n      * Open {@link NeoStores} with all possible stores with a possibility to create store if it not exist.\n+     *\n      * @param createStoreIfNotExists - should store be created if it's not exist\n      * @return container with all opened stores\n      */\n-    public NeoStores openAllNeoStores( boolean createStoreIfNotExists )\n+    public NeoStores openAllNeoStores(boolean createStoreIfNotExists)\n     {\n-        return openNeoStores( createStoreIfNotExists, StoreType.values() );\n+        return openNeoStores(createStoreIfNotExists, StoreType.values());\n     }\n \n     /**\n      * Open {@link NeoStores} for requested and store types. If requested store depend from non request store,\n      * it will be automatically opened as well.\n      * If some store does not exist it will <b>not</b> be created.\n+     *\n      * @param storeTypes - types of stores to be opened.\n      * @return container with opened stores\n      */\n-    public NeoStores openNeoStores( StoreType... storeTypes )\n+    public NeoStores openNeoStores(StoreType... storeTypes)\n     {\n-        return openNeoStores( false, storeTypes );\n+        return openNeoStores(false, storeTypes);\n     }\n \n     /**\n      * Open {@link NeoStores} for requested and store types. If requested store depend from non request store,\n      * it will be automatically opened as well.\n+     *\n      * @param createStoreIfNotExists - should store be created if it's not exist\n-     * @param storeTypes - types of stores to be opened.\n+     * @param storeTypes             - types of stores to be opened.\n      * @return container with opened stores\n      */\n-    public NeoStores openNeoStores( boolean createStoreIfNotExists, StoreType... storeTypes )\n+    public NeoStores openNeoStores(boolean createStoreIfNotExists, StoreType... storeTypes)\n     {\n-        if ( createStoreIfNotExists )\n+        if (createStoreIfNotExists)\n         {\n             try\n             {\n-                fileSystemAbstraction.mkdirs( databaseLayout.databaseDirectory() );\n-            }\n-            catch ( IOException e )\n+                fileSystemAbstraction.mkdirs(databaseLayout.databaseDirectory());\n+            } catch (IOException e)\n             {\n                 throw new UnderlyingStorageException(\n-                        \"Could not create database directory: \" + databaseLayout.databaseDirectory(), e );\n+                  \"Could not create database directory: \" + databaseLayout.databaseDirectory(), e);\n             }\n         }\n-        return new NeoStores( fileSystemAbstraction, databaseLayout, config, idGeneratorFactory, pageCache, logProvider, recordFormats, createStoreIfNotExists,\n-                cacheTracer, storeTypes, openOptions );\n+        return new NeoStores(fileSystemAbstraction, databaseLayout, config, idGeneratorFactory, pageCache, logProvider, recordFormats, createStoreIfNotExists,\n+          cacheTracer, storeTypes, openOptions);\n     }\n \n-    private static ImmutableSet<OpenOption> buildOpenOptions( Config config, RecordFormats recordFormats, ImmutableSet<OpenOption> openOptions )\n+    private static ImmutableSet<OpenOption> buildOpenOptions(Config config, RecordFormats recordFormats, ImmutableSet<OpenOption> openOptions)\n     {\n         // we need to modify options only for aligned format and avoid passing direct io option in all other cases\n-        if ( recordFormats.getFormatFamily() != AlignedFormatFamily.INSTANCE )\n+        if (recordFormats.getFormatFamily() != AlignedFormatFamily.INSTANCE)\n         {\n             return openOptions;\n         }\n-        if ( !config.get( GraphDatabaseSettings.pagecache_direct_io ) )\n+        if (!config.get(GraphDatabaseSettings.pagecache_direct_io))\n         {\n             return openOptions;\n         }\n \n-        if ( openOptions.contains( DIRECT ) )\n+        if (openOptions.contains(DIRECT))\n         {\n             return openOptions;\n         }\n-        return openOptions.newWith( DIRECT );\n+        return openOptions.newWith(DIRECT);\n     }\n }\n",
            "diff_size": 34
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}