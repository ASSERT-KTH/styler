{
    "project_name": "Activiti-Activiti",
    "error_id": "954",
    "information": {
        "errors": [
            {
                "line": "16",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.api.runtime.model.impl;\n\nimport com.fasterxml.jackson.core.JsonGenerator;\nimport com.fasterxml.jackson.core.JsonProcessingException;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/954/ProcessVariablesMapSerializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/954/ProcessVariablesMapSerializer.java\nindex 2b67f565e14..3fc3aeb7e0b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/954/ProcessVariablesMapSerializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/954/ProcessVariablesMapSerializer.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.api.runtime.model.impl;\n \n import com.fasterxml.jackson.core.JsonGenerator;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/954/ProcessVariablesMapSerializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/954/ProcessVariablesMapSerializer.java\nindex 2b67f565e14..787428d7156 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/954/ProcessVariablesMapSerializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/954/ProcessVariablesMapSerializer.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.api.runtime.model.impl;\n \n import com.fasterxml.jackson.core.JsonGenerator;\n@@ -40,8 +41,8 @@ public class ProcessVariablesMapSerializer extends StdSerializer<ProcessVariable\n \n     @Override\n     public void serialize(ProcessVariablesMap<String, Object> processVariablesMap,\n-        JsonGenerator gen,\n-        SerializerProvider serializers) throws IOException {\n+                          JsonGenerator gen,\n+                          SerializerProvider serializers) throws IOException {\n \n         HashMap<String, ProcessVariableValue> map = new HashMap<>();\n         for (Map.Entry<String, Object> entry : processVariablesMap.entrySet()) {\n@@ -54,7 +55,7 @@ public class ProcessVariablesMapSerializer extends StdSerializer<ProcessVariable\n     }\n \n     private ProcessVariableValue buildProcessVariableValue(Object value)\n-        throws JsonProcessingException {\n+            throws JsonProcessingException {\n         ProcessVariableValue variableValue = null;\n         if (value != null) {\n             Class<?> entryValueClass = value.getClass();\n",
            "diff_size": 4
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "16",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "30",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/954/ProcessVariablesMapSerializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/954/ProcessVariablesMapSerializer.java\nindex 2b67f565e14..3309afa329f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/954/ProcessVariablesMapSerializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/954/ProcessVariablesMapSerializer.java\n@@ -26,63 +26,62 @@ import java.util.HashMap;\n import java.util.Map;\n import org.springframework.core.convert.ConversionService;\n \n+\n public class ProcessVariablesMapSerializer extends StdSerializer<ProcessVariablesMap<String, Object>> {\n \n-    private static final long serialVersionUID = 1L;\n-    private static final ObjectMapper objectMapper = new ObjectMapper();\n-    private final ConversionService conversionService;\n+  private static final long serialVersionUID = 1L;\n \n-    public ProcessVariablesMapSerializer(ConversionService conversionService) {\n-        super(ProcessVariablesMap.class, true);\n+  private static final ObjectMapper objectMapper = new ObjectMapper();\n \n-        this.conversionService = conversionService;\n-    }\n+  private final ConversionService conversionService;\n \n-    @Override\n-    public void serialize(ProcessVariablesMap<String, Object> processVariablesMap,\n-        JsonGenerator gen,\n-        SerializerProvider serializers) throws IOException {\n+  public ProcessVariablesMapSerializer(ConversionService conversionService) {\n+    super(ProcessVariablesMap.class, true);\n+    this.conversionService = conversionService;\n+  }\n \n-        HashMap<String, ProcessVariableValue> map = new HashMap<>();\n-        for (Map.Entry<String, Object> entry : processVariablesMap.entrySet()) {\n-            String name = entry.getKey();\n-            Object value = entry.getValue();\n-            map.put(name, buildProcessVariableValue(value));\n-        }\n+  @Override\n+  public void serialize(ProcessVariablesMap<String, Object> processVariablesMap,\n+                        JsonGenerator gen, SerializerProvider serializers) throws IOException {\n+                          HashMap<String, ProcessVariableValue> map = new HashMap<>();\n+                          for (Map.Entry<String, Object> entry : processVariablesMap.entrySet()) {\n+                              String name = entry.getKey();\n+                              Object value = entry.getValue();\n+                              map.put(name, buildProcessVariableValue(value));\n+                          }\n+                          gen.writeObject(map);\n+  }\n \n-        gen.writeObject(map);\n-    }\n+  private ProcessVariableValue buildProcessVariableValue(Object value) throws JsonProcessingException {\n+    ProcessVariableValue variableValue = null;\n+    if (value != null) {\n+      Class<?> entryValueClass = value.getClass();\n+      boolean canConvert = conversionService.canConvert(entryValueClass, String.class);\n+      if (!canConvert) {\n+        value = objectMapper.writeValueAsString(value);\n+      }\n \n-    private ProcessVariableValue buildProcessVariableValue(Object value)\n-        throws JsonProcessingException {\n-        ProcessVariableValue variableValue = null;\n-        if (value != null) {\n-            Class<?> entryValueClass = value.getClass();\n-            boolean canConvert = conversionService.canConvert(entryValueClass, String.class);\n-            if (!canConvert) {\n-                value = objectMapper.writeValueAsString(value);\n-            }\n-            String entryType = resolveEntryType(value, canConvert);\n-            String entryValue = conversionService.convert(value, String.class);\n-\n-            variableValue = new ProcessVariableValue(entryType, entryValue);\n-        }\n-        return variableValue;\n+      String entryType = resolveEntryType(value, canConvert);\n+      String entryValue = conversionService.convert(value, String.class);\n+      variableValue = new ProcessVariableValue(entryType, entryValue);\n     }\n+    return variableValue;\n+  }\n \n-    private String resolveEntryType(Object value, boolean canConvert) {\n-        String entryType;\n-        if (canConvert) {\n-            if (Map.class.isInstance(value)) {\n-                entryType = Map.class.getName();\n-            } else if (JsonNode.class.isInstance(value)) {\n-                entryType = JsonNode.class.getName();\n-            } else {\n-                entryType = value.getClass().getName();\n-            }\n-        } else {\n-            entryType = Map.class.getName();\n-        }\n-        return entryType;\n+  private String resolveEntryType(Object value, boolean canConvert) {\n+    String entryType;\n+    if (canConvert) {\n+      if (Map.class.isInstance(value)) {\n+        entryType = Map.class.getName();\n+      } else if (JsonNode.class.isInstance(value)) {\n+        entryType = JsonNode.class.getName();\n+      } else {\n+        entryType = value.getClass().getName();\n+      }\n+    } else {\n+      entryType = Map.class.getName();\n     }\n-}\n+    return entryType;\n+  }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 66
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/954/ProcessVariablesMapSerializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/954/ProcessVariablesMapSerializer.java\nindex 2b67f565e14..3fc3aeb7e0b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/954/ProcessVariablesMapSerializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/954/ProcessVariablesMapSerializer.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.api.runtime.model.impl;\n \n import com.fasterxml.jackson.core.JsonGenerator;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/954/ProcessVariablesMapSerializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/954/ProcessVariablesMapSerializer.java\nindex 2b67f565e14..3fc3aeb7e0b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/954/ProcessVariablesMapSerializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/954/ProcessVariablesMapSerializer.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.api.runtime.model.impl;\n \n import com.fasterxml.jackson.core.JsonGenerator;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}