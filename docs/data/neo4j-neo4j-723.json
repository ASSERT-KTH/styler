{
    "project_name": "neo4j-neo4j",
    "error_id": "723",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "53",
                    "column": "89",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "81",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/723/FulltextIndexProviderFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/723/FulltextIndexProviderFactory.java\nindex 0dc50f52a24..3eda05d6f50 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/723/FulltextIndexProviderFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/723/FulltextIndexProviderFactory.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema;\n \n import java.nio.file.Path;\n@@ -49,7 +50,7 @@ import static org.neo4j.kernel.api.index.IndexDirectoryStructure.directoriesByPr\n public class FulltextIndexProviderFactory extends ExtensionFactory<FulltextIndexProviderFactory.Dependencies>\n {\n     private static final String KEY = \"fulltext\";\n-    public static final IndexProviderDescriptor DESCRIPTOR = new IndexProviderDescriptor( KEY, \"1.0\" );\n+    public static final IndexProviderDescriptor DESCRIPTOR = new IndexProviderDescriptor(KEY, \"1.0\");\n \n     public interface Dependencies\n     {\n@@ -68,30 +69,30 @@ public class FulltextIndexProviderFactory extends ExtensionFactory<FulltextIndex\n \n     public FulltextIndexProviderFactory()\n     {\n-        super( ExtensionType.DATABASE, KEY );\n+        super(ExtensionType.DATABASE, KEY);\n     }\n \n-    private static IndexDirectoryStructure.Factory subProviderDirectoryStructure( Path storeDir )\n+    private static IndexDirectoryStructure.Factory subProviderDirectoryStructure(Path storeDir)\n     {\n-        return directoriesByProvider( storeDir );\n+        return directoriesByProvider(storeDir);\n     }\n \n     @Override\n-    public Lifecycle newInstance( ExtensionContext context, Dependencies dependencies )\n+    public Lifecycle newInstance(ExtensionContext context, Dependencies dependencies)\n     {\n         Config config = dependencies.getConfig();\n-        boolean ephemeral = config.get( GraphDatabaseInternalSettings.ephemeral_lucene );\n+        boolean ephemeral = config.get(GraphDatabaseInternalSettings.ephemeral_lucene);\n         FileSystemAbstraction fileSystemAbstraction = dependencies.fileSystem();\n-        DirectoryFactory directoryFactory = directoryFactory( ephemeral );\n+        DirectoryFactory directoryFactory = directoryFactory(ephemeral);\n         OperationalMode operationalMode = context.dbmsInfo().operationalMode;\n         boolean isSingleInstance = operationalMode == OperationalMode.SINGLE;\n         JobScheduler scheduler = dependencies.scheduler();\n-        IndexDirectoryStructure.Factory directoryStructureFactory = subProviderDirectoryStructure( context.directory() );\n+        IndexDirectoryStructure.Factory directoryStructureFactory = subProviderDirectoryStructure(context.directory());\n         TokenHolders tokenHolders = dependencies.tokenHolders();\n-        Log log = dependencies.getLogService().getInternalLog( FulltextIndexProvider.class );\n+        Log log = dependencies.getLogService().getInternalLog(FulltextIndexProvider.class);\n \n         return new FulltextIndexProvider(\n-                DESCRIPTOR, directoryStructureFactory, fileSystemAbstraction, config, tokenHolders,\n-                directoryFactory, isSingleInstance, scheduler, log );\n+          DESCRIPTOR, directoryStructureFactory, fileSystemAbstraction, config, tokenHolders,\n+          directoryFactory, isSingleInstance, scheduler, log);\n     }\n }\n",
            "diff_size": 12
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}