{
    "project_name": "SentinelDataHub-dhus-core",
    "error_id": "29",
    "information": {
        "errors": [
            {
                "line": "44",
                "severity": "error",
                "message": "Line is longer than 80 characters (found 100).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "   protected Synchronizer serviceGet (Long key)\n   {\n      ProductSynchronizer sc = SYNC_SERVICE.getSynchronizerConfById(key, ProductSynchronizer.class);\n      if (sc == null)\n      {\n         return null;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/29/SynchronizerMap.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/styler/29/SynchronizerMap.java\nindex 668eb5b8762..1a3f8bbea89 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/29/SynchronizerMap.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/styler/29/SynchronizerMap.java\n@@ -41,7 +41,8 @@ public class SynchronizerMap extends AbstractDelegatingMap<Long, Synchronizer>\n    @Override\n    protected Synchronizer serviceGet (Long key)\n    {\n-      ProductSynchronizer sc = SYNC_SERVICE.getSynchronizerConfById(key, ProductSynchronizer.class);\n+      ProductSynchronizer sc = SYNC_SERVICE.getSynchronizerConfById(\n+            key, ProductSynchronizer.class);\n       if (sc == null)\n       {\n          return null;\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/29/SynchronizerMap.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/intellij/29/SynchronizerMap.java\nindex 668eb5b8762..f014d9e8419 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/29/SynchronizerMap.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/intellij/29/SynchronizerMap.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package fr.gael.dhus.olingo.v1.map.impl;\n \n import fr.gael.dhus.database.object.config.synchronizer.ProductSynchronizer;\n@@ -34,51 +35,54 @@ import java.util.Iterator;\n  */\n public class SynchronizerMap extends AbstractDelegatingMap<Long, Synchronizer>\n {\n-   /** Synchronizer Service, the underlying service. */\n-   private static final ISynchronizerService SYNC_SERVICE =\n-         ApplicationContextProvider.getBean (ISynchronizerService.class);\n+    /**\n+     * Synchronizer Service, the underlying service.\n+     */\n+    private static final ISynchronizerService SYNC_SERVICE =\n+        ApplicationContextProvider.getBean(ISynchronizerService.class);\n \n-   @Override\n-   protected Synchronizer serviceGet (Long key)\n-   {\n-      ProductSynchronizer sc = SYNC_SERVICE.getSynchronizerConfById(key, ProductSynchronizer.class);\n-      if (sc == null)\n-      {\n-         return null;\n-      }\n-      return new Synchronizer(sc);\n-   }\n+    @Override\n+    protected Synchronizer serviceGet(Long key)\n+    {\n+        ProductSynchronizer sc = SYNC_SERVICE\n+            .getSynchronizerConfById(key, ProductSynchronizer.class);\n+        if (sc == null)\n+        {\n+            return null;\n+        }\n+        return new Synchronizer(sc);\n+    }\n \n-   @Override\n-   protected Iterator<Synchronizer> serviceIterator ()\n-   {\n-      final Iterator<ProductSynchronizer> it =\n+    @Override\n+    protected Iterator<Synchronizer> serviceIterator()\n+    {\n+        final Iterator<ProductSynchronizer> it =\n             SYNC_SERVICE.getSynchronizerConfs(ProductSynchronizer.class);\n-      return new Iterator<Synchronizer> ()\n-      {\n-         @Override\n-         public boolean hasNext ()\n-         {\n-            return it.hasNext ();\n-         }\n+        return new Iterator<Synchronizer>()\n+        {\n+            @Override\n+            public boolean hasNext()\n+            {\n+                return it.hasNext();\n+            }\n \n-         @Override\n-         public Synchronizer next ()\n-         {\n-            return new Synchronizer (it.next ());\n-         }\n+            @Override\n+            public Synchronizer next()\n+            {\n+                return new Synchronizer(it.next());\n+            }\n \n-         @Override\n-         public void remove ()\n-         {\n-            throw new UnsupportedOperationException ();\n-         }\n-      };\n-   }\n+            @Override\n+            public void remove()\n+            {\n+                throw new UnsupportedOperationException();\n+            }\n+        };\n+    }\n \n-   @Override\n-   protected int serviceCount ()\n-   {\n-      return SYNC_SERVICE.count ();\n-   }\n+    @Override\n+    protected int serviceCount()\n+    {\n+        return SYNC_SERVICE.count();\n+    }\n }\n",
            "diff_size": 45
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "44",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 100).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/29/SynchronizerMap.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/naturalize/29/SynchronizerMap.java\nindex 668eb5b8762..da5fd67cd49 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/29/SynchronizerMap.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/naturalize/29/SynchronizerMap.java\n@@ -81,4 +81,4 @@ public class SynchronizerMap extends AbstractDelegatingMap<Long, Synchronizer>\n    {\n       return SYNC_SERVICE.count ();\n    }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/29/SynchronizerMap.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/codebuff/29/SynchronizerMap.java\nindex 668eb5b8762..8f34b433ea0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/29/SynchronizerMap.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/codebuff/29/SynchronizerMap.java\n@@ -24,7 +24,6 @@ import fr.gael.dhus.olingo.v1.entity.Synchronizer;\n import fr.gael.dhus.olingo.v1.map.AbstractDelegatingMap;\n import fr.gael.dhus.service.ISynchronizerService;\n import fr.gael.dhus.spring.context.ApplicationContextProvider;\n-\n import java.util.Iterator;\n \n /**\n@@ -32,16 +31,16 @@ import java.util.Iterator;\n  *\n  * @see AbstractDelegatingMap\n  */\n+\n public class SynchronizerMap extends AbstractDelegatingMap<Long, Synchronizer>\n {\n    /** Synchronizer Service, the underlying service. */\n-   private static final ISynchronizerService SYNC_SERVICE =\n-         ApplicationContextProvider.getBean (ISynchronizerService.class);\n+   private static final ISynchronizerService SYNC_SERVICE = ApplicationContextProvider.getBean (ISynchronizerService.class);\n \n    @Override\n    protected Synchronizer serviceGet (Long key)\n    {\n-      ProductSynchronizer sc = SYNC_SERVICE.getSynchronizerConfById(key, ProductSynchronizer.class);\n+      ProductSynchronizer sc = SYNC_SERVICE.getSynchronizerConfById (key, ProductSynchronizer.class);\n       if (sc == null)\n       {\n          return null;\n@@ -52,8 +51,7 @@ public class SynchronizerMap extends AbstractDelegatingMap<Long, Synchronizer>\n    @Override\n    protected Iterator<Synchronizer> serviceIterator ()\n    {\n-      final Iterator<ProductSynchronizer> it =\n-            SYNC_SERVICE.getSynchronizerConfs(ProductSynchronizer.class);\n+      final Iterator<ProductSynchronizer> it = SYNC_SERVICE.getSynchronizerConfs (ProductSynchronizer.class);\n       return new Iterator<Synchronizer> ()\n       {\n          @Override\n@@ -65,13 +63,13 @@ public class SynchronizerMap extends AbstractDelegatingMap<Long, Synchronizer>\n          @Override\n          public Synchronizer next ()\n          {\n-            return new Synchronizer (it.next ());\n+            return new Synchronizer(it.next ());\n          }\n \n          @Override\n          public void remove ()\n          {\n-            throw new UnsupportedOperationException ();\n+            throw new UnsupportedOperationException();\n          }\n       };\n    }\n@@ -81,4 +79,4 @@ public class SynchronizerMap extends AbstractDelegatingMap<Long, Synchronizer>\n    {\n       return SYNC_SERVICE.count ();\n    }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "44",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 100).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/29/SynchronizerMap.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/styler_three_grams/29/SynchronizerMap.java\nindex 668eb5b8762..1a3f8bbea89 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/29/SynchronizerMap.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/styler_three_grams/29/SynchronizerMap.java\n@@ -41,7 +41,8 @@ public class SynchronizerMap extends AbstractDelegatingMap<Long, Synchronizer>\n    @Override\n    protected Synchronizer serviceGet (Long key)\n    {\n-      ProductSynchronizer sc = SYNC_SERVICE.getSynchronizerConfById(key, ProductSynchronizer.class);\n+      ProductSynchronizer sc = SYNC_SERVICE.getSynchronizerConfById(\n+            key, ProductSynchronizer.class);\n       if (sc == null)\n       {\n          return null;\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}