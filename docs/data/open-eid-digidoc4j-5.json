{
    "project_name": "open-eid-digidoc4j",
    "error_id": "5",
    "information": {
        "errors": [
            {
                "line": "100",
                "column": "61",
                "severity": "error",
                "message": "'{' is not preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "    logger.debug(\"Writing asic mime type to asic zip file\");\n    String mimeTypeString;\n    if (Constant.ASICS_CONTAINER_TYPE.equals(containerType)){\n      mimeTypeString = MimeType.ASICS.getMimeTypeString();\n    } else {\n      mimeTypeString = MimeType.ASICE.getMimeTypeString();",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/5/AsicContainerCreator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/styler/5/AsicContainerCreator.java\nindex 58e77782b7c..459f8017679 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/5/AsicContainerCreator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/styler/5/AsicContainerCreator.java\n@@ -97,7 +97,7 @@ public class AsicContainerCreator {\n   public void writeAsiceMimeType(String containerType) {\n     logger.debug(\"Writing asic mime type to asic zip file\");\n     String mimeTypeString;\n-    if (Constant.ASICS_CONTAINER_TYPE.equals(containerType)){\n+    if (Constant.ASICS_CONTAINER_TYPE.equals(containerType)) {\n       mimeTypeString = MimeType.ASICS.getMimeTypeString();\n     } else {\n       mimeTypeString = MimeType.ASICE.getMimeTypeString();\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/5/AsicContainerCreator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/intellij/5/AsicContainerCreator.java\nindex 58e77782b7c..2a845351efa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/5/AsicContainerCreator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/intellij/5/AsicContainerCreator.java\n@@ -1,12 +1,12 @@\n /* DigiDoc4J library\n-*\n-* This software is released under either the GNU Library General Public\n-* License (see LICENSE.LGPL).\n-*\n-* Note that the only valid version of the LGPL license as far as this\n-* project is concerned is the original GNU Library General Public License\n-* Version 2.1, February 1999\n-*/\n+ *\n+ * This software is released under either the GNU Library General Public\n+ * License (see LICENSE.LGPL).\n+ *\n+ * Note that the only valid version of the LGPL license as far as this\n+ * project is concerned is the original GNU Library General Public License\n+ * Version 2.1, February 1999\n+ */\n \n package org.digidoc4j.impl.asic;\n \n@@ -97,7 +97,7 @@ public class AsicContainerCreator {\n   public void writeAsiceMimeType(String containerType) {\n     logger.debug(\"Writing asic mime type to asic zip file\");\n     String mimeTypeString;\n-    if (Constant.ASICS_CONTAINER_TYPE.equals(containerType)){\n+    if (Constant.ASICS_CONTAINER_TYPE.equals(containerType)) {\n       mimeTypeString = MimeType.ASICS.getMimeTypeString();\n     } else {\n       mimeTypeString = MimeType.ASICE.getMimeTypeString();\n@@ -107,7 +107,7 @@ public class AsicContainerCreator {\n   }\n \n   /**\n-   * @param dataFiles list of data files\n+   * @param dataFiles     list of data files\n    * @param containerType type\n    */\n   public void writeManifest(Collection<DataFile> dataFiles, String containerType) {\n@@ -136,7 +136,7 @@ public class AsicContainerCreator {\n   }\n \n   /**\n-   * @param signatures list of signatures\n+   * @param signatures                 list of signatures\n    * @param nextSignatureFileNameIndex index\n    */\n   public void writeSignatures(Collection<Signature> signatures, int nextSignatureFileNameIndex) {\n",
            "diff_size": 11
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/5/AsicContainerCreator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/naturalize/5/AsicContainerCreator.java\nindex 58e77782b7c..40b0879ee55 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/5/AsicContainerCreator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/naturalize/5/AsicContainerCreator.java\n@@ -97,7 +97,7 @@ public class AsicContainerCreator {\n   public void writeAsiceMimeType(String containerType) {\n     logger.debug(\"Writing asic mime type to asic zip file\");\n     String mimeTypeString;\n-    if (Constant.ASICS_CONTAINER_TYPE.equals(containerType)){\n+    if (Constant.ASICS_CONTAINER_TYPE.equals(containerType)) {\n       mimeTypeString = MimeType.ASICS.getMimeTypeString();\n     } else {\n       mimeTypeString = MimeType.ASICE.getMimeTypeString();\n@@ -253,7 +253,6 @@ public class AsicContainerCreator {\n     }\n \n     abstract void doWithEntryStream(OutputStream stream) throws IOException;\n-\n   }\n \n   private static ZipEntry getAsicMimeTypeZipEntry(byte[] mimeTypeBytes) {\n@@ -272,4 +271,4 @@ public class AsicContainerCreator {\n     throw new TechnicalException(message, e);\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/5/AsicContainerCreator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/codebuff/5/AsicContainerCreator.java\nindex 58e77782b7c..303b14d420e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/5/AsicContainerCreator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/codebuff/5/AsicContainerCreator.java\n@@ -22,7 +22,6 @@ import java.util.Collection;\n import java.util.zip.CRC32;\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipOutputStream;\n-\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.digidoc4j.Constant;\n@@ -34,20 +33,19 @@ import org.digidoc4j.impl.asic.manifest.AsicManifest;\n import org.digidoc4j.utils.Helper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import eu.europa.esig.dss.DSSDocument;\n import eu.europa.esig.dss.MimeType;\n \n /**\n  * ASIC container creator\n  */\n+\n+\n public class AsicContainerCreator {\n \n   private static final Logger logger = LoggerFactory.getLogger(AsicContainerCreator.class);\n-\n   private static final String ZIP_ENTRY_MIMETYPE = \"mimetype\";\n   private static final Charset CHARSET = StandardCharsets.UTF_8;\n-\n   private final ZipOutputStream zipOutputStream;\n   private final OutputStream outputStream;\n   private String zipComment;\n@@ -60,16 +58,20 @@ public class AsicContainerCreator {\n   /**\n    * @param outputStream stream\n    */\n+\n+\n   public AsicContainerCreator(OutputStream outputStream) {\n     this.outputStream = outputStream;\n     this.zipOutputStream = new ZipOutputStream(outputStream, CHARSET);\n   }\n \n+\n   @Deprecated\n   public AsicContainerCreator() {\n     this(new ByteArrayOutputStream());\n   }\n \n+\n   public void finalizeZipFile() {\n     logger.debug(\"Finalizing asic zip file\");\n     try {\n@@ -94,10 +96,11 @@ public class AsicContainerCreator {\n   /**\n    * @param containerType type\n    */\n+\n   public void writeAsiceMimeType(String containerType) {\n     logger.debug(\"Writing asic mime type to asic zip file\");\n     String mimeTypeString;\n-    if (Constant.ASICS_CONTAINER_TYPE.equals(containerType)){\n+    if (Constant.ASICS_CONTAINER_TYPE.equals(containerType)) {\n       mimeTypeString = MimeType.ASICS.getMimeTypeString();\n     } else {\n       mimeTypeString = MimeType.ASICE.getMimeTypeString();\n@@ -110,21 +113,24 @@ public class AsicContainerCreator {\n    * @param dataFiles list of data files\n    * @param containerType type\n    */\n+\n   public void writeManifest(Collection<DataFile> dataFiles, String containerType) {\n     logger.debug(\"Writing asic manifest\");\n     final AsicManifest manifest = new AsicManifest(containerType);\n     manifest.addFileEntry(dataFiles);\n     new EntryCallback(new ZipEntry(AsicManifest.XML_PATH)) {\n-      @Override\n-      void doWithEntryStream(OutputStream stream) throws IOException {\n-        manifest.writeTo(stream);\n-      }\n-    }.write();\n+\n+@Override\n+void doWithEntryStream(OutputStream stream) throws IOException {\n+  manifest.writeTo(stream);\n+}\n+}.write();\n   }\n \n   /**\n    * @param dataFiles list of data files\n    */\n+\n   public void writeDataFiles(Collection<DataFile> dataFiles) {\n     logger.debug(\"Adding data files to the asic zip container\");\n     for (DataFile dataFile : dataFiles) {\n@@ -139,6 +145,7 @@ public class AsicContainerCreator {\n    * @param signatures list of signatures\n    * @param nextSignatureFileNameIndex index\n    */\n+\n   public void writeSignatures(Collection<Signature> signatures, int nextSignatureFileNameIndex) {\n     logger.debug(\"Adding signatures to the asic zip container\");\n     int index = nextSignatureFileNameIndex;\n@@ -152,6 +159,7 @@ public class AsicContainerCreator {\n   /**\n    * @param dataFile data file\n    */\n+\n   public void writeTimestampToken(DataFile dataFile) {\n     logger.debug(\"Adding signatures to the asic zip container\");\n     String signatureFileName = \"META-INF/timestamp.tst\";\n@@ -161,6 +169,7 @@ public class AsicContainerCreator {\n   /**\n    * @param asicEntries list of ASIC entries\n    */\n+\n   public void writeExistingEntries(Collection<AsicEntry> asicEntries) {\n     logger.debug(\"Writing existing zip container entries\");\n     for (AsicEntry asicEntry : asicEntries) {\n@@ -176,6 +185,7 @@ public class AsicContainerCreator {\n   /**\n    * @param comment comment\n    */\n+\n   public void writeContainerComment(String comment) {\n     logger.debug(\"Writing container comment: \" + comment);\n     zipOutputStream.setComment(comment);\n@@ -184,6 +194,7 @@ public class AsicContainerCreator {\n   /**\n    * @param zipComment comment\n    */\n+\n   public void setZipComment(String zipComment) {\n     this.zipComment = zipComment;\n   }\n@@ -196,6 +207,7 @@ public class AsicContainerCreator {\n       this(entry, inputStream, true);\n     }\n \n+\n     StreamEntryCallback(ZipEntry entry, InputStream inputStream, boolean addComment) {\n       super(entry, addComment);\n       this.inputStream = inputStream;\n@@ -205,7 +217,6 @@ public class AsicContainerCreator {\n     void doWithEntryStream(OutputStream stream) throws IOException {\n       IOUtils.copy(inputStream, stream);\n     }\n-\n   }\n \n   private class BytesEntryCallback extends EntryCallback {\n@@ -233,6 +244,7 @@ public class AsicContainerCreator {\n       this(entry, true);\n     }\n \n+\n     EntryCallback(ZipEntry entry, boolean addComment) {\n       this.entry = entry;\n       this.addComment = addComment;\n@@ -242,7 +254,6 @@ public class AsicContainerCreator {\n       if (addComment) {\n         entry.setComment(zipComment);\n       }\n-\n       try {\n         zipOutputStream.putNextEntry(entry);\n         doWithEntryStream(zipOutputStream);\n@@ -271,5 +282,4 @@ public class AsicContainerCreator {\n     logger.error(message + \": \" + e.getMessage());\n     throw new TechnicalException(message, e);\n   }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 31
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/5/AsicContainerCreator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/styler_random/5/AsicContainerCreator.java\nindex 58e77782b7c..459f8017679 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/5/AsicContainerCreator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/styler_random/5/AsicContainerCreator.java\n@@ -97,7 +97,7 @@ public class AsicContainerCreator {\n   public void writeAsiceMimeType(String containerType) {\n     logger.debug(\"Writing asic mime type to asic zip file\");\n     String mimeTypeString;\n-    if (Constant.ASICS_CONTAINER_TYPE.equals(containerType)){\n+    if (Constant.ASICS_CONTAINER_TYPE.equals(containerType)) {\n       mimeTypeString = MimeType.ASICS.getMimeTypeString();\n     } else {\n       mimeTypeString = MimeType.ASICE.getMimeTypeString();\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/5/AsicContainerCreator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/styler_three_grams/5/AsicContainerCreator.java\nindex 58e77782b7c..459f8017679 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/5/AsicContainerCreator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/styler_three_grams/5/AsicContainerCreator.java\n@@ -97,7 +97,7 @@ public class AsicContainerCreator {\n   public void writeAsiceMimeType(String containerType) {\n     logger.debug(\"Writing asic mime type to asic zip file\");\n     String mimeTypeString;\n-    if (Constant.ASICS_CONTAINER_TYPE.equals(containerType)){\n+    if (Constant.ASICS_CONTAINER_TYPE.equals(containerType)) {\n       mimeTypeString = MimeType.ASICS.getMimeTypeString();\n     } else {\n       mimeTypeString = MimeType.ASICE.getMimeTypeString();\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}