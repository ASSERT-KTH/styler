{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2822",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "44",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "133",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "117",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2822/WritableDatabaseSchemaIndex.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2822/WritableDatabaseSchemaIndex.java\nindex 618eba9c6c9..d51e8834860 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2822/WritableDatabaseSchemaIndex.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2822/WritableDatabaseSchemaIndex.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.impl.schema;\n \n import java.io.IOException;\n@@ -40,94 +41,93 @@ import org.neo4j.values.storable.Value;\n public class WritableDatabaseSchemaIndex extends WritableAbstractDatabaseIndex<LuceneSchemaIndex> implements SchemaIndex\n {\n \n-    public WritableDatabaseSchemaIndex( PartitionedIndexStorage storage, SchemaIndexDescriptor descriptor,\n-            IndexSamplingConfig samplingConfig, WritableIndexPartitionFactory writableIndexPartitionFactory )\n-    {\n-        super( new LuceneSchemaIndex( storage, descriptor, samplingConfig, writableIndexPartitionFactory ) );\n-    }\n+  public WritableDatabaseSchemaIndex(PartitionedIndexStorage storage, SchemaIndexDescriptor descriptor,\n+                                     IndexSamplingConfig samplingConfig, WritableIndexPartitionFactory writableIndexPartitionFactory)\n+  {\n+    super(new LuceneSchemaIndex(storage, descriptor, samplingConfig, writableIndexPartitionFactory));\n+  }\n \n-    @Override\n-    public LuceneIndexWriter getIndexWriter()\n-    {\n-        return luceneIndex.getIndexWriter( this );\n-    }\n+  @Override\n+  public LuceneIndexWriter getIndexWriter()\n+  {\n+    return luceneIndex.getIndexWriter(this);\n+  }\n \n-    @Override\n-    public IndexReader getIndexReader() throws IOException\n-    {\n-        return luceneIndex.getIndexReader();\n-    }\n+  @Override\n+  public IndexReader getIndexReader() throws IOException\n+  {\n+    return luceneIndex.getIndexReader();\n+  }\n \n-    @Override\n-    public SchemaIndexDescriptor getDescriptor()\n-    {\n-        return luceneIndex.getDescriptor();\n-    }\n+  @Override\n+  public SchemaIndexDescriptor getDescriptor()\n+  {\n+    return luceneIndex.getDescriptor();\n+  }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public void verifyUniqueness( PropertyAccessor accessor, int[] propertyKeyIds )\n-            throws IOException, IndexEntryConflictException\n-    {\n-        luceneIndex.verifyUniqueness( accessor, propertyKeyIds );\n-    }\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public void verifyUniqueness(PropertyAccessor accessor, int[] propertyKeyIds)\n+      throws IOException, IndexEntryConflictException\n+  {\n+    luceneIndex.verifyUniqueness(accessor, propertyKeyIds);\n+  }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public void verifyUniqueness( PropertyAccessor accessor, int[] propertyKeyIds, List<Value[]> updatedValueTuples )\n-            throws IOException, IndexEntryConflictException\n-    {\n-        luceneIndex.verifyUniqueness( accessor, propertyKeyIds, updatedValueTuples );\n-    }\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public void verifyUniqueness(PropertyAccessor accessor, int[] propertyKeyIds, List<Value[]> updatedValueTuples)\n+      throws IOException, IndexEntryConflictException\n+  {\n+    luceneIndex.verifyUniqueness(accessor, propertyKeyIds, updatedValueTuples);\n+  }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public boolean isOnline() throws IOException\n-    {\n-        return luceneIndex.isOnline();\n-    }\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public boolean isOnline() throws IOException\n+  {\n+    return luceneIndex.isOnline();\n+  }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public void markAsOnline() throws IOException\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public void markAsOnline() throws IOException\n+  {\n+    commitCloseLock.lock();\n+    try\n     {\n-        commitCloseLock.lock();\n-        try\n-        {\n-            luceneIndex.markAsOnline();\n-        }\n-        finally\n-        {\n-            commitCloseLock.unlock();\n-        }\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public void markAsFailed( String failure ) throws IOException\n+      luceneIndex.markAsOnline();\n+    } finally\n     {\n-        luceneIndex.markAsFailed( failure );\n+      commitCloseLock.unlock();\n     }\n+  }\n \n-    @Override\n-    public boolean hasSinglePartition( List<AbstractIndexPartition> partitions )\n-    {\n-        return luceneIndex.hasSinglePartition( partitions );\n-    }\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public void markAsFailed(String failure) throws IOException\n+  {\n+    luceneIndex.markAsFailed(failure);\n+  }\n \n-    @Override\n-    public AbstractIndexPartition getFirstPartition( List<AbstractIndexPartition> partitions )\n-    {\n-        return luceneIndex.getFirstPartition( partitions );\n-    }\n+  @Override\n+  public boolean hasSinglePartition(List<AbstractIndexPartition> partitions)\n+  {\n+    return luceneIndex.hasSinglePartition(partitions);\n+  }\n+\n+  @Override\n+  public AbstractIndexPartition getFirstPartition(List<AbstractIndexPartition> partitions)\n+  {\n+    return luceneIndex.getFirstPartition(partitions);\n+  }\n }\n",
            "diff_size": 92
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2822/WritableDatabaseSchemaIndex.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2822/WritableDatabaseSchemaIndex.java\nindex 618eba9c6c9..24f35cf9241 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2822/WritableDatabaseSchemaIndex.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2822/WritableDatabaseSchemaIndex.java\n@@ -39,7 +39,6 @@ import org.neo4j.values.storable.Value;\n  */\n public class WritableDatabaseSchemaIndex extends WritableAbstractDatabaseIndex<LuceneSchemaIndex> implements SchemaIndex\n {\n-\n     public WritableDatabaseSchemaIndex( PartitionedIndexStorage storage, SchemaIndexDescriptor descriptor,\n             IndexSamplingConfig samplingConfig, WritableIndexPartitionFactory writableIndexPartitionFactory )\n     {\n@@ -68,9 +67,8 @@ public class WritableDatabaseSchemaIndex extends WritableAbstractDatabaseIndex<L\n      * {@inheritDoc}\n      */\n     @Override\n-    public void verifyUniqueness( PropertyAccessor accessor, int[] propertyKeyIds )\n-            throws IOException, IndexEntryConflictException\n-    {\n+    public void verifyUniqueness( PropertyAccessor accessor, int[] propertyKeyIds ) throws IOException, IndexEntryConflictException\n+{\n         luceneIndex.verifyUniqueness( accessor, propertyKeyIds );\n     }\n \n@@ -78,9 +76,8 @@ public class WritableDatabaseSchemaIndex extends WritableAbstractDatabaseIndex<L\n      * {@inheritDoc}\n      */\n     @Override\n-    public void verifyUniqueness( PropertyAccessor accessor, int[] propertyKeyIds, List<Value[]> updatedValueTuples )\n-            throws IOException, IndexEntryConflictException\n-    {\n+    public void verifyUniqueness( PropertyAccessor accessor, int[] propertyKeyIds, List<Value[]> updatedValueTuples ) throws IOException, IndexEntryConflictException\n+{\n         luceneIndex.verifyUniqueness( accessor, propertyKeyIds, updatedValueTuples );\n     }\n \n@@ -130,4 +127,4 @@ public class WritableDatabaseSchemaIndex extends WritableAbstractDatabaseIndex<L\n     {\n         return luceneIndex.getFirstPartition( partitions );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}