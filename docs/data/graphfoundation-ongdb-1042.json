{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1042",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "42",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "68",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "135",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1042/FieldInjections.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1042/FieldInjections.java\nindex 66669e900fe..1fc625ebcb3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1042/FieldInjections.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1042/FieldInjections.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.proc;\n \n import java.lang.invoke.MethodHandle;\n@@ -36,126 +37,125 @@ import org.neo4j.procedure.Context;\n  */\n class FieldInjections\n {\n-    private final ComponentRegistry components;\n-\n-    FieldInjections( ComponentRegistry components )\n+  private final ComponentRegistry components;\n+\n+  FieldInjections(ComponentRegistry components)\n+  {\n+    this.components = components;\n+  }\n+\n+  /**\n+   * On calling apply, injects the `value` for the field `field` on the provided `object`.\n+   */\n+  static class FieldSetter\n+  {\n+    private final Field field;\n+    private final MethodHandle setter;\n+    private final ComponentRegistry.Provider<?> provider;\n+\n+    FieldSetter(Field field, MethodHandle setter, ComponentRegistry.Provider<?> provider)\n     {\n-        this.components = components;\n+      this.field = field;\n+      this.setter = setter;\n+      this.provider = provider;\n     }\n \n-    /**\n-     * On calling apply, injects the `value` for the field `field` on the provided `object`.\n-     */\n-    static class FieldSetter\n+    void apply(org.neo4j.kernel.api.proc.Context ctx, Object object) throws ProcedureException\n     {\n-        private final Field field;\n-        private final MethodHandle setter;\n-        private final ComponentRegistry.Provider<?> provider;\n-\n-        FieldSetter( Field field, MethodHandle setter, ComponentRegistry.Provider<?> provider )\n+      try\n+      {\n+        setter.invoke(object, provider.apply(ctx));\n+      } catch (Throwable e)\n+      {\n+        throw new ProcedureException(Status.Procedure.ProcedureCallFailed, e,\n+            \"Unable to inject component to field `%s`, please ensure it is public and non-final: %s\",\n+            field.getName(), e.getMessage());\n+      }\n+    }\n+  }\n+\n+  /**\n+   * For each annotated field in the provided class, creates a `FieldSetter`.\n+   *\n+   * @param cls The class where injection should happen.\n+   * @return A list of `FieldSetters`\n+   * @throws ProcedureException if the type of the injected field does not match what has been registered.\n+   */\n+  List<FieldSetter> setters(Class<?> cls) throws ProcedureException\n+  {\n+    List<FieldSetter> setters = new LinkedList<>();\n+    Class<?> currentClass = cls;\n+\n+    do\n+    {\n+      for (Field field : currentClass.getDeclaredFields())\n+      {\n+        //ignore synthetic fields\n+        if (field.isSynthetic())\n         {\n-            this.field = field;\n-            this.setter = setter;\n-            this.provider = provider;\n+          continue;\n         }\n-\n-        void apply( org.neo4j.kernel.api.proc.Context ctx, Object object ) throws ProcedureException\n+        if (Modifier.isStatic(field.getModifiers()))\n         {\n-            try\n-            {\n-                setter.invoke( object, provider.apply( ctx ) );\n-            }\n-            catch ( Throwable e )\n-            {\n-                throw new ProcedureException( Status.Procedure.ProcedureCallFailed, e,\n-                        \"Unable to inject component to field `%s`, please ensure it is public and non-final: %s\",\n-                        field.getName(), e.getMessage() );\n-            }\n+          if (field.isAnnotationPresent(Context.class))\n+          {\n+            throw new ProcedureException(Status.Procedure.ProcedureRegistrationFailed,\n+                \"The field `%s` in the class named `%s` is annotated as a @Context field,%n\" +\n+                    \"but it is static. @Context fields must be public, non-final and non-static,%n\" +\n+                    \"because they are reset each time a procedure is invoked.\",\n+                field.getName(), cls.getSimpleName());\n+          }\n+          continue;\n         }\n-    }\n \n-    /**\n-     * For each annotated field in the provided class, creates a `FieldSetter`.\n-     * @param cls The class where injection should happen.\n-     * @return A list of `FieldSetters`\n-     * @throws ProcedureException if the type of the injected field does not match what has been registered.\n-     */\n-    List<FieldSetter> setters( Class<?> cls ) throws ProcedureException\n-    {\n-        List<FieldSetter> setters = new LinkedList<>();\n-        Class<?> currentClass = cls;\n+        assertValidForInjection(cls, field);\n+        setters.add(createInjector(cls, field));\n+      }\n+    }\n+    while ((currentClass = currentClass.getSuperclass()) != null);\n \n-        do\n-        {\n-            for ( Field field : currentClass.getDeclaredFields() )\n-            {\n-                //ignore synthetic fields\n-                if ( field.isSynthetic() )\n-                {\n-                    continue;\n-                }\n-                if ( Modifier.isStatic( field.getModifiers() ) )\n-                {\n-                    if ( field.isAnnotationPresent( Context.class ) )\n-                    {\n-                        throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed,\n-                                 \"The field `%s` in the class named `%s` is annotated as a @Context field,%n\" +\n-                                \"but it is static. @Context fields must be public, non-final and non-static,%n\" +\n-                                \"because they are reset each time a procedure is invoked.\",\n-                                field.getName(), cls.getSimpleName() );\n-                    }\n-                    continue;\n-                }\n-\n-                assertValidForInjection( cls, field );\n-                setters.add( createInjector( cls, field ) );\n-            }\n-        }\n-        while ( (currentClass = currentClass.getSuperclass()) != null );\n+    return setters;\n+  }\n \n-        return setters;\n+  private FieldSetter createInjector(Class<?> cls, Field field) throws ProcedureException\n+  {\n+    try\n+    {\n+      ComponentRegistry.Provider<?> provider = components.providerFor(field.getType());\n+      if (provider == null)\n+      {\n+        throw new ComponentInjectionException(Status.Procedure.ProcedureRegistrationFailed,\n+            \"Unable to set up injection for procedure `%s`, the field `%s` \" +\n+                \"has type `%s` which is not a known injectable component.\",\n+            cls.getSimpleName(), field.getName(), field.getType());\n+      }\n+\n+      MethodHandle setter = MethodHandles.lookup().unreflectSetter(field);\n+      return new FieldSetter(field, setter, provider);\n+    } catch (IllegalAccessException e)\n+    {\n+      throw new ProcedureException(Status.Procedure.ProcedureRegistrationFailed,\n+          \"Unable to set up injection for `%s`, failed to access field `%s`: %s\",\n+          e, cls.getSimpleName(), field.getName(), e.getMessage());\n     }\n+  }\n \n-    private FieldSetter createInjector( Class<?> cls, Field field ) throws ProcedureException\n+  private void assertValidForInjection(Class<?> cls, Field field) throws ProcedureException\n+  {\n+    if (!field.isAnnotationPresent(Context.class))\n     {\n-        try\n-        {\n-            ComponentRegistry.Provider<?> provider = components.providerFor( field.getType() );\n-            if ( provider == null )\n-            {\n-                throw new ComponentInjectionException( Status.Procedure.ProcedureRegistrationFailed,\n-                        \"Unable to set up injection for procedure `%s`, the field `%s` \" +\n-                        \"has type `%s` which is not a known injectable component.\",\n-                            cls.getSimpleName(), field.getName(), field.getType() );\n-            }\n-\n-            MethodHandle setter = MethodHandles.lookup().unreflectSetter( field );\n-            return new FieldSetter( field, setter, provider );\n-        }\n-        catch ( IllegalAccessException e )\n-        {\n-            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed,\n-                    \"Unable to set up injection for `%s`, failed to access field `%s`: %s\",\n-                    e, cls.getSimpleName(), field.getName(), e.getMessage() );\n-        }\n+      throw new ProcedureException(Status.Procedure.ProcedureRegistrationFailed,\n+          \"Field `%s` on `%s` is not annotated as a @\" + Context.class.getSimpleName() +\n+              \" and is not static. If you want to store state along with your procedure,\" +\n+              \" please use a static field.\",\n+          field.getName(), cls.getSimpleName());\n     }\n \n-    private void assertValidForInjection( Class<?> cls, Field field ) throws ProcedureException\n+    if (!Modifier.isPublic(field.getModifiers()) || Modifier.isFinal(field.getModifiers()))\n     {\n-        if ( !field.isAnnotationPresent( Context.class ) )\n-        {\n-            throw new ProcedureException(  Status.Procedure.ProcedureRegistrationFailed,\n-                    \"Field `%s` on `%s` is not annotated as a @\" + Context.class.getSimpleName() +\n-                            \" and is not static. If you want to store state along with your procedure,\" +\n-                            \" please use a static field.\",\n-                    field.getName(), cls.getSimpleName() );\n-        }\n+      throw new ProcedureException(Status.Procedure.ProcedureRegistrationFailed,\n+          \"Field `%s` on `%s` must be non-final and public.\", field.getName(), cls.getSimpleName());\n \n-        if ( !Modifier.isPublic( field.getModifiers() ) || Modifier.isFinal( field.getModifiers() ) )\n-        {\n-            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed,\n-                    \"Field `%s` on `%s` must be non-final and public.\", field.getName(), cls.getSimpleName() );\n-\n-        }\n     }\n+  }\n }\n",
            "diff_size": 168
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 176).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "101",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 320).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "122",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 284).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "130",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 218).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "138",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 315).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "143",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1042/FieldInjections.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1042/FieldInjections.java\nindex 66669e900fe..8ac0b034909 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1042/FieldInjections.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1042/FieldInjections.java\n@@ -67,10 +67,9 @@ class FieldInjections\n             }\n             catch ( Throwable e )\n             {\n-                throw new ProcedureException( Status.Procedure.ProcedureCallFailed, e,\n-                        \"Unable to inject component to field `%s`, please ensure it is public and non-final: %s\",\n+                throw new ProcedureException( Status.Procedure.ProcedureCallFailed, e, \"Unable to inject component to field `%s`, please ensure it is public and non-final: %s\",\n                         field.getName(), e.getMessage() );\n-            }\n+    }\n         }\n     }\n \n@@ -94,14 +93,12 @@ class FieldInjections\n                 {\n                     continue;\n                 }\n-                if ( Modifier.isStatic( field.getModifiers() ) )\n+\n+if ( Modifier.isStatic( field.getModifiers() ) )\n                 {\n                     if ( field.isAnnotationPresent( Context.class ) )\n                     {\n-                        throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed,\n-                                 \"The field `%s` in the class named `%s` is annotated as a @Context field,%n\" +\n-                                \"but it is static. @Context fields must be public, non-final and non-static,%n\" +\n-                                \"because they are reset each time a procedure is invoked.\",\n+                        throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed, \"The field `%s` in the class named `%s` is annotated as a @Context field,%n\" + \"but it is static. @Context fields must be public, non-final and non-static,%n\" + \"because they are reset each time a procedure is invoked.\",\n                                 field.getName(), cls.getSimpleName() );\n                     }\n                     continue;\n@@ -112,8 +109,7 @@ class FieldInjections\n             }\n         }\n         while ( (currentClass = currentClass.getSuperclass()) != null );\n-\n-        return setters;\n+return setters;\n     }\n \n     private FieldSetter createInjector( Class<?> cls, Field field ) throws ProcedureException\n@@ -123,39 +119,28 @@ class FieldInjections\n             ComponentRegistry.Provider<?> provider = components.providerFor( field.getType() );\n             if ( provider == null )\n             {\n-                throw new ComponentInjectionException( Status.Procedure.ProcedureRegistrationFailed,\n-                        \"Unable to set up injection for procedure `%s`, the field `%s` \" +\n-                        \"has type `%s` which is not a known injectable component.\",\n-                            cls.getSimpleName(), field.getName(), field.getType() );\n-            }\n+                throw new ComponentInjectionException( Status.Procedure.ProcedureRegistrationFailed, \"Unable to set up injection for procedure `%s`, the field `%s` \" + \"has type `%s` which is not a known injectable component.\", cls.getSimpleName(), field.getName(), field.getType() );\n+    }\n \n             MethodHandle setter = MethodHandles.lookup().unreflectSetter( field );\n             return new FieldSetter( field, setter, provider );\n         }\n         catch ( IllegalAccessException e )\n         {\n-            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed,\n-                    \"Unable to set up injection for `%s`, failed to access field `%s`: %s\",\n-                    e, cls.getSimpleName(), field.getName(), e.getMessage() );\n-        }\n+            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed, \"Unable to set up injection for `%s`, failed to access field `%s`: %s\", e, cls.getSimpleName(), field.getName(), e.getMessage() );\n+    }\n     }\n \n     private void assertValidForInjection( Class<?> cls, Field field ) throws ProcedureException\n     {\n         if ( !field.isAnnotationPresent( Context.class ) )\n         {\n-            throw new ProcedureException(  Status.Procedure.ProcedureRegistrationFailed,\n-                    \"Field `%s` on `%s` is not annotated as a @\" + Context.class.getSimpleName() +\n-                            \" and is not static. If you want to store state along with your procedure,\" +\n-                            \" please use a static field.\",\n-                    field.getName(), cls.getSimpleName() );\n+            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed, \"Field `%s` on `%s` is not annotated as a @\" + Context.class.getSimpleName() + \" and is not static. If you want to store state along with your procedure,\" + \" please use a static field.\", field.getName(), cls.getSimpleName() );\n         }\n \n         if ( !Modifier.isPublic( field.getModifiers() ) || Modifier.isFinal( field.getModifiers() ) )\n         {\n-            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed,\n-                    \"Field `%s` on `%s` must be non-final and public.\", field.getName(), cls.getSimpleName() );\n-\n-        }\n+            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed, \"Field `%s` on `%s` must be non-final and public.\", field.getName(), cls.getSimpleName() );\n+    }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 30
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}