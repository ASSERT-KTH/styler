{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4525",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "57",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4525/EigenvectorCentralityArnoldi.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4525/EigenvectorCentralityArnoldi.java\nindex a8ae9f9f9a8..7f4ad6a0511 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4525/EigenvectorCentralityArnoldi.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4525/EigenvectorCentralityArnoldi.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphalgo.impl.centrality;\n \n import java.util.ArrayList;\n@@ -38,161 +39,162 @@ import org.neo4j.graphdb.Relationship;\n  * the two largest eigenvalues are u1 and u2, a small factor u2/u1 will give a\n  * faster convergence (i.e. faster computation). NOTE: Currently only works on\n  * Doubles.\n- * @complexity The {@link CostEvaluator} is called once for every relationship\n- *             in each iteration. Assuming this is done in constant time, the\n- *             total time complexity is O(j(n + m + i)) when j internal restarts\n- *             are required and i iterations are done in the internal\n- *             eigenvector solving of the H matrix. Typically j = the number of\n- *             iterations / k, where normally k = 3.\n+ *\n  * @author Patrik Larsson\n  * @author Anton Persson\n+ * @complexity The {@link CostEvaluator} is called once for every relationship\n+ * in each iteration. Assuming this is done in constant time, the\n+ * total time complexity is O(j(n + m + i)) when j internal restarts\n+ * are required and i iterations are done in the internal\n+ * eigenvector solving of the H matrix. Typically j = the number of\n+ * iterations / k, where normally k = 3.\n  */\n public class EigenvectorCentralityArnoldi extends EigenvectorCentralityBase\n {\n-    /**\n-     * See {@link EigenvectorCentralityBase#EigenvectorCentralityBase(Direction, CostEvaluator, Set, Set, double)}\n-     */\n-    public EigenvectorCentralityArnoldi( Direction relationDirection,\n-        CostEvaluator<Double> costEvaluator, Set<Node> nodeSet,\n-        Set<Relationship> relationshipSet, double precision )\n+  /**\n+   * See {@link EigenvectorCentralityBase#EigenvectorCentralityBase(Direction, CostEvaluator, Set, Set, double)}\n+   */\n+  public EigenvectorCentralityArnoldi(Direction relationDirection,\n+                                      CostEvaluator<Double> costEvaluator, Set<Node> nodeSet,\n+                                      Set<Relationship> relationshipSet, double precision)\n+  {\n+    super(relationDirection, costEvaluator, nodeSet, relationshipSet, precision);\n+  }\n+\n+  /**\n+   * This runs the Arnoldi decomposition in a specified number of steps.\n+   */\n+  @Override\n+  protected int runInternalIteration()\n+  {\n+    int iterations = 3;\n+    // Create a list of the nodes, in order to quickly translate an index\n+    // into a node.\n+    ArrayList<Node> nodes = new ArrayList<>(nodeSet.size());\n+    nodes.addAll(nodeSet);\n+    DoubleMatrix hMatrix = new DoubleMatrix();\n+    DoubleMatrix qMatrix = new DoubleMatrix();\n+    for (int i = 0; i < nodes.size(); ++i)\n     {\n-        super( relationDirection, costEvaluator, nodeSet, relationshipSet, precision );\n+      qMatrix.set(0, i, values.get(nodes.get(i)));\n     }\n-\n-    /**\n-     * This runs the Arnoldi decomposition in a specified number of steps.\n-     */\n-    @Override\n-    protected int runInternalIteration()\n+    int localIterations = 1;\n+    // The main arnoldi iteration loop\n+    while (true)\n     {\n-        int iterations = 3;\n-        // Create a list of the nodes, in order to quickly translate an index\n-        // into a node.\n-        ArrayList<Node> nodes = new ArrayList<>( nodeSet.size() );\n-        nodes.addAll( nodeSet );\n-        DoubleMatrix hMatrix = new DoubleMatrix();\n-        DoubleMatrix qMatrix = new DoubleMatrix();\n-        for ( int i = 0; i < nodes.size(); ++i )\n-        {\n-            qMatrix.set( 0, i, values.get( nodes.get( i ) ) );\n-        }\n-        int localIterations = 1;\n-        // The main arnoldi iteration loop\n-        while ( true )\n-        {\n-            incrementTotalIterations();\n+      incrementTotalIterations();\n \n-            Map<Node, Double> newValues = processRelationships();\n+      Map<Node, Double> newValues = processRelationships();\n \n-            // Orthogonalize\n-            for ( int j = 0; j < localIterations; ++j )\n-            {\n-                DoubleVector qj = qMatrix.getRow( j );\n-                // vector product\n-                double product = 0;\n-                for ( int i = 0; i < nodes.size(); ++i )\n-                {\n-                    Double d1 = newValues.get( nodes.get( i ) );\n-                    Double d2 = qj.get( i );\n-                    if ( d1 != null && d2 != null )\n-                    {\n-                        product += d1 * d2;\n-                    }\n-                }\n-                hMatrix.set( j, localIterations - 1, product );\n-                if ( product != 0.0 )\n-                {\n-                    // vector subtraction\n-                    for ( int i = 0; i < nodes.size(); ++i )\n-                    {\n-                        Node node = nodes.get( i );\n-                        Double value = newValues.get( node );\n-                        if ( value == null )\n-                        {\n-                            value = 0.0;\n-                        }\n-                        Double qValue = qj.get( i );\n-                        if ( qValue != null )\n-                        {\n-                            newValues.put( node, value - product * qValue );\n-                        }\n-                    }\n-                }\n-            }\n-            double normalizeFactor = normalize( newValues );\n-            values = newValues;\n-            DoubleVector qVector = new DoubleVector();\n-            for ( int i = 0; i < nodes.size(); ++i )\n-            {\n-                Node key = nodes.get( i );\n-                Double value = newValues.get( key );\n-                if ( value != null )\n-                {\n-                    qVector.set( i, value );\n-                }\n-            }\n-            qMatrix.setRow( localIterations, qVector );\n-            if ( normalizeFactor == 0.0 || localIterations >= nodeSet.size()\n-                || localIterations >= iterations )\n-            {\n-                break;\n-            }\n-            hMatrix.set( localIterations, localIterations - 1, normalizeFactor );\n-            ++localIterations;\n-        }\n-        // employ the power method to find eigenvector to h\n-        Random random = new Random( System.currentTimeMillis() );\n-        DoubleVector vector = new DoubleVector();\n-        for ( int i = 0; i < nodeSet.size(); ++i )\n+      // Orthogonalize\n+      for (int j = 0; j < localIterations; ++j)\n+      {\n+        DoubleVector qj = qMatrix.getRow(j);\n+        // vector product\n+        double product = 0;\n+        for (int i = 0; i < nodes.size(); ++i)\n         {\n-            vector.set( i, random.nextDouble() );\n+          Double d1 = newValues.get(nodes.get(i));\n+          Double d2 = qj.get(i);\n+          if (d1 != null && d2 != null)\n+          {\n+            product += d1 * d2;\n+          }\n         }\n-        MatrixUtil.normalize( vector );\n-        boolean powerDone = false;\n-        int its = 0;\n-        double powerPrecision = 0.1;\n-        while ( !powerDone )\n+        hMatrix.set(j, localIterations - 1, product);\n+        if (product != 0.0)\n         {\n-            DoubleVector newVector = MatrixUtil.multiply( hMatrix, vector );\n-            MatrixUtil.normalize( newVector );\n-            powerDone = true;\n-            for ( Integer index : vector.getIndices() )\n+          // vector subtraction\n+          for (int i = 0; i < nodes.size(); ++i)\n+          {\n+            Node node = nodes.get(i);\n+            Double value = newValues.get(node);\n+            if (value == null)\n             {\n-                if ( newVector.get( index ) == null )\n-                {\n-                    continue;\n-                }\n-                double factor = Math.abs( newVector.get( index )\n-                    / vector.get( index ) );\n-                if ( factor - powerPrecision > 1.0\n-                    || factor + powerPrecision < 1.0 )\n-                {\n-                    powerDone = false;\n-                    break;\n-                }\n+              value = 0.0;\n             }\n-            vector = newVector;\n-            ++its;\n-            if ( its > 100 )\n+            Double qValue = qj.get(i);\n+            if (qValue != null)\n             {\n-                break;\n+              newValues.put(node, value - product * qValue);\n             }\n+          }\n         }\n-        // multiply q and vector to get a ritz vector\n-        DoubleVector ritzVector = new DoubleVector();\n-        for ( int r = 0; r < nodeSet.size(); ++r )\n+      }\n+      double normalizeFactor = normalize(newValues);\n+      values = newValues;\n+      DoubleVector qVector = new DoubleVector();\n+      for (int i = 0; i < nodes.size(); ++i)\n+      {\n+        Node key = nodes.get(i);\n+        Double value = newValues.get(key);\n+        if (value != null)\n         {\n-            for ( int c = 0; c < localIterations; ++c )\n-            {\n-                ritzVector.incrementValue( r, vector.get( c )\n-                    * qMatrix.get( c, r ) );\n-            }\n+          qVector.set(i, value);\n+        }\n+      }\n+      qMatrix.setRow(localIterations, qVector);\n+      if (normalizeFactor == 0.0 || localIterations >= nodeSet.size()\n+          || localIterations >= iterations)\n+      {\n+        break;\n+      }\n+      hMatrix.set(localIterations, localIterations - 1, normalizeFactor);\n+      ++localIterations;\n+    }\n+    // employ the power method to find eigenvector to h\n+    Random random = new Random(System.currentTimeMillis());\n+    DoubleVector vector = new DoubleVector();\n+    for (int i = 0; i < nodeSet.size(); ++i)\n+    {\n+      vector.set(i, random.nextDouble());\n+    }\n+    MatrixUtil.normalize(vector);\n+    boolean powerDone = false;\n+    int its = 0;\n+    double powerPrecision = 0.1;\n+    while (!powerDone)\n+    {\n+      DoubleVector newVector = MatrixUtil.multiply(hMatrix, vector);\n+      MatrixUtil.normalize(newVector);\n+      powerDone = true;\n+      for (Integer index : vector.getIndices())\n+      {\n+        if (newVector.get(index) == null)\n+        {\n+          continue;\n         }\n-        for ( int i = 0; i < nodeSet.size(); ++i )\n+        double factor = Math.abs(newVector.get(index)\n+            / vector.get(index));\n+        if (factor - powerPrecision > 1.0\n+            || factor + powerPrecision < 1.0)\n         {\n-            values.put( nodes.get( i ), ritzVector.get( i ) );\n+          powerDone = false;\n+          break;\n         }\n-        normalize( values );\n-        return localIterations;\n+      }\n+      vector = newVector;\n+      ++its;\n+      if (its > 100)\n+      {\n+        break;\n+      }\n+    }\n+    // multiply q and vector to get a ritz vector\n+    DoubleVector ritzVector = new DoubleVector();\n+    for (int r = 0; r < nodeSet.size(); ++r)\n+    {\n+      for (int c = 0; c < localIterations; ++c)\n+      {\n+        ritzVector.incrementValue(r, vector.get(c)\n+            * qMatrix.get(c, r));\n+      }\n+    }\n+    for (int i = 0; i < nodeSet.size(); ++i)\n+    {\n+      values.put(nodes.get(i), ritzVector.get(i));\n     }\n+    normalize(values);\n+    return localIterations;\n+  }\n }\n",
            "diff_size": 227
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "134",
                    "column": "77",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "163",
                    "column": "65",
                    "severity": "error",
                    "message": "'/' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "184",
                    "column": "62",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4525/EigenvectorCentralityArnoldi.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4525/EigenvectorCentralityArnoldi.java\nindex a8ae9f9f9a8..b24afa0878b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4525/EigenvectorCentralityArnoldi.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4525/EigenvectorCentralityArnoldi.java\n@@ -52,10 +52,8 @@ public class EigenvectorCentralityArnoldi extends EigenvectorCentralityBase\n     /**\n      * See {@link EigenvectorCentralityBase#EigenvectorCentralityBase(Direction, CostEvaluator, Set, Set, double)}\n      */\n-    public EigenvectorCentralityArnoldi( Direction relationDirection,\n-        CostEvaluator<Double> costEvaluator, Set<Node> nodeSet,\n-        Set<Relationship> relationshipSet, double precision )\n-    {\n+    public EigenvectorCentralityArnoldi( Direction relationDirection, CostEvaluator<Double> costEvaluator, Set<Node> nodeSet, Set<Relationship> relationshipSet, double precision )\n+{\n         super( relationDirection, costEvaluator, nodeSet, relationshipSet, precision );\n     }\n \n@@ -82,7 +80,7 @@ public class EigenvectorCentralityArnoldi extends EigenvectorCentralityBase\n         {\n             incrementTotalIterations();\n \n-            Map<Node, Double> newValues = processRelationships();\n+            Map<Node,Double> newValues = processRelationships();\n \n             // Orthogonalize\n             for ( int j = 0; j < localIterations; ++j )\n@@ -111,7 +109,8 @@ public class EigenvectorCentralityArnoldi extends EigenvectorCentralityBase\n                         {\n                             value = 0.0;\n                         }\n-                        Double qValue = qj.get( i );\n+\n+Double qValue = qj.get( i );\n                         if ( qValue != null )\n                         {\n                             newValues.put( node, value - product * qValue );\n@@ -132,9 +131,8 @@ public class EigenvectorCentralityArnoldi extends EigenvectorCentralityBase\n                 }\n             }\n             qMatrix.setRow( localIterations, qVector );\n-            if ( normalizeFactor == 0.0 || localIterations >= nodeSet.size()\n-                || localIterations >= iterations )\n-            {\n+            if ( normalizeFactor == 0.0 || localIterations >= nodeSet.size()|| localIterations >= iterations )\n+{\n                 break;\n             }\n             hMatrix.set( localIterations, localIterations - 1, normalizeFactor );\n@@ -162,11 +160,10 @@ public class EigenvectorCentralityArnoldi extends EigenvectorCentralityBase\n                 {\n                     continue;\n                 }\n-                double factor = Math.abs( newVector.get( index )\n-                    / vector.get( index ) );\n-                if ( factor - powerPrecision > 1.0\n+                double factor = Math.abs( newVector.get( index )/ vector.get( index ) );\n+if ( factor - powerPrecision > 1.0\n                     || factor + powerPrecision < 1.0 )\n-                {\n+{\n                     powerDone = false;\n                     break;\n                 }\n@@ -184,15 +181,15 @@ public class EigenvectorCentralityArnoldi extends EigenvectorCentralityBase\n         {\n             for ( int c = 0; c < localIterations; ++c )\n             {\n-                ritzVector.incrementValue( r, vector.get( c )\n-                    * qMatrix.get( c, r ) );\n-            }\n+                ritzVector.incrementValue( r, vector.get( c )* qMatrix.get( c, r ) );\n+    }\n         }\n         for ( int i = 0; i < nodeSet.size(); ++i )\n         {\n             values.put( nodes.get( i ), ritzVector.get( i ) );\n         }\n-        normalize( values );\n+\n+normalize( values );\n         return localIterations;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}