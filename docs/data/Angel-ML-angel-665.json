{
    "project_name": "Angel-ML-angel",
    "error_id": "665",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/665/IServerRowsStorageOp.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/665/IServerRowsStorageOp.java\nindex 3d4f9a4b925..5efe28c1f8e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/665/IServerRowsStorageOp.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/665/IServerRowsStorageOp.java\n@@ -29,6 +29,7 @@ public interface IServerRowsStorageOp {\n \n   /**\n    * Get the server row from storage use row id\n+   *\n    * @param rowId row id\n    * @return server row\n    */\n@@ -36,6 +37,7 @@ public interface IServerRowsStorageOp {\n \n   /**\n    * Get batch of server rows use row ids\n+   *\n    * @param rowIds row ids\n    * @return batch of server rows\n    */\n@@ -43,26 +45,30 @@ public interface IServerRowsStorageOp {\n \n   /**\n    * Put the server row to the storage\n+   *\n    * @param rowId row id\n-   * @param row server row\n+   * @param row   server row\n    */\n   void putRow(int rowId, ServerRow row);\n \n   /**\n    * Put the server rows to the storage\n+   *\n    * @param rowIds row ids\n-   * @param rows server rows\n+   * @param rows   server rows\n    */\n   void putRows(List<Integer> rowIds, List<ServerRow> rows);\n \n   /**\n    * Get the row number\n+   *\n    * @return the row number\n    */\n   int getRowNum();\n \n   /**\n    * Is the server row exist\n+   *\n    * @param rowId row id\n    * @return True means exist\n    */\n@@ -70,6 +76,7 @@ public interface IServerRowsStorageOp {\n \n   /**\n    * Get the <row id, server row> iterator\n+   *\n    * @return the <row id, server row> iterator\n    */\n   Iterator<Entry<Integer, ServerRow>> iterator();\n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/665/IServerRowsStorageOp.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/665/IServerRowsStorageOp.java\nindex 3d4f9a4b925..cbbc020008f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/665/IServerRowsStorageOp.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/665/IServerRowsStorageOp.java\n@@ -73,4 +73,4 @@ public interface IServerRowsStorageOp {\n    * @return the <row id, server row> iterator\n    */\n   Iterator<Entry<Integer, ServerRow>> iterator();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/665/IServerRowsStorageOp.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/665/IServerRowsStorageOp.java\nindex 3d4f9a4b925..6a708015e44 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/665/IServerRowsStorageOp.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/665/IServerRowsStorageOp.java\n@@ -25,6 +25,8 @@ import java.util.Map.Entry;\n /**\n  * Basic operation for Row-based storage\n  */\n+\n+\n public interface IServerRowsStorageOp {\n \n   /**\n@@ -39,6 +41,8 @@ public interface IServerRowsStorageOp {\n    * @param rowIds row ids\n    * @return batch of server rows\n    */\n+\n+\n   List<ServerRow> getRows(List<Integer> rowIds);\n \n   /**\n@@ -46,6 +50,8 @@ public interface IServerRowsStorageOp {\n    * @param rowId row id\n    * @param row server row\n    */\n+\n+\n   void putRow(int rowId, ServerRow row);\n \n   /**\n@@ -53,12 +59,15 @@ public interface IServerRowsStorageOp {\n    * @param rowIds row ids\n    * @param rows server rows\n    */\n+\n+\n   void putRows(List<Integer> rowIds, List<ServerRow> rows);\n \n   /**\n    * Get the row number\n    * @return the row number\n    */\n+\n   int getRowNum();\n \n   /**\n@@ -66,11 +75,14 @@ public interface IServerRowsStorageOp {\n    * @param rowId row id\n    * @return True means exist\n    */\n+\n   boolean hasRow(int rowId);\n \n   /**\n    * Get the <row id, server row> iterator\n    * @return the <row id, server row> iterator\n    */\n+\n+\n   Iterator<Entry<Integer, ServerRow>> iterator();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}