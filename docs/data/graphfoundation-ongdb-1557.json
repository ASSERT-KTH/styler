{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1557",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "44",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "70",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "71",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "72",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "70",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "71",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "72",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1557/Procedures.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1557/Procedures.java\nindex 535bc759780..14c83990104 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1557/Procedures.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1557/Procedures.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.kernel.api;\n \n import java.util.Set;\n@@ -34,220 +35,255 @@ import org.neo4j.values.ValueMapper;\n \n public interface Procedures\n {\n-    /**\n-     * Get a handle to the given function\n-     * @param name the name of the function\n-     * @return A handle to the function\n-     */\n-    UserFunctionHandle functionGet( QualifiedName name );\n-\n-    /**\n-     * Get a handle to the given aggregation function\n-     * @param name the name of the function\n-     * @return A handle to the function\n-     */\n-    UserFunctionHandle aggregationFunctionGet( QualifiedName name );\n-\n-    /**\n-     * Fetch a procedure handle\n-     * @param name the name of the procedure\n-     * @return a procedure handle\n-     * @throws ProcedureException\n-     */\n-    ProcedureHandle procedureGet( QualifiedName name ) throws ProcedureException;\n-\n-    /**\n-     * Fetch all procedures\n-     * @return all procedures\n-     * @throws ProcedureException\n-     */\n-    Set<ProcedureSignature> proceduresGetAll( ) throws ProcedureException;\n-\n-    /**\n-     * Invoke a read-only procedure by id.\n-     * @param id the id of the procedure.\n-     * @param arguments the procedure arguments.\n-     * @return an iterator containing the procedure results.\n-     * @throws ProcedureException if there was an exception thrown during procedure execution.\n-     */\n-    RawIterator<Object[], ProcedureException> procedureCallRead( int id, Object[] arguments )\n-            throws ProcedureException;\n-\n-    /**\n-     * Invoke a read-only procedure by id, and set the transaction's access mode to\n-     * {@link AccessMode.Static#READ READ} for the duration of the procedure execution.\n-     * @param id the id of the procedure.\n-     * @param arguments the procedure arguments.\n-     * @return an iterator containing the procedure results.\n-     * @throws ProcedureException if there was an exception thrown during procedure execution.\n-     */\n-    RawIterator<Object[], ProcedureException> procedureCallReadOverride( int id, Object[] arguments )\n-            throws ProcedureException;\n-\n-    /**\n-     * Invoke a read/write procedure by id.\n-     * @param id the id of the procedure.\n-     * @param arguments the procedure arguments.\n-     * @return an iterator containing the procedure results.\n-     * @throws ProcedureException if there was an exception thrown during procedure execution.\n-     */\n-    RawIterator<Object[], ProcedureException> procedureCallWrite( int id, Object[] arguments )\n-            throws ProcedureException;\n-    /**\n-     * Invoke a read/write procedure by id, and set the transaction's access mode to\n-     * {@link AccessMode.Static#WRITE WRITE} for the duration of the procedure execution.\n-     * @param id the id of the procedure.\n-     * @param arguments the procedure arguments.\n-     * @return an iterator containing the procedure results.\n-     * @throws ProcedureException if there was an exception thrown during procedure execution.\n-     */\n-    RawIterator<Object[], ProcedureException> procedureCallWriteOverride( int id, Object[] arguments )\n-            throws ProcedureException;\n-\n-    /**\n-     * Invoke a schema write procedure by id.\n-     * @param id the id of the procedure.\n-     * @param arguments the procedure arguments.\n-     * @return an iterator containing the procedure results.\n-     * @throws ProcedureException if there was an exception thrown during procedure execution.\n-     */\n-    RawIterator<Object[], ProcedureException> procedureCallSchema( int id, Object[] arguments )\n-            throws ProcedureException;\n-    /**\n-     * Invoke a schema write procedure by id, and set the transaction's access mode to\n-     * {@link AccessMode.Static#FULL FULL} for the duration of the procedure execution.\n-     * @param id the id of the procedure.\n-     * @param arguments the procedure arguments.\n-     * @return an iterator containing the procedure results.\n-     * @throws ProcedureException if there was an exception thrown during procedure execution.\n-     */\n-    RawIterator<Object[], ProcedureException> procedureCallSchemaOverride( int id, Object[] arguments )\n-            throws ProcedureException;\n-\n-    /**\n-     * Invoke a read-only procedure by name.\n-     * @param name the name of the procedure.\n-     * @param arguments the procedure arguments.\n-     * @return an iterator containing the procedure results.\n-     * @throws ProcedureException if there was an exception thrown during procedure execution.\n-     */\n-    RawIterator<Object[], ProcedureException> procedureCallRead( QualifiedName name, Object[] arguments )\n-            throws ProcedureException;\n-\n-    /**\n-     * Invoke a read-only procedure by name, and set the transaction's access mode to\n-     * {@link AccessMode.Static#READ READ} for the duration of the procedure execution.\n-     * @param name the name of the procedure.\n-     * @param arguments the procedure arguments.\n-     * @return an iterator containing the procedure results.\n-     * @throws ProcedureException if there was an exception thrown during procedure execution.\n-     */\n-    RawIterator<Object[], ProcedureException> procedureCallReadOverride( QualifiedName name, Object[] arguments )\n-            throws ProcedureException;\n-\n-    /**\n-     * Invoke a read/write procedure by name.\n-     * @param name the name of the procedure.\n-     * @param arguments the procedure arguments.\n-     * @return an iterator containing the procedure results.\n-     * @throws ProcedureException if there was an exception thrown during procedure execution.\n-     */\n-    RawIterator<Object[], ProcedureException> procedureCallWrite( QualifiedName name, Object[] arguments )\n-            throws ProcedureException;\n-    /**\n-     * Invoke a read/write procedure by name, and set the transaction's access mode to\n-     * {@link AccessMode.Static#WRITE WRITE} for the duration of the procedure execution.\n-     * @param name the name of the procedure.\n-     * @param arguments the procedure arguments.\n-     * @return an iterator containing the procedure results.\n-     * @throws ProcedureException if there was an exception thrown during procedure execution.\n-     */\n-    RawIterator<Object[], ProcedureException> procedureCallWriteOverride( QualifiedName name, Object[] arguments )\n-            throws ProcedureException;\n-\n-    /**\n-     * Invoke a schema write procedure by name.\n-     * @param name the name of the procedure.\n-     * @param arguments the procedure arguments.\n-     * @return an iterator containing the procedure results.\n-     * @throws ProcedureException if there was an exception thrown during procedure execution.\n-     */\n-    RawIterator<Object[], ProcedureException> procedureCallSchema( QualifiedName name, Object[] arguments )\n-            throws ProcedureException;\n-    /**\n-     * Invoke a schema write procedure by name, and set the transaction's access mode to\n-     * {@link AccessMode.Static#FULL FULL} for the duration of the procedure execution.\n-     * @param name the name of the procedure.\n-     * @param arguments the procedure arguments.\n-     * @return an iterator containing the procedure results.\n-     * @throws ProcedureException if there was an exception thrown during procedure execution.\n-     */\n-    RawIterator<Object[], ProcedureException> procedureCallSchemaOverride( QualifiedName name, Object[] arguments )\n-            throws ProcedureException;\n-\n-    /** Invoke a read-only function by id\n-     * @param id the id of the function.\n-     * @param arguments the function arguments.\n-     * @throws ProcedureException if there was an exception thrown during function execution.\n-     */\n-    AnyValue functionCall( int id, AnyValue[] arguments ) throws ProcedureException;\n-\n-    /** Invoke a read-only function by name\n-     * @param name the name of the function.\n-     * @param arguments the function arguments.\n-     * @throws ProcedureException if there was an exception thrown during function execution.\n-     */\n-    AnyValue functionCall( QualifiedName name, AnyValue[] arguments ) throws ProcedureException;\n-\n-    /** Invoke a read-only function by id, and set the transaction's access mode to\n-     * {@link AccessMode.Static#READ READ} for the duration of the function execution.\n-     * @param id the id of the function.\n-     * @param arguments the function arguments.\n-     * @throws ProcedureException if there was an exception thrown during function execution.\n-     */\n-    AnyValue functionCallOverride( int id, AnyValue[] arguments ) throws ProcedureException;\n-\n-    /** Invoke a read-only function by name, and set the transaction's access mode to\n-     * {@link AccessMode.Static#READ READ} for the duration of the function execution.\n-     * @param name the name of the function.\n-     * @param arguments the function arguments.\n-     * @throws ProcedureException if there was an exception thrown during function execution.\n-     */\n-    AnyValue functionCallOverride( QualifiedName name, AnyValue[] arguments ) throws ProcedureException;\n-\n-    /**\n-     * Create a read-only aggregation function by id\n-     * @param id the id of the function\n-     * @return the aggregation function\n-     * @throws ProcedureException\n-     */\n-    UserAggregator aggregationFunction( int id ) throws ProcedureException;\n-\n-    /**\n-     * Create a read-only aggregation function by name\n-     * @param name the name of the function\n-     * @return the aggregation function\n-     * @throws ProcedureException\n-     */\n-    UserAggregator aggregationFunction( QualifiedName name ) throws ProcedureException;\n-\n-    /** Invoke a read-only aggregation function by id, and set the transaction's access mode to\n-     * {@link AccessMode.Static#READ READ} for the duration of the function execution.\n-     * @param id the id of the function.\n-     * @throws ProcedureException if there was an exception thrown during function execution.\n-     */\n-    UserAggregator aggregationFunctionOverride( int id ) throws ProcedureException;\n-\n-    /** Invoke a read-only aggregation function by name, and set the transaction's access mode to\n-     * {@link AccessMode.Static#READ READ} for the duration of the function execution.\n-     * @param name the name of the function.\n-     * @throws ProcedureException if there was an exception thrown during function execution.\n-     */\n-    UserAggregator aggregationFunctionOverride( QualifiedName name ) throws ProcedureException;\n-\n-    /**\n-     * Retrieve a value mapper for mapping values to regular Java objects.\n-     * @return a value mapper that maps to Java objects.\n-     */\n-    ValueMapper<Object> valueMapper();\n+  /**\n+   * Get a handle to the given function\n+   *\n+   * @param name the name of the function\n+   * @return A handle to the function\n+   */\n+  UserFunctionHandle functionGet(QualifiedName name);\n+\n+  /**\n+   * Get a handle to the given aggregation function\n+   *\n+   * @param name the name of the function\n+   * @return A handle to the function\n+   */\n+  UserFunctionHandle aggregationFunctionGet(QualifiedName name);\n+\n+  /**\n+   * Fetch a procedure handle\n+   *\n+   * @param name the name of the procedure\n+   * @return a procedure handle\n+   * @throws ProcedureException\n+   */\n+  ProcedureHandle procedureGet(QualifiedName name) throws ProcedureException;\n+\n+  /**\n+   * Fetch all procedures\n+   *\n+   * @return all procedures\n+   * @throws ProcedureException\n+   */\n+  Set<ProcedureSignature> proceduresGetAll() throws ProcedureException;\n+\n+  /**\n+   * Invoke a read-only procedure by id.\n+   *\n+   * @param id        the id of the procedure.\n+   * @param arguments the procedure arguments.\n+   * @return an iterator containing the procedure results.\n+   * @throws ProcedureException if there was an exception thrown during procedure execution.\n+   */\n+  RawIterator<Object[], ProcedureException> procedureCallRead(int id, Object[] arguments)\n+      throws ProcedureException;\n+\n+  /**\n+   * Invoke a read-only procedure by id, and set the transaction's access mode to\n+   * {@link AccessMode.Static#READ READ} for the duration of the procedure execution.\n+   *\n+   * @param id        the id of the procedure.\n+   * @param arguments the procedure arguments.\n+   * @return an iterator containing the procedure results.\n+   * @throws ProcedureException if there was an exception thrown during procedure execution.\n+   */\n+  RawIterator<Object[], ProcedureException> procedureCallReadOverride(int id, Object[] arguments)\n+      throws ProcedureException;\n+\n+  /**\n+   * Invoke a read/write procedure by id.\n+   *\n+   * @param id        the id of the procedure.\n+   * @param arguments the procedure arguments.\n+   * @return an iterator containing the procedure results.\n+   * @throws ProcedureException if there was an exception thrown during procedure execution.\n+   */\n+  RawIterator<Object[], ProcedureException> procedureCallWrite(int id, Object[] arguments)\n+      throws ProcedureException;\n+\n+  /**\n+   * Invoke a read/write procedure by id, and set the transaction's access mode to\n+   * {@link AccessMode.Static#WRITE WRITE} for the duration of the procedure execution.\n+   *\n+   * @param id        the id of the procedure.\n+   * @param arguments the procedure arguments.\n+   * @return an iterator containing the procedure results.\n+   * @throws ProcedureException if there was an exception thrown during procedure execution.\n+   */\n+  RawIterator<Object[], ProcedureException> procedureCallWriteOverride(int id, Object[] arguments)\n+      throws ProcedureException;\n+\n+  /**\n+   * Invoke a schema write procedure by id.\n+   *\n+   * @param id        the id of the procedure.\n+   * @param arguments the procedure arguments.\n+   * @return an iterator containing the procedure results.\n+   * @throws ProcedureException if there was an exception thrown during procedure execution.\n+   */\n+  RawIterator<Object[], ProcedureException> procedureCallSchema(int id, Object[] arguments)\n+      throws ProcedureException;\n+\n+  /**\n+   * Invoke a schema write procedure by id, and set the transaction's access mode to\n+   * {@link AccessMode.Static#FULL FULL} for the duration of the procedure execution.\n+   *\n+   * @param id        the id of the procedure.\n+   * @param arguments the procedure arguments.\n+   * @return an iterator containing the procedure results.\n+   * @throws ProcedureException if there was an exception thrown during procedure execution.\n+   */\n+  RawIterator<Object[], ProcedureException> procedureCallSchemaOverride(int id, Object[] arguments)\n+      throws ProcedureException;\n+\n+  /**\n+   * Invoke a read-only procedure by name.\n+   *\n+   * @param name      the name of the procedure.\n+   * @param arguments the procedure arguments.\n+   * @return an iterator containing the procedure results.\n+   * @throws ProcedureException if there was an exception thrown during procedure execution.\n+   */\n+  RawIterator<Object[], ProcedureException> procedureCallRead(QualifiedName name, Object[] arguments)\n+      throws ProcedureException;\n+\n+  /**\n+   * Invoke a read-only procedure by name, and set the transaction's access mode to\n+   * {@link AccessMode.Static#READ READ} for the duration of the procedure execution.\n+   *\n+   * @param name      the name of the procedure.\n+   * @param arguments the procedure arguments.\n+   * @return an iterator containing the procedure results.\n+   * @throws ProcedureException if there was an exception thrown during procedure execution.\n+   */\n+  RawIterator<Object[], ProcedureException> procedureCallReadOverride(QualifiedName name, Object[] arguments)\n+      throws ProcedureException;\n+\n+  /**\n+   * Invoke a read/write procedure by name.\n+   *\n+   * @param name      the name of the procedure.\n+   * @param arguments the procedure arguments.\n+   * @return an iterator containing the procedure results.\n+   * @throws ProcedureException if there was an exception thrown during procedure execution.\n+   */\n+  RawIterator<Object[], ProcedureException> procedureCallWrite(QualifiedName name, Object[] arguments)\n+      throws ProcedureException;\n+\n+  /**\n+   * Invoke a read/write procedure by name, and set the transaction's access mode to\n+   * {@link AccessMode.Static#WRITE WRITE} for the duration of the procedure execution.\n+   *\n+   * @param name      the name of the procedure.\n+   * @param arguments the procedure arguments.\n+   * @return an iterator containing the procedure results.\n+   * @throws ProcedureException if there was an exception thrown during procedure execution.\n+   */\n+  RawIterator<Object[], ProcedureException> procedureCallWriteOverride(QualifiedName name, Object[] arguments)\n+      throws ProcedureException;\n+\n+  /**\n+   * Invoke a schema write procedure by name.\n+   *\n+   * @param name      the name of the procedure.\n+   * @param arguments the procedure arguments.\n+   * @return an iterator containing the procedure results.\n+   * @throws ProcedureException if there was an exception thrown during procedure execution.\n+   */\n+  RawIterator<Object[], ProcedureException> procedureCallSchema(QualifiedName name, Object[] arguments)\n+      throws ProcedureException;\n+\n+  /**\n+   * Invoke a schema write procedure by name, and set the transaction's access mode to\n+   * {@link AccessMode.Static#FULL FULL} for the duration of the procedure execution.\n+   *\n+   * @param name      the name of the procedure.\n+   * @param arguments the procedure arguments.\n+   * @return an iterator containing the procedure results.\n+   * @throws ProcedureException if there was an exception thrown during procedure execution.\n+   */\n+  RawIterator<Object[], ProcedureException> procedureCallSchemaOverride(QualifiedName name, Object[] arguments)\n+      throws ProcedureException;\n+\n+  /**\n+   * Invoke a read-only function by id\n+   *\n+   * @param id        the id of the function.\n+   * @param arguments the function arguments.\n+   * @throws ProcedureException if there was an exception thrown during function execution.\n+   */\n+  AnyValue functionCall(int id, AnyValue[] arguments) throws ProcedureException;\n+\n+  /**\n+   * Invoke a read-only function by name\n+   *\n+   * @param name      the name of the function.\n+   * @param arguments the function arguments.\n+   * @throws ProcedureException if there was an exception thrown during function execution.\n+   */\n+  AnyValue functionCall(QualifiedName name, AnyValue[] arguments) throws ProcedureException;\n+\n+  /**\n+   * Invoke a read-only function by id, and set the transaction's access mode to\n+   * {@link AccessMode.Static#READ READ} for the duration of the function execution.\n+   *\n+   * @param id        the id of the function.\n+   * @param arguments the function arguments.\n+   * @throws ProcedureException if there was an exception thrown during function execution.\n+   */\n+  AnyValue functionCallOverride(int id, AnyValue[] arguments) throws ProcedureException;\n+\n+  /**\n+   * Invoke a read-only function by name, and set the transaction's access mode to\n+   * {@link AccessMode.Static#READ READ} for the duration of the function execution.\n+   *\n+   * @param name      the name of the function.\n+   * @param arguments the function arguments.\n+   * @throws ProcedureException if there was an exception thrown during function execution.\n+   */\n+  AnyValue functionCallOverride(QualifiedName name, AnyValue[] arguments) throws ProcedureException;\n+\n+  /**\n+   * Create a read-only aggregation function by id\n+   *\n+   * @param id the id of the function\n+   * @return the aggregation function\n+   * @throws ProcedureException\n+   */\n+  UserAggregator aggregationFunction(int id) throws ProcedureException;\n+\n+  /**\n+   * Create a read-only aggregation function by name\n+   *\n+   * @param name the name of the function\n+   * @return the aggregation function\n+   * @throws ProcedureException\n+   */\n+  UserAggregator aggregationFunction(QualifiedName name) throws ProcedureException;\n+\n+  /**\n+   * Invoke a read-only aggregation function by id, and set the transaction's access mode to\n+   * {@link AccessMode.Static#READ READ} for the duration of the function execution.\n+   *\n+   * @param id the id of the function.\n+   * @throws ProcedureException if there was an exception thrown during function execution.\n+   */\n+  UserAggregator aggregationFunctionOverride(int id) throws ProcedureException;\n+\n+  /**\n+   * Invoke a read-only aggregation function by name, and set the transaction's access mode to\n+   * {@link AccessMode.Static#READ READ} for the duration of the function execution.\n+   *\n+   * @param name the name of the function.\n+   * @throws ProcedureException if there was an exception thrown during function execution.\n+   */\n+  UserAggregator aggregationFunctionOverride(QualifiedName name) throws ProcedureException;\n+\n+  /**\n+   * Retrieve a value mapper for mapping values to regular Java objects.\n+   *\n+   * @return a value mapper that maps to Java objects.\n+   */\n+  ValueMapper<Object> valueMapper();\n }\n",
            "diff_size": 252
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1557/Procedures.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1557/Procedures.java\nindex 535bc759780..6d10cd90c2a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1557/Procedures.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1557/Procedures.java\n@@ -70,10 +70,9 @@ public interface Procedures\n      * @return an iterator containing the procedure results.\n      * @throws ProcedureException if there was an exception thrown during procedure execution.\n      */\n-    RawIterator<Object[], ProcedureException> procedureCallRead( int id, Object[] arguments )\n-            throws ProcedureException;\n+    RawIterator<Object[], ProcedureException> procedureCallRead( int id, Object[] arguments ) throws ProcedureException;\n \n-    /**\n+/**\n      * Invoke a read-only procedure by id, and set the transaction's access mode to\n      * {@link AccessMode.Static#READ READ} for the duration of the procedure execution.\n      * @param id the id of the procedure.\n@@ -81,19 +80,18 @@ public interface Procedures\n      * @return an iterator containing the procedure results.\n      * @throws ProcedureException if there was an exception thrown during procedure execution.\n      */\n-    RawIterator<Object[], ProcedureException> procedureCallReadOverride( int id, Object[] arguments )\n-            throws ProcedureException;\n+    RawIterator<Object[], ProcedureException> procedureCallReadOverride( int id, Object[] arguments ) throws ProcedureException;\n \n-    /**\n+/**\n      * Invoke a read/write procedure by id.\n      * @param id the id of the procedure.\n      * @param arguments the procedure arguments.\n      * @return an iterator containing the procedure results.\n      * @throws ProcedureException if there was an exception thrown during procedure execution.\n      */\n-    RawIterator<Object[], ProcedureException> procedureCallWrite( int id, Object[] arguments )\n-            throws ProcedureException;\n-    /**\n+    RawIterator<Object[], ProcedureException> procedureCallWrite( int id, Object[] arguments ) throws ProcedureException;\n+\n+/**\n      * Invoke a read/write procedure by id, and set the transaction's access mode to\n      * {@link AccessMode.Static#WRITE WRITE} for the duration of the procedure execution.\n      * @param id the id of the procedure.\n@@ -101,19 +99,18 @@ public interface Procedures\n      * @return an iterator containing the procedure results.\n      * @throws ProcedureException if there was an exception thrown during procedure execution.\n      */\n-    RawIterator<Object[], ProcedureException> procedureCallWriteOverride( int id, Object[] arguments )\n-            throws ProcedureException;\n+    RawIterator<Object[], ProcedureException> procedureCallWriteOverride( int id, Object[] arguments ) throws ProcedureException;\n \n-    /**\n+/**\n      * Invoke a schema write procedure by id.\n      * @param id the id of the procedure.\n      * @param arguments the procedure arguments.\n      * @return an iterator containing the procedure results.\n      * @throws ProcedureException if there was an exception thrown during procedure execution.\n      */\n-    RawIterator<Object[], ProcedureException> procedureCallSchema( int id, Object[] arguments )\n-            throws ProcedureException;\n-    /**\n+    RawIterator<Object[], ProcedureException> procedureCallSchema( int id, Object[] arguments ) throws ProcedureException;\n+\n+/**\n      * Invoke a schema write procedure by id, and set the transaction's access mode to\n      * {@link AccessMode.Static#FULL FULL} for the duration of the procedure execution.\n      * @param id the id of the procedure.\n@@ -121,20 +118,18 @@ public interface Procedures\n      * @return an iterator containing the procedure results.\n      * @throws ProcedureException if there was an exception thrown during procedure execution.\n      */\n-    RawIterator<Object[], ProcedureException> procedureCallSchemaOverride( int id, Object[] arguments )\n-            throws ProcedureException;\n+    RawIterator<Object[], ProcedureException> procedureCallSchemaOverride( int id, Object[] arguments ) throws ProcedureException;\n \n-    /**\n+/**\n      * Invoke a read-only procedure by name.\n      * @param name the name of the procedure.\n      * @param arguments the procedure arguments.\n      * @return an iterator containing the procedure results.\n      * @throws ProcedureException if there was an exception thrown during procedure execution.\n      */\n-    RawIterator<Object[], ProcedureException> procedureCallRead( QualifiedName name, Object[] arguments )\n-            throws ProcedureException;\n+    RawIterator<Object[], ProcedureException> procedureCallRead( QualifiedName name, Object[] arguments ) throws ProcedureException;\n \n-    /**\n+/**\n      * Invoke a read-only procedure by name, and set the transaction's access mode to\n      * {@link AccessMode.Static#READ READ} for the duration of the procedure execution.\n      * @param name the name of the procedure.\n@@ -142,19 +137,18 @@ public interface Procedures\n      * @return an iterator containing the procedure results.\n      * @throws ProcedureException if there was an exception thrown during procedure execution.\n      */\n-    RawIterator<Object[], ProcedureException> procedureCallReadOverride( QualifiedName name, Object[] arguments )\n-            throws ProcedureException;\n+    RawIterator<Object[], ProcedureException> procedureCallReadOverride( QualifiedName name, Object[] arguments ) throws ProcedureException;\n \n-    /**\n+/**\n      * Invoke a read/write procedure by name.\n      * @param name the name of the procedure.\n      * @param arguments the procedure arguments.\n      * @return an iterator containing the procedure results.\n      * @throws ProcedureException if there was an exception thrown during procedure execution.\n      */\n-    RawIterator<Object[], ProcedureException> procedureCallWrite( QualifiedName name, Object[] arguments )\n-            throws ProcedureException;\n-    /**\n+    RawIterator<Object[], ProcedureException> procedureCallWrite( QualifiedName name, Object[] arguments ) throws ProcedureException;\n+\n+/**\n      * Invoke a read/write procedure by name, and set the transaction's access mode to\n      * {@link AccessMode.Static#WRITE WRITE} for the duration of the procedure execution.\n      * @param name the name of the procedure.\n@@ -162,19 +156,18 @@ public interface Procedures\n      * @return an iterator containing the procedure results.\n      * @throws ProcedureException if there was an exception thrown during procedure execution.\n      */\n-    RawIterator<Object[], ProcedureException> procedureCallWriteOverride( QualifiedName name, Object[] arguments )\n-            throws ProcedureException;\n+    RawIterator<Object[], ProcedureException> procedureCallWriteOverride( QualifiedName name, Object[] arguments ) throws ProcedureException;\n \n-    /**\n+/**\n      * Invoke a schema write procedure by name.\n      * @param name the name of the procedure.\n      * @param arguments the procedure arguments.\n      * @return an iterator containing the procedure results.\n      * @throws ProcedureException if there was an exception thrown during procedure execution.\n      */\n-    RawIterator<Object[], ProcedureException> procedureCallSchema( QualifiedName name, Object[] arguments )\n-            throws ProcedureException;\n-    /**\n+    RawIterator<Object[], ProcedureException> procedureCallSchema( QualifiedName name, Object[] arguments ) throws ProcedureException;\n+\n+/**\n      * Invoke a schema write procedure by name, and set the transaction's access mode to\n      * {@link AccessMode.Static#FULL FULL} for the duration of the procedure execution.\n      * @param name the name of the procedure.\n@@ -182,10 +175,9 @@ public interface Procedures\n      * @return an iterator containing the procedure results.\n      * @throws ProcedureException if there was an exception thrown during procedure execution.\n      */\n-    RawIterator<Object[], ProcedureException> procedureCallSchemaOverride( QualifiedName name, Object[] arguments )\n-            throws ProcedureException;\n+    RawIterator<Object[], ProcedureException> procedureCallSchemaOverride( QualifiedName name, Object[] arguments ) throws ProcedureException;\n \n-    /** Invoke a read-only function by id\n+/** Invoke a read-only function by id\n      * @param id the id of the function.\n      * @param arguments the function arguments.\n      * @throws ProcedureException if there was an exception thrown during function execution.\n@@ -250,4 +242,4 @@ public interface Procedures\n      * @return a value mapper that maps to Java objects.\n      */\n     ValueMapper<Object> valueMapper();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 37
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}