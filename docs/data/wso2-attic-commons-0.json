{
    "project_name": "wso2-attic-commons",
    "error_id": "0",
    "information": {
        "errors": [
            {
                "line": "46",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 126).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                getNextPreStreamFlowProcessor().process(complexEvent);\n                if (currentLength == lengthToKeep) {\n                    getNextPreStreamFlowProcessor().process(new RemoveEvent((Event) queue.poll(),System.currentTimeMillis()));\n                }else {\n                    currentLength++;\n                }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/0/LengthWindowHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/0/LengthWindowHandler.java\nindex 366b3b97e3d..a7069961e1a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/0/LengthWindowHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/0/LengthWindowHandler.java\n@@ -43,7 +43,8 @@ public class LengthWindowHandler extends WindowHandler {\n                 queue.put((StreamEvent) complexEvent);\n                 getNextPreStreamFlowProcessor().process(complexEvent);\n                 if (currentLength == lengthToKeep) {\n-                    getNextPreStreamFlowProcessor().process(new RemoveEvent((Event) queue.poll(),System.currentTimeMillis()));\n+                    getNextPreStreamFlowProcessor().\n+                    process(new RemoveEvent((Event) queue.poll(),System.currentTimeMillis()));\n                 }else {\n                     currentLength++;\n                 }\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/0/LengthWindowHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/0/LengthWindowHandler.java\nindex 366b3b97e3d..169c2ec8ea2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/0/LengthWindowHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/0/LengthWindowHandler.java\n@@ -1,20 +1,21 @@\n /*\n-*  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n+ *  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n package org.wso2.siddhi.core.stream.handler.window;\n \n import org.wso2.siddhi.core.event.ComplexEvent;\n@@ -27,55 +28,55 @@ import org.wso2.siddhi.core.util.SchedulerQueue;\n \n public class LengthWindowHandler extends WindowHandler {\n \n-    int lengthToKeep;\n-    private volatile int currentLength = 0;\n+  int lengthToKeep;\n+  private volatile int currentLength = 0;\n \n-    @Override\n-    public void setParameters(Object[] parameters) {\n-        lengthToKeep = (Integer) parameters[0];\n-    }\n+  @Override\n+  public void setParameters(Object[] parameters) {\n+    lengthToKeep = (Integer) parameters[0];\n+  }\n \n-    @Override\n-    public void process(ComplexEvent complexEvent) {\n-        try {\n-            if (complexEvent instanceof Event) {\n-                SchedulerQueue<StreamEvent> queue = getWindow();\n-                queue.put((StreamEvent) complexEvent);\n-                getNextPreStreamFlowProcessor().process(complexEvent);\n-                if (currentLength == lengthToKeep) {\n-                    getNextPreStreamFlowProcessor().process(new RemoveEvent((Event) queue.poll(),System.currentTimeMillis()));\n-                }else {\n-                    currentLength++;\n-                }\n-            } else if (complexEvent instanceof ListEvent) {\n-                SchedulerQueue<StreamEvent> queue = getWindow();\n-                Event[] newEvents = ((ListEvent) complexEvent).getEvents();\n-                int oldEventLength = newEvents.length - (lengthToKeep - currentLength);\n-                if (oldEventLength > 0) {\n-                    Event[] oldEvents = new Event[newEvents.length - (lengthToKeep - currentLength)];\n-                    int oldEventIndex = 0;\n-                    for (Event event : newEvents) {\n-                        queue.put(event);\n-                        getNextPreStreamFlowProcessor().process(event);\n-                        if (currentLength == lengthToKeep) {\n-                            oldEvents[oldEventIndex] = new RemoveEvent((Event) queue.poll(),System.currentTimeMillis());\n-                            oldEventIndex++;\n-                        } else {\n-                            currentLength++;\n-                        }\n-                    }\n-                    getNextPreStreamFlowProcessor().process(new RemoveListEvent(oldEvents,System.currentTimeMillis()));\n-                } else {\n-                    for (Event event : newEvents) {\n-                        queue.put(event);\n-                        getNextPreStreamFlowProcessor().process(event);\n-                        currentLength++;\n-                    }\n-                }\n+  @Override\n+  public void process(ComplexEvent complexEvent) {\n+    try {\n+      if (complexEvent instanceof Event) {\n+        SchedulerQueue<StreamEvent> queue = getWindow();\n+        queue.put((StreamEvent) complexEvent);\n+        getNextPreStreamFlowProcessor().process(complexEvent);\n+        if (currentLength == lengthToKeep) {\n+          getNextPreStreamFlowProcessor().process(new RemoveEvent((Event) queue.poll(), System.currentTimeMillis()));\n+        } else {\n+          currentLength++;\n+        }\n+      } else if (complexEvent instanceof ListEvent) {\n+        SchedulerQueue<StreamEvent> queue = getWindow();\n+        Event[] newEvents = ((ListEvent) complexEvent).getEvents();\n+        int oldEventLength = newEvents.length - (lengthToKeep - currentLength);\n+        if (oldEventLength > 0) {\n+          Event[] oldEvents = new Event[newEvents.length - (lengthToKeep - currentLength)];\n+          int oldEventIndex = 0;\n+          for (Event event : newEvents) {\n+            queue.put(event);\n+            getNextPreStreamFlowProcessor().process(event);\n+            if (currentLength == lengthToKeep) {\n+              oldEvents[oldEventIndex] = new RemoveEvent((Event) queue.poll(), System.currentTimeMillis());\n+              oldEventIndex++;\n+            } else {\n+              currentLength++;\n             }\n-        } catch (InterruptedException e) {\n-            e.printStackTrace();\n+          }\n+          getNextPreStreamFlowProcessor().process(new RemoveListEvent(oldEvents, System.currentTimeMillis()));\n+        } else {\n+          for (Event event : newEvents) {\n+            queue.put(event);\n+            getNextPreStreamFlowProcessor().process(event);\n+            currentLength++;\n+          }\n         }\n+      }\n+    } catch (InterruptedException e) {\n+      e.printStackTrace();\n     }\n+  }\n \n }\n",
            "diff_size": 72
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/0/LengthWindowHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/0/LengthWindowHandler.java\nindex 366b3b97e3d..1c806a1430e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/0/LengthWindowHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/0/LengthWindowHandler.java\n@@ -44,7 +44,7 @@ public class LengthWindowHandler extends WindowHandler {\n                 getNextPreStreamFlowProcessor().process(complexEvent);\n                 if (currentLength == lengthToKeep) {\n                     getNextPreStreamFlowProcessor().process(new RemoveEvent((Event) queue.poll(),System.currentTimeMillis()));\n-                }else {\n+                } else {\n                     currentLength++;\n                 }\n             } else if (complexEvent instanceof ListEvent) {\n@@ -78,4 +78,4 @@ public class LengthWindowHandler extends WindowHandler {\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/0/LengthWindowHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/0/LengthWindowHandler.java\nindex 366b3b97e3d..a7069961e1a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/0/LengthWindowHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/0/LengthWindowHandler.java\n@@ -43,7 +43,8 @@ public class LengthWindowHandler extends WindowHandler {\n                 queue.put((StreamEvent) complexEvent);\n                 getNextPreStreamFlowProcessor().process(complexEvent);\n                 if (currentLength == lengthToKeep) {\n-                    getNextPreStreamFlowProcessor().process(new RemoveEvent((Event) queue.poll(),System.currentTimeMillis()));\n+                    getNextPreStreamFlowProcessor().\n+                    process(new RemoveEvent((Event) queue.poll(),System.currentTimeMillis()));\n                 }else {\n                     currentLength++;\n                 }\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}