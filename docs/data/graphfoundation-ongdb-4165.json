{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4165",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "50",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "67",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "86",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4165/RecentK.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4165/RecentK.java\nindex be5806772a5..0b002896c24 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4165/RecentK.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4165/RecentK.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.concurrent;\n \n import java.util.Iterator;\n@@ -27,7 +28,7 @@ import java.util.concurrent.atomic.AtomicLong;\n \n /**\n  * Tracks an (approximate) set of recently seen unique elements in a stream, based on a concurrent LRU implementation.\n- *\n+ * <p>\n  * This class is thread safe. For the common case of items that are recently seen being seen again, this class is\n  * lock free.\n  *\n@@ -35,109 +36,107 @@ import java.util.concurrent.atomic.AtomicLong;\n  */\n public class RecentK<Type> implements Iterable<Type>\n {\n-    private final int maxItems;\n+  private final int maxItems;\n \n-    /**\n-     * Source of truth - the keys in this map are the \"recent set\". For each value, we also track a counter for\n-     * the number of times we've seen it, which is used to evict older and less used values.\n-     */\n-    private final ConcurrentHashMap<Type, AtomicLong> recentItems = new ConcurrentHashMap<>();\n+  /**\n+   * Source of truth - the keys in this map are the \"recent set\". For each value, we also track a counter for\n+   * the number of times we've seen it, which is used to evict older and less used values.\n+   */\n+  private final ConcurrentHashMap<Type, AtomicLong> recentItems = new ConcurrentHashMap<>();\n \n-    /**\n-     * @param maxItems is the size of the item set to track\n-     */\n-    public RecentK( int maxItems )\n-    {\n-        this.maxItems = maxItems;\n-    }\n+  /**\n+   * @param maxItems is the size of the item set to track\n+   */\n+  public RecentK(int maxItems)\n+  {\n+    this.maxItems = maxItems;\n+  }\n \n-    /**\n-     * @param item a new item to the tracked set.\n-     */\n-    public void add( Type item )\n+  /**\n+   * @param item a new item to the tracked set.\n+   */\n+  public void add(Type item)\n+  {\n+    AtomicLong counter = recentItems.get(item);\n+    if (counter != null)\n     {\n-        AtomicLong counter = recentItems.get( item );\n-        if ( counter != null )\n-        {\n-            counter.incrementAndGet();\n-        }\n-        else\n-        {\n-            // Double-checked locking ahead: Check if there is space for our item\n-            if ( recentItems.size() >= maxItems )\n-            {\n-                // If not, synchronize and check again (this will happen if there is > maxItems in the current set)\n-                synchronized ( recentItems )\n-                {\n-                    // Proper check under lock, make space in the set for our new item\n-                    while ( recentItems.size() >= maxItems )\n-                    {\n-                        removeItemWithLowestCount();\n-                    }\n-\n-                    halveCounts();\n-                    recentItems.putIfAbsent( item, new AtomicLong( 1 ) );\n-                }\n-            }\n-            else\n-            {\n-                // There were < maxItems in the set. This is racy as multiple clients may have hit this branch\n-                // simultaneously. We accept going above max items here. The set will recover next time an item\n-                // is added, since the synchronized block above will bring the set to maxItems items again.\n-                recentItems.putIfAbsent( item, new AtomicLong( 1 ) );\n-            }\n-        }\n-\n-    }\n-\n-    /**\n-     * In order to give lower-and-lower priority to keys we've seen a lot in the past, but don't see much anymore,\n-     * we cut all key counts in half after we've run an eviction cycle.\n-     */\n-    private void halveCounts()\n+      counter.incrementAndGet();\n+    } else\n     {\n-        for ( AtomicLong count : recentItems.values() )\n+      // Double-checked locking ahead: Check if there is space for our item\n+      if (recentItems.size() >= maxItems)\n+      {\n+        // If not, synchronize and check again (this will happen if there is > maxItems in the current set)\n+        synchronized (recentItems)\n         {\n-            long prev;\n-            long next;\n-            do\n-            {\n-                prev = count.get();\n-                next = Math.max( prev / 2, 1 );\n-            }\n-            while ( !count.compareAndSet( prev, next ) );\n+          // Proper check under lock, make space in the set for our new item\n+          while (recentItems.size() >= maxItems)\n+          {\n+            removeItemWithLowestCount();\n+          }\n \n+          halveCounts();\n+          recentItems.putIfAbsent(item, new AtomicLong(1));\n         }\n+      } else\n+      {\n+        // There were < maxItems in the set. This is racy as multiple clients may have hit this branch\n+        // simultaneously. We accept going above max items here. The set will recover next time an item\n+        // is added, since the synchronized block above will bring the set to maxItems items again.\n+        recentItems.putIfAbsent(item, new AtomicLong(1));\n+      }\n     }\n \n-    private void removeItemWithLowestCount()\n+  }\n+\n+  /**\n+   * In order to give lower-and-lower priority to keys we've seen a lot in the past, but don't see much anymore,\n+   * we cut all key counts in half after we've run an eviction cycle.\n+   */\n+  private void halveCounts()\n+  {\n+    for (AtomicLong count : recentItems.values())\n     {\n-        Type lowestCountKey = null;\n-        long lowestCount = Long.MAX_VALUE;\n-        for ( Map.Entry<Type,AtomicLong> entry : recentItems.entrySet() )\n-        {\n-            long currentCount = entry.getValue().get();\n-            if ( currentCount < lowestCount )\n-            {\n-                lowestCount = currentCount;\n-                lowestCountKey = entry.getKey();\n-            }\n-        }\n+      long prev;\n+      long next;\n+      do\n+      {\n+        prev = count.get();\n+        next = Math.max(prev / 2, 1);\n+      }\n+      while (!count.compareAndSet(prev, next));\n \n-        if ( lowestCountKey != null )\n-        {\n-            recentItems.remove( lowestCountKey );\n-        }\n     }\n+  }\n \n-    public Set<Type> recentItems()\n+  private void removeItemWithLowestCount()\n+  {\n+    Type lowestCountKey = null;\n+    long lowestCount = Long.MAX_VALUE;\n+    for (Map.Entry<Type, AtomicLong> entry : recentItems.entrySet())\n     {\n-        return recentItems.keySet();\n+      long currentCount = entry.getValue().get();\n+      if (currentCount < lowestCount)\n+      {\n+        lowestCount = currentCount;\n+        lowestCountKey = entry.getKey();\n+      }\n     }\n \n-    @Override\n-    public Iterator<Type> iterator()\n+    if (lowestCountKey != null)\n     {\n-        return recentItems().iterator();\n+      recentItems.remove(lowestCountKey);\n     }\n+  }\n+\n+  public Set<Type> recentItems()\n+  {\n+    return recentItems.keySet();\n+  }\n+\n+  @Override\n+  public Iterator<Type> iterator()\n+  {\n+    return recentItems().iterator();\n+  }\n }\n",
            "diff_size": 134
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4165/RecentK.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4165/RecentK.java\nindex be5806772a5..e5331897956 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4165/RecentK.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4165/RecentK.java\n@@ -41,7 +41,7 @@ public class RecentK<Type> implements Iterable<Type>\n      * Source of truth - the keys in this map are the \"recent set\". For each value, we also track a counter for\n      * the number of times we've seen it, which is used to evict older and less used values.\n      */\n-    private final ConcurrentHashMap<Type, AtomicLong> recentItems = new ConcurrentHashMap<>();\n+    private final ConcurrentHashMap<Type,AtomicLong> recentItems = new ConcurrentHashMap<>();\n \n     /**\n      * @param maxItems is the size of the item set to track\n@@ -87,7 +87,6 @@ public class RecentK<Type> implements Iterable<Type>\n                 recentItems.putIfAbsent( item, new AtomicLong( 1 ) );\n             }\n         }\n-\n     }\n \n     /**\n@@ -106,8 +105,7 @@ public class RecentK<Type> implements Iterable<Type>\n                 next = Math.max( prev / 2, 1 );\n             }\n             while ( !count.compareAndSet( prev, next ) );\n-\n-        }\n+    }\n     }\n \n     private void removeItemWithLowestCount()\n@@ -140,4 +138,4 @@ public class RecentK<Type> implements Iterable<Type>\n     {\n         return recentItems().iterator();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}