{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1773",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "47",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1773/NodeStore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1773/NodeStore.java\nindex 9feaf141d9a..10a5d9d8b64 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1773/NodeStore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1773/NodeStore.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store;\n \n import java.io.File;\n@@ -41,105 +42,105 @@ import static org.neo4j.kernel.impl.store.NoStoreHeaderFormat.NO_STORE_HEADER_FO\n /**\n  * Implementation of the node store.\n  */\n-public class NodeStore extends CommonAbstractStore<NodeRecord,NoStoreHeader> implements StoreStatement.Nodes\n+public class NodeStore extends CommonAbstractStore<NodeRecord, NoStoreHeader> implements StoreStatement.Nodes\n {\n-    public static Long readOwnerFromDynamicLabelsRecord( DynamicRecord record )\n-    {\n-        byte[] data = record.getData();\n-        byte[] header = PropertyType.ARRAY.readDynamicRecordHeader( data );\n-        byte[] array = Arrays.copyOfRange( data, header.length, data.length );\n-\n-        int requiredBits = header[2];\n-        if ( requiredBits == 0 )\n-        {\n-            return null;\n-        }\n-        Bits bits = Bits.bitsFromBytes( array );\n-        return bits.getLong( requiredBits );\n-    }\n-\n-    @Override\n-    public RecordCursor<DynamicRecord> newLabelCursor()\n-    {\n-        return dynamicLabelStore.newRecordCursor( dynamicLabelStore.newRecord() ).acquire( getNumberOfReservedLowIds(),\n-                RecordLoad.NORMAL );\n-    }\n-\n-    public abstract static class Configuration\n-        extends CommonAbstractStore.Configuration\n-    {\n-    }\n-\n-    public static final String TYPE_DESCRIPTOR = \"NodeStore\";\n-\n-    private final DynamicArrayStore dynamicLabelStore;\n-\n-    public NodeStore(\n-            File fileName,\n-            Config config,\n-            IdGeneratorFactory idGeneratorFactory,\n-            PageCache pageCache,\n-            LogProvider logProvider,\n-            DynamicArrayStore dynamicLabelStore,\n-            RecordFormats recordFormats,\n-            OpenOption... openOptions )\n-    {\n-        super( fileName, config, IdType.NODE, idGeneratorFactory, pageCache, logProvider, TYPE_DESCRIPTOR,\n-                recordFormats.node(), NO_STORE_HEADER_FORMAT, recordFormats.storeVersion(), openOptions );\n-        this.dynamicLabelStore = dynamicLabelStore;\n-    }\n-\n-    @Override\n-    public <FAILURE extends Exception> void accept( Processor<FAILURE> processor, NodeRecord record ) throws FAILURE\n+  public static Long readOwnerFromDynamicLabelsRecord(DynamicRecord record)\n+  {\n+    byte[] data = record.getData();\n+    byte[] header = PropertyType.ARRAY.readDynamicRecordHeader(data);\n+    byte[] array = Arrays.copyOfRange(data, header.length, data.length);\n+\n+    int requiredBits = header[2];\n+    if (requiredBits == 0)\n     {\n-        processor.processNode( this, record );\n+      return null;\n     }\n-\n-    @Override\n-    public void ensureHeavy( NodeRecord node )\n-    {\n-        if ( NodeLabelsField.fieldPointsToDynamicRecordOfLabels( node.getLabelField() ) )\n-        {\n-            ensureHeavy( node, NodeLabelsField.firstDynamicLabelRecordId( node.getLabelField() ) );\n-        }\n-    }\n-\n-    public void ensureHeavy( NodeRecord node, long firstDynamicLabelRecord )\n-    {\n-        if ( !node.isLight() )\n-        {\n-            return;\n-        }\n-\n-        // Load any dynamic labels and populate the node record\n-        node.setLabelField( node.getLabelField(), dynamicLabelStore.getRecords( firstDynamicLabelRecord, RecordLoad.NORMAL ) );\n-    }\n-\n-    public static void ensureHeavy( NodeRecord node, RecordCursor<DynamicRecord> dynamicLabelCursor )\n-    {\n-        long firstDynamicLabelId = NodeLabelsField.firstDynamicLabelRecordId( node.getLabelField() );\n-        dynamicLabelCursor.placeAt( firstDynamicLabelId, RecordLoad.NORMAL );\n-        List<DynamicRecord> dynamicLabelRecords = dynamicLabelCursor.getAll();\n-        node.setLabelField( node.getLabelField(), dynamicLabelRecords );\n-    }\n-\n-    @Override\n-    public void updateRecord( NodeRecord record )\n+    Bits bits = Bits.bitsFromBytes(array);\n+    return bits.getLong(requiredBits);\n+  }\n+\n+  @Override\n+  public RecordCursor<DynamicRecord> newLabelCursor()\n+  {\n+    return dynamicLabelStore.newRecordCursor(dynamicLabelStore.newRecord()).acquire(getNumberOfReservedLowIds(),\n+        RecordLoad.NORMAL);\n+  }\n+\n+  public abstract static class Configuration\n+      extends CommonAbstractStore.Configuration\n+  {\n+  }\n+\n+  public static final String TYPE_DESCRIPTOR = \"NodeStore\";\n+\n+  private final DynamicArrayStore dynamicLabelStore;\n+\n+  public NodeStore(\n+      File fileName,\n+      Config config,\n+      IdGeneratorFactory idGeneratorFactory,\n+      PageCache pageCache,\n+      LogProvider logProvider,\n+      DynamicArrayStore dynamicLabelStore,\n+      RecordFormats recordFormats,\n+      OpenOption... openOptions)\n+  {\n+    super(fileName, config, IdType.NODE, idGeneratorFactory, pageCache, logProvider, TYPE_DESCRIPTOR,\n+        recordFormats.node(), NO_STORE_HEADER_FORMAT, recordFormats.storeVersion(), openOptions);\n+    this.dynamicLabelStore = dynamicLabelStore;\n+  }\n+\n+  @Override\n+  public <FAILURE extends Exception> void accept(Processor<FAILURE> processor, NodeRecord record) throws FAILURE\n+  {\n+    processor.processNode(this, record);\n+  }\n+\n+  @Override\n+  public void ensureHeavy(NodeRecord node)\n+  {\n+    if (NodeLabelsField.fieldPointsToDynamicRecordOfLabels(node.getLabelField()))\n     {\n-        super.updateRecord( record );\n-        updateDynamicLabelRecords( record.getDynamicLabelRecords() );\n+      ensureHeavy(node, NodeLabelsField.firstDynamicLabelRecordId(node.getLabelField()));\n     }\n+  }\n \n-    public DynamicArrayStore getDynamicLabelStore()\n+  public void ensureHeavy(NodeRecord node, long firstDynamicLabelRecord)\n+  {\n+    if (!node.isLight())\n     {\n-        return dynamicLabelStore;\n+      return;\n     }\n \n-    public void updateDynamicLabelRecords( Iterable<DynamicRecord> dynamicLabelRecords )\n+    // Load any dynamic labels and populate the node record\n+    node.setLabelField(node.getLabelField(), dynamicLabelStore.getRecords(firstDynamicLabelRecord, RecordLoad.NORMAL));\n+  }\n+\n+  public static void ensureHeavy(NodeRecord node, RecordCursor<DynamicRecord> dynamicLabelCursor)\n+  {\n+    long firstDynamicLabelId = NodeLabelsField.firstDynamicLabelRecordId(node.getLabelField());\n+    dynamicLabelCursor.placeAt(firstDynamicLabelId, RecordLoad.NORMAL);\n+    List<DynamicRecord> dynamicLabelRecords = dynamicLabelCursor.getAll();\n+    node.setLabelField(node.getLabelField(), dynamicLabelRecords);\n+  }\n+\n+  @Override\n+  public void updateRecord(NodeRecord record)\n+  {\n+    super.updateRecord(record);\n+    updateDynamicLabelRecords(record.getDynamicLabelRecords());\n+  }\n+\n+  public DynamicArrayStore getDynamicLabelStore()\n+  {\n+    return dynamicLabelStore;\n+  }\n+\n+  public void updateDynamicLabelRecords(Iterable<DynamicRecord> dynamicLabelRecords)\n+  {\n+    for (DynamicRecord record : dynamicLabelRecords)\n     {\n-        for ( DynamicRecord record : dynamicLabelRecords )\n-        {\n-            dynamicLabelStore.updateRecord( record );\n-        }\n+      dynamicLabelStore.updateRecord(record);\n     }\n+  }\n }\n",
            "diff_size": 135
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1773/NodeStore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1773/NodeStore.java\nindex 9feaf141d9a..4d11f5625fe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1773/NodeStore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1773/NodeStore.java\n@@ -54,28 +54,25 @@ public class NodeStore extends CommonAbstractStore<NodeRecord,NoStoreHeader> imp\n         {\n             return null;\n         }\n-        Bits bits = Bits.bitsFromBytes( array );\n+\n+Bits bits = Bits.bitsFromBytes( array );\n         return bits.getLong( requiredBits );\n     }\n \n     @Override\n     public RecordCursor<DynamicRecord> newLabelCursor()\n     {\n-        return dynamicLabelStore.newRecordCursor( dynamicLabelStore.newRecord() ).acquire( getNumberOfReservedLowIds(),\n-                RecordLoad.NORMAL );\n+        return dynamicLabelStore.newRecordCursor( dynamicLabelStore.newRecord() ).acquire( getNumberOfReservedLowIds(), RecordLoad.NORMAL );\n     }\n \n-    public abstract static class Configuration\n-        extends CommonAbstractStore.Configuration\n-    {\n+    public abstract static class Configuration extends CommonAbstractStore.Configuration\n+{\n     }\n \n     public static final String TYPE_DESCRIPTOR = \"NodeStore\";\n+private final DynamicArrayStore dynamicLabelStore;\n \n-    private final DynamicArrayStore dynamicLabelStore;\n-\n-    public NodeStore(\n-            File fileName,\n+    public NodeStore( File fileName,\n             Config config,\n             IdGeneratorFactory idGeneratorFactory,\n             PageCache pageCache,\n@@ -86,7 +83,7 @@ public class NodeStore extends CommonAbstractStore<NodeRecord,NoStoreHeader> imp\n     {\n         super( fileName, config, IdType.NODE, idGeneratorFactory, pageCache, logProvider, TYPE_DESCRIPTOR,\n                 recordFormats.node(), NO_STORE_HEADER_FORMAT, recordFormats.storeVersion(), openOptions );\n-        this.dynamicLabelStore = dynamicLabelStore;\n+this.dynamicLabelStore = dynamicLabelStore;\n     }\n \n     @Override\n@@ -142,4 +139,4 @@ public class NodeStore extends CommonAbstractStore<NodeRecord,NoStoreHeader> imp\n             dynamicLabelStore.updateRecord( record );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}