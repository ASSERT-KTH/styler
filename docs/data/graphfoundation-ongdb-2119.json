{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2119",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "44",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "66",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "69",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2119/CypherSession.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2119/CypherSession.java\nindex bdb8b910e3a..e58b3622225 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2119/CypherSession.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2119/CypherSession.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.server.rest.management.console;\n \n import org.apache.commons.lang3.StringUtils;\n@@ -36,42 +37,40 @@ import static java.util.Collections.emptyMap;\n \n public class CypherSession implements ScriptSession\n {\n-    private final CypherExecutor cypherExecutor;\n-    private final Log log;\n-    private final HttpServletRequest request;\n+  private final CypherExecutor cypherExecutor;\n+  private final Log log;\n+  private final HttpServletRequest request;\n+\n+  public CypherSession(CypherExecutor cypherExecutor, LogProvider logProvider, HttpServletRequest request)\n+  {\n+    this.cypherExecutor = cypherExecutor;\n+    this.log = logProvider.getLog(getClass());\n+    this.request = request;\n+  }\n \n-    public CypherSession( CypherExecutor cypherExecutor, LogProvider logProvider, HttpServletRequest request )\n+  @Override\n+  public Pair<String, String> evaluate(String script)\n+  {\n+    if (StringUtils.EMPTY.equals(script.trim()))\n     {\n-        this.cypherExecutor = cypherExecutor;\n-        this.log = logProvider.getLog( getClass() );\n-        this.request = request;\n+      return Pair.of(StringUtils.EMPTY, null);\n     }\n \n-    @Override\n-    public Pair<String, String> evaluate( String script )\n+    String resultString;\n+    try\n     {\n-        if ( StringUtils.EMPTY.equals( script.trim() ) )\n-        {\n-            return Pair.of( StringUtils.EMPTY, null );\n-        }\n-\n-        String resultString;\n-        try\n-        {\n-            TransactionalContext tc = cypherExecutor.createTransactionContext( script, emptyMap(), request );\n-            ExecutionEngine engine = cypherExecutor.getExecutionEngine();\n-            Result result = engine.executeQuery( script, emptyMap(), tc );\n-            resultString = result.resultAsString();\n-        }\n-        catch ( SyntaxException error )\n-        {\n-            resultString = error.getMessage();\n-        }\n-        catch ( Exception exception )\n-        {\n-            log.error( \"Unknown error executing cypher query\", exception );\n-            resultString = \"Error: \" + exception.getClass().getSimpleName() + \" - \" + exception.getMessage();\n-        }\n-        return Pair.of( resultString, null );\n+      TransactionalContext tc = cypherExecutor.createTransactionContext(script, emptyMap(), request);\n+      ExecutionEngine engine = cypherExecutor.getExecutionEngine();\n+      Result result = engine.executeQuery(script, emptyMap(), tc);\n+      resultString = result.resultAsString();\n+    } catch (SyntaxException error)\n+    {\n+      resultString = error.getMessage();\n+    } catch (Exception exception)\n+    {\n+      log.error(\"Unknown error executing cypher query\", exception);\n+      resultString = \"Error: \" + exception.getClass().getSimpleName() + \" - \" + exception.getMessage();\n     }\n+    return Pair.of(resultString, null);\n+  }\n }\n",
            "diff_size": 45
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2119/CypherSession.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2119/CypherSession.java\nindex bdb8b910e3a..f3d1045a316 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2119/CypherSession.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2119/CypherSession.java\n@@ -48,7 +48,7 @@ public class CypherSession implements ScriptSession\n     }\n \n     @Override\n-    public Pair<String, String> evaluate( String script )\n+    public Pair<String,String> evaluate( String script )\n     {\n         if ( StringUtils.EMPTY.equals( script.trim() ) )\n         {\n@@ -72,6 +72,7 @@ public class CypherSession implements ScriptSession\n             log.error( \"Unknown error executing cypher query\", exception );\n             resultString = \"Error: \" + exception.getClass().getSimpleName() + \" - \" + exception.getMessage();\n         }\n-        return Pair.of( resultString, null );\n+\n+return Pair.of( resultString, null );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}