{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1734",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "75",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "244",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "249",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "279",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "303",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "321",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "321",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "327",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "327",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "339",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "339",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "357",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "357",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "369",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "369",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "371",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "371",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "382",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "382",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "388",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "388",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "400",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "400",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "406",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "406",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "412",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "412",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "418",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "418",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "425",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "425",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "435",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "435",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "453",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "453",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "455",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "455",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "459",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "459",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "461",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "461",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "465",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "484",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "484",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "486",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "486",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "521",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "521",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "537",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "537",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "539",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "539",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "543",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "543",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1734/BaseToObjectValueWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1734/BaseToObjectValueWriter.java\nindex a5c644bb6ca..b5938961d32 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1734/BaseToObjectValueWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1734/BaseToObjectValueWriter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.util;\n \n import java.lang.reflect.Array;\n@@ -64,495 +65,490 @@ import static org.neo4j.helpers.collection.Iterators.iteratorsEqual;\n  */\n public abstract class BaseToObjectValueWriter<E extends Exception> implements AnyValueWriter<E>\n {\n-    private final Deque<Writer> stack = new ArrayDeque<>();\n-\n-    public BaseToObjectValueWriter()\n-    {\n-        stack.push( new ObjectWriter() );\n-    }\n-\n-    protected abstract Node newNodeProxyById( long id );\n-\n-    protected abstract Relationship newRelationshipProxyById( long id );\n-\n-    protected abstract Point newPoint( CoordinateReferenceSystem crs, double[] coordinate );\n-\n-    public Object value()\n-    {\n-        assert stack.size() == 1;\n-        return stack.getLast().value();\n-    }\n-\n-    private void writeValue( Object value )\n-    {\n-        assert !stack.isEmpty();\n-        Writer head = stack.peek();\n-        head.write( value );\n-    }\n-\n-    @Override\n-    public void writeNodeReference( long nodeId ) throws RuntimeException\n-    {\n-        throw new UnsupportedOperationException( \"Cannot write a raw node reference\" );\n-    }\n-\n-    @Override\n-    public void writeNode( long nodeId, TextArray ignore, MapValue properties ) throws RuntimeException\n-    {\n-        if ( nodeId >= 0 )\n+  private final Deque<Writer> stack = new ArrayDeque<>();\n+\n+  public BaseToObjectValueWriter()\n+  {\n+    stack.push(new ObjectWriter());\n+  }\n+\n+  protected abstract Node newNodeProxyById(long id);\n+\n+  protected abstract Relationship newRelationshipProxyById(long id);\n+\n+  protected abstract Point newPoint(CoordinateReferenceSystem crs, double[] coordinate);\n+\n+  public Object value()\n+  {\n+    assert stack.size() == 1;\n+    return stack.getLast().value();\n+  }\n+\n+  private void writeValue(Object value)\n+  {\n+    assert !stack.isEmpty();\n+    Writer head = stack.peek();\n+    head.write(value);\n+  }\n+\n+  @Override\n+  public void writeNodeReference(long nodeId) throws RuntimeException\n+  {\n+    throw new UnsupportedOperationException(\"Cannot write a raw node reference\");\n+  }\n+\n+  @Override\n+  public void writeNode(long nodeId, TextArray ignore, MapValue properties) throws RuntimeException\n+  {\n+    if (nodeId >= 0)\n+    {\n+      writeValue(newNodeProxyById(nodeId));\n+    }\n+  }\n+\n+  @Override\n+  public void writeVirtualNodeHack(Object node)\n+  {\n+    writeValue(node);\n+  }\n+\n+  @Override\n+  public void writeRelationshipReference(long relId) throws RuntimeException\n+  {\n+    throw new UnsupportedOperationException(\"Cannot write a raw edge reference\");\n+  }\n+\n+  @Override\n+  public void writeRelationship(long relId, long startNodeId, long endNodeId, TextValue type, MapValue properties)\n+      throws RuntimeException\n+  {\n+    if (relId >= 0)\n+    {\n+      writeValue(newRelationshipProxyById(relId));\n+    }\n+  }\n+\n+  @Override\n+  public void writeVirtualRelationshipHack(Object relationship)\n+  {\n+    writeValue(relationship);\n+  }\n+\n+  @Override\n+  public void beginMap(int size) throws RuntimeException\n+  {\n+    stack.push(new MapWriter(size));\n+  }\n+\n+  @Override\n+  public void endMap() throws RuntimeException\n+  {\n+    assert !stack.isEmpty();\n+    writeValue(stack.pop().value());\n+  }\n+\n+  @Override\n+  public void beginList(int size) throws RuntimeException\n+  {\n+    stack.push(new ListWriter(size));\n+  }\n+\n+  @Override\n+  public void endList() throws RuntimeException\n+  {\n+    assert !stack.isEmpty();\n+    writeValue(stack.pop().value());\n+  }\n+\n+  @Override\n+  public void writePath(NodeValue[] nodes, RelationshipValue[] relationships) throws RuntimeException\n+  {\n+    assert nodes != null;\n+    assert nodes.length > 0;\n+    assert relationships != null;\n+    assert nodes.length == relationships.length + 1;\n+\n+    Node[] nodeProxies = new Node[nodes.length];\n+    for (int i = 0; i < nodes.length; i++)\n+    {\n+      nodeProxies[i] = newNodeProxyById(nodes[i].id());\n+    }\n+    Relationship[] relationship = new Relationship[relationships.length];\n+    for (int i = 0; i < relationships.length; i++)\n+    {\n+      relationship[i] = newRelationshipProxyById(relationships[i].id());\n+    }\n+    writeValue(new Path()\n+    {\n+      @Override\n+      public Node startNode()\n+      {\n+        return nodeProxies[0];\n+      }\n+\n+      @Override\n+      public Node endNode()\n+      {\n+        return nodeProxies[nodeProxies.length - 1];\n+      }\n+\n+      @Override\n+      public Relationship lastRelationship()\n+      {\n+        return relationship[relationship.length - 1];\n+      }\n+\n+      @Override\n+      public Iterable<Relationship> relationships()\n+      {\n+        return Arrays.asList(relationship);\n+      }\n+\n+      @Override\n+      public Iterable<Relationship> reverseRelationships()\n+      {\n+        return () -> new ReverseArrayIterator<>(relationship);\n+      }\n+\n+      @Override\n+      public Iterable<Node> nodes()\n+      {\n+        return Arrays.asList(nodeProxies);\n+      }\n+\n+      @Override\n+      public Iterable<Node> reverseNodes()\n+      {\n+        return () -> new ReverseArrayIterator<>(nodeProxies);\n+      }\n+\n+      @Override\n+      public int length()\n+      {\n+        return relationship.length;\n+      }\n+\n+      @Override\n+      public int hashCode()\n+      {\n+        if (relationship.length == 0)\n         {\n-            writeValue( newNodeProxyById( nodeId ) );\n-        }\n-    }\n-\n-    @Override\n-    public void writeVirtualNodeHack( Object node )\n-    {\n-        writeValue( node );\n-    }\n-\n-    @Override\n-    public void writeRelationshipReference( long relId ) throws RuntimeException\n-    {\n-        throw new UnsupportedOperationException( \"Cannot write a raw edge reference\" );\n-    }\n-\n-    @Override\n-    public void writeRelationship( long relId, long startNodeId, long endNodeId, TextValue type, MapValue properties )\n-            throws RuntimeException\n-    {\n-        if ( relId >= 0 )\n+          return startNode().hashCode();\n+        } else\n         {\n-            writeValue( newRelationshipProxyById( relId ) );\n+          return Arrays.hashCode(relationship);\n         }\n-    }\n-\n-    @Override\n-    public void writeVirtualRelationshipHack( Object relationship )\n-    {\n-        writeValue( relationship );\n-    }\n-\n-    @Override\n-    public void beginMap( int size ) throws RuntimeException\n-    {\n-        stack.push( new MapWriter( size ) );\n-    }\n-\n-    @Override\n-    public void endMap() throws RuntimeException\n-    {\n-        assert !stack.isEmpty();\n-        writeValue( stack.pop().value() );\n-    }\n-\n-    @Override\n-    public void beginList( int size ) throws RuntimeException\n-    {\n-        stack.push( new ListWriter( size ) );\n-    }\n-\n-    @Override\n-    public void endList() throws RuntimeException\n-    {\n-        assert !stack.isEmpty();\n-        writeValue( stack.pop().value() );\n-    }\n-\n-    @Override\n-    public void writePath( NodeValue[] nodes, RelationshipValue[] relationships ) throws RuntimeException\n-    {\n-        assert nodes != null;\n-        assert nodes.length > 0;\n-        assert relationships != null;\n-        assert nodes.length == relationships.length + 1;\n+      }\n \n-        Node[] nodeProxies = new Node[nodes.length];\n-        for ( int i = 0; i < nodes.length; i++ )\n-        {\n-            nodeProxies[i] = newNodeProxyById( nodes[i].id() );\n-        }\n-        Relationship[] relationship = new Relationship[relationships.length];\n-        for ( int i = 0; i < relationships.length; i++ )\n+      @Override\n+      public boolean equals(Object obj)\n+      {\n+        if (this == obj)\n         {\n-            relationship[i] = newRelationshipProxyById( relationships[i].id() );\n-        }\n-        writeValue( new Path()\n+          return true;\n+        } else if (obj instanceof Path)\n         {\n-            @Override\n-            public Node startNode()\n-            {\n-                return nodeProxies[0];\n-            }\n-\n-            @Override\n-            public Node endNode()\n-            {\n-                return nodeProxies[nodeProxies.length - 1];\n-            }\n-\n-            @Override\n-            public Relationship lastRelationship()\n-            {\n-                return relationship[relationship.length - 1];\n-            }\n-\n-            @Override\n-            public Iterable<Relationship> relationships()\n-            {\n-                return Arrays.asList( relationship );\n-            }\n+          Path other = (Path) obj;\n+          return startNode().equals(other.startNode()) &&\n+              iteratorsEqual(this.relationships().iterator(), other.relationships().iterator());\n \n-            @Override\n-            public Iterable<Relationship> reverseRelationships()\n-            {\n-                return () -> new ReverseArrayIterator<>( relationship );\n-            }\n-\n-            @Override\n-            public Iterable<Node> nodes()\n-            {\n-                return Arrays.asList( nodeProxies );\n-            }\n-\n-            @Override\n-            public Iterable<Node> reverseNodes()\n-            {\n-                return () -> new ReverseArrayIterator<>( nodeProxies );\n-            }\n-\n-            @Override\n-            public int length()\n-            {\n-                return relationship.length;\n-            }\n+        } else\n+        {\n+          return false;\n+        }\n+      }\n \n-            @Override\n-            public int hashCode()\n-            {\n-                if ( relationship.length == 0 )\n-                {\n-                    return startNode().hashCode();\n-                }\n-                else\n-                {\n-                    return Arrays.hashCode( relationship );\n-                }\n-            }\n+      @Override\n+      public Iterator<PropertyContainer> iterator()\n+      {\n+        return new Iterator<PropertyContainer>()\n+        {\n+          Iterator<? extends PropertyContainer> current = nodes().iterator();\n+          Iterator<? extends PropertyContainer> next = relationships().iterator();\n \n-            @Override\n-            public boolean equals( Object obj )\n-            {\n-                if ( this == obj )\n-                {\n-                    return true;\n-                }\n-                else if ( obj instanceof Path )\n-                {\n-                    Path other = (Path) obj;\n-                    return startNode().equals( other.startNode() ) &&\n-                           iteratorsEqual( this.relationships().iterator(), other.relationships().iterator() );\n-\n-                }\n-                else\n-                {\n-                    return false;\n-                }\n-            }\n+          public boolean hasNext()\n+          {\n+            return current.hasNext();\n+          }\n \n-            @Override\n-            public Iterator<PropertyContainer> iterator()\n+          public PropertyContainer next()\n+          {\n+            try\n             {\n-                return new Iterator<PropertyContainer>()\n-                {\n-                    Iterator<? extends PropertyContainer> current = nodes().iterator();\n-                    Iterator<? extends PropertyContainer> next = relationships().iterator();\n-\n-                    public boolean hasNext()\n-                    {\n-                        return current.hasNext();\n-                    }\n-\n-                    public PropertyContainer next()\n-                    {\n-                        try\n-                        {\n-                            return current.next();\n-                        }\n-                        finally\n-                        {\n-                            Iterator<? extends PropertyContainer> temp = current;\n-                            current = next;\n-                            next = temp;\n-                        }\n-                    }\n-\n-                    public void remove()\n-                    {\n-                        next.remove();\n-                    }\n-                };\n-            }\n-\n-            @Override\n-            public String toString()\n+              return current.next();\n+            } finally\n             {\n-                return Paths.defaultPathToStringWithNotInTransactionFallback( this );\n+              Iterator<? extends PropertyContainer> temp = current;\n+              current = next;\n+              next = temp;\n             }\n-        } );\n-    }\n-\n-    @Override\n-    public final void writePoint( CoordinateReferenceSystem crs, double[] coordinate )\n-    {\n-        writeValue( newPoint( crs, coordinate ) );\n-    }\n-\n-    @Override\n-    public void writeNull() throws RuntimeException\n-    {\n-        writeValue( null );\n-    }\n-\n-    @Override\n-    public void writeBoolean( boolean value ) throws RuntimeException\n-    {\n-        writeValue( value );\n-    }\n-\n-    @Override\n-    public void writeInteger( byte value ) throws RuntimeException\n-    {\n-        writeValue( value );\n-    }\n-\n-    @Override\n-    public void writeInteger( short value ) throws RuntimeException\n-    {\n-        writeValue( value );\n-    }\n-\n-    @Override\n-    public void writeInteger( int value ) throws RuntimeException\n-    {\n-        writeValue( value );\n-    }\n-\n-    @Override\n-    public void writeInteger( long value ) throws RuntimeException\n-    {\n-        writeValue( value );\n-    }\n-\n-    @Override\n-    public void writeFloatingPoint( float value ) throws RuntimeException\n-    {\n-        writeValue( value );\n-    }\n+          }\n+\n+          public void remove()\n+          {\n+            next.remove();\n+          }\n+        };\n+      }\n+\n+      @Override\n+      public String toString()\n+      {\n+        return Paths.defaultPathToStringWithNotInTransactionFallback(this);\n+      }\n+    });\n+  }\n+\n+  @Override\n+  public final void writePoint(CoordinateReferenceSystem crs, double[] coordinate)\n+  {\n+    writeValue(newPoint(crs, coordinate));\n+  }\n+\n+  @Override\n+  public void writeNull() throws RuntimeException\n+  {\n+    writeValue(null);\n+  }\n+\n+  @Override\n+  public void writeBoolean(boolean value) throws RuntimeException\n+  {\n+    writeValue(value);\n+  }\n+\n+  @Override\n+  public void writeInteger(byte value) throws RuntimeException\n+  {\n+    writeValue(value);\n+  }\n+\n+  @Override\n+  public void writeInteger(short value) throws RuntimeException\n+  {\n+    writeValue(value);\n+  }\n+\n+  @Override\n+  public void writeInteger(int value) throws RuntimeException\n+  {\n+    writeValue(value);\n+  }\n+\n+  @Override\n+  public void writeInteger(long value) throws RuntimeException\n+  {\n+    writeValue(value);\n+  }\n+\n+  @Override\n+  public void writeFloatingPoint(float value) throws RuntimeException\n+  {\n+    writeValue(value);\n+  }\n+\n+  @Override\n+  public void writeFloatingPoint(double value) throws RuntimeException\n+  {\n+    writeValue(value);\n+  }\n+\n+  @Override\n+  public void writeString(String value) throws RuntimeException\n+  {\n+    writeValue(value);\n+  }\n+\n+  @Override\n+  public void writeString(char value) throws RuntimeException\n+  {\n+    writeValue(value);\n+  }\n+\n+  @Override\n+  public void beginArray(int size, ArrayType arrayType) throws RuntimeException\n+  {\n+    stack.push(new ArrayWriter(size, arrayType));\n+  }\n+\n+  @Override\n+  public void endArray() throws RuntimeException\n+  {\n+    assert !stack.isEmpty();\n+    writeValue(stack.pop().value());\n+  }\n+\n+  @Override\n+  public void writeByteArray(byte[] value) throws RuntimeException\n+  {\n+    writeValue(value);\n+  }\n+\n+  @Override\n+  public void writeDuration(long months, long days, long seconds, int nanos)\n+  {\n+    writeValue(DurationValue.duration(months, days, seconds, nanos));\n+  }\n+\n+  @Override\n+  public void writeDate(LocalDate localDate) throws RuntimeException\n+  {\n+    writeValue(localDate);\n+  }\n+\n+  @Override\n+  public void writeLocalTime(LocalTime localTime) throws RuntimeException\n+  {\n+    writeValue(localTime);\n+  }\n+\n+  @Override\n+  public void writeTime(OffsetTime offsetTime) throws RuntimeException\n+  {\n+    writeValue(offsetTime);\n+  }\n+\n+  @Override\n+  public void writeLocalDateTime(LocalDateTime localDateTime) throws RuntimeException\n+  {\n+    writeValue(localDateTime);\n+  }\n+\n+  @Override\n+  public void writeDateTime(ZonedDateTime zonedDateTime) throws RuntimeException\n+  {\n+    writeValue(zonedDateTime);\n+  }\n+\n+  private interface Writer\n+  {\n+    void write(Object value);\n+\n+    Object value();\n+  }\n+\n+  private static class ObjectWriter implements Writer\n+  {\n+    private Object value;\n \n     @Override\n-    public void writeFloatingPoint( double value ) throws RuntimeException\n+    public void write(Object value)\n     {\n-        writeValue( value );\n+      this.value = value;\n     }\n \n     @Override\n-    public void writeString( String value ) throws RuntimeException\n+    public Object value()\n     {\n-        writeValue( value );\n+      return value;\n     }\n+  }\n \n-    @Override\n-    public void writeString( char value ) throws RuntimeException\n-    {\n-        writeValue( value );\n-    }\n+  private static class MapWriter implements Writer\n+  {\n+    private String key;\n+    private boolean isKey = true;\n+    private final HashMap<String, Object> map;\n \n-    @Override\n-    public void beginArray( int size, ArrayType arrayType ) throws RuntimeException\n+    MapWriter(int size)\n     {\n-        stack.push( new ArrayWriter( size, arrayType ) );\n+      this.map = new HashMap<>(size);\n     }\n \n     @Override\n-    public void endArray() throws RuntimeException\n+    public void write(Object value)\n     {\n-        assert !stack.isEmpty();\n-        writeValue( stack.pop().value() );\n+      if (isKey)\n+      {\n+        key = (String) value;\n+        isKey = false;\n+      } else\n+      {\n+        map.put(key, value);\n+        isKey = true;\n+      }\n     }\n \n     @Override\n-    public void writeByteArray( byte[] value ) throws RuntimeException\n+    public Object value()\n     {\n-        writeValue( value );\n+      return map;\n+    }\n+  }\n+\n+  private static class ArrayWriter implements Writer\n+  {\n+    protected final Object array;\n+    private int index;\n+\n+    ArrayWriter(int size, ArrayType arrayType)\n+    {\n+      switch (arrayType)\n+      {\n+        case SHORT:\n+          this.array = Array.newInstance(short.class, size);\n+          break;\n+        case INT:\n+          this.array = Array.newInstance(int.class, size);\n+          break;\n+        case BYTE:\n+          this.array = Array.newInstance(byte.class, size);\n+          break;\n+        case LONG:\n+          this.array = Array.newInstance(long.class, size);\n+          break;\n+        case FLOAT:\n+          this.array = Array.newInstance(float.class, size);\n+          break;\n+        case DOUBLE:\n+          this.array = Array.newInstance(double.class, size);\n+          break;\n+        case BOOLEAN:\n+          this.array = Array.newInstance(boolean.class, size);\n+          break;\n+        case STRING:\n+          this.array = Array.newInstance(String.class, size);\n+          break;\n+        case CHAR:\n+          this.array = Array.newInstance(char.class, size);\n+          break;\n+        default:\n+          this.array = new Object[size];\n+      }\n     }\n \n     @Override\n-    public void writeDuration( long months, long days, long seconds, int nanos )\n+    public void write(Object value)\n     {\n-        writeValue( DurationValue.duration( months, days, seconds, nanos ) );\n+      Array.set(array, index++, value);\n     }\n \n     @Override\n-    public void writeDate( LocalDate localDate ) throws RuntimeException\n+    public Object value()\n     {\n-        writeValue( localDate );\n+      return array;\n     }\n+  }\n \n-    @Override\n-    public void writeLocalTime( LocalTime localTime ) throws RuntimeException\n-    {\n-        writeValue( localTime );\n-    }\n+  private static class ListWriter implements Writer\n+  {\n+    private final List<Object> list;\n \n-    @Override\n-    public void writeTime( OffsetTime offsetTime ) throws RuntimeException\n+    ListWriter(int size)\n     {\n-        writeValue( offsetTime );\n+      this.list = new ArrayList<>(size);\n     }\n \n     @Override\n-    public void writeLocalDateTime( LocalDateTime localDateTime ) throws RuntimeException\n+    public void write(Object value)\n     {\n-        writeValue( localDateTime );\n+      list.add(value);\n     }\n \n     @Override\n-    public void writeDateTime( ZonedDateTime zonedDateTime ) throws RuntimeException\n-    {\n-        writeValue( zonedDateTime );\n-    }\n-\n-    private interface Writer\n-    {\n-        void write( Object value );\n-\n-        Object value();\n-    }\n-\n-    private static class ObjectWriter implements Writer\n-    {\n-        private Object value;\n-\n-        @Override\n-        public void write( Object value )\n-        {\n-            this.value = value;\n-        }\n-\n-        @Override\n-        public Object value()\n-        {\n-            return value;\n-        }\n-    }\n-\n-    private static class MapWriter implements Writer\n-    {\n-        private String key;\n-        private boolean isKey = true;\n-        private final HashMap<String,Object> map;\n-\n-        MapWriter( int size )\n-        {\n-            this.map = new HashMap<>( size );\n-        }\n-\n-        @Override\n-        public void write( Object value )\n-        {\n-            if ( isKey )\n-            {\n-                key = (String) value;\n-                isKey = false;\n-            }\n-            else\n-            {\n-                map.put( key, value );\n-                isKey = true;\n-            }\n-        }\n-\n-        @Override\n-        public Object value()\n-        {\n-            return map;\n-        }\n-    }\n-\n-    private static class ArrayWriter implements Writer\n-    {\n-        protected final Object array;\n-        private int index;\n-\n-        ArrayWriter( int size, ArrayType arrayType )\n-        {\n-            switch ( arrayType )\n-            {\n-            case SHORT:\n-                this.array = Array.newInstance( short.class, size );\n-                break;\n-            case INT:\n-                this.array = Array.newInstance( int.class, size );\n-                break;\n-            case BYTE:\n-                this.array = Array.newInstance( byte.class, size );\n-                break;\n-            case LONG:\n-                this.array = Array.newInstance( long.class, size );\n-                break;\n-            case FLOAT:\n-                this.array = Array.newInstance( float.class, size );\n-                break;\n-            case DOUBLE:\n-                this.array = Array.newInstance( double.class, size );\n-                break;\n-            case BOOLEAN:\n-                this.array = Array.newInstance( boolean.class, size );\n-                break;\n-            case STRING:\n-                this.array = Array.newInstance( String.class, size );\n-                break;\n-            case CHAR:\n-                this.array = Array.newInstance( char.class, size );\n-                break;\n-            default:\n-                this.array = new Object[size];\n-            }\n-        }\n-\n-        @Override\n-        public void write( Object value )\n-        {\n-            Array.set( array, index++, value );\n-        }\n-\n-        @Override\n-        public Object value()\n-        {\n-            return array;\n-        }\n-    }\n-\n-    private static class ListWriter implements Writer\n+    public Object value()\n     {\n-        private final List<Object> list;\n-\n-        ListWriter( int size )\n-        {\n-            this.list = new ArrayList<>( size );\n-        }\n-\n-        @Override\n-        public void write( Object value )\n-        {\n-            list.add( value );\n-        }\n-\n-        @Override\n-        public Object value()\n-        {\n-            return list;\n-        }\n+      return list;\n     }\n+  }\n }\n",
            "diff_size": 723
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "165",
                    "column": "28",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1734/BaseToObjectValueWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1734/BaseToObjectValueWriter.java\nindex a5c644bb6ca..c53a33be87b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1734/BaseToObjectValueWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1734/BaseToObjectValueWriter.java\n@@ -118,9 +118,8 @@ public abstract class BaseToObjectValueWriter<E extends Exception> implements An\n     }\n \n     @Override\n-    public void writeRelationship( long relId, long startNodeId, long endNodeId, TextValue type, MapValue properties )\n-            throws RuntimeException\n-    {\n+    public void writeRelationship( long relId, long startNodeId, long endNodeId, TextValue type, MapValue properties ) throws RuntimeException\n+{\n         if ( relId >= 0 )\n         {\n             writeValue( newRelationshipProxyById( relId ) );\n@@ -163,7 +162,7 @@ public abstract class BaseToObjectValueWriter<E extends Exception> implements An\n     public void writePath( NodeValue[] nodes, RelationshipValue[] relationships ) throws RuntimeException\n     {\n         assert nodes != null;\n-        assert nodes.length > 0;\n+        assert nodes.length> 0;\n         assert relationships != null;\n         assert nodes.length == relationships.length + 1;\n \n@@ -172,12 +171,14 @@ public abstract class BaseToObjectValueWriter<E extends Exception> implements An\n         {\n             nodeProxies[i] = newNodeProxyById( nodes[i].id() );\n         }\n-        Relationship[] relationship = new Relationship[relationships.length];\n+\n+Relationship[] relationship = new Relationship[relationships.length];\n         for ( int i = 0; i < relationships.length; i++ )\n         {\n             relationship[i] = newRelationshipProxyById( relationships[i].id() );\n         }\n-        writeValue( new Path()\n+\n+writeValue( new Path()\n         {\n             @Override\n             public Node startNode()\n@@ -250,10 +251,8 @@ public abstract class BaseToObjectValueWriter<E extends Exception> implements An\n                 else if ( obj instanceof Path )\n                 {\n                     Path other = (Path) obj;\n-                    return startNode().equals( other.startNode() ) &&\n-                           iteratorsEqual( this.relationships().iterator(), other.relationships().iterator() );\n-\n-                }\n+                    return startNode().equals( other.startNode() ) && iteratorsEqual( this.relationships().iterator(), other.relationships().iterator() );\n+    }\n                 else\n                 {\n                     return false;\n@@ -426,8 +425,7 @@ public abstract class BaseToObjectValueWriter<E extends Exception> implements An\n     private interface Writer\n     {\n         void write( Object value );\n-\n-        Object value();\n+Object value();\n     }\n \n     private static class ObjectWriter implements Writer\n@@ -555,4 +553,4 @@ public abstract class BaseToObjectValueWriter<E extends Exception> implements An\n             return list;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "64",
                    "column": "47",
                    "severity": "error",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "256",
                    "column": "59",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "432",
                    "column": "11",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1734/BaseToObjectValueWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/1734/BaseToObjectValueWriter.java\nindex a5c644bb6ca..198af5a4cd3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1734/BaseToObjectValueWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/1734/BaseToObjectValueWriter.java\n@@ -32,7 +32,6 @@ import java.util.Deque;\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n-\n import org.neo4j.graphdb.DatabaseShutdownException;\n import org.neo4j.graphdb.Node;\n import org.neo4j.graphdb.NotInTransactionException;\n@@ -50,7 +49,6 @@ import org.neo4j.values.storable.TextValue;\n import org.neo4j.values.virtual.MapValue;\n import org.neo4j.values.virtual.NodeValue;\n import org.neo4j.values.virtual.RelationshipValue;\n-\n import static org.neo4j.helpers.collection.Iterators.iteratorsEqual;\n \n /**\n@@ -62,7 +60,8 @@ import static org.neo4j.helpers.collection.Iterators.iteratorsEqual;\n  *\n  * @param <E> the exception thrown on error.\n  */\n-public abstract class BaseToObjectValueWriter<E extends Exception> implements AnyValueWriter<E>\n+\n+public abstract class BaseToObjectValueWriter <E extends Exception> implements AnyValueWriter<E>\n {\n     private final Deque<Writer> stack = new ArrayDeque<>();\n \n@@ -71,11 +70,14 @@ public abstract class BaseToObjectValueWriter<E extends Exception> implements An\n         stack.push( new ObjectWriter() );\n     }\n \n-    protected abstract Node newNodeProxyById( long id );\n+    protected abstract Node newNodeProxyById( long id )\n+    ;\n \n-    protected abstract Relationship newRelationshipProxyById( long id );\n+    protected abstract Relationship newRelationshipProxyById( long id )\n+    ;\n \n-    protected abstract Point newPoint( CoordinateReferenceSystem crs, double[] coordinate );\n+    protected abstract Point newPoint( CoordinateReferenceSystem crs, double[] coordinate )\n+    ;\n \n     public Object value()\n     {\n@@ -85,7 +87,7 @@ public abstract class BaseToObjectValueWriter<E extends Exception> implements An\n \n     private void writeValue( Object value )\n     {\n-        assert !stack.isEmpty();\n+        assert ! stack.isEmpty();\n         Writer head = stack.peek();\n         head.write( value );\n     }\n@@ -118,8 +120,7 @@ public abstract class BaseToObjectValueWriter<E extends Exception> implements An\n     }\n \n     @Override\n-    public void writeRelationship( long relId, long startNodeId, long endNodeId, TextValue type, MapValue properties )\n-            throws RuntimeException\n+    public void writeRelationship( long relId, long startNodeId, long endNodeId, TextValue type, MapValue properties ) throws RuntimeException\n     {\n         if ( relId >= 0 )\n         {\n@@ -142,7 +143,7 @@ public abstract class BaseToObjectValueWriter<E extends Exception> implements An\n     @Override\n     public void endMap() throws RuntimeException\n     {\n-        assert !stack.isEmpty();\n+        assert ! stack.isEmpty();\n         writeValue( stack.pop().value() );\n     }\n \n@@ -155,7 +156,7 @@ public abstract class BaseToObjectValueWriter<E extends Exception> implements An\n     @Override\n     public void endList() throws RuntimeException\n     {\n-        assert !stack.isEmpty();\n+        assert ! stack.isEmpty();\n         writeValue( stack.pop().value() );\n     }\n \n@@ -166,140 +167,141 @@ public abstract class BaseToObjectValueWriter<E extends Exception> implements An\n         assert nodes.length > 0;\n         assert relationships != null;\n         assert nodes.length == relationships.length + 1;\n-\n         Node[] nodeProxies = new Node[nodes.length];\n         for ( int i = 0; i < nodes.length; i++ )\n         {\n-            nodeProxies[i] = newNodeProxyById( nodes[i].id() );\n+            nodeProxies[i] = newNodeProxyById( nodes[ i].id() );\n         }\n+\n         Relationship[] relationship = new Relationship[relationships.length];\n         for ( int i = 0; i < relationships.length; i++ )\n         {\n-            relationship[i] = newRelationshipProxyById( relationships[i].id() );\n+            relationship[i] = newRelationshipProxyById( relationships[ i].id() );\n         }\n+\n         writeValue( new Path()\n-        {\n-            @Override\n-            public Node startNode()\n-            {\n-                return nodeProxies[0];\n-            }\n+{\n+    @Override\n+    public Node startNode()\n+    {\n+        return nodeProxies[ 0];\n+    }\n \n-            @Override\n-            public Node endNode()\n-            {\n-                return nodeProxies[nodeProxies.length - 1];\n-            }\n+    @Override\n+    public Node endNode()\n+    {\n+        return nodeProxies[ nodeProxies.length - 1];\n+    }\n \n-            @Override\n-            public Relationship lastRelationship()\n-            {\n-                return relationship[relationship.length - 1];\n-            }\n+    @Override\n+    public Relationship lastRelationship()\n+    {\n+        return relationship[ relationship.length - 1];\n+    }\n \n-            @Override\n-            public Iterable<Relationship> relationships()\n-            {\n-                return Arrays.asList( relationship );\n-            }\n+    @Override\n+    public Iterable<Relationship> relationships()\n+    {\n+        return Arrays.asList( relationship );\n+    }\n \n-            @Override\n-            public Iterable<Relationship> reverseRelationships()\n-            {\n-                return () -> new ReverseArrayIterator<>( relationship );\n-            }\n+    @Override\n+    public Iterable<Relationship> reverseRelationships()\n+    {\n+        return () -> new ReverseArrayIterator<>( relationship );\n+    }\n \n-            @Override\n-            public Iterable<Node> nodes()\n-            {\n-                return Arrays.asList( nodeProxies );\n-            }\n+    @Override\n+    public Iterable<Node> nodes()\n+    {\n+        return Arrays.asList( nodeProxies );\n+    }\n \n-            @Override\n-            public Iterable<Node> reverseNodes()\n-            {\n-                return () -> new ReverseArrayIterator<>( nodeProxies );\n-            }\n+    @Override\n+    public Iterable<Node> reverseNodes()\n+    {\n+        return () -> new ReverseArrayIterator<>( nodeProxies );\n+    }\n \n-            @Override\n-            public int length()\n-            {\n-                return relationship.length;\n-            }\n+    @Override\n+    public int length()\n+    {\n+        return relationship.length;\n+    }\n \n-            @Override\n-            public int hashCode()\n-            {\n-                if ( relationship.length == 0 )\n-                {\n-                    return startNode().hashCode();\n-                }\n-                else\n-                {\n-                    return Arrays.hashCode( relationship );\n-                }\n-            }\n+    @Override\n+    public int hashCode()\n+    {\n+        if ( relationship.length == 0 )\n+        {\n+            return startNode().hashCode();\n+        }\n+        else\n+        {\n+            return Arrays.hashCode( relationship );\n+        }\n+    }\n \n-            @Override\n-            public boolean equals( Object obj )\n-            {\n-                if ( this == obj )\n-                {\n-                    return true;\n-                }\n-                else if ( obj instanceof Path )\n-                {\n-                    Path other = (Path) obj;\n-                    return startNode().equals( other.startNode() ) &&\n-                           iteratorsEqual( this.relationships().iterator(), other.relationships().iterator() );\n-\n-                }\n-                else\n-                {\n-                    return false;\n-                }\n-            }\n+    @Override\n+    public boolean equals( Object obj )\n+    {\n+        if ( this == obj )\n+        {\n+            return true;\n+        }\n+        else\n+        if ( obj instanceof Path )\n+        {\n+            Path other = (Path) obj;\n+            return startNode().equals( other.startNode() )&& iteratorsEqual( this.relationships().iterator(), other.relationships().iterator() );\n+        }\n+        else\n+        {\n+            return false;\n+        }\n+    }\n \n-            @Override\n-            public Iterator<PropertyContainer> iterator()\n-            {\n-                return new Iterator<PropertyContainer>()\n-                {\n-                    Iterator<? extends PropertyContainer> current = nodes().iterator();\n-                    Iterator<? extends PropertyContainer> next = relationships().iterator();\n-\n-                    public boolean hasNext()\n-                    {\n-                        return current.hasNext();\n-                    }\n-\n-                    public PropertyContainer next()\n-                    {\n-                        try\n-                        {\n-                            return current.next();\n-                        }\n-                        finally\n-                        {\n-                            Iterator<? extends PropertyContainer> temp = current;\n-                            current = next;\n-                            next = temp;\n-                        }\n-                    }\n-\n-                    public void remove()\n-                    {\n-                        next.remove();\n-                    }\n-                };\n-            }\n+    @Override\n+    public Iterator<PropertyContainer> iterator()\n+    {\n+        return new Iterator<PropertyContainer>()\n+{\n+    Iterator<? extends PropertyContainer> current = nodes().iterator();\n \n-            @Override\n-            public String toString()\n-            {\n-                return Paths.defaultPathToStringWithNotInTransactionFallback( this );\n-            }\n-        } );\n+    Iterator<? extends PropertyContainer> next = relationships().iterator();\n+\n+    public boolean hasNext()\n+    {\n+        return current.hasNext();\n+    }\n+\n+    public PropertyContainer next()\n+    {\n+        try\n+        {\n+            return current.next();\n+        }\n+        finally\n+        {\n+            Iterator<? extends PropertyContainer> temp = current;\n+            current = next;\n+            next = temp;\n+        }\n+    }\n+\n+    public void remove()\n+    {\n+        next.remove();\n+    }\n+};\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+        return Paths.defaultPathToStringWithNotInTransactionFallback( this );\n+    }\n+} );\n     }\n \n     @Override\n@@ -377,7 +379,7 @@ public abstract class BaseToObjectValueWriter<E extends Exception> implements An\n     @Override\n     public void endArray() throws RuntimeException\n     {\n-        assert !stack.isEmpty();\n+        assert ! stack.isEmpty();\n         writeValue( stack.pop().value() );\n     }\n \n@@ -425,15 +427,13 @@ public abstract class BaseToObjectValueWriter<E extends Exception> implements An\n \n     private interface Writer\n     {\n-        void write( Object value );\n-\n-        Object value();\n-    }\n+        void write( Object value )\n+        ; Object value()\n+          ; }\n \n     private static class ObjectWriter implements Writer\n     {\n         private Object value;\n-\n         @Override\n         public void write( Object value )\n         {\n@@ -524,7 +524,7 @@ public abstract class BaseToObjectValueWriter<E extends Exception> implements An\n         @Override\n         public void write( Object value )\n         {\n-            Array.set( array, index++, value );\n+            Array.set( array, index ++, value );\n         }\n \n         @Override\n@@ -555,4 +555,4 @@ public abstract class BaseToObjectValueWriter<E extends Exception> implements An\n             return list;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 167
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}