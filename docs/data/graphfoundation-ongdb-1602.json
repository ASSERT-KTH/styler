{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1602",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "41",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1602/NodeSchemaMatcher.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1602/NodeSchemaMatcher.java\nindex 7ce721e99bb..b18b206aeb5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1602/NodeSchemaMatcher.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1602/NodeSchemaMatcher.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.newapi;\n \n \n@@ -35,72 +36,72 @@ import org.neo4j.internal.kernel.api.schema.SchemaDescriptorSupplier;\n  */\n public class NodeSchemaMatcher\n {\n-    private NodeSchemaMatcher()\n-    {\n-        throw new AssertionError( \"no instance\" );\n-    }\n+  private NodeSchemaMatcher()\n+  {\n+    throw new AssertionError(\"no instance\");\n+  }\n \n-    /**\n-     * Iterate over some schema suppliers, and invoke a callback for every supplier that matches the node. To match the\n-     * node N the supplier must supply a LabelSchemaDescriptor D, such that N has the label of D, and values for all\n-     * the properties of D.\n-     * <p>\n-     * To avoid unnecessary store lookups, this implementation only gets propertyKeyIds for the node if some\n-     * descriptor has a valid label.\n-     *\n-     * @param <SUPPLIER> the type to match. Must implement SchemaDescriptorSupplier\n-     * @param <EXCEPTION> The type of exception that can be thrown when taking the action\n-     * @param schemaSuppliers The suppliers to match\n-     * @param node The node cursor\n-     * @param property The property cursor\n-     * @param specialPropertyId This property id will always count as a match for the descriptor, regardless of\n-     * whether the node has this property or not\n-     * @param callback The action to take on match\n-     * @throws EXCEPTION This exception is propagated from the action\n-     */\n-    static <SUPPLIER extends SchemaDescriptorSupplier, EXCEPTION extends Exception> void onMatchingSchema(\n-            Iterator<SUPPLIER> schemaSuppliers,\n-            NodeCursor node,\n-            PropertyCursor property,\n-            int specialPropertyId,\n-            ThrowingBiConsumer<SUPPLIER,PrimitiveIntSet,EXCEPTION> callback\n-    ) throws EXCEPTION\n+  /**\n+   * Iterate over some schema suppliers, and invoke a callback for every supplier that matches the node. To match the\n+   * node N the supplier must supply a LabelSchemaDescriptor D, such that N has the label of D, and values for all\n+   * the properties of D.\n+   * <p>\n+   * To avoid unnecessary store lookups, this implementation only gets propertyKeyIds for the node if some\n+   * descriptor has a valid label.\n+   *\n+   * @param <SUPPLIER>        the type to match. Must implement SchemaDescriptorSupplier\n+   * @param <EXCEPTION>       The type of exception that can be thrown when taking the action\n+   * @param schemaSuppliers   The suppliers to match\n+   * @param node              The node cursor\n+   * @param property          The property cursor\n+   * @param specialPropertyId This property id will always count as a match for the descriptor, regardless of\n+   *                          whether the node has this property or not\n+   * @param callback          The action to take on match\n+   * @throws EXCEPTION This exception is propagated from the action\n+   */\n+  static <SUPPLIER extends SchemaDescriptorSupplier, EXCEPTION extends Exception> void onMatchingSchema(\n+      Iterator<SUPPLIER> schemaSuppliers,\n+      NodeCursor node,\n+      PropertyCursor property,\n+      int specialPropertyId,\n+      ThrowingBiConsumer<SUPPLIER, PrimitiveIntSet, EXCEPTION> callback\n+  ) throws EXCEPTION\n+  {\n+    PrimitiveIntSet nodePropertyIds = null;\n+    while (schemaSuppliers.hasNext())\n     {\n-        PrimitiveIntSet nodePropertyIds = null;\n-        while ( schemaSuppliers.hasNext() )\n+      SUPPLIER schemaSupplier = schemaSuppliers.next();\n+      SchemaDescriptor schema = schemaSupplier.schema();\n+      if (node.labels().contains(schema.keyId()))\n+      {\n+        if (nodePropertyIds == null)\n         {\n-            SUPPLIER schemaSupplier = schemaSuppliers.next();\n-            SchemaDescriptor schema = schemaSupplier.schema();\n-            if ( node.labels().contains( schema.keyId() ) )\n-            {\n-                if ( nodePropertyIds == null )\n-                {\n-                    nodePropertyIds = Primitive.intSet();\n-                    node.properties( property );\n-                    while ( property.next() )\n-                    {\n-                        nodePropertyIds.add( property.propertyKey() );\n-                    }\n-                }\n+          nodePropertyIds = Primitive.intSet();\n+          node.properties(property);\n+          while (property.next())\n+          {\n+            nodePropertyIds.add(property.propertyKey());\n+          }\n+        }\n \n-                if ( nodeHasSchemaProperties( nodePropertyIds, schema.getPropertyIds(), specialPropertyId ) )\n-                {\n-                    callback.accept( schemaSupplier, nodePropertyIds );\n-                }\n-            }\n+        if (nodeHasSchemaProperties(nodePropertyIds, schema.getPropertyIds(), specialPropertyId))\n+        {\n+          callback.accept(schemaSupplier, nodePropertyIds);\n         }\n+      }\n     }\n+  }\n \n-    private static boolean nodeHasSchemaProperties(\n-            PrimitiveIntSet nodeProperties, int[] indexPropertyIds, int changedPropertyId )\n+  private static boolean nodeHasSchemaProperties(\n+      PrimitiveIntSet nodeProperties, int[] indexPropertyIds, int changedPropertyId)\n+  {\n+    for (int indexPropertyId : indexPropertyIds)\n     {\n-        for ( int indexPropertyId : indexPropertyIds )\n-        {\n-            if ( indexPropertyId != changedPropertyId && !nodeProperties.contains( indexPropertyId ) )\n-            {\n-                return false;\n-            }\n-        }\n-        return true;\n+      if (indexPropertyId != changedPropertyId && !nodeProperties.contains(indexPropertyId))\n+      {\n+        return false;\n+      }\n     }\n+    return true;\n+  }\n }\n",
            "diff_size": 72
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1602/NodeSchemaMatcher.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1602/NodeSchemaMatcher.java\nindex 7ce721e99bb..9445132dbd2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1602/NodeSchemaMatcher.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1602/NodeSchemaMatcher.java\n@@ -18,8 +18,6 @@\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n package org.neo4j.kernel.impl.newapi;\n-\n-\n import java.util.Iterator;\n \n import org.neo4j.collection.primitive.Primitive;\n@@ -58,13 +56,9 @@ public class NodeSchemaMatcher\n      * @param callback The action to take on match\n      * @throws EXCEPTION This exception is propagated from the action\n      */\n-    static <SUPPLIER extends SchemaDescriptorSupplier, EXCEPTION extends Exception> void onMatchingSchema(\n-            Iterator<SUPPLIER> schemaSuppliers,\n+    static <SUPPLIER extends SchemaDescriptorSupplier, EXCEPTION extends Exception> void onMatchingSchema( Iterator<SUPPLIER> schemaSuppliers,\n             NodeCursor node,\n-            PropertyCursor property,\n-            int specialPropertyId,\n-            ThrowingBiConsumer<SUPPLIER,PrimitiveIntSet,EXCEPTION> callback\n-    ) throws EXCEPTION\n+            PropertyCursor property, int specialPropertyId, ThrowingBiConsumer<SUPPLIER,PrimitiveIntSet,EXCEPTION> callback ) throws EXCEPTION\n     {\n         PrimitiveIntSet nodePropertyIds = null;\n         while ( schemaSuppliers.hasNext() )\n@@ -91,8 +85,7 @@ public class NodeSchemaMatcher\n         }\n     }\n \n-    private static boolean nodeHasSchemaProperties(\n-            PrimitiveIntSet nodeProperties, int[] indexPropertyIds, int changedPropertyId )\n+    private static boolean nodeHasSchemaProperties( PrimitiveIntSet nodeProperties, int[] indexPropertyIds, int changedPropertyId )\n     {\n         for ( int indexPropertyId : indexPropertyIds )\n         {\n@@ -103,4 +96,4 @@ public class NodeSchemaMatcher\n         }\n         return true;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}