{
    "project_name": "opencb-opencga",
    "error_id": "110",
    "information": {
        "errors": [
            {
                "line": "202",
                "severity": "error",
                "message": "Line is longer than 140 characters (found 142).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                }\n\n                variantQcMetrics.getVariantStats().add(new SampleQcVariantStats(variantStatsId, variantStatsDecription, query, stats.get(0)));\n            }\n        }\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "202",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/110/SampleQcAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/110/SampleQcAnalysis.java\nindex 7fb80f57256..a79ba4abab1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/110/SampleQcAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/110/SampleQcAnalysis.java\n@@ -59,287 +59,287 @@ import static org.opencb.opencga.core.models.study.StudyAclEntry.StudyPermission\n @Tool(id = SampleQcAnalysis.ID, resource = Enums.Resource.SAMPLE, description = SampleQcAnalysis.DESCRIPTION)\n public class SampleQcAnalysis extends OpenCgaToolScopeStudy {\n \n-    public static final String ID = \"sample-qc\";\n-    public static final String DESCRIPTION = \"Run quality control (QC) for a given sample. It includes variant stats and Circos plot; and \"\n-        + \" for somatic samples, mutational signature.\";\n-\n-    public  static final String VARIANT_STATS_STEP = \"variant-stats\";\n-    public  static final String CIRCOS_PLOT_STEP = \"circos-plot\";\n-    public  static final String MUTATIONAL_SIGNATURE_STEP = \"mutational-signature\";\n-\n-    private String studyId;\n-    private String sampleId;\n-    private String variantStatsId;\n-    private String variantStatsDecription;\n-    private Query variantStatsQuery;\n-    private String signatureId;\n-    private Query signatureQuery;\n+  public static final String ID = \"sample-qc\";\n+  public static final String DESCRIPTION = \"Run quality control (QC) for a given sample. It includes variant stats and Circos plot; and \"\n+      + \" for somatic samples, mutational signature.\";\n+\n+  public static final String VARIANT_STATS_STEP = \"variant-stats\";\n+  public static final String CIRCOS_PLOT_STEP = \"circos-plot\";\n+  public static final String MUTATIONAL_SIGNATURE_STEP = \"mutational-signature\";\n+\n+  private String studyId;\n+  private String sampleId;\n+  private String variantStatsId;\n+  private String variantStatsDecription;\n+  private Query variantStatsQuery;\n+  private String signatureId;\n+  private Query signatureQuery;\n //    private Query circosQuery;\n //    private List<String> signatureQuery;\n \n-    private Sample sample;\n-    private SampleVariantQualityControlMetrics variantQcMetrics;\n-    private Job variantStatsJob = null;\n-    private Job signatureJob = null;\n-    private Job circosJob = null;\n+  private Sample sample;\n+  private SampleVariantQualityControlMetrics variantQcMetrics;\n+  private Job variantStatsJob = null;\n+  private Job signatureJob = null;\n+  private Job circosJob = null;\n \n-    @Override\n-    protected void check() throws Exception {\n-        super.check();\n-        this.studyId = getStudyFqn();\n-        setUpStorageEngineExecutor(studyId);\n+  @Override\n+  protected void check() throws Exception {\n+    super.check();\n+    this.studyId = getStudyFqn();\n+    setUpStorageEngineExecutor(studyId);\n \n-        if (StringUtils.isEmpty(studyId)) {\n-            throw new ToolException(\"Missing study ID.\");\n-        }\n-\n-        // Check permissions\n-        try {\n-            Study study = catalogManager.getStudyManager().get(studyId, QueryOptions.empty(), token).first();\n-            String userId = catalogManager.getUserManager().getUserId(token);\n-            catalogManager.getAuthorizationManager().checkStudyPermission(study.getUid(), userId, WRITE_SAMPLES);\n-        } catch (CatalogException e) {\n-            throw new ToolException(e);\n-        }\n-\n-        // Sanity check\n-        if (StringUtils.isEmpty(sampleId)) {\n-            throw new ToolException(\"Missing sample ID.\");\n-        }\n-\n-        sample = IndividualQcUtils.getValidSampleById(studyId, sampleId, catalogManager, token);\n-        if (sample == null) {\n-            throw new ToolException(\"Sample '\" + sampleId + \"' not found.\");\n-        }\n+    if (StringUtils.isEmpty(studyId)) {\n+      throw new ToolException(\"Missing study ID.\");\n     }\n \n-    @Override\n-    protected List<String> getSteps() {\n-        return Arrays.asList(VARIANT_STATS_STEP, CIRCOS_PLOT_STEP, MUTATIONAL_SIGNATURE_STEP);\n+    // Check permissions\n+    try {\n+      Study study = catalogManager.getStudyManager().get(studyId, QueryOptions.empty(), token).first();\n+      String userId = catalogManager.getUserManager().getUserId(token);\n+      catalogManager.getAuthorizationManager().checkStudyPermission(study.getUid(), userId, WRITE_SAMPLES);\n+    } catch (CatalogException e) {\n+      throw new ToolException(e);\n     }\n \n-    @Override\n-    protected void run() throws ToolException {\n-\n-        // Get job dependencies\n-        try {\n-            OpenCGAResult<Job> jobResult = catalogManager.getJobManager().get(studyId, getJobId(), QueryOptions.empty(), token);\n-            Job job = jobResult.first();\n-            if (CollectionUtils.isNotEmpty(job.getDependsOn())) {\n-                for (Job dependsOnJob : job.getDependsOn()) {\n-                    if (dependsOnJob.getId().startsWith(SampleVariantStatsAnalysis.ID)) {\n-                        variantStatsJob = catalogManager.getJobManager().get(studyId, dependsOnJob.getId(), QueryOptions.empty(), token)\n-                                .first();\n-                    } else if (dependsOnJob.getId().startsWith(MutationalSignatureAnalysis.ID)) {\n-                        signatureJob = catalogManager.getJobManager().get(studyId, dependsOnJob.getId(), QueryOptions.empty(), token)\n-                                .first();\n-                    } else if (dependsOnJob.getId().startsWith(CircosAnalysis.ID)) {\n-                        circosJob = catalogManager.getJobManager().get(studyId, dependsOnJob.getId(), QueryOptions.empty(), token).first();\n-                    }\n-                }\n-            }\n-        } catch (CatalogException e) {\n-            throw new ToolException(e);\n-        }\n-\n-        // Get sample quality control metrics to update\n-        variantQcMetrics = sample.getQualityControl().getVariantMetrics();\n-\n-        SampleQcAnalysisExecutor executor = getToolExecutor(SampleQcAnalysisExecutor.class);\n-\n-        // Set up executor\n-        executor.setStudyId(studyId)\n-                .setSample(sample)\n-                .setVariantStatsId(variantStatsId)\n-                .setVariantStatsDecription(variantStatsDecription)\n-                .setVariantStatsQuery(variantStatsQuery)\n-                .setSignatureId(signatureId)\n-                .setSignatureQuery(signatureQuery);\n-\n-        // Step by step\n-        step(VARIANT_STATS_STEP, () -> runVariantStats());\n-        step(CIRCOS_PLOT_STEP, () -> runCircosPlot());\n-        step(MUTATIONAL_SIGNATURE_STEP, () -> runSignature());\n-\n-        // Finally, update sample quality control metrics\n-        try {\n-            sample.getQualityControl().setVariantMetrics(variantQcMetrics);\n-            catalogManager.getSampleManager().update(studyId, getSampleId(),\n-                    new SampleUpdateParams().setQualityControl(sample.getQualityControl()), QueryOptions.empty(), token);\n-        } catch (CatalogException e) {\n-            throw new ToolException(e);\n-        }\n+    // Sanity check\n+    if (StringUtils.isEmpty(sampleId)) {\n+      throw new ToolException(\"Missing sample ID.\");\n     }\n \n-    private void runVariantStats() throws ToolException {\n-        if (variantStatsJob == null) {\n-            addWarning(\"Skipping sample variant stats\");\n-        } else {\n-            Path path = Paths.get(variantStatsJob.getOutDir().getUri().getPath()).resolve(\"sample-variant-stats.json\");\n-            if (path.toFile().exists()) {\n-                if (variantQcMetrics.getVariantStats() == null) {\n-                    variantQcMetrics.setVariantStats(new ArrayList<>());\n-                }\n-\n-                List<SampleVariantStats> stats = new ArrayList<>();\n-                try {\n-                    JacksonUtils.getDefaultObjectMapper()\n-                            .readerFor(SampleVariantStats.class)\n-                            .<SampleVariantStats>readValues(path.toFile())\n-                            .forEachRemaining(stats::add);\n-                } catch (IOException e) {\n-                    throw new ToolException(e);\n-                }\n-\n-                // Convert variant stats query to a map, and then add to metrics\n-                Map<String, String> query = new HashMap<>();\n-                Iterator<String> iterator = variantStatsQuery.keySet().iterator();\n-                while (iterator.hasNext()) {\n-                    String key = iterator.next();\n-                    query.put(key, variantStatsQuery.getString(key));\n-                }\n-\n-                variantQcMetrics.getVariantStats().add(new SampleQcVariantStats(variantStatsId, variantStatsDecription, query, stats.get(0)));\n-            }\n-        }\n+    sample = IndividualQcUtils.getValidSampleById(studyId, sampleId, catalogManager, token);\n+    if (sample == null) {\n+      throw new ToolException(\"Sample '\" + sampleId + \"' not found.\");\n     }\n-\n-    private void runSignature() throws ToolException {\n-        if (!sample.isSomatic()) {\n-            addWarning(\"Skipping mutational signature: sample '\" + sampleId + \" is not somatic\");\n-            return;\n+  }\n+\n+  @Override\n+  protected List<String> getSteps() {\n+    return Arrays.asList(VARIANT_STATS_STEP, CIRCOS_PLOT_STEP, MUTATIONAL_SIGNATURE_STEP);\n+  }\n+\n+  @Override\n+  protected void run() throws ToolException {\n+\n+    // Get job dependencies\n+    try {\n+      OpenCGAResult<Job> jobResult = catalogManager.getJobManager().get(studyId, getJobId(), QueryOptions.empty(), token);\n+      Job job = jobResult.first();\n+      if (CollectionUtils.isNotEmpty(job.getDependsOn())) {\n+        for (Job dependsOnJob : job.getDependsOn()) {\n+          if (dependsOnJob.getId().startsWith(SampleVariantStatsAnalysis.ID)) {\n+            variantStatsJob = catalogManager.getJobManager().get(studyId, dependsOnJob.getId(), QueryOptions.empty(), token)\n+                .first();\n+          } else if (dependsOnJob.getId().startsWith(MutationalSignatureAnalysis.ID)) {\n+            signatureJob = catalogManager.getJobManager().get(studyId, dependsOnJob.getId(), QueryOptions.empty(), token)\n+                .first();\n+          } else if (dependsOnJob.getId().startsWith(CircosAnalysis.ID)) {\n+            circosJob = catalogManager.getJobManager().get(studyId, dependsOnJob.getId(), QueryOptions.empty(), token).first();\n+          }\n         }\n+      }\n+    } catch (CatalogException e) {\n+      throw new ToolException(e);\n+    }\n \n-        // mutationalSignature/run\n-        if (signatureJob != null) {\n-            Path path = Paths.get(signatureJob.getOutDir().getUri().getPath()).resolve(CONTEXT_FILENAME);\n-            if (path.toFile().exists()) {\n-                Signature.SignatureCount[] signatureCounts = MutationalSignatureAnalysis.parseSignatureCounts(path.toFile());\n-\n-                // Add to metrics\n-                variantQcMetrics.getSignatures().add(new Signature(\"ALL\", new HashMap<>(), \"SNV\", signatureCounts, new ArrayList()));\n-            }\n+    // Get sample quality control metrics to update\n+    variantQcMetrics = sample.getQualityControl().getVariantMetrics();\n+\n+    SampleQcAnalysisExecutor executor = getToolExecutor(SampleQcAnalysisExecutor.class);\n+\n+    // Set up executor\n+    executor.setStudyId(studyId)\n+        .setSample(sample)\n+        .setVariantStatsId(variantStatsId)\n+        .setVariantStatsDecription(variantStatsDecription)\n+        .setVariantStatsQuery(variantStatsQuery)\n+        .setSignatureId(signatureId)\n+        .setSignatureQuery(signatureQuery);\n+\n+    // Step by step\n+    step(VARIANT_STATS_STEP, () -> runVariantStats());\n+    step(CIRCOS_PLOT_STEP, () -> runCircosPlot());\n+    step(MUTATIONAL_SIGNATURE_STEP, () -> runSignature());\n+\n+    // Finally, update sample quality control metrics\n+    try {\n+      sample.getQualityControl().setVariantMetrics(variantQcMetrics);\n+      catalogManager.getSampleManager().update(studyId, getSampleId(),\n+          new SampleUpdateParams().setQualityControl(sample.getQualityControl()), QueryOptions.empty(), token);\n+    } catch (CatalogException e) {\n+      throw new ToolException(e);\n+    }\n+  }\n+\n+  private void runVariantStats() throws ToolException {\n+    if (variantStatsJob == null) {\n+      addWarning(\"Skipping sample variant stats\");\n+    } else {\n+      Path path = Paths.get(variantStatsJob.getOutDir().getUri().getPath()).resolve(\"sample-variant-stats.json\");\n+      if (path.toFile().exists()) {\n+        if (variantQcMetrics.getVariantStats() == null) {\n+          variantQcMetrics.setVariantStats(new ArrayList<>());\n         }\n \n-        // mutationalSignature/query\n-        if (StringUtils.isNotEmpty(signatureId) && signatureQuery != null && !signatureQuery.isEmpty()) {\n-            // Create signature directory\n-            Path signaturePath = getOutDir().resolve(\"mutational-signature\");\n-            signaturePath.toFile().mkdir();\n-\n-            MutationalSignatureLocalAnalysisExecutor executor = new MutationalSignatureLocalAnalysisExecutor();\n-            ObjectMap executorParams = new ObjectMap();\n-            executorParams.put(\"opencgaHome\", getOpencgaHome().toString());\n-            executorParams.put(\"token\", token);\n-            executorParams.put(\"fitting\", false);\n-            executor.setUp(null, executorParams, signaturePath);\n-            executor.setStudy(studyId);\n-            executor.setSampleName(sampleId);\n-\n-            try {\n-                signatureQuery.put(\"study\", studyId);\n-                signatureQuery.put(\"sample\", sampleId);\n-                MutationalSignature mutationalSignature = executor.query(signatureQuery, QueryOptions.empty());\n-\n-                // Add signature to metrics\n-                Map<String, String> map = new HashMap<>();\n-                for (String key : signatureQuery.keySet()) {\n-                    map.put(key, signatureQuery.getString(key));\n-                }\n-                variantQcMetrics.getSignatures().add(new Signature(signatureId, map, \"SNV\", mutationalSignature.getSignature().getCounts(),\n-                        new ArrayList()));\n-            } catch (CatalogException | StorageEngineException | IOException e) {\n-                throw new ToolException(\"Error computing mutational signature for query '\" + signatureId + \"'\", e);\n-            }\n-        } else {\n-            addWarning(\"Skipping mutational signature: invalid parameters signature ID ('\" + signatureId + \"') and signature query('\"\n-                    + signatureQuery + \"')\");\n+        List<SampleVariantStats> stats = new ArrayList<>();\n+        try {\n+          JacksonUtils.getDefaultObjectMapper()\n+              .readerFor(SampleVariantStats.class)\n+              .<SampleVariantStats>readValues(path.toFile())\n+              .forEachRemaining(stats::add);\n+        } catch (IOException e) {\n+          throw new ToolException(e);\n         }\n-    }\n \n-    private void runCircosPlot() throws ToolException {\n-        if (circosJob == null) {\n-            addWarning(\"Skipping Circos plot\");\n-        } else {\n-\n-            try {\n-                List<Path> paths = Files.list(Paths.get(circosJob.getOutDir().getUri().getPath())).collect(Collectors.toList());\n-                for (Path path : paths) {\n-                    if (path.getFileName().endsWith(CircosAnalysis.SUFFIX_FILENAME)) {\n-                        int index = path.toFile().getAbsolutePath().indexOf(\"JOBS/\");\n-                        String relativeFilePath = (index == -1\n-                                ? path.toFile().getName()\n-                                : path.toFile().getAbsolutePath().substring(index));\n-                        CircosPlot circosPlot = new CircosPlot(circosJob.getId(), null, relativeFilePath);\n-                        if (variantQcMetrics.getCircosPlots() == null) {\n-                            variantQcMetrics.setCircosPlots(new ArrayList<>());\n-                        }\n-                        variantQcMetrics.getCircosPlots().add(circosPlot);\n-                        break;\n-                    }\n-                }\n-            } catch (IOException e) {\n-                throw new ToolException(e);\n-            }\n+        // Convert variant stats query to a map, and then add to metrics\n+        Map<String, String> query = new HashMap<>();\n+        Iterator<String> iterator = variantStatsQuery.keySet().iterator();\n+        while (iterator.hasNext()) {\n+          String key = iterator.next();\n+          query.put(key, variantStatsQuery.getString(key));\n         }\n-    }\n \n-    public SampleQcAnalysis setStudyId(String studyId) {\n-        super.setStudy(studyId);\n-        return this;\n+        variantQcMetrics.getVariantStats().add(new SampleQcVariantStats(variantStatsId, variantStatsDecription, query, stats.get(0)));\n+      }\n     }\n+  }\n \n-    public String getSampleId() {\n-        return sampleId;\n+  private void runSignature() throws ToolException {\n+    if (!sample.isSomatic()) {\n+      addWarning(\"Skipping mutational signature: sample '\" + sampleId + \" is not somatic\");\n+      return;\n     }\n \n-    public SampleQcAnalysis setSampleId(String sampleId) {\n-        this.sampleId = sampleId;\n-        return this;\n-    }\n-\n-    public String getVariantStatsId() {\n-        return variantStatsId;\n-    }\n-\n-    public SampleQcAnalysis setVariantStatsId(String variantStatsId) {\n-        this.variantStatsId = variantStatsId;\n-        return this;\n-    }\n-\n-    public String getVariantStatsDecription() {\n-        return variantStatsDecription;\n-    }\n+    // mutationalSignature/run\n+    if (signatureJob != null) {\n+      Path path = Paths.get(signatureJob.getOutDir().getUri().getPath()).resolve(CONTEXT_FILENAME);\n+      if (path.toFile().exists()) {\n+        Signature.SignatureCount[] signatureCounts = MutationalSignatureAnalysis.parseSignatureCounts(path.toFile());\n \n-    public SampleQcAnalysis setVariantStatsDecription(String variantStatsDecription) {\n-        this.variantStatsDecription = variantStatsDecription;\n-        return this;\n+        // Add to metrics\n+        variantQcMetrics.getSignatures().add(new Signature(\"ALL\", new HashMap<>(), \"SNV\", signatureCounts, new ArrayList()));\n+      }\n     }\n \n-    public Query getVariantStatsQuery() {\n-        return variantStatsQuery;\n-    }\n-\n-    public SampleQcAnalysis setVariantStatsQuery(Query variantStatsQuery) {\n-        this.variantStatsQuery = variantStatsQuery;\n-        return this;\n-    }\n-\n-    public String getSignatureId() {\n-        return signatureId;\n-    }\n-\n-    public SampleQcAnalysis setSignatureId(String signatureId) {\n-        this.signatureId = signatureId;\n-        return this;\n-    }\n-\n-    public Query getSignatureQuery() {\n-        return signatureQuery;\n+    // mutationalSignature/query\n+    if (StringUtils.isNotEmpty(signatureId) && signatureQuery != null && !signatureQuery.isEmpty()) {\n+      // Create signature directory\n+      Path signaturePath = getOutDir().resolve(\"mutational-signature\");\n+      signaturePath.toFile().mkdir();\n+\n+      MutationalSignatureLocalAnalysisExecutor executor = new MutationalSignatureLocalAnalysisExecutor();\n+      ObjectMap executorParams = new ObjectMap();\n+      executorParams.put(\"opencgaHome\", getOpencgaHome().toString());\n+      executorParams.put(\"token\", token);\n+      executorParams.put(\"fitting\", false);\n+      executor.setUp(null, executorParams, signaturePath);\n+      executor.setStudy(studyId);\n+      executor.setSampleName(sampleId);\n+\n+      try {\n+        signatureQuery.put(\"study\", studyId);\n+        signatureQuery.put(\"sample\", sampleId);\n+        MutationalSignature mutationalSignature = executor.query(signatureQuery, QueryOptions.empty());\n+\n+        // Add signature to metrics\n+        Map<String, String> map = new HashMap<>();\n+        for (String key : signatureQuery.keySet()) {\n+          map.put(key, signatureQuery.getString(key));\n+        }\n+        variantQcMetrics.getSignatures().add(new Signature(signatureId, map, \"SNV\", mutationalSignature.getSignature().getCounts(),\n+            new ArrayList()));\n+      } catch (CatalogException | StorageEngineException | IOException e) {\n+        throw new ToolException(\"Error computing mutational signature for query '\" + signatureId + \"'\", e);\n+      }\n+    } else {\n+      addWarning(\"Skipping mutational signature: invalid parameters signature ID ('\" + signatureId + \"') and signature query('\"\n+          + signatureQuery + \"')\");\n     }\n-\n-    public SampleQcAnalysis setSignatureQuery(Query signatureQuery) {\n-        this.signatureQuery = signatureQuery;\n-        return this;\n+  }\n+\n+  private void runCircosPlot() throws ToolException {\n+    if (circosJob == null) {\n+      addWarning(\"Skipping Circos plot\");\n+    } else {\n+\n+      try {\n+        List<Path> paths = Files.list(Paths.get(circosJob.getOutDir().getUri().getPath())).collect(Collectors.toList());\n+        for (Path path : paths) {\n+          if (path.getFileName().endsWith(CircosAnalysis.SUFFIX_FILENAME)) {\n+            int index = path.toFile().getAbsolutePath().indexOf(\"JOBS/\");\n+            String relativeFilePath = (index == -1\n+                ? path.toFile().getName()\n+                : path.toFile().getAbsolutePath().substring(index));\n+            CircosPlot circosPlot = new CircosPlot(circosJob.getId(), null, relativeFilePath);\n+            if (variantQcMetrics.getCircosPlots() == null) {\n+              variantQcMetrics.setCircosPlots(new ArrayList<>());\n+            }\n+            variantQcMetrics.getCircosPlots().add(circosPlot);\n+            break;\n+          }\n+        }\n+      } catch (IOException e) {\n+        throw new ToolException(e);\n+      }\n     }\n+  }\n+\n+  public SampleQcAnalysis setStudyId(String studyId) {\n+    super.setStudy(studyId);\n+    return this;\n+  }\n+\n+  public String getSampleId() {\n+    return sampleId;\n+  }\n+\n+  public SampleQcAnalysis setSampleId(String sampleId) {\n+    this.sampleId = sampleId;\n+    return this;\n+  }\n+\n+  public String getVariantStatsId() {\n+    return variantStatsId;\n+  }\n+\n+  public SampleQcAnalysis setVariantStatsId(String variantStatsId) {\n+    this.variantStatsId = variantStatsId;\n+    return this;\n+  }\n+\n+  public String getVariantStatsDecription() {\n+    return variantStatsDecription;\n+  }\n+\n+  public SampleQcAnalysis setVariantStatsDecription(String variantStatsDecription) {\n+    this.variantStatsDecription = variantStatsDecription;\n+    return this;\n+  }\n+\n+  public Query getVariantStatsQuery() {\n+    return variantStatsQuery;\n+  }\n+\n+  public SampleQcAnalysis setVariantStatsQuery(Query variantStatsQuery) {\n+    this.variantStatsQuery = variantStatsQuery;\n+    return this;\n+  }\n+\n+  public String getSignatureId() {\n+    return signatureId;\n+  }\n+\n+  public SampleQcAnalysis setSignatureId(String signatureId) {\n+    this.signatureId = signatureId;\n+    return this;\n+  }\n+\n+  public Query getSignatureQuery() {\n+    return signatureQuery;\n+  }\n+\n+  public SampleQcAnalysis setSignatureQuery(Query signatureQuery) {\n+    this.signatureQuery = signatureQuery;\n+    return this;\n+  }\n }\n",
            "diff_size": 408
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "201",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/110/SampleQcAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/110/SampleQcAnalysis.java\nindex 7fb80f57256..cb69b391d38 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/110/SampleQcAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/110/SampleQcAnalysis.java\n@@ -62,8 +62,7 @@ public class SampleQcAnalysis extends OpenCgaToolScopeStudy {\n     public static final String ID = \"sample-qc\";\n     public static final String DESCRIPTION = \"Run quality control (QC) for a given sample. It includes variant stats and Circos plot; and \"\n         + \" for somatic samples, mutational signature.\";\n-\n-    public  static final String VARIANT_STATS_STEP = \"variant-stats\";\n+public static final String VARIANT_STATS_STEP = \"variant-stats\";\n     public  static final String CIRCOS_PLOT_STEP = \"circos-plot\";\n     public  static final String MUTATIONAL_SIGNATURE_STEP = \"mutational-signature\";\n \n@@ -261,8 +260,7 @@ public class SampleQcAnalysis extends OpenCgaToolScopeStudy {\n         if (circosJob == null) {\n             addWarning(\"Skipping Circos plot\");\n         } else {\n-\n-            try {\n+    try {\n                 List<Path> paths = Files.list(Paths.get(circosJob.getOutDir().getUri().getPath())).collect(Collectors.toList());\n                 for (Path path : paths) {\n                     if (path.getFileName().endsWith(CircosAnalysis.SUFFIX_FILENAME)) {\n@@ -342,4 +340,4 @@ public class SampleQcAnalysis extends OpenCgaToolScopeStudy {\n         this.signatureQuery = signatureQuery;\n         return this;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "202",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "202",
                    "column": "14",
                    "severity": "error",
                    "message": "'.' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                },
                {
                    "line": "202",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                },
                {
                    "line": "202",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                },
                {
                    "line": "202",
                    "column": "60",
                    "severity": "error",
                    "message": "',' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "202",
                    "column": "92",
                    "severity": "error",
                    "message": "',' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/110/SampleQcAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/110/SampleQcAnalysis.java\nindex 7fb80f57256..ab850521a00 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/110/SampleQcAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/110/SampleQcAnalysis.java\n@@ -198,10 +198,12 @@ public class SampleQcAnalysis extends OpenCgaToolScopeStudy {\n                     String key = iterator.next();\n                     query.put(key, variantStatsQuery.getString(key));\n                 }\n-\n-                variantQcMetrics.getVariantStats().add(new SampleQcVariantStats(variantStatsId, variantStatsDecription, query, stats.get(0)));\n-            }\n-        }\n+            variantQcMetrics .getVariantStats()\n+            . add (new SampleQcVariantStats (variantStatsId , variantStatsDecription, query ,\n+            stats\n+            .get(0)));\n+             }\n+         }\n     }\n \n     private void runSignature() throws ToolException {\n",
            "diff_size": 6
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}