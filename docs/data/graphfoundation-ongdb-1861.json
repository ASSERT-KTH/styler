{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1861",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "59",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "292",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "292",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1861/PropertyBlock.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1861/PropertyBlock.java\nindex e28f05ff917..f66bcc7cbe7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1861/PropertyBlock.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1861/PropertyBlock.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.record;\n \n import java.lang.reflect.Array;\n@@ -33,264 +34,264 @@ import org.neo4j.values.storable.Value;\n \n public class PropertyBlock implements Cloneable\n {\n-    /**\n-     * Size of one property block in a property record. One property may be composed by one or more property blocks\n-     * and one property record contains several property blocks.\n-     */\n-    public static final int PROPERTY_BLOCK_SIZE = Long.BYTES;\n-\n-    private static final long KEY_BITMASK = 0xFFFFFFL;\n-\n-    private static final int MAX_ARRAY_TOSTRING_SIZE = 4;\n-    private List<DynamicRecord> valueRecords;\n-    private long[] valueBlocks;\n-\n-    public PropertyType getType()\n-    {\n-        return getType( false );\n-    }\n-\n-    public PropertyType forceGetType()\n+  /**\n+   * Size of one property block in a property record. One property may be composed by one or more property blocks\n+   * and one property record contains several property blocks.\n+   */\n+  public static final int PROPERTY_BLOCK_SIZE = Long.BYTES;\n+\n+  private static final long KEY_BITMASK = 0xFFFFFFL;\n+\n+  private static final int MAX_ARRAY_TOSTRING_SIZE = 4;\n+  private List<DynamicRecord> valueRecords;\n+  private long[] valueBlocks;\n+\n+  public PropertyType getType()\n+  {\n+    return getType(false);\n+  }\n+\n+  public PropertyType forceGetType()\n+  {\n+    return getType(true);\n+  }\n+\n+  private PropertyType getType(boolean force)\n+  {\n+    return valueBlocks == null ? null : force ? PropertyType.getPropertyTypeOrNull(valueBlocks[0])\n+        : PropertyType.getPropertyTypeOrThrow(valueBlocks[0]);\n+  }\n+\n+  public int getKeyIndexId()\n+  {\n+    return keyIndexId(valueBlocks[0]);\n+  }\n+\n+  public void setKeyIndexId(int key)\n+  {\n+    valueBlocks[0] &= ~KEY_BITMASK;\n+    valueBlocks[0] |= key;\n+  }\n+\n+  public void setSingleBlock(long value)\n+  {\n+    valueBlocks = new long[1];\n+    valueBlocks[0] = value;\n+    if (valueRecords != null)\n     {\n-        return getType( true );\n+      valueRecords.clear();\n     }\n+  }\n \n-    private PropertyType getType( boolean force )\n+  public void addValueRecord(DynamicRecord record)\n+  {\n+    if (valueRecords == null)\n     {\n-        return valueBlocks == null ? null : force ? PropertyType.getPropertyTypeOrNull( valueBlocks[0] )\n-                                                  : PropertyType.getPropertyTypeOrThrow( valueBlocks[0] );\n+      valueRecords = new LinkedList<>();\n     }\n-\n-    public int getKeyIndexId()\n+    valueRecords.add(record);\n+  }\n+\n+  public void setValueRecords(List<DynamicRecord> valueRecords)\n+  {\n+    assert this.valueRecords == null || this.valueRecords.isEmpty() : this.valueRecords.toString();\n+    this.valueRecords = valueRecords;\n+  }\n+\n+  public List<DynamicRecord> getValueRecords()\n+  {\n+    return valueRecords != null ? valueRecords : Collections.emptyList();\n+  }\n+\n+  public long getSingleValueBlock()\n+  {\n+    return valueBlocks[0];\n+  }\n+\n+  /**\n+   * use this for references to the dynamic stores\n+   */\n+  public long getSingleValueLong()\n+  {\n+    return fetchLong(valueBlocks[0]);\n+  }\n+\n+  public int getSingleValueInt()\n+  {\n+    return fetchInt(valueBlocks[0]);\n+  }\n+\n+  public short getSingleValueShort()\n+  {\n+    return fetchShort(valueBlocks[0]);\n+  }\n+\n+  public byte getSingleValueByte()\n+  {\n+    return fetchByte(valueBlocks[0]);\n+  }\n+\n+  public long[] getValueBlocks()\n+  {\n+    return valueBlocks;\n+  }\n+\n+  public boolean isLight()\n+  {\n+    return valueRecords == null || valueRecords.isEmpty();\n+  }\n+\n+  public void setValueBlocks(long[] blocks)\n+  {\n+    int expectedPayloadSize = PropertyType.getPayloadSizeLongs();\n+    assert blocks == null || blocks.length <= expectedPayloadSize :\n+        \"I was given an array of size \" + blocks.length + \", but I wanted it to be \" + expectedPayloadSize;\n+    this.valueBlocks = blocks;\n+    if (valueRecords != null)\n     {\n-        return keyIndexId( valueBlocks[0] );\n+      valueRecords.clear();\n     }\n-\n-    public void setKeyIndexId( int key )\n+  }\n+\n+  /**\n+   * A property block can take a variable size of bytes in a property record.\n+   * This method returns the size of this block in bytes, including the header\n+   * size. This does not include dynamic records.\n+   *\n+   * @return The size of this block in bytes, including the header.\n+   */\n+  public int getSize()\n+  {\n+    // Currently each block is a multiple of 8 in size\n+    return valueBlocks == null ? 0 : valueBlocks.length * PROPERTY_BLOCK_SIZE;\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    StringBuilder result = new StringBuilder(\"PropertyBlock[\");\n+    PropertyType type = getType();\n+    if (valueBlocks != null)\n     {\n-        valueBlocks[0] &= ~KEY_BITMASK;\n-        valueBlocks[0] |= key;\n+      result.append(\"blocks=\").append(valueBlocks.length).append(',');\n     }\n-\n-    public void setSingleBlock( long value )\n-    {\n-        valueBlocks = new long[1];\n-        valueBlocks[0] = value;\n-        if ( valueRecords != null )\n-        {\n-            valueRecords.clear();\n-        }\n-    }\n-\n-    public void addValueRecord( DynamicRecord record )\n-    {\n-        if ( valueRecords == null )\n-        {\n-            valueRecords = new LinkedList<>();\n-        }\n-        valueRecords.add( record );\n-    }\n-\n-    public void setValueRecords( List<DynamicRecord> valueRecords )\n-    {\n-        assert this.valueRecords == null || this.valueRecords.isEmpty() : this.valueRecords.toString();\n-        this.valueRecords = valueRecords;\n-    }\n-\n-    public List<DynamicRecord> getValueRecords()\n+    result.append(type == null ? \"<unknown type>\" : type.name()).append(',');\n+    result.append(\"key=\").append(valueBlocks == null ? \"?\" : Integer.toString(getKeyIndexId()));\n+    if (type != null)\n     {\n-        return valueRecords != null ? valueRecords : Collections.emptyList();\n-    }\n-\n-    public long getSingleValueBlock()\n-    {\n-        return valueBlocks[0];\n-    }\n-\n-    /**\n-     * use this for references to the dynamic stores\n-     */\n-    public long getSingleValueLong()\n-    {\n-        return fetchLong( valueBlocks[0] );\n-    }\n-\n-    public int getSingleValueInt()\n-    {\n-        return fetchInt( valueBlocks[0] );\n-    }\n-\n-    public short getSingleValueShort()\n-    {\n-        return fetchShort( valueBlocks[0] );\n-    }\n-\n-    public byte getSingleValueByte()\n-    {\n-        return fetchByte( valueBlocks[0] );\n-    }\n-\n-    public long[] getValueBlocks()\n-    {\n-        return valueBlocks;\n-    }\n-\n-    public boolean isLight()\n-    {\n-        return valueRecords == null || valueRecords.isEmpty();\n-    }\n-\n-    public void setValueBlocks( long[] blocks )\n-    {\n-        int expectedPayloadSize = PropertyType.getPayloadSizeLongs();\n-        assert blocks == null || blocks.length <= expectedPayloadSize :\n-                \"I was given an array of size \" + blocks.length + \", but I wanted it to be \" + expectedPayloadSize;\n-        this.valueBlocks = blocks;\n-        if ( valueRecords != null )\n-        {\n-            valueRecords.clear();\n-        }\n-    }\n-\n-    /**\n-     * A property block can take a variable size of bytes in a property record.\n-     * This method returns the size of this block in bytes, including the header\n-     * size. This does not include dynamic records.\n-     *\n-     * @return The size of this block in bytes, including the header.\n-     */\n-    public int getSize()\n-    {\n-        // Currently each block is a multiple of 8 in size\n-        return valueBlocks == null ? 0 : valueBlocks.length * PROPERTY_BLOCK_SIZE;\n-    }\n-\n-    @Override\n-    public String toString()\n-    {\n-        StringBuilder result = new StringBuilder( \"PropertyBlock[\" );\n-        PropertyType type = getType();\n-        if ( valueBlocks != null )\n-        {\n-            result.append( \"blocks=\" ).append( valueBlocks.length ).append( ',' );\n-        }\n-        result.append( type == null ? \"<unknown type>\" : type.name() ).append( ',' );\n-        result.append( \"key=\" ).append( valueBlocks == null ? \"?\" : Integer.toString( getKeyIndexId() ) );\n-        if ( type != null )\n-        {\n-            switch ( type )\n+      switch (type)\n+      {\n+        case STRING:\n+        case ARRAY:\n+          result.append(\",firstDynamic=\").append(getSingleValueLong());\n+          break;\n+        default:\n+          Object value = type.value(this, null).asObject();\n+          if (value != null && value.getClass().isArray())\n+          {\n+            int length = Array.getLength(value);\n+            StringBuilder buf = new StringBuilder(value.getClass().getComponentType().getSimpleName()).append(\"[\");\n+            for (int i = 0; i < length && i <= MAX_ARRAY_TOSTRING_SIZE; i++)\n             {\n-            case STRING:\n-            case ARRAY:\n-                result.append( \",firstDynamic=\" ).append( getSingleValueLong() );\n-                break;\n-            default:\n-                Object value = type.value( this, null ).asObject();\n-                if ( value != null && value.getClass().isArray() )\n-                {\n-                    int length = Array.getLength( value );\n-                    StringBuilder buf = new StringBuilder( value.getClass().getComponentType().getSimpleName() ).append( \"[\" );\n-                    for ( int i = 0; i < length && i <= MAX_ARRAY_TOSTRING_SIZE; i++ )\n-                    {\n-                        if ( i != 0 )\n-                        {\n-                            buf.append( ',' );\n-                        }\n-                        buf.append( Array.get( value, i ) );\n-                    }\n-                    if ( length > MAX_ARRAY_TOSTRING_SIZE )\n-                    {\n-                        buf.append( \",...\" );\n-                    }\n-                    value = buf.append( ']' );\n-                }\n-                result.append( \",value=\" ).append( value );\n-                break;\n+              if (i != 0)\n+              {\n+                buf.append(',');\n+              }\n+              buf.append(Array.get(value, i));\n             }\n-        }\n-        if ( !isLight() )\n-        {\n-            result.append( \",ValueRecords[\" );\n-            Iterator<DynamicRecord> recIt = valueRecords.iterator();\n-            while ( recIt.hasNext() )\n+            if (length > MAX_ARRAY_TOSTRING_SIZE)\n             {\n-                result.append( recIt.next() );\n-                if ( recIt.hasNext() )\n-                {\n-                    result.append( ',' );\n-                }\n+              buf.append(\",...\");\n             }\n-            result.append( ']' );\n-        }\n-        result.append( ']' );\n-        return result.toString();\n+            value = buf.append(']');\n+          }\n+          result.append(\",value=\").append(value);\n+          break;\n+      }\n     }\n-\n-    @Override\n-    public PropertyBlock clone()\n+    if (!isLight())\n     {\n-        PropertyBlock result = new PropertyBlock();\n-        if ( valueBlocks != null )\n+      result.append(\",ValueRecords[\");\n+      Iterator<DynamicRecord> recIt = valueRecords.iterator();\n+      while (recIt.hasNext())\n+      {\n+        result.append(recIt.next());\n+        if (recIt.hasNext())\n         {\n-            result.valueBlocks = valueBlocks.clone();\n+          result.append(',');\n         }\n-        if ( valueRecords != null )\n-        {\n-            for ( DynamicRecord valueRecord : valueRecords )\n-            {\n-                result.addValueRecord( valueRecord.clone() );\n-            }\n-        }\n-        return result;\n-    }\n-\n-    public boolean hasSameContentsAs( PropertyBlock other )\n-    {\n-        // Assumption (which happens to be true) that if a heavy (long string/array) property\n-        // changes it will get another id, making the valueBlocks values differ.\n-        return Arrays.equals( valueBlocks, other.valueBlocks );\n-    }\n-\n-    public Value newPropertyValue( PropertyStore propertyStore )\n-    {\n-        return getType().value( this, propertyStore );\n-    }\n-\n-    public PropertyKeyValue newPropertyKeyValue( PropertyStore propertyStore )\n-    {\n-        int propertyKeyId = getKeyIndexId();\n-        return new PropertyKeyValue( propertyKeyId, getType().value( this, propertyStore ) );\n-    }\n-\n-    public static int keyIndexId( long valueBlock )\n-    {\n-        // [][][][][][kkkk,kkkk][kkkk,kkkk][kkkk,kkkk]\n-        return (int) (valueBlock & KEY_BITMASK);\n+      }\n+      result.append(']');\n     }\n-\n-    public static long fetchLong( long valueBlock )\n-    {\n-        return (valueBlock & 0xFFFFFFFFF0000000L) >>> 28;\n-    }\n-\n-    public static int fetchInt( long valueBlock )\n+    result.append(']');\n+    return result.toString();\n+  }\n+\n+  @Override\n+  public PropertyBlock clone()\n+  {\n+    PropertyBlock result = new PropertyBlock();\n+    if (valueBlocks != null)\n     {\n-        return (int) ((valueBlock & 0x0FFFFFFFF0000000L) >>> 28);\n+      result.valueBlocks = valueBlocks.clone();\n     }\n-\n-    public static short fetchShort( long valueBlock )\n-    {\n-        return (short) ((valueBlock & 0x00000FFFF0000000L) >>> 28);\n-    }\n-\n-    public static byte fetchByte( long valueBlock )\n-    {\n-        return (byte) ((valueBlock & 0x0000000FF0000000L) >>> 28);\n-    }\n-\n-    public static boolean valueIsInlined( long valueBlock )\n+    if (valueRecords != null)\n     {\n-        // [][][][][   i,tttt][kkkk,kkkk][kkkk,kkkk][kkkk,kkkk]\n-        return (valueBlock & 0x10000000L) > 0;\n+      for (DynamicRecord valueRecord : valueRecords)\n+      {\n+        result.addValueRecord(valueRecord.clone());\n+      }\n     }\n+    return result;\n+  }\n+\n+  public boolean hasSameContentsAs(PropertyBlock other)\n+  {\n+    // Assumption (which happens to be true) that if a heavy (long string/array) property\n+    // changes it will get another id, making the valueBlocks values differ.\n+    return Arrays.equals(valueBlocks, other.valueBlocks);\n+  }\n+\n+  public Value newPropertyValue(PropertyStore propertyStore)\n+  {\n+    return getType().value(this, propertyStore);\n+  }\n+\n+  public PropertyKeyValue newPropertyKeyValue(PropertyStore propertyStore)\n+  {\n+    int propertyKeyId = getKeyIndexId();\n+    return new PropertyKeyValue(propertyKeyId, getType().value(this, propertyStore));\n+  }\n+\n+  public static int keyIndexId(long valueBlock)\n+  {\n+    // [][][][][][kkkk,kkkk][kkkk,kkkk][kkkk,kkkk]\n+    return (int) (valueBlock & KEY_BITMASK);\n+  }\n+\n+  public static long fetchLong(long valueBlock)\n+  {\n+    return (valueBlock & 0xFFFFFFFFF0000000L) >>> 28;\n+  }\n+\n+  public static int fetchInt(long valueBlock)\n+  {\n+    return (int) ((valueBlock & 0x0FFFFFFFF0000000L) >>> 28);\n+  }\n+\n+  public static short fetchShort(long valueBlock)\n+  {\n+    return (short) ((valueBlock & 0x00000FFFF0000000L) >>> 28);\n+  }\n+\n+  public static byte fetchByte(long valueBlock)\n+  {\n+    return (byte) ((valueBlock & 0x0000000FF0000000L) >>> 28);\n+  }\n+\n+  public static boolean valueIsInlined(long valueBlock)\n+  {\n+    // [][][][][   i,tttt][kkkk,kkkk][kkkk,kkkk][kkkk,kkkk]\n+    return (valueBlock & 0x10000000L) > 0;\n+  }\n }\n",
            "diff_size": 404
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "145",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 171).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "200",
                    "column": "12",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "269",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1861/PropertyBlock.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1861/PropertyBlock.java\nindex e28f05ff917..3afb7aa3a93 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1861/PropertyBlock.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1861/PropertyBlock.java\n@@ -57,8 +57,7 @@ public class PropertyBlock implements Cloneable\n \n     private PropertyType getType( boolean force )\n     {\n-        return valueBlocks == null ? null : force ? PropertyType.getPropertyTypeOrNull( valueBlocks[0] )\n-                                                  : PropertyType.getPropertyTypeOrThrow( valueBlocks[0] );\n+        return valueBlocks == null ? null : force ? PropertyType.getPropertyTypeOrNull( valueBlocks[0] ) : PropertyType.getPropertyTypeOrThrow( valueBlocks[0] );\n     }\n \n     public int getKeyIndexId()\n@@ -143,9 +142,8 @@ public class PropertyBlock implements Cloneable\n     public void setValueBlocks( long[] blocks )\n     {\n         int expectedPayloadSize = PropertyType.getPayloadSizeLongs();\n-        assert blocks == null || blocks.length <= expectedPayloadSize :\n-                \"I was given an array of size \" + blocks.length + \", but I wanted it to be \" + expectedPayloadSize;\n-        this.valueBlocks = blocks;\n+        assert blocks == null || blocks.length <= expectedPayloadSize : \"I was given an array of size \" + blocks.length + \", but I wanted it to be \" + expectedPayloadSize;\n+this.valueBlocks = blocks;\n         if ( valueRecords != null )\n         {\n             valueRecords.clear();\n@@ -198,11 +196,13 @@ public class PropertyBlock implements Cloneable\n                         }\n                         buf.append( Array.get( value, i ) );\n                     }\n-                    if ( length > MAX_ARRAY_TOSTRING_SIZE )\n+\n+if ( length> MAX_ARRAY_TOSTRING_SIZE )\n                     {\n                         buf.append( \",...\" );\n                     }\n-                    value = buf.append( ']' );\n+\n+value = buf.append( ']' );\n                 }\n                 result.append( \",value=\" ).append( value );\n                 break;\n@@ -234,7 +234,8 @@ public class PropertyBlock implements Cloneable\n         {\n             result.valueBlocks = valueBlocks.clone();\n         }\n-        if ( valueRecords != null )\n+\n+if ( valueRecords != null )\n         {\n             for ( DynamicRecord valueRecord : valueRecords )\n             {\n@@ -265,32 +266,32 @@ public class PropertyBlock implements Cloneable\n     public static int keyIndexId( long valueBlock )\n     {\n         // [][][][][][kkkk,kkkk][kkkk,kkkk][kkkk,kkkk]\n-        return (int) (valueBlock & KEY_BITMASK);\n+        return ( int) ( valueBlock & KEY_BITMASK);\n     }\n \n     public static long fetchLong( long valueBlock )\n     {\n-        return (valueBlock & 0xFFFFFFFFF0000000L) >>> 28;\n+        return ( valueBlock & 0xFFFFFFFFF0000000L) >>> 28;\n     }\n \n     public static int fetchInt( long valueBlock )\n     {\n-        return (int) ((valueBlock & 0x0FFFFFFFF0000000L) >>> 28);\n+        return ( int) ((valueBlock & 0x0FFFFFFFF0000000L) >>> 28 );\n     }\n \n     public static short fetchShort( long valueBlock )\n     {\n-        return (short) ((valueBlock & 0x00000FFFF0000000L) >>> 28);\n+        return (short) ((valueBlock & 0x00000FFFF0000000L) >>> 28 );\n     }\n \n     public static byte fetchByte( long valueBlock )\n     {\n-        return (byte) ((valueBlock & 0x0000000FF0000000L) >>> 28);\n+        return (byte) ((valueBlock & 0x0000000FF0000000L) >>> 28 );\n     }\n \n     public static boolean valueIsInlined( long valueBlock )\n     {\n         // [][][][][   i,tttt][kkkk,kkkk][kkkk,kkkk][kkkk,kkkk]\n-        return (valueBlock & 0x10000000L) > 0;\n+        return ( valueBlock & 0x10000000L) > 0;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}