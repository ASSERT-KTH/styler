{
    "project_name": "Stratio-bdt",
    "error_id": "181",
    "information": {
        "errors": [
            {
                "line": "911",
                "severity": "error",
                "message": "'METHOD_DEF' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "     *\n     */\n    @Given(\"^services '(.+?)' are splitted correctly in datacenters '(.+?)'$\")\n    public void checkServicesDistributionMultiDataCenterPram(String serviceList, String dataCentersIps) throws Exception {\n        checkDataCentersDistribution(serviceList.split(\",\"), dataCentersIps.split(\";\"));\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/181/GivenGSpec.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/styler/181/GivenGSpec.java\nindex 66459b65e22..6cfc8dbb1b5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/181/GivenGSpec.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/styler/181/GivenGSpec.java\n@@ -908,6 +908,7 @@ public class GivenGSpec extends BaseGSpec {\n      * @throws Exception\n      *\n      */\n+\n     @Given(\"^services '(.+?)' are splitted correctly in datacenters '(.+?)'$\")\n     public void checkServicesDistributionMultiDataCenterPram(String serviceList, String dataCentersIps) throws Exception {\n         checkDataCentersDistribution(serviceList.split(\",\"), dataCentersIps.split(\";\"));\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/181/GivenGSpec.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/intellij/181/GivenGSpec.java\nindex 66459b65e22..a5f822e59b8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/181/GivenGSpec.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/intellij/181/GivenGSpec.java\n@@ -44,6 +44,7 @@ import static com.stratio.qa.assertions.Assertions.assertThat;\n \n /**\n  * Generic Given Specs.\n+ *\n  * @see <a href=\"GivenGSpec-annotations.html\">Given Steps &amp; Matching Regex</a>\n  */\n public class GivenGSpec extends BaseGSpec {\n@@ -72,7 +73,8 @@ public class GivenGSpec extends BaseGSpec {\n      * @throws Exception exception\n      */\n     @Given(\"^I create a Cassandra index named '(.+?)' in table '(.+?)' using magic_column '(.+?)' using keyspace '(.+?)'$\")\n-    public void createBasicMapping(String index_name, String table, String column, String keyspace) throws Exception {\n+    public void createBasicMapping(String index_name, String table, String column, String keyspace)\n+        throws Exception {\n         String query = \"CREATE INDEX \" + index_name + \" ON \" + table + \" (\" + column + \");\";\n         commonspec.getCassandraClient().executeQuery(query);\n     }\n@@ -106,7 +108,8 @@ public class GivenGSpec extends BaseGSpec {\n                 break;\n             case \"Elasticsearch\":\n                 LinkedHashMap<String, Object> settings_map = new LinkedHashMap<String, Object>();\n-                settings_map.put(\"cluster.name\", System.getProperty(\"ES_CLUSTER\", ES_DEFAULT_CLUSTER_NAME));\n+                settings_map\n+                    .put(\"cluster.name\", System.getProperty(\"ES_CLUSTER\", ES_DEFAULT_CLUSTER_NAME));\n                 commonspec.getElasticSearchClient().setSettings(settings_map);\n                 commonspec.getElasticSearchClient().connect();\n                 break;\n@@ -118,17 +121,19 @@ public class GivenGSpec extends BaseGSpec {\n     /**\n      * Connect to ElasticSearch using custom parameters\n      *\n-     * @param host ES host\n-     * @param foo regex needed to match method\n-     * @param nativePort ES port\n-     * @param bar regex needed to match method\n+     * @param host        ES host\n+     * @param foo         regex needed to match method\n+     * @param nativePort  ES port\n+     * @param bar         regex needed to match method\n      * @param clusterName ES clustername\n-     * @throws DBException exception\n-     * @throws UnknownHostException exception\n+     * @throws DBException           exception\n+     * @throws UnknownHostException  exception\n      * @throws NumberFormatException exception\n      */\n     @Given(\"^I connect to Elasticsearch cluster at host '(.+?)'( using native port '(.+?)')?( using cluster name '(.+?)')?$\")\n-    public void connectToElasticSearch(String host, String foo, String nativePort, String bar, String clusterName) throws DBException, UnknownHostException, NumberFormatException {\n+    public void connectToElasticSearch(String host, String foo, String nativePort, String bar,\n+                                       String clusterName)\n+        throws DBException, UnknownHostException, NumberFormatException {\n         LinkedHashMap<String, Object> settings_map = new LinkedHashMap<String, Object>();\n         if (clusterName != null) {\n             settings_map.put(\"cluster.name\", clusterName);\n@@ -148,9 +153,9 @@ public class GivenGSpec extends BaseGSpec {\n     /**\n      * Create table\n      *\n-     * @param table Cassandra table\n+     * @param table     Cassandra table\n      * @param datatable datatable used for parsing elements\n-     * @param keyspace Cassandra keyspace\n+     * @param keyspace  Cassandra keyspace\n      */\n     @Given(\"^I create a Cassandra table named '(.+?)' using keyspace '(.+?)' with:$\")\n     public void createTableWithData(String table, String keyspace, DataTable datatable) {\n@@ -162,8 +167,9 @@ public class GivenGSpec extends BaseGSpec {\n \n             for (int i = 0; i < attrLength; i++) {\n                 columns.put(datatable.getGherkinRows().get(0).getCells().get(i),\n-                        datatable.getGherkinRows().get(1).getCells().get(i));\n-                if ((datatable.getGherkinRows().size() == 3) && datatable.getGherkinRows().get(2).getCells().get(i).equalsIgnoreCase(\"PK\")) {\n+                    datatable.getGherkinRows().get(1).getCells().get(i));\n+                if ((datatable.getGherkinRows().size() == 3) &&\n+                    datatable.getGherkinRows().get(2).getCells().get(i).equalsIgnoreCase(\"PK\")) {\n                     pk.add(datatable.getGherkinRows().get(0).getCells().get(i));\n                 }\n             }\n@@ -181,9 +187,9 @@ public class GivenGSpec extends BaseGSpec {\n     /**\n      * Insert Data\n      *\n-     * @param table Cassandra table\n+     * @param table     Cassandra table\n      * @param datatable datatable used for parsing elements\n-     * @param keyspace Cassandra keyspace\n+     * @param keyspace  Cassandra keyspace\n      */\n     @Given(\"^I insert in keyspace '(.+?)' and table '(.+?)' with:$\")\n     public void insertData(String keyspace, String table, DataTable datatable) {\n@@ -193,7 +199,8 @@ public class GivenGSpec extends BaseGSpec {\n             Map<String, Object> fields = new HashMap<String, Object>();\n             for (int e = 1; e < datatable.getGherkinRows().size(); e++) {\n                 for (int i = 0; i < attrLength; i++) {\n-                    fields.put(datatable.getGherkinRows().get(0).getCells().get(i), datatable.getGherkinRows().get(e).getCells().get(i));\n+                    fields.put(datatable.getGherkinRows().get(0).getCells().get(i),\n+                        datatable.getGherkinRows().get(e).getCells().get(i));\n \n                 }\n                 commonspec.getCassandraClient().insertData(keyspace + \".\" + table, fields);\n@@ -221,17 +228,18 @@ public class GivenGSpec extends BaseGSpec {\n      * @param position position from a search result\n      * @param element  key in the json response to be saved\n      * @param envVar   thread environment variable where to store the value\n-     * @throws IllegalAccessException exception\n-     * @throws IllegalArgumentException exception\n-     * @throws SecurityException exception\n-     * @throws NoSuchFieldException exception\n-     * @throws ClassNotFoundException exception\n-     * @throws InstantiationException exception\n+     * @throws IllegalAccessException    exception\n+     * @throws IllegalArgumentException  exception\n+     * @throws SecurityException         exception\n+     * @throws NoSuchFieldException      exception\n+     * @throws ClassNotFoundException    exception\n+     * @throws InstantiationException    exception\n      * @throws InvocationTargetException exception\n-     * @throws NoSuchMethodException exception\n+     * @throws NoSuchMethodException     exception\n      */\n     @Given(\"^I save element (in position \\'(.+?)\\' in )?\\'(.+?)\\' in environment variable \\'(.+?)\\'$\")\n-    public void saveElementEnvironment(String foo, String position, String element, String envVar) throws Exception {\n+    public void saveElementEnvironment(String foo, String position, String element, String envVar)\n+        throws Exception {\n \n         Pattern pattern = Pattern.compile(\"^((.*)(\\\\.)+)(\\\\$.*)$\");\n         Matcher matcher = pattern.matcher(element);\n@@ -270,14 +278,14 @@ public class GivenGSpec extends BaseGSpec {\n      * @param host   elasticsearch connection\n      * @param port   elasticsearch port\n      * @param envVar thread variable where to store the value\n-     * @throws IllegalAccessException exception\n-     * @throws IllegalArgumentException exception\n-     * @throws SecurityException exception\n-     * @throws NoSuchFieldException exception\n-     * @throws ClassNotFoundException exception\n-     * @throws InstantiationException exception\n+     * @throws IllegalAccessException    exception\n+     * @throws IllegalArgumentException  exception\n+     * @throws SecurityException         exception\n+     * @throws NoSuchFieldException      exception\n+     * @throws ClassNotFoundException    exception\n+     * @throws InstantiationException    exception\n      * @throws InvocationTargetException exception\n-     * @throws NoSuchMethodException exception\n+     * @throws NoSuchMethodException     exception\n      */\n     @Given(\"^I obtain elasticsearch cluster name in '([^:]+?)(:.+?)?' and save it in variable '(.+?)'?$\")\n     public void saveElasticCluster(String host, String port, String envVar) throws Exception {\n@@ -358,8 +366,8 @@ public class GivenGSpec extends BaseGSpec {\n      * Insert data in a MongoDB table.\n      *\n      * @param dataBase Mongo database\n-     * @param tabName Mongo table\n-     * @param table Datatable used for insert elements\n+     * @param tabName  Mongo table\n+     * @param table    Datatable used for insert elements\n      */\n     @Given(\"^I insert into a MongoDB database '(.+?)' and table '(.+?)' this values:$\")\n     public void insertOnMongoTable(String dataBase, String tabName, DataTable table) {\n@@ -371,7 +379,7 @@ public class GivenGSpec extends BaseGSpec {\n      * Truncate table in MongoDB.\n      *\n      * @param database Mongo database\n-     * @param table Mongo table\n+     * @param table    Mongo table\n      */\n     @Given(\"^I drop every document at a MongoDB database '(.+?)' and table '(.+?)'\")\n     public void truncateTableInMongo(String database, String table) {\n@@ -447,7 +455,7 @@ public class GivenGSpec extends BaseGSpec {\n         }\n \n         if (restPort == null) {\n-            if (isSecured == null)  {\n+            if (isSecured == null) {\n                 restPort = \":80\";\n             } else {\n                 restPort = \":443\";\n@@ -473,8 +481,9 @@ public class GivenGSpec extends BaseGSpec {\n     @Given(\"^I switch to the iframe on index '(\\\\d+?)'$\")\n     public void seleniumSwitchFrame(Integer index) {\n \n-        assertThat(commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n+        assertThat(commonspec.getPreviousWebElements())\n+            .as(\"There are less found elements than required\")\n+            .hasAtLeast(index);\n \n         WebElement elem = commonspec.getPreviousWebElements().getPreviousWebElements().get(index);\n         commonspec.getDriver().switchTo().frame(elem);\n@@ -485,11 +494,12 @@ public class GivenGSpec extends BaseGSpec {\n      *\n      * @param idframe iframe to swith to\n      * @throws IllegalAccessException exception\n-     * @throws NoSuchFieldException exception\n+     * @throws NoSuchFieldException   exception\n      * @throws ClassNotFoundException exception\n      */\n     @Given(\"^I switch to iframe with '([^:]*?):(.+?)'$\")\n-    public void seleniumIdFrame(String method, String idframe) throws IllegalAccessException, NoSuchFieldException, ClassNotFoundException {\n+    public void seleniumIdFrame(String method, String idframe)\n+        throws IllegalAccessException, NoSuchFieldException, ClassNotFoundException {\n         assertThat(commonspec.locateElement(method, idframe, 1));\n \n         if (method.equals(\"id\") || method.equals(\"name\")) {\n@@ -520,52 +530,61 @@ public class GivenGSpec extends BaseGSpec {\n      * Opens a ssh connection to remote host\n      *\n      * @param remoteHost remote host\n-     * @param user remote user\n-     * @param password (required if pemFile null)\n-     * @param pemFile (required if password null)\n+     * @param user       remote user\n+     * @param password   (required if pemFile null)\n+     * @param pemFile    (required if password null)\n      * @throws Exception exception\n-     *\n      */\n     @Given(\"^I open a ssh connection to '(.+?)'( in port '(.+?)')? with user '(.+?)'( and password '(.+?)')?( using pem file '(.+?)')?$\")\n-    public void openSSHConnection(String remoteHost, String tmp, String remotePort, String user, String foo, String password, String bar, String pemFile) throws Exception {\n+    public void openSSHConnection(String remoteHost, String tmp, String remotePort, String user,\n+                                  String foo, String password, String bar, String pemFile)\n+        throws Exception {\n         if ((pemFile == null) || (pemFile.equals(\"none\"))) {\n             if (password == null) {\n-                throw new Exception(\"You have to provide a password or a pem file to be used for connection\");\n+                throw new Exception(\n+                    \"You have to provide a password or a pem file to be used for connection\");\n             }\n-            commonspec.setRemoteSSHConnection(new RemoteSSHConnection(user, password, remoteHost, remotePort, null));\n-            commonspec.getLogger().debug(\"Opening ssh connection with password: { \" + password + \"}\", commonspec.getRemoteSSHConnection());\n+            commonspec.setRemoteSSHConnection(\n+                new RemoteSSHConnection(user, password, remoteHost, remotePort, null));\n+            commonspec.getLogger()\n+                .debug(\"Opening ssh connection with password: { \" + password + \"}\",\n+                    commonspec.getRemoteSSHConnection());\n         } else {\n             File pem = new File(pemFile);\n             if (!pem.exists()) {\n                 throw new Exception(\"Pem file: \" + pemFile + \" does not exist\");\n             }\n-            commonspec.setRemoteSSHConnection(new RemoteSSHConnection(user, null, remoteHost, remotePort, pemFile));\n-            commonspec.getLogger().debug(\"Opening ssh connection with pemFile: {}\", commonspec.getRemoteSSHConnection());\n+            commonspec.setRemoteSSHConnection(\n+                new RemoteSSHConnection(user, null, remoteHost, remotePort, pemFile));\n+            commonspec.getLogger().debug(\"Opening ssh connection with pemFile: {}\",\n+                commonspec.getRemoteSSHConnection());\n         }\n     }\n \n \n     /**\n-    * Authenticate in a DCOS cluster\n-    *\n-    * @param remoteHost remote host\n-    * @param email email for JWT singing\n-    * @param user remote user\n-    * @param password (required if pemFile null)\n-    * @param pemFile (required if password null)\n-    * @throws Exception exception\n-    *\n-    *\n-    */\n+     * Authenticate in a DCOS cluster\n+     *\n+     * @param remoteHost remote host\n+     * @param email      email for JWT singing\n+     * @param user       remote user\n+     * @param password   (required if pemFile null)\n+     * @param pemFile    (required if password null)\n+     * @throws Exception exception\n+     */\n     @Given(\"^I authenticate to DCOS cluster '(.+?)' using email '(.+?)'( with user '(.+?)'( and password '(.+?)'| and pem file '(.+?)'))?$\")\n-    public void authenticateDCOSpem(String remoteHost, String email, String foo, String user, String bar, String password, String pemFile) throws Exception {\n+    public void authenticateDCOSpem(String remoteHost, String email, String foo, String user,\n+                                    String bar, String password, String pemFile) throws Exception {\n         String DCOSsecret;\n         if (foo == null) {\n-            commonspec.setRemoteSSHConnection(new RemoteSSHConnection(\"root\", \"stratio\", remoteHost, null));\n+            commonspec.setRemoteSSHConnection(\n+                new RemoteSSHConnection(\"root\", \"stratio\", remoteHost, null));\n         } else {\n-            commonspec.setRemoteSSHConnection(new RemoteSSHConnection(user, password, remoteHost, pemFile));\n+            commonspec.setRemoteSSHConnection(\n+                new RemoteSSHConnection(user, password, remoteHost, pemFile));\n         }\n-        commonspec.getRemoteSSHConnection().runCommand(\"sudo cat /var/lib/dcos/dcos-oauth/auth-token-secret\");\n+        commonspec.getRemoteSSHConnection()\n+            .runCommand(\"sudo cat /var/lib/dcos/dcos-oauth/auth-token-secret\");\n         DCOSsecret = commonspec.getRemoteSSHConnection().getResult().trim();\n         setDCOSCookie(DCOSsecret, email);\n     }\n@@ -583,15 +602,18 @@ public class GivenGSpec extends BaseGSpec {\n \n     /**\n      * Generate token to authenticate in gosec SSO\n-     * @param ssoHost current sso host\n+     *\n+     * @param ssoHost  current sso host\n      * @param userName username\n      * @param passWord password\n      * @throws Exception exception\n      */\n     @Given(\"^I( do not)? set sso token using host '(.+?)' with user '(.+?)' and password '(.+?)'$\")\n-    public void setGoSecSSOCookie(String set, String ssoHost, String userName, String passWord) throws Exception {\n+    public void setGoSecSSOCookie(String set, String ssoHost, String userName, String passWord)\n+        throws Exception {\n         if (set == null) {\n-            HashMap<String, String> ssoCookies = new GosecSSOUtils(ssoHost, userName, passWord).ssoTokenGenerator();\n+            HashMap<String, String> ssoCookies =\n+                new GosecSSOUtils(ssoHost, userName, passWord).ssoTokenGenerator();\n             String[] tokenList = {\"user\", \"dcos-acs-auth-cookie\"};\n             List<Cookie> cookiesAtributes = addSsoToken(ssoCookies, tokenList);\n \n@@ -604,8 +626,8 @@ public class GivenGSpec extends BaseGSpec {\n \n         for (String tokenKey : tokenList) {\n             cookiesAttributes.add(new Cookie(tokenKey, ssoCookies.get(tokenKey),\n-                    false, null,\n-                    null, 999999, false, false));\n+                false, null,\n+                null, 999999, false, false));\n         }\n         return cookiesAttributes;\n     }\n@@ -629,7 +651,7 @@ public class GivenGSpec extends BaseGSpec {\n      * Copies file/s from local system to remote system\n      *\n      * @param remotePath path where file is going to be copy\n-     * @param localPath path where file is located\n+     * @param localPath  path where file is located\n      * @throws Exception exception\n      */\n     @Given(\"^I outbound copy '(.+?)' through a ssh connection to '(.+?)'$\")\n@@ -641,15 +663,16 @@ public class GivenGSpec extends BaseGSpec {\n     /**\n      * Executes the command specified in local system\n      *\n-     * @param command command to be run locally\n-     * @param foo regex needed to match method\n+     * @param command    command to be run locally\n+     * @param foo        regex needed to match method\n      * @param exitStatus command exit status\n-     * @param bar regex needed to match method\n-     * @param envVar environment variable name\n+     * @param bar        regex needed to match method\n+     * @param envVar     environment variable name\n      * @throws Exception exception\n      **/\n     @Given(\"^I run '(.+?)' locally( with exit status '(.+?)')?( and save the value in environment variable '(.+?)')?$\")\n-    public void executeLocalCommand(String command, String foo, Integer exitStatus, String bar, String envVar) throws Exception {\n+    public void executeLocalCommand(String command, String foo, Integer exitStatus, String bar,\n+                                    String envVar) throws Exception {\n         if (exitStatus == null) {\n             exitStatus = 0;\n         }\n@@ -663,15 +686,16 @@ public class GivenGSpec extends BaseGSpec {\n     /**\n      * Executes the command specified in remote system\n      *\n-     * @param command command to be run locally\n-     * @param foo regex needed to match method\n+     * @param command    command to be run locally\n+     * @param foo        regex needed to match method\n      * @param exitStatus command exit status\n-     * @param bar regex needed to match method\n-     * @param envVar environment variable name\n+     * @param bar        regex needed to match method\n+     * @param envVar     environment variable name\n      * @throws Exception exception\n      **/\n     @Given(\"^I run '(.+?)' in the ssh connection( with exit status '(.+?)')?( and save the value in environment variable '(.+?)')?$\")\n-    public void executeCommand(String command, String foo, Integer exitStatus, String bar, String envVar) throws Exception {\n+    public void executeCommand(String command, String foo, Integer exitStatus, String bar,\n+                               String envVar) throws Exception {\n         if (exitStatus == null) {\n             exitStatus = 0;\n         }\n@@ -682,19 +706,21 @@ public class GivenGSpec extends BaseGSpec {\n         commonspec.setCommandExitStatus(commonspec.getRemoteSSHConnection().getExitStatus());\n         commonspec.runCommandLoggerAndEnvVar(exitStatus, envVar, Boolean.FALSE);\n \n-        Assertions.assertThat(commonspec.getRemoteSSHConnection().getExitStatus()).isEqualTo(exitStatus);\n+        Assertions.assertThat(commonspec.getRemoteSSHConnection().getExitStatus())\n+            .isEqualTo(exitStatus);\n     }\n \n \n     /**\n      * Insert document in a MongoDB table.\n      *\n-     * @param dataBase Mongo database\n+     * @param dataBase   Mongo database\n      * @param collection Mongo collection\n-     * @param document document used for schema\n+     * @param document   document used for schema\n      */\n     @Given(\"^I insert into MongoDB database '(.+?)' and collection '(.+?)' the document from schema '(.+?)'$\")\n-    public void insertOnMongoTable(String dataBase, String collection, String document) throws Exception {\n+    public void insertOnMongoTable(String dataBase, String collection, String document)\n+        throws Exception {\n         String retrievedDoc = commonspec.retrieveData(document, \"json\");\n         commonspec.getMongoDBClient().connectToMongoDBDataBase(dataBase);\n         commonspec.getMongoDBClient().insertDocIntoMongoDBCollection(collection, retrievedDoc);\n@@ -727,7 +753,6 @@ public class GivenGSpec extends BaseGSpec {\n \n     /**\n      * Disconnect from zookeeper.\n-     *\n      */\n     @Given(\"^I disconnect from Zookeeper$\")\n     public void disconnectFromZk() throws InterruptedException {\n@@ -752,8 +777,6 @@ public class GivenGSpec extends BaseGSpec {\n \n     /**\n      * Connect to LDAP.\n-     *\n-     *\n      */\n     @Given(\"^I connect to LDAP$\")\n     public void connectLDAP() {\n@@ -789,7 +812,10 @@ public class GivenGSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @Given(\"^in less than '(\\\\d+?)' seconds, checking each '(\\\\d+?)' seconds, I send a '(.+?)' request to '(.+?)' so that the response( does not)? contains '(.+?)' based on '([^:]+?)'( as '(json|string)')? with:$\")\n-    public void sendRequestDataTableTimeout(Integer timeout, Integer wait, String requestType, String endPoint, String contains, String responseVal, String baseData, String baz, String type, DataTable modifications) throws Exception {\n+    public void sendRequestDataTableTimeout(Integer timeout, Integer wait, String requestType,\n+                                            String endPoint, String contains, String responseVal,\n+                                            String baseData, String baz, String type,\n+                                            DataTable modifications) throws Exception {\n \n         // Retrieve data\n         String retrievedData = commonspec.retrieveData(baseData, type);\n@@ -815,8 +841,11 @@ public class GivenGSpec extends BaseGSpec {\n             if (found && searchUntilContains) {\n                 break;\n             }\n-            commonspec.getLogger().debug(\"Generating request {} to {} with data {} as {}\", requestType, endPoint, modifiedData, type);\n-            response = commonspec.generateRequest(requestType, false, null, null, endPoint, modifiedData, type);\n+            commonspec.getLogger()\n+                .debug(\"Generating request {} to {} with data {} as {}\", requestType, endPoint,\n+                    modifiedData, type);\n+            response = commonspec\n+                .generateRequest(requestType, false, null, null, endPoint, modifiedData, type);\n             commonspec.getLogger().debug(\"Saving response\");\n             commonspec.setResponse(requestType, response.get());\n             commonspec.getLogger().debug(\"Checking response value\");\n@@ -847,9 +876,11 @@ public class GivenGSpec extends BaseGSpec {\n             throw (ex);\n         }\n         if (searchUntilContains) {\n-            commonspec.getLogger().info(\"Success! Response value found after \" + timeout + \" seconds\");\n+            commonspec.getLogger()\n+                .info(\"Success! Response value found after \" + timeout + \" seconds\");\n         } else {\n-            commonspec.getLogger().info(\"Success! Response value not found after \" + timeout + \" seconds\");\n+            commonspec.getLogger()\n+                .info(\"Success! Response value not found after \" + timeout + \" seconds\");\n         }\n     }\n \n@@ -858,10 +889,9 @@ public class GivenGSpec extends BaseGSpec {\n      * Checks if there are any unused nodes in the cluster and returns the IP of one of them.\n      * REQUIRES A PREVIOUSLY-ESTABLISHED SSH CONNECTION TO DCOS-CLI TO WORK\n      *\n-     * @param hosts: list of IPs that will be investigated\n+     * @param hosts:  list of IPs that will be investigated\n      * @param envVar: environment variable name\n      * @throws Exception\n-     *\n      */\n     @Given(\"^I save the IP of an unused node in hosts '(.+?)' in the in environment variable '(.+?)'?$\")\n     public void getUnusedNode(String hosts, String envVar) throws Exception {\n@@ -870,7 +900,8 @@ public class GivenGSpec extends BaseGSpec {\n         //Get the list of currently used hosts\n         executeCommand(\"dcos task | awk '{print $2}'\", \"foo\", 0, \"bar\", null);\n         String results = commonspec.getRemoteSSHConnection().getResult();\n-        Set<String> usedHosts = new HashSet(Arrays.asList(results.replaceAll(\"\\r\", \"\").split(\"\\n\")));\n+        Set<String> usedHosts =\n+            new HashSet(Arrays.asList(results.replaceAll(\"\\r\", \"\").split(\"\\n\")));\n \n         //We get the nodes not being used\n         hostList.removeAll(usedHosts);\n@@ -889,31 +920,34 @@ public class GivenGSpec extends BaseGSpec {\n      *\n      * @param serviceList all task deployed in the cluster separated by a semicolumn.\n      * @throws Exception\n-     *\n      */\n     @Given(\"^services '(.*?)' are splitted correctly in datacenters$\")\n     public void checkServicesDistributionMultiDataCenter(String serviceList) throws Exception {\n         executeCommand(\"dcos node --json >> aux.txt\", \"foo\", 0, \"bar\", null);\n         executeCommand(\"cat aux.txt\", \"foo\", 0, \"bar\", null);\n-        checkDataCentersDistribution(serviceList.split(\",\"), obtainsDataCenters(commonspec.getRemoteSSHConnection().getResult()).split(\";\"));\n+        checkDataCentersDistribution(serviceList.split(\",\"),\n+            obtainsDataCenters(commonspec.getRemoteSSHConnection().getResult()).split(\";\"));\n         executeCommand(\"rm -rf aux.txt\", \"foo\", 0, \"bar\", null);\n \n     }\n+\n     /**\n      * Check if all task of a service are correctly distributed in all datacenters of the cluster\n      *\n-     * @param serviceList all task deployed in the cluster separated by a semicolumn.\n+     * @param serviceList    all task deployed in the cluster separated by a semicolumn.\n      * @param dataCentersIps all ips of the datacenters to be checked\n      *                       Example: ip_1_dc1, ip_2_dc1;ip_3_dc2,ip_4_dc2\n      * @throws Exception\n-     *\n      */\n     @Given(\"^services '(.+?)' are splitted correctly in datacenters '(.+?)'$\")\n-    public void checkServicesDistributionMultiDataCenterPram(String serviceList, String dataCentersIps) throws Exception {\n+    public void checkServicesDistributionMultiDataCenterPram(String serviceList,\n+                                                             String dataCentersIps)\n+        throws Exception {\n         checkDataCentersDistribution(serviceList.split(\",\"), dataCentersIps.split(\";\"));\n     }\n \n-    public void checkDataCentersDistribution(String[] serviceListArray, String[] dataCentersIpsArray) throws Exception {\n+    public void checkDataCentersDistribution(String[] serviceListArray,\n+                                             String[] dataCentersIpsArray) throws Exception {\n         int[] expectedDistribution = new int[dataCentersIpsArray.length];\n         int[] results = new int[dataCentersIpsArray.length];\n         //Calculamos distribucion\n@@ -927,7 +961,8 @@ public class GivenGSpec extends BaseGSpec {\n         }\n         ///Fin calculo distribucion\n         for (int i = 0; i < serviceListArray.length; i++) {\n-            executeCommand(\"dcos task | grep \" + serviceListArray[i] + \" | awk '{print $2}'\", \"foo\", 0, \"bar\", null);\n+            executeCommand(\"dcos task | grep \" + serviceListArray[i] + \" | awk '{print $2}'\", \"foo\",\n+                0, \"bar\", null);\n             String service_ip = commonspec.getRemoteSSHConnection().getResult();\n             for (int x = 0; x < dataCentersIpsArray.length; x++) {\n                 if (dataCentersIpsArray[x].toLowerCase().contains(service_ip.toLowerCase())) {\n@@ -954,7 +989,8 @@ public class GivenGSpec extends BaseGSpec {\n             if (existValue == null) {\n                 datacentersDistribution.put(datacenter, ip);\n             } else {\n-                datacentersDistribution.put(datacenter, datacentersDistribution.get(datacenter) + \",\" + ip);\n+                datacentersDistribution\n+                    .put(datacenter, datacentersDistribution.get(datacenter) + \",\" + ip);\n             }\n         }\n         String result = \"\";\n",
            "diff_size": 148
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/181/GivenGSpec.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/naturalize/181/GivenGSpec.java\nindex 66459b65e22..f11616533ed 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/181/GivenGSpec.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/naturalize/181/GivenGSpec.java\n@@ -447,7 +447,7 @@ public class GivenGSpec extends BaseGSpec {\n         }\n \n         if (restPort == null) {\n-            if (isSecured == null)  {\n+            if (isSecured == null) {\n                 restPort = \":80\";\n             } else {\n                 restPort = \":443\";\n@@ -604,8 +604,7 @@ public class GivenGSpec extends BaseGSpec {\n \n         for (String tokenKey : tokenList) {\n             cookiesAttributes.add(new Cookie(tokenKey, ssoCookies.get(tokenKey),\n-                    false, null,\n-                    null, 999999, false, false));\n+                    false, null, null, 999999, false, false));\n         }\n         return cookiesAttributes;\n     }\n@@ -790,8 +789,7 @@ public class GivenGSpec extends BaseGSpec {\n      */\n     @Given(\"^in less than '(\\\\d+?)' seconds, checking each '(\\\\d+?)' seconds, I send a '(.+?)' request to '(.+?)' so that the response( does not)? contains '(.+?)' based on '([^:]+?)'( as '(json|string)')? with:$\")\n     public void sendRequestDataTableTimeout(Integer timeout, Integer wait, String requestType, String endPoint, String contains, String responseVal, String baseData, String baz, String type, DataTable modifications) throws Exception {\n-\n-        // Retrieve data\n+    // Retrieve data\n         String retrievedData = commonspec.retrieveData(baseData, type);\n \n         // Modify data\n@@ -899,7 +897,8 @@ public class GivenGSpec extends BaseGSpec {\n         executeCommand(\"rm -rf aux.txt\", \"foo\", 0, \"bar\", null);\n \n     }\n-    /**\n+\n+/**\n      * Check if all task of a service are correctly distributed in all datacenters of the cluster\n      *\n      * @param serviceList all task deployed in the cluster separated by a semicolumn.\n@@ -966,4 +965,4 @@ public class GivenGSpec extends BaseGSpec {\n         return result.substring(1, result.length());\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/181/GivenGSpec.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/styler_random/181/GivenGSpec.java\nindex 66459b65e22..6cfc8dbb1b5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/181/GivenGSpec.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/styler_random/181/GivenGSpec.java\n@@ -908,6 +908,7 @@ public class GivenGSpec extends BaseGSpec {\n      * @throws Exception\n      *\n      */\n+\n     @Given(\"^services '(.+?)' are splitted correctly in datacenters '(.+?)'$\")\n     public void checkServicesDistributionMultiDataCenterPram(String serviceList, String dataCentersIps) throws Exception {\n         checkDataCentersDistribution(serviceList.split(\",\"), dataCentersIps.split(\";\"));\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/181/GivenGSpec.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/styler_three_grams/181/GivenGSpec.java\nindex 66459b65e22..6cfc8dbb1b5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/181/GivenGSpec.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/styler_three_grams/181/GivenGSpec.java\n@@ -908,6 +908,7 @@ public class GivenGSpec extends BaseGSpec {\n      * @throws Exception\n      *\n      */\n+\n     @Given(\"^services '(.+?)' are splitted correctly in datacenters '(.+?)'$\")\n     public void checkServicesDistributionMultiDataCenterPram(String serviceList, String dataCentersIps) throws Exception {\n         checkDataCentersDistribution(serviceList.split(\",\"), dataCentersIps.split(\";\"));\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff"
    ]
}