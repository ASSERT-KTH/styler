{
    "project_name": "CESNET-perun",
    "error_id": "412",
    "information": {
        "errors": [
            {
                "line": "179",
                "severity": "error",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "\t\t\t\t}\n\t\t\t\telse if (row.getState().equalsIgnoreCase(\"OK\")){\n\t\t\t\t\n\t\t\t\t\treturn \"rowgreen\";\n\t\t\t\t}\n\t\t\t\telse if (row.getState().equalsIgnoreCase(\"PROCESSING\")){",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/412/GetFacilityState.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/412/GetFacilityState.java\nindex 65775498146..ea7a86607c4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/412/GetFacilityState.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/412/GetFacilityState.java\n@@ -176,7 +176,7 @@ public class GetFacilityState implements JsonCallback, JsonCallbackTable<Facilit\n \t\t\t\t\treturn \"\";\n \t\t\t\t}\n \t\t\t\telse if (row.getState().equalsIgnoreCase(\"OK\")){\n-\t\t\t\t\n+\n \t\t\t\t\treturn \"rowgreen\";\n \t\t\t\t}\n \t\t\t\telse if (row.getState().equalsIgnoreCase(\"PROCESSING\")){\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/412/GetFacilityState.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/412/GetFacilityState.java\nindex 65775498146..7553a7c59b9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/412/GetFacilityState.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/412/GetFacilityState.java\n@@ -31,113 +31,113 @@ import java.util.Comparator;\n  */\n public class GetFacilityState implements JsonCallback, JsonCallbackTable<FacilityState>, JsonCallbackOracle<FacilityState> {\n \n-\t// Session\n-\tprivate PerunWebSession session = PerunWebSession.getInstance();\n-\t// JSON URL\n-\tstatic private final String JSON_URL = \"tasksManager/getFacilityState\";\n-\t// External events\n-\tprivate JsonCallbackEvents events = new JsonCallbackEvents();\n-\t// data providers\n-\tprivate ListDataProvider<FacilityState> dataProvider = new ListDataProvider<FacilityState>();\n-\tprivate ArrayList<FacilityState> list = new ArrayList<FacilityState>();\n-\tprivate PerunTable<FacilityState> table;\n-\t// Selection model\n-\tfinal MultiSelectionModel<FacilityState> selectionModel = new MultiSelectionModel<FacilityState>(new FacilityStateKeyProvider());\n-\t// loader image\n-\tprivate AjaxLoaderImage loaderImage = new AjaxLoaderImage();\n-\tprivate int facilityId = 0;\n-\tprivate int voId = 0;\n-\t// oracle support\n-\tprivate ArrayList<FacilityState> fullBackup = new ArrayList<FacilityState>();\n-\tprivate UnaccentMultiWordSuggestOracle oracle = new UnaccentMultiWordSuggestOracle();\n-\n-\t/**\n-\t * New instance of get facility state\n-\t *\n-\t * @param facilityId - can be 0 if we want all facilities\n-\t * @param voId - if NOT ZERO, get all facilities related to this VO\n-\t */\n-\tpublic GetFacilityState(int facilityId, int voId) {\n-\t\tthis.facilityId = facilityId;\n-\t\tthis.voId = voId;\n-\t}\n-\n-\t/**\n-\t * New instance of get facility state with external events\n-\t *\n-\t * @param facilityId - can be 0 if we want all facilities\n-\t * @param voId - if NOT ZERO, get all facilities related to this VO\n-\t * @param events external events\n-\t */\n-\tpublic GetFacilityState(int facilityId, int voId, JsonCallbackEvents events) {\n-\t\tthis.facilityId = facilityId;\n-\t\tthis.voId = voId;\n-\t\tthis.events = events;\n-\t}\n-\n-\t/**\n-\t * Return table with owners - starts RPC call\n-\t *\n-\t * @return table widget\n-\t */\n-\tpublic CellTable<FacilityState> getTable() {\n-\n-\t\tretrieveData();\n-\n-\t\t// Table data provider.\n-\t\tdataProvider = new ListDataProvider<FacilityState>(list);\n-\n-\t\t// Cell table\n-\t\ttable = new PerunTable<FacilityState>(list);\n-\n-\t\t// Connect the table to the data provider.\n-\t\tdataProvider.addDataDisplay(table);\n-\n-\t\t// Sorting\n-\t\tListHandler<FacilityState> columnSortHandler = new ListHandler<FacilityState>(dataProvider.getList());\n-\t\ttable.addColumnSortHandler(columnSortHandler);\n-\n-\t\t// table selection\n-\t\ttable.setSelectionModel(selectionModel, DefaultSelectionEventManager.<FacilityState> createCheckboxManager());\n-\n-\t\t// set empty content & loader\n-\t\ttable.setEmptyTableWidget(loaderImage);\n-\n-\t\t// facility column\n-\t\tColumn<FacilityState, String> facilityColumn = JsonUtils.addColumn(\n-\t\t\t\tnew JsonUtils.GetValue<FacilityState, String>() {\n-\t\t\t\t\tpublic String getValue(FacilityState object) {\n-\t\t\t\t\t\treturn String.valueOf(object.getFacility().getName());\n-\t\t\t\t\t}\n-\t\t\t\t}, new FieldUpdater<FacilityState, String>(){\n-\t\t\t\t\tpublic void update(int index, FacilityState object, String value) {\n-\t\t\t\t\t\tif (session.isPerunAdmin() || session.isFacilityAdmin(object.getFacility().getId())) {\n-\t\t\t\t\t\t\tsession.getTabManager().addTab(new FacilityDetailTabItem(object.getFacility(), 2));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t});\n-\n-\t\tfacilityColumn.setSortable(true);\n-\t\tcolumnSortHandler.setComparator(facilityColumn, new Comparator<FacilityState>(){\n-\t\t\tpublic int compare(FacilityState o1, FacilityState o2) {\n-\t\t\t\treturn o1.getFacility().getName().compareToIgnoreCase((o2.getFacility().getName()));\n-\t\t\t}\n-\t\t});\n-\n-\t\t// status column\n-\t\tColumn<FacilityState, String> statusColumn = JsonUtils.addColumn(\n-\t\t\t\tnew JsonUtils.GetValue<FacilityState, String>() {\n-\t\t\t\t\tpublic String getValue(FacilityState object) {\n-\t\t\t\t\t\treturn String.valueOf(object.getState());\n-\t\t\t\t\t}\n-\t\t\t\t}, null);\n-\n-\t\tstatusColumn.setSortable(true);\n-\t\tcolumnSortHandler.setComparator(statusColumn, new Comparator<FacilityState>(){\n-\t\t\tpublic int compare(FacilityState o1, FacilityState o2) {\n-\t\t\t\treturn o1.getState().compareToIgnoreCase(o2.getState());\n-\t\t\t}\n-\t\t});\n+    // Session\n+    private PerunWebSession session = PerunWebSession.getInstance();\n+    // JSON URL\n+    static private final String JSON_URL = \"tasksManager/getFacilityState\";\n+    // External events\n+    private JsonCallbackEvents events = new JsonCallbackEvents();\n+    // data providers\n+    private ListDataProvider<FacilityState> dataProvider = new ListDataProvider<FacilityState>();\n+    private ArrayList<FacilityState> list = new ArrayList<FacilityState>();\n+    private PerunTable<FacilityState> table;\n+    // Selection model\n+    final MultiSelectionModel<FacilityState> selectionModel = new MultiSelectionModel<FacilityState>(new FacilityStateKeyProvider());\n+    // loader image\n+    private AjaxLoaderImage loaderImage = new AjaxLoaderImage();\n+    private int facilityId = 0;\n+    private int voId = 0;\n+    // oracle support\n+    private ArrayList<FacilityState> fullBackup = new ArrayList<FacilityState>();\n+    private UnaccentMultiWordSuggestOracle oracle = new UnaccentMultiWordSuggestOracle();\n+\n+    /**\n+     * New instance of get facility state\n+     *\n+     * @param facilityId - can be 0 if we want all facilities\n+     * @param voId       - if NOT ZERO, get all facilities related to this VO\n+     */\n+    public GetFacilityState(int facilityId, int voId) {\n+        this.facilityId = facilityId;\n+        this.voId = voId;\n+    }\n+\n+    /**\n+     * New instance of get facility state with external events\n+     *\n+     * @param facilityId - can be 0 if we want all facilities\n+     * @param voId       - if NOT ZERO, get all facilities related to this VO\n+     * @param events     external events\n+     */\n+    public GetFacilityState(int facilityId, int voId, JsonCallbackEvents events) {\n+        this.facilityId = facilityId;\n+        this.voId = voId;\n+        this.events = events;\n+    }\n+\n+    /**\n+     * Return table with owners - starts RPC call\n+     *\n+     * @return table widget\n+     */\n+    public CellTable<FacilityState> getTable() {\n+\n+        retrieveData();\n+\n+        // Table data provider.\n+        dataProvider = new ListDataProvider<FacilityState>(list);\n+\n+        // Cell table\n+        table = new PerunTable<FacilityState>(list);\n+\n+        // Connect the table to the data provider.\n+        dataProvider.addDataDisplay(table);\n+\n+        // Sorting\n+        ListHandler<FacilityState> columnSortHandler = new ListHandler<FacilityState>(dataProvider.getList());\n+        table.addColumnSortHandler(columnSortHandler);\n+\n+        // table selection\n+        table.setSelectionModel(selectionModel, DefaultSelectionEventManager.<FacilityState>createCheckboxManager());\n+\n+        // set empty content & loader\n+        table.setEmptyTableWidget(loaderImage);\n+\n+        // facility column\n+        Column<FacilityState, String> facilityColumn = JsonUtils.addColumn(\n+                new JsonUtils.GetValue<FacilityState, String>() {\n+                    public String getValue(FacilityState object) {\n+                        return String.valueOf(object.getFacility().getName());\n+                    }\n+                }, new FieldUpdater<FacilityState, String>() {\n+                    public void update(int index, FacilityState object, String value) {\n+                        if (session.isPerunAdmin() || session.isFacilityAdmin(object.getFacility().getId())) {\n+                            session.getTabManager().addTab(new FacilityDetailTabItem(object.getFacility(), 2));\n+                        }\n+                    }\n+                });\n+\n+        facilityColumn.setSortable(true);\n+        columnSortHandler.setComparator(facilityColumn, new Comparator<FacilityState>() {\n+            public int compare(FacilityState o1, FacilityState o2) {\n+                return o1.getFacility().getName().compareToIgnoreCase((o2.getFacility().getName()));\n+            }\n+        });\n+\n+        // status column\n+        Column<FacilityState, String> statusColumn = JsonUtils.addColumn(\n+                new JsonUtils.GetValue<FacilityState, String>() {\n+                    public String getValue(FacilityState object) {\n+                        return String.valueOf(object.getState());\n+                    }\n+                }, null);\n+\n+        statusColumn.setSortable(true);\n+        columnSortHandler.setComparator(statusColumn, new Comparator<FacilityState>() {\n+            public int compare(FacilityState o1, FacilityState o2) {\n+                return o1.getState().compareToIgnoreCase(o2.getState());\n+            }\n+        });\n \n \t\t/*\n \t\t// error column\n@@ -164,227 +164,222 @@ public class GetFacilityState implements JsonCallback, JsonCallbackTable<Facilit\n \t\t}, null);\n \t\t*/\n \n-\t\ttable.addColumn(facilityColumn, \"Facility\");\n-\t\ttable.addColumn(statusColumn, \"Propagation state\");\n-\t\t//table.addColumn(errorColumn, \"Nodes in error\");\n-\n-\t\t// set row styles based on task state\n-\t\ttable.setRowStyles(new RowStyles<FacilityState>(){\n-\t\t\tpublic String getStyleNames(FacilityState row, int rowIndex) {\n-\n-\t\t\t\tif (row.getState().equalsIgnoreCase(\"NOT_DETERMINED\")) {\n-\t\t\t\t\treturn \"\";\n-\t\t\t\t}\n-\t\t\t\telse if (row.getState().equalsIgnoreCase(\"OK\")){\n-\t\t\t\t\n-\t\t\t\t\treturn \"rowgreen\";\n-\t\t\t\t}\n-\t\t\t\telse if (row.getState().equalsIgnoreCase(\"PROCESSING\")){\n-\t\t\t\t\treturn \"rowyellow\";\n-\t\t\t\t}\n-\t\t\t\telse if (row.getState().equalsIgnoreCase(\"OPEN\")){\n-\t\t\t\t\treturn \"roworange\";\n-\t\t\t\t}\n-\t\t\t\telse if (row.getState().equalsIgnoreCase(\"ERROR\")){\n-\t\t\t\t\treturn \"rowred\";\n-\t\t\t\t}\n-\t\t\t\telse if (row.getState().equalsIgnoreCase(\"WARNING\")){\n-\t\t\t\t\treturn \"rowgreenyellow\";\n-\t\t\t\t}\n-\t\t\t\treturn \"\";\n-\n-\t\t\t}\n-\t\t});\n-\n-\t\treturn table;\n-\n-\t}\n-\n-\t/**\n-\t * Sorts table by objects Name\n-\t */\n-\tpublic void sortTable() {\n-\t\tlist = new TableSorter<FacilityState>().sortByFacilityName(getList());\n-\t\tdataProvider.flush();\n-\t\tdataProvider.refresh();\n-\t}\n-\n-\t/**\n-\t * Add object as new row to table\n-\t *\n-\t * @param object FacilityState to be added as new row\n-\t */\n-\tpublic void addToTable(FacilityState object) {\n-\t\tlist.add(object);\n-\t\toracle.add(object.getFacility().getName());\n-\t\tdataProvider.flush();\n-\t\tdataProvider.refresh();\n-\t}\n-\n-\t/**\n-\t * Removes object as row from table\n-\t *\n-\t * @param object FacilityState to be removed as row\n-\t */\n-\tpublic void removeFromTable(FacilityState object) {\n-\t\tlist.remove(object);\n-\t\tselectionModel.getSelectedSet().remove(object);\n-\t\tdataProvider.flush();\n-\t\tdataProvider.refresh();\n-\t}\n-\n-\t/**\n-\t * Clear all table content\n-\t */\n-\tpublic void clearTable(){\n-\t\tloaderImage.loadingStart();\n-\t\tlist.clear();\n-\t\tfullBackup.clear();\n-\t\tselectionModel.clear();\n-\t\tdataProvider.flush();\n-\t\tdataProvider.refresh();\n-\t}\n-\n-\t/**\n-\t * Clears list of selected items\n-\t */\n-\tpublic void clearTableSelectedSet(){\n-\t\tselectionModel.clear();\n-\t}\n-\n-\t/**\n-\t * Return selected items from list\n-\t *\n-\t * @return return list of checked items\n-\t */\n-\tpublic ArrayList<FacilityState> getTableSelectedList(){\n-\t\treturn JsonUtils.setToList(selectionModel.getSelectedSet());\n-\t}\n-\n-\t/**\n-\t * Called, when an error occurs\n-\t */\n-\tpublic void onError(PerunError error) {\n-\t\tsession.getUiElements().setLogErrorText(\"Error while loading FacilityState\");\n-\t\tloaderImage.loadingError(error);\n-\t\tevents.onError(error);\n-\t}\n-\n-\t/**\n-\t * Called, when loading starts\n-\t */\n-\tpublic void onLoadingStart() {\n-\t\tsession.getUiElements().setLogText(\"Loading FacilityState started.\");\n-\t\tevents.onLoadingStart();\n-\t}\n-\n-\t/**\n-\t * Called, when operation finishes successfully.\n-\t */\n-\tpublic void onFinished(JavaScriptObject jso) {\n-\t\tsetList(JsonUtils.<FacilityState>jsoAsList(jso));\n-\t\tsortTable();\n-\t\tsession.getUiElements().setLogText(\"FacilityState loaded: \" + list.size());\n-\t\tevents.onFinished(jso);\n-\t\tloaderImage.loadingFinished();\n-\t}\n-\n-\tpublic void insertToTable(int index, FacilityState object) {\n-\t\tlist.add(index, object);\n-\t\toracle.add(object.getFacility().getName());\n-\t\tdataProvider.flush();\n-\t\tdataProvider.refresh();\n-\t}\n-\n-\tpublic void setEditable(boolean editable) {\n-\t\t// TODO Auto-generated method stub\n-\t}\n-\n-\tpublic void setCheckable(boolean checkable) {\n-\t\t// TODO Auto-generated method stub\n-\t}\n-\n-\tpublic void setList(ArrayList<FacilityState> list) {\n-\t\tclearTable();\n-\t\tthis.list.addAll(list);\n-\t\tdataProvider.flush();\n-\t\tdataProvider.refresh();\n-\t}\n-\n-\tpublic ArrayList<FacilityState> getList() {\n-\t\treturn this.list;\n-\t}\n-\n-\t/**\n-\t * Retrieve data from RPC\n-\t */\n-\tpublic void retrieveData() {\n-\n-\t\tfinal JsonCallback passToCallback = this;\n-\n-\t\tJsonPostClient jsp = new JsonPostClient(new JsonCallbackEvents(){\n-\t\t\t@Override\n-\t\t\tpublic void onFinished(JavaScriptObject jso) {\n-\t\t\t\tpassToCallback.onFinished(jso);\n-\t\t\t}\n-\n-\t\t\t@Override\n-\t\t\tpublic void onError(PerunError error) {\n-\t\t\t\tpassToCallback.onError(error);\n-\t\t\t}\n-\n-\t\t\t@Override\n-\t\t\tpublic void onLoadingStart() {\n-\t\t\t\tpassToCallback.onLoadingStart();\n-\t\t\t}\n-\t\t});\n-\n-\t\tif (facilityId != 0 ){\n-\t\t\t// get specific facility\n-\t\t\tjsp.put(\"facility\", new JSONNumber(facilityId));\n-\t\t\tjsp.sendData(JSON_URL);\n-\t\t} else if (voId == 0) {\n-\t\t\t// get all facilities where user is admin\n-\t\t\tjsp.sendNativeData(\"tasksManager/getAllFacilitiesStates\", \"{}\");\n-\t\t} else {\n-\t\t\t// get facilities related to VO\n-\t\t\tjsp.put(\"vo\", new JSONNumber(voId));\n-\t\t\tjsp.sendData(\"tasksManager/getAllFacilitiesStates\");\n-\t\t}\n-\t}\n-\n-\tpublic UnaccentMultiWordSuggestOracle getOracle(){\n-\t\treturn this.oracle;\n-\t}\n-\n-\tpublic void filterTable(String text){\n-\n-\t\t// store list only for first time\n-\t\tif (fullBackup.isEmpty() || fullBackup == null) {\n-\t\t\tfullBackup.addAll(list);\n-\t\t}\n-\n-\t\t// always clear selected items\n-\t\tselectionModel.clear();\n-\t\tlist.clear();\n-\n-\t\tif (text.equalsIgnoreCase(\"\")) {\n-\t\t\tlist.addAll(fullBackup);\n-\t\t} else {\n-\t\t\tfor (FacilityState fac : fullBackup){\n-\t\t\t\t// store facility by filter\n-\t\t\t\tif (fac.getFacility().getName().toLowerCase().startsWith(text.toLowerCase())) {\n-\t\t\t\t\tlist.add(fac);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\tdataProvider.flush();\n-\t\tdataProvider.refresh();\n-\t\tloaderImage.loadingFinished();\n-\t}\n-\n-\tpublic void setOracle(UnaccentMultiWordSuggestOracle oracle) {\n-\t\tthis.oracle = oracle;\n-\t}\n+        table.addColumn(facilityColumn, \"Facility\");\n+        table.addColumn(statusColumn, \"Propagation state\");\n+        //table.addColumn(errorColumn, \"Nodes in error\");\n+\n+        // set row styles based on task state\n+        table.setRowStyles(new RowStyles<FacilityState>() {\n+            public String getStyleNames(FacilityState row, int rowIndex) {\n+\n+                if (row.getState().equalsIgnoreCase(\"NOT_DETERMINED\")) {\n+                    return \"\";\n+                } else if (row.getState().equalsIgnoreCase(\"OK\")) {\n+\n+                    return \"rowgreen\";\n+                } else if (row.getState().equalsIgnoreCase(\"PROCESSING\")) {\n+                    return \"rowyellow\";\n+                } else if (row.getState().equalsIgnoreCase(\"OPEN\")) {\n+                    return \"roworange\";\n+                } else if (row.getState().equalsIgnoreCase(\"ERROR\")) {\n+                    return \"rowred\";\n+                } else if (row.getState().equalsIgnoreCase(\"WARNING\")) {\n+                    return \"rowgreenyellow\";\n+                }\n+                return \"\";\n+\n+            }\n+        });\n+\n+        return table;\n+\n+    }\n+\n+    /**\n+     * Sorts table by objects Name\n+     */\n+    public void sortTable() {\n+        list = new TableSorter<FacilityState>().sortByFacilityName(getList());\n+        dataProvider.flush();\n+        dataProvider.refresh();\n+    }\n+\n+    /**\n+     * Add object as new row to table\n+     *\n+     * @param object FacilityState to be added as new row\n+     */\n+    public void addToTable(FacilityState object) {\n+        list.add(object);\n+        oracle.add(object.getFacility().getName());\n+        dataProvider.flush();\n+        dataProvider.refresh();\n+    }\n+\n+    /**\n+     * Removes object as row from table\n+     *\n+     * @param object FacilityState to be removed as row\n+     */\n+    public void removeFromTable(FacilityState object) {\n+        list.remove(object);\n+        selectionModel.getSelectedSet().remove(object);\n+        dataProvider.flush();\n+        dataProvider.refresh();\n+    }\n+\n+    /**\n+     * Clear all table content\n+     */\n+    public void clearTable() {\n+        loaderImage.loadingStart();\n+        list.clear();\n+        fullBackup.clear();\n+        selectionModel.clear();\n+        dataProvider.flush();\n+        dataProvider.refresh();\n+    }\n+\n+    /**\n+     * Clears list of selected items\n+     */\n+    public void clearTableSelectedSet() {\n+        selectionModel.clear();\n+    }\n+\n+    /**\n+     * Return selected items from list\n+     *\n+     * @return return list of checked items\n+     */\n+    public ArrayList<FacilityState> getTableSelectedList() {\n+        return JsonUtils.setToList(selectionModel.getSelectedSet());\n+    }\n+\n+    /**\n+     * Called, when an error occurs\n+     */\n+    public void onError(PerunError error) {\n+        session.getUiElements().setLogErrorText(\"Error while loading FacilityState\");\n+        loaderImage.loadingError(error);\n+        events.onError(error);\n+    }\n+\n+    /**\n+     * Called, when loading starts\n+     */\n+    public void onLoadingStart() {\n+        session.getUiElements().setLogText(\"Loading FacilityState started.\");\n+        events.onLoadingStart();\n+    }\n+\n+    /**\n+     * Called, when operation finishes successfully.\n+     */\n+    public void onFinished(JavaScriptObject jso) {\n+        setList(JsonUtils.<FacilityState>jsoAsList(jso));\n+        sortTable();\n+        session.getUiElements().setLogText(\"FacilityState loaded: \" + list.size());\n+        events.onFinished(jso);\n+        loaderImage.loadingFinished();\n+    }\n+\n+    public void insertToTable(int index, FacilityState object) {\n+        list.add(index, object);\n+        oracle.add(object.getFacility().getName());\n+        dataProvider.flush();\n+        dataProvider.refresh();\n+    }\n+\n+    public void setEditable(boolean editable) {\n+        // TODO Auto-generated method stub\n+    }\n+\n+    public void setCheckable(boolean checkable) {\n+        // TODO Auto-generated method stub\n+    }\n+\n+    public void setList(ArrayList<FacilityState> list) {\n+        clearTable();\n+        this.list.addAll(list);\n+        dataProvider.flush();\n+        dataProvider.refresh();\n+    }\n+\n+    public ArrayList<FacilityState> getList() {\n+        return this.list;\n+    }\n+\n+    /**\n+     * Retrieve data from RPC\n+     */\n+    public void retrieveData() {\n+\n+        final JsonCallback passToCallback = this;\n+\n+        JsonPostClient jsp = new JsonPostClient(new JsonCallbackEvents() {\n+            @Override\n+            public void onFinished(JavaScriptObject jso) {\n+                passToCallback.onFinished(jso);\n+            }\n+\n+            @Override\n+            public void onError(PerunError error) {\n+                passToCallback.onError(error);\n+            }\n+\n+            @Override\n+            public void onLoadingStart() {\n+                passToCallback.onLoadingStart();\n+            }\n+        });\n+\n+        if (facilityId != 0) {\n+            // get specific facility\n+            jsp.put(\"facility\", new JSONNumber(facilityId));\n+            jsp.sendData(JSON_URL);\n+        } else if (voId == 0) {\n+            // get all facilities where user is admin\n+            jsp.sendNativeData(\"tasksManager/getAllFacilitiesStates\", \"{}\");\n+        } else {\n+            // get facilities related to VO\n+            jsp.put(\"vo\", new JSONNumber(voId));\n+            jsp.sendData(\"tasksManager/getAllFacilitiesStates\");\n+        }\n+    }\n+\n+    public UnaccentMultiWordSuggestOracle getOracle() {\n+        return this.oracle;\n+    }\n+\n+    public void filterTable(String text) {\n+\n+        // store list only for first time\n+        if (fullBackup.isEmpty() || fullBackup == null) {\n+            fullBackup.addAll(list);\n+        }\n+\n+        // always clear selected items\n+        selectionModel.clear();\n+        list.clear();\n+\n+        if (text.equalsIgnoreCase(\"\")) {\n+            list.addAll(fullBackup);\n+        } else {\n+            for (FacilityState fac : fullBackup) {\n+                // store facility by filter\n+                if (fac.getFacility().getName().toLowerCase().startsWith(text.toLowerCase())) {\n+                    list.add(fac);\n+                }\n+            }\n+        }\n+        dataProvider.flush();\n+        dataProvider.refresh();\n+        loaderImage.loadingFinished();\n+    }\n+\n+    public void setOracle(UnaccentMultiWordSuggestOracle oracle) {\n+        this.oracle = oracle;\n+    }\n \n }\n",
            "diff_size": 329
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/412/GetFacilityState.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/412/GetFacilityState.java\nindex 65775498146..ea7a86607c4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/412/GetFacilityState.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/412/GetFacilityState.java\n@@ -176,7 +176,7 @@ public class GetFacilityState implements JsonCallback, JsonCallbackTable<Facilit\n \t\t\t\t\treturn \"\";\n \t\t\t\t}\n \t\t\t\telse if (row.getState().equalsIgnoreCase(\"OK\")){\n-\t\t\t\t\n+\n \t\t\t\t\treturn \"rowgreen\";\n \t\t\t\t}\n \t\t\t\telse if (row.getState().equalsIgnoreCase(\"PROCESSING\")){\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/412/GetFacilityState.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/412/GetFacilityState.java\nindex 65775498146..97173297b40 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/412/GetFacilityState.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/412/GetFacilityState.java\n@@ -175,9 +175,9 @@ public class GetFacilityState implements JsonCallback, JsonCallbackTable<Facilit\n \t\t\t\tif (row.getState().equalsIgnoreCase(\"NOT_DETERMINED\")) {\n \t\t\t\t\treturn \"\";\n \t\t\t\t}\n-\t\t\t\telse if (row.getState().equalsIgnoreCase(\"OK\")){\n-\t\t\t\t\n-\t\t\t\t\treturn \"rowgreen\";\n+\t\t\t\telse if (row.getState().equalsIgnoreCase(\"OK\"))\n+\n+\t\t\t\t\t{return \"rowgreen\";\n \t\t\t\t}\n \t\t\t\telse if (row.getState().equalsIgnoreCase(\"PROCESSING\")){\n \t\t\t\t\treturn \"rowyellow\";\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}