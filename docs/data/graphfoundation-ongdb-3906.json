{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3906",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "40",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "13",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "13",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "13",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3906/RelationshipGroupRecord.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3906/RelationshipGroupRecord.java\nindex 298a1019690..b9e297c23b1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3906/RelationshipGroupRecord.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3906/RelationshipGroupRecord.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.record;\n \n import java.util.Objects;\n@@ -25,201 +26,203 @@ import static org.neo4j.kernel.impl.store.record.Record.NULL_REFERENCE;\n \n public class RelationshipGroupRecord extends AbstractBaseRecord\n {\n-    private int type;\n-    private long next;\n-    private long firstOut;\n-    private long firstIn;\n-    private long firstLoop;\n-    private long owningNode;\n-\n-    // Not stored, just kept in memory temporarily when loading the group chain\n-    private long prev;\n-\n-    @Deprecated\n-    public RelationshipGroupRecord( long id, int type )\n-    {\n-        super( id );\n-        this.type = type;\n-    }\n-\n-    @Deprecated\n-    public RelationshipGroupRecord( long id, int type, long firstOut, long firstIn, long firstLoop, long owningNode,\n-            boolean inUse )\n-    {\n-        this( id, type, firstOut, firstIn, firstLoop, owningNode, NULL_REFERENCE.intValue(), inUse );\n-    }\n-\n-    @Deprecated\n-    public RelationshipGroupRecord( long id, int type, long firstOut, long firstIn, long firstLoop, long owningNode,\n-            long next, boolean inUse )\n-    {\n-        super( id );\n-        setInUse( inUse );\n-        this.type = type;\n-        this.firstOut = firstOut;\n-        this.firstIn = firstIn;\n-        this.firstLoop = firstLoop;\n-        this.owningNode = owningNode;\n-        this.next = next;\n-    }\n-\n-    public RelationshipGroupRecord( long id )\n-    {\n-        super( id );\n-    }\n-\n-    public RelationshipGroupRecord initialize( boolean inUse, int type,\n-            long firstOut, long firstIn, long firstLoop, long owningNode, long next )\n-    {\n-        super.initialize( inUse );\n-        this.type = type;\n-        this.firstOut = firstOut;\n-        this.firstIn = firstIn;\n-        this.firstLoop = firstLoop;\n-        this.owningNode = owningNode;\n-        this.next = next;\n-        this.prev = NULL_REFERENCE.intValue();\n-        return this;\n-    }\n-\n-    @Override\n-    public void clear()\n-    {\n-        initialize( false, NULL_REFERENCE.intValue(), NULL_REFERENCE.intValue(), NULL_REFERENCE.intValue(),\n-                NULL_REFERENCE.intValue(), NULL_REFERENCE.intValue(), NULL_REFERENCE.intValue() );\n-        prev = NULL_REFERENCE.intValue();\n-    }\n-\n-    public int getType()\n-    {\n-        return type;\n-    }\n-\n-    public void setType( int type )\n-    {\n-        this.type = type;\n-    }\n-\n-    public long getFirstOut()\n-    {\n-        return firstOut;\n-    }\n-\n-    public void setFirstOut( long firstOut )\n-    {\n-        this.firstOut = firstOut;\n-    }\n-\n-    public long getFirstIn()\n-    {\n-        return firstIn;\n-    }\n-\n-    public void setFirstIn( long firstIn )\n-    {\n-        this.firstIn = firstIn;\n-    }\n-\n-    public long getFirstLoop()\n-    {\n-        return firstLoop;\n-    }\n-\n-    public void setFirstLoop( long firstLoop )\n-    {\n-        this.firstLoop = firstLoop;\n-    }\n-\n-    public long getNext()\n-    {\n-        return next;\n-    }\n-\n-    public void setNext( long next )\n-    {\n-        this.next = next;\n-    }\n-\n-    /**\n-     * The previous pointer, i.e. previous group in this chain of groups isn't\n-     * persisted in the store, but only set during reading of the group\n-     * chain.\n-     * @param prev the id of the previous group in this chain.\n-     */\n-    public void setPrev( long prev )\n-    {\n-        this.prev = prev;\n-    }\n-\n-    /**\n-     * The previous pointer, i.e. previous group in this chain of groups isn't\n-     * persisted in the store, but only set during reading of the group\n-     * chain.\n-     * @return the id of the previous group in this chain.\n-     */\n-    public long getPrev()\n-    {\n-        return prev;\n-    }\n-\n-    public long getOwningNode()\n-    {\n-        return owningNode;\n-    }\n-\n-    public void setOwningNode( long owningNode )\n-    {\n-        this.owningNode = owningNode;\n-    }\n-\n-    @Override\n-    public String toString()\n-    {\n-        return \"RelationshipGroup[\" + getId() +\n-               \",type=\" + type +\n-               \",out=\" + firstOut +\n-               \",in=\" + firstIn +\n-               \",loop=\" + firstLoop +\n-               \",prev=\" + prev +\n-               \",next=\" + next +\n-               \",used=\" + inUse() +\n-               \",owner=\" + getOwningNode() +\n-               \",secondaryUnitId=\" + getSecondaryUnitId() + \"]\";\n-    }\n-\n-    @Override\n-    public RelationshipGroupRecord clone()\n-    {\n-        RelationshipGroupRecord clone = new RelationshipGroupRecord( getId() ).initialize( inUse(), type, firstOut,\n-                firstIn, firstLoop, owningNode, next );\n-        clone.setSecondaryUnitId( getSecondaryUnitId() );\n-        return clone;\n-    }\n-\n-    @Override\n-    public boolean equals( Object o )\n-    {\n-        if ( this == o )\n-        {\n-            return true;\n-        }\n-        if ( o == null || getClass() != o.getClass() )\n-        {\n-            return false;\n-        }\n-        if ( !super.equals( o ) )\n-        {\n-            return false;\n-        }\n-        RelationshipGroupRecord that = (RelationshipGroupRecord) o;\n-        return type == that.type && next == that.next && firstOut == that.firstOut && firstIn == that.firstIn &&\n-                firstLoop == that.firstLoop && owningNode == that.owningNode;\n-        // don't compare prev since it's not persisted\n-    }\n-\n-    @Override\n-    public int hashCode()\n-    {\n-        return Objects.hash( super.hashCode(), type, next, firstOut, firstIn, firstLoop, owningNode, prev );\n-    }\n+  private int type;\n+  private long next;\n+  private long firstOut;\n+  private long firstIn;\n+  private long firstLoop;\n+  private long owningNode;\n+\n+  // Not stored, just kept in memory temporarily when loading the group chain\n+  private long prev;\n+\n+  @Deprecated\n+  public RelationshipGroupRecord(long id, int type)\n+  {\n+    super(id);\n+    this.type = type;\n+  }\n+\n+  @Deprecated\n+  public RelationshipGroupRecord(long id, int type, long firstOut, long firstIn, long firstLoop, long owningNode,\n+                                 boolean inUse)\n+  {\n+    this(id, type, firstOut, firstIn, firstLoop, owningNode, NULL_REFERENCE.intValue(), inUse);\n+  }\n+\n+  @Deprecated\n+  public RelationshipGroupRecord(long id, int type, long firstOut, long firstIn, long firstLoop, long owningNode,\n+                                 long next, boolean inUse)\n+  {\n+    super(id);\n+    setInUse(inUse);\n+    this.type = type;\n+    this.firstOut = firstOut;\n+    this.firstIn = firstIn;\n+    this.firstLoop = firstLoop;\n+    this.owningNode = owningNode;\n+    this.next = next;\n+  }\n+\n+  public RelationshipGroupRecord(long id)\n+  {\n+    super(id);\n+  }\n+\n+  public RelationshipGroupRecord initialize(boolean inUse, int type,\n+                                            long firstOut, long firstIn, long firstLoop, long owningNode, long next)\n+  {\n+    super.initialize(inUse);\n+    this.type = type;\n+    this.firstOut = firstOut;\n+    this.firstIn = firstIn;\n+    this.firstLoop = firstLoop;\n+    this.owningNode = owningNode;\n+    this.next = next;\n+    this.prev = NULL_REFERENCE.intValue();\n+    return this;\n+  }\n+\n+  @Override\n+  public void clear()\n+  {\n+    initialize(false, NULL_REFERENCE.intValue(), NULL_REFERENCE.intValue(), NULL_REFERENCE.intValue(),\n+        NULL_REFERENCE.intValue(), NULL_REFERENCE.intValue(), NULL_REFERENCE.intValue());\n+    prev = NULL_REFERENCE.intValue();\n+  }\n+\n+  public int getType()\n+  {\n+    return type;\n+  }\n+\n+  public void setType(int type)\n+  {\n+    this.type = type;\n+  }\n+\n+  public long getFirstOut()\n+  {\n+    return firstOut;\n+  }\n+\n+  public void setFirstOut(long firstOut)\n+  {\n+    this.firstOut = firstOut;\n+  }\n+\n+  public long getFirstIn()\n+  {\n+    return firstIn;\n+  }\n+\n+  public void setFirstIn(long firstIn)\n+  {\n+    this.firstIn = firstIn;\n+  }\n+\n+  public long getFirstLoop()\n+  {\n+    return firstLoop;\n+  }\n+\n+  public void setFirstLoop(long firstLoop)\n+  {\n+    this.firstLoop = firstLoop;\n+  }\n+\n+  public long getNext()\n+  {\n+    return next;\n+  }\n+\n+  public void setNext(long next)\n+  {\n+    this.next = next;\n+  }\n+\n+  /**\n+   * The previous pointer, i.e. previous group in this chain of groups isn't\n+   * persisted in the store, but only set during reading of the group\n+   * chain.\n+   *\n+   * @param prev the id of the previous group in this chain.\n+   */\n+  public void setPrev(long prev)\n+  {\n+    this.prev = prev;\n+  }\n+\n+  /**\n+   * The previous pointer, i.e. previous group in this chain of groups isn't\n+   * persisted in the store, but only set during reading of the group\n+   * chain.\n+   *\n+   * @return the id of the previous group in this chain.\n+   */\n+  public long getPrev()\n+  {\n+    return prev;\n+  }\n+\n+  public long getOwningNode()\n+  {\n+    return owningNode;\n+  }\n+\n+  public void setOwningNode(long owningNode)\n+  {\n+    this.owningNode = owningNode;\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return \"RelationshipGroup[\" + getId() +\n+        \",type=\" + type +\n+        \",out=\" + firstOut +\n+        \",in=\" + firstIn +\n+        \",loop=\" + firstLoop +\n+        \",prev=\" + prev +\n+        \",next=\" + next +\n+        \",used=\" + inUse() +\n+        \",owner=\" + getOwningNode() +\n+        \",secondaryUnitId=\" + getSecondaryUnitId() + \"]\";\n+  }\n+\n+  @Override\n+  public RelationshipGroupRecord clone()\n+  {\n+    RelationshipGroupRecord clone = new RelationshipGroupRecord(getId()).initialize(inUse(), type, firstOut,\n+        firstIn, firstLoop, owningNode, next);\n+    clone.setSecondaryUnitId(getSecondaryUnitId());\n+    return clone;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o)\n+  {\n+    if (this == o)\n+    {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass())\n+    {\n+      return false;\n+    }\n+    if (!super.equals(o))\n+    {\n+      return false;\n+    }\n+    RelationshipGroupRecord that = (RelationshipGroupRecord) o;\n+    return type == that.type && next == that.next && firstOut == that.firstOut && firstIn == that.firstIn &&\n+        firstLoop == that.firstLoop && owningNode == that.owningNode;\n+    // don't compare prev since it's not persisted\n+  }\n+\n+  @Override\n+  public int hashCode()\n+  {\n+    return Objects.hash(super.hashCode(), type, next, firstOut, firstIn, firstLoop, owningNode, prev);\n+  }\n }\n",
            "diff_size": 200
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 190).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "177",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 265).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3906/RelationshipGroupRecord.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3906/RelationshipGroupRecord.java\nindex 298a1019690..3a8f18f800e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3906/RelationshipGroupRecord.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3906/RelationshipGroupRecord.java\n@@ -85,9 +85,8 @@ public class RelationshipGroupRecord extends AbstractBaseRecord\n     @Override\n     public void clear()\n     {\n-        initialize( false, NULL_REFERENCE.intValue(), NULL_REFERENCE.intValue(), NULL_REFERENCE.intValue(),\n-                NULL_REFERENCE.intValue(), NULL_REFERENCE.intValue(), NULL_REFERENCE.intValue() );\n-        prev = NULL_REFERENCE.intValue();\n+        initialize( false, NULL_REFERENCE.intValue(), NULL_REFERENCE.intValue(), NULL_REFERENCE.intValue(), NULL_REFERENCE.intValue(), NULL_REFERENCE.intValue(), NULL_REFERENCE.intValue() );\n+prev = NULL_REFERENCE.intValue();\n     }\n \n     public int getType()\n@@ -175,16 +174,7 @@ public class RelationshipGroupRecord extends AbstractBaseRecord\n     @Override\n     public String toString()\n     {\n-        return \"RelationshipGroup[\" + getId() +\n-               \",type=\" + type +\n-               \",out=\" + firstOut +\n-               \",in=\" + firstIn +\n-               \",loop=\" + firstLoop +\n-               \",prev=\" + prev +\n-               \",next=\" + next +\n-               \",used=\" + inUse() +\n-               \",owner=\" + getOwningNode() +\n-               \",secondaryUnitId=\" + getSecondaryUnitId() + \"]\";\n+        return \"RelationshipGroup[\" + getId() + \",type=\" + type + \",out=\" + firstOut + \",in=\" + firstIn + \",loop=\" + firstLoop + \",prev=\" + prev + \",next=\" + next + \",used=\" + inUse() + \",owner=\" + getOwningNode() + \",secondaryUnitId=\" + getSecondaryUnitId() + \"]\";\n     }\n \n     @Override\n@@ -192,7 +182,7 @@ public class RelationshipGroupRecord extends AbstractBaseRecord\n     {\n         RelationshipGroupRecord clone = new RelationshipGroupRecord( getId() ).initialize( inUse(), type, firstOut,\n                 firstIn, firstLoop, owningNode, next );\n-        clone.setSecondaryUnitId( getSecondaryUnitId() );\n+clone.setSecondaryUnitId( getSecondaryUnitId() );\n         return clone;\n     }\n \n@@ -203,18 +193,21 @@ public class RelationshipGroupRecord extends AbstractBaseRecord\n         {\n             return true;\n         }\n-        if ( o == null || getClass() != o.getClass() )\n+\n+if ( o == null || getClass() != o.getClass() )\n         {\n             return false;\n         }\n-        if ( !super.equals( o ) )\n+\n+if ( !super.equals( o ) )\n         {\n             return false;\n         }\n-        RelationshipGroupRecord that = (RelationshipGroupRecord) o;\n+\n+RelationshipGroupRecord that = (RelationshipGroupRecord) o;\n         return type == that.type && next == that.next && firstOut == that.firstOut && firstIn == that.firstIn &&\n                 firstLoop == that.firstLoop && owningNode == that.owningNode;\n-        // don't compare prev since it's not persisted\n+// don't compare prev since it's not persisted\n     }\n \n     @Override\n@@ -222,4 +215,4 @@ public class RelationshipGroupRecord extends AbstractBaseRecord\n     {\n         return Objects.hash( super.hashCode(), type, next, firstOut, firstIn, firstLoop, owningNode, prev );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 22
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}