{
    "project_name": "couchbase-couchbase-java-client",
    "error_id": "10",
    "information": {
        "errors": [
            {
                "line": "53",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 121).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        ResponseStatus status) throws Exception {\n        if (!TranscoderUtils.hasJsonFlags(flags)) {\n            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-JSON document for \"\n                + \"id \" + id + \", could not decode.\");\n        }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/10/RawJsonTranscoder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/styler/10/RawJsonTranscoder.java\nindex bbecef98f6e..dd6894252c4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/10/RawJsonTranscoder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/styler/10/RawJsonTranscoder.java\n@@ -50,8 +50,9 @@ public class RawJsonTranscoder extends AbstractTranscoder<RawJsonDocument, Strin\n     protected RawJsonDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags,\n         ResponseStatus status) throws Exception {\n         if (!TranscoderUtils.hasJsonFlags(flags)) {\n-            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-JSON document for \"\n-                + \"id \" + id + \", could not decode.\");\n+            throw new TranscodingException(\"Flags (0x\"\n+        + Integer.toHexString(flags) + \") indicate non-JSON document for \"\n+                 + \"id \" + id + \", could not decode.\");\n         }\n \n         String converted = content.toString(CharsetUtil.UTF_8);\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/10/RawJsonTranscoder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/intellij/10/RawJsonTranscoder.java\nindex bbecef98f6e..ac50f1c2aa1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/10/RawJsonTranscoder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/intellij/10/RawJsonTranscoder.java\n@@ -1,16 +1,16 @@\n /**\n  * Copyright (C) 2014 Couchbase, Inc.\n- *\n+ * <p>\n  * Permission is hereby granted, free of charge, to any person obtaining a copy\n  * of this software and associated documentation files (the \"Software\"), to deal\n  * in the Software without restriction, including without limitation the rights\n  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  * copies of the Software, and to permit persons to whom the Software is\n  * furnished to do so, subject to the following conditions:\n- *\n+ * <p>\n  * The above copyright notice and this permission notice shall be included in\n  * all copies or substantial portions of the Software.\n- *\n+ * <p>\n  * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -19,6 +19,7 @@\n  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALING\n  * IN THE SOFTWARE.\n  */\n+\n package com.couchbase.client.java.transcoder;\n \n import com.couchbase.client.core.lang.Tuple;\n@@ -48,10 +49,11 @@ public class RawJsonTranscoder extends AbstractTranscoder<RawJsonDocument, Strin\n \n     @Override\n     protected RawJsonDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags,\n-        ResponseStatus status) throws Exception {\n+                                       ResponseStatus status) throws Exception {\n         if (!TranscoderUtils.hasJsonFlags(flags)) {\n-            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-JSON document for \"\n-                + \"id \" + id + \", could not decode.\");\n+            throw new TranscodingException(\n+                \"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-JSON document for \"\n+                    + \"id \" + id + \", could not decode.\");\n         }\n \n         String converted = content.toString(CharsetUtil.UTF_8);\n@@ -65,7 +67,7 @@ public class RawJsonTranscoder extends AbstractTranscoder<RawJsonDocument, Strin\n \n     @Override\n     public RawJsonDocument newDocument(String id, int expiry, String content, long cas,\n-        MutationToken mutationToken) {\n+                                       MutationToken mutationToken) {\n         return RawJsonDocument.create(id, expiry, content, cas, mutationToken);\n     }\n \n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "49",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "51",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/10/RawJsonTranscoder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/naturalize/10/RawJsonTranscoder.java\nindex bbecef98f6e..52a282e699b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/10/RawJsonTranscoder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/naturalize/10/RawJsonTranscoder.java\n@@ -42,13 +42,11 @@ public class RawJsonTranscoder extends AbstractTranscoder<RawJsonDocument, Strin\n     protected Tuple2<ByteBuf, Integer> doEncode(RawJsonDocument document) throws Exception {\n         return Tuple.create(\n             TranscoderUtils.encodeStringAsUtf8(document.content()),\n-            TranscoderUtils.JSON_COMPAT_FLAGS\n-        );\n+            TranscoderUtils.JSON_COMPAT_FLAGS);\n     }\n \n     @Override\n-    protected RawJsonDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags,\n-        ResponseStatus status) throws Exception {\n+    protected RawJsonDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags, ResponseStatus status) throws Exception {\n         if (!TranscoderUtils.hasJsonFlags(flags)) {\n             throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-JSON document for \"\n                 + \"id \" + id + \", could not decode.\");\n@@ -64,8 +62,7 @@ public class RawJsonTranscoder extends AbstractTranscoder<RawJsonDocument, Strin\n     }\n \n     @Override\n-    public RawJsonDocument newDocument(String id, int expiry, String content, long cas,\n-        MutationToken mutationToken) {\n+    public RawJsonDocument newDocument(String id, int expiry, String content, long cas, MutationToken mutationToken) {\n         return RawJsonDocument.create(id, expiry, content, cas, mutationToken);\n     }\n \n@@ -73,4 +70,4 @@ public class RawJsonTranscoder extends AbstractTranscoder<RawJsonDocument, Strin\n     public Class<RawJsonDocument> documentType() {\n         return RawJsonDocument.class;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "51",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/10/RawJsonTranscoder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/codebuff/10/RawJsonTranscoder.java\nindex bbecef98f6e..1127f646cc4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/10/RawJsonTranscoder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/codebuff/10/RawJsonTranscoder.java\n@@ -36,8 +36,9 @@ import com.couchbase.client.java.error.TranscodingException;\n  * @author Michael Nitschinger\n  * @since 2.0\n  */\n-public class RawJsonTranscoder extends AbstractTranscoder<RawJsonDocument, String> {\n \n+\n+public class RawJsonTranscoder extends AbstractTranscoder<RawJsonDocument, String> {\n     @Override\n     protected Tuple2<ByteBuf, Integer> doEncode(RawJsonDocument document) throws Exception {\n         return Tuple.create(\n@@ -47,13 +48,10 @@ public class RawJsonTranscoder extends AbstractTranscoder<RawJsonDocument, Strin\n     }\n \n     @Override\n-    protected RawJsonDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags,\n-        ResponseStatus status) throws Exception {\n+    protected RawJsonDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags, ResponseStatus status) throws Exception {\n         if (!TranscoderUtils.hasJsonFlags(flags)) {\n-            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-JSON document for \"\n-                + \"id \" + id + \", could not decode.\");\n+            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-JSON document for \" + \"id \" + id + \", could not decode.\");\n         }\n-\n         String converted = content.toString(CharsetUtil.UTF_8);\n         return newDocument(id, expiry, converted, cas);\n     }\n@@ -64,8 +62,7 @@ public class RawJsonTranscoder extends AbstractTranscoder<RawJsonDocument, Strin\n     }\n \n     @Override\n-    public RawJsonDocument newDocument(String id, int expiry, String content, long cas,\n-        MutationToken mutationToken) {\n+    public RawJsonDocument newDocument(String id, int expiry, String content, long cas, MutationToken mutationToken) {\n         return RawJsonDocument.create(id, expiry, content, cas, mutationToken);\n     }\n \n@@ -73,4 +70,4 @@ public class RawJsonTranscoder extends AbstractTranscoder<RawJsonDocument, Strin\n     public Class<RawJsonDocument> documentType() {\n         return RawJsonDocument.class;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/10/RawJsonTranscoder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/styler_three_grams/10/RawJsonTranscoder.java\nindex bbecef98f6e..dd6894252c4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/10/RawJsonTranscoder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/styler_three_grams/10/RawJsonTranscoder.java\n@@ -50,8 +50,9 @@ public class RawJsonTranscoder extends AbstractTranscoder<RawJsonDocument, Strin\n     protected RawJsonDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags,\n         ResponseStatus status) throws Exception {\n         if (!TranscoderUtils.hasJsonFlags(flags)) {\n-            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-JSON document for \"\n-                + \"id \" + id + \", could not decode.\");\n+            throw new TranscodingException(\"Flags (0x\"\n+        + Integer.toHexString(flags) + \") indicate non-JSON document for \"\n+                 + \"id \" + id + \", could not decode.\");\n         }\n \n         String converted = content.toString(CharsetUtil.UTF_8);\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}