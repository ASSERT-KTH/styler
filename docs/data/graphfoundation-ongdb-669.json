{
    "project_name": "graphfoundation-ongdb",
    "error_id": "669",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/669/StackingQueryRegistrationOperations.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/669/StackingQueryRegistrationOperations.java\nindex 7403e5a7583..f3e9311f6e0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/669/StackingQueryRegistrationOperations.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/669/StackingQueryRegistrationOperations.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api;\n \n import java.util.concurrent.atomic.AtomicReference;\n@@ -33,58 +34,58 @@ import org.neo4j.values.virtual.MapValue;\n \n public class StackingQueryRegistrationOperations implements QueryRegistrationOperations\n {\n-    private final MonotonicCounter lastQueryId = MonotonicCounter.newAtomicMonotonicCounter();\n-    private final SystemNanoClock clock;\n-    private final AtomicReference<CpuClock> cpuClockRef;\n-    private final AtomicReference<HeapAllocation> heapAllocationRef;\n+  private final MonotonicCounter lastQueryId = MonotonicCounter.newAtomicMonotonicCounter();\n+  private final SystemNanoClock clock;\n+  private final AtomicReference<CpuClock> cpuClockRef;\n+  private final AtomicReference<HeapAllocation> heapAllocationRef;\n \n-    public StackingQueryRegistrationOperations(\n-            SystemNanoClock clock,\n-            AtomicReference<CpuClock> cpuClockRef,\n-            AtomicReference<HeapAllocation> heapAllocationRef )\n-    {\n-        this.clock = clock;\n-        this.cpuClockRef = cpuClockRef;\n-        this.heapAllocationRef = heapAllocationRef;\n-    }\n+  public StackingQueryRegistrationOperations(\n+      SystemNanoClock clock,\n+      AtomicReference<CpuClock> cpuClockRef,\n+      AtomicReference<HeapAllocation> heapAllocationRef)\n+  {\n+    this.clock = clock;\n+    this.cpuClockRef = cpuClockRef;\n+    this.heapAllocationRef = heapAllocationRef;\n+  }\n \n-    @Override\n-    public Stream<ExecutingQuery> executingQueries( KernelStatement statement )\n-    {\n-        return statement.executingQueryList().queries();\n-    }\n+  @Override\n+  public Stream<ExecutingQuery> executingQueries(KernelStatement statement)\n+  {\n+    return statement.executingQueryList().queries();\n+  }\n \n-    @Override\n-    public void registerExecutingQuery( KernelStatement statement, ExecutingQuery executingQuery )\n-    {\n-        statement.startQueryExecution( executingQuery );\n-    }\n+  @Override\n+  public void registerExecutingQuery(KernelStatement statement, ExecutingQuery executingQuery)\n+  {\n+    statement.startQueryExecution(executingQuery);\n+  }\n \n-    @Override\n-    public ExecutingQuery startQueryExecution(\n-        KernelStatement statement,\n-        ClientConnectionInfo clientConnection,\n-        String queryText,\n-        MapValue queryParameters\n-    )\n-    {\n-        long queryId = lastQueryId.incrementAndGet();\n-        Thread thread = Thread.currentThread();\n-        long threadId = thread.getId();\n-        String threadName = thread.getName();\n-        ExecutingQuery executingQuery =\n-                new ExecutingQuery( queryId, clientConnection, statement.username(), queryText, queryParameters,\n-                        statement.getTransaction().getMetaData(), () -> statement.locks().activeLockCount(),\n-                        statement.getPageCursorTracer(),\n-                        threadId, threadName, clock, cpuClockRef.get(), heapAllocationRef.get() );\n-        registerExecutingQuery( statement, executingQuery );\n-        return executingQuery;\n-    }\n+  @Override\n+  public ExecutingQuery startQueryExecution(\n+      KernelStatement statement,\n+      ClientConnectionInfo clientConnection,\n+      String queryText,\n+      MapValue queryParameters\n+  )\n+  {\n+    long queryId = lastQueryId.incrementAndGet();\n+    Thread thread = Thread.currentThread();\n+    long threadId = thread.getId();\n+    String threadName = thread.getName();\n+    ExecutingQuery executingQuery =\n+        new ExecutingQuery(queryId, clientConnection, statement.username(), queryText, queryParameters,\n+            statement.getTransaction().getMetaData(), () -> statement.locks().activeLockCount(),\n+            statement.getPageCursorTracer(),\n+            threadId, threadName, clock, cpuClockRef.get(), heapAllocationRef.get());\n+    registerExecutingQuery(statement, executingQuery);\n+    return executingQuery;\n+  }\n \n-    @Override\n-    public void unregisterExecutingQuery( KernelStatement statement, ExecutingQuery executingQuery )\n-    {\n-        statement.stopQueryExecution( executingQuery );\n-    }\n+  @Override\n+  public void unregisterExecutingQuery(KernelStatement statement, ExecutingQuery executingQuery)\n+  {\n+    statement.stopQueryExecution(executingQuery);\n+  }\n }\n \n",
            "diff_size": 49
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "41",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 216).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/669/StackingQueryRegistrationOperations.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/669/StackingQueryRegistrationOperations.java\nindex 7403e5a7583..070a6ce12d3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/669/StackingQueryRegistrationOperations.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/669/StackingQueryRegistrationOperations.java\n@@ -38,10 +38,7 @@ public class StackingQueryRegistrationOperations implements QueryRegistrationOpe\n     private final AtomicReference<CpuClock> cpuClockRef;\n     private final AtomicReference<HeapAllocation> heapAllocationRef;\n \n-    public StackingQueryRegistrationOperations(\n-            SystemNanoClock clock,\n-            AtomicReference<CpuClock> cpuClockRef,\n-            AtomicReference<HeapAllocation> heapAllocationRef )\n+    public StackingQueryRegistrationOperations( SystemNanoClock clock, AtomicReference<CpuClock> cpuClockRef, AtomicReference<HeapAllocation> heapAllocationRef )\n     {\n         this.clock = clock;\n         this.cpuClockRef = cpuClockRef;\n@@ -61,23 +58,18 @@ public class StackingQueryRegistrationOperations implements QueryRegistrationOpe\n     }\n \n     @Override\n-    public ExecutingQuery startQueryExecution(\n-        KernelStatement statement,\n+    public ExecutingQuery startQueryExecution( KernelStatement statement,\n         ClientConnectionInfo clientConnection,\n         String queryText,\n-        MapValue queryParameters\n-    )\n+        MapValue queryParameters )\n     {\n         long queryId = lastQueryId.incrementAndGet();\n         Thread thread = Thread.currentThread();\n         long threadId = thread.getId();\n         String threadName = thread.getName();\n-        ExecutingQuery executingQuery =\n-                new ExecutingQuery( queryId, clientConnection, statement.username(), queryText, queryParameters,\n-                        statement.getTransaction().getMetaData(), () -> statement.locks().activeLockCount(),\n-                        statement.getPageCursorTracer(),\n-                        threadId, threadName, clock, cpuClockRef.get(), heapAllocationRef.get() );\n-        registerExecutingQuery( statement, executingQuery );\n+        ExecutingQuery executingQuery = new ExecutingQuery( queryId, clientConnection, statement.username(), queryText, queryParameters,\n+                        statement.getTransaction().getMetaData(), () -> statement.locks().activeLockCount(), statement.getPageCursorTracer(), threadId, threadName, clock, cpuClockRef.get(), heapAllocationRef.get() );\n+registerExecutingQuery( statement, executingQuery );\n         return executingQuery;\n     }\n \n@@ -86,5 +78,4 @@ public class StackingQueryRegistrationOperations implements QueryRegistrationOpe\n     {\n         statement.stopQueryExecution( executingQuery );\n     }\n-}\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}