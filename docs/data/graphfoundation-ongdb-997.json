{
    "project_name": "graphfoundation-ongdb",
    "error_id": "997",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "80",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "122",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "128",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/997/ConsensusModule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/997/ConsensusModule.java\nindex b40e0559ff4..b6620280e06 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/997/ConsensusModule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/997/ConsensusModule.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.causalclustering.core.consensus;\n \n import java.io.File;\n@@ -65,150 +66,150 @@ import static org.neo4j.time.Clocks.systemClock;\n \n public class ConsensusModule\n {\n-    public static final String RAFT_MEMBERSHIP_NAME = \"membership\";\n-    public static final String RAFT_TERM_NAME = \"term\";\n-    public static final String RAFT_VOTE_NAME = \"vote\";\n-\n-    private final MonitoredRaftLog raftLog;\n-    private final RaftMachine raftMachine;\n-    private final RaftMembershipManager raftMembershipManager;\n-    private final InFlightCache inFlightCache;\n-\n-    private final LeaderAvailabilityTimers leaderAvailabilityTimers;\n-\n-    public ConsensusModule( MemberId myself, final PlatformModule platformModule,\n-            Outbound<MemberId,RaftMessages.RaftMessage> outbound, File clusterStateDirectory,\n-            CoreTopologyService coreTopologyService )\n-    {\n-        final Config config = platformModule.config;\n-        final LogService logging = platformModule.logging;\n-        final FileSystemAbstraction fileSystem = platformModule.fileSystem;\n-        final LifeSupport life = platformModule.life;\n+  public static final String RAFT_MEMBERSHIP_NAME = \"membership\";\n+  public static final String RAFT_TERM_NAME = \"term\";\n+  public static final String RAFT_VOTE_NAME = \"vote\";\n \n-        LogProvider logProvider = logging.getInternalLogProvider();\n+  private final MonitoredRaftLog raftLog;\n+  private final RaftMachine raftMachine;\n+  private final RaftMembershipManager raftMembershipManager;\n+  private final InFlightCache inFlightCache;\n \n-        final CoreReplicatedContentMarshal marshal = new CoreReplicatedContentMarshal();\n+  private final LeaderAvailabilityTimers leaderAvailabilityTimers;\n \n-        RaftLog underlyingLog = createRaftLog( config, life, fileSystem, clusterStateDirectory, marshal, logProvider,\n-                platformModule.jobScheduler );\n+  public ConsensusModule(MemberId myself, final PlatformModule platformModule,\n+                         Outbound<MemberId, RaftMessages.RaftMessage> outbound, File clusterStateDirectory,\n+                         CoreTopologyService coreTopologyService)\n+  {\n+    final Config config = platformModule.config;\n+    final LogService logging = platformModule.logging;\n+    final FileSystemAbstraction fileSystem = platformModule.fileSystem;\n+    final LifeSupport life = platformModule.life;\n \n-        raftLog = new MonitoredRaftLog( underlyingLog, platformModule.monitors );\n+    LogProvider logProvider = logging.getInternalLogProvider();\n \n-        StateStorage<TermState> termState;\n-        StateStorage<VoteState> voteState;\n-        StateStorage<RaftMembershipState> raftMembershipStorage;\n+    final CoreReplicatedContentMarshal marshal = new CoreReplicatedContentMarshal();\n \n-        StateStorage<TermState> durableTermState = life.add(\n-                new DurableStateStorage<>( fileSystem, clusterStateDirectory, RAFT_TERM_NAME, new TermState.Marshal(),\n-                        config.get( CausalClusteringSettings.term_state_size ), logProvider ) );\n+    RaftLog underlyingLog = createRaftLog(config, life, fileSystem, clusterStateDirectory, marshal, logProvider,\n+        platformModule.jobScheduler);\n \n-        termState = new MonitoredTermStateStorage( durableTermState, platformModule.monitors );\n+    raftLog = new MonitoredRaftLog(underlyingLog, platformModule.monitors);\n \n-        voteState = life.add( new DurableStateStorage<>( fileSystem, clusterStateDirectory, RAFT_VOTE_NAME,\n-                new VoteState.Marshal( new MemberId.Marshal() ), config.get( CausalClusteringSettings.vote_state_size ),\n-                logProvider ) );\n+    StateStorage<TermState> termState;\n+    StateStorage<VoteState> voteState;\n+    StateStorage<RaftMembershipState> raftMembershipStorage;\n \n-        raftMembershipStorage = life.add(\n-                new DurableStateStorage<>( fileSystem, clusterStateDirectory, RAFT_MEMBERSHIP_NAME,\n-                        new RaftMembershipState.Marshal(),\n-                        config.get( CausalClusteringSettings.raft_membership_state_size ), logProvider ) );\n+    StateStorage<TermState> durableTermState = life.add(\n+        new DurableStateStorage<>(fileSystem, clusterStateDirectory, RAFT_TERM_NAME, new TermState.Marshal(),\n+            config.get(CausalClusteringSettings.term_state_size), logProvider));\n \n-        TimerService timerService = new TimerService( platformModule.jobScheduler, logProvider );\n+    termState = new MonitoredTermStateStorage(durableTermState, platformModule.monitors);\n \n-        leaderAvailabilityTimers = createElectionTiming( config, timerService, logProvider );\n+    voteState = life.add(new DurableStateStorage<>(fileSystem, clusterStateDirectory, RAFT_VOTE_NAME,\n+        new VoteState.Marshal(new MemberId.Marshal()), config.get(CausalClusteringSettings.vote_state_size),\n+        logProvider));\n \n-        Integer minimumConsensusGroupSize = config.get( CausalClusteringSettings.minimum_core_cluster_size_at_runtime );\n+    raftMembershipStorage = life.add(\n+        new DurableStateStorage<>(fileSystem, clusterStateDirectory, RAFT_MEMBERSHIP_NAME,\n+            new RaftMembershipState.Marshal(),\n+            config.get(CausalClusteringSettings.raft_membership_state_size), logProvider));\n \n-        MemberIdSetBuilder memberSetBuilder = new MemberIdSetBuilder();\n+    TimerService timerService = new TimerService(platformModule.jobScheduler, logProvider);\n \n-        SendToMyself leaderOnlyReplicator = new SendToMyself( myself, outbound );\n+    leaderAvailabilityTimers = createElectionTiming(config, timerService, logProvider);\n \n-        raftMembershipManager = new RaftMembershipManager( leaderOnlyReplicator, memberSetBuilder, raftLog, logProvider,\n-                minimumConsensusGroupSize, leaderAvailabilityTimers.getElectionTimeout(), systemClock(), config.get( join_catch_up_timeout ).toMillis(),\n-                raftMembershipStorage );\n+    Integer minimumConsensusGroupSize = config.get(CausalClusteringSettings.minimum_core_cluster_size_at_runtime);\n \n-        life.add( raftMembershipManager );\n+    MemberIdSetBuilder memberSetBuilder = new MemberIdSetBuilder();\n \n-        inFlightCache = InFlightCacheFactory.create( config, platformModule.monitors );\n+    SendToMyself leaderOnlyReplicator = new SendToMyself(myself, outbound);\n \n-        RaftLogShippingManager logShipping =\n-                new RaftLogShippingManager( outbound, logProvider, raftLog, timerService, systemClock(), myself,\n-                        raftMembershipManager, leaderAvailabilityTimers.getElectionTimeout(), config.get( catchup_batch_size ),\n-                        config.get( log_shipping_max_lag ), inFlightCache );\n+    raftMembershipManager = new RaftMembershipManager(leaderOnlyReplicator, memberSetBuilder, raftLog, logProvider,\n+        minimumConsensusGroupSize, leaderAvailabilityTimers.getElectionTimeout(), systemClock(), config.get(join_catch_up_timeout).toMillis(),\n+        raftMembershipStorage);\n \n-        boolean supportsPreVoting = config.get( CausalClusteringSettings.enable_pre_voting );\n+    life.add(raftMembershipManager);\n \n-        raftMachine = new RaftMachine( myself, termState, voteState, raftLog, leaderAvailabilityTimers,\n-                outbound, logProvider, raftMembershipManager, logShipping, inFlightCache,\n-                config.get( refuse_to_be_leader ),\n-                supportsPreVoting, platformModule.monitors );\n+    inFlightCache = InFlightCacheFactory.create(config, platformModule.monitors);\n \n-        String dbName = config.get( CausalClusteringSettings.database );\n+    RaftLogShippingManager logShipping =\n+        new RaftLogShippingManager(outbound, logProvider, raftLog, timerService, systemClock(), myself,\n+            raftMembershipManager, leaderAvailabilityTimers.getElectionTimeout(), config.get(catchup_batch_size),\n+            config.get(log_shipping_max_lag), inFlightCache);\n \n-        life.add( new RaftCoreTopologyConnector( coreTopologyService, raftMachine, dbName ) );\n-\n-        life.add( logShipping );\n-    }\n-\n-    private LeaderAvailabilityTimers createElectionTiming( Config config, TimerService timerService, LogProvider logProvider )\n-    {\n-        Duration electionTimeout = config.get( CausalClusteringSettings.leader_election_timeout );\n-        return new LeaderAvailabilityTimers( electionTimeout, electionTimeout.dividedBy( 3 ), systemClock(), timerService, logProvider );\n-    }\n+    boolean supportsPreVoting = config.get(CausalClusteringSettings.enable_pre_voting);\n \n-    private RaftLog createRaftLog( Config config, LifeSupport life, FileSystemAbstraction fileSystem,\n-            File clusterStateDirectory, CoreReplicatedContentMarshal marshal, LogProvider logProvider,\n-            JobScheduler scheduler )\n-    {\n-        EnterpriseCoreEditionModule.RaftLogImplementation raftLogImplementation =\n-                EnterpriseCoreEditionModule.RaftLogImplementation\n-                        .valueOf( config.get( CausalClusteringSettings.raft_log_implementation ) );\n-        switch ( raftLogImplementation )\n-        {\n-        case IN_MEMORY:\n-        {\n-            return new InMemoryRaftLog();\n-        }\n-\n-        case SEGMENTED:\n-        {\n-            long rotateAtSize = config.get( CausalClusteringSettings.raft_log_rotation_size );\n-            int readerPoolSize = config.get( CausalClusteringSettings.raft_log_reader_pool_size );\n-\n-            CoreLogPruningStrategy pruningStrategy =\n-                    new CoreLogPruningStrategyFactory( config.get( CausalClusteringSettings.raft_log_pruning_strategy ),\n-                            logProvider ).newInstance();\n-            File directory = new File( clusterStateDirectory, RAFT_LOG_DIRECTORY_NAME );\n-            return life.add( new SegmentedRaftLog( fileSystem, directory, rotateAtSize, marshal, logProvider,\n-                    readerPoolSize, systemClock(), scheduler, pruningStrategy ) );\n-        }\n-        default:\n-            throw new IllegalStateException( \"Unknown raft log implementation: \" + raftLogImplementation );\n-        }\n-    }\n+    raftMachine = new RaftMachine(myself, termState, voteState, raftLog, leaderAvailabilityTimers,\n+        outbound, logProvider, raftMembershipManager, logShipping, inFlightCache,\n+        config.get(refuse_to_be_leader),\n+        supportsPreVoting, platformModule.monitors);\n \n-    public RaftLog raftLog()\n-    {\n-        return raftLog;\n-    }\n+    String dbName = config.get(CausalClusteringSettings.database);\n \n-    public RaftMachine raftMachine()\n-    {\n-        return raftMachine;\n-    }\n+    life.add(new RaftCoreTopologyConnector(coreTopologyService, raftMachine, dbName));\n \n-    public RaftMembershipManager raftMembershipManager()\n-    {\n-        return raftMembershipManager;\n-    }\n+    life.add(logShipping);\n+  }\n \n-    public InFlightCache inFlightCache()\n-    {\n-        return inFlightCache;\n-    }\n+  private LeaderAvailabilityTimers createElectionTiming(Config config, TimerService timerService, LogProvider logProvider)\n+  {\n+    Duration electionTimeout = config.get(CausalClusteringSettings.leader_election_timeout);\n+    return new LeaderAvailabilityTimers(electionTimeout, electionTimeout.dividedBy(3), systemClock(), timerService, logProvider);\n+  }\n \n-    public LeaderAvailabilityTimers getLeaderAvailabilityTimers()\n+  private RaftLog createRaftLog(Config config, LifeSupport life, FileSystemAbstraction fileSystem,\n+                                File clusterStateDirectory, CoreReplicatedContentMarshal marshal, LogProvider logProvider,\n+                                JobScheduler scheduler)\n+  {\n+    EnterpriseCoreEditionModule.RaftLogImplementation raftLogImplementation =\n+        EnterpriseCoreEditionModule.RaftLogImplementation\n+            .valueOf(config.get(CausalClusteringSettings.raft_log_implementation));\n+    switch (raftLogImplementation)\n     {\n-        return leaderAvailabilityTimers;\n+      case IN_MEMORY:\n+      {\n+        return new InMemoryRaftLog();\n+      }\n+\n+      case SEGMENTED:\n+      {\n+        long rotateAtSize = config.get(CausalClusteringSettings.raft_log_rotation_size);\n+        int readerPoolSize = config.get(CausalClusteringSettings.raft_log_reader_pool_size);\n+\n+        CoreLogPruningStrategy pruningStrategy =\n+            new CoreLogPruningStrategyFactory(config.get(CausalClusteringSettings.raft_log_pruning_strategy),\n+                logProvider).newInstance();\n+        File directory = new File(clusterStateDirectory, RAFT_LOG_DIRECTORY_NAME);\n+        return life.add(new SegmentedRaftLog(fileSystem, directory, rotateAtSize, marshal, logProvider,\n+            readerPoolSize, systemClock(), scheduler, pruningStrategy));\n+      }\n+      default:\n+        throw new IllegalStateException(\"Unknown raft log implementation: \" + raftLogImplementation);\n     }\n+  }\n+\n+  public RaftLog raftLog()\n+  {\n+    return raftLog;\n+  }\n+\n+  public RaftMachine raftMachine()\n+  {\n+    return raftMachine;\n+  }\n+\n+  public RaftMembershipManager raftMembershipManager()\n+  {\n+    return raftMembershipManager;\n+  }\n+\n+  public InFlightCache inFlightCache()\n+  {\n+    return inFlightCache;\n+  }\n+\n+  public LeaderAvailabilityTimers getLeaderAvailabilityTimers()\n+  {\n+    return leaderAvailabilityTimers;\n+  }\n }\n",
            "diff_size": 186
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "80",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "99",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 236).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "101",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 221).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "102",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 236).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "109",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "113",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 180).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "133",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 206).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/997/ConsensusModule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/997/ConsensusModule.java\nindex b40e0559ff4..c946c535e04 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/997/ConsensusModule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/997/ConsensusModule.java\n@@ -66,18 +66,18 @@ import static org.neo4j.time.Clocks.systemClock;\n public class ConsensusModule\n {\n     public static final String RAFT_MEMBERSHIP_NAME = \"membership\";\n-    public static final String RAFT_TERM_NAME = \"term\";\n-    public static final String RAFT_VOTE_NAME = \"vote\";\n \n-    private final MonitoredRaftLog raftLog;\n+public static final String RAFT_TERM_NAME = \"term\";\n+\n+public static final String RAFT_VOTE_NAME = \"vote\";\n+private final MonitoredRaftLog raftLog;\n     private final RaftMachine raftMachine;\n     private final RaftMembershipManager raftMembershipManager;\n     private final InFlightCache inFlightCache;\n \n     private final LeaderAvailabilityTimers leaderAvailabilityTimers;\n \n-    public ConsensusModule( MemberId myself, final PlatformModule platformModule,\n-            Outbound<MemberId,RaftMessages.RaftMessage> outbound, File clusterStateDirectory,\n+    public ConsensusModule( MemberId myself, final PlatformModule platformModule, Outbound<MemberId,RaftMessages.RaftMessage> outbound, File clusterStateDirectory,\n             CoreTopologyService coreTopologyService )\n     {\n         final Config config = platformModule.config;\n@@ -88,66 +88,36 @@ public class ConsensusModule\n         LogProvider logProvider = logging.getInternalLogProvider();\n \n         final CoreReplicatedContentMarshal marshal = new CoreReplicatedContentMarshal();\n-\n-        RaftLog underlyingLog = createRaftLog( config, life, fileSystem, clusterStateDirectory, marshal, logProvider,\n+RaftLog underlyingLog = createRaftLog( config, life, fileSystem, clusterStateDirectory, marshal, logProvider,\n                 platformModule.jobScheduler );\n-\n-        raftLog = new MonitoredRaftLog( underlyingLog, platformModule.monitors );\n+raftLog = new MonitoredRaftLog( underlyingLog, platformModule.monitors );\n \n         StateStorage<TermState> termState;\n         StateStorage<VoteState> voteState;\n         StateStorage<RaftMembershipState> raftMembershipStorage;\n \n-        StateStorage<TermState> durableTermState = life.add(\n-                new DurableStateStorage<>( fileSystem, clusterStateDirectory, RAFT_TERM_NAME, new TermState.Marshal(),\n-                        config.get( CausalClusteringSettings.term_state_size ), logProvider ) );\n-\n-        termState = new MonitoredTermStateStorage( durableTermState, platformModule.monitors );\n-\n-        voteState = life.add( new DurableStateStorage<>( fileSystem, clusterStateDirectory, RAFT_VOTE_NAME,\n-                new VoteState.Marshal( new MemberId.Marshal() ), config.get( CausalClusteringSettings.vote_state_size ),\n-                logProvider ) );\n-\n-        raftMembershipStorage = life.add(\n-                new DurableStateStorage<>( fileSystem, clusterStateDirectory, RAFT_MEMBERSHIP_NAME,\n-                        new RaftMembershipState.Marshal(),\n-                        config.get( CausalClusteringSettings.raft_membership_state_size ), logProvider ) );\n-\n-        TimerService timerService = new TimerService( platformModule.jobScheduler, logProvider );\n-\n-        leaderAvailabilityTimers = createElectionTiming( config, timerService, logProvider );\n-\n-        Integer minimumConsensusGroupSize = config.get( CausalClusteringSettings.minimum_core_cluster_size_at_runtime );\n-\n-        MemberIdSetBuilder memberSetBuilder = new MemberIdSetBuilder();\n-\n-        SendToMyself leaderOnlyReplicator = new SendToMyself( myself, outbound );\n-\n-        raftMembershipManager = new RaftMembershipManager( leaderOnlyReplicator, memberSetBuilder, raftLog, logProvider,\n-                minimumConsensusGroupSize, leaderAvailabilityTimers.getElectionTimeout(), systemClock(), config.get( join_catch_up_timeout ).toMillis(),\n-                raftMembershipStorage );\n-\n-        life.add( raftMembershipManager );\n-\n-        inFlightCache = InFlightCacheFactory.create( config, platformModule.monitors );\n-\n-        RaftLogShippingManager logShipping =\n-                new RaftLogShippingManager( outbound, logProvider, raftLog, timerService, systemClock(), myself,\n-                        raftMembershipManager, leaderAvailabilityTimers.getElectionTimeout(), config.get( catchup_batch_size ),\n-                        config.get( log_shipping_max_lag ), inFlightCache );\n-\n-        boolean supportsPreVoting = config.get( CausalClusteringSettings.enable_pre_voting );\n-\n-        raftMachine = new RaftMachine( myself, termState, voteState, raftLog, leaderAvailabilityTimers,\n+        StateStorage<TermState> durableTermState = life.add( new DurableStateStorage<>( fileSystem, clusterStateDirectory, RAFT_TERM_NAME, new TermState.Marshal(), config.get( CausalClusteringSettings.term_state_size ), logProvider ) );\n+termState = new MonitoredTermStateStorage( durableTermState, platformModule.monitors );\n+voteState = life.add( new DurableStateStorage<>( fileSystem, clusterStateDirectory, RAFT_VOTE_NAME, new VoteState.Marshal( new MemberId.Marshal() ), config.get( CausalClusteringSettings.vote_state_size ), logProvider ) );\n+raftMembershipStorage = life.add( new DurableStateStorage<>( fileSystem, clusterStateDirectory, RAFT_MEMBERSHIP_NAME, new RaftMembershipState.Marshal(), config.get( CausalClusteringSettings.raft_membership_state_size ), logProvider ) );\n+TimerService timerService = new TimerService( platformModule.jobScheduler, logProvider );\n+leaderAvailabilityTimers = createElectionTiming( config, timerService, logProvider );\n+Integer minimumConsensusGroupSize = config.get( CausalClusteringSettings.minimum_core_cluster_size_at_runtime );\n+MemberIdSetBuilder memberSetBuilder = new MemberIdSetBuilder();\n+SendToMyself leaderOnlyReplicator = new SendToMyself( myself, outbound );\n+raftMembershipManager = new RaftMembershipManager( leaderOnlyReplicator, memberSetBuilder, raftLog, logProvider,\n+                minimumConsensusGroupSize, leaderAvailabilityTimers.getElectionTimeout(), systemClock(), config.get( join_catch_up_timeout ).toMillis(), raftMembershipStorage );\n+life.add( raftMembershipManager );\n+inFlightCache = InFlightCacheFactory.create( config, platformModule.monitors );\n+RaftLogShippingManager logShipping = new RaftLogShippingManager( outbound, logProvider, raftLog, timerService, systemClock(), myself,\n+                        raftMembershipManager, leaderAvailabilityTimers.getElectionTimeout(), config.get( catchup_batch_size ), config.get( log_shipping_max_lag ), inFlightCache );\n+    boolean supportsPreVoting = config.get( CausalClusteringSettings.enable_pre_voting );\n+raftMachine = new RaftMachine( myself, termState, voteState, raftLog, leaderAvailabilityTimers,\n                 outbound, logProvider, raftMembershipManager, logShipping, inFlightCache,\n-                config.get( refuse_to_be_leader ),\n-                supportsPreVoting, platformModule.monitors );\n-\n-        String dbName = config.get( CausalClusteringSettings.database );\n-\n-        life.add( new RaftCoreTopologyConnector( coreTopologyService, raftMachine, dbName ) );\n-\n-        life.add( logShipping );\n+                config.get( refuse_to_be_leader ), supportsPreVoting, platformModule.monitors );\n+String dbName = config.get( CausalClusteringSettings.database );\n+life.add( new RaftCoreTopologyConnector( coreTopologyService, raftMachine, dbName ) );\n+life.add( logShipping );\n     }\n \n     private LeaderAvailabilityTimers createElectionTiming( Config config, TimerService timerService, LogProvider logProvider )\n@@ -160,29 +130,24 @@ public class ConsensusModule\n             File clusterStateDirectory, CoreReplicatedContentMarshal marshal, LogProvider logProvider,\n             JobScheduler scheduler )\n     {\n-        EnterpriseCoreEditionModule.RaftLogImplementation raftLogImplementation =\n-                EnterpriseCoreEditionModule.RaftLogImplementation\n-                        .valueOf( config.get( CausalClusteringSettings.raft_log_implementation ) );\n-        switch ( raftLogImplementation )\n+        EnterpriseCoreEditionModule.RaftLogImplementation raftLogImplementation = EnterpriseCoreEditionModule.RaftLogImplementation.valueOf( config.get( CausalClusteringSettings.raft_log_implementation ) );\n+switch ( raftLogImplementation )\n         {\n         case IN_MEMORY:\n         {\n             return new InMemoryRaftLog();\n         }\n-\n-        case SEGMENTED:\n+    case SEGMENTED:\n         {\n             long rotateAtSize = config.get( CausalClusteringSettings.raft_log_rotation_size );\n             int readerPoolSize = config.get( CausalClusteringSettings.raft_log_reader_pool_size );\n-\n-            CoreLogPruningStrategy pruningStrategy =\n-                    new CoreLogPruningStrategyFactory( config.get( CausalClusteringSettings.raft_log_pruning_strategy ),\n+CoreLogPruningStrategy pruningStrategy = new CoreLogPruningStrategyFactory( config.get( CausalClusteringSettings.raft_log_pruning_strategy ),\n                             logProvider ).newInstance();\n-            File directory = new File( clusterStateDirectory, RAFT_LOG_DIRECTORY_NAME );\n+File directory = new File( clusterStateDirectory, RAFT_LOG_DIRECTORY_NAME );\n             return life.add( new SegmentedRaftLog( fileSystem, directory, rotateAtSize, marshal, logProvider,\n                     readerPoolSize, systemClock(), scheduler, pruningStrategy ) );\n         }\n-        default:\n+    default:\n             throw new IllegalStateException( \"Unknown raft log implementation: \" + raftLogImplementation );\n         }\n     }\n@@ -211,4 +176,4 @@ public class ConsensusModule\n     {\n         return leaderAvailabilityTimers;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 73
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}