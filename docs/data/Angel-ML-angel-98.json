{
    "project_name": "Angel-ML-angel",
    "error_id": "98",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "41",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/98/CompIntDoubleVectorSplitter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/98/CompIntDoubleVectorSplitter.java\nindex db4de330f61..f6b48dd7a5e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/98/CompIntDoubleVectorSplitter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/98/CompIntDoubleVectorSplitter.java\n@@ -31,7 +31,6 @@ import java.util.Map;\n  * Component int key double value vector splitter\n  */\n public class CompIntDoubleVectorSplitter implements ISplitter {\n-\n   @Override\n   public Map<PartitionKey, RowUpdateSplit> split(Vector vector, List<PartitionKey> parts) {\n     IntDoubleVector[] vecParts = ((CompIntDoubleVector) vector).getPartitions();\n@@ -39,10 +38,8 @@ public class CompIntDoubleVectorSplitter implements ISplitter {\n \n     Map<PartitionKey, RowUpdateSplit> updateSplitMap = new HashMap<>(parts.size());\n     for (int i = 0; i < vecParts.length; i++) {\n-      updateSplitMap.put(parts.get(i),\n-          new CompIntDoubleRowUpdateSplit(vector.getRowId(), vecParts[i],\n-              (int) (parts.get(i).getEndCol() - parts.get(i).getStartCol())));\n-    }\n+      updateSplitMap.put(parts.get(i), new CompIntDoubleRowUpdateSplit(vector.getRowId(), vecParts[i], (int) (parts.get(i).getEndCol() - parts.get(i).getStartCol())));\n+  }\n     return updateSplitMap;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/98/CompIntDoubleVectorSplitter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/98/CompIntDoubleVectorSplitter.java\nindex db4de330f61..476bd026dc7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/98/CompIntDoubleVectorSplitter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/98/CompIntDoubleVectorSplitter.java\n@@ -30,19 +30,19 @@ import java.util.Map;\n /**\n  * Component int key double value vector splitter\n  */\n+\n public class CompIntDoubleVectorSplitter implements ISplitter {\n \n+\n   @Override\n   public Map<PartitionKey, RowUpdateSplit> split(Vector vector, List<PartitionKey> parts) {\n     IntDoubleVector[] vecParts = ((CompIntDoubleVector) vector).getPartitions();\n     assert vecParts.length == parts.size();\n-\n     Map<PartitionKey, RowUpdateSplit> updateSplitMap = new HashMap<>(parts.size());\n     for (int i = 0; i < vecParts.length; i++) {\n-      updateSplitMap.put(parts.get(i),\n-          new CompIntDoubleRowUpdateSplit(vector.getRowId(), vecParts[i],\n-              (int) (parts.get(i).getEndCol() - parts.get(i).getStartCol())));\n+      updateSplitMap.put(parts.get(i), new CompIntDoubleRowUpdateSplit(vector.getRowId(), vecParts[i], (int) (parts.get(i).getEndCol() - parts.get(i).getStartCol())));\n     }\n     return updateSplitMap;\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}