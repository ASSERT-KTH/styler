{
    "project_name": "neo4j-neo4j",
    "error_id": "1203",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "34",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "34",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "132",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1203/KeyPartitioning.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1203/KeyPartitioning.java\nindex f0032bc8639..b2b9d78b3a7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1203/KeyPartitioning.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1203/KeyPartitioning.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.index.internal.gbptree;\n \n import org.apache.commons.lang3.tuple.Pair;\n@@ -28,31 +29,31 @@ import java.util.stream.Collectors;\n \n class KeyPartitioning<KEY>\n {\n-    private final Layout<KEY,?> layout;\n+    private final Layout<KEY, ?> layout;\n \n-    KeyPartitioning( Layout<KEY,?> layout )\n+    KeyPartitioning(Layout<KEY, ?> layout)\n     {\n         this.layout = layout;\n     }\n \n-    public List<Pair<KEY,KEY>> partition( Collection<KEY> keyCandidates, KEY fromInclusive, KEY toExclusive, int numberOfPartitions )\n+    public List<Pair<KEY, KEY>> partition(Collection<KEY> keyCandidates, KEY fromInclusive, KEY toExclusive, int numberOfPartitions)\n     {\n         List<KEY> keys = keyCandidates.stream()\n-                .filter( key -> layout.compare( key, fromInclusive ) > 0 && layout.compare( key, toExclusive ) < 0 )\n-                .collect( Collectors.toList() );\n+          .filter(key -> layout.compare(key, fromInclusive) > 0 && layout.compare(key, toExclusive) < 0)\n+          .collect(Collectors.toList());\n \n-        List<Pair<KEY,KEY>> partitions = new ArrayList<>();\n+        List<Pair<KEY, KEY>> partitions = new ArrayList<>();\n         float stride = keys.size() < numberOfPartitions ? 1 : (1f + keys.size()) / numberOfPartitions;\n         float pos = stride;\n         KEY prev = fromInclusive;\n-        for ( int i = 0; i < numberOfPartitions - 1 && i < keys.size(); i++, pos += stride )\n+        for (int i = 0; i < numberOfPartitions - 1 && i < keys.size(); i++, pos += stride)\n         {\n-            KEY split = keys.get( Math.round( pos ) - 1 );\n-            partitions.add( Pair.of( prev, split ) );\n+            KEY split = keys.get(Math.round(pos) - 1);\n+            partitions.add(Pair.of(prev, split));\n             prev = layout.newKey();\n-            layout.copyKey( split, prev );\n+            layout.copyKey(split, prev);\n         }\n-        partitions.add( Pair.of( prev, toExclusive ) );\n+        partitions.add(Pair.of(prev, toExclusive));\n         return partitions;\n     }\n }\n",
            "diff_size": 12
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1203/KeyPartitioning.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/1203/KeyPartitioning.java\nindex f0032bc8639..3f6731613f6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1203/KeyPartitioning.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/1203/KeyPartitioning.java\n@@ -55,4 +55,4 @@ class KeyPartitioning<KEY>\n         partitions.add( Pair.of( prev, toExclusive ) );\n         return partitions;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}