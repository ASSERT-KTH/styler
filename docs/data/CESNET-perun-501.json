{
    "project_name": "CESNET-perun",
    "error_id": "501",
    "information": {
        "errors": [
            {
                "line": "46",
                "severity": "error",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "\tpublic final static String FREE_ALL_DEN = \"free all denials: \";\n\tpublic final static String FREE_DEN_OF_EXECSERVICE = \"free denial: \";\n\tpublic final static String BAN_SERVICE = \"ban :\"; \n\n\t@Autowired\n\tprivate ExecServiceDao execServiceDao;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/501/GeneralServiceManagerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/501/GeneralServiceManagerImpl.java\nindex 7f33e91fd2f..3108604f163 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/501/GeneralServiceManagerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/501/GeneralServiceManagerImpl.java\n@@ -43,7 +43,7 @@ public class GeneralServiceManagerImpl implements GeneralServiceManager {\n \tpublic final static String FORCE_PROPAGATION = \"force propagation: \";\n \tpublic final static String FREE_ALL_DEN = \"free all denials: \";\n \tpublic final static String FREE_DEN_OF_EXECSERVICE = \"free denial: \";\n-\tpublic final static String BAN_SERVICE = \"ban :\"; \n+\tpublic final static String BAN_SERVICE = \"ban :\";\n \n \t@Autowired\n \tprivate ExecServiceDao execServiceDao;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/501/GeneralServiceManagerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/501/GeneralServiceManagerImpl.java\nindex 7f33e91fd2f..d1d0038ed8a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/501/GeneralServiceManagerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/501/GeneralServiceManagerImpl.java\n@@ -38,312 +38,319 @@ import cz.metacentrum.perun.taskslib.model.ExecService.ExecServiceType;\n @org.springframework.stereotype.Service(value = \"generalServiceManager\")\n public class GeneralServiceManagerImpl implements GeneralServiceManager {\n \n-\tprivate final static Logger log = LoggerFactory.getLogger(GeneralServiceManagerImpl.class);\n-\t// Beginning of the auditer message which triggers service propagation\n-\tpublic final static String FORCE_PROPAGATION = \"force propagation: \";\n-\tpublic final static String FREE_ALL_DEN = \"free all denials: \";\n-\tpublic final static String FREE_DEN_OF_EXECSERVICE = \"free denial: \";\n-\tpublic final static String BAN_SERVICE = \"ban :\"; \n-\n-\t@Autowired\n-\tprivate ExecServiceDao execServiceDao;\n-\t@Autowired\n-\tprivate ExecServiceDenialDao execServiceDenialDao;\n-\t@Autowired\n-\tprivate ExecServiceDependencyDao execServiceDependencyDao;\n-\t@Autowired\n-\tprivate ServicesManager servicesManager;\n-\n-\t@Override\n-\tpublic List<ExecService> listExecServices(PerunSession perunSession) throws ServiceNotExistsException, InternalErrorException, PrivilegeException {\n-\t\treturn execServiceDao.listExecServices();\n-\t}\n-\n-\t@Override\n-\tpublic List<ExecService> listExecServices(PerunSession perunSession, int serviceId) throws ServiceNotExistsException, InternalErrorException, PrivilegeException {\n-\t\treturn execServiceDao.listExecServices(serviceId);\n-\t}\n-\n-\t@Override\n-\tpublic int countExecServices() {\n-\t\treturn execServiceDao.countExecServices();\n-\t}\n-\n-\t@Override\n-\tpublic ExecService getExecService(PerunSession perunSession, int execServiceId) throws InternalErrorException {\n-\t\treturn execServiceDao.getExecService(execServiceId);\n-\t}\n-\n-\t@Override\n-\tpublic int insertExecService(PerunSession perunSession, ExecService execService) throws InternalErrorException, PrivilegeException, ServiceExistsException {\n-\t\tService service = null;\n-\t\ttry {\n-\t\t\tservice = servicesManager.getServiceByName(perunSession, execService.getService().getName());\n-\t\t} catch (ServiceNotExistsException e) {\n-\t\t\tservice = servicesManager.createService(perunSession, execService.getService());\n-\t\t}\n-\t\texecService.setService(service);\n-\t\treturn execServiceDao.insertExecService(execService);\n-\t}\n-\n-\t@Override\n-\tpublic void updateExecService(PerunSession perunSession, ExecService execService) throws ServiceNotExistsException, InternalErrorException, PrivilegeException {\n-\t\tservicesManager.updateService(perunSession, execService.getService());\n-\t\texecServiceDao.updateExecService(execService);\n-\t}\n-\n-\t@Override\n-\tpublic void deleteExecService(ExecService execService) {\n-\t\texecServiceDao.deleteExecService(execService.getId());\n-\t}\n-\n-\t@Override\n-\t@Transactional(rollbackFor = Exception.class)\n-\tpublic void banExecServiceOnFacility(PerunSession sess, ExecService execService, Facility facility) throws InternalErrorException, ServiceAlreadyBannedException {\n-\t\ttry {\n-\t\t\texecServiceDenialDao.banExecServiceOnFacility(execService.getId(), facility.getId());\n-\t\t} catch (DuplicateKeyException ex) {\n-\t\t\tthrow new ServiceAlreadyBannedException(execService.getService(), facility);\n-\t\t}\n-\t\tsess.getPerun().getAuditer().log(sess, \"{} {} on {}\", BAN_SERVICE, execService, facility);\n-\t}\n-\n-\t@Override\n-\tpublic void banExecServiceOnDestination(PerunSession sess, ExecService execService, int destinationId) throws InternalErrorException {\n-\t\texecServiceDenialDao.banExecServiceOnDestination(execService.getId(), destinationId);\n-\t\tsess.getPerun().getAuditer().log(sess, \"{} {} on {}\", BAN_SERVICE, execService, destinationId);\n-\t}\n-\n-\t@Override\n-\tpublic List<ExecService> listDenialsForFacility(PerunSession perunSession, Facility facility) throws InternalErrorException {\n-\t\treturn execServiceDenialDao.listDenialsForFacility(facility.getId());\n-\t}\n-\n-\t@Override\n-\tpublic List<ExecService> listDenialsForDestination(PerunSession perunSession, int destinationId) throws InternalErrorException {\n-\t\treturn execServiceDenialDao.listDenialsForDestination(destinationId);\n-\t}\n-\n-\t@Override\n-\tpublic boolean isExecServiceDeniedOnFacility(ExecService execService, Facility facility) {\n-\t\treturn execServiceDenialDao.isExecServiceDeniedOnFacility(execService.getId(), facility.getId());\n-\t}\n-\n-\t@Override\n-\tpublic boolean isExecServiceDeniedOnDestination(ExecService execService, int destinationId) {\n-\t\treturn execServiceDenialDao.isExecServiceDeniedOnDestination(execService.getId(), destinationId);\n-\t}\n-\t@Override\n-\tpublic void freeAllDenialsOnFacility(PerunSession sess, Facility facility) throws InternalErrorException{\n-\t\texecServiceDenialDao.freeAllDenialsOnFacility(facility.getId());\n-\t\tsess.getPerun().getAuditer().log(sess, \"{} on {}\" ,FREE_ALL_DEN, facility);\n-\t}\n-\n-\t@Override\n-\tpublic void freeAllDenialsOnDestination(PerunSession sess, int destinationId) throws InternalErrorException {\n-\t\texecServiceDenialDao.freeAllDenialsOnDestination(destinationId);\n-\t\tsess.getPerun().getAuditer().log(sess, \"{} on {}\", FREE_ALL_DEN, destinationId);\n-\t}\n-\n-\t@Override\n-\tpublic void freeDenialOfExecServiceOnFacility(PerunSession sess, ExecService execService, Facility facility) throws InternalErrorException {\n-\t\texecServiceDenialDao.freeDenialOfExecServiceOnFacility(execService.getId(), facility.getId());\n-\t\tsess.getPerun().getAuditer().log(sess, \"{} {} on {}\", FREE_DEN_OF_EXECSERVICE, execService, facility);\n-\t}\n-\n-\t@Override\n-\tpublic void freeDenialOfExecServiceOnDestination(PerunSession sess, ExecService execService, int destinationId) throws InternalErrorException {\n-\t\texecServiceDenialDao.freeDenialOfExecServiceOnDestination(execService.getId(), destinationId);\n-\t\tsess.getPerun().getAuditer().log(sess, \"{} {} on {}\", FREE_DEN_OF_EXECSERVICE, execService, destinationId);\n-\t}\n-\n-\t@Override\n-\tpublic void createDependency(ExecService dependantExecService, ExecService execService) {\n-\t\texecServiceDependencyDao.createDependency(dependantExecService.getId(), execService.getId());\n-\t}\n-\n-\t@Override\n-\tpublic void removeDependency(ExecService dependantExecService, ExecService execService) {\n-\t\texecServiceDependencyDao.removeDependency(dependantExecService.getId(), execService.getId());\n-\t}\n-\n-\t@Override\n-\tpublic boolean isThereDependency(ExecService dependantExecService, ExecService execService) {\n-\t\treturn execServiceDependencyDao.isThereDependency(dependantExecService.getId(), execService.getId());\n-\t}\n-\n-\t@Override\n-\tpublic List<ExecService> listExecServicesDependingOn(PerunSession perunSession, ExecService execService) throws InternalErrorException {\n-\t\treturn execServiceDependencyDao.listExecServicesDependingOn(execService.getId());\n-\t}\n-\n-\t@Override\n-\tpublic List<ExecService> listExecServicesThisExecServiceDependsOn(PerunSession perunSession, ExecService dependantExecService) throws InternalErrorException {\n-\t\treturn execServiceDependencyDao.listExecServicesThisExecServiceDependsOn(dependantExecService.getId());\n-\t}\n-\n-\t@Override\n-\tpublic List<ExecService> listExecServicesThisExecServiceDependsOn(PerunSession perunSession, ExecService dependantExecService, ExecServiceType execServiceType) throws InternalErrorException {\n-\t\treturn execServiceDependencyDao.listExecServicesThisExecServiceDependsOn(dependantExecService.getId(), execServiceType);\n-\t}\n-\n-\t@Override\n-\tpublic boolean forceServicePropagation(PerunSession sess, Facility facility, Service service) throws ServiceNotExistsException, FacilityNotExistsException, InternalErrorException, PrivilegeException {\n-\t\tList<ExecService> listOfExecServices = listExecServices(sess, service.getId());\n-\t\tfor(ExecService es: listOfExecServices) {\n-\t\t\t//Global\n-\t\t\tif(!es.isEnabled()) return false;\n-\t\t\t//Local\n-\t\t\tif(execServiceDenialDao.isExecServiceDeniedOnFacility(es.getId(), facility.getId())) return false;\n-\t\t}\n-\t\t//Call log method out of transaction\n-\t\tsess.getPerun().getAuditer().log(sess, FORCE_PROPAGATION + \"On {} and {}\", facility, service);\n-\t\treturn true;\n-\t}\n-\n-\t@Override\n-\tpublic boolean forceServicePropagation(PerunSession sess, Service service) throws ServiceNotExistsException, InternalErrorException, PrivilegeException {\n-\t\tList<ExecService> listOfExecServices = listExecServices(sess, service.getId());\n-\t\tfor(ExecService es: listOfExecServices) {\n-\t\t\t//Global\n-\t\t\tif(!es.isEnabled()) return false;\n-\t\t}\n-\t\t//Call log method out of transaction\n-\t\tsess.getPerun().getAuditer().log(sess, FORCE_PROPAGATION + \"On {} \", service);\n-\t\treturn true;\n-\t}\n-\n-\t@Override\n-\tpublic void deleteService(PerunSession perunSession, Service service) throws InternalErrorException, ServiceNotExistsException, PrivilegeException, RelationExistsException, ServiceAlreadyRemovedException {\n-\t\texecServiceDao.deleteAllExecServicesByService(service.getId());\n-\t\tservicesManager.deleteService(perunSession, service);\n-\t}\n-\n-\t@Override\n-\tpublic List<Service> listServices(PerunSession perunSession) throws InternalErrorException, PrivilegeException {\n-\t\treturn servicesManager.getServices(perunSession);\n-\t}\n-\n-\t@Override\n-\tpublic Service getService(PerunSession perunSession, int serviceId) throws ServiceNotExistsException, InternalErrorException, PrivilegeException {\n-\t\treturn servicesManager.getServiceById(perunSession, serviceId);\n-\t}\n-\n-\t@Override\n-\tpublic List<ServiceForGUI> getFacilityAssignedServicesForGUI(PerunSession perunSession, Facility facility) throws PrivilegeException, FacilityNotExistsException, InternalErrorException {\n-\n-\t\t// result list\n-\t\tList<ServiceForGUI> result = new ArrayList<ServiceForGUI>();\n-\t\t// get assigned services\n-\t\tList<Service> services = getServicesManager().getAssignedServices(perunSession, facility);\n-\t\tfor (Service service : services){\n-\t\t\t// flag\n-\t\t\tboolean allowed = true;\n-\t\t\t// new ServiceForGUI\n-\t\t\tServiceForGUI newService = new ServiceForGUI(service);\n-\t\t\t// get their exec services\n-\t\t\tList<ExecService> execs = execServiceDao.listExecServices(service.getId());\n-\t\t\tfor (ExecService exec : execs){\n-\t\t\t\t// if generate\n-\t\t\t\tif (exec.getExecServiceType().equals(ExecService.ExecServiceType.GENERATE)){\n-\t\t\t\t\tif (execServiceDenialDao.isExecServiceDeniedOnFacility(exec.getId(), facility.getId()) == true) {\n-\t\t\t\t\t\tnewService.setGenAllowedOnFacility(false);\n-\t\t\t\t\t\tallowed = false;\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tnewService.setGenAllowedOnFacility(true);\n-\t\t\t\t\t}\n-\t\t\t\t\tnewService.setGenExecService(exec);\n-\t\t\t\t} else {\n-\t\t\t\t\t// if send\n-\t\t\t\t\tif (execServiceDenialDao.isExecServiceDeniedOnFacility(exec.getId(), facility.getId()) == true) {\n-\t\t\t\t\t\tnewService.setSendAllowedOnFacility(false);\n-\t\t\t\t\t\tallowed = false;\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tnewService.setSendAllowedOnFacility(true);\n-\t\t\t\t\t}\n-\t\t\t\t\tnewService.setSendExecService(exec);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tnewService.setAllowedOnFacility(allowed);\n-\t\t\tresult.add(newService);\n-\t\t}\n-\n-\t\treturn result;\n-\n-\t}\n-\n-\tpublic ExecServiceDao getExecServiceDao() {\n-\t\treturn execServiceDao;\n-\t}\n-\n-\tpublic void setExecServiceDao(ExecServiceDao execServiceDao) {\n-\t\tthis.execServiceDao = execServiceDao;\n-\t}\n-\n-\tpublic ExecServiceDenialDao getExecServiceDenialDao() {\n-\t\treturn execServiceDenialDao;\n-\t}\n-\n-\tpublic void setExecServiceDenialDao(ExecServiceDenialDao execServiceDenialDao) {\n-\t\tthis.execServiceDenialDao = execServiceDenialDao;\n-\t}\n-\n-\tpublic ExecServiceDependencyDao getExecServiceDependencyDao() {\n-\t\treturn execServiceDependencyDao;\n-\t}\n-\n-\tpublic void setExecServiceDependencyDao(ExecServiceDependencyDao execServiceDependencyDao) {\n-\t\tthis.execServiceDependencyDao = execServiceDependencyDao;\n-\t}\n-\n-\tpublic void setServicesManager(ServicesManager servicesManager) {\n-\t\tthis.servicesManager = servicesManager;\n-\t}\n-\n-\tpublic ServicesManager getServicesManager() {\n-\t\treturn servicesManager;\n-\t}\n-\n-\t@Override\n-\t@Transactional(rollbackFor = Exception.class)\n-\tpublic Service createCompleteService(PerunSession perunSession, String serviceName, String scriptPath, int defaultDelay, boolean enabled) throws InternalErrorException, PrivilegeException, ServiceExistsException {\n-\n-\t\tif (!AuthzResolver.isAuthorized(perunSession, Role.PERUNADMIN)) {\n-\t\t\tthrow new PrivilegeException(perunSession, \"createCompleteService\");\n-\t\t}\n-\n-\t\tService service = null;\n-\n-\t\ttry {\n-\t\t\tservice = servicesManager.getServiceByName(perunSession, serviceName);\n-\t\t\tif (service != null) {\n-\t\t\t\tthrow new ServiceExistsException(service);\n-\t\t\t}\n-\t\t} catch (ServiceNotExistsException e) {\n-\t\t\tservice = new Service();\n-\t\t\tservice.setName(serviceName);\n-\t\t\tservice = servicesManager.createService(perunSession, service);\n-\t\t}\n-\n-\t\tExecService genExecService = new ExecService();\n-\t\tgenExecService.setService(service);\n-\t\tgenExecService.setDefaultDelay(defaultDelay);\n-\t\tgenExecService.setEnabled(enabled);\n-\t\tgenExecService.setScript(scriptPath);\n-\t\tgenExecService.setExecServiceType(ExecServiceType.GENERATE);\n-\t\tgenExecService.setId(execServiceDao.insertExecService(genExecService));\n-\n-\t\tExecService sendExecService = new ExecService();\n-\t\tsendExecService.setService(service);\n-\t\tsendExecService.setDefaultDelay(defaultDelay);\n-\t\tsendExecService.setEnabled(enabled);\n-\t\tsendExecService.setScript(scriptPath);\n-\t\tsendExecService.setExecServiceType(ExecServiceType.SEND);\n-\t\tsendExecService.setId(execServiceDao.insertExecService(sendExecService));\n-\n-\t\tthis.createDependency(sendExecService, genExecService);\n-\n-\t\treturn service;\n-\n-\t}\n+    private final static Logger log = LoggerFactory.getLogger(GeneralServiceManagerImpl.class);\n+    // Beginning of the auditer message which triggers service propagation\n+    public final static String FORCE_PROPAGATION = \"force propagation: \";\n+    public final static String FREE_ALL_DEN = \"free all denials: \";\n+    public final static String FREE_DEN_OF_EXECSERVICE = \"free denial: \";\n+    public final static String BAN_SERVICE = \"ban :\";\n+\n+    @Autowired\n+    private ExecServiceDao execServiceDao;\n+    @Autowired\n+    private ExecServiceDenialDao execServiceDenialDao;\n+    @Autowired\n+    private ExecServiceDependencyDao execServiceDependencyDao;\n+    @Autowired\n+    private ServicesManager servicesManager;\n+\n+    @Override\n+    public List<ExecService> listExecServices(PerunSession perunSession) throws ServiceNotExistsException, InternalErrorException, PrivilegeException {\n+        return execServiceDao.listExecServices();\n+    }\n+\n+    @Override\n+    public List<ExecService> listExecServices(PerunSession perunSession, int serviceId) throws ServiceNotExistsException, InternalErrorException, PrivilegeException {\n+        return execServiceDao.listExecServices(serviceId);\n+    }\n+\n+    @Override\n+    public int countExecServices() {\n+        return execServiceDao.countExecServices();\n+    }\n+\n+    @Override\n+    public ExecService getExecService(PerunSession perunSession, int execServiceId) throws InternalErrorException {\n+        return execServiceDao.getExecService(execServiceId);\n+    }\n+\n+    @Override\n+    public int insertExecService(PerunSession perunSession, ExecService execService) throws InternalErrorException, PrivilegeException, ServiceExistsException {\n+        Service service = null;\n+        try {\n+            service = servicesManager.getServiceByName(perunSession, execService.getService().getName());\n+        } catch (ServiceNotExistsException e) {\n+            service = servicesManager.createService(perunSession, execService.getService());\n+        }\n+        execService.setService(service);\n+        return execServiceDao.insertExecService(execService);\n+    }\n+\n+    @Override\n+    public void updateExecService(PerunSession perunSession, ExecService execService) throws ServiceNotExistsException, InternalErrorException, PrivilegeException {\n+        servicesManager.updateService(perunSession, execService.getService());\n+        execServiceDao.updateExecService(execService);\n+    }\n+\n+    @Override\n+    public void deleteExecService(ExecService execService) {\n+        execServiceDao.deleteExecService(execService.getId());\n+    }\n+\n+    @Override\n+    @Transactional(rollbackFor = Exception.class)\n+    public void banExecServiceOnFacility(PerunSession sess, ExecService execService, Facility facility) throws InternalErrorException, ServiceAlreadyBannedException {\n+        try {\n+            execServiceDenialDao.banExecServiceOnFacility(execService.getId(), facility.getId());\n+        } catch (DuplicateKeyException ex) {\n+            throw new ServiceAlreadyBannedException(execService.getService(), facility);\n+        }\n+        sess.getPerun().getAuditer().log(sess, \"{} {} on {}\", BAN_SERVICE, execService, facility);\n+    }\n+\n+    @Override\n+    public void banExecServiceOnDestination(PerunSession sess, ExecService execService, int destinationId) throws InternalErrorException {\n+        execServiceDenialDao.banExecServiceOnDestination(execService.getId(), destinationId);\n+        sess.getPerun().getAuditer().log(sess, \"{} {} on {}\", BAN_SERVICE, execService, destinationId);\n+    }\n+\n+    @Override\n+    public List<ExecService> listDenialsForFacility(PerunSession perunSession, Facility facility) throws InternalErrorException {\n+        return execServiceDenialDao.listDenialsForFacility(facility.getId());\n+    }\n+\n+    @Override\n+    public List<ExecService> listDenialsForDestination(PerunSession perunSession, int destinationId) throws InternalErrorException {\n+        return execServiceDenialDao.listDenialsForDestination(destinationId);\n+    }\n+\n+    @Override\n+    public boolean isExecServiceDeniedOnFacility(ExecService execService, Facility facility) {\n+        return execServiceDenialDao.isExecServiceDeniedOnFacility(execService.getId(), facility.getId());\n+    }\n+\n+    @Override\n+    public boolean isExecServiceDeniedOnDestination(ExecService execService, int destinationId) {\n+        return execServiceDenialDao.isExecServiceDeniedOnDestination(execService.getId(), destinationId);\n+    }\n+\n+    @Override\n+    public void freeAllDenialsOnFacility(PerunSession sess, Facility facility) throws InternalErrorException {\n+        execServiceDenialDao.freeAllDenialsOnFacility(facility.getId());\n+        sess.getPerun().getAuditer().log(sess, \"{} on {}\", FREE_ALL_DEN, facility);\n+    }\n+\n+    @Override\n+    public void freeAllDenialsOnDestination(PerunSession sess, int destinationId) throws InternalErrorException {\n+        execServiceDenialDao.freeAllDenialsOnDestination(destinationId);\n+        sess.getPerun().getAuditer().log(sess, \"{} on {}\", FREE_ALL_DEN, destinationId);\n+    }\n+\n+    @Override\n+    public void freeDenialOfExecServiceOnFacility(PerunSession sess, ExecService execService, Facility facility) throws InternalErrorException {\n+        execServiceDenialDao.freeDenialOfExecServiceOnFacility(execService.getId(), facility.getId());\n+        sess.getPerun().getAuditer().log(sess, \"{} {} on {}\", FREE_DEN_OF_EXECSERVICE, execService, facility);\n+    }\n+\n+    @Override\n+    public void freeDenialOfExecServiceOnDestination(PerunSession sess, ExecService execService, int destinationId) throws InternalErrorException {\n+        execServiceDenialDao.freeDenialOfExecServiceOnDestination(execService.getId(), destinationId);\n+        sess.getPerun().getAuditer().log(sess, \"{} {} on {}\", FREE_DEN_OF_EXECSERVICE, execService, destinationId);\n+    }\n+\n+    @Override\n+    public void createDependency(ExecService dependantExecService, ExecService execService) {\n+        execServiceDependencyDao.createDependency(dependantExecService.getId(), execService.getId());\n+    }\n+\n+    @Override\n+    public void removeDependency(ExecService dependantExecService, ExecService execService) {\n+        execServiceDependencyDao.removeDependency(dependantExecService.getId(), execService.getId());\n+    }\n+\n+    @Override\n+    public boolean isThereDependency(ExecService dependantExecService, ExecService execService) {\n+        return execServiceDependencyDao.isThereDependency(dependantExecService.getId(), execService.getId());\n+    }\n+\n+    @Override\n+    public List<ExecService> listExecServicesDependingOn(PerunSession perunSession, ExecService execService) throws InternalErrorException {\n+        return execServiceDependencyDao.listExecServicesDependingOn(execService.getId());\n+    }\n+\n+    @Override\n+    public List<ExecService> listExecServicesThisExecServiceDependsOn(PerunSession perunSession, ExecService dependantExecService) throws InternalErrorException {\n+        return execServiceDependencyDao.listExecServicesThisExecServiceDependsOn(dependantExecService.getId());\n+    }\n+\n+    @Override\n+    public List<ExecService> listExecServicesThisExecServiceDependsOn(PerunSession perunSession, ExecService dependantExecService, ExecServiceType execServiceType) throws InternalErrorException {\n+        return execServiceDependencyDao.listExecServicesThisExecServiceDependsOn(dependantExecService.getId(), execServiceType);\n+    }\n+\n+    @Override\n+    public boolean forceServicePropagation(PerunSession sess, Facility facility, Service service) throws ServiceNotExistsException, FacilityNotExistsException, InternalErrorException, PrivilegeException {\n+        List<ExecService> listOfExecServices = listExecServices(sess, service.getId());\n+        for (ExecService es : listOfExecServices) {\n+            //Global\n+            if (!es.isEnabled()) {\n+                return false;\n+            }\n+            //Local\n+            if (execServiceDenialDao.isExecServiceDeniedOnFacility(es.getId(), facility.getId())) {\n+                return false;\n+            }\n+        }\n+        //Call log method out of transaction\n+        sess.getPerun().getAuditer().log(sess, FORCE_PROPAGATION + \"On {} and {}\", facility, service);\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean forceServicePropagation(PerunSession sess, Service service) throws ServiceNotExistsException, InternalErrorException, PrivilegeException {\n+        List<ExecService> listOfExecServices = listExecServices(sess, service.getId());\n+        for (ExecService es : listOfExecServices) {\n+            //Global\n+            if (!es.isEnabled()) {\n+                return false;\n+            }\n+        }\n+        //Call log method out of transaction\n+        sess.getPerun().getAuditer().log(sess, FORCE_PROPAGATION + \"On {} \", service);\n+        return true;\n+    }\n+\n+    @Override\n+    public void deleteService(PerunSession perunSession, Service service) throws InternalErrorException, ServiceNotExistsException, PrivilegeException, RelationExistsException, ServiceAlreadyRemovedException {\n+        execServiceDao.deleteAllExecServicesByService(service.getId());\n+        servicesManager.deleteService(perunSession, service);\n+    }\n+\n+    @Override\n+    public List<Service> listServices(PerunSession perunSession) throws InternalErrorException, PrivilegeException {\n+        return servicesManager.getServices(perunSession);\n+    }\n+\n+    @Override\n+    public Service getService(PerunSession perunSession, int serviceId) throws ServiceNotExistsException, InternalErrorException, PrivilegeException {\n+        return servicesManager.getServiceById(perunSession, serviceId);\n+    }\n+\n+    @Override\n+    public List<ServiceForGUI> getFacilityAssignedServicesForGUI(PerunSession perunSession, Facility facility) throws PrivilegeException, FacilityNotExistsException, InternalErrorException {\n+\n+        // result list\n+        List<ServiceForGUI> result = new ArrayList<ServiceForGUI>();\n+        // get assigned services\n+        List<Service> services = getServicesManager().getAssignedServices(perunSession, facility);\n+        for (Service service : services) {\n+            // flag\n+            boolean allowed = true;\n+            // new ServiceForGUI\n+            ServiceForGUI newService = new ServiceForGUI(service);\n+            // get their exec services\n+            List<ExecService> execs = execServiceDao.listExecServices(service.getId());\n+            for (ExecService exec : execs) {\n+                // if generate\n+                if (exec.getExecServiceType().equals(ExecService.ExecServiceType.GENERATE)) {\n+                    if (execServiceDenialDao.isExecServiceDeniedOnFacility(exec.getId(), facility.getId()) == true) {\n+                        newService.setGenAllowedOnFacility(false);\n+                        allowed = false;\n+                    } else {\n+                        newService.setGenAllowedOnFacility(true);\n+                    }\n+                    newService.setGenExecService(exec);\n+                } else {\n+                    // if send\n+                    if (execServiceDenialDao.isExecServiceDeniedOnFacility(exec.getId(), facility.getId()) == true) {\n+                        newService.setSendAllowedOnFacility(false);\n+                        allowed = false;\n+                    } else {\n+                        newService.setSendAllowedOnFacility(true);\n+                    }\n+                    newService.setSendExecService(exec);\n+                }\n+            }\n+            newService.setAllowedOnFacility(allowed);\n+            result.add(newService);\n+        }\n+\n+        return result;\n+\n+    }\n+\n+    public ExecServiceDao getExecServiceDao() {\n+        return execServiceDao;\n+    }\n+\n+    public void setExecServiceDao(ExecServiceDao execServiceDao) {\n+        this.execServiceDao = execServiceDao;\n+    }\n+\n+    public ExecServiceDenialDao getExecServiceDenialDao() {\n+        return execServiceDenialDao;\n+    }\n+\n+    public void setExecServiceDenialDao(ExecServiceDenialDao execServiceDenialDao) {\n+        this.execServiceDenialDao = execServiceDenialDao;\n+    }\n+\n+    public ExecServiceDependencyDao getExecServiceDependencyDao() {\n+        return execServiceDependencyDao;\n+    }\n+\n+    public void setExecServiceDependencyDao(ExecServiceDependencyDao execServiceDependencyDao) {\n+        this.execServiceDependencyDao = execServiceDependencyDao;\n+    }\n+\n+    public void setServicesManager(ServicesManager servicesManager) {\n+        this.servicesManager = servicesManager;\n+    }\n+\n+    public ServicesManager getServicesManager() {\n+        return servicesManager;\n+    }\n+\n+    @Override\n+    @Transactional(rollbackFor = Exception.class)\n+    public Service createCompleteService(PerunSession perunSession, String serviceName, String scriptPath, int defaultDelay, boolean enabled) throws InternalErrorException, PrivilegeException, ServiceExistsException {\n+\n+        if (!AuthzResolver.isAuthorized(perunSession, Role.PERUNADMIN)) {\n+            throw new PrivilegeException(perunSession, \"createCompleteService\");\n+        }\n+\n+        Service service = null;\n+\n+        try {\n+            service = servicesManager.getServiceByName(perunSession, serviceName);\n+            if (service != null) {\n+                throw new ServiceExistsException(service);\n+            }\n+        } catch (ServiceNotExistsException e) {\n+            service = new Service();\n+            service.setName(serviceName);\n+            service = servicesManager.createService(perunSession, service);\n+        }\n+\n+        ExecService genExecService = new ExecService();\n+        genExecService.setService(service);\n+        genExecService.setDefaultDelay(defaultDelay);\n+        genExecService.setEnabled(enabled);\n+        genExecService.setScript(scriptPath);\n+        genExecService.setExecServiceType(ExecServiceType.GENERATE);\n+        genExecService.setId(execServiceDao.insertExecService(genExecService));\n+\n+        ExecService sendExecService = new ExecService();\n+        sendExecService.setService(service);\n+        sendExecService.setDefaultDelay(defaultDelay);\n+        sendExecService.setEnabled(enabled);\n+        sendExecService.setScript(scriptPath);\n+        sendExecService.setExecServiceType(ExecServiceType.SEND);\n+        sendExecService.setId(execServiceDao.insertExecService(sendExecService));\n+\n+        this.createDependency(sendExecService, genExecService);\n+\n+        return service;\n+\n+    }\n }\n",
            "diff_size": 315
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/501/GeneralServiceManagerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/501/GeneralServiceManagerImpl.java\nindex 7f33e91fd2f..379efa82073 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/501/GeneralServiceManagerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/501/GeneralServiceManagerImpl.java\n@@ -2,13 +2,11 @@ package cz.metacentrum.perun.controller.service.impl;\n \n import java.util.ArrayList;\n import java.util.List;\n-\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.dao.DuplicateKeyException;\n import org.springframework.transaction.annotation.Transactional;\n-\n import cz.metacentrum.perun.controller.model.ServiceForGUI;\n import cz.metacentrum.perun.controller.service.GeneralServiceManager;\n import cz.metacentrum.perun.core.api.AuthzResolver;\n@@ -34,316 +32,323 @@ import cz.metacentrum.perun.taskslib.model.ExecService.ExecServiceType;\n /**\n  * @author Michal Karm Babacek\n  */\n+\n+\n @Transactional\n @org.springframework.stereotype.Service(value = \"generalServiceManager\")\n public class GeneralServiceManagerImpl implements GeneralServiceManager {\n \n-\tprivate final static Logger log = LoggerFactory.getLogger(GeneralServiceManagerImpl.class);\n-\t// Beginning of the auditer message which triggers service propagation\n-\tpublic final static String FORCE_PROPAGATION = \"force propagation: \";\n-\tpublic final static String FREE_ALL_DEN = \"free all denials: \";\n-\tpublic final static String FREE_DEN_OF_EXECSERVICE = \"free denial: \";\n-\tpublic final static String BAN_SERVICE = \"ban :\"; \n-\n-\t@Autowired\n-\tprivate ExecServiceDao execServiceDao;\n-\t@Autowired\n-\tprivate ExecServiceDenialDao execServiceDenialDao;\n-\t@Autowired\n-\tprivate ExecServiceDependencyDao execServiceDependencyDao;\n-\t@Autowired\n-\tprivate ServicesManager servicesManager;\n-\n-\t@Override\n-\tpublic List<ExecService> listExecServices(PerunSession perunSession) throws ServiceNotExistsException, InternalErrorException, PrivilegeException {\n-\t\treturn execServiceDao.listExecServices();\n-\t}\n-\n-\t@Override\n-\tpublic List<ExecService> listExecServices(PerunSession perunSession, int serviceId) throws ServiceNotExistsException, InternalErrorException, PrivilegeException {\n-\t\treturn execServiceDao.listExecServices(serviceId);\n-\t}\n-\n-\t@Override\n-\tpublic int countExecServices() {\n-\t\treturn execServiceDao.countExecServices();\n-\t}\n-\n-\t@Override\n-\tpublic ExecService getExecService(PerunSession perunSession, int execServiceId) throws InternalErrorException {\n-\t\treturn execServiceDao.getExecService(execServiceId);\n-\t}\n-\n-\t@Override\n-\tpublic int insertExecService(PerunSession perunSession, ExecService execService) throws InternalErrorException, PrivilegeException, ServiceExistsException {\n-\t\tService service = null;\n-\t\ttry {\n-\t\t\tservice = servicesManager.getServiceByName(perunSession, execService.getService().getName());\n-\t\t} catch (ServiceNotExistsException e) {\n-\t\t\tservice = servicesManager.createService(perunSession, execService.getService());\n-\t\t}\n-\t\texecService.setService(service);\n-\t\treturn execServiceDao.insertExecService(execService);\n-\t}\n-\n-\t@Override\n-\tpublic void updateExecService(PerunSession perunSession, ExecService execService) throws ServiceNotExistsException, InternalErrorException, PrivilegeException {\n-\t\tservicesManager.updateService(perunSession, execService.getService());\n-\t\texecServiceDao.updateExecService(execService);\n-\t}\n-\n-\t@Override\n-\tpublic void deleteExecService(ExecService execService) {\n-\t\texecServiceDao.deleteExecService(execService.getId());\n-\t}\n-\n-\t@Override\n-\t@Transactional(rollbackFor = Exception.class)\n-\tpublic void banExecServiceOnFacility(PerunSession sess, ExecService execService, Facility facility) throws InternalErrorException, ServiceAlreadyBannedException {\n-\t\ttry {\n-\t\t\texecServiceDenialDao.banExecServiceOnFacility(execService.getId(), facility.getId());\n-\t\t} catch (DuplicateKeyException ex) {\n-\t\t\tthrow new ServiceAlreadyBannedException(execService.getService(), facility);\n-\t\t}\n-\t\tsess.getPerun().getAuditer().log(sess, \"{} {} on {}\", BAN_SERVICE, execService, facility);\n-\t}\n-\n-\t@Override\n-\tpublic void banExecServiceOnDestination(PerunSession sess, ExecService execService, int destinationId) throws InternalErrorException {\n-\t\texecServiceDenialDao.banExecServiceOnDestination(execService.getId(), destinationId);\n-\t\tsess.getPerun().getAuditer().log(sess, \"{} {} on {}\", BAN_SERVICE, execService, destinationId);\n-\t}\n-\n-\t@Override\n-\tpublic List<ExecService> listDenialsForFacility(PerunSession perunSession, Facility facility) throws InternalErrorException {\n-\t\treturn execServiceDenialDao.listDenialsForFacility(facility.getId());\n-\t}\n-\n-\t@Override\n-\tpublic List<ExecService> listDenialsForDestination(PerunSession perunSession, int destinationId) throws InternalErrorException {\n-\t\treturn execServiceDenialDao.listDenialsForDestination(destinationId);\n-\t}\n-\n-\t@Override\n-\tpublic boolean isExecServiceDeniedOnFacility(ExecService execService, Facility facility) {\n-\t\treturn execServiceDenialDao.isExecServiceDeniedOnFacility(execService.getId(), facility.getId());\n-\t}\n-\n-\t@Override\n-\tpublic boolean isExecServiceDeniedOnDestination(ExecService execService, int destinationId) {\n-\t\treturn execServiceDenialDao.isExecServiceDeniedOnDestination(execService.getId(), destinationId);\n-\t}\n-\t@Override\n-\tpublic void freeAllDenialsOnFacility(PerunSession sess, Facility facility) throws InternalErrorException{\n-\t\texecServiceDenialDao.freeAllDenialsOnFacility(facility.getId());\n-\t\tsess.getPerun().getAuditer().log(sess, \"{} on {}\" ,FREE_ALL_DEN, facility);\n-\t}\n-\n-\t@Override\n-\tpublic void freeAllDenialsOnDestination(PerunSession sess, int destinationId) throws InternalErrorException {\n-\t\texecServiceDenialDao.freeAllDenialsOnDestination(destinationId);\n-\t\tsess.getPerun().getAuditer().log(sess, \"{} on {}\", FREE_ALL_DEN, destinationId);\n-\t}\n-\n-\t@Override\n-\tpublic void freeDenialOfExecServiceOnFacility(PerunSession sess, ExecService execService, Facility facility) throws InternalErrorException {\n-\t\texecServiceDenialDao.freeDenialOfExecServiceOnFacility(execService.getId(), facility.getId());\n-\t\tsess.getPerun().getAuditer().log(sess, \"{} {} on {}\", FREE_DEN_OF_EXECSERVICE, execService, facility);\n-\t}\n-\n-\t@Override\n-\tpublic void freeDenialOfExecServiceOnDestination(PerunSession sess, ExecService execService, int destinationId) throws InternalErrorException {\n-\t\texecServiceDenialDao.freeDenialOfExecServiceOnDestination(execService.getId(), destinationId);\n-\t\tsess.getPerun().getAuditer().log(sess, \"{} {} on {}\", FREE_DEN_OF_EXECSERVICE, execService, destinationId);\n-\t}\n-\n-\t@Override\n-\tpublic void createDependency(ExecService dependantExecService, ExecService execService) {\n-\t\texecServiceDependencyDao.createDependency(dependantExecService.getId(), execService.getId());\n-\t}\n-\n-\t@Override\n-\tpublic void removeDependency(ExecService dependantExecService, ExecService execService) {\n-\t\texecServiceDependencyDao.removeDependency(dependantExecService.getId(), execService.getId());\n-\t}\n-\n-\t@Override\n-\tpublic boolean isThereDependency(ExecService dependantExecService, ExecService execService) {\n-\t\treturn execServiceDependencyDao.isThereDependency(dependantExecService.getId(), execService.getId());\n-\t}\n-\n-\t@Override\n-\tpublic List<ExecService> listExecServicesDependingOn(PerunSession perunSession, ExecService execService) throws InternalErrorException {\n-\t\treturn execServiceDependencyDao.listExecServicesDependingOn(execService.getId());\n-\t}\n-\n-\t@Override\n-\tpublic List<ExecService> listExecServicesThisExecServiceDependsOn(PerunSession perunSession, ExecService dependantExecService) throws InternalErrorException {\n-\t\treturn execServiceDependencyDao.listExecServicesThisExecServiceDependsOn(dependantExecService.getId());\n-\t}\n-\n-\t@Override\n-\tpublic List<ExecService> listExecServicesThisExecServiceDependsOn(PerunSession perunSession, ExecService dependantExecService, ExecServiceType execServiceType) throws InternalErrorException {\n-\t\treturn execServiceDependencyDao.listExecServicesThisExecServiceDependsOn(dependantExecService.getId(), execServiceType);\n-\t}\n-\n-\t@Override\n-\tpublic boolean forceServicePropagation(PerunSession sess, Facility facility, Service service) throws ServiceNotExistsException, FacilityNotExistsException, InternalErrorException, PrivilegeException {\n-\t\tList<ExecService> listOfExecServices = listExecServices(sess, service.getId());\n-\t\tfor(ExecService es: listOfExecServices) {\n-\t\t\t//Global\n-\t\t\tif(!es.isEnabled()) return false;\n-\t\t\t//Local\n-\t\t\tif(execServiceDenialDao.isExecServiceDeniedOnFacility(es.getId(), facility.getId())) return false;\n-\t\t}\n-\t\t//Call log method out of transaction\n-\t\tsess.getPerun().getAuditer().log(sess, FORCE_PROPAGATION + \"On {} and {}\", facility, service);\n-\t\treturn true;\n-\t}\n-\n-\t@Override\n-\tpublic boolean forceServicePropagation(PerunSession sess, Service service) throws ServiceNotExistsException, InternalErrorException, PrivilegeException {\n-\t\tList<ExecService> listOfExecServices = listExecServices(sess, service.getId());\n-\t\tfor(ExecService es: listOfExecServices) {\n-\t\t\t//Global\n-\t\t\tif(!es.isEnabled()) return false;\n-\t\t}\n-\t\t//Call log method out of transaction\n-\t\tsess.getPerun().getAuditer().log(sess, FORCE_PROPAGATION + \"On {} \", service);\n-\t\treturn true;\n-\t}\n-\n-\t@Override\n-\tpublic void deleteService(PerunSession perunSession, Service service) throws InternalErrorException, ServiceNotExistsException, PrivilegeException, RelationExistsException, ServiceAlreadyRemovedException {\n-\t\texecServiceDao.deleteAllExecServicesByService(service.getId());\n-\t\tservicesManager.deleteService(perunSession, service);\n-\t}\n-\n-\t@Override\n-\tpublic List<Service> listServices(PerunSession perunSession) throws InternalErrorException, PrivilegeException {\n-\t\treturn servicesManager.getServices(perunSession);\n-\t}\n-\n-\t@Override\n-\tpublic Service getService(PerunSession perunSession, int serviceId) throws ServiceNotExistsException, InternalErrorException, PrivilegeException {\n-\t\treturn servicesManager.getServiceById(perunSession, serviceId);\n-\t}\n-\n-\t@Override\n-\tpublic List<ServiceForGUI> getFacilityAssignedServicesForGUI(PerunSession perunSession, Facility facility) throws PrivilegeException, FacilityNotExistsException, InternalErrorException {\n-\n-\t\t// result list\n-\t\tList<ServiceForGUI> result = new ArrayList<ServiceForGUI>();\n-\t\t// get assigned services\n-\t\tList<Service> services = getServicesManager().getAssignedServices(perunSession, facility);\n-\t\tfor (Service service : services){\n-\t\t\t// flag\n-\t\t\tboolean allowed = true;\n-\t\t\t// new ServiceForGUI\n-\t\t\tServiceForGUI newService = new ServiceForGUI(service);\n-\t\t\t// get their exec services\n-\t\t\tList<ExecService> execs = execServiceDao.listExecServices(service.getId());\n-\t\t\tfor (ExecService exec : execs){\n-\t\t\t\t// if generate\n-\t\t\t\tif (exec.getExecServiceType().equals(ExecService.ExecServiceType.GENERATE)){\n-\t\t\t\t\tif (execServiceDenialDao.isExecServiceDeniedOnFacility(exec.getId(), facility.getId()) == true) {\n-\t\t\t\t\t\tnewService.setGenAllowedOnFacility(false);\n-\t\t\t\t\t\tallowed = false;\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tnewService.setGenAllowedOnFacility(true);\n-\t\t\t\t\t}\n-\t\t\t\t\tnewService.setGenExecService(exec);\n-\t\t\t\t} else {\n-\t\t\t\t\t// if send\n-\t\t\t\t\tif (execServiceDenialDao.isExecServiceDeniedOnFacility(exec.getId(), facility.getId()) == true) {\n-\t\t\t\t\t\tnewService.setSendAllowedOnFacility(false);\n-\t\t\t\t\t\tallowed = false;\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tnewService.setSendAllowedOnFacility(true);\n-\t\t\t\t\t}\n-\t\t\t\t\tnewService.setSendExecService(exec);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tnewService.setAllowedOnFacility(allowed);\n-\t\t\tresult.add(newService);\n-\t\t}\n-\n-\t\treturn result;\n-\n-\t}\n-\n-\tpublic ExecServiceDao getExecServiceDao() {\n-\t\treturn execServiceDao;\n-\t}\n-\n-\tpublic void setExecServiceDao(ExecServiceDao execServiceDao) {\n-\t\tthis.execServiceDao = execServiceDao;\n-\t}\n-\n-\tpublic ExecServiceDenialDao getExecServiceDenialDao() {\n-\t\treturn execServiceDenialDao;\n-\t}\n-\n-\tpublic void setExecServiceDenialDao(ExecServiceDenialDao execServiceDenialDao) {\n-\t\tthis.execServiceDenialDao = execServiceDenialDao;\n-\t}\n-\n-\tpublic ExecServiceDependencyDao getExecServiceDependencyDao() {\n-\t\treturn execServiceDependencyDao;\n-\t}\n-\n-\tpublic void setExecServiceDependencyDao(ExecServiceDependencyDao execServiceDependencyDao) {\n-\t\tthis.execServiceDependencyDao = execServiceDependencyDao;\n-\t}\n-\n-\tpublic void setServicesManager(ServicesManager servicesManager) {\n-\t\tthis.servicesManager = servicesManager;\n-\t}\n-\n-\tpublic ServicesManager getServicesManager() {\n-\t\treturn servicesManager;\n-\t}\n-\n-\t@Override\n-\t@Transactional(rollbackFor = Exception.class)\n-\tpublic Service createCompleteService(PerunSession perunSession, String serviceName, String scriptPath, int defaultDelay, boolean enabled) throws InternalErrorException, PrivilegeException, ServiceExistsException {\n-\n-\t\tif (!AuthzResolver.isAuthorized(perunSession, Role.PERUNADMIN)) {\n-\t\t\tthrow new PrivilegeException(perunSession, \"createCompleteService\");\n-\t\t}\n-\n-\t\tService service = null;\n-\n-\t\ttry {\n-\t\t\tservice = servicesManager.getServiceByName(perunSession, serviceName);\n-\t\t\tif (service != null) {\n-\t\t\t\tthrow new ServiceExistsException(service);\n-\t\t\t}\n-\t\t} catch (ServiceNotExistsException e) {\n-\t\t\tservice = new Service();\n-\t\t\tservice.setName(serviceName);\n-\t\t\tservice = servicesManager.createService(perunSession, service);\n-\t\t}\n-\n-\t\tExecService genExecService = new ExecService();\n-\t\tgenExecService.setService(service);\n-\t\tgenExecService.setDefaultDelay(defaultDelay);\n-\t\tgenExecService.setEnabled(enabled);\n-\t\tgenExecService.setScript(scriptPath);\n-\t\tgenExecService.setExecServiceType(ExecServiceType.GENERATE);\n-\t\tgenExecService.setId(execServiceDao.insertExecService(genExecService));\n-\n-\t\tExecService sendExecService = new ExecService();\n-\t\tsendExecService.setService(service);\n-\t\tsendExecService.setDefaultDelay(defaultDelay);\n-\t\tsendExecService.setEnabled(enabled);\n-\t\tsendExecService.setScript(scriptPath);\n-\t\tsendExecService.setExecServiceType(ExecServiceType.SEND);\n-\t\tsendExecService.setId(execServiceDao.insertExecService(sendExecService));\n-\n-\t\tthis.createDependency(sendExecService, genExecService);\n-\n-\t\treturn service;\n-\n-\t}\n-}\n+\n+ private final static Logger log = LoggerFactory.getLogger(GeneralServiceManagerImpl.class);\n+ // Beginning of the auditer message which triggers service propagation\n+\n+ public final static String FORCE_PROPAGATION = \"force propagation: \";\n+\n+ public final static String FREE_ALL_DEN = \"free all denials: \";\n+\n+ public final static String FREE_DEN_OF_EXECSERVICE = \"free denial: \";\n+\n+ public final static String BAN_SERVICE = \"ban :\";\n+\n+ @Autowired\n+ private ExecServiceDao execServiceDao;\n+\n+ @Autowired\n+ private ExecServiceDenialDao execServiceDenialDao;\n+\n+ @Autowired\n+ private ExecServiceDependencyDao execServiceDependencyDao;\n+\n+ @Autowired\n+ private ServicesManager servicesManager;\n+\n+ @Override\n+ public List<ExecService> listExecServices(PerunSession perunSession) throws ServiceNotExistsException, InternalErrorException, PrivilegeException {\n+  return execServiceDao.listExecServices();\n+ }\n+\n+ @Override\n+ public List<ExecService> listExecServices(PerunSession perunSession, int serviceId) throws ServiceNotExistsException, InternalErrorException, PrivilegeException {\n+  return execServiceDao.listExecServices(serviceId);\n+ }\n+\n+ @Override\n+ public int countExecServices() {\n+  return execServiceDao.countExecServices();\n+ }\n+\n+ @Override\n+ public ExecService getExecService(PerunSession perunSession, int execServiceId) throws InternalErrorException {\n+  return execServiceDao.getExecService(execServiceId);\n+ }\n+\n+ @Override\n+ public int insertExecService(PerunSession perunSession, ExecService execService) throws InternalErrorException, PrivilegeException, ServiceExistsException {\n+  Service service = null;\n+  try {\n+   service = servicesManager.getServiceByName(perunSession, execService.getService().getName());\n+  } catch (ServiceNotExistsException e) {\n+   service = servicesManager.createService(perunSession, execService.getService());\n+  }\n+  execService.setService(service);\n+  return execServiceDao.insertExecService(execService);\n+ }\n+\n+ @Override\n+ public void updateExecService(PerunSession perunSession, ExecService execService) throws ServiceNotExistsException, InternalErrorException, PrivilegeException {\n+  servicesManager.updateService(perunSession, execService.getService());\n+  execServiceDao.updateExecService(execService);\n+ }\n+\n+ @Override\n+ public void deleteExecService(ExecService execService) {\n+  execServiceDao.deleteExecService(execService.getId());\n+ }\n+\n+ @Override\n+ @Transactional(rollbackFor = Exception.class)\n+ public void banExecServiceOnFacility(PerunSession sess, ExecService execService, Facility facility) throws InternalErrorException, ServiceAlreadyBannedException {\n+  try {\n+   execServiceDenialDao.banExecServiceOnFacility(execService.getId(), facility.getId());\n+  } catch (DuplicateKeyException ex) {\n+   throw new ServiceAlreadyBannedException(execService.getService(), facility);\n+  }\n+  sess.getPerun().getAuditer().log(sess, \"{} {} on {}\", BAN_SERVICE, execService, facility);\n+ }\n+\n+ @Override\n+ public void banExecServiceOnDestination(PerunSession sess, ExecService execService, int destinationId) throws InternalErrorException {\n+  execServiceDenialDao.banExecServiceOnDestination(execService.getId(), destinationId);\n+  sess.getPerun().getAuditer().log(sess, \"{} {} on {}\", BAN_SERVICE, execService, destinationId);\n+ }\n+\n+ @Override\n+ public List<ExecService> listDenialsForFacility(PerunSession perunSession, Facility facility) throws InternalErrorException {\n+  return execServiceDenialDao.listDenialsForFacility(facility.getId());\n+ }\n+\n+ @Override\n+ public List<ExecService> listDenialsForDestination(PerunSession perunSession, int destinationId) throws InternalErrorException {\n+  return execServiceDenialDao.listDenialsForDestination(destinationId);\n+ }\n+\n+ @Override\n+ public boolean isExecServiceDeniedOnFacility(ExecService execService, Facility facility) {\n+  return execServiceDenialDao.isExecServiceDeniedOnFacility(execService.getId(), facility.getId());\n+ }\n+\n+ @Override\n+ public boolean isExecServiceDeniedOnDestination(ExecService execService, int destinationId) {\n+  return execServiceDenialDao.isExecServiceDeniedOnDestination(execService.getId(), destinationId);\n+ }\n+\n+ @Override\n+ public void freeAllDenialsOnFacility(PerunSession sess, Facility facility) throws InternalErrorException {\n+  execServiceDenialDao.freeAllDenialsOnFacility(facility.getId());\n+  sess.getPerun().getAuditer().log(sess, \"{} on {}\", FREE_ALL_DEN, facility);\n+ }\n+\n+ @Override\n+ public void freeAllDenialsOnDestination(PerunSession sess, int destinationId) throws InternalErrorException {\n+  execServiceDenialDao.freeAllDenialsOnDestination(destinationId);\n+  sess.getPerun().getAuditer().log(sess, \"{} on {}\", FREE_ALL_DEN, destinationId);\n+ }\n+\n+ @Override\n+ public void freeDenialOfExecServiceOnFacility(PerunSession sess, ExecService execService, Facility facility) throws InternalErrorException {\n+  execServiceDenialDao.freeDenialOfExecServiceOnFacility(execService.getId(), facility.getId());\n+  sess.getPerun().getAuditer().log(sess, \"{} {} on {}\", FREE_DEN_OF_EXECSERVICE, execService, facility);\n+ }\n+\n+ @Override\n+ public void freeDenialOfExecServiceOnDestination(PerunSession sess, ExecService execService, int destinationId) throws InternalErrorException {\n+  execServiceDenialDao.freeDenialOfExecServiceOnDestination(execService.getId(), destinationId);\n+  sess.getPerun().getAuditer().log(sess, \"{} {} on {}\", FREE_DEN_OF_EXECSERVICE, execService, destinationId);\n+ }\n+\n+ @Override\n+ public void createDependency(ExecService dependantExecService, ExecService execService) {\n+  execServiceDependencyDao.createDependency(dependantExecService.getId(), execService.getId());\n+ }\n+\n+ @Override\n+ public void removeDependency(ExecService dependantExecService, ExecService execService) {\n+  execServiceDependencyDao.removeDependency(dependantExecService.getId(), execService.getId());\n+ }\n+\n+ @Override\n+ public boolean isThereDependency(ExecService dependantExecService, ExecService execService) {\n+  return execServiceDependencyDao.isThereDependency(dependantExecService.getId(), execService.getId());\n+ }\n+\n+ @Override\n+ public List<ExecService> listExecServicesDependingOn(PerunSession perunSession, ExecService execService) throws InternalErrorException {\n+  return execServiceDependencyDao.listExecServicesDependingOn(execService.getId());\n+ }\n+\n+ @Override\n+ public List<ExecService> listExecServicesThisExecServiceDependsOn(PerunSession perunSession, ExecService dependantExecService) throws InternalErrorException {\n+  return execServiceDependencyDao.listExecServicesThisExecServiceDependsOn(dependantExecService.getId());\n+ }\n+\n+ @Override\n+ public List<ExecService> listExecServicesThisExecServiceDependsOn(PerunSession perunSession, ExecService dependantExecService, ExecServiceType execServiceType) throws InternalErrorException {\n+  return execServiceDependencyDao.listExecServicesThisExecServiceDependsOn(dependantExecService.getId(), execServiceType);\n+ }\n+\n+ @Override\n+ public boolean forceServicePropagation(PerunSession sess, Facility facility, Service service) throws ServiceNotExistsException, FacilityNotExistsException, InternalErrorException, PrivilegeException {\n+  List<ExecService> listOfExecServices = listExecServices(sess, service.getId());\n+  for (ExecService es : listOfExecServices) {\n+   //Global\n+   if (!es.isEnabled())\n+    return false;\n+   //Local\n+   if (execServiceDenialDao.isExecServiceDeniedOnFacility(es.getId(), facility.getId()))\n+    return false;\n+  }\n+  //Call log method out of transaction\n+  sess.getPerun().getAuditer().log(sess, FORCE_PROPAGATION + \"On {} and {}\", facility, service);\n+  return true;\n+ }\n+\n+ @Override\n+ public boolean forceServicePropagation(PerunSession sess, Service service) throws ServiceNotExistsException, InternalErrorException, PrivilegeException {\n+  List<ExecService> listOfExecServices = listExecServices(sess, service.getId());\n+  for (ExecService es : listOfExecServices) {\n+   //Global\n+   if (!es.isEnabled())\n+    return false;\n+  }\n+  //Call log method out of transaction\n+  sess.getPerun().getAuditer().log(sess, FORCE_PROPAGATION + \"On {} \", service);\n+  return true;\n+ }\n+\n+ @Override\n+ public void deleteService(PerunSession perunSession, Service service) throws InternalErrorException, ServiceNotExistsException, PrivilegeException, RelationExistsException, ServiceAlreadyRemovedException {\n+  execServiceDao.deleteAllExecServicesByService(service.getId());\n+  servicesManager.deleteService(perunSession, service);\n+ }\n+\n+ @Override\n+ public List<Service> listServices(PerunSession perunSession) throws InternalErrorException, PrivilegeException {\n+  return servicesManager.getServices(perunSession);\n+ }\n+\n+ @Override\n+ public Service getService(PerunSession perunSession, int serviceId) throws ServiceNotExistsException, InternalErrorException, PrivilegeException {\n+  return servicesManager.getServiceById(perunSession, serviceId);\n+ }\n+\n+ @Override\n+ public List<ServiceForGUI> getFacilityAssignedServicesForGUI(PerunSession perunSession, Facility facility) throws PrivilegeException, FacilityNotExistsException, InternalErrorException {\n+\n+  // result list\n+  List<ServiceForGUI> result = new ArrayList<ServiceForGUI>();\n+  // get assigned services\n+  List<Service> services = getServicesManager().getAssignedServices(perunSession, facility);\n+  for (Service service : services) {\n+   // flag\n+\n+   boolean allowed = true;\n+   // new ServiceForGUI\n+   ServiceForGUI newService = new ServiceForGUI(service);\n+   // get their exec services\n+   List<ExecService> execs = execServiceDao.listExecServices(service.getId());\n+   for (ExecService exec : execs) {\n+    // if generate\n+    if (exec.getExecServiceType().equals(ExecService.ExecServiceType.GENERATE)) {\n+     if (execServiceDenialDao.isExecServiceDeniedOnFacility(exec.getId(), facility.getId()) == true) {\n+      newService.setGenAllowedOnFacility(false);\n+      allowed = false;\n+     } else {\n+      newService.setGenAllowedOnFacility(true);\n+     }\n+     newService.setGenExecService(exec);\n+    } else {\n+     // if send\n+     if (execServiceDenialDao.isExecServiceDeniedOnFacility(exec.getId(), facility.getId()) == true) {\n+      newService.setSendAllowedOnFacility(false);\n+      allowed = false;\n+     } else {\n+      newService.setSendAllowedOnFacility(true);\n+     }\n+     newService.setSendExecService(exec);\n+    }\n+   }\n+   newService.setAllowedOnFacility(allowed);\n+   result.add(newService);\n+  }\n+\n+  return result;\n+ }\n+\n+ public ExecServiceDao getExecServiceDao() {\n+  return execServiceDao;\n+ }\n+\n+ public void setExecServiceDao(ExecServiceDao execServiceDao) {\n+  this.execServiceDao = execServiceDao;\n+ }\n+\n+ public ExecServiceDenialDao getExecServiceDenialDao() {\n+  return execServiceDenialDao;\n+ }\n+\n+ public void setExecServiceDenialDao(ExecServiceDenialDao execServiceDenialDao) {\n+  this.execServiceDenialDao = execServiceDenialDao;\n+ }\n+\n+ public ExecServiceDependencyDao getExecServiceDependencyDao() {\n+  return execServiceDependencyDao;\n+ }\n+\n+ public void setExecServiceDependencyDao(ExecServiceDependencyDao execServiceDependencyDao) {\n+  this.execServiceDependencyDao = execServiceDependencyDao;\n+ }\n+\n+ public void setServicesManager(ServicesManager servicesManager) {\n+  this.servicesManager = servicesManager;\n+ }\n+\n+ public ServicesManager getServicesManager() {\n+  return servicesManager;\n+ }\n+\n+ @Override\n+ @Transactional(rollbackFor = Exception.class)\n+ public Service createCompleteService(PerunSession perunSession, String serviceName, String scriptPath, int defaultDelay, boolean enabled) throws InternalErrorException, PrivilegeException, ServiceExistsException {\n+  if (!AuthzResolver.isAuthorized(perunSession, Role.PERUNADMIN)) {\n+   throw new PrivilegeException(perunSession, \"createCompleteService\");\n+  }\n+  Service service = null;\n+  try {\n+   service = servicesManager.getServiceByName(perunSession, serviceName);\n+   if (service != null) {\n+    throw new ServiceExistsException(service);\n+   }\n+  } catch (ServiceNotExistsException e) {\n+   service = new Service();\n+   service.setName(serviceName);\n+   service = servicesManager.createService(perunSession, service);\n+  }\n+  ExecService genExecService = new ExecService();\n+  genExecService.setService(service);\n+  genExecService.setDefaultDelay(defaultDelay);\n+  genExecService.setEnabled(enabled);\n+  genExecService.setScript(scriptPath);\n+  genExecService.setExecServiceType(ExecServiceType.GENERATE);\n+  genExecService.setId(execServiceDao.insertExecService(genExecService));\n+  ExecService sendExecService = new ExecService();\n+  sendExecService.setService(service);\n+  sendExecService.setDefaultDelay(defaultDelay);\n+  sendExecService.setEnabled(enabled);\n+  sendExecService.setScript(scriptPath);\n+  sendExecService.setExecServiceType(ExecServiceType.SEND);\n+  sendExecService.setId(execServiceDao.insertExecService(sendExecService));\n+  this.createDependency(sendExecService, genExecService);\n+  return service;\n+ }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 318
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/501/GeneralServiceManagerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/501/GeneralServiceManagerImpl.java\nindex 7f33e91fd2f..3108604f163 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/501/GeneralServiceManagerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/501/GeneralServiceManagerImpl.java\n@@ -43,7 +43,7 @@ public class GeneralServiceManagerImpl implements GeneralServiceManager {\n \tpublic final static String FORCE_PROPAGATION = \"force propagation: \";\n \tpublic final static String FREE_ALL_DEN = \"free all denials: \";\n \tpublic final static String FREE_DEN_OF_EXECSERVICE = \"free denial: \";\n-\tpublic final static String BAN_SERVICE = \"ban :\"; \n+\tpublic final static String BAN_SERVICE = \"ban :\";\n \n \t@Autowired\n \tprivate ExecServiceDao execServiceDao;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/501/GeneralServiceManagerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/501/GeneralServiceManagerImpl.java\nindex 7f33e91fd2f..699d830bb2e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/501/GeneralServiceManagerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/501/GeneralServiceManagerImpl.java\n@@ -43,9 +43,8 @@ public class GeneralServiceManagerImpl implements GeneralServiceManager {\n \tpublic final static String FORCE_PROPAGATION = \"force propagation: \";\n \tpublic final static String FREE_ALL_DEN = \"free all denials: \";\n \tpublic final static String FREE_DEN_OF_EXECSERVICE = \"free denial: \";\n-\tpublic final static String BAN_SERVICE = \"ban :\"; \n-\n-\t@Autowired\n+\tpublic final static String BAN_SERVICE =\"ban :\"\n+\t;@Autowired\n \tprivate ExecServiceDao execServiceDao;\n \t@Autowired\n \tprivate ExecServiceDenialDao execServiceDenialDao;\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}