{
    "project_name": "CONNECT-Solution-CONNECT",
    "error_id": "198",
    "information": {
        "errors": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.util;\n\nimport com.google.common.base.Optional;\nimport com.google.common.base.Predicate;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/198/JaxbDocumentUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/198/JaxbDocumentUtils.java\nindex 03fa374bc99..3c382b2c885 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/198/JaxbDocumentUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/198/JaxbDocumentUtils.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.util;\n \n import com.google.common.base.Optional;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/198/JaxbDocumentUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/198/JaxbDocumentUtils.java\nindex 03fa374bc99..d30e67ae226 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/198/JaxbDocumentUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/198/JaxbDocumentUtils.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.util;\n \n import com.google.common.base.Optional;\n@@ -37,30 +38,30 @@ import oasis.names.tc.ebxml_regrep.xsd.rim._3.SlotType1;\n  */\n public final class JaxbDocumentUtils {\n \n-    private JaxbDocumentUtils() {\n-    }\n-\n-    /**\n-     * Null safe pull of the 1st slot value, if a slot of the expectedType exists.\n-     *\n-     * @param slotList list of candidate slots\n-     * @param expectedType type of slot to look for\n-     * @return the 1st value in the 1st matching slot, if found\n-     */\n-    public static Optional<String> findSlotType(List<SlotType1> slotList, final String expectedType) {\n-        Predicate<SlotType1> slotPredicate = new Predicate<SlotType1>() {\n-            @Override\n-            public boolean apply(SlotType1 slot) {\n-                return ((slot != null) && expectedType.equals(slot.getName()) && slot.getValueList() != null\n-                    && !slot.getValueList().getValue().isEmpty());\n-            }\n-        };\n-        Optional<SlotType1> slot = Iterables.tryFind(slotList, slotPredicate);\n+  private JaxbDocumentUtils() {\n+  }\n \n-        if (!slot.isPresent()) {\n-            return Optional.absent();\n-        }\n+  /**\n+   * Null safe pull of the 1st slot value, if a slot of the expectedType exists.\n+   *\n+   * @param slotList     list of candidate slots\n+   * @param expectedType type of slot to look for\n+   * @return the 1st value in the 1st matching slot, if found\n+   */\n+  public static Optional<String> findSlotType(List<SlotType1> slotList, final String expectedType) {\n+    Predicate<SlotType1> slotPredicate = new Predicate<SlotType1>() {\n+      @Override\n+      public boolean apply(SlotType1 slot) {\n+        return ((slot != null) && expectedType.equals(slot.getName()) && slot.getValueList() != null\n+            && !slot.getValueList().getValue().isEmpty());\n+      }\n+    };\n+    Optional<SlotType1> slot = Iterables.tryFind(slotList, slotPredicate);\n \n-        return Optional.of(slot.get().getValueList().getValue().get(0));\n+    if (!slot.isPresent()) {\n+      return Optional.absent();\n     }\n+\n+    return Optional.of(slot.get().getValueList().getValue().get(0));\n+  }\n }\n",
            "diff_size": 41
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 155).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/198/JaxbDocumentUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/198/JaxbDocumentUtils.java\nindex 03fa374bc99..8ca99de955b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/198/JaxbDocumentUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/198/JaxbDocumentUtils.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.util;\n \n import com.google.common.base.Optional;\n@@ -51,16 +52,14 @@ public final class JaxbDocumentUtils {\n         Predicate<SlotType1> slotPredicate = new Predicate<SlotType1>() {\n             @Override\n             public boolean apply(SlotType1 slot) {\n-                return ((slot != null) && expectedType.equals(slot.getName()) && slot.getValueList() != null\n-                    && !slot.getValueList().getValue().isEmpty());\n-            }\n+                return ((slot != null) && expectedType.equals(slot.getName()) && slot.getValueList() != null && !slot.getValueList().getValue().isEmpty());\n+    }\n         };\n         Optional<SlotType1> slot = Iterables.tryFind(slotList, slotPredicate);\n-\n-        if (!slot.isPresent()) {\n+if (!slot.isPresent()) {\n             return Optional.absent();\n         }\n \n         return Optional.of(slot.get().getValueList().getValue().get(0));\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 148).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "60",
                    "column": "76",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "60",
                    "column": "114",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 193).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/198/JaxbDocumentUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/198/JaxbDocumentUtils.java\nindex 03fa374bc99..0fc40edf0ec 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/198/JaxbDocumentUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/198/JaxbDocumentUtils.java\n@@ -35,10 +35,12 @@ import oasis.names.tc.ebxml_regrep.xsd.rim._3.SlotType1;\n /**\n  * Utility methods for working with the JAXB representation of documents.\n  */\n+\n+\n public final class JaxbDocumentUtils {\n \n     private JaxbDocumentUtils() {\n-    }\n+}\n \n     /**\n      * Null safe pull of the 1st slot value, if a slot of the expectedType exists.\n@@ -47,20 +49,24 @@ public final class JaxbDocumentUtils {\n      * @param expectedType type of slot to look for\n      * @return the 1st value in the 1st matching slot, if found\n      */\n+\n+\n     public static Optional<String> findSlotType(List<SlotType1> slotList, final String expectedType) {\n         Predicate<SlotType1> slotPredicate = new Predicate<SlotType1>() {\n-            @Override\n-            public boolean apply(SlotType1 slot) {\n-                return ((slot != null) && expectedType.equals(slot.getName()) && slot.getValueList() != null\n-                    && !slot.getValueList().getValue().isEmpty());\n-            }\n-        };\n-        Optional<SlotType1> slot = Iterables.tryFind(slotList, slotPredicate);\n \n-        if (!slot.isPresent()) {\n+\n+                                                 @Override\n+                                                 public boolean apply(SlotType1 slot) {\n+                                                     return ((slot != null)&& expectedType.equals(slot.getName())&& slot.getValueList() != null && !\n+                                                                                                                                                       slot.getValueList().getValue().isEmpty());\n+                                                 }\n+                                             };\n+        Optional<SlotType1> slot = Iterables.tryFind(slotList, slotPredicate);\n+        if (!\n+                slot.isPresent()) {\n             return Optional.absent();\n         }\n-\n         return Optional.of(slot.get().getValueList().getValue().get(0));\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/198/JaxbDocumentUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/198/JaxbDocumentUtils.java\nindex 03fa374bc99..3c382b2c885 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/198/JaxbDocumentUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/198/JaxbDocumentUtils.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.util;\n \n import com.google.common.base.Optional;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}