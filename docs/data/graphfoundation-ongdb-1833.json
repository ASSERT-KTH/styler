{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1833",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "32",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "32",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1833/TransactionBackupServiceAddressResolver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1833/TransactionBackupServiceAddressResolver.java\nindex 2701125ee2e..64f1f3cee40 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1833/TransactionBackupServiceAddressResolver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1833/TransactionBackupServiceAddressResolver.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.causalclustering.core;\n \n import org.neo4j.helpers.AdvertisedSocketAddress;\n@@ -28,27 +29,27 @@ import org.neo4j.kernel.impl.enterprise.configuration.OnlineBackupSettings;\n \n class TransactionBackupServiceAddressResolver\n {\n-    ListenSocketAddress backupAddressForTxProtocol( Config config )\n-    {\n-        // We cannot use the backup address setting directly as IPv6 isn't processed during config read\n-        String settingName = OnlineBackupSettings.online_backup_server.name();\n-        HostnamePort resolvedValueFromConfig = resolved( config );\n-        String modifiedLiteralValueToAvoidRange = String.format( \"%s:%d\", resolvedValueFromConfig.getHost(), resolvedValueFromConfig.getPort() );\n-        String defaultHostname = resolvedValueFromConfig.getHost();\n-        AdvertisedSocketAddress advertisedSocketAddress =\n-                SocketAddressParser.deriveSocketAddress( settingName, modifiedLiteralValueToAvoidRange, defaultHostname, resolvedValueFromConfig.getPort(),\n-                        AdvertisedSocketAddress::new );\n-        return new ListenSocketAddress( advertisedSocketAddress.getHostname(), advertisedSocketAddress.getPort() );\n-    }\n+  ListenSocketAddress backupAddressForTxProtocol(Config config)\n+  {\n+    // We cannot use the backup address setting directly as IPv6 isn't processed during config read\n+    String settingName = OnlineBackupSettings.online_backup_server.name();\n+    HostnamePort resolvedValueFromConfig = resolved(config);\n+    String modifiedLiteralValueToAvoidRange = String.format(\"%s:%d\", resolvedValueFromConfig.getHost(), resolvedValueFromConfig.getPort());\n+    String defaultHostname = resolvedValueFromConfig.getHost();\n+    AdvertisedSocketAddress advertisedSocketAddress =\n+        SocketAddressParser.deriveSocketAddress(settingName, modifiedLiteralValueToAvoidRange, defaultHostname, resolvedValueFromConfig.getPort(),\n+            AdvertisedSocketAddress::new);\n+    return new ListenSocketAddress(advertisedSocketAddress.getHostname(), advertisedSocketAddress.getPort());\n+  }\n \n-    private HostnamePort resolved( Config config )\n+  private HostnamePort resolved(Config config)\n+  {\n+    int defaultPort = Config.defaults().get(OnlineBackupSettings.online_backup_server).getPort();\n+    HostnamePort resolved = config.get(OnlineBackupSettings.online_backup_server);\n+    if (resolved.getPort() == 0) // Was the port not specified by user?\n     {\n-        int defaultPort = Config.defaults().get( OnlineBackupSettings.online_backup_server ).getPort();\n-        HostnamePort resolved = config.get( OnlineBackupSettings.online_backup_server );\n-        if ( resolved.getPort() == 0 ) // Was the port not specified by user?\n-        {\n-            resolved = new HostnamePort( resolved.getHost(), defaultPort );\n-        }\n-        return resolved;\n+      resolved = new HostnamePort(resolved.getHost(), defaultPort);\n     }\n+    return resolved;\n+  }\n }\n",
            "diff_size": 27
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 197).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1833/TransactionBackupServiceAddressResolver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1833/TransactionBackupServiceAddressResolver.java\nindex 2701125ee2e..4b3a8682622 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1833/TransactionBackupServiceAddressResolver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1833/TransactionBackupServiceAddressResolver.java\n@@ -35,10 +35,9 @@ class TransactionBackupServiceAddressResolver\n         HostnamePort resolvedValueFromConfig = resolved( config );\n         String modifiedLiteralValueToAvoidRange = String.format( \"%s:%d\", resolvedValueFromConfig.getHost(), resolvedValueFromConfig.getPort() );\n         String defaultHostname = resolvedValueFromConfig.getHost();\n-        AdvertisedSocketAddress advertisedSocketAddress =\n-                SocketAddressParser.deriveSocketAddress( settingName, modifiedLiteralValueToAvoidRange, defaultHostname, resolvedValueFromConfig.getPort(),\n+        AdvertisedSocketAddress advertisedSocketAddress = SocketAddressParser.deriveSocketAddress( settingName, modifiedLiteralValueToAvoidRange, defaultHostname, resolvedValueFromConfig.getPort(),\n                         AdvertisedSocketAddress::new );\n-        return new ListenSocketAddress( advertisedSocketAddress.getHostname(), advertisedSocketAddress.getPort() );\n+return new ListenSocketAddress( advertisedSocketAddress.getHostname(), advertisedSocketAddress.getPort() );\n     }\n \n     private HostnamePort resolved( Config config )\n@@ -49,6 +48,7 @@ class TransactionBackupServiceAddressResolver\n         {\n             resolved = new HostnamePort( resolved.getHost(), defaultPort );\n         }\n-        return resolved;\n+\n+return resolved;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}