{
    "project_name": "aspose-words-cloud-aspose-words-cloud-java",
    "error_id": "470",
    "information": {
        "errors": [
            {
                "line": "99",
                "column": "49",
                "severity": "error",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "            return false;\n        }\n    DocumentEntry documentEntry = (DocumentEntry)o;\n    return\n        Objects.equals(this.href, documentEntry.href) &&\n        Objects.equals(this.importFormatMode, documentEntry.importFormatMode);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/470/DocumentEntry.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/470/DocumentEntry.java\nindex 154fd183e08..d6b8834f8d6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/470/DocumentEntry.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/470/DocumentEntry.java\n@@ -96,7 +96,7 @@ public class DocumentEntry {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    DocumentEntry documentEntry = (DocumentEntry)o;\n+    DocumentEntry documentEntry = (DocumentEntry) o;\n     return\n         Objects.equals(this.href, documentEntry.href) &&\n         Objects.equals(this.importFormatMode, documentEntry.importFormatMode);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/470/DocumentEntry.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/470/DocumentEntry.java\nindex 154fd183e08..0393db8a76a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/470/DocumentEntry.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/470/DocumentEntry.java\n@@ -10,10 +10,10 @@\n  *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  *  copies of the Software, and to permit persons to whom the Software is\n  *  furnished to do so, subject to the following conditions:\n- * \n+ *\n  *  The above copyright notice and this permission notice shall be included in all\n  *  copies or substantial portions of the Software.\n- * \n+ *\n  *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -32,13 +32,16 @@ import java.util.Arrays;\n import java.util.ArrayList;\n import java.util.List;\n import java.io.IOException;\n+\n import org.threeten.bp.OffsetDateTime;\n+\n import com.aspose.words.cloud.model.*;\n import com.google.gson.TypeAdapter;\n import com.google.gson.annotations.JsonAdapter;\n import com.google.gson.annotations.SerializedName;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n+\n import io.swagger.annotations.ApiModel;\n import io.swagger.annotations.ApiModelProperty;\n \n@@ -52,6 +55,7 @@ public class DocumentEntry {\n \n     @SerializedName(\"ImportFormatMode\")\n     private String importFormatMode = null;\n+\n     public DocumentEntry href(String href) {\n         this.href = href;\n         return this;\n@@ -59,8 +63,9 @@ public class DocumentEntry {\n \n     /**\n      * Gets or sets path to document to append at the server.\n-    * @return href\n-    **/\n+     *\n+     * @return href\n+     **/\n     @ApiModelProperty(value = \"Gets or sets path to document to append at the server.\")\n     public String getHref() {\n         return href;\n@@ -77,8 +82,9 @@ public class DocumentEntry {\n \n     /**\n      * Gets or sets defines which formatting will be used: appended or destination document.Can be KeepSourceFormatting or UseDestinationStyles.\n-    * @return importFormatMode\n-    **/\n+     *\n+     * @return importFormatMode\n+     **/\n     @ApiModelProperty(value = \"Gets or sets defines which formatting will be used: appended or destination document.Can be KeepSourceFormatting or UseDestinationStyles.\")\n     public String getImportFormatMode() {\n         return importFormatMode;\n@@ -96,35 +102,35 @@ public class DocumentEntry {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    DocumentEntry documentEntry = (DocumentEntry)o;\n-    return\n-        Objects.equals(this.href, documentEntry.href) &&\n-        Objects.equals(this.importFormatMode, documentEntry.importFormatMode);\n-  }\n-\n-  @Override\n-  public int hashCode() {\n-    return Objects.hash(href, importFormatMode);\n-  }\n-\n-  @Override\n-  public String toString() {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(\"class DocumentEntry {\\n\");\n-    sb.append(\"    href: \").append(toIndentedString(href)).append(\"\\n\");\n-    sb.append(\"    importFormatMode: \").append(toIndentedString(importFormatMode)).append(\"\\n\");\n-    sb.append(\"}\");\n-    return sb.toString();\n-  }\n-\n-  /**\n-   * Convert the given object to string with each line indented by 4 spaces\n-   * (except the first line).\n-   */\n-  private String toIndentedString(java.lang.Object o) {\n-    if (o == null) {\n-      return \"null\";\n+        DocumentEntry documentEntry = (DocumentEntry) o;\n+        return\n+            Objects.equals(this.href, documentEntry.href) &&\n+                Objects.equals(this.importFormatMode, documentEntry.importFormatMode);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(href, importFormatMode);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"class DocumentEntry {\\n\");\n+        sb.append(\"    href: \").append(toIndentedString(href)).append(\"\\n\");\n+        sb.append(\"    importFormatMode: \").append(toIndentedString(importFormatMode)).append(\"\\n\");\n+        sb.append(\"}\");\n+        return sb.toString();\n+    }\n+\n+    /**\n+     * Convert the given object to string with each line indented by 4 spaces\n+     * (except the first line).\n+     */\n+    private String toIndentedString(java.lang.Object o) {\n+        if (o == null) {\n+            return \"null\";\n+        }\n+        return o.toString().replace(\"\\n\", \"\\n    \");\n     }\n-    return o.toString().replace(\"\\n\", \"\\n    \");\n-  }\n }\n",
            "diff_size": 44
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/470/DocumentEntry.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/470/DocumentEntry.java\nindex 154fd183e08..84f40e7e438 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/470/DocumentEntry.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/470/DocumentEntry.java\n@@ -45,68 +45,79 @@ import io.swagger.annotations.ApiModelProperty;\n /**\n  * Represents a document which will be appended to the original resource document.\n  */\n+\n+\n @ApiModel(description = \"Represents a document which will be appended to the original resource document.\")\n+\n public class DocumentEntry {\n-    @SerializedName(\"Href\")\n-    private String href = null;\n-\n-    @SerializedName(\"ImportFormatMode\")\n-    private String importFormatMode = null;\n-    public DocumentEntry href(String href) {\n-        this.href = href;\n-        return this;\n-    }\n+  @SerializedName(\"Href\")\n+  private String href = null;\n+\n+  @SerializedName(\"ImportFormatMode\")\n+  private String importFormatMode = null;\n+\n+  public DocumentEntry href(String href) {\n+    this.href = href;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets path to document to append at the server.\n     * @return href\n     **/\n-    @ApiModelProperty(value = \"Gets or sets path to document to append at the server.\")\n-    public String getHref() {\n-        return href;\n-    }\n \n-    public void setHref(String href) {\n-        this.href = href;\n-    }\n \n-    public DocumentEntry importFormatMode(String importFormatMode) {\n-        this.importFormatMode = importFormatMode;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets path to document to append at the server.\")\n+  public String getHref() {\n+    return href;\n+  }\n+\n+  public void setHref(String href) {\n+    this.href = href;\n+  }\n+\n+  public DocumentEntry importFormatMode(String importFormatMode) {\n+    this.importFormatMode = importFormatMode;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets defines which formatting will be used: appended or destination document.Can be KeepSourceFormatting or UseDestinationStyles.\n     * @return importFormatMode\n     **/\n-    @ApiModelProperty(value = \"Gets or sets defines which formatting will be used: appended or destination document.Can be KeepSourceFormatting or UseDestinationStyles.\")\n-    public String getImportFormatMode() {\n-        return importFormatMode;\n-    }\n \n-    public void setImportFormatMode(String importFormatMode) {\n-        this.importFormatMode = importFormatMode;\n+\n+  @ApiModelProperty(value = \"Gets or sets defines which formatting will be used: appended or destination document.Can be KeepSourceFormatting or UseDestinationStyles.\")\n+  public String getImportFormatMode() {\n+    return importFormatMode;\n+  }\n+\n+  public void setImportFormatMode(String importFormatMode) {\n+    this.importFormatMode = importFormatMode;\n+  }\n+\n+\n+  @Override\n+  public boolean equals(java.lang.Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n     }\n \n-    @Override\n-    public boolean equals(java.lang.Object o) {\n-        if (this == o) {\n-            return true;\n-        }\n-        if (o == null || getClass() != o.getClass()) {\n-            return false;\n-        }\n-    DocumentEntry documentEntry = (DocumentEntry)o;\n-    return\n-        Objects.equals(this.href, documentEntry.href) &&\n-        Objects.equals(this.importFormatMode, documentEntry.importFormatMode);\n+    DocumentEntry documentEntry = (DocumentEntry) o;\n+    return Objects.equals(this.href, documentEntry.href) &&\n+    Objects.equals(this.importFormatMode, documentEntry.importFormatMode);\n   }\n \n+\n   @Override\n   public int hashCode() {\n     return Objects.hash(href, importFormatMode);\n   }\n \n+\n   @Override\n   public String toString() {\n     StringBuilder sb = new StringBuilder();\n@@ -121,10 +132,12 @@ public class DocumentEntry {\n    * Convert the given object to string with each line indented by 4 spaces\n    * (except the first line).\n    */\n+\n   private String toIndentedString(java.lang.Object o) {\n     if (o == null) {\n       return \"null\";\n     }\n     return o.toString().replace(\"\\n\", \"\\n    \");\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 72
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/470/DocumentEntry.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/470/DocumentEntry.java\nindex 154fd183e08..d6b8834f8d6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/470/DocumentEntry.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/470/DocumentEntry.java\n@@ -96,7 +96,7 @@ public class DocumentEntry {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    DocumentEntry documentEntry = (DocumentEntry)o;\n+    DocumentEntry documentEntry = (DocumentEntry) o;\n     return\n         Objects.equals(this.href, documentEntry.href) &&\n         Objects.equals(this.importFormatMode, documentEntry.importFormatMode);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/470/DocumentEntry.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/470/DocumentEntry.java\nindex 154fd183e08..d6b8834f8d6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/470/DocumentEntry.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/470/DocumentEntry.java\n@@ -96,7 +96,7 @@ public class DocumentEntry {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    DocumentEntry documentEntry = (DocumentEntry)o;\n+    DocumentEntry documentEntry = (DocumentEntry) o;\n     return\n         Objects.equals(this.href, documentEntry.href) &&\n         Objects.equals(this.importFormatMode, documentEntry.importFormatMode);\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}