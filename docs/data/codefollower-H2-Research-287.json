{
    "project_name": "codefollower-H2-Research",
    "error_id": "287",
    "information": {
        "errors": [
            {
                "line": "141",
                "column": "44",
                "severity": "warning",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "                throw DbException.getInvalidValueException(\"length\", value.getPrecision());\n            }\n            final JdbcConnection c = conn; // required to avoid synthetic method creation\n            // PipedReader / PipedWriter are a lot slower\n            // than PipedInputStream / PipedOutputStream\n            // (Sun/Oracle Java 1.6.0_20)",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/287/JdbcClob.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/287/JdbcClob.java\nindex 929b82801ab..7a9b77fc15c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/287/JdbcClob.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/287/JdbcClob.java\n@@ -138,8 +138,9 @@ public class JdbcClob extends TraceObject implements NClob\n             if (value.getPrecision() != 0) {\n                 throw DbException.getInvalidValueException(\"length\", value.getPrecision());\n             }\n-            final JdbcConnection c = conn; // required to avoid synthetic method creation\n-            // PipedReader / PipedWriter are a lot slower\n+            final JdbcConnection c = conn;\n+            // required to avoid synthetic method creation// PipedReader / PipedWriter are a lot slower\n+             // PipedReader / PipedWriter are a lot slower\n             // than PipedInputStream / PipedOutputStream\n             // (Sun/Oracle Java 1.6.0_20)\n             final PipedInputStream in = new PipedInputStream();\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "142",
                    "column": "38",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/287/JdbcClob.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/287/JdbcClob.java\nindex 929b82801ab..6b2811fac23 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/287/JdbcClob.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/287/JdbcClob.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (http://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.jdbc;\n \n import java.io.IOException;\n@@ -17,6 +18,7 @@ import java.io.Writer;\n import java.sql.Clob;\n import java.sql.NClob;\n import java.sql.SQLException;\n+\n import org.h2.api.ErrorCode;\n import org.h2.engine.Constants;\n import org.h2.message.DbException;\n@@ -29,292 +31,291 @@ import org.h2.value.Value;\n /**\n  * Represents a CLOB value.\n  */\n-public class JdbcClob extends TraceObject implements NClob\n-{\n+public class JdbcClob extends TraceObject implements NClob {\n \n-    Value value;\n-    private final JdbcConnection conn;\n+  Value value;\n+  private final JdbcConnection conn;\n \n-    /**\n-     * INTERNAL\n-     */\n-    public JdbcClob(JdbcConnection conn, Value value, int id) {\n-        setTrace(conn.getSession().getTrace(), TraceObject.CLOB, id);\n-        this.conn = conn;\n-        this.value = value;\n-    }\n+  /**\n+   * INTERNAL\n+   */\n+  public JdbcClob(JdbcConnection conn, Value value, int id) {\n+    setTrace(conn.getSession().getTrace(), TraceObject.CLOB, id);\n+    this.conn = conn;\n+    this.value = value;\n+  }\n \n-    /**\n-     * Returns the length.\n-     *\n-     * @return the length\n-     */\n-    @Override\n-    public long length() throws SQLException {\n-        try {\n-            debugCodeCall(\"length\");\n-            checkClosed();\n-            if (value.getType() == Value.CLOB) {\n-                long precision = value.getPrecision();\n-                if (precision > 0) {\n-                    return precision;\n-                }\n-            }\n-            return IOUtils.copyAndCloseInput(value.getReader(), null, Long.MAX_VALUE);\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n+  /**\n+   * Returns the length.\n+   *\n+   * @return the length\n+   */\n+  @Override\n+  public long length() throws SQLException {\n+    try {\n+      debugCodeCall(\"length\");\n+      checkClosed();\n+      if (value.getType() == Value.CLOB) {\n+        long precision = value.getPrecision();\n+        if (precision > 0) {\n+          return precision;\n         }\n+      }\n+      return IOUtils.copyAndCloseInput(value.getReader(), null, Long.MAX_VALUE);\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n     }\n+  }\n \n-    /**\n-     * [Not supported] Truncates the object.\n-     */\n-    @Override\n-    public void truncate(long len) throws SQLException {\n-        throw unsupported(\"LOB update\");\n-    }\n+  /**\n+   * [Not supported] Truncates the object.\n+   */\n+  @Override\n+  public void truncate(long len) throws SQLException {\n+    throw unsupported(\"LOB update\");\n+  }\n \n-    /**\n-     * Returns the input stream.\n-     *\n-     * @return the input stream\n-     */\n-    @Override\n-    public InputStream getAsciiStream() throws SQLException {\n-        try {\n-            debugCodeCall(\"getAsciiStream\");\n-            checkClosed();\n-            String s = value.getString();\n-            return IOUtils.getInputStreamFromString(s);\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n+  /**\n+   * Returns the input stream.\n+   *\n+   * @return the input stream\n+   */\n+  @Override\n+  public InputStream getAsciiStream() throws SQLException {\n+    try {\n+      debugCodeCall(\"getAsciiStream\");\n+      checkClosed();\n+      String s = value.getString();\n+      return IOUtils.getInputStreamFromString(s);\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n     }\n+  }\n \n-    /**\n-     * [Not supported] Returns an output  stream.\n-     */\n-    @Override\n-    public OutputStream setAsciiStream(long pos) throws SQLException {\n-        throw unsupported(\"LOB update\");\n-    }\n+  /**\n+   * [Not supported] Returns an output  stream.\n+   */\n+  @Override\n+  public OutputStream setAsciiStream(long pos) throws SQLException {\n+    throw unsupported(\"LOB update\");\n+  }\n \n-    /**\n-     * Returns the reader.\n-     *\n-     * @return the reader\n-     */\n-    @Override\n-    public Reader getCharacterStream() throws SQLException {\n-        try {\n-            debugCodeCall(\"getCharacterStream\");\n-            checkClosed();\n-            return value.getReader();\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n+  /**\n+   * Returns the reader.\n+   *\n+   * @return the reader\n+   */\n+  @Override\n+  public Reader getCharacterStream() throws SQLException {\n+    try {\n+      debugCodeCall(\"getCharacterStream\");\n+      checkClosed();\n+      return value.getReader();\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n     }\n+  }\n \n-    /**\n-     * Get a writer to update the Clob. This is only supported for new, empty\n-     * Clob objects that were created with Connection.createClob() or\n-     * createNClob(). The Clob is created in a separate thread, and the object\n-     * is only updated when Writer.close() is called. The position must be 1,\n-     * meaning the whole Clob data is set.\n-     *\n-     * @param pos where to start writing (the first character is at position 1)\n-     * @return a writer\n-     */\n-    @Override\n-    public Writer setCharacterStream(long pos) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCodeCall(\"setCharacterStream(\" + pos + \");\");\n-            }\n-            checkClosed();\n-            if (pos != 1) {\n-                throw DbException.getInvalidValueException(\"pos\", pos);\n-            }\n-            if (value.getPrecision() != 0) {\n-                throw DbException.getInvalidValueException(\"length\", value.getPrecision());\n-            }\n-            final JdbcConnection c = conn; // required to avoid synthetic method creation\n-            // PipedReader / PipedWriter are a lot slower\n-            // than PipedInputStream / PipedOutputStream\n-            // (Sun/Oracle Java 1.6.0_20)\n-            final PipedInputStream in = new PipedInputStream();\n-            final Task task = new Task() {\n-                @Override\n-                public void call() {\n-                    value = c.createClob(IOUtils.getReader(in), -1);\n-                }\n-            };\n-            PipedOutputStream out = new PipedOutputStream(in) {\n-                @Override\n-                public void close() throws IOException {\n-                    super.close();\n-                    try {\n-                        task.get();\n-                    } catch (Exception e) {\n-                        throw DbException.convertToIOException(e);\n-                    }\n-                }\n-            };\n-            task.execute();\n-            return IOUtils.getBufferedWriter(out);\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n+  /**\n+   * Get a writer to update the Clob. This is only supported for new, empty\n+   * Clob objects that were created with Connection.createClob() or\n+   * createNClob(). The Clob is created in a separate thread, and the object\n+   * is only updated when Writer.close() is called. The position must be 1,\n+   * meaning the whole Clob data is set.\n+   *\n+   * @param pos where to start writing (the first character is at position 1)\n+   * @return a writer\n+   */\n+  @Override\n+  public Writer setCharacterStream(long pos) throws SQLException {\n+    try {\n+      if (isDebugEnabled()) {\n+        debugCodeCall(\"setCharacterStream(\" + pos + \");\");\n+      }\n+      checkClosed();\n+      if (pos != 1) {\n+        throw DbException.getInvalidValueException(\"pos\", pos);\n+      }\n+      if (value.getPrecision() != 0) {\n+        throw DbException.getInvalidValueException(\"length\", value.getPrecision());\n+      }\n+      final JdbcConnection c = conn; // required to avoid synthetic method creation\n+      // PipedReader / PipedWriter are a lot slower\n+      // than PipedInputStream / PipedOutputStream\n+      // (Sun/Oracle Java 1.6.0_20)\n+      final PipedInputStream in = new PipedInputStream();\n+      final Task task = new Task() {\n+        @Override\n+        public void call() {\n+          value = c.createClob(IOUtils.getReader(in), -1);\n         }\n-    }\n-\n-    /**\n-     * Returns a substring.\n-     *\n-     * @param pos the position (the first character is at position 1)\n-     * @param length the number of characters\n-     * @return the string\n-     */\n-    @Override\n-    public String getSubString(long pos, int length) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"getSubString(\" + pos + \", \" + length + \");\");\n-            }\n-            checkClosed();\n-            if (pos < 1) {\n-                throw DbException.getInvalidValueException(\"pos\", pos);\n-            }\n-            if (length < 0) {\n-                throw DbException.getInvalidValueException(\"length\", length);\n-            }\n-            StringWriter writer = new StringWriter(\n-                    Math.min(Constants.IO_BUFFER_SIZE, length));\n-            try (Reader reader = value.getReader()) {\n-                IOUtils.skipFully(reader, pos - 1);\n-                IOUtils.copyAndCloseInput(reader, writer, length);\n-            }\n-            return writer.toString();\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n+      };\n+      PipedOutputStream out = new PipedOutputStream(in) {\n+        @Override\n+        public void close() throws IOException {\n+          super.close();\n+          try {\n+            task.get();\n+          } catch (Exception e) {\n+            throw DbException.convertToIOException(e);\n+          }\n         }\n+      };\n+      task.execute();\n+      return IOUtils.getBufferedWriter(out);\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n     }\n+  }\n \n-    /**\n-     * Fills the Clob. This is only supported for new, empty Clob objects that\n-     * were created with Connection.createClob() or createNClob(). The position\n-     * must be 1, meaning the whole Clob data is set.\n-     *\n-     * @param pos where to start writing (the first character is at position 1)\n-     * @param str the string to add\n-     * @return the length of the added text\n-     */\n-    @Override\n-    public int setString(long pos, String str) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"setString(\" + pos + \", \" + quote(str) + \");\");\n-            }\n-            checkClosed();\n-            if (pos != 1) {\n-                throw DbException.getInvalidValueException(\"pos\", pos);\n-            } else if (str == null) {\n-                throw DbException.getInvalidValueException(\"str\", str);\n-            }\n-            value = conn.createClob(new StringReader(str), -1);\n-            return str.length();\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n+  /**\n+   * Returns a substring.\n+   *\n+   * @param pos    the position (the first character is at position 1)\n+   * @param length the number of characters\n+   * @return the string\n+   */\n+  @Override\n+  public String getSubString(long pos, int length) throws SQLException {\n+    try {\n+      if (isDebugEnabled()) {\n+        debugCode(\"getSubString(\" + pos + \", \" + length + \");\");\n+      }\n+      checkClosed();\n+      if (pos < 1) {\n+        throw DbException.getInvalidValueException(\"pos\", pos);\n+      }\n+      if (length < 0) {\n+        throw DbException.getInvalidValueException(\"length\", length);\n+      }\n+      StringWriter writer = new StringWriter(\n+          Math.min(Constants.IO_BUFFER_SIZE, length));\n+      try (Reader reader = value.getReader()) {\n+        IOUtils.skipFully(reader, pos - 1);\n+        IOUtils.copyAndCloseInput(reader, writer, length);\n+      }\n+      return writer.toString();\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n     }\n+  }\n \n-    /**\n-     * Fills the Clob. This is only supported for new, empty Clob objects that\n-     * were created with Connection.createClob() or createNClob(). The position\n-     * must be 1, meaning the whole Clob data is set.\n-     *\n-     * @param pos where to start writing (the first character is at position 1)\n-     * @param str the string to add\n-     * @param offset the string offset\n-     * @param len the number of characters to read\n-     * @return the length of the added text\n-     */\n-    @Override\n-    public int setString(long pos, String str, int offset, int len)\n-            throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"setString(\" + pos + \", \" + quote(str) + \", \" + offset + \", \" + len + \");\");\n-            }\n-            checkClosed();\n-            if (pos != 1) {\n-                throw DbException.getInvalidValueException(\"pos\", pos);\n-            } else if (str == null) {\n-                throw DbException.getInvalidValueException(\"str\", str);\n-            }\n-            value = conn.createClob(new RangeReader(new StringReader(str), offset, len), -1);\n-            return (int) value.getPrecision();\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n+  /**\n+   * Fills the Clob. This is only supported for new, empty Clob objects that\n+   * were created with Connection.createClob() or createNClob(). The position\n+   * must be 1, meaning the whole Clob data is set.\n+   *\n+   * @param pos where to start writing (the first character is at position 1)\n+   * @param str the string to add\n+   * @return the length of the added text\n+   */\n+  @Override\n+  public int setString(long pos, String str) throws SQLException {\n+    try {\n+      if (isDebugEnabled()) {\n+        debugCode(\"setString(\" + pos + \", \" + quote(str) + \");\");\n+      }\n+      checkClosed();\n+      if (pos != 1) {\n+        throw DbException.getInvalidValueException(\"pos\", pos);\n+      } else if (str == null) {\n+        throw DbException.getInvalidValueException(\"str\", str);\n+      }\n+      value = conn.createClob(new StringReader(str), -1);\n+      return str.length();\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n     }\n+  }\n \n-    /**\n-     * [Not supported] Searches a pattern and return the position.\n-     */\n-    @Override\n-    public long position(String pattern, long start) throws SQLException {\n-        throw unsupported(\"LOB search\");\n+  /**\n+   * Fills the Clob. This is only supported for new, empty Clob objects that\n+   * were created with Connection.createClob() or createNClob(). The position\n+   * must be 1, meaning the whole Clob data is set.\n+   *\n+   * @param pos    where to start writing (the first character is at position 1)\n+   * @param str    the string to add\n+   * @param offset the string offset\n+   * @param len    the number of characters to read\n+   * @return the length of the added text\n+   */\n+  @Override\n+  public int setString(long pos, String str, int offset, int len)\n+      throws SQLException {\n+    try {\n+      if (isDebugEnabled()) {\n+        debugCode(\"setString(\" + pos + \", \" + quote(str) + \", \" + offset + \", \" + len + \");\");\n+      }\n+      checkClosed();\n+      if (pos != 1) {\n+        throw DbException.getInvalidValueException(\"pos\", pos);\n+      } else if (str == null) {\n+        throw DbException.getInvalidValueException(\"str\", str);\n+      }\n+      value = conn.createClob(new RangeReader(new StringReader(str), offset, len), -1);\n+      return (int) value.getPrecision();\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n     }\n+  }\n \n-    /**\n-     * [Not supported] Searches a pattern and return the position.\n-     */\n-    @Override\n-    public long position(Clob clobPattern, long start) throws SQLException {\n-        throw unsupported(\"LOB search\");\n-    }\n+  /**\n+   * [Not supported] Searches a pattern and return the position.\n+   */\n+  @Override\n+  public long position(String pattern, long start) throws SQLException {\n+    throw unsupported(\"LOB search\");\n+  }\n \n-    /**\n-     * Release all resources of this object.\n-     */\n-    @Override\n-    public void free() {\n-        debugCodeCall(\"free\");\n-        value = null;\n-    }\n+  /**\n+   * [Not supported] Searches a pattern and return the position.\n+   */\n+  @Override\n+  public long position(Clob clobPattern, long start) throws SQLException {\n+    throw unsupported(\"LOB search\");\n+  }\n \n-    /**\n-     * Returns the reader, starting from an offset.\n-     *\n-     * @param pos 1-based offset\n-     * @param length length of requested area\n-     * @return the reader\n-     */\n-    @Override\n-    public Reader getCharacterStream(long pos, long length) throws SQLException {\n-        try {\n-            debugCodeCall(\"getCharacterStream(pos, length)\");\n-            checkClosed();\n-            return value.getReader(pos, length);\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n+  /**\n+   * Release all resources of this object.\n+   */\n+  @Override\n+  public void free() {\n+    debugCodeCall(\"free\");\n+    value = null;\n+  }\n \n-    private void checkClosed() {\n-        conn.checkClosed();\n-        if (value == null) {\n-            throw DbException.get(ErrorCode.OBJECT_CLOSED);\n-        }\n+  /**\n+   * Returns the reader, starting from an offset.\n+   *\n+   * @param pos    1-based offset\n+   * @param length length of requested area\n+   * @return the reader\n+   */\n+  @Override\n+  public Reader getCharacterStream(long pos, long length) throws SQLException {\n+    try {\n+      debugCodeCall(\"getCharacterStream(pos, length)\");\n+      checkClosed();\n+      return value.getReader(pos, length);\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n     }\n+  }\n \n-    /**\n-     * INTERNAL\n-     */\n-    @Override\n-    public String toString() {\n-        return getTraceObjectName() + \": \" + (value == null ?\n-                \"null\" : value.getTraceSQL());\n+  private void checkClosed() {\n+    conn.checkClosed();\n+    if (value == null) {\n+      throw DbException.get(ErrorCode.OBJECT_CLOSED);\n     }\n+  }\n+\n+  /**\n+   * INTERNAL\n+   */\n+  @Override\n+  public String toString() {\n+    return getTraceObjectName() + \": \" + (value == null ?\n+        \"null\" : value.getTraceSQL());\n+  }\n \n }\n",
            "diff_size": 323
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/287/JdbcClob.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/287/JdbcClob.java\nindex 929b82801ab..a924cc53cee 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/287/JdbcClob.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/287/JdbcClob.java\n@@ -138,7 +138,8 @@ public class JdbcClob extends TraceObject implements NClob\n             if (value.getPrecision() != 0) {\n                 throw DbException.getInvalidValueException(\"length\", value.getPrecision());\n             }\n-            final JdbcConnection c = conn; // required to avoid synthetic method creation\n+            final JdbcConnection c = conn;\n+// required to avoid synthetic method creation\n             // PipedReader / PipedWriter are a lot slower\n             // than PipedInputStream / PipedOutputStream\n             // (Sun/Oracle Java 1.6.0_20)\n@@ -317,4 +318,4 @@ public class JdbcClob extends TraceObject implements NClob\n                 \"null\" : value.getTraceSQL());\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "150",
                    "column": "44",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/287/JdbcClob.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/287/JdbcClob.java\nindex 929b82801ab..2d7e8876679 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/287/JdbcClob.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/287/JdbcClob.java\n@@ -29,8 +29,10 @@ import org.h2.value.Value;\n /**\n  * Represents a CLOB value.\n  */\n-public class JdbcClob extends TraceObject implements NClob\n-{\n+\n+\n+public class JdbcClob extends TraceObject implements NClob {\n+\n \n     Value value;\n     private final JdbcConnection conn;\n@@ -38,6 +40,7 @@ public class JdbcClob extends TraceObject implements NClob\n     /**\n      * INTERNAL\n      */\n+\n     public JdbcClob(JdbcConnection conn, Value value, int id) {\n         setTrace(conn.getSession().getTrace(), TraceObject.CLOB, id);\n         this.conn = conn;\n@@ -49,6 +52,7 @@ public class JdbcClob extends TraceObject implements NClob\n      *\n      * @return the length\n      */\n+\n     @Override\n     public long length() throws SQLException {\n         try {\n@@ -69,6 +73,7 @@ public class JdbcClob extends TraceObject implements NClob\n     /**\n      * [Not supported] Truncates the object.\n      */\n+\n     @Override\n     public void truncate(long len) throws SQLException {\n         throw unsupported(\"LOB update\");\n@@ -79,6 +84,7 @@ public class JdbcClob extends TraceObject implements NClob\n      *\n      * @return the input stream\n      */\n+\n     @Override\n     public InputStream getAsciiStream() throws SQLException {\n         try {\n@@ -94,6 +100,7 @@ public class JdbcClob extends TraceObject implements NClob\n     /**\n      * [Not supported] Returns an output  stream.\n      */\n+\n     @Override\n     public OutputStream setAsciiStream(long pos) throws SQLException {\n         throw unsupported(\"LOB update\");\n@@ -104,6 +111,7 @@ public class JdbcClob extends TraceObject implements NClob\n      *\n      * @return the reader\n      */\n+\n     @Override\n     public Reader getCharacterStream() throws SQLException {\n         try {\n@@ -125,6 +133,7 @@ public class JdbcClob extends TraceObject implements NClob\n      * @param pos where to start writing (the first character is at position 1)\n      * @return a writer\n      */\n+\n     @Override\n     public Writer setCharacterStream(long pos) throws SQLException {\n         try {\n@@ -144,22 +153,22 @@ public class JdbcClob extends TraceObject implements NClob\n             // (Sun/Oracle Java 1.6.0_20)\n             final PipedInputStream in = new PipedInputStream();\n             final Task task = new Task() {\n-                @Override\n-                public void call() {\n-                    value = c.createClob(IOUtils.getReader(in), -1);\n-                }\n-            };\n+                           @Override\n+                           public void call() {\n+                               value = c.createClob(IOUtils.getReader(in), -1);\n+                           }\n+                       };\n             PipedOutputStream out = new PipedOutputStream(in) {\n-                @Override\n-                public void close() throws IOException {\n-                    super.close();\n-                    try {\n-                        task.get();\n-                    } catch (Exception e) {\n-                        throw DbException.convertToIOException(e);\n-                    }\n-                }\n-            };\n+    @Override\n+    public void close() throws IOException {\n+        super.close();\n+        try {\n+            task.get();\n+        } catch (Exception e) {\n+            throw DbException.convertToIOException(e);\n+        }\n+    }\n+                              };\n             task.execute();\n             return IOUtils.getBufferedWriter(out);\n         } catch (Exception e) {\n@@ -174,11 +183,13 @@ public class JdbcClob extends TraceObject implements NClob\n      * @param length the number of characters\n      * @return the string\n      */\n+\n     @Override\n     public String getSubString(long pos, int length) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getSubString(\" + pos + \", \" + length + \");\");\n+                debugCode(\"getSubString(\" + pos + \", \"\n+                + length + \");\");\n             }\n             checkClosed();\n             if (pos < 1) {\n@@ -187,8 +198,7 @@ public class JdbcClob extends TraceObject implements NClob\n             if (length < 0) {\n                 throw DbException.getInvalidValueException(\"length\", length);\n             }\n-            StringWriter writer = new StringWriter(\n-                    Math.min(Constants.IO_BUFFER_SIZE, length));\n+            StringWriter writer = new StringWriter(Math.min(Constants.IO_BUFFER_SIZE, length));\n             try (Reader reader = value.getReader()) {\n                 IOUtils.skipFully(reader, pos - 1);\n                 IOUtils.copyAndCloseInput(reader, writer, length);\n@@ -208,11 +218,13 @@ public class JdbcClob extends TraceObject implements NClob\n      * @param str the string to add\n      * @return the length of the added text\n      */\n+\n     @Override\n     public int setString(long pos, String str) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setString(\" + pos + \", \" + quote(str) + \");\");\n+                debugCode(\"setString(\" + pos + \", \"\n+                + quote(str) + \");\");\n             }\n             checkClosed();\n             if (pos != 1) {\n@@ -238,12 +250,15 @@ public class JdbcClob extends TraceObject implements NClob\n      * @param len the number of characters to read\n      * @return the length of the added text\n      */\n+\n     @Override\n-    public int setString(long pos, String str, int offset, int len)\n-            throws SQLException {\n+    public int setString(long pos, String str, int offset, int len) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setString(\" + pos + \", \" + quote(str) + \", \" + offset + \", \" + len + \");\");\n+                debugCode(\"setString(\" + pos + \", \"\n+                + quote(str) + \", \"\n+                + offset + \", \"\n+                + len + \");\");\n             }\n             checkClosed();\n             if (pos != 1) {\n@@ -251,7 +266,8 @@ public class JdbcClob extends TraceObject implements NClob\n             } else if (str == null) {\n                 throw DbException.getInvalidValueException(\"str\", str);\n             }\n-            value = conn.createClob(new RangeReader(new StringReader(str), offset, len), -1);\n+            value = conn.createClob(new RangeReader(\n+                new StringReader(str), offset, len), -1);\n             return (int) value.getPrecision();\n         } catch (Exception e) {\n             throw logAndConvert(e);\n@@ -261,6 +277,7 @@ public class JdbcClob extends TraceObject implements NClob\n     /**\n      * [Not supported] Searches a pattern and return the position.\n      */\n+\n     @Override\n     public long position(String pattern, long start) throws SQLException {\n         throw unsupported(\"LOB search\");\n@@ -269,6 +286,7 @@ public class JdbcClob extends TraceObject implements NClob\n     /**\n      * [Not supported] Searches a pattern and return the position.\n      */\n+\n     @Override\n     public long position(Clob clobPattern, long start) throws SQLException {\n         throw unsupported(\"LOB search\");\n@@ -277,6 +295,7 @@ public class JdbcClob extends TraceObject implements NClob\n     /**\n      * Release all resources of this object.\n      */\n+\n     @Override\n     public void free() {\n         debugCodeCall(\"free\");\n@@ -290,6 +309,7 @@ public class JdbcClob extends TraceObject implements NClob\n      * @param length length of requested area\n      * @return the reader\n      */\n+\n     @Override\n     public Reader getCharacterStream(long pos, long length) throws SQLException {\n         try {\n@@ -311,10 +331,10 @@ public class JdbcClob extends TraceObject implements NClob\n     /**\n      * INTERNAL\n      */\n+\n     @Override\n     public String toString() {\n-        return getTraceObjectName() + \": \" + (value == null ?\n-                \"null\" : value.getTraceSQL());\n+        return getTraceObjectName() + \": \" + (value == null ? \"null\" : value.getTraceSQL());\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 51
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/287/JdbcClob.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/287/JdbcClob.java\nindex 929b82801ab..7a9b77fc15c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/287/JdbcClob.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/287/JdbcClob.java\n@@ -138,8 +138,9 @@ public class JdbcClob extends TraceObject implements NClob\n             if (value.getPrecision() != 0) {\n                 throw DbException.getInvalidValueException(\"length\", value.getPrecision());\n             }\n-            final JdbcConnection c = conn; // required to avoid synthetic method creation\n-            // PipedReader / PipedWriter are a lot slower\n+            final JdbcConnection c = conn;\n+            // required to avoid synthetic method creation// PipedReader / PipedWriter are a lot slower\n+             // PipedReader / PipedWriter are a lot slower\n             // than PipedInputStream / PipedOutputStream\n             // (Sun/Oracle Java 1.6.0_20)\n             final PipedInputStream in = new PipedInputStream();\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/287/JdbcClob.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/287/JdbcClob.java\nindex 929b82801ab..a92036b13dd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/287/JdbcClob.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/287/JdbcClob.java\n@@ -138,8 +138,9 @@ public class JdbcClob extends TraceObject implements NClob\n             if (value.getPrecision() != 0) {\n                 throw DbException.getInvalidValueException(\"length\", value.getPrecision());\n             }\n-            final JdbcConnection c = conn; // required to avoid synthetic method creation\n-            // PipedReader / PipedWriter are a lot slower\n+            final JdbcConnection c = conn;\n+            // required to avoid synthetic method creation\n+             // PipedReader / PipedWriter are a lot slower\n             // than PipedInputStream / PipedOutputStream\n             // (Sun/Oracle Java 1.6.0_20)\n             final PipedInputStream in = new PipedInputStream();\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "codebuff"
    ]
}