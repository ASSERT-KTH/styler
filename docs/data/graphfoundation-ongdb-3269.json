{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3269",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "69",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3269/IOLimiter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3269/IOLimiter.java\nindex 2327ae3ae64..be7e2b4d9d6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3269/IOLimiter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3269/IOLimiter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.io.pagecache;\n \n import java.io.Flushable;\n@@ -36,79 +37,79 @@ import java.io.IOException;\n  */\n public interface IOLimiter\n {\n-    /**\n-     * The value of the initial stamp; that is, what should be passed as the {@code previousStamp} to\n-     * {@link #maybeLimitIO(long, int, Flushable)} on the first call in a flush.\n-     */\n-    long INITIAL_STAMP = 0;\n+  /**\n+   * The value of the initial stamp; that is, what should be passed as the {@code previousStamp} to\n+   * {@link #maybeLimitIO(long, int, Flushable)} on the first call in a flush.\n+   */\n+  long INITIAL_STAMP = 0;\n \n-    /**\n-     * Invoked at regular intervals during flushing of the {@link PageCache} or {@link PagedFile}s.\n-     * <p/>\n-     * For the first call in a flush, the {@code previousStamp} should have the {@link #INITIAL_STAMP} value.\n-     * The return value of this method should then be used as the stamp of the next call. This allows implementations\n-     * to be stateless, yet still keep some context around about a given flush, provided they can encode it as a\n-     * {@code long}.\n-     * <p/>\n-     * The meaning of this long value is totally opaque to the caller, and can be anything the IOPSLimiter\n-     * implementation desires.\n-     * <p/>\n-     * The implementation is allowed to force changes to the storage device using the given {@link Flushable}, or\n-     * to perform {@link Thread#sleep(long) sleeps}, as it desires. It is not allowed to throw\n-     * {@link InterruptedException}, however. Those should be dealt with by catching them and re-interrupting the\n-     * current thread, or by wrapping them in {@link IOException}s.\n-     *\n-     * @param previousStamp The stamp from the previous call to this method, or {@link #INITIAL_STAMP} if this is the\n-     * first call to this method for the given flush.\n-     * @param recentlyCompletedIOs The number of IOs completed since the last call to this method.\n-     * @param flushable A {@link Flushable} instance that can flush any relevant dirty system buffers, to help smooth\n-     * out the IO load on the storage device.\n-     * @return A new stamp to pass into the next call to this method.\n-     */\n-    long maybeLimitIO( long previousStamp, int recentlyCompletedIOs, Flushable flushable );\n+  /**\n+   * Invoked at regular intervals during flushing of the {@link PageCache} or {@link PagedFile}s.\n+   * <p/>\n+   * For the first call in a flush, the {@code previousStamp} should have the {@link #INITIAL_STAMP} value.\n+   * The return value of this method should then be used as the stamp of the next call. This allows implementations\n+   * to be stateless, yet still keep some context around about a given flush, provided they can encode it as a\n+   * {@code long}.\n+   * <p/>\n+   * The meaning of this long value is totally opaque to the caller, and can be anything the IOPSLimiter\n+   * implementation desires.\n+   * <p/>\n+   * The implementation is allowed to force changes to the storage device using the given {@link Flushable}, or\n+   * to perform {@link Thread#sleep(long) sleeps}, as it desires. It is not allowed to throw\n+   * {@link InterruptedException}, however. Those should be dealt with by catching them and re-interrupting the\n+   * current thread, or by wrapping them in {@link IOException}s.\n+   *\n+   * @param previousStamp        The stamp from the previous call to this method, or {@link #INITIAL_STAMP} if this is the\n+   *                             first call to this method for the given flush.\n+   * @param recentlyCompletedIOs The number of IOs completed since the last call to this method.\n+   * @param flushable            A {@link Flushable} instance that can flush any relevant dirty system buffers, to help smooth\n+   *                             out the IO load on the storage device.\n+   * @return A new stamp to pass into the next call to this method.\n+   */\n+  long maybeLimitIO(long previousStamp, int recentlyCompletedIOs, Flushable flushable);\n \n-    /**\n-     * Temporarily disable the IOLimiter, to allow IO to proceed at full speed.\n-     * This call <strong>MUST</strong> be paired with a subsequent {@link #enableLimit()} call.\n-     * This method is thread-safe and reentrant. Multiple concurrent calls will \"stack\", and IO limitations will be\n-     * enabled again once the last overlapping limit-disabling period ends with the \"last\" call to\n-     * {@link #enableLimit()}. This is conceptually similar to how a reentrant read-lock works.\n-     *\n-     * Thus, the typical usage pattern is with a {@code try-finally} clause, like this:\n-     *\n-     * <pre><code>\n-     *     limiter.disableLimit();\n-     *     try\n-     *     {\n-     *         // ... do work that needs maximum IO performance ...\n-     *     }\n-     *     finally\n-     *     {\n-     *         limiter.enableLimit();\n-     *     }\n-     * </code></pre>\n-     */\n-    default void disableLimit()\n-    {\n-        // By default this method does nothing, assuming the implementation always has no or fixed limits.\n-    }\n+  /**\n+   * Temporarily disable the IOLimiter, to allow IO to proceed at full speed.\n+   * This call <strong>MUST</strong> be paired with a subsequent {@link #enableLimit()} call.\n+   * This method is thread-safe and reentrant. Multiple concurrent calls will \"stack\", and IO limitations will be\n+   * enabled again once the last overlapping limit-disabling period ends with the \"last\" call to\n+   * {@link #enableLimit()}. This is conceptually similar to how a reentrant read-lock works.\n+   * <p>\n+   * Thus, the typical usage pattern is with a {@code try-finally} clause, like this:\n+   *\n+   * <pre><code>\n+   *     limiter.disableLimit();\n+   *     try\n+   *     {\n+   *         // ... do work that needs maximum IO performance ...\n+   *     }\n+   *     finally\n+   *     {\n+   *         limiter.enableLimit();\n+   *     }\n+   * </code></pre>\n+   */\n+  default void disableLimit()\n+  {\n+    // By default this method does nothing, assuming the implementation always has no or fixed limits.\n+  }\n \n-    /**\n-     * Re-enable the IOLimiter, after having disabled it with {@link #disableLimit()}.\n-     *\n-     * @see #disableLimit() for how to use this method.\n-     */\n-    default void enableLimit()\n-    {\n-        // Same as for disableLimit().\n-    }\n+  /**\n+   * Re-enable the IOLimiter, after having disabled it with {@link #disableLimit()}.\n+   *\n+   * @see #disableLimit() for how to use this method.\n+   */\n+  default void enableLimit()\n+  {\n+    // Same as for disableLimit().\n+  }\n \n-    /**\n-     * An IOPSLimiter implementation that does not restrict the rate of IO. Use this implementation if you want the\n-     * flush to go as fast as possible.\n-     */\n-    static IOLimiter unlimited()\n-    {\n-        return ( previousStamp, recentlyCompletedIOs, flushable ) -> previousStamp;\n-    }\n+  /**\n+   * An IOPSLimiter implementation that does not restrict the rate of IO. Use this implementation if you want the\n+   * flush to go as fast as possible.\n+   */\n+  static IOLimiter unlimited()\n+  {\n+    return (previousStamp, recentlyCompletedIOs, flushable) -> previousStamp;\n+  }\n }\n",
            "diff_size": 72
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3269/IOLimiter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3269/IOLimiter.java\nindex 2327ae3ae64..e56695b51ea 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3269/IOLimiter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3269/IOLimiter.java\n@@ -111,4 +111,4 @@ public interface IOLimiter\n     {\n         return ( previousStamp, recentlyCompletedIOs, flushable ) -> previousStamp;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}