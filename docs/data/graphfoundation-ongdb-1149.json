{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1149",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "60",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "70",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "111",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "118",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "149",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "70",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "173",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "225",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "279",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "286",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "294",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1149/StateMachineProxyFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1149/StateMachineProxyFactory.java\nindex 75815a470b1..71660a818e9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1149/StateMachineProxyFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1149/StateMachineProxyFactory.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.cluster.statemachine;\n \n import java.lang.reflect.Method;\n@@ -47,279 +48,271 @@ import static java.lang.String.format;\n  * where \"name\" corresponds to the name of the method.\n  */\n public class StateMachineProxyFactory\n-        implements MessageProcessor\n+    implements MessageProcessor\n {\n-    private final StateMachines stateMachines;\n-    private final StateMachineConversations conversations;\n-    private final Log log;\n-    private volatile InstanceId me;\n-\n-    private final Map<String, ResponseFuture> responseFutureMap = new ConcurrentHashMap<>();\n-\n-    public StateMachineProxyFactory( StateMachines stateMachines, StateMachineConversations conversations,\n-            InstanceId me, LogProvider logProvider )\n+  private final StateMachines stateMachines;\n+  private final StateMachineConversations conversations;\n+  private final Log log;\n+  private volatile InstanceId me;\n+\n+  private final Map<String, ResponseFuture> responseFutureMap = new ConcurrentHashMap<>();\n+\n+  public StateMachineProxyFactory(StateMachines stateMachines, StateMachineConversations conversations,\n+                                  InstanceId me, LogProvider logProvider)\n+  {\n+    this.stateMachines = stateMachines;\n+    this.conversations = conversations;\n+    this.me = me;\n+    this.log = logProvider.getLog(getClass());\n+  }\n+\n+  public <CLIENT> CLIENT newProxy(Class<CLIENT> proxyInterface)\n+      throws IllegalArgumentException\n+  {\n+    // Get the state machine whose messages correspond to the methods of the proxy interface\n+    StateMachine stateMachine = getStateMachine(proxyInterface);\n+\n+    // Create a new dynamic proxy and handler that converts calls to state machine invocations\n+    return proxyInterface.cast(Proxy.newProxyInstance(proxyInterface.getClassLoader(),\n+        new Class<?>[] {proxyInterface}, new StateMachineProxyHandler(this, stateMachine)));\n+  }\n+\n+  Object invoke(StateMachine stateMachine, Method method, Object arg)\n+  {\n+    if (method.getName().equals(\"toString\"))\n     {\n-        this.stateMachines = stateMachines;\n-        this.conversations = conversations;\n-        this.me = me;\n-        this.log = logProvider.getLog( getClass() );\n+      return me.toString();\n     }\n \n-    public <CLIENT> CLIENT newProxy( Class<CLIENT> proxyInterface )\n-            throws IllegalArgumentException\n+    if (method.getName().equals(\"equals\"))\n     {\n-        // Get the state machine whose messages correspond to the methods of the proxy interface\n-        StateMachine stateMachine = getStateMachine( proxyInterface );\n+      return ((StateMachineProxyHandler) Proxy.getInvocationHandler(arg)).getStateMachineProxyFactory().me.equals(me);\n+    }\n+\n+    String conversationId = conversations.getNextConversationId();\n \n-        // Create a new dynamic proxy and handler that converts calls to state machine invocations\n-        return proxyInterface.cast( Proxy.newProxyInstance( proxyInterface.getClassLoader(),\n-                new Class<?>[]{proxyInterface}, new StateMachineProxyHandler( this, stateMachine ) ) );\n+    try\n+    {\n+      MessageType typeAsEnum = (MessageType) Enum.valueOf(stateMachine.getMessageType(), method.getName());\n+      Message<?> message = Message.internal(typeAsEnum, arg);\n+      if (me != null)\n+      {\n+        message.\n+            setHeader(Message.HEADER_CONVERSATION_ID, conversationId).\n+            setHeader(Message.HEADER_CREATED_BY, me.toString());\n+      }\n+\n+      if (method.getReturnType().equals(Void.TYPE))\n+      {\n+        stateMachines.process(message);\n+        return null;\n+      } else\n+      {\n+        ResponseFuture future = new ResponseFuture(conversationId, typeAsEnum, responseFutureMap);\n+        responseFutureMap.put(conversationId, future);\n+        log.debug(\"Added response future for conversation id %s\", conversationId);\n+        stateMachines.process(message);\n+\n+        return future;\n+      }\n+    } catch (IllegalArgumentException e)\n+    {\n+      throw new IllegalStateException(\"No state machine can handle the method \" + method.getName());\n     }\n+  }\n \n-    Object invoke( StateMachine stateMachine, Method method, Object arg )\n+  @Override\n+  public boolean process(Message<?> message)\n+  {\n+    if (!responseFutureMap.isEmpty())\n     {\n-        if ( method.getName().equals( \"toString\" ) )\n+      if (!message.hasHeader(Message.HEADER_TO))\n+      {\n+        String conversationId = message.getHeader(Message.HEADER_CONVERSATION_ID);\n+        ResponseFuture future = responseFutureMap.get(conversationId);\n+        if (future != null)\n         {\n-            return me.toString();\n-        }\n-\n-        if ( method.getName().equals( \"equals\" ) )\n+          if (future.setPotentialResponse(message))\n+          {\n+            responseFutureMap.remove(conversationId);\n+          }\n+        } else\n         {\n-            return ((StateMachineProxyHandler) Proxy.getInvocationHandler( arg )).getStateMachineProxyFactory().me.equals( me );\n+          log.warn(\"Unable to find the client (with the conversation id %s) waiting for the response %s.\",\n+              conversationId, message);\n         }\n+      }\n+    }\n+    return true;\n+  }\n \n-        String conversationId = conversations.getNextConversationId();\n+  private StateMachine getStateMachine(Class<?> proxyInterface)\n+      throws IllegalArgumentException\n+  {\n+    IllegalArgumentException exception = new IllegalArgumentException(\"No state machine can handle the \" +\n+        \"interface:\" + proxyInterface.getName());\n \n-        try\n+    statemachine:\n+    for (StateMachine stateMachine : stateMachines.getStateMachines())\n+    {\n+      boolean foundMatch = false;\n+\n+      for (Method method : proxyInterface.getMethods())\n+      {\n+        if (!(method.getReturnType().equals(Void.TYPE) || method.getReturnType().equals(Future.class)))\n         {\n-            MessageType typeAsEnum = (MessageType) Enum.valueOf( stateMachine.getMessageType(), method.getName() );\n-            Message<?> message = Message.internal( typeAsEnum, arg );\n-            if ( me != null )\n-            {\n-                message.\n-                    setHeader( Message.HEADER_CONVERSATION_ID, conversationId ).\n-                    setHeader( Message.HEADER_CREATED_BY,me.toString() );\n-            }\n-\n-            if ( method.getReturnType().equals( Void.TYPE ) )\n-            {\n-                stateMachines.process( message );\n-                return null;\n-            }\n-            else\n-            {\n-                ResponseFuture future = new ResponseFuture( conversationId, typeAsEnum, responseFutureMap );\n-                responseFutureMap.put( conversationId, future );\n-                log.debug( \"Added response future for conversation id %s\", conversationId );\n-                stateMachines.process( message );\n-\n-                return future;\n-            }\n+          throw new IllegalArgumentException(\"Methods must return either void or Future\");\n         }\n-        catch ( IllegalArgumentException e )\n+\n+        try\n         {\n-            throw new IllegalStateException( \"No state machine can handle the method \" + method.getName() );\n-        }\n-    }\n+          Enum.valueOf(stateMachine.getMessageType(), method.getName());\n \n-    @Override\n-    public boolean process( Message<?> message )\n-    {\n-        if ( !responseFutureMap.isEmpty() )\n+          // Ok!\n+          foundMatch = true;\n+        } catch (Exception e)\n         {\n-            if ( !message.hasHeader( Message.HEADER_TO ) )\n-            {\n-                String conversationId = message.getHeader( Message.HEADER_CONVERSATION_ID );\n-                ResponseFuture future = responseFutureMap.get( conversationId );\n-                if ( future != null )\n-                {\n-                    if ( future.setPotentialResponse( message ) )\n-                    {\n-                        responseFutureMap.remove( conversationId );\n-                    }\n-                }\n-                else\n-                {\n-                    log.warn(  \"Unable to find the client (with the conversation id %s) waiting for the response %s.\",\n-                            conversationId, message  );\n-                }\n-            }\n+          if (foundMatch)\n+          // State machine could only partially handle this interface\n+          {\n+            exception = new IllegalArgumentException(\n+                \"State machine for \" + stateMachine.getMessageType().getName() +\n+                    \" cannot handle method:\" + method.getName());\n+          }\n+\n+          // Continue searching\n+          continue statemachine;\n         }\n-        return true;\n+      }\n+\n+      // All methods are implemented by this state machine - return it!\n+      return stateMachine;\n     }\n \n-    private StateMachine getStateMachine( Class<?> proxyInterface )\n-            throws IllegalArgumentException\n-    {\n-        IllegalArgumentException exception = new IllegalArgumentException( \"No state machine can handle the \" +\n-                \"interface:\" + proxyInterface.getName() );\n+    // Could not find any state machine that can handle this interface\n+    throw exception;\n+  }\n \n-        statemachine:\n-        for ( StateMachine stateMachine : stateMachines.getStateMachines() )\n-        {\n-            boolean foundMatch = false;\n-\n-            for ( Method method : proxyInterface.getMethods() )\n-            {\n-                if ( !(method.getReturnType().equals( Void.TYPE ) || method.getReturnType().equals( Future.class )) )\n-                {\n-                    throw new IllegalArgumentException( \"Methods must return either void or Future\" );\n-                }\n-\n-                try\n-                {\n-                    Enum.valueOf( stateMachine.getMessageType(), method.getName() );\n-\n-                    // Ok!\n-                    foundMatch = true;\n-                }\n-                catch ( Exception e )\n-                {\n-                    if ( foundMatch )\n-                    // State machine could only partially handle this interface\n-                    {\n-                        exception = new IllegalArgumentException(\n-                                \"State machine for \" + stateMachine.getMessageType().getName() +\n-                                \" cannot handle method:\" + method.getName() );\n-                    }\n-\n-                    // Continue searching\n-                    continue statemachine;\n-                }\n-            }\n-\n-            // All methods are implemented by this state machine - return it!\n-            return stateMachine;\n-        }\n+  private static class ResponseFuture implements Future<Object>\n+  {\n+    private final String conversationId;\n+    private final MessageType initiatedByMessageType;\n+    private final Map<String, ResponseFuture> responseFutureMap; /* temporary for debug logging */\n+\n+    private Message response;\n \n-        // Could not find any state machine that can handle this interface\n-        throw exception;\n+    ResponseFuture(String conversationId, MessageType initiatedByMessageType,\n+                   Map<String, ResponseFuture> responseFutureMap)\n+    {\n+      this.conversationId = conversationId;\n+      this.initiatedByMessageType = initiatedByMessageType;\n+      this.responseFutureMap = responseFutureMap;\n     }\n \n-    private static class ResponseFuture implements Future<Object>\n+    synchronized boolean setPotentialResponse(Message response)\n     {\n-        private final String conversationId;\n-        private final MessageType initiatedByMessageType;\n-        private final Map<String,ResponseFuture> responseFutureMap; /* temporary for debug logging */\n+      if (isResponse(response))\n+      {\n+        this.response = response;\n+        this.notifyAll();\n+        return true;\n+      } else\n+      {\n+        return false;\n+      }\n+    }\n \n-        private Message response;\n+    private boolean isResponse(Message response)\n+    {\n+      return response.getMessageType().name().equals(initiatedByMessageType.name() + \"Response\") ||\n+          response.getMessageType().name().equals(initiatedByMessageType.name() + \"Failure\");\n+    }\n \n-        ResponseFuture( String conversationId, MessageType initiatedByMessageType,\n-                Map<String,ResponseFuture> responseFutureMap )\n-        {\n-            this.conversationId = conversationId;\n-            this.initiatedByMessageType = initiatedByMessageType;\n-            this.responseFutureMap = responseFutureMap;\n-        }\n+    @Override\n+    public boolean cancel(boolean mayInterruptIfRunning)\n+    {\n+      return false;\n+    }\n \n-        synchronized boolean setPotentialResponse( Message response )\n-        {\n-            if ( isResponse( response ) )\n-            {\n-                this.response = response;\n-                this.notifyAll();\n-                return true;\n-            }\n-            else\n-            {\n-                return false;\n-            }\n-        }\n+    @Override\n+    public boolean isCancelled()\n+    {\n+      return false;\n+    }\n \n-        private boolean isResponse( Message response )\n-        {\n-            return response.getMessageType().name().equals( initiatedByMessageType.name() + \"Response\" ) ||\n-                   response.getMessageType().name().equals( initiatedByMessageType.name() + \"Failure\" );\n-        }\n+    @Override\n+    public boolean isDone()\n+    {\n+      return response != null;\n+    }\n \n-        @Override\n-        public boolean cancel( boolean mayInterruptIfRunning )\n-        {\n-            return false;\n-        }\n+    @Override\n+    public synchronized Object get()\n+        throws InterruptedException, ExecutionException\n+    {\n+      if (response != null)\n+      {\n+        return getResult();\n+      }\n \n-        @Override\n-        public boolean isCancelled()\n-        {\n-            return false;\n-        }\n+      while (response == null)\n+      {\n+        this.wait(50);\n+      }\n \n-        @Override\n-        public boolean isDone()\n-        {\n-            return response != null;\n-        }\n+      return getResult();\n+    }\n \n-        @Override\n-        public synchronized Object get()\n-                throws InterruptedException, ExecutionException\n+    private synchronized Object getResult()\n+        throws InterruptedException, ExecutionException\n+    {\n+      if (response.getMessageType().name().equals(initiatedByMessageType.name() + \"Failure\"))\n+      {\n+        // Call failed\n+        if (response.getPayload() != null)\n         {\n-            if ( response != null )\n-            {\n-                return getResult();\n-            }\n-\n-            while ( response == null )\n-            {\n-                this.wait( 50 );\n-            }\n-\n-            return getResult();\n-        }\n-\n-        private synchronized Object getResult()\n-                throws InterruptedException, ExecutionException\n+          if (response.getPayload() instanceof Throwable)\n+          {\n+            throw new ExecutionException((Throwable) response.getPayload());\n+          } else\n+          {\n+            throw new InterruptedException(response.getPayload().toString());\n+          }\n+        } else\n         {\n-            if ( response.getMessageType().name().equals( initiatedByMessageType.name() + \"Failure\" ) )\n-            {\n-                // Call failed\n-                if ( response.getPayload() != null )\n-                {\n-                    if ( response.getPayload() instanceof Throwable )\n-                    {\n-                        throw new ExecutionException( (Throwable) response.getPayload() );\n-                    }\n-                    else\n-                    {\n-                        throw new InterruptedException( response.getPayload().toString() );\n-                    }\n-                }\n-                else\n-                {\n-                    // No message specified\n-                    throw new InterruptedException();\n-                }\n-            }\n-            else\n-            {\n-                // Return result\n-                return response.getPayload();\n-            }\n+          // No message specified\n+          throw new InterruptedException();\n         }\n+      } else\n+      {\n+        // Return result\n+        return response.getPayload();\n+      }\n+    }\n \n-        @Override\n-        public synchronized Object get( long timeout, TimeUnit unit )\n-                throws InterruptedException, ExecutionException, TimeoutException\n-        {\n-            if ( response != null )\n-            {\n-                getResult();\n-            }\n-\n-            this.wait( unit.toMillis( timeout ) );\n-\n-            if ( response == null )\n-            {\n-                throw new TimeoutException( format( \"Conversation-response mapping:%n\" + responseFutureMap ) );\n-            }\n-            return getResult();\n-        }\n+    @Override\n+    public synchronized Object get(long timeout, TimeUnit unit)\n+        throws InterruptedException, ExecutionException, TimeoutException\n+    {\n+      if (response != null)\n+      {\n+        getResult();\n+      }\n+\n+      this.wait(unit.toMillis(timeout));\n+\n+      if (response == null)\n+      {\n+        throw new TimeoutException(format(\"Conversation-response mapping:%n\" + responseFutureMap));\n+      }\n+      return getResult();\n+    }\n \n-        @Override\n-        public String toString()\n-        {\n-            return \"ResponseFuture{\" + \"conversationId='\" + conversationId + '\\'' + \", initiatedByMessageType=\" +\n-                    initiatedByMessageType + \", response=\" + response + '}';\n-        }\n+    @Override\n+    public String toString()\n+    {\n+      return \"ResponseFuture{\" + \"conversationId='\" + conversationId + '\\'' + \", initiatedByMessageType=\" +\n+          initiatedByMessageType + \", response=\" + response + '}';\n     }\n+  }\n }\n",
            "diff_size": 340
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}