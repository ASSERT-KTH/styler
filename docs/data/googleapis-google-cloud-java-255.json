{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "255",
    "information": {
        "errors": [
            {
                "line": "51",
                "column": "60",
                "severity": "warning",
                "message": "WhitespaceAround: '=' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "  private static final PushConfig PUSH_CONFIG = PushConfig.of(ENDPOINT);\n  private static final int ACK_DEADLINE = 42;\n  private static final SubscriptionInfo SUBSCRIPTION_INFO =SubscriptionInfo.builder(TOPIC_ID, NAME)\n      .pushConfig(PUSH_CONFIG)\n      .ackDeadLineSeconds(ACK_DEADLINE)\n      .build();",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/255/SubscriptionTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/255/SubscriptionTest.java\nindex b04fd800759..400588403a6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/255/SubscriptionTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/255/SubscriptionTest.java\n@@ -48,7 +48,7 @@ public class SubscriptionTest {\n   private static final String ENDPOINT = \"https://example.com/push\";\n   private static final PushConfig PUSH_CONFIG = PushConfig.of(ENDPOINT);\n   private static final int ACK_DEADLINE = 42;\n-  private static final SubscriptionInfo SUBSCRIPTION_INFO =SubscriptionInfo.builder(TOPIC_ID, NAME)\n+  private static final SubscriptionInfo SUBSCRIPTION_INFO = SubscriptionInfo.builder(TOPIC_ID, NAME)\n       .pushConfig(PUSH_CONFIG)\n       .ackDeadLineSeconds(ACK_DEADLINE)\n       .build();\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/255/SubscriptionTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/255/SubscriptionTest.java\nindex b04fd800759..400588403a6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/255/SubscriptionTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/255/SubscriptionTest.java\n@@ -48,7 +48,7 @@ public class SubscriptionTest {\n   private static final String ENDPOINT = \"https://example.com/push\";\n   private static final PushConfig PUSH_CONFIG = PushConfig.of(ENDPOINT);\n   private static final int ACK_DEADLINE = 42;\n-  private static final SubscriptionInfo SUBSCRIPTION_INFO =SubscriptionInfo.builder(TOPIC_ID, NAME)\n+  private static final SubscriptionInfo SUBSCRIPTION_INFO = SubscriptionInfo.builder(TOPIC_ID, NAME)\n       .pushConfig(PUSH_CONFIG)\n       .ackDeadLineSeconds(ACK_DEADLINE)\n       .build();\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "61",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "67",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/255/SubscriptionTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/255/SubscriptionTest.java\nindex b04fd800759..9511ee72603 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/255/SubscriptionTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/255/SubscriptionTest.java\n@@ -48,7 +48,7 @@ public class SubscriptionTest {\n   private static final String ENDPOINT = \"https://example.com/push\";\n   private static final PushConfig PUSH_CONFIG = PushConfig.of(ENDPOINT);\n   private static final int ACK_DEADLINE = 42;\n-  private static final SubscriptionInfo SUBSCRIPTION_INFO =SubscriptionInfo.builder(TOPIC_ID, NAME)\n+  private static final SubscriptionInfo SUBSCRIPTION_INFO = SubscriptionInfo.builder(TOPIC_ID, NAME)\n       .pushConfig(PUSH_CONFIG)\n       .ackDeadLineSeconds(ACK_DEADLINE)\n       .build();\n@@ -58,14 +58,13 @@ public class SubscriptionTest {\n           .setMessage(MESSAGE1.toPb())\n           .setAckId(\"ackId1\")\n           .build();\n-  private static final Message MESSAGE2 = Message.of(\"payload2\");\n+    private static final Message MESSAGE2 = Message.of(\"payload2\");\n   private static final com.google.pubsub.v1.ReceivedMessage MESSAGE_PB2 =\n       com.google.pubsub.v1.ReceivedMessage.newBuilder()\n           .setMessage(MESSAGE2.toPb())\n           .setAckId(\"ackId2\")\n           .build();\n-\n-  private final PubSub serviceMockReturnsOptions = createStrictMock(PubSub.class);\n+private final PubSub serviceMockReturnsOptions = createStrictMock(PubSub.class);\n   private final PubSubOptions mockOptions = createStrictMock(PubSubOptions.class);\n   private PubSub pubsub;\n   private Subscription expectedSubscription;\n@@ -324,4 +323,4 @@ public class SubscriptionTest {\n     assertEquals(expected.ackDeadlineSeconds(), value.ackDeadlineSeconds());\n     assertEquals(expected.hashCode(), value.hashCode());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "50",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "52",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "54",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "64",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "84",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 174).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "102",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "125",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "127",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "138",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "212",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "223",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "282",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "285",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/255/SubscriptionTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/255/SubscriptionTest.java\nindex b04fd800759..d7ad668b06c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/255/SubscriptionTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/255/SubscriptionTest.java\n@@ -33,14 +33,13 @@ import com.google.cloud.pubsub.PubSub.PullOption;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.Lists;\n import com.google.common.util.concurrent.Futures;\n-\n import org.easymock.EasyMock;\n import org.junit.After;\n import org.junit.Test;\n-\n import java.util.List;\n import java.util.concurrent.ExecutionException;\n \n+\n public class SubscriptionTest {\n \n   private static final TopicId TOPIC_ID = TopicId.of(\"project\", \"topic\");\n@@ -48,35 +47,21 @@ public class SubscriptionTest {\n   private static final String ENDPOINT = \"https://example.com/push\";\n   private static final PushConfig PUSH_CONFIG = PushConfig.of(ENDPOINT);\n   private static final int ACK_DEADLINE = 42;\n-  private static final SubscriptionInfo SUBSCRIPTION_INFO =SubscriptionInfo.builder(TOPIC_ID, NAME)\n-      .pushConfig(PUSH_CONFIG)\n-      .ackDeadLineSeconds(ACK_DEADLINE)\n-      .build();\n+  private static final SubscriptionInfo SUBSCRIPTION_INFO = SubscriptionInfo.builder(TOPIC_ID, NAME).pushConfig(PUSH_CONFIG).ackDeadLineSeconds(ACK_DEADLINE).build();\n   private static final Message MESSAGE1 = Message.of(\"payload1\");\n-  private static final com.google.pubsub.v1.ReceivedMessage MESSAGE_PB1 =\n-      com.google.pubsub.v1.ReceivedMessage.newBuilder()\n-          .setMessage(MESSAGE1.toPb())\n-          .setAckId(\"ackId1\")\n-          .build();\n+  private static final com.google.pubsub.v1.ReceivedMessage MESSAGE_PB1 = com.google.pubsub.v1.ReceivedMessage.newBuilder().setMessage(MESSAGE1.toPb()).setAckId(\"ackId1\").build();\n   private static final Message MESSAGE2 = Message.of(\"payload2\");\n-  private static final com.google.pubsub.v1.ReceivedMessage MESSAGE_PB2 =\n-      com.google.pubsub.v1.ReceivedMessage.newBuilder()\n-          .setMessage(MESSAGE2.toPb())\n-          .setAckId(\"ackId2\")\n-          .build();\n-\n+  private static final com.google.pubsub.v1.ReceivedMessage MESSAGE_PB2 = com.google.pubsub.v1.ReceivedMessage.newBuilder().setMessage(MESSAGE2.toPb()).setAckId(\"ackId2\").build();\n   private final PubSub serviceMockReturnsOptions = createStrictMock(PubSub.class);\n   private final PubSubOptions mockOptions = createStrictMock(PubSubOptions.class);\n   private PubSub pubsub;\n   private Subscription expectedSubscription;\n   private Subscription subscription;\n-\n   private void initializeExpectedSubscription(int optionsCalls) {\n     expect(serviceMockReturnsOptions.options()).andReturn(mockOptions).times(optionsCalls);\n     replay(serviceMockReturnsOptions);\n     pubsub = createStrictMock(PubSub.class);\n-    expectedSubscription = new Subscription(serviceMockReturnsOptions,\n-        new Subscription.BuilderImpl(SUBSCRIPTION_INFO));\n+    expectedSubscription = new Subscription(serviceMockReturnsOptions, new Subscription.BuilderImpl(SUBSCRIPTION_INFO));\n   }\n \n   private void initializeSubscription() {\n@@ -96,12 +81,7 @@ public class SubscriptionTest {\n     assertEquals(NAME, expectedSubscription.name());\n     assertEquals(PUSH_CONFIG, expectedSubscription.pushConfig());\n     assertEquals(ACK_DEADLINE, expectedSubscription.ackDeadlineSeconds());\n-    Subscription builtSubscription = expectedSubscription.toBuilder()\n-        .name(\"newSubscription\")\n-        .topic(\"newProject\", \"newTopic\")\n-        .pushConfig(null)\n-        .ackDeadLineSeconds(10)\n-        .build();\n+    Subscription builtSubscription = expectedSubscription.toBuilder().name(\"newSubscription\").topic(\"newProject\", \"newTopic\").pushConfig(null).ackDeadLineSeconds(10).build();\n     assertEquals(TopicId.of(\"newProject\", \"newTopic\"), builtSubscription.topic());\n     assertEquals(\"newSubscription\", builtSubscription.name());\n     assertEquals(null, builtSubscription.pushConfig());\n@@ -119,8 +99,7 @@ public class SubscriptionTest {\n   public void testReload() {\n     initializeExpectedSubscription(2);\n     SubscriptionInfo updatedInfo = SUBSCRIPTION_INFO.toBuilder().name(\"newSubscription\").build();\n-    Subscription expectedSubscription =\n-        new Subscription(serviceMockReturnsOptions, new SubscriptionInfo.BuilderImpl(updatedInfo));\n+    Subscription expectedSubscription = new Subscription(serviceMockReturnsOptions, new SubscriptionInfo.BuilderImpl(updatedInfo));\n     expect(pubsub.options()).andReturn(mockOptions);\n     expect(pubsub.getSubscription(NAME)).andReturn(expectedSubscription);\n     replay(pubsub);\n@@ -143,11 +122,9 @@ public class SubscriptionTest {\n   public void testReloadAsync() throws ExecutionException, InterruptedException {\n     initializeExpectedSubscription(2);\n     SubscriptionInfo updatedInfo = SUBSCRIPTION_INFO.toBuilder().name(\"newSubscription\").build();\n-    Subscription expectedSubscription =\n-        new Subscription(serviceMockReturnsOptions, new SubscriptionInfo.BuilderImpl(updatedInfo));\n+    Subscription expectedSubscription = new Subscription(serviceMockReturnsOptions, new SubscriptionInfo.BuilderImpl(updatedInfo));\n     expect(pubsub.options()).andReturn(mockOptions);\n-    expect(pubsub.getSubscriptionAsync(NAME))\n-        .andReturn(Futures.immediateFuture(expectedSubscription));\n+    expect(pubsub.getSubscriptionAsync(NAME)).andReturn(Futures.immediateFuture(expectedSubscription));\n     replay(pubsub);\n     initializeSubscription();\n     Subscription updatedSubscription = subscription.reloadAsync().get();\n@@ -158,8 +135,7 @@ public class SubscriptionTest {\n   public void testReloadAsyncNull() throws ExecutionException, InterruptedException {\n     initializeExpectedSubscription(1);\n     expect(pubsub.options()).andReturn(mockOptions);\n-    expect(pubsub.getSubscriptionAsync(NAME))\n-        .andReturn(Futures.<Subscription>immediateFuture(null));\n+    expect(pubsub.getSubscriptionAsync(NAME)).andReturn(Futures.<Subscription>immediateFuture(null));\n     replay(pubsub);\n     initializeSubscription();\n     assertNull(subscription.reloadAsync().get());\n@@ -189,8 +165,7 @@ public class SubscriptionTest {\n   public void testDeleteAsyncTrue() throws ExecutionException, InterruptedException {\n     initializeExpectedSubscription(1);\n     expect(pubsub.options()).andReturn(mockOptions);\n-    expect(pubsub.deleteSubscriptionAsync(NAME))\n-        .andReturn(Futures.immediateFuture(true));\n+    expect(pubsub.deleteSubscriptionAsync(NAME)).andReturn(Futures.immediateFuture(true));\n     replay(pubsub);\n     initializeSubscription();\n     assertTrue(subscription.deleteAsync().get());\n@@ -200,8 +175,7 @@ public class SubscriptionTest {\n   public void testDeleteAsyncFalse() throws ExecutionException, InterruptedException {\n     initializeExpectedSubscription(1);\n     expect(pubsub.options()).andReturn(mockOptions);\n-    expect(pubsub.deleteSubscriptionAsync(NAME))\n-        .andReturn(Futures.immediateFuture(false));\n+    expect(pubsub.deleteSubscriptionAsync(NAME)).andReturn(Futures.immediateFuture(false));\n     replay(pubsub);\n     initializeSubscription();\n     assertFalse(subscription.deleteAsync().get());\n@@ -235,8 +209,7 @@ public class SubscriptionTest {\n     initializeExpectedSubscription(1);\n     expect(pubsub.options()).andReturn(mockOptions);\n     PushConfig pushConfig = PushConfig.of(\"https://example.com/newPush\");\n-    expect(pubsub.replacePushConfigAsync(NAME, pushConfig))\n-        .andReturn(Futures.<Void>immediateFuture(null));\n+    expect(pubsub.replacePushConfigAsync(NAME, pushConfig)).andReturn(Futures.<Void>immediateFuture(null));\n     EasyMock.expectLastCall();\n     replay(pubsub);\n     initializeSubscription();\n@@ -247,8 +220,7 @@ public class SubscriptionTest {\n   public void testReplacePushConfigAsync_Null() throws ExecutionException, InterruptedException {\n     initializeExpectedSubscription(1);\n     expect(pubsub.options()).andReturn(mockOptions);\n-    expect(pubsub.replacePushConfigAsync(NAME, null))\n-        .andReturn(Futures.<Void>immediateFuture(null));\n+    expect(pubsub.replacePushConfigAsync(NAME, null)).andReturn(Futures.<Void>immediateFuture(null));\n     replay(pubsub);\n     initializeSubscription();\n     assertNull(subscription.replacePushConfigAsync(null).get());\n@@ -307,12 +279,10 @@ public class SubscriptionTest {\n     MessageProcessor messageProcessor = createStrictMock(MessageProcessor.class);\n     replay(messageConsumer, messageProcessor);\n     expect(pubsub.options()).andReturn(mockOptions);\n-    expect(pubsub.pullAsync(NAME, messageProcessor, PullOption.maxQueuedCallbacks(2)))\n-        .andReturn(messageConsumer);\n+    expect(pubsub.pullAsync(NAME, messageProcessor, PullOption.maxQueuedCallbacks(2))).andReturn(messageConsumer);\n     replay(pubsub);\n     initializeSubscription();\n-    assertSame(messageConsumer,\n-        subscription.pullAsync(messageProcessor, PullOption.maxQueuedCallbacks(2)));\n+    assertSame(messageConsumer, subscription.pullAsync(messageProcessor, PullOption.maxQueuedCallbacks(2)));\n     verify(messageConsumer, messageProcessor);\n   }\n \n@@ -324,4 +294,4 @@ public class SubscriptionTest {\n     assertEquals(expected.ackDeadlineSeconds(), value.ackDeadlineSeconds());\n     assertEquals(expected.hashCode(), value.hashCode());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 48
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/255/SubscriptionTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/255/SubscriptionTest.java\nindex b04fd800759..400588403a6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/255/SubscriptionTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/255/SubscriptionTest.java\n@@ -48,7 +48,7 @@ public class SubscriptionTest {\n   private static final String ENDPOINT = \"https://example.com/push\";\n   private static final PushConfig PUSH_CONFIG = PushConfig.of(ENDPOINT);\n   private static final int ACK_DEADLINE = 42;\n-  private static final SubscriptionInfo SUBSCRIPTION_INFO =SubscriptionInfo.builder(TOPIC_ID, NAME)\n+  private static final SubscriptionInfo SUBSCRIPTION_INFO = SubscriptionInfo.builder(TOPIC_ID, NAME)\n       .pushConfig(PUSH_CONFIG)\n       .ackDeadLineSeconds(ACK_DEADLINE)\n       .build();\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/255/SubscriptionTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/255/SubscriptionTest.java\nindex b04fd800759..400588403a6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/255/SubscriptionTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/255/SubscriptionTest.java\n@@ -48,7 +48,7 @@ public class SubscriptionTest {\n   private static final String ENDPOINT = \"https://example.com/push\";\n   private static final PushConfig PUSH_CONFIG = PushConfig.of(ENDPOINT);\n   private static final int ACK_DEADLINE = 42;\n-  private static final SubscriptionInfo SUBSCRIPTION_INFO =SubscriptionInfo.builder(TOPIC_ID, NAME)\n+  private static final SubscriptionInfo SUBSCRIPTION_INFO = SubscriptionInfo.builder(TOPIC_ID, NAME)\n       .pushConfig(PUSH_CONFIG)\n       .ackDeadLineSeconds(ACK_DEADLINE)\n       .build();\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}