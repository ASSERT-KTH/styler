{
    "project_name": "vassalengine-vassal",
    "error_id": "25",
    "information": {
        "errors": [
            {
                "line": "737",
                "column": "9",
                "severity": "error",
                "message": "'if' child has incorrect indentation level 8, expected level should be 6.",
                "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
            }
        ]
    },
    "source_code": "    Object selected = availableList.getModel().getElementAt(sourceIndex);\n    if (selected instanceof EditablePiece && Resources.getString(\"Editor.Immobilized.old_trait_description\").equals(((EditablePiece) selected).getDescription())) {\n        selected = new Immobilized();\n    }\n    if (selected instanceof Decorator) {\n      if (inUseModel.getSize() > 0) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/errored/1/25/PieceDefiner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/styler/25/PieceDefiner.java\nindex e1fb461bfa0..28cb6c6b8ad 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/errored/1/25/PieceDefiner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/styler/25/PieceDefiner.java\n@@ -734,7 +734,7 @@ public class PieceDefiner extends JPanel implements HelpWindowExtension {\n   private void doAdd(int sourceIndex, int insertIndex) {\n     Object selected = availableList.getModel().getElementAt(sourceIndex);\n     if (selected instanceof EditablePiece && Resources.getString(\"Editor.Immobilized.old_trait_description\").equals(((EditablePiece) selected).getDescription())) {\n-        selected = new Immobilized();\n+      selected = new Immobilized();\n     }\n     if (selected instanceof Decorator) {\n       if (inUseModel.getSize() > 0) {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/errored/1/25/PieceDefiner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/intellij/25/PieceDefiner.java\nindex e1fb461bfa0..6bd18e2a18b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/errored/1/25/PieceDefiner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/intellij/25/PieceDefiner.java\n@@ -15,6 +15,7 @@\n  * License along with this library; if not, copies are available\n  * at http://www.opensource.org.\n  */\n+\n package VASSAL.counters;\n \n import VASSAL.build.GameModule;\n@@ -143,7 +144,9 @@ public class PieceDefiner extends JPanel implements HelpWindowExtension {\n   private static final int DEFAULT_MAX_SPLIT = 256;\n   private boolean splitDragInProgress = false;\n \n-  /** Creates new form test */\n+  /**\n+   * Creates new form test\n+   */\n   public PieceDefiner() {\n     prefs = GameModule.getGameModule().getPrefs();\n     final IntConfigurer maxSplitConfig = new IntConfigurer(MAX_SPLIT_PREF, null, DEFAULT_MAX_SPLIT);\n@@ -244,6 +247,7 @@ public class PieceDefiner extends JPanel implements HelpWindowExtension {\n    * Add to the bottom of the classic list\n    * Regenerate the Alpha list\n    * reset the model depending on the sort setting\n+   *\n    * @param piece New Definition\n    */\n   private static void addAdditionalElement(GamePiece piece) {\n@@ -254,6 +258,7 @@ public class PieceDefiner extends JPanel implements HelpWindowExtension {\n \n   /**\n    * Plugins can add additional GamePiece definitions\n+   *\n    * @param definition GamePiece definition to add\n    */\n   public static void addDefinition(GamePiece definition) {\n@@ -286,8 +291,7 @@ public class PieceDefiner extends JPanel implements HelpWindowExtension {\n       if (!contains) {\n         try {\n           addAdditionalElement((GamePiece) pieceClass.getConstructor().newInstance());\n-        }\n-        catch (Throwable t) {\n+        } catch (Throwable t) {\n           ReflectionUtils.handleNewInstanceFailure(t, pieceClass);\n         }\n       }\n@@ -309,13 +313,11 @@ public class PieceDefiner extends JPanel implements HelpWindowExtension {\n \n   /**\n    * The piece defined has been changed. It may have changed size, or image\n-   *\n    */\n   private void refresh() {\n     if (inUseModel.getSize() > 0) {\n       piece = inUseModel.lastElement();\n-    }\n-    else {\n+    } else {\n       piece = null;\n     }\n     slot.setPiece(piece);\n@@ -328,13 +330,11 @@ public class PieceDefiner extends JPanel implements HelpWindowExtension {\n   }\n \n   /**\n-   *\n    * Re-calculate how to layout the left hand Piece display panel.\n-   *\n+   * <p>\n    * 1. Always try and show the entire image 100% scale, plus PIECE_IMAGE_BORDER pixels\n    * 2. If the image can't fit in the available space, scale it until it can\n    * 3. If the image size is < max split size, then set the divider size = image size to now waste space\n-   *\n    */\n   private void resizeSlotPanel() {\n \n@@ -349,8 +349,7 @@ public class PieceDefiner extends JPanel implements HelpWindowExtension {\n       slot.setScale(1.0);\n       newSlotSize = slot.getPreferredSize();\n       slot.setScale(oldScale);\n-    }\n-    else {\n+    } else {\n       slot.getComponent().revalidate();\n       slot.getComponent().repaint();\n       final Rectangle r = slot.getPiece().boundingBox();\n@@ -369,8 +368,7 @@ public class PieceDefiner extends JPanel implements HelpWindowExtension {\n       slotPanel.setPreferredSize(updatedSlotSize);\n       slot.setScale(1.0);\n       scaleLabel.setText(\"\");\n-    }\n-    else {\n+    } else {\n       // The new piece is too large to fit in the available space. Scale it to fit on the most oversized axis\n       final double xRatio = maxSlotWidth / newSlotSize.getWidth();\n       final double yRatio = maxSlotHeight / newSlotSize.getHeight();\n@@ -380,7 +378,8 @@ public class PieceDefiner extends JPanel implements HelpWindowExtension {\n       slot.getComponent().revalidate();\n       slot.getComponent().repaint();\n       final Dimension scaledSlotSize = new Dimension((int) (newSlotSize.width * newScale), (int) (newSlotSize.height * newScale));\n-      slotPanel.setMaximumSize(new Dimension(Math.min(scaledSlotSize.width + PIECE_IMAGE_INSET * 2, maxSlotWidth), maxPanelHeight));\n+      slotPanel\n+        .setMaximumSize(new Dimension(Math.min(scaledSlotSize.width + PIECE_IMAGE_INSET * 2, maxSlotWidth), maxPanelHeight));\n       final Dimension updatedSlotSize = new Dimension(scaledSlotSize.width + PIECE_IMAGE_INSET * 2, scaledSlotSize.height);\n       slotPanel.setPreferredSize(updatedSlotSize);\n     }\n@@ -503,14 +502,16 @@ public class PieceDefiner extends JPanel implements HelpWindowExtension {\n     final JPanel addRemovePanel = new JPanel();\n     addRemovePanel.setLayout(new MigLayout(\"ins 0,wrap 1\")); // NON-NLS\n \n-    addButton = new JButton(Resources.getString(\"Editor.PieceDefiner.add\"), IconFactory.getIcon(\"go-next\", IconFamily.SMALL)); // NON-NLS\n+    addButton =\n+      new JButton(Resources.getString(\"Editor.PieceDefiner.add\"), IconFactory.getIcon(\"go-next\", IconFamily.SMALL)); // NON-NLS\n     addButton.setHorizontalTextPosition(SwingUtilities.LEFT);\n     addButton.setMargin(buttonInsets);\n     addButton.setToolTipText(Resources.getString(\"Editor.PieceDefiner.add_tip\"));\n     addButton.addActionListener(evt -> doAdd());\n     addRemovePanel.add(addButton, \"sg\"); // NON-NLS\n \n-    removeButton = new JButton(Resources.getString(\"Editor.PieceDefiner.remove\"), IconFactory.getIcon(\"go-previous\", IconFamily.SMALL)); // NON-NLS\n+    removeButton = new JButton(Resources.getString(\"Editor.PieceDefiner.remove\"),\n+      IconFactory.getIcon(\"go-previous\", IconFamily.SMALL)); // NON-NLS\n     removeButton.setMargin(buttonInsets);\n     removeButton.setToolTipText(Resources.getString(\"Editor.PieceDefiner.remove_tip\"));\n     removeButton.addActionListener(evt -> doRemove());\n@@ -592,7 +593,8 @@ public class PieceDefiner extends JPanel implements HelpWindowExtension {\n     // A panel to hold the trait navigation buttons.\n     final JPanel moveUpDownPanel = new JPanel(new MigLayout(\"ins 0,wrap 1\")); // NON-NLS\n \n-    moveTopButton = new JButton(Resources.getString(\"Editor.PieceDefiner.move_top\"), IconFactory.getIcon(\"go-top\", IconFamily.SMALL)); // NON-NLS\n+    moveTopButton = new JButton(Resources.getString(\"Editor.PieceDefiner.move_top\"),\n+      IconFactory.getIcon(\"go-top\", IconFamily.SMALL)); // NON-NLS\n     moveTopButton.setToolTipText(Resources.getString(\"Editor.PieceDefiner.top_tip\"));\n     moveTopButton.setHorizontalAlignment(SwingConstants.LEFT);\n     moveTopButton.setMargin(buttonInsets);\n@@ -604,7 +606,8 @@ public class PieceDefiner extends JPanel implements HelpWindowExtension {\n     });\n     moveUpDownPanel.add(moveTopButton, \"sg\"); // NON-NLS\n \n-    moveUpButton = new JButton(Resources.getString(\"Editor.PieceDefiner.move_up\"), IconFactory.getIcon(\"go-up\", IconFamily.SMALL)); // NON-NLS\n+    moveUpButton =\n+      new JButton(Resources.getString(\"Editor.PieceDefiner.move_up\"), IconFactory.getIcon(\"go-up\", IconFamily.SMALL)); // NON-NLS\n     moveUpButton.setToolTipText(Resources.getString(\"Editor.PieceDefiner.up_tip\"));\n     moveUpButton.setHorizontalAlignment(SwingConstants.LEFT);\n     moveUpButton.setMargin(buttonInsets);\n@@ -616,7 +619,8 @@ public class PieceDefiner extends JPanel implements HelpWindowExtension {\n     });\n     moveUpDownPanel.add(moveUpButton, \"sg\"); // NON-NLS\n \n-    moveDownButton = new JButton(Resources.getString(\"Editor.PieceDefiner.move_down\"), IconFactory.getIcon(\"go-down\", IconFamily.SMALL)); // NON-NLS\n+    moveDownButton = new JButton(Resources.getString(\"Editor.PieceDefiner.move_down\"),\n+      IconFactory.getIcon(\"go-down\", IconFamily.SMALL)); // NON-NLS\n     moveDownButton.setToolTipText(Resources.getString(\"Editor.PieceDefiner.down_tip\"));\n     moveDownButton.setHorizontalAlignment(SwingConstants.LEFT);\n     moveDownButton.setMargin(buttonInsets);\n@@ -628,7 +632,8 @@ public class PieceDefiner extends JPanel implements HelpWindowExtension {\n     });\n     moveUpDownPanel.add(moveDownButton, \"sg\"); // NON-NLS\n \n-    moveBottomButton = new JButton(Resources.getString(\"Editor.PieceDefiner.move_bottom\"), IconFactory.getIcon(\"go-bottom\", IconFamily.SMALL)); // NON-NLS\n+    moveBottomButton = new JButton(Resources.getString(\"Editor.PieceDefiner.move_bottom\"),\n+      IconFactory.getIcon(\"go-bottom\", IconFamily.SMALL)); // NON-NLS\n     moveBottomButton.setToolTipText(Resources.getString(\"Editor.PieceDefiner.bottom_trait\"));\n     moveBottomButton.setHorizontalAlignment(SwingConstants.LEFT);\n     moveBottomButton.setMargin(buttonInsets);\n@@ -663,7 +668,7 @@ public class PieceDefiner extends JPanel implements HelpWindowExtension {\n    */\n   private void splitChanged() {\n     // Exclude size changes due to resizes not initiated by the user\n-    if (! isSplitDragInProgress()) {\n+    if (!isSplitDragInProgress()) {\n       return;\n     }\n \n@@ -700,7 +705,8 @@ public class PieceDefiner extends JPanel implements HelpWindowExtension {\n    * @return OS specific name.\n    */\n   private String getCtrlKeyName(char c) {\n-    return KeyNamer.getKeyString(SwingUtils.genericToSystem(KeyStroke.getKeyStroke(c, Toolkit.getDefaultToolkit().getMenuShortcutKeyMaskEx())));\n+    return KeyNamer.getKeyString(\n+      SwingUtils.genericToSystem(KeyStroke.getKeyStroke(c, Toolkit.getDefaultToolkit().getMenuShortcutKeyMaskEx())));\n   }\n \n   private void doCopy() {\n@@ -728,13 +734,15 @@ public class PieceDefiner extends JPanel implements HelpWindowExtension {\n   }\n \n   private void doAdd() {\n-    doAdd(availableList.getSelectedIndex(), inUseList.getSelectedIndex() < 0 ? inUseList.getModel().getSize() : inUseList.getSelectedIndex());\n+    doAdd(availableList.getSelectedIndex(),\n+      inUseList.getSelectedIndex() < 0 ? inUseList.getModel().getSize() : inUseList.getSelectedIndex());\n   }\n \n   private void doAdd(int sourceIndex, int insertIndex) {\n     Object selected = availableList.getModel().getElementAt(sourceIndex);\n-    if (selected instanceof EditablePiece && Resources.getString(\"Editor.Immobilized.old_trait_description\").equals(((EditablePiece) selected).getDescription())) {\n-        selected = new Immobilized();\n+    if (selected instanceof EditablePiece &&\n+      Resources.getString(\"Editor.Immobilized.old_trait_description\").equals(((EditablePiece) selected).getDescription())) {\n+      selected = new Immobilized();\n     }\n     if (selected instanceof Decorator) {\n       if (inUseModel.getSize() > 0) {\n@@ -751,13 +759,11 @@ public class PieceDefiner extends JPanel implements HelpWindowExtension {\n           }\n         }\n       }\n-    }\n-    else if (selected != null && inUseModel.getSize() == 0) {\n+    } else if (selected != null && inUseModel.getSize() == 0) {\n       GamePiece p = null;\n       try {\n         p = (GamePiece) selected.getClass().getConstructor().newInstance();\n-      }\n-      catch (Throwable t) {\n+      } catch (Throwable t) {\n         ReflectionUtils.handleNewInstanceFailure(t, selected.getClass());\n       }\n \n@@ -806,7 +812,7 @@ public class PieceDefiner extends JPanel implements HelpWindowExtension {\n    * Move a Decorator to a new position in the list\n    *\n    * @param fromIndex Old Position\n-   * @param toIndex New Position\n+   * @param toIndex   New Position\n    */\n   protected void moveDecorator(int fromIndex, int toIndex) {\n \n@@ -852,7 +858,7 @@ public class PieceDefiner extends JPanel implements HelpWindowExtension {\n \n     // Find the existing inner and outer of the piece to be removed\n     final GamePiece inner = inUseModel.elementAt(index - 1);\n-    final Decorator outer = index < inUseModel.size() - 1 ?  (Decorator) inUseModel.elementAt(index + 1) : null;\n+    final Decorator outer = index < inUseModel.size() - 1 ? (Decorator) inUseModel.elementAt(index + 1) : null;\n \n     // Remove the piece at index\n     final GamePiece piece = inUseModel.remove(index);\n@@ -888,23 +894,25 @@ public class PieceDefiner extends JPanel implements HelpWindowExtension {\n   }\n \n   protected void importPiece(String className) {\n-    if (className == null) return;\n+    if (className == null) {\n+      return;\n+    }\n \n     Object o = null;\n     try {\n       o = GameModule.getGameModule().getDataArchive()\n-                    .loadClass(className).getConstructor().newInstance();\n-    }\n-    catch (Throwable t) {\n+        .loadClass(className).getConstructor().newInstance();\n+    } catch (Throwable t) {\n       ReflectionUtils.handleImportClassFailure(t, className);\n     }\n \n-    if (o == null) return;\n+    if (o == null) {\n+      return;\n+    }\n \n     if (o instanceof GamePiece) {\n       addAdditionalElement((GamePiece) o);\n-    }\n-    else {\n+    } else {\n       ErrorDialog.show(\"Error.not_a_gamepiece\", className); // NON-NLS Error Dialog Key\n     }\n   }\n@@ -928,11 +936,9 @@ public class PieceDefiner extends JPanel implements HelpWindowExtension {\n       final Window w = SwingUtilities.getWindowAncestor(this);\n       if (w instanceof Frame) {\n         ed = new Ed((Frame) w, p);\n-      }\n-      else if (w instanceof Dialog) {\n+      } else if (w instanceof Dialog) {\n         ed = new Ed((Dialog) w, p);\n-      }\n-      else {\n+      } else {\n         ed = new Ed((Frame) null, p);\n       }\n       final String oldState = p.getState();\n@@ -943,11 +949,10 @@ public class PieceDefiner extends JPanel implements HelpWindowExtension {\n         p.mySetType(c.getType());\n         if (p instanceof Decorator) {\n           ((Decorator) p).mySetState(c.getState());\n-        }\n-        else {\n+        } else {\n           p.setState(c.getState());\n         }\n-        if ((! p.getType().equals(oldType)) || (! p.getState().equals(oldState))) {\n+        if ((!p.getType().equals(oldType)) || (!p.getState().equals(oldState))) {\n           setChanged(true);\n         }\n         refresh();\n@@ -957,7 +962,9 @@ public class PieceDefiner extends JPanel implements HelpWindowExtension {\n     return false;\n   }\n \n-  /** A Dialog for editing an EditablePiece's properties */\n+  /**\n+   * A Dialog for editing an EditablePiece's properties\n+   */\n   protected static class Ed extends JDialog {\n     private static final long serialVersionUID = 1L;\n \n@@ -978,7 +985,8 @@ public class PieceDefiner extends JPanel implements HelpWindowExtension {\n       setLayout(new MigLayout(\"fill\", \"[grow,fill]\", \"[align top]rel[align bottom]\")); //NON-NLS\n \n       final JPanel scrollPanel = new JPanel(new MigLayout(\"wrap 1\", \"[grow,fill]\", \"[top]rel[bottom]\")); // NON-NLS\n-      final JScrollPane scroll = new JScrollPane(scrollPanel, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);\n+      final JScrollPane scroll =\n+        new JScrollPane(scrollPanel, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);\n       scrollPanel.add(ed.getControls(), \"growx,aligny top,wrap\"); //NON-NLS\n       add(scroll, \"growx,wrap\"); // NON-NLS\n \n@@ -1032,8 +1040,7 @@ public class PieceDefiner extends JPanel implements HelpWindowExtension {\n     Decorator d = null;\n     try {\n       d = cClass.getConstructor().newInstance();\n-    }\n-    catch (Throwable t) {\n+    } catch (Throwable t) {\n       ReflectionUtils.handleNewInstanceFailure(t, cClass);\n     }\n \n@@ -1063,8 +1070,7 @@ public class PieceDefiner extends JPanel implements HelpWindowExtension {\n       super.getListCellRendererComponent(list, \"\", index, selected, hasFocus);\n       if (value instanceof EditablePiece) {\n         setText(((EditablePiece) value).getDescription());\n-      }\n-      else {\n+      } else {\n         final String s = value.getClass().getName();\n         setText(s.substring(s.lastIndexOf('.') + 1));\n       }\n@@ -1074,19 +1080,22 @@ public class PieceDefiner extends JPanel implements HelpWindowExtension {\n \n   /**\n    * Contents of the Copy/Paste buffer for traits in the editor\n-   * @author rkinney\n    *\n+   * @author rkinney\n    */\n   private static class TraitClipboard {\n     private final String type;\n     private final String state;\n+\n     public TraitClipboard(Decorator copy) {\n       type = copy.myGetType();\n       state = copy.myGetState();\n     }\n+\n     public String getType() {\n       return type;\n     }\n+\n     public String getState() {\n       return state;\n     }\n@@ -1134,12 +1143,12 @@ public class PieceDefiner extends JPanel implements HelpWindowExtension {\n       // No Drop allowed in Available list\n       if (AVAILABLE.equals((info.getComponent()).getName())) {\n         return false;\n-      }\n-      else {\n+      } else {\n         // No drop allowed above BasicPiece in InUseList\n         final JList<GamePiece> list = (JList<GamePiece>) info.getComponent();\n \n-        if (list.getModel().getSize() > 0 && list.getModel().getElementAt(0).getClass() == BasicPiece.class && info.getDropLocation().getDropPoint().y < 10) {\n+        if (list.getModel().getSize() > 0 && list.getModel().getElementAt(0).getClass() == BasicPiece.class &&\n+          info.getDropLocation().getDropPoint().y < 10) {\n           return false;\n         }\n       }\n@@ -1182,6 +1191,7 @@ public class PieceDefiner extends JPanel implements HelpWindowExtension {\n       setDragImage(img);\n       setDragImageOffset(new Point(0, h));\n     }\n+\n     /**\n      * Move Only\n      */\n@@ -1201,7 +1211,7 @@ public class PieceDefiner extends JPanel implements HelpWindowExtension {\n      */\n     @Override\n     public boolean importData(TransferHandler.TransferSupport info) {\n-      if (!info.isDrop() || ! (info.getComponent() instanceof JList)) {\n+      if (!info.isDrop() || !(info.getComponent() instanceof JList)) {\n         return false;\n       }\n \n@@ -1212,8 +1222,7 @@ public class PieceDefiner extends JPanel implements HelpWindowExtension {\n         // If the source list is AVAILABLE, then we need to an Add\n         if (AVAILABLE.equals(getFromList())) {\n           getDefiner().doAdd(getFromIndex(), toIndex - 1);\n-        }\n-        else {\n+        } else {\n           // Ask the Definer to move the piece within the inUse list.\n           getDefiner().moveDecorator(getFromIndex(), toIndex);\n         }\n@@ -1253,11 +1262,9 @@ public class PieceDefiner extends JPanel implements HelpWindowExtension {\n         default:\n           break;\n         }\n-      }\n-      else if (e.getKeyCode() == KeyEvent.VK_DELETE) {\n+      } else if (e.getKeyCode() == KeyEvent.VK_DELETE) {\n         definer.removeButton.doClick();\n-      }\n-      else if (e.getKeyCode() == KeyEvent.VK_ENTER) {\n+      } else if (e.getKeyCode() == KeyEvent.VK_ENTER) {\n         definer.propsButton.doClick();\n       }\n     }\n",
            "diff_size": 90
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/errored/1/25/PieceDefiner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/styler_random/25/PieceDefiner.java\nindex e1fb461bfa0..28cb6c6b8ad 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/errored/1/25/PieceDefiner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/styler_random/25/PieceDefiner.java\n@@ -734,7 +734,7 @@ public class PieceDefiner extends JPanel implements HelpWindowExtension {\n   private void doAdd(int sourceIndex, int insertIndex) {\n     Object selected = availableList.getModel().getElementAt(sourceIndex);\n     if (selected instanceof EditablePiece && Resources.getString(\"Editor.Immobilized.old_trait_description\").equals(((EditablePiece) selected).getDescription())) {\n-        selected = new Immobilized();\n+      selected = new Immobilized();\n     }\n     if (selected instanceof Decorator) {\n       if (inUseModel.getSize() > 0) {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/errored/1/25/PieceDefiner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/styler_three_grams/25/PieceDefiner.java\nindex e1fb461bfa0..28cb6c6b8ad 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/errored/1/25/PieceDefiner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/styler_three_grams/25/PieceDefiner.java\n@@ -734,7 +734,7 @@ public class PieceDefiner extends JPanel implements HelpWindowExtension {\n   private void doAdd(int sourceIndex, int insertIndex) {\n     Object selected = availableList.getModel().getElementAt(sourceIndex);\n     if (selected instanceof EditablePiece && Resources.getString(\"Editor.Immobilized.old_trait_description\").equals(((EditablePiece) selected).getDescription())) {\n-        selected = new Immobilized();\n+      selected = new Immobilized();\n     }\n     if (selected instanceof Decorator) {\n       if (inUseModel.getSize() > 0) {\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}