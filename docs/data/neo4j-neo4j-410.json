{
    "project_name": "neo4j-neo4j",
    "error_id": "410",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "139",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "162",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "176",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "224",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "294",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "297",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "300",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "303",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "306",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "309",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "312",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "323",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "323",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "336",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "336",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "366",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "366",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "371",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "371",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "376",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "376",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "390",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "390",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "396",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "396",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "401",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "401",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "403",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "403",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "407",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "407",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "432",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "440",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "440",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "465",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "465",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "468",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "468",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "483",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "483",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "505",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "505",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "518",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "518",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "532",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "532",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "544",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "544",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "556",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "556",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "568",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "568",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "580",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "580",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "593",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "593",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "606",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "606",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "609",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "609",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "611",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "611",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "613",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "613",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "615",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "616",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "618",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "618",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "621",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "621",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "633",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "634",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "639",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "639",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "651",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "652",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "657",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "658",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "660",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "668",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "668",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "675",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "675",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "679",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "679",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "689",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "689",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "696",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "696",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "703",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "703",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "706",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "706",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "719",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "719",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "722",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "722",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "724",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "724",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "757",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "757",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "760",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "760",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "787",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "787",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "791",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "791",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "806",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "806",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "822",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "822",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "824",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "824",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "835",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "835",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "835",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "838",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "838",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "838",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "841",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "847",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "847",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "849",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "849",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "852",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "852",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "852",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "855",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "861",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "861",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "863",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "863",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "865",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "865",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "894",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "900",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "900",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "902",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "902",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "904",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "904",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "933",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "939",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "940",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "942",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "942",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "944",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "944",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "947",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "947",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "966",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "966",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "970",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "970",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "972",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "972",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/410/ByteCodeExpressionVisitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/410/ByteCodeExpressionVisitor.java\nindex 76b116c5cc8..030836ea422 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/410/ByteCodeExpressionVisitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/410/ByteCodeExpressionVisitor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.codegen.bytecode;\n \n import org.objectweb.asm.Label;\n@@ -132,323 +133,311 @@ import static org.objectweb.asm.Opcodes.T_SHORT;\n class ByteCodeExpressionVisitor implements ExpressionVisitor\n {\n     private static final boolean\n-            DEBUG_BYTE_CODE = flag( ByteCodeExpressionVisitor.class, \"checkByteCode\", false );\n+      DEBUG_BYTE_CODE = flag(ByteCodeExpressionVisitor.class, \"checkByteCode\", false);\n     private final MethodVisitor methodVisitor;\n \n-    ByteCodeExpressionVisitor( MethodVisitor methodVisitor )\n+    ByteCodeExpressionVisitor(MethodVisitor methodVisitor)\n     {\n         this.methodVisitor = methodVisitor;\n     }\n \n     @Override\n-    public void invoke( Expression target, MethodReference method, Expression[] arguments )\n+    public void invoke(Expression target, MethodReference method, Expression[] arguments)\n     {\n-        if ( DEBUG_BYTE_CODE )\n+        if (DEBUG_BYTE_CODE)\n         {\n-            assertMethodExists( method );\n+            assertMethodExists(method);\n         }\n-        target.accept( this );\n-        for ( Expression argument : arguments )\n+        target.accept(this);\n+        for (Expression argument : arguments)\n         {\n-            argument.accept( this );\n+            argument.accept(this);\n         }\n-        if ( Modifier.isInterface( method.owner().modifiers() ) )\n+        if (Modifier.isInterface(method.owner().modifiers()))\n         {\n             methodVisitor\n-                    .visitMethodInsn( INVOKEINTERFACE, byteCodeName( method.owner() ), method.name(),\n-                            desc( method ),\n-                            true );\n-        }\n-        else if ( method.isConstructor() )\n+              .visitMethodInsn(INVOKEINTERFACE, byteCodeName(method.owner()), method.name(),\n+                desc(method),\n+                true);\n+        } else if (method.isConstructor())\n         {\n             methodVisitor\n-                    .visitMethodInsn( INVOKESPECIAL, byteCodeName( method.owner() ), method.name(), desc( method ),\n-                            false );\n-        }\n-        else\n+              .visitMethodInsn(INVOKESPECIAL, byteCodeName(method.owner()), method.name(), desc(method),\n+                false);\n+        } else\n         {\n             methodVisitor\n-                    .visitMethodInsn( INVOKEVIRTUAL, byteCodeName( method.owner() ), method.name(), desc( method ),\n-                            false );\n+              .visitMethodInsn(INVOKEVIRTUAL, byteCodeName(method.owner()), method.name(), desc(method),\n+                false);\n         }\n     }\n \n     @Override\n-    public void invoke( MethodReference method, Expression[] arguments )\n+    public void invoke(MethodReference method, Expression[] arguments)\n     {\n-        if ( DEBUG_BYTE_CODE )\n+        if (DEBUG_BYTE_CODE)\n         {\n-            assertMethodExists( method );\n+            assertMethodExists(method);\n         }\n-        for ( Expression argument : arguments )\n+        for (Expression argument : arguments)\n         {\n-            argument.accept( this );\n+            argument.accept(this);\n         }\n-        methodVisitor.visitMethodInsn( INVOKESTATIC,\n-                byteCodeName( method.owner() ),\n-                method.name(), desc( method ), Modifier.isInterface( method.owner().modifiers() ) );\n+        methodVisitor.visitMethodInsn(INVOKESTATIC,\n+          byteCodeName(method.owner()),\n+          method.name(), desc(method), Modifier.isInterface(method.owner().modifiers()));\n     }\n \n     @Override\n-    public void load( LocalVariable variable )\n+    public void load(LocalVariable variable)\n     {\n-        if ( variable.type().isPrimitive() )\n+        if (variable.type().isPrimitive())\n         {\n-            switch ( variable.type().name() )\n+            switch (variable.type().name())\n             {\n+                case \"int\":\n+                case \"byte\":\n+                case \"short\":\n+                case \"char\":\n+                case \"boolean\":\n+                    methodVisitor.visitVarInsn(ILOAD, variable.index());\n+                    break;\n+                case \"long\":\n+                    methodVisitor.visitVarInsn(LLOAD, variable.index());\n+                    break;\n+                case \"float\":\n+                    methodVisitor.visitVarInsn(FLOAD, variable.index());\n+                    break;\n+                case \"double\":\n+                    methodVisitor.visitVarInsn(DLOAD, variable.index());\n+                    break;\n+                default:\n+                    methodVisitor.visitVarInsn(ALOAD, variable.index());\n+            }\n+        } else\n+        {\n+            methodVisitor.visitVarInsn(ALOAD, variable.index());\n+        }\n+    }\n+\n+    @Override\n+    public void arrayLoad(Expression array, Expression index)\n+    {\n+        assert array.type().isArray();\n+\n+        array.accept(this);\n+        index.accept(this);\n+        switch (array.type().name())\n+        {\n             case \"int\":\n+                methodVisitor.visitInsn(IALOAD);\n+                break;\n             case \"byte\":\n+                methodVisitor.visitInsn(BALOAD);\n+                break;\n             case \"short\":\n+                methodVisitor.visitInsn(SALOAD);\n+                break;\n             case \"char\":\n+                methodVisitor.visitInsn(CALOAD);\n+                break;\n             case \"boolean\":\n-                methodVisitor.visitVarInsn( ILOAD, variable.index() );\n+                methodVisitor.visitInsn(BALOAD);\n                 break;\n             case \"long\":\n-                methodVisitor.visitVarInsn( LLOAD, variable.index() );\n+                methodVisitor.visitInsn(LALOAD);\n                 break;\n             case \"float\":\n-                methodVisitor.visitVarInsn( FLOAD, variable.index() );\n+                methodVisitor.visitInsn(FALOAD);\n                 break;\n             case \"double\":\n-                methodVisitor.visitVarInsn( DLOAD, variable.index() );\n+                methodVisitor.visitInsn(DALOAD);\n                 break;\n             default:\n-                methodVisitor.visitVarInsn( ALOAD, variable.index() );\n-            }\n-        }\n-        else\n-        {\n-            methodVisitor.visitVarInsn( ALOAD, variable.index() );\n-        }\n-    }\n-\n-    @Override\n-    public void arrayLoad( Expression array, Expression index )\n-    {\n-        assert array.type().isArray();\n-\n-        array.accept( this );\n-        index.accept( this );\n-        switch ( array.type().name() )\n-        {\n-        case \"int\":\n-            methodVisitor.visitInsn( IALOAD );\n-            break;\n-        case \"byte\":\n-            methodVisitor.visitInsn( BALOAD );\n-            break;\n-        case \"short\":\n-            methodVisitor.visitInsn( SALOAD );\n-            break;\n-        case \"char\":\n-            methodVisitor.visitInsn( CALOAD );\n-            break;\n-        case \"boolean\":\n-            methodVisitor.visitInsn( BALOAD );\n-            break;\n-        case \"long\":\n-            methodVisitor.visitInsn( LALOAD );\n-            break;\n-        case \"float\":\n-            methodVisitor.visitInsn( FALOAD );\n-            break;\n-        case \"double\":\n-            methodVisitor.visitInsn( DALOAD );\n-            break;\n-        default:\n-            methodVisitor.visitInsn( AALOAD );\n+                methodVisitor.visitInsn(AALOAD);\n         }\n     }\n \n     @Override\n-    public void arraySet( Expression array, Expression index, Expression value )\n+    public void arraySet(Expression array, Expression index, Expression value)\n     {\n         assert array.type().isArray();\n \n-        array.accept( this );\n-        index.accept( this );\n-        value.accept( this );\n-        arrayStore( value.type() );\n+        array.accept(this);\n+        index.accept(this);\n+        value.accept(this);\n+        arrayStore(value.type());\n     }\n \n     @Override\n-    public void arrayLength( Expression array )\n+    public void arrayLength(Expression array)\n     {\n         assert array.type().isArray();\n-        array.accept( this );\n-        methodVisitor.visitInsn( ARRAYLENGTH );\n+        array.accept(this);\n+        methodVisitor.visitInsn(ARRAYLENGTH);\n     }\n \n     @Override\n-    public void getField( Expression target, FieldReference field )\n+    public void getField(Expression target, FieldReference field)\n     {\n-        target.accept( this );\n+        target.accept(this);\n         methodVisitor\n-                .visitFieldInsn( GETFIELD, byteCodeName( field.owner() ), field.name(), typeName( field.type() ) );\n+          .visitFieldInsn(GETFIELD, byteCodeName(field.owner()), field.name(), typeName(field.type()));\n     }\n \n     @Override\n-    public void constant( Object value )\n+    public void constant(Object value)\n     {\n-        if ( value == null )\n+        if (value == null)\n         {\n-            methodVisitor.visitInsn( ACONST_NULL );\n-        }\n-        else if ( value instanceof Integer )\n+            methodVisitor.visitInsn(ACONST_NULL);\n+        } else if (value instanceof Integer)\n         {\n-            pushInteger( (Integer) value );\n-        }\n-        else if ( value instanceof Byte )\n+            pushInteger((Integer) value);\n+        } else if (value instanceof Byte)\n         {\n-            pushInteger( (Byte) value );\n-        }\n-        else if ( value instanceof Short )\n+            pushInteger((Byte) value);\n+        } else if (value instanceof Short)\n         {\n-            pushInteger( (Short) value );\n-        }\n-        else if ( value instanceof Long )\n+            pushInteger((Short) value);\n+        } else if (value instanceof Long)\n         {\n-            pushLong( (Long) value );\n-        }\n-        else if ( value instanceof Double )\n+            pushLong((Long) value);\n+        } else if (value instanceof Double)\n         {\n-            methodVisitor.visitLdcInsn( value );\n-        }\n-        else if ( value instanceof Float )\n+            methodVisitor.visitLdcInsn(value);\n+        } else if (value instanceof Float)\n         {\n-            methodVisitor.visitLdcInsn( value );\n-        }\n-        else if ( value instanceof Boolean )\n+            methodVisitor.visitLdcInsn(value);\n+        } else if (value instanceof Boolean)\n         {\n             boolean b = (boolean) value;\n-            methodVisitor.visitInsn( b ? ICONST_1 : ICONST_0 );\n-        }\n-        else\n+            methodVisitor.visitInsn(b ? ICONST_1 : ICONST_0);\n+        } else\n         {\n-            methodVisitor.visitLdcInsn( value );\n+            methodVisitor.visitLdcInsn(value);\n         }\n     }\n \n     @Override\n-    public void getStatic( FieldReference field )\n+    public void getStatic(FieldReference field)\n     {\n         methodVisitor\n-                .visitFieldInsn( GETSTATIC, byteCodeName( field.owner() ), field.name(), typeName( field.type() ) );\n+          .visitFieldInsn(GETSTATIC, byteCodeName(field.owner()), field.name(), typeName(field.type()));\n     }\n \n     @Override\n-    public void loadThis( String sourceName )\n+    public void loadThis(String sourceName)\n     {\n-        methodVisitor.visitVarInsn( ALOAD, 0 );\n+        methodVisitor.visitVarInsn(ALOAD, 0);\n     }\n \n     @Override\n-    public void newInstance( TypeReference type )\n+    public void newInstance(TypeReference type)\n     {\n-        methodVisitor.visitTypeInsn( NEW, byteCodeName( type ) );\n-        methodVisitor.visitInsn( DUP );\n+        methodVisitor.visitTypeInsn(NEW, byteCodeName(type));\n+        methodVisitor.visitInsn(DUP);\n     }\n \n     @Override\n-    public void not( Expression expression )\n+    public void not(Expression expression)\n     {\n-        test( IFNE, expression, Expression.TRUE, Expression.FALSE );\n+        test(IFNE, expression, Expression.TRUE, Expression.FALSE);\n     }\n \n     @Override\n-    public void isNull( Expression expression )\n+    public void isNull(Expression expression)\n     {\n-        test( IFNONNULL, expression, Expression.TRUE, Expression.FALSE );\n+        test(IFNONNULL, expression, Expression.TRUE, Expression.FALSE);\n     }\n \n     @Override\n-    public void notNull( Expression expression )\n+    public void notNull(Expression expression)\n     {\n-        test( IFNULL, expression, Expression.TRUE, Expression.FALSE );\n+        test(IFNULL, expression, Expression.TRUE, Expression.FALSE);\n     }\n \n     @Override\n-    public void ternary( Expression test, Expression onTrue, Expression onFalse )\n+    public void ternary(Expression test, Expression onTrue, Expression onFalse)\n     {\n-        test( IFEQ, test, onTrue, onFalse );\n+        test(IFEQ, test, onTrue, onFalse);\n     }\n \n-    public void ternaryOnNull( Expression test, Expression onTrue, Expression onFalse )\n+    public void ternaryOnNull(Expression test, Expression onTrue, Expression onFalse)\n     {\n-        test( IFNONNULL, test, onTrue, onFalse );\n+        test(IFNONNULL, test, onTrue, onFalse);\n     }\n \n-    public void ternaryOnNonNull( Expression test, Expression onTrue, Expression onFalse )\n+    public void ternaryOnNonNull(Expression test, Expression onTrue, Expression onFalse)\n     {\n-        test( IFNULL, test, onTrue, onFalse );\n+        test(IFNULL, test, onTrue, onFalse);\n     }\n \n-    private void test( int test, Expression predicate, Expression onTrue, Expression onFalse )\n+    private void test(int test, Expression predicate, Expression onTrue, Expression onFalse)\n     {\n-        predicate.accept( this );\n+        predicate.accept(this);\n         Label isFalse = new Label();\n-        methodVisitor.visitJumpInsn( test, isFalse );\n-        onTrue.accept( this );\n+        methodVisitor.visitJumpInsn(test, isFalse);\n+        onTrue.accept(this);\n         Label after = new Label();\n-        methodVisitor.visitJumpInsn( GOTO, after );\n-        methodVisitor.visitLabel( isFalse );\n-        onFalse.accept( this );\n-        methodVisitor.visitLabel( after );\n+        methodVisitor.visitJumpInsn(GOTO, after);\n+        methodVisitor.visitLabel(isFalse);\n+        onFalse.accept(this);\n+        methodVisitor.visitLabel(after);\n     }\n \n     @Override\n-    public void equal( Expression lhs, Expression rhs )\n+    public void equal(Expression lhs, Expression rhs)\n     {\n-        equal( lhs, rhs, true );\n+        equal(lhs, rhs, true);\n     }\n \n     @Override\n-    public void notEqual( Expression lhs, Expression rhs )\n+    public void notEqual(Expression lhs, Expression rhs)\n     {\n-        equal( lhs, rhs, false );\n+        equal(lhs, rhs, false);\n     }\n \n-    private void equal( Expression lhs, Expression rhs, boolean equal )\n+    private void equal(Expression lhs, Expression rhs, boolean equal)\n     {\n-        if ( lhs.type().isPrimitive() )\n+        if (lhs.type().isPrimitive())\n         {\n             assert rhs.type().isPrimitive();\n \n-            switch ( lhs.type().name() )\n+            switch (lhs.type().name())\n             {\n-            case \"int\":\n-            case \"byte\":\n-            case \"short\":\n-            case \"char\":\n-            case \"boolean\":\n-                assertSameType( lhs, rhs, \"compare\" );\n-                compareIntOrReferenceType( lhs, rhs, equal ? IF_ICMPNE : IF_ICMPEQ );\n-                break;\n-            case \"long\":\n-                assertSameType( lhs, rhs, \"compare\" );\n-                compareLongOrFloatType( lhs, rhs, LCMP, equal ? IFNE : IFEQ );\n-                break;\n-            case \"float\":\n-                assertSameType( lhs, rhs, \"compare\" );\n-                compareLongOrFloatType( lhs, rhs, FCMPL, equal ? IFNE : IFEQ );\n-                break;\n-            case \"double\":\n-                assertSameType( lhs, rhs, \"compare\" );\n-                compareLongOrFloatType( lhs, rhs, DCMPL, equal ? IFNE : IFEQ );\n-                break;\n-            default:\n-                compareIntOrReferenceType( lhs, rhs, equal ? IF_ACMPNE : IF_ACMPEQ );\n+                case \"int\":\n+                case \"byte\":\n+                case \"short\":\n+                case \"char\":\n+                case \"boolean\":\n+                    assertSameType(lhs, rhs, \"compare\");\n+                    compareIntOrReferenceType(lhs, rhs, equal ? IF_ICMPNE : IF_ICMPEQ);\n+                    break;\n+                case \"long\":\n+                    assertSameType(lhs, rhs, \"compare\");\n+                    compareLongOrFloatType(lhs, rhs, LCMP, equal ? IFNE : IFEQ);\n+                    break;\n+                case \"float\":\n+                    assertSameType(lhs, rhs, \"compare\");\n+                    compareLongOrFloatType(lhs, rhs, FCMPL, equal ? IFNE : IFEQ);\n+                    break;\n+                case \"double\":\n+                    assertSameType(lhs, rhs, \"compare\");\n+                    compareLongOrFloatType(lhs, rhs, DCMPL, equal ? IFNE : IFEQ);\n+                    break;\n+                default:\n+                    compareIntOrReferenceType(lhs, rhs, equal ? IF_ACMPNE : IF_ACMPEQ);\n             }\n-        }\n-        else\n+        } else\n         {\n             assert !(rhs.type().isPrimitive());\n-            compareIntOrReferenceType( lhs, rhs, equal ? IF_ACMPNE : IF_ACMPEQ );\n+            compareIntOrReferenceType(lhs, rhs, equal ? IF_ACMPNE : IF_ACMPEQ);\n         }\n     }\n \n     @Override\n-    public void or( Expression... expressions )\n+    public void or(Expression... expressions)\n     {\n         assert expressions.length >= 2;\n         /*\n@@ -473,25 +462,25 @@ class ByteCodeExpressionVisitor implements ExpressionVisitor\n         Label l0 = new Label();\n         Label l1 = new Label();\n         Label l2 = new Label();\n-        for ( int i = 0; i < expressions.length; i++ )\n+        for (int i = 0; i < expressions.length; i++)\n         {\n-            expressions[i].accept( this );\n-            if ( i < expressions.length - 1 )\n+            expressions[i].accept(this);\n+            if (i < expressions.length - 1)\n             {\n-                methodVisitor.visitJumpInsn( IFNE, l0 );\n+                methodVisitor.visitJumpInsn(IFNE, l0);\n             }\n         }\n-        methodVisitor.visitJumpInsn( IFEQ, l1 );\n-        methodVisitor.visitLabel( l0 );\n-        methodVisitor.visitInsn( ICONST_1 );\n-        methodVisitor.visitJumpInsn( GOTO, l2 );\n-        methodVisitor.visitLabel( l1 );\n-        methodVisitor.visitInsn( ICONST_0 );\n-        methodVisitor.visitLabel( l2 );\n+        methodVisitor.visitJumpInsn(IFEQ, l1);\n+        methodVisitor.visitLabel(l0);\n+        methodVisitor.visitInsn(ICONST_1);\n+        methodVisitor.visitJumpInsn(GOTO, l2);\n+        methodVisitor.visitLabel(l1);\n+        methodVisitor.visitInsn(ICONST_0);\n+        methodVisitor.visitLabel(l2);\n     }\n \n     @Override\n-    public void and( Expression... expressions )\n+    public void and(Expression... expressions)\n     {\n         assert expressions.length >= 2;\n         /*\n@@ -513,327 +502,326 @@ class ByteCodeExpressionVisitor implements ExpressionVisitor\n          */\n         Label l0 = new Label();\n         Label l1 = new Label();\n-        for ( Expression expression : expressions )\n+        for (Expression expression : expressions)\n         {\n-            expression.accept( this );\n-            methodVisitor.visitJumpInsn( IFEQ, l0 );\n+            expression.accept(this);\n+            methodVisitor.visitJumpInsn(IFEQ, l0);\n         }\n-        methodVisitor.visitInsn( ICONST_1 );\n-        methodVisitor.visitJumpInsn( GOTO, l1 );\n-        methodVisitor.visitLabel( l0 );\n-        methodVisitor.visitInsn( ICONST_0 );\n-        methodVisitor.visitLabel( l1 );\n+        methodVisitor.visitInsn(ICONST_1);\n+        methodVisitor.visitJumpInsn(GOTO, l1);\n+        methodVisitor.visitLabel(l0);\n+        methodVisitor.visitInsn(ICONST_0);\n+        methodVisitor.visitLabel(l1);\n     }\n \n     @Override\n-    public void add( Expression lhs, Expression rhs )\n+    public void add(Expression lhs, Expression rhs)\n     {\n-        assertSameType( lhs, rhs, \"add\" );\n-        lhs.accept( this );\n-        rhs.accept( this );\n+        assertSameType(lhs, rhs, \"add\");\n+        lhs.accept(this);\n+        rhs.accept(this);\n \n-        numberOperation( lhs.type(),\n-                () -> methodVisitor.visitInsn( IADD ),\n-                () -> methodVisitor.visitInsn( LADD ),\n-                () -> methodVisitor.visitInsn( FADD ),\n-                () -> methodVisitor.visitInsn( DADD ) );\n+        numberOperation(lhs.type(),\n+          () -> methodVisitor.visitInsn(IADD),\n+          () -> methodVisitor.visitInsn(LADD),\n+          () -> methodVisitor.visitInsn(FADD),\n+          () -> methodVisitor.visitInsn(DADD));\n     }\n \n     @Override\n-    public void gt( Expression lhs, Expression rhs )\n+    public void gt(Expression lhs, Expression rhs)\n     {\n-        assertSameType( lhs, rhs, \"compare\" );\n-        numberOperation( lhs.type(),\n-                () -> compareIntOrReferenceType( lhs, rhs, IF_ICMPLE ),\n-                () -> compareLongOrFloatType( lhs, rhs, LCMP, IFLE ),\n-                () -> compareLongOrFloatType( lhs, rhs, FCMPL, IFLE ),\n-                () -> compareLongOrFloatType( lhs, rhs, DCMPL, IFLE )\n+        assertSameType(lhs, rhs, \"compare\");\n+        numberOperation(lhs.type(),\n+          () -> compareIntOrReferenceType(lhs, rhs, IF_ICMPLE),\n+          () -> compareLongOrFloatType(lhs, rhs, LCMP, IFLE),\n+          () -> compareLongOrFloatType(lhs, rhs, FCMPL, IFLE),\n+          () -> compareLongOrFloatType(lhs, rhs, DCMPL, IFLE)\n         );\n     }\n \n     @Override\n-    public void gte( Expression lhs, Expression rhs )\n+    public void gte(Expression lhs, Expression rhs)\n     {\n-        assertSameType( lhs, rhs, \"compare\" );\n-        numberOperation( lhs.type(),\n-                () -> compareIntOrReferenceType( lhs, rhs, IF_ICMPLT ),\n-                () -> compareLongOrFloatType( lhs, rhs, LCMP, IFLT ),\n-                () -> compareLongOrFloatType( lhs, rhs, FCMPL, IFLT ),\n-                () -> compareLongOrFloatType( lhs, rhs, DCMPL, IFLT )\n+        assertSameType(lhs, rhs, \"compare\");\n+        numberOperation(lhs.type(),\n+          () -> compareIntOrReferenceType(lhs, rhs, IF_ICMPLT),\n+          () -> compareLongOrFloatType(lhs, rhs, LCMP, IFLT),\n+          () -> compareLongOrFloatType(lhs, rhs, FCMPL, IFLT),\n+          () -> compareLongOrFloatType(lhs, rhs, DCMPL, IFLT)\n         );\n     }\n \n     @Override\n-    public void lt( Expression lhs, Expression rhs )\n+    public void lt(Expression lhs, Expression rhs)\n     {\n-        assertSameType( lhs, rhs, \"compare\" );\n-        numberOperation( lhs.type(),\n-                () -> compareIntOrReferenceType( lhs, rhs, IF_ICMPGE ),\n-                () -> compareLongOrFloatType( lhs, rhs, LCMP, IFGE ),\n-                () -> compareLongOrFloatType( lhs, rhs, FCMPG, IFGE ),\n-                () -> compareLongOrFloatType( lhs, rhs, DCMPG, IFGE )\n+        assertSameType(lhs, rhs, \"compare\");\n+        numberOperation(lhs.type(),\n+          () -> compareIntOrReferenceType(lhs, rhs, IF_ICMPGE),\n+          () -> compareLongOrFloatType(lhs, rhs, LCMP, IFGE),\n+          () -> compareLongOrFloatType(lhs, rhs, FCMPG, IFGE),\n+          () -> compareLongOrFloatType(lhs, rhs, DCMPG, IFGE)\n         );\n     }\n \n     @Override\n-    public void lte( Expression lhs, Expression rhs )\n+    public void lte(Expression lhs, Expression rhs)\n     {\n-        assertSameType( lhs, rhs, \"compare\" );\n-        numberOperation( lhs.type(),\n-                () -> compareIntOrReferenceType( lhs, rhs, IF_ICMPGT ),\n-                () -> compareLongOrFloatType( lhs, rhs, LCMP, IFGT ),\n-                () -> compareLongOrFloatType( lhs, rhs, FCMPG, IFGT ),\n-                () -> compareLongOrFloatType( lhs, rhs, DCMPG, IFGT )\n+        assertSameType(lhs, rhs, \"compare\");\n+        numberOperation(lhs.type(),\n+          () -> compareIntOrReferenceType(lhs, rhs, IF_ICMPGT),\n+          () -> compareLongOrFloatType(lhs, rhs, LCMP, IFGT),\n+          () -> compareLongOrFloatType(lhs, rhs, FCMPG, IFGT),\n+          () -> compareLongOrFloatType(lhs, rhs, DCMPG, IFGT)\n         );\n     }\n \n     @Override\n-    public void subtract( Expression lhs, Expression rhs )\n+    public void subtract(Expression lhs, Expression rhs)\n     {\n-        assertSameType( lhs, rhs, \"subtract\" );\n-        lhs.accept( this );\n-        rhs.accept( this );\n-        numberOperation( lhs.type(),\n-                () -> methodVisitor.visitInsn( ISUB ),\n-                () -> methodVisitor.visitInsn( LSUB ),\n-                () -> methodVisitor.visitInsn( FSUB ),\n-                () -> methodVisitor.visitInsn( DSUB ) );\n+        assertSameType(lhs, rhs, \"subtract\");\n+        lhs.accept(this);\n+        rhs.accept(this);\n+        numberOperation(lhs.type(),\n+          () -> methodVisitor.visitInsn(ISUB),\n+          () -> methodVisitor.visitInsn(LSUB),\n+          () -> methodVisitor.visitInsn(FSUB),\n+          () -> methodVisitor.visitInsn(DSUB));\n     }\n \n     @Override\n-    public void multiply( Expression lhs, Expression rhs )\n+    public void multiply(Expression lhs, Expression rhs)\n     {\n-        assertSameType( lhs, rhs, \"multiply\" );\n-        lhs.accept( this );\n-        rhs.accept( this );\n-        numberOperation( lhs.type(),\n-                () -> methodVisitor.visitInsn( IMUL ),\n-                () -> methodVisitor.visitInsn( LMUL ),\n-                () -> methodVisitor.visitInsn( FMUL ),\n-                () -> methodVisitor.visitInsn( DMUL ) );\n+        assertSameType(lhs, rhs, \"multiply\");\n+        lhs.accept(this);\n+        rhs.accept(this);\n+        numberOperation(lhs.type(),\n+          () -> methodVisitor.visitInsn(IMUL),\n+          () -> methodVisitor.visitInsn(LMUL),\n+          () -> methodVisitor.visitInsn(FMUL),\n+          () -> methodVisitor.visitInsn(DMUL));\n     }\n \n     @Override\n-    public void cast( TypeReference type, Expression expression )\n+    public void cast(TypeReference type, Expression expression)\n     {\n-        expression.accept( this );\n-        if ( !type.equals( expression.type() ) )\n+        expression.accept(this);\n+        if (!type.equals(expression.type()))\n         {\n-            if ( type.isPrimitive() )\n+            if (type.isPrimitive())\n             {\n-                if ( !expression.type().isPrimitive() )\n+                if (!expression.type().isPrimitive())\n                 {\n-                    throw new IllegalStateException( \"Cannot cast a non-primitive \" + expression.type().simpleName() +\n-                                                     \" to a primitive \" + type.simpleName() );\n+                    throw new IllegalStateException(\"Cannot cast a non-primitive \" + expression.type().simpleName() +\n+                      \" to a primitive \" + type.simpleName());\n                 }\n-                switch ( type.simpleName() )\n+                switch (type.simpleName())\n                 {\n-                case \"long\":\n-                    switch ( expression.type().simpleName() )\n-                    {\n-                    case \"int\":\n-                        methodVisitor.visitInsn( I2L );\n-                        break;\n-                    case \"float\":\n-                        methodVisitor.visitInsn( F2L );\n-                        break;\n-                    case \"double\":\n-                        methodVisitor.visitInsn( D2L );\n-                        break;\n-                    default:\n-                        throw new IllegalStateException( \"Do not know how to cast a primitive \" + expression.type().simpleName() +\n-                                \" to a primitive \" + type.simpleName() );\n-                    }\n-                    break;\n-\n-                case \"int\":\n-                    switch ( expression.type().simpleName() )\n-                    {\n                     case \"long\":\n-                        methodVisitor.visitInsn( L2I );\n+                        switch (expression.type().simpleName())\n+                        {\n+                            case \"int\":\n+                                methodVisitor.visitInsn(I2L);\n+                                break;\n+                            case \"float\":\n+                                methodVisitor.visitInsn(F2L);\n+                                break;\n+                            case \"double\":\n+                                methodVisitor.visitInsn(D2L);\n+                                break;\n+                            default:\n+                                throw new IllegalStateException(\"Do not know how to cast a primitive \" + expression.type().simpleName() +\n+                                  \" to a primitive \" + type.simpleName());\n+                        }\n                         break;\n-                    case \"float\":\n-                        methodVisitor.visitInsn( F2I );\n-                        break;\n-                    case \"double\":\n-                        methodVisitor.visitInsn( D2I );\n+\n+                    case \"int\":\n+                        switch (expression.type().simpleName())\n+                        {\n+                            case \"long\":\n+                                methodVisitor.visitInsn(L2I);\n+                                break;\n+                            case \"float\":\n+                                methodVisitor.visitInsn(F2I);\n+                                break;\n+                            case \"double\":\n+                                methodVisitor.visitInsn(D2I);\n+                                break;\n+                            default:\n+                                throw new IllegalStateException(\"Do not know how to cast a primitive \" + expression.type().simpleName() +\n+                                  \" to a primitive \" + type.simpleName());\n+                        }\n                         break;\n-                    default:\n-                        throw new IllegalStateException( \"Do not know how to cast a primitive \" + expression.type().simpleName() +\n-                                \" to a primitive \" + type.simpleName() );\n-                    }\n-                    break;\n \n-                default:\n-                    throw new IllegalStateException( \"Do not know how to cast a primitive \" + expression.type().simpleName() +\n-                            \" to a primitive \" + type.simpleName() );\n+                    default:\n+                        throw new IllegalStateException(\"Do not know how to cast a primitive \" + expression.type().simpleName() +\n+                          \" to a primitive \" + type.simpleName());\n                 }\n-            }\n-            else\n+            } else\n             {\n-                methodVisitor.visitTypeInsn( CHECKCAST, byteCodeName( type ) );\n+                methodVisitor.visitTypeInsn(CHECKCAST, byteCodeName(type));\n             }\n         }\n     }\n \n     @Override\n-    public void instanceOf( TypeReference type, Expression expression )\n+    public void instanceOf(TypeReference type, Expression expression)\n     {\n-        expression.accept( this );\n-        methodVisitor.visitTypeInsn( INSTANCEOF, byteCodeName( type ) );\n+        expression.accept(this);\n+        methodVisitor.visitTypeInsn(INSTANCEOF, byteCodeName(type));\n     }\n \n     @Override\n-    public void newInitializedArray( TypeReference type, Expression... exprs )\n+    public void newInitializedArray(TypeReference type, Expression... exprs)\n     {\n-        pushInteger( exprs.length );\n-        createArray( type );\n-        for ( int i = 0; i < exprs.length; i++ )\n+        pushInteger(exprs.length);\n+        createArray(type);\n+        for (int i = 0; i < exprs.length; i++)\n         {\n-            methodVisitor.visitInsn( DUP );\n-            pushInteger( i );\n-            exprs[i].accept( this );\n-            arrayStore( type );\n+            methodVisitor.visitInsn(DUP);\n+            pushInteger(i);\n+            exprs[i].accept(this);\n+            arrayStore(type);\n         }\n     }\n \n     @Override\n-    public void newArray( TypeReference type, int size )\n+    public void newArray(TypeReference type, int size)\n     {\n-        pushInteger( size );\n-        createArray( type );\n+        pushInteger(size);\n+        createArray(type);\n     }\n \n     @Override\n-    public void longToDouble( Expression expression )\n+    public void longToDouble(Expression expression)\n     {\n-        expression.accept( this );\n-        methodVisitor.visitInsn( L2D );\n+        expression.accept(this);\n+        methodVisitor.visitInsn(L2D);\n     }\n \n     @Override\n-    public void pop( Expression expression )\n+    public void pop(Expression expression)\n     {\n-        expression.accept( this );\n-        switch ( expression.type().simpleName() )\n+        expression.accept(this);\n+        switch (expression.type().simpleName())\n         {\n-        case \"long\":\n-        case \"double\":\n-            methodVisitor.visitInsn( POP2 );\n-            break;\n-        default:\n-            methodVisitor.visitInsn( POP );\n-            break;\n+            case \"long\":\n+            case \"double\":\n+                methodVisitor.visitInsn(POP2);\n+                break;\n+            default:\n+                methodVisitor.visitInsn(POP);\n+                break;\n         }\n     }\n \n     @Override\n-    public void box( Expression expression )\n+    public void box(Expression expression)\n     {\n-        expression.accept( this );\n-        if ( expression.type().isPrimitive() )\n+        expression.accept(this);\n+        if (expression.type().isPrimitive())\n         {\n-            switch ( expression.type().name() )\n+            switch (expression.type().name())\n             {\n-            case \"byte\":\n-                methodVisitor.visitMethodInsn( INVOKESTATIC, \"java/lang/Byte\", \"valueOf\", \"(B)Ljava/lang/Byte;\", false );\n+                case \"byte\":\n+                    methodVisitor.visitMethodInsn(INVOKESTATIC, \"java/lang/Byte\", \"valueOf\", \"(B)Ljava/lang/Byte;\", false);\n+                    break;\n+                case \"short\":\n+                    methodVisitor.visitMethodInsn(INVOKESTATIC, \"java/lang/Short\", \"valueOf\", \"(S)Ljava/lang/Short;\", false);\n+                    break;\n+                case \"int\":\n+                    methodVisitor.visitMethodInsn(INVOKESTATIC, \"java/lang/Integer\", \"valueOf\", \"(I)Ljava/lang/Integer;\", false);\n+                    break;\n+                case \"long\":\n+                    methodVisitor.visitMethodInsn(INVOKESTATIC, \"java/lang/Long\", \"valueOf\", \"(J)Ljava/lang/Long;\", false);\n+                    break;\n+                case \"char\":\n+                    methodVisitor.visitMethodInsn(INVOKESTATIC, \"java/lang/Character\", \"valueOf\", \"(C)Ljava/lang/Character;\", false);\n+                    break;\n+                case \"boolean\":\n+                    methodVisitor.visitMethodInsn(INVOKESTATIC, \"java/lang/Boolean\", \"valueOf\", \"(Z)Ljava/lang/Boolean;\", false);\n+                    break;\n+                case \"float\":\n+                    methodVisitor.visitMethodInsn(INVOKESTATIC, \"java/lang/Float\", \"valueOf\", \"(F)Ljava/lang/Float;\", false);\n+                    break;\n+                case \"double\":\n+                    methodVisitor.visitMethodInsn(INVOKESTATIC, \"java/lang/Double\", \"valueOf\", \"(D)Ljava/lang/Double;\", false);\n+                    break;\n+                default:\n+                    //do nothing, expression is already boxed\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void unbox(Expression expression)\n+    {\n+        expression.accept(this);\n+        switch (expression.type().fullName())\n+        {\n+            case \"java.lang.Byte\":\n+                methodVisitor.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Byte\", \"byteValue\", \"()B\", false);\n                 break;\n-            case \"short\":\n-                methodVisitor.visitMethodInsn( INVOKESTATIC, \"java/lang/Short\", \"valueOf\", \"(S)Ljava/lang/Short;\", false );\n+            case \"java.lang.Short\":\n+                methodVisitor.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Short\", \"shortValue\", \"()S\", false);\n                 break;\n-            case \"int\":\n-                methodVisitor.visitMethodInsn( INVOKESTATIC, \"java/lang/Integer\", \"valueOf\", \"(I)Ljava/lang/Integer;\", false );\n+            case \"java.lang.Integer\":\n+                methodVisitor.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Integer\", \"intValue\", \"()I\", false);\n                 break;\n-            case \"long\":\n-                methodVisitor.visitMethodInsn( INVOKESTATIC, \"java/lang/Long\", \"valueOf\", \"(J)Ljava/lang/Long;\", false );\n+            case \"java.lang.Long\":\n+                methodVisitor.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Long\", \"longValue\", \"()J\", false);\n                 break;\n-            case \"char\":\n-                methodVisitor.visitMethodInsn( INVOKESTATIC, \"java/lang/Character\", \"valueOf\", \"(C)Ljava/lang/Character;\", false );\n+            case \"java.lang.Character\":\n+                methodVisitor.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Character\", \"charValue\", \"()C\", false);\n                 break;\n-            case \"boolean\":\n-                methodVisitor.visitMethodInsn( INVOKESTATIC, \"java/lang/Boolean\", \"valueOf\", \"(Z)Ljava/lang/Boolean;\", false );\n+            case \"java.lang.Boolean\":\n+                methodVisitor.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Boolean\", \"booleanValue\", \"()Z\", false);\n                 break;\n-            case \"float\":\n-                methodVisitor.visitMethodInsn( INVOKESTATIC, \"java/lang/Float\", \"valueOf\", \"(F)Ljava/lang/Float;\", false );\n+            case \"java.lang.Float\":\n+                methodVisitor.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Float\", \"floatValue\", \"()F\", false);\n                 break;\n-            case \"double\":\n-                methodVisitor.visitMethodInsn( INVOKESTATIC, \"java/lang/Double\", \"valueOf\", \"(D)Ljava/lang/Double;\", false );\n+            case \"java.lang.Double\":\n+                methodVisitor.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Double\", \"doubleValue\", \"()D\", false);\n                 break;\n             default:\n-                //do nothing, expression is already boxed\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void unbox( Expression expression )\n-    {\n-        expression.accept( this );\n-        switch ( expression.type().fullName() )\n-        {\n-        case \"java.lang.Byte\":\n-            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Byte\", \"byteValue\", \"()B\", false);\n-            break;\n-        case \"java.lang.Short\":\n-            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Short\", \"shortValue\", \"()S\", false);\n-            break;\n-        case \"java.lang.Integer\":\n-            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Integer\", \"intValue\", \"()I\", false);\n-            break;\n-        case \"java.lang.Long\":\n-            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Long\", \"longValue\", \"()J\", false);\n-            break;\n-        case \"java.lang.Character\":\n-            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Character\", \"charValue\", \"()C\", false);\n-            break;\n-        case \"java.lang.Boolean\":\n-            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Boolean\", \"booleanValue\", \"()Z\", false);\n-            break;\n-        case \"java.lang.Float\":\n-            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Float\", \"floatValue\", \"()F\", false);\n-            break;\n-        case \"java.lang.Double\":\n-            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Double\", \"doubleValue\", \"()D\", false);\n-            break;\n-        default:\n-            throw new IllegalStateException( \"Cannot unbox \" + expression.type().fullName() );\n+                throw new IllegalStateException(\"Cannot unbox \" + expression.type().fullName());\n         }\n     }\n \n-    private void compareIntOrReferenceType( Expression lhs, Expression rhs, int inverseOpcode )\n+    private void compareIntOrReferenceType(Expression lhs, Expression rhs, int inverseOpcode)\n     {\n-        lhs.accept( this );\n-        rhs.accept( this );\n+        lhs.accept(this);\n+        rhs.accept(this);\n \n         Label l0 = new Label();\n-        methodVisitor.visitJumpInsn( inverseOpcode, l0 );\n-        methodVisitor.visitInsn( ICONST_1 );\n+        methodVisitor.visitJumpInsn(inverseOpcode, l0);\n+        methodVisitor.visitInsn(ICONST_1);\n         Label l1 = new Label();\n-        methodVisitor.visitJumpInsn( GOTO, l1 );\n-        methodVisitor.visitLabel( l0 );\n-        methodVisitor.visitInsn( ICONST_0 );\n-        methodVisitor.visitLabel( l1 );\n+        methodVisitor.visitJumpInsn(GOTO, l1);\n+        methodVisitor.visitLabel(l0);\n+        methodVisitor.visitInsn(ICONST_0);\n+        methodVisitor.visitLabel(l1);\n     }\n \n-    private void compareLongOrFloatType( Expression lhs, Expression rhs, int inverseOpcode, int compare )\n+    private void compareLongOrFloatType(Expression lhs, Expression rhs, int inverseOpcode, int compare)\n     {\n-        lhs.accept( this );\n-        rhs.accept( this );\n+        lhs.accept(this);\n+        rhs.accept(this);\n \n-        methodVisitor.visitInsn( inverseOpcode );\n+        methodVisitor.visitInsn(inverseOpcode);\n         Label l0 = new Label();\n-        methodVisitor.visitJumpInsn( compare, l0 );\n-        methodVisitor.visitInsn( ICONST_1 );\n+        methodVisitor.visitJumpInsn(compare, l0);\n+        methodVisitor.visitInsn(ICONST_1);\n         Label l1 = new Label();\n-        methodVisitor.visitJumpInsn( GOTO, l1 );\n-        methodVisitor.visitLabel( l0 );\n-        methodVisitor.visitInsn( ICONST_0 );\n-        methodVisitor.visitLabel( l1 );\n+        methodVisitor.visitJumpInsn(GOTO, l1);\n+        methodVisitor.visitLabel(l0);\n+        methodVisitor.visitInsn(ICONST_0);\n+        methodVisitor.visitLabel(l1);\n     }\n \n-    private void pushInteger( int integer )\n+    private void pushInteger(int integer)\n     {\n-        if ( integer < 6 && integer >= -1 )\n+        if (integer < 6 && integer >= -1)\n         {\n             //LOAD fast, specialized constant instructions\n             //ICONST_M1 = 2;\n@@ -843,155 +831,148 @@ class ByteCodeExpressionVisitor implements ExpressionVisitor\n             //ICONST_3 = 6;\n             //ICONST_4 = 7;\n             //ICONST_5 = 8;\n-            methodVisitor.visitInsn( ICONST_0 + integer );\n-        }\n-        else if ( integer <= Byte.MAX_VALUE && integer >= Byte.MIN_VALUE )\n+            methodVisitor.visitInsn(ICONST_0 + integer);\n+        } else if (integer <= Byte.MAX_VALUE && integer >= Byte.MIN_VALUE)\n         {\n-            methodVisitor.visitIntInsn( BIPUSH, integer );\n-        }\n-        else if ( integer <= Short.MAX_VALUE && integer >= Short.MIN_VALUE )\n+            methodVisitor.visitIntInsn(BIPUSH, integer);\n+        } else if (integer <= Short.MAX_VALUE && integer >= Short.MIN_VALUE)\n         {\n-            methodVisitor.visitIntInsn( SIPUSH, integer );\n-        }\n-        else\n+            methodVisitor.visitIntInsn(SIPUSH, integer);\n+        } else\n         {\n-            methodVisitor.visitLdcInsn( integer );\n+            methodVisitor.visitLdcInsn(integer);\n         }\n     }\n \n-    private void pushLong( long integer )\n+    private void pushLong(long integer)\n     {\n-        if ( integer == 0L )\n+        if (integer == 0L)\n         {\n-            methodVisitor.visitInsn( LCONST_0 );\n-        }\n-        else if ( integer == 1L )\n+            methodVisitor.visitInsn(LCONST_0);\n+        } else if (integer == 1L)\n         {\n-            methodVisitor.visitInsn( LCONST_1 );\n-        }\n-        else\n+            methodVisitor.visitInsn(LCONST_1);\n+        } else\n         {\n-            methodVisitor.visitLdcInsn( integer );\n+            methodVisitor.visitLdcInsn(integer);\n         }\n     }\n \n-    private void createArray( TypeReference reference )\n+    private void createArray(TypeReference reference)\n     {\n-        if ( reference.isPrimitive() )\n+        if (reference.isPrimitive())\n         {\n-            switch ( reference.name() )\n+            switch (reference.name())\n             {\n-            case \"int\":\n-                methodVisitor.visitIntInsn( NEWARRAY, T_INT );\n-                break;\n-            case \"long\":\n-                methodVisitor.visitIntInsn( NEWARRAY, T_LONG );\n-                break;\n-            case \"byte\":\n-                methodVisitor.visitIntInsn( NEWARRAY, T_BYTE );\n-                break;\n-            case \"short\":\n-                methodVisitor.visitIntInsn( NEWARRAY, T_SHORT );\n-                break;\n-            case \"char\":\n-                methodVisitor.visitIntInsn( NEWARRAY, T_CHAR );\n-                break;\n-            case \"float\":\n-                methodVisitor.visitIntInsn( NEWARRAY, T_FLOAT );\n-                break;\n-            case \"double\":\n-                methodVisitor.visitIntInsn( NEWARRAY, T_DOUBLE );\n-                break;\n-            case \"boolean\":\n-                methodVisitor.visitIntInsn( NEWARRAY, T_BOOLEAN );\n-                break;\n-            default:\n-                methodVisitor.visitTypeInsn( ANEWARRAY, byteCodeName( reference ) );\n+                case \"int\":\n+                    methodVisitor.visitIntInsn(NEWARRAY, T_INT);\n+                    break;\n+                case \"long\":\n+                    methodVisitor.visitIntInsn(NEWARRAY, T_LONG);\n+                    break;\n+                case \"byte\":\n+                    methodVisitor.visitIntInsn(NEWARRAY, T_BYTE);\n+                    break;\n+                case \"short\":\n+                    methodVisitor.visitIntInsn(NEWARRAY, T_SHORT);\n+                    break;\n+                case \"char\":\n+                    methodVisitor.visitIntInsn(NEWARRAY, T_CHAR);\n+                    break;\n+                case \"float\":\n+                    methodVisitor.visitIntInsn(NEWARRAY, T_FLOAT);\n+                    break;\n+                case \"double\":\n+                    methodVisitor.visitIntInsn(NEWARRAY, T_DOUBLE);\n+                    break;\n+                case \"boolean\":\n+                    methodVisitor.visitIntInsn(NEWARRAY, T_BOOLEAN);\n+                    break;\n+                default:\n+                    methodVisitor.visitTypeInsn(ANEWARRAY, byteCodeName(reference));\n             }\n-        }\n-        else\n+        } else\n         {\n-            methodVisitor.visitTypeInsn( ANEWARRAY, byteCodeName( reference ) );\n+            methodVisitor.visitTypeInsn(ANEWARRAY, byteCodeName(reference));\n         }\n     }\n \n-    private void arrayStore( TypeReference reference )\n+    private void arrayStore(TypeReference reference)\n     {\n-        if ( reference.isPrimitive() )\n+        if (reference.isPrimitive())\n         {\n-            switch ( reference.name() )\n+            switch (reference.name())\n             {\n+                case \"int\":\n+                    methodVisitor.visitInsn(IASTORE);\n+                    break;\n+                case \"long\":\n+                    methodVisitor.visitInsn(LASTORE);\n+                    break;\n+                case \"byte\":\n+                    methodVisitor.visitInsn(BASTORE);\n+                    break;\n+                case \"short\":\n+                    methodVisitor.visitInsn(SASTORE);\n+                    break;\n+                case \"char\":\n+                    methodVisitor.visitInsn(CASTORE);\n+                    break;\n+                case \"float\":\n+                    methodVisitor.visitInsn(FASTORE);\n+                    break;\n+                case \"double\":\n+                    methodVisitor.visitInsn(DASTORE);\n+                    break;\n+                case \"boolean\":\n+                    methodVisitor.visitInsn(BASTORE);\n+                    break;\n+                default:\n+                    methodVisitor.visitInsn(AASTORE);\n+            }\n+        } else\n+        {\n+            methodVisitor.visitInsn(AASTORE);\n+        }\n+    }\n+\n+    private void numberOperation(TypeReference type, Runnable onInt, Runnable onLong, Runnable onFloat,\n+                                 Runnable onDouble)\n+    {\n+        if (!type.isPrimitive())\n+        {\n+            throw new IllegalStateException(\"Cannot compare reference types\");\n+        }\n+\n+        switch (type.name())\n+        {\n             case \"int\":\n-                methodVisitor.visitInsn( IASTORE );\n-                break;\n-            case \"long\":\n-                methodVisitor.visitInsn( LASTORE );\n-                break;\n             case \"byte\":\n-                methodVisitor.visitInsn( BASTORE );\n-                break;\n             case \"short\":\n-                methodVisitor.visitInsn( SASTORE );\n-                break;\n             case \"char\":\n-                methodVisitor.visitInsn( CASTORE );\n+            case \"boolean\":\n+                onInt.run();\n+                break;\n+            case \"long\":\n+                onLong.run();\n                 break;\n             case \"float\":\n-                methodVisitor.visitInsn( FASTORE );\n+                onFloat.run();\n                 break;\n             case \"double\":\n-                methodVisitor.visitInsn( DASTORE );\n-                break;\n-            case \"boolean\":\n-                methodVisitor.visitInsn( BASTORE );\n+                onDouble.run();\n                 break;\n             default:\n-                methodVisitor.visitInsn( AASTORE );\n-            }\n-        }\n-        else\n-        {\n-            methodVisitor.visitInsn( AASTORE );\n-        }\n-    }\n-\n-    private void numberOperation( TypeReference type, Runnable onInt, Runnable onLong, Runnable onFloat,\n-            Runnable onDouble )\n-    {\n-        if ( !type.isPrimitive() )\n-        {\n-            throw new IllegalStateException( \"Cannot compare reference types\" );\n-        }\n-\n-        switch ( type.name() )\n-        {\n-        case \"int\":\n-        case \"byte\":\n-        case \"short\":\n-        case \"char\":\n-        case \"boolean\":\n-            onInt.run();\n-            break;\n-        case \"long\":\n-            onLong.run();\n-            break;\n-        case \"float\":\n-            onFloat.run();\n-            break;\n-        case \"double\":\n-            onDouble.run();\n-            break;\n-        default:\n-            throw new IllegalStateException( \"Cannot compare reference types\" );\n+                throw new IllegalStateException(\"Cannot compare reference types\");\n         }\n     }\n \n-    private void assertSameType( Expression lhs, Expression rhs, String operation )\n+    private void assertSameType(Expression lhs, Expression rhs, String operation)\n     {\n-        if ( !lhs.type().equals( rhs.type() ) )\n+        if (!lhs.type().equals(rhs.type()))\n         {\n             throw new IllegalArgumentException(\n-                    String.format( \"Can only %s values of the same type (lhs: %s, rhs: %s)\", operation, lhs.type(), rhs.type() )\n+              String.format(\"Can only %s values of the same type (lhs: %s, rhs: %s)\", operation, lhs.type(), rhs.type())\n             );\n         }\n     }\n",
            "diff_size": 664
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}