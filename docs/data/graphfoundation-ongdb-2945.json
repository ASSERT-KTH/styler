{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2945",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "40",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "85",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "112",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2945/KernelEventHandlers.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2945/KernelEventHandlers.java\nindex 8f40e4b6ed8..50edcbbb2f3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2945/KernelEventHandlers.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2945/KernelEventHandlers.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.internal;\n \n import java.util.List;\n@@ -33,91 +34,89 @@ import org.neo4j.logging.Log;\n public class KernelEventHandlers\n     implements Lifecycle\n {\n-    private final List<KernelEventHandler> kernelEventHandlers = new CopyOnWriteArrayList<>();\n-    private final Log log;\n+  private final List<KernelEventHandler> kernelEventHandlers = new CopyOnWriteArrayList<>();\n+  private final Log log;\n \n-    public KernelEventHandlers( Log log )\n-    {\n-        this.log = log;\n-    }\n+  public KernelEventHandlers(Log log)\n+  {\n+    this.log = log;\n+  }\n \n-    @Override\n-    public void init()\n-    {\n-    }\n+  @Override\n+  public void init()\n+  {\n+  }\n \n-    @Override\n-    public void start()\n-    {\n-    }\n+  @Override\n+  public void start()\n+  {\n+  }\n+\n+  @Override\n+  public void stop()\n+  {\n+  }\n \n-    @Override\n-    public void stop()\n+  @Override\n+  public void shutdown()\n+  {\n+    for (KernelEventHandler kernelEventHandler : kernelEventHandlers)\n     {\n+      kernelEventHandler.beforeShutdown();\n     }\n+  }\n \n-    @Override\n-    public void shutdown()\n+  public KernelEventHandler registerKernelEventHandler(KernelEventHandler handler)\n+  {\n+    if (this.kernelEventHandlers.contains(handler))\n     {\n-        for ( KernelEventHandler kernelEventHandler : kernelEventHandlers )\n-        {\n-            kernelEventHandler.beforeShutdown();\n-        }\n+      return handler;\n     }\n \n-    public KernelEventHandler registerKernelEventHandler( KernelEventHandler handler )\n+    // Some algo for putting it in the right place\n+    for (KernelEventHandler registeredHandler : this.kernelEventHandlers)\n     {\n-        if ( this.kernelEventHandlers.contains( handler ) )\n-        {\n-            return handler;\n-        }\n-\n-        // Some algo for putting it in the right place\n-        for ( KernelEventHandler registeredHandler : this.kernelEventHandlers )\n-        {\n-            KernelEventHandler.ExecutionOrder order = handler.orderComparedTo( registeredHandler );\n-            int index = this.kernelEventHandlers.indexOf( registeredHandler );\n-            if ( order == KernelEventHandler.ExecutionOrder.BEFORE )\n-            {\n-                this.kernelEventHandlers.add( index, handler );\n-                return handler;\n-            }\n-            else if ( order == KernelEventHandler.ExecutionOrder.AFTER )\n-            {\n-                this.kernelEventHandlers.add( index + 1, handler );\n-                return handler;\n-            }\n-        }\n-\n-        this.kernelEventHandlers.add( handler );\n+      KernelEventHandler.ExecutionOrder order = handler.orderComparedTo(registeredHandler);\n+      int index = this.kernelEventHandlers.indexOf(registeredHandler);\n+      if (order == KernelEventHandler.ExecutionOrder.BEFORE)\n+      {\n+        this.kernelEventHandlers.add(index, handler);\n         return handler;\n+      } else if (order == KernelEventHandler.ExecutionOrder.AFTER)\n+      {\n+        this.kernelEventHandlers.add(index + 1, handler);\n+        return handler;\n+      }\n     }\n \n-    public KernelEventHandler unregisterKernelEventHandler( KernelEventHandler handler )\n+    this.kernelEventHandlers.add(handler);\n+    return handler;\n+  }\n+\n+  public KernelEventHandler unregisterKernelEventHandler(KernelEventHandler handler)\n+  {\n+    if (!kernelEventHandlers.remove(handler))\n     {\n-        if ( !kernelEventHandlers.remove( handler ) )\n-        {\n-            throw new IllegalStateException( handler + \" isn't registered\" );\n-        }\n-        return handler;\n+      throw new IllegalStateException(handler + \" isn't registered\");\n     }\n+    return handler;\n+  }\n \n-    public void kernelPanic( ErrorState error, Throwable cause )\n+  public void kernelPanic(ErrorState error, Throwable cause)\n+  {\n+    for (KernelEventHandler handler : kernelEventHandlers)\n     {\n-        for ( KernelEventHandler handler : kernelEventHandlers )\n+      try\n+      {\n+        handler.kernelPanic(error);\n+      } catch (Throwable e)\n+      {\n+        if (cause != null)\n         {\n-            try\n-            {\n-                handler.kernelPanic( error );\n-            }\n-            catch ( Throwable e )\n-            {\n-                if ( cause != null )\n-                {\n-                    e.addSuppressed( cause );\n-                }\n-                log.error( \"FATAL: Error while handling kernel panic.\", e );\n-            }\n+          e.addSuppressed(cause);\n         }\n+        log.error(\"FATAL: Error while handling kernel panic.\", e);\n+      }\n     }\n+  }\n }\n",
            "diff_size": 101
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2945/KernelEventHandlers.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2945/KernelEventHandlers.java\nindex 8f40e4b6ed8..96257bd45ea 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2945/KernelEventHandlers.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2945/KernelEventHandlers.java\n@@ -30,8 +30,7 @@ import org.neo4j.logging.Log;\n /**\n  * Handle the collection of kernel event handlers, and fire events as needed.\n  */\n-public class KernelEventHandlers\n-    implements Lifecycle\n+public class KernelEventHandlers implements Lifecycle\n {\n     private final List<KernelEventHandler> kernelEventHandlers = new CopyOnWriteArrayList<>();\n     private final Log log;\n@@ -99,7 +98,8 @@ public class KernelEventHandlers\n         {\n             throw new IllegalStateException( handler + \" isn't registered\" );\n         }\n-        return handler;\n+\n+return handler;\n     }\n \n     public void kernelPanic( ErrorState error, Throwable cause )\n@@ -120,4 +120,4 @@ public class KernelEventHandlers\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}