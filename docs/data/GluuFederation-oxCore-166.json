{
    "project_name": "GluuFederation-oxCore",
    "error_id": "166",
    "information": {
        "errors": [
            {
                "line": "441",
                "severity": "error",
                "message": "Line is longer than 150 characters (found 155).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        PagedResult<T> vlvResponse = new PagedResult<T>();\n        try {\n            searchResultEntries = this.operationService.searchSearchResultEntryList(baseDN, toLdapFilter(searchFilter), toLdapSearchScope(SearchScope.SUB),\n                    start, count, chunkSize, sortBy, sortOrder, vlvResponse, currentLdapReturnAttributes);\n        } catch (Exception ex) {\n            throw new EntryPersistenceException(String.format(\"Failed to find entries with baseDN: %s, filter: %s\", baseDN, searchFilter), ex);",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "441",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 155).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/166/LdapEntryManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/intellij/166/LdapEntryManager.java\nindex f32c25786ce..1a23571dcc3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/166/LdapEntryManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/intellij/166/LdapEntryManager.java\n@@ -118,7 +118,7 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n \n     @Override\n     protected <T> void updateMergeChanges(T entry, boolean isSchemaUpdate, Class<?> entryClass, Map<String, AttributeData> attributesFromLdapMap,\n-            List<AttributeDataModification> attributeDataModifications) {\n+                                          List<AttributeDataModification> attributeDataModifications) {\n         // Update object classes if entry contains custom object classes\n         if (getSupportedLDAPVersion() > 2) {\n             if (!isSchemaUpdate) {\n@@ -127,7 +127,7 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n \n                 if (!Arrays.equals(objectClassesFromLdap, objectClasses)) {\n                     attributeDataModifications.add(new AttributeDataModification(AttributeModificationType.REPLACE,\n-                            new AttributeData(OBJECT_CLASS, objectClasses), new AttributeData(OBJECT_CLASS, objectClassesFromLdap)));\n+                        new AttributeData(OBJECT_CLASS, objectClasses), new AttributeData(OBJECT_CLASS, objectClassesFromLdap)));\n                 }\n             }\n         }\n@@ -256,13 +256,13 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n \n                             if (removeValues.size() > 0) {\n                                 Modification removeModification = createModification(ModificationType.DELETE, attributeName,\n-                                        removeValues.toArray(new String[removeValues.size()]));\n+                                    removeValues.toArray(new String[removeValues.size()]));\n                                 modifications.add(removeModification);\n                             }\n \n                             if (addValues.size() > 0) {\n                                 Modification addModification = createModification(ModificationType.ADD, attributeName,\n-                                        addValues.toArray(new String[addValues.size()]));\n+                                    addValues.toArray(new String[addValues.size()]));\n                                 modifications.add(addModification);\n                             }\n                         }\n@@ -363,7 +363,7 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n \n     @Override\n     public <T> List<T> findEntries(String baseDN, Class<T> entryClass, Filter filter, SearchScope scope, String[] ldapReturnAttributes,\n-            BatchOperation<T> batchOperation, int start, int count, int chunkSize) {\n+                                   BatchOperation<T> batchOperation, int start, int count, int chunkSize) {\n         if (StringHelper.isEmptyString(baseDN)) {\n             throw new MappingException(\"Base DN to find entries is null\");\n         }\n@@ -387,9 +387,9 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n         SearchResult searchResult = null;\n         try {\n             LdapBatchOperationWraper<T> batchOperationWraper = new LdapBatchOperationWraper<T>(batchOperation, this, entryClass,\n-                    propertiesAnnotations);\n+                propertiesAnnotations);\n             searchResult = this.operationService.search(baseDN, toLdapFilter(searchFilter), toLdapSearchScope(scope), batchOperationWraper,\n-                    start, chunkSize, count, null, currentLdapReturnAttributes);\n+                start, chunkSize, count, null, currentLdapReturnAttributes);\n \n             if (!ResultCode.SUCCESS.equals(searchResult.getResultCode())) {\n                 throw new EntryPersistenceException(String.format(\"Failed to find entries with baseDN: %s, filter: %s\", baseDN, searchFilter));\n@@ -403,7 +403,7 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n         }\n \n         List<T> entries = createEntities(entryClass, propertiesAnnotations,\n-                searchResult.getSearchEntries().toArray(new SearchResultEntry[searchResult.getSearchEntries().size()]));\n+            searchResult.getSearchEntries().toArray(new SearchResultEntry[searchResult.getSearchEntries().size()]));\n \n         // Default sort if needed\n         sortEntriesIfNeeded(entryClass, entries);\n@@ -413,7 +413,7 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n \n     @Override\n     public <T> PagedResult<T> findPagedEntries(String baseDN, Class<T> entryClass, Filter filter, String[] ldapReturnAttributes, String sortBy,\n-            SortOrder sortOrder, int start, int count, int chunkSize) {\n+                                               SortOrder sortOrder, int start, int count, int chunkSize) {\n         if (StringHelper.isEmptyString(baseDN)) {\n             throw new MappingException(\"Base DN to find entries is null\");\n         }\n@@ -438,7 +438,8 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n         List<SearchResultEntry> searchResultEntries;\n         PagedResult<T> vlvResponse = new PagedResult<T>();\n         try {\n-            searchResultEntries = this.operationService.searchSearchResultEntryList(baseDN, toLdapFilter(searchFilter), toLdapSearchScope(SearchScope.SUB),\n+            searchResultEntries =\n+                this.operationService.searchSearchResultEntryList(baseDN, toLdapFilter(searchFilter), toLdapSearchScope(SearchScope.SUB),\n                     start, count, chunkSize, sortBy, sortOrder, vlvResponse, currentLdapReturnAttributes);\n         } catch (Exception ex) {\n             throw new EntryPersistenceException(String.format(\"Failed to find entries with baseDN: %s, filter: %s\", baseDN, searchFilter), ex);\n@@ -446,7 +447,7 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n \n         List<T> entries = new ArrayList<T>(0);\n         if (searchResultEntries.size() > 0) {\n-            entries = createEntitiesVirtualListView(entryClass, propertiesAnnotations, searchResultEntries.toArray(new SearchResultEntry[]{}));\n+            entries = createEntitiesVirtualListView(entryClass, propertiesAnnotations, searchResultEntries.toArray(new SearchResultEntry[] {}));\n         }\n         vlvResponse.setEntries(entries);\n \n@@ -456,7 +457,7 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n \n     @Deprecated\n     public <T> List<T> findEntriesVirtualListView(String baseDN, Class<T> entryClass, Filter filter, int start, int count, String sortBy,\n-            SortOrder sortOrder, PagedResult vlvResponse, String[] ldapReturnAttributes) {\n+                                                  SortOrder sortOrder, PagedResult vlvResponse, String[] ldapReturnAttributes) {\n \n         if (StringHelper.isEmptyString(baseDN)) {\n             throw new MappingException(\"Base DN to find entries is null\");\n@@ -483,7 +484,7 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n         try {\n \n             searchResult = this.operationService.searchVirtualListView(baseDN, toLdapFilter(searchFilter), toLdapSearchScope(SearchScope.SUB),\n-                    start, count, sortBy, sortOrder, vlvResponse, currentLdapReturnAttributes);\n+                start, count, sortBy, sortOrder, vlvResponse, currentLdapReturnAttributes);\n \n             if (!ResultCode.SUCCESS.equals(searchResult.getResultCode())) {\n                 throw new EntryPersistenceException(String.format(\"Failed to find entries with baseDN: %s, filter: %s\", baseDN, searchFilter));\n@@ -498,7 +499,7 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n         }\n \n         List<T> entries = createEntitiesVirtualListView(entryClass, propertiesAnnotations,\n-                searchResult.getSearchEntries().toArray(new SearchResultEntry[searchResult.getSearchEntries().size()]));\n+            searchResult.getSearchEntries().toArray(new SearchResultEntry[searchResult.getSearchEntries().size()]));\n \n         return entries;\n     }\n@@ -533,7 +534,7 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n     }\n \n     protected <T> List<T> createEntities(Class<T> entryClass, List<PropertyAnnotation> propertiesAnnotations,\n-            SearchResultEntry... searchResultEntries) {\n+                                         SearchResultEntry... searchResultEntries) {\n         List<T> result = new ArrayList<T>(searchResultEntries.length);\n         Map<String, List<AttributeData>> entriesAttributes = new HashMap<String, List<AttributeData>>(100);\n \n@@ -564,7 +565,7 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n \n     @Deprecated\n     private <T> List<T> createEntitiesVirtualListView(Class<T> entryClass, List<PropertyAnnotation> propertiesAnnotations,\n-            SearchResultEntry... searchResultEntries) {\n+                                                      SearchResultEntry... searchResultEntries) {\n \n         List<T> result = new LinkedList<T>();\n         Map<String, List<AttributeData>> entriesAttributes = new LinkedHashMap<String, List<AttributeData>>(100);\n@@ -613,7 +614,7 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n             if (LOG.isTraceEnabled()) {\n                 if (attribute.needsBase64Encoding()) {\n                     LOG.trace(\"Found binary attribute: \" + attributeName + \". Is defined in LDAP config: \"\n-                            + operationService.isBinaryAttribute(attributeName));\n+                        + operationService.isBinaryAttribute(attributeName));\n                 }\n             }\n \n@@ -629,8 +630,8 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n                         for (int i = 0; i < attributeValues.length; i++) {\n                             attributeValueStrings[i] = Base64.encodeBase64String(attributeValues[i]);\n                             LOG.trace(\"Binary attribute: \" + attribute.getName() + \" value (hex): \"\n-                                    + org.apache.commons.codec.binary.Hex.encodeHexString(attributeValues[i]) + \" value (base64): \"\n-                                    + attributeValueStrings[i]);\n+                                + org.apache.commons.codec.binary.Hex.encodeHexString(attributeValues[i]) + \" value (base64): \"\n+                                + attributeValueStrings[i]);\n                         }\n                     }\n                 }\n@@ -698,10 +699,10 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n         try {\n             LdapBatchOperationWraper<T> batchOperationWraper = new LdapBatchOperationWraper<T>(batchOperation);\n             operationService.search(baseDN, toLdapFilter(searchFilter), toLdapSearchScope(SearchScope.SUB), batchOperationWraper, 0, 100, 0, null,\n-                    ldapReturnAttributes);\n+                ldapReturnAttributes);\n         } catch (Exception ex) {\n             throw new EntryPersistenceException(\n-                    String.format(\"Failed to calucalte count of entries with baseDN: %s, filter: %s\", baseDN, searchFilter), ex);\n+                String.format(\"Failed to calucalte count of entries with baseDN: %s, filter: %s\", baseDN, searchFilter), ex);\n         }\n \n         return batchOperation.getCountEntries();\n",
            "diff_size": 22
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "441",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 155).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/166/LdapEntryManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/naturalize/166/LdapEntryManager.java\nindex f32c25786ce..585eded11c5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/166/LdapEntryManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/naturalize/166/LdapEntryManager.java\n@@ -481,8 +481,7 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n \n         SearchResult searchResult = null;\n         try {\n-\n-            searchResult = this.operationService.searchVirtualListView(baseDN, toLdapFilter(searchFilter), toLdapSearchScope(SearchScope.SUB),\n+    searchResult = this.operationService.searchVirtualListView(baseDN, toLdapFilter(searchFilter), toLdapSearchScope(SearchScope.SUB),\n                     start, count, sortBy, sortOrder, vlvResponse, currentLdapReturnAttributes);\n \n             if (!ResultCode.SUCCESS.equals(searchResult.getResultCode())) {\n@@ -801,4 +800,4 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "116",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 207).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "123",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 221).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "256",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 168).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "355",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 208).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "382",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 152).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "383",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 200).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "396",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 180).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "404",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 203).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "432",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 242).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "450",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 216).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "477",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 218).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "490",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 195).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "526",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 153).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "554",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "595",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "609",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 224).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "678",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 169).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/166/LdapEntryManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/codebuff/166/LdapEntryManager.java\nindex f32c25786ce..db927e50457 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/166/LdapEntryManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/codebuff/166/LdapEntryManager.java\n@@ -18,7 +18,6 @@ import java.util.LinkedHashMap;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n-\n import org.apache.commons.codec.binary.Base64;\n import org.gluu.persist.event.DeleteNotifier;\n import org.gluu.persist.exception.AuthenticationException;\n@@ -43,7 +42,6 @@ import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.xdi.util.ArrayHelper;\n import org.xdi.util.StringHelper;\n-\n import com.unboundid.ldap.sdk.Attribute;\n import com.unboundid.ldap.sdk.LDAPConnection;\n import com.unboundid.ldap.sdk.Modification;\n@@ -58,20 +56,18 @@ import com.unboundid.util.StaticUtils;\n  *\n  * @author Yuriy Movchan Date: 10.07.2010\n  */\n+\n+\n public class LdapEntryManager extends BaseEntryManager implements Serializable {\n \n     private static final long serialVersionUID = -2544614410981223105L;\n-\n     private static final Logger LOG = LoggerFactory.getLogger(LdapEntryManager.class);\n-\n     private static final LdapFilterConverter LDAP_FILTER_CONVERTER = new LdapFilterConverter();\n     private static final LdapSearchScopeConverter LDAP_SEARCH_SCOPE_CONVERTER = new LdapSearchScopeConverter();\n-\n     private LdapOperationsServiceImpl operationService;\n     private List<DeleteNotifier> subscribers;\n \n-    public LdapEntryManager() {\n-    }\n+    public LdapEntryManager() { }\n \n     public LdapEntryManager(LdapOperationsServiceImpl operationService) {\n         this.operationService = operationService;\n@@ -117,17 +113,14 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n     }\n \n     @Override\n-    protected <T> void updateMergeChanges(T entry, boolean isSchemaUpdate, Class<?> entryClass, Map<String, AttributeData> attributesFromLdapMap,\n-            List<AttributeDataModification> attributeDataModifications) {\n+    protected <T> void updateMergeChanges(T entry, boolean isSchemaUpdate, Class<?> entryClass, Map<String, AttributeData> attributesFromLdapMap, List<AttributeDataModification> attributeDataModifications) {\n         // Update object classes if entry contains custom object classes\n         if (getSupportedLDAPVersion() > 2) {\n             if (!isSchemaUpdate) {\n                 String[] objectClasses = getObjectClasses(entry, entryClass);\n                 String[] objectClassesFromLdap = attributesFromLdapMap.get(OBJECT_CLASS.toLowerCase()).getValues();\n-\n                 if (!Arrays.equals(objectClassesFromLdap, objectClasses)) {\n-                    attributeDataModifications.add(new AttributeDataModification(AttributeModificationType.REPLACE,\n-                            new AttributeData(OBJECT_CLASS, objectClasses), new AttributeData(OBJECT_CLASS, objectClassesFromLdap)));\n+                    attributeDataModifications.add(new AttributeDataModification(AttributeModificationType.REPLACE, new AttributeData(OBJECT_CLASS, objectClasses), new AttributeData(OBJECT_CLASS, objectClassesFromLdap)));\n                 }\n             }\n         }\n@@ -143,13 +136,12 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n             } else {\n                 throw new UnsupportedOperationException(\"Server doesn't support dynamic schema modifications\");\n             }\n+\n             return;\n         }\n \n         Object dnValue = getDNValue(entry, entryClass);\n-\n         LOG.debug(String.format(\"LDAP entry to remove: %s\", dnValue.toString()));\n-\n         remove(dnValue.toString());\n     }\n \n@@ -159,11 +151,9 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n         for (AttributeData attribute : attributes) {\n             String attributeName = attribute.getName();\n             String[] attributeValues = attribute.getValues();\n-\n             if (ArrayHelper.isNotEmpty(attributeValues) && StringHelper.isNotEmpty(attributeValues[0])) {\n                 if (operationService.isCertificateAttribute(attributeName)) {\n                     byte[][] binaryValues = toBinaryValues(attributeValues);\n-\n                     ldapAttributes.add(new Attribute(attributeName + \";binary\", binaryValues));\n                 } else {\n                     ldapAttributes.add(new Attribute(attributeName, attributeValues));\n@@ -172,6 +162,7 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n         }\n \n         // Persist entry\n+\n         try {\n             boolean result = this.operationService.addEntry(dn, ldapAttributes);\n             if (!result) {\n@@ -192,7 +183,6 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n             for (AttributeDataModification attributeDataModification : attributeDataModifications) {\n                 AttributeData attribute = attributeDataModification.getAttribute();\n                 AttributeData oldAttribute = attributeDataModification.getOldAttribute();\n-\n                 String attributeName = null;\n                 String[] attributeValues = null;\n                 if (attribute != null) {\n@@ -219,7 +209,6 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n                         } else {\n                             String[] oldValues = ArrayHelper.arrayClone(oldAttributeValues);\n                             String[] newValues = ArrayHelper.arrayClone(attributeValues);\n-\n                             Arrays.sort(oldValues);\n                             Arrays.sort(newValues);\n \n@@ -232,10 +221,11 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n                             // Add new values\n                             for (String value : newValues) {\n                                 int idx = Arrays.binarySearch(oldValues, value, new Comparator<String>() {\n-                                    @Override\n-                                    public int compare(String o1, String o2) {\n-                                        return o1.toLowerCase().compareTo(o2.toLowerCase());\n-                                    }\n+\n+                                              @Override\n+                                              public int compare(String o1, String o2) {\n+                                                  return o1.toLowerCase().compareTo(o2.toLowerCase());\n+                                              }\n                                 });\n                                 if (idx >= 0) {\n                                     // Old values array contains new value. Retain\n@@ -248,6 +238,7 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n                             }\n \n                             // Remove values which we don't have in new values\n+\n                             for (int i = 0; i < oldValues.length; i++) {\n                                 if (!retainOldValues[i]) {\n                                     removeValues.add(oldValues[i]);\n@@ -255,14 +246,14 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n                             }\n \n                             if (removeValues.size() > 0) {\n-                                Modification removeModification = createModification(ModificationType.DELETE, attributeName,\n+                                Modification removeModification = createModification(ModificationType.DELETE,\n+                                    attributeName,\n                                         removeValues.toArray(new String[removeValues.size()]));\n                                 modifications.add(removeModification);\n                             }\n \n                             if (addValues.size() > 0) {\n-                                Modification addModification = createModification(ModificationType.ADD, attributeName,\n-                                        addValues.toArray(new String[addValues.size()]));\n+                                Modification addModification = createModification(ModificationType.ADD, attributeName, addValues.toArray(new String[addValues.size()]));\n                                 modifications.add(addModification);\n                             }\n                         }\n@@ -339,7 +330,6 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n         }\n \n         Collections.sort(removeEntriesDn, LINE_LENGHT_COMPARATOR);\n-\n         for (String removeEntryDn : removeEntriesDn) {\n             remove(removeEntryDn);\n         }\n@@ -362,14 +352,15 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n     }\n \n     @Override\n-    public <T> List<T> findEntries(String baseDN, Class<T> entryClass, Filter filter, SearchScope scope, String[] ldapReturnAttributes,\n-            BatchOperation<T> batchOperation, int start, int count, int chunkSize) {\n+    public <T> List<T> findEntries(String baseDN, Class<T> entryClass, Filter filter, SearchScope scope, String[] ldapReturnAttributes, BatchOperation<T> batchOperation, int start, int count, int chunkSize) {\n         if (StringHelper.isEmptyString(baseDN)) {\n             throw new MappingException(\"Base DN to find entries is null\");\n         }\n \n         // Check entry class\n+\n         checkEntryClass(entryClass, false);\n+\n         String[] objectClasses = getTypeObjectClasses(entryClass);\n         List<PropertyAnnotation> propertiesAnnotations = getEntryPropertyAnnotations(entryClass);\n         String[] currentLdapReturnAttributes = ldapReturnAttributes;\n@@ -378,48 +369,47 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n         }\n \n         // Find entries\n+\n         Filter searchFilter;\n         if (objectClasses.length > 0) {\n             searchFilter = addObjectClassFilter(filter, objectClasses);\n         } else {\n             searchFilter = filter;\n         }\n+\n         SearchResult searchResult = null;\n         try {\n-            LdapBatchOperationWraper<T> batchOperationWraper = new LdapBatchOperationWraper<T>(batchOperation, this, entryClass,\n-                    propertiesAnnotations);\n-            searchResult = this.operationService.search(baseDN, toLdapFilter(searchFilter), toLdapSearchScope(scope), batchOperationWraper,\n-                    start, chunkSize, count, null, currentLdapReturnAttributes);\n-\n+            LdapBatchOperationWraper<T> batchOperationWraper = new LdapBatchOperationWraper<T>(batchOperation, this, entryClass, propertiesAnnotations);\n+            searchResult = this.operationService.search(baseDN, toLdapFilter(searchFilter), toLdapSearchScope(scope), batchOperationWraper, start, chunkSize, count, null, currentLdapReturnAttributes);\n             if (!ResultCode.SUCCESS.equals(searchResult.getResultCode())) {\n                 throw new EntryPersistenceException(String.format(\"Failed to find entries with baseDN: %s, filter: %s\", baseDN, searchFilter));\n             }\n         } catch (Exception ex) {\n-            throw new EntryPersistenceException(String.format(\"Failed to find entries with baseDN: %s, filter: %s\", baseDN, searchFilter), ex);\n+            throw new EntryPersistenceException(String.format(\"Failed to find entries with baseDN: %s, filter: %s\", baseDN, searchFilter),\n+                ex);\n         }\n \n         if (searchResult.getEntryCount() == 0) {\n             return new ArrayList<T>(0);\n         }\n \n-        List<T> entries = createEntities(entryClass, propertiesAnnotations,\n-                searchResult.getSearchEntries().toArray(new SearchResultEntry[searchResult.getSearchEntries().size()]));\n+        List<T> entries = createEntities(entryClass, propertiesAnnotations, searchResult.getSearchEntries().toArray(new SearchResultEntry[searchResult.getSearchEntries().size()]));\n \n         // Default sort if needed\n         sortEntriesIfNeeded(entryClass, entries);\n-\n         return entries;\n     }\n \n     @Override\n-    public <T> PagedResult<T> findPagedEntries(String baseDN, Class<T> entryClass, Filter filter, String[] ldapReturnAttributes, String sortBy,\n-            SortOrder sortOrder, int start, int count, int chunkSize) {\n+    public <T> PagedResult<T> findPagedEntries(String baseDN, Class<T> entryClass, Filter filter, String[] ldapReturnAttributes, String sortBy, SortOrder sortOrder, int start, int count, int chunkSize) {\n         if (StringHelper.isEmptyString(baseDN)) {\n             throw new MappingException(\"Base DN to find entries is null\");\n         }\n \n         // Check entry class\n+\n         checkEntryClass(entryClass, false);\n+\n         String[] objectClasses = getTypeObjectClasses(entryClass);\n         List<PropertyAnnotation> propertiesAnnotations = getEntryPropertyAnnotations(entryClass);\n         String[] currentLdapReturnAttributes = ldapReturnAttributes;\n@@ -428,6 +418,7 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n         }\n \n         // Find entries\n+\n         Filter searchFilter;\n         if (objectClasses.length > 0) {\n             searchFilter = addObjectClassFilter(filter, objectClasses);\n@@ -438,32 +429,33 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n         List<SearchResultEntry> searchResultEntries;\n         PagedResult<T> vlvResponse = new PagedResult<T>();\n         try {\n-            searchResultEntries = this.operationService.searchSearchResultEntryList(baseDN, toLdapFilter(searchFilter), toLdapSearchScope(SearchScope.SUB),\n-                    start, count, chunkSize, sortBy, sortOrder, vlvResponse, currentLdapReturnAttributes);\n+            searchResultEntries = this.operationService.searchSearchResultEntryList(baseDN, toLdapFilter(searchFilter), toLdapSearchScope(SearchScope.SUB), start, count, chunkSize, sortBy, sortOrder, vlvResponse, currentLdapReturnAttributes);\n         } catch (Exception ex) {\n-            throw new EntryPersistenceException(String.format(\"Failed to find entries with baseDN: %s, filter: %s\", baseDN, searchFilter), ex);\n+            throw new EntryPersistenceException(String.format(\"Failed to find entries with baseDN: %s, filter: %s\", baseDN, searchFilter),\n+                ex);\n         }\n \n         List<T> entries = new ArrayList<T>(0);\n         if (searchResultEntries.size() > 0) {\n-            entries = createEntitiesVirtualListView(entryClass, propertiesAnnotations, searchResultEntries.toArray(new SearchResultEntry[]{}));\n+            entries = createEntitiesVirtualListView(entryClass,\n+                propertiesAnnotations,\n+                    searchResultEntries.toArray(new SearchResultEntry[] {}));\n         }\n-        vlvResponse.setEntries(entries);\n \n+        vlvResponse.setEntries(entries);\n         return vlvResponse;\n-\n     }\n \n     @Deprecated\n-    public <T> List<T> findEntriesVirtualListView(String baseDN, Class<T> entryClass, Filter filter, int start, int count, String sortBy,\n-            SortOrder sortOrder, PagedResult vlvResponse, String[] ldapReturnAttributes) {\n-\n+    public <T> List<T> findEntriesVirtualListView(String baseDN, Class<T> entryClass, Filter filter, int start, int count, String sortBy, SortOrder sortOrder, PagedResult vlvResponse, String[] ldapReturnAttributes) {\n         if (StringHelper.isEmptyString(baseDN)) {\n             throw new MappingException(\"Base DN to find entries is null\");\n         }\n \n         // Check entry class\n+\n         checkEntryClass(entryClass, false);\n+\n         String[] objectClasses = getTypeObjectClasses(entryClass);\n         List<PropertyAnnotation> propertiesAnnotations = getEntryPropertyAnnotations(entryClass);\n         String[] currentLdapReturnAttributes = ldapReturnAttributes;\n@@ -472,6 +464,7 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n         }\n \n         // Find entries\n+\n         Filter searchFilter;\n         if (objectClasses.length > 0) {\n             searchFilter = addObjectClassFilter(filter, objectClasses);\n@@ -481,24 +474,20 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n \n         SearchResult searchResult = null;\n         try {\n-\n-            searchResult = this.operationService.searchVirtualListView(baseDN, toLdapFilter(searchFilter), toLdapSearchScope(SearchScope.SUB),\n-                    start, count, sortBy, sortOrder, vlvResponse, currentLdapReturnAttributes);\n-\n+            searchResult = this.operationService.searchVirtualListView(baseDN, toLdapFilter(searchFilter), toLdapSearchScope(SearchScope.SUB), start, count, sortBy, sortOrder, vlvResponse, currentLdapReturnAttributes);\n             if (!ResultCode.SUCCESS.equals(searchResult.getResultCode())) {\n                 throw new EntryPersistenceException(String.format(\"Failed to find entries with baseDN: %s, filter: %s\", baseDN, searchFilter));\n             }\n-\n         } catch (Exception ex) {\n-            throw new EntryPersistenceException(String.format(\"Failed to find entries with baseDN: %s, filter: %s\", baseDN, searchFilter), ex);\n+            throw new EntryPersistenceException(String.format(\"Failed to find entries with baseDN: %s, filter: %s\", baseDN, searchFilter),\n+                ex);\n         }\n \n         if (searchResult.getEntryCount() == 0) {\n             return new ArrayList<T>(0);\n         }\n \n-        List<T> entries = createEntitiesVirtualListView(entryClass, propertiesAnnotations,\n-                searchResult.getSearchEntries().toArray(new SearchResultEntry[searchResult.getSearchEntries().size()]));\n+        List<T> entries = createEntitiesVirtualListView(entryClass, propertiesAnnotations, searchResult.getSearchEntries().toArray(new SearchResultEntry[searchResult.getSearchEntries().size()]));\n \n         return entries;\n     }\n@@ -510,6 +499,7 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n         }\n \n         // Create filter\n+\n         Filter searchFilter;\n         if (objectClasses.length > 0) {\n             searchFilter = addObjectClassFilter(filter, objectClasses);\n@@ -525,21 +515,21 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n             }\n         } catch (SearchException ex) {\n             if (!(ResultCode.NO_SUCH_OBJECT_INT_VALUE == ex.getResultCode())) {\n-                throw new EntryPersistenceException(String.format(\"Failed to find entry with baseDN: %s, filter: %s\", baseDN, searchFilter), ex);\n+                throw new EntryPersistenceException(String.format(\"Failed to find entry with baseDN: %s, filter: %s\", baseDN, searchFilter),\n+                    ex);\n             }\n         }\n \n         return (searchResult != null) && (searchResult.getEntryCount() > 0);\n     }\n \n-    protected <T> List<T> createEntities(Class<T> entryClass, List<PropertyAnnotation> propertiesAnnotations,\n-            SearchResultEntry... searchResultEntries) {\n+    protected <T> List<T> createEntities(Class<T> entryClass, List<PropertyAnnotation> propertiesAnnotations, SearchResultEntry... searchResultEntries) {\n         List<T> result = new ArrayList<T>(searchResultEntries.length);\n         Map<String, List<AttributeData>> entriesAttributes = new HashMap<String, List<AttributeData>>(100);\n-\n         int count = 0;\n         for (int i = 0; i < searchResultEntries.length; i++) {\n             count++;\n+\n             SearchResultEntry entry = searchResultEntries[i];\n             entriesAttributes.put(entry.getDN(), getAttributeDataList(entry));\n \n@@ -550,7 +540,6 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n             if (count >= 100) {\n                 List<T> currentResult = createEntities(entryClass, propertiesAnnotations, entriesAttributes);\n                 result.addAll(currentResult);\n-\n                 entriesAttributes = new HashMap<String, List<AttributeData>>(100);\n                 count = 0;\n             }\n@@ -558,24 +547,18 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n \n         List<T> currentResult = createEntities(entryClass, propertiesAnnotations, entriesAttributes);\n         result.addAll(currentResult);\n-\n         return result;\n     }\n \n     @Deprecated\n-    private <T> List<T> createEntitiesVirtualListView(Class<T> entryClass, List<PropertyAnnotation> propertiesAnnotations,\n-            SearchResultEntry... searchResultEntries) {\n-\n+    private <T> List<T> createEntitiesVirtualListView(Class<T> entryClass, List<PropertyAnnotation> propertiesAnnotations, SearchResultEntry... searchResultEntries) {\n         List<T> result = new LinkedList<T>();\n         Map<String, List<AttributeData>> entriesAttributes = new LinkedHashMap<String, List<AttributeData>>(100);\n-\n         int count = 0;\n         for (int i = 0; i < searchResultEntries.length; i++) {\n-\n             count++;\n \n             SearchResultEntry entry = searchResultEntries[i];\n-\n             LinkedList<AttributeData> attributeDataLinkedList = new LinkedList<AttributeData>();\n             attributeDataLinkedList.addAll(getAttributeDataList(entry));\n             entriesAttributes.put(entry.getDN(), attributeDataLinkedList);\n@@ -585,11 +568,9 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n \n             // Allow java to clean up temporary objects\n             if (count >= 100) {\n-\n                 List<T> currentResult = new LinkedList<T>();\n                 currentResult.addAll(createEntities(entryClass, propertiesAnnotations, entriesAttributes, false));\n                 result.addAll(currentResult);\n-\n                 entriesAttributes = new LinkedHashMap<String, List<AttributeData>>(100);\n                 count = 0;\n             }\n@@ -597,7 +578,6 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n \n         List<T> currentResult = createEntities(entryClass, propertiesAnnotations, entriesAttributes, false);\n         result.addAll(currentResult);\n-\n         return result;\n     }\n \n@@ -612,8 +592,7 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n             String attributeName = attribute.getName();\n             if (LOG.isTraceEnabled()) {\n                 if (attribute.needsBase64Encoding()) {\n-                    LOG.trace(\"Found binary attribute: \" + attributeName + \". Is defined in LDAP config: \"\n-                            + operationService.isBinaryAttribute(attributeName));\n+                    LOG.trace(\"Found binary attribute: \" + attributeName + \". Is defined in LDAP config: \" + operationService.isBinaryAttribute(attributeName));\n                 }\n             }\n \n@@ -621,19 +600,17 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n             if (attribute.needsBase64Encoding()) {\n                 boolean binaryAttribute = operationService.isBinaryAttribute(attributeName);\n                 boolean certificateAttribute = operationService.isCertificateAttribute(attributeName);\n-\n                 if (binaryAttribute || certificateAttribute) {\n                     byte[][] attributeValues = attribute.getValueByteArrays();\n                     if (attributeValues != null) {\n                         attributeValueStrings = new String[attributeValues.length];\n                         for (int i = 0; i < attributeValues.length; i++) {\n                             attributeValueStrings[i] = Base64.encodeBase64String(attributeValues[i]);\n-                            LOG.trace(\"Binary attribute: \" + attribute.getName() + \" value (hex): \"\n-                                    + org.apache.commons.codec.binary.Hex.encodeHexString(attributeValues[i]) + \" value (base64): \"\n-                                    + attributeValueStrings[i]);\n+                            LOG.trace(\"Binary attribute: \" + attribute.getName() + \" value (hex): \" + org.apache.commons.codec.binary.Hex.encodeHexString(attributeValues[i]) + \" value (base64): \" + attributeValueStrings[i]);\n                         }\n                     }\n                 }\n+\n                 if (certificateAttribute) {\n                     attributeName = operationService.getCertificateAttributeName(attributeName);\n                 }\n@@ -681,7 +658,9 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n         }\n \n         // Check entry class\n+\n         checkEntryClass(entryClass, false);\n+\n         String[] objectClasses = getTypeObjectClasses(entryClass);\n         String[] ldapReturnAttributes = new String[] {\"\"}; // Don't load attributes\n \n@@ -694,14 +673,13 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n         }\n \n         CountBatchOperation<T> batchOperation = new CountBatchOperation<T>();\n-\n         try {\n             LdapBatchOperationWraper<T> batchOperationWraper = new LdapBatchOperationWraper<T>(batchOperation);\n-            operationService.search(baseDN, toLdapFilter(searchFilter), toLdapSearchScope(SearchScope.SUB), batchOperationWraper, 0, 100, 0, null,\n-                    ldapReturnAttributes);\n+            operationService.search(baseDN, toLdapFilter(searchFilter), toLdapSearchScope(SearchScope.SUB), batchOperationWraper, 0, 100, 0, null, ldapReturnAttributes);\n         } catch (Exception ex) {\n-            throw new EntryPersistenceException(\n-                    String.format(\"Failed to calucalte count of entries with baseDN: %s, filter: %s\", baseDN, searchFilter), ex);\n+            throw new EntryPersistenceException(String.format(\"Failed to calucalte count of entries with baseDN: %s, filter: %s\",\n+                baseDN,\n+                    searchFilter), ex);\n         }\n \n         return batchOperation.getCountEntries();\n@@ -734,7 +712,9 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n         LDAPConnection connection = null;\n         try {\n             connection = operationService.getConnection();\n+\n             ResultCode result = LdifDataUtility.instance().importLdifFileContent(connection, ldifFileContent);\n+\n             return ResultCode.SUCCESS.equals(result);\n         } catch (Exception ex) {\n             LOG.error(\"Failed to load ldif file\", ex);\n@@ -799,6 +779,7 @@ public class LdapEntryManager extends BaseEntryManager implements Serializable {\n         public int getCountEntries() {\n             return countEntries;\n         }\n+\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 116
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "441",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 155).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "441",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 155).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}