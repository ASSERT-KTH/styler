{
    "project_name": "Activiti-Activiti",
    "error_id": "241",
    "information": {
        "errors": [
            {
                "line": "13",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.engine.delegate.event.impl;\n\nimport java.util.HashMap;\nimport java.util.List;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/241/ActivitiEventSupport.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/241/ActivitiEventSupport.java\nindex 299e700114c..067b8ce6fb9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/241/ActivitiEventSupport.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/241/ActivitiEventSupport.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.delegate.event.impl;\n \n import java.util.HashMap;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/241/ActivitiEventSupport.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/241/ActivitiEventSupport.java\nindex 299e700114c..aaf6856b91b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/241/ActivitiEventSupport.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/241/ActivitiEventSupport.java\n@@ -1,15 +1,16 @@\n /* Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.delegate.event.impl;\n \n import java.util.HashMap;\n@@ -27,102 +28,100 @@ import org.slf4j.LoggerFactory;\n \n /**\n  * Class that allows adding and removing event listeners and dispatching events to the appropriate listeners.\n- * \n-\n  */\n public class ActivitiEventSupport {\n \n-  private static final Logger LOG = LoggerFactory.getLogger(ActivitiEventSupport.class);\n-\n-  protected List<ActivitiEventListener> eventListeners;\n-  protected Map<ActivitiEventType, List<ActivitiEventListener>> typedListeners;\n+    private static final Logger LOG = LoggerFactory.getLogger(ActivitiEventSupport.class);\n \n-  public ActivitiEventSupport() {\n-    eventListeners = new CopyOnWriteArrayList<ActivitiEventListener>();\n-    typedListeners = new HashMap<ActivitiEventType, List<ActivitiEventListener>>();\n-  }\n+    protected List<ActivitiEventListener> eventListeners;\n+    protected Map<ActivitiEventType, List<ActivitiEventListener>> typedListeners;\n \n-  public synchronized void addEventListener(ActivitiEventListener listenerToAdd) {\n-    if (listenerToAdd == null) {\n-      throw new ActivitiIllegalArgumentException(\"Listener cannot be null.\");\n+    public ActivitiEventSupport() {\n+        eventListeners = new CopyOnWriteArrayList<ActivitiEventListener>();\n+        typedListeners = new HashMap<ActivitiEventType, List<ActivitiEventListener>>();\n     }\n-    if (!eventListeners.contains(listenerToAdd)) {\n-      eventListeners.add(listenerToAdd);\n-    }\n-  }\n \n-  public synchronized void addEventListener(ActivitiEventListener listenerToAdd, ActivitiEventType... types) {\n-    if (listenerToAdd == null) {\n-      throw new ActivitiIllegalArgumentException(\"Listener cannot be null.\");\n+    public synchronized void addEventListener(ActivitiEventListener listenerToAdd) {\n+        if (listenerToAdd == null) {\n+            throw new ActivitiIllegalArgumentException(\"Listener cannot be null.\");\n+        }\n+        if (!eventListeners.contains(listenerToAdd)) {\n+            eventListeners.add(listenerToAdd);\n+        }\n     }\n \n-    if (types == null || types.length == 0) {\n-      addEventListener(listenerToAdd);\n+    public synchronized void addEventListener(ActivitiEventListener listenerToAdd, ActivitiEventType... types) {\n+        if (listenerToAdd == null) {\n+            throw new ActivitiIllegalArgumentException(\"Listener cannot be null.\");\n+        }\n \n-    } else {\n-      for (ActivitiEventType type : types) {\n-        addTypedEventListener(listenerToAdd, type);\n-      }\n-    }\n-  }\n+        if (types == null || types.length == 0) {\n+            addEventListener(listenerToAdd);\n \n-  public void removeEventListener(ActivitiEventListener listenerToRemove) {\n-    eventListeners.remove(listenerToRemove);\n-\n-    for (List<ActivitiEventListener> listeners : typedListeners.values()) {\n-      listeners.remove(listenerToRemove);\n+        } else {\n+            for (ActivitiEventType type : types) {\n+                addTypedEventListener(listenerToAdd, type);\n+            }\n+        }\n     }\n-  }\n \n-  public void dispatchEvent(ActivitiEvent event) {\n-    if (event == null) {\n-      throw new ActivitiIllegalArgumentException(\"Event cannot be null.\");\n-    }\n+    public void removeEventListener(ActivitiEventListener listenerToRemove) {\n+        eventListeners.remove(listenerToRemove);\n \n-    if (event.getType() == null) {\n-      throw new ActivitiIllegalArgumentException(\"Event type cannot be null.\");\n+        for (List<ActivitiEventListener> listeners : typedListeners.values()) {\n+            listeners.remove(listenerToRemove);\n+        }\n     }\n \n-    // Call global listeners\n-    if (!eventListeners.isEmpty()) {\n-      for (ActivitiEventListener listener : eventListeners) {\n-        dispatchEvent(event, listener);\n-      }\n+    public void dispatchEvent(ActivitiEvent event) {\n+        if (event == null) {\n+            throw new ActivitiIllegalArgumentException(\"Event cannot be null.\");\n+        }\n+\n+        if (event.getType() == null) {\n+            throw new ActivitiIllegalArgumentException(\"Event type cannot be null.\");\n+        }\n+\n+        // Call global listeners\n+        if (!eventListeners.isEmpty()) {\n+            for (ActivitiEventListener listener : eventListeners) {\n+                dispatchEvent(event, listener);\n+            }\n+        }\n+\n+        // Call typed listeners, if any\n+        List<ActivitiEventListener> typed = typedListeners.get(event.getType());\n+        if (typed != null && !typed.isEmpty()) {\n+            for (ActivitiEventListener listener : typed) {\n+                dispatchEvent(event, listener);\n+            }\n+        }\n     }\n \n-    // Call typed listeners, if any\n-    List<ActivitiEventListener> typed = typedListeners.get(event.getType());\n-    if (typed != null && !typed.isEmpty()) {\n-      for (ActivitiEventListener listener : typed) {\n-        dispatchEvent(event, listener);\n-      }\n-    }\n-  }\n-\n-  protected void dispatchEvent(ActivitiEvent event, ActivitiEventListener listener) {\n-    try {\n-      listener.onEvent(event);\n-    } catch (Throwable t) {\n-      if (listener.isFailOnException()) {\n-        throw new ActivitiException(\"Exception while executing event-listener\", t);\n-      } else {\n-        // Ignore the exception and continue notifying remaining listeners. The listener\n-        // explicitly states that the exception should not bubble up\n-        LOG.warn(\"Exception while executing event-listener, which was ignored\", t);\n-      }\n-    }\n-  }\n-\n-  protected synchronized void addTypedEventListener(ActivitiEventListener listener, ActivitiEventType type) {\n-    List<ActivitiEventListener> listeners = typedListeners.get(type);\n-    if (listeners == null) {\n-      // Add an empty list of listeners for this type\n-      listeners = new CopyOnWriteArrayList<ActivitiEventListener>();\n-      typedListeners.put(type, listeners);\n+    protected void dispatchEvent(ActivitiEvent event, ActivitiEventListener listener) {\n+        try {\n+            listener.onEvent(event);\n+        } catch (Throwable t) {\n+            if (listener.isFailOnException()) {\n+                throw new ActivitiException(\"Exception while executing event-listener\", t);\n+            } else {\n+                // Ignore the exception and continue notifying remaining listeners. The listener\n+                // explicitly states that the exception should not bubble up\n+                LOG.warn(\"Exception while executing event-listener, which was ignored\", t);\n+            }\n+        }\n     }\n \n-    if (!listeners.contains(listener)) {\n-      listeners.add(listener);\n+    protected synchronized void addTypedEventListener(ActivitiEventListener listener, ActivitiEventType type) {\n+        List<ActivitiEventListener> listeners = typedListeners.get(type);\n+        if (listeners == null) {\n+            // Add an empty list of listeners for this type\n+            listeners = new CopyOnWriteArrayList<ActivitiEventListener>();\n+            typedListeners.put(type, listeners);\n+        }\n+\n+        if (!listeners.contains(listener)) {\n+            listeners.add(listener);\n+        }\n     }\n-  }\n }\n",
            "diff_size": 114
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "34",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/241/ActivitiEventSupport.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/241/ActivitiEventSupport.java\nindex 299e700114c..1b1d1d70c0b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/241/ActivitiEventSupport.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/241/ActivitiEventSupport.java\n@@ -16,7 +16,6 @@ import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.concurrent.CopyOnWriteArrayList;\n-\n import org.activiti.engine.ActivitiException;\n import org.activiti.engine.ActivitiIllegalArgumentException;\n import org.activiti.engine.delegate.event.ActivitiEvent;\n@@ -30,10 +29,11 @@ import org.slf4j.LoggerFactory;\n  * \n \n  */\n+\n+\n public class ActivitiEventSupport {\n \n   private static final Logger LOG = LoggerFactory.getLogger(ActivitiEventSupport.class);\n-\n   protected List<ActivitiEventListener> eventListeners;\n   protected Map<ActivitiEventType, List<ActivitiEventListener>> typedListeners;\n \n@@ -55,22 +55,19 @@ public class ActivitiEventSupport {\n     if (listenerToAdd == null) {\n       throw new ActivitiIllegalArgumentException(\"Listener cannot be null.\");\n     }\n-\n     if (types == null || types.length == 0) {\n       addEventListener(listenerToAdd);\n-\n     } else {\n       for (ActivitiEventType type : types) {\n-        addTypedEventListener(listenerToAdd, type);\n+          addTypedEventListener(listenerToAdd, type);\n       }\n     }\n   }\n \n   public void removeEventListener(ActivitiEventListener listenerToRemove) {\n     eventListeners.remove(listenerToRemove);\n-\n     for (List<ActivitiEventListener> listeners : typedListeners.values()) {\n-      listeners.remove(listenerToRemove);\n+        listeners.remove(listenerToRemove);\n     }\n   }\n \n@@ -78,24 +75,24 @@ public class ActivitiEventSupport {\n     if (event == null) {\n       throw new ActivitiIllegalArgumentException(\"Event cannot be null.\");\n     }\n-\n     if (event.getType() == null) {\n       throw new ActivitiIllegalArgumentException(\"Event type cannot be null.\");\n     }\n \n     // Call global listeners\n     if (!eventListeners.isEmpty()) {\n-      for (ActivitiEventListener listener : eventListeners) {\n-        dispatchEvent(event, listener);\n-      }\n+        for (ActivitiEventListener listener : eventListeners) {\n+            dispatchEvent(event, listener);\n+        }\n     }\n \n     // Call typed listeners, if any\n+\n     List<ActivitiEventListener> typed = typedListeners.get(event.getType());\n     if (typed != null && !typed.isEmpty()) {\n-      for (ActivitiEventListener listener : typed) {\n-        dispatchEvent(event, listener);\n-      }\n+        for (ActivitiEventListener listener : typed) {\n+            dispatchEvent(event, listener);\n+        }\n     }\n   }\n \n@@ -104,11 +101,13 @@ public class ActivitiEventSupport {\n       listener.onEvent(event);\n     } catch (Throwable t) {\n       if (listener.isFailOnException()) {\n-        throw new ActivitiException(\"Exception while executing event-listener\", t);\n+        throw new ActivitiException(\"Exception while executing event-listener\",\n+                                    t);\n       } else {\n         // Ignore the exception and continue notifying remaining listeners. The listener\n         // explicitly states that the exception should not bubble up\n-        LOG.warn(\"Exception while executing event-listener, which was ignored\", t);\n+        LOG.warn(\"Exception while executing event-listener, which was ignored\",\n+                 t);\n       }\n     }\n   }\n@@ -120,9 +119,9 @@ public class ActivitiEventSupport {\n       listeners = new CopyOnWriteArrayList<ActivitiEventListener>();\n       typedListeners.put(type, listeners);\n     }\n-\n     if (!listeners.contains(listener)) {\n       listeners.add(listener);\n     }\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/241/ActivitiEventSupport.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/241/ActivitiEventSupport.java\nindex 299e700114c..067b8ce6fb9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/241/ActivitiEventSupport.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/241/ActivitiEventSupport.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.delegate.event.impl;\n \n import java.util.HashMap;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/241/ActivitiEventSupport.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/241/ActivitiEventSupport.java\nindex 299e700114c..067b8ce6fb9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/241/ActivitiEventSupport.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/241/ActivitiEventSupport.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.delegate.event.impl;\n \n import java.util.HashMap;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}