{
    "project_name": "graphfoundation-ongdb",
    "error_id": "802",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/802/DijkstraBranchCollisionDetector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/802/DijkstraBranchCollisionDetector.java\nindex 9b1e68b6113..00ea9238b19 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/802/DijkstraBranchCollisionDetector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/802/DijkstraBranchCollisionDetector.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphalgo.impl.util;\n \n import org.apache.commons.lang3.mutable.MutableDouble;\n@@ -35,26 +36,26 @@ import org.neo4j.kernel.impl.util.NoneStrictMath;\n  */\n public class DijkstraBranchCollisionDetector extends StandardBranchCollisionDetector\n {\n-    private final CostEvaluator costEvaluator;\n-    private final MutableDouble shortestSoFar;\n-    private final double epsilon;\n+  private final CostEvaluator costEvaluator;\n+  private final MutableDouble shortestSoFar;\n+  private final double epsilon;\n \n-    public DijkstraBranchCollisionDetector( Evaluator evaluator, CostEvaluator costEvaluator,\n-            MutableDouble shortestSoFar, double epsilon, Predicate<Path> pathPredicate )\n-    {\n-        super( evaluator, pathPredicate );\n-        this.costEvaluator = costEvaluator;\n-        this.shortestSoFar = shortestSoFar;\n-        this.epsilon = epsilon;\n-    }\n+  public DijkstraBranchCollisionDetector(Evaluator evaluator, CostEvaluator costEvaluator,\n+                                         MutableDouble shortestSoFar, double epsilon, Predicate<Path> pathPredicate)\n+  {\n+    super(evaluator, pathPredicate);\n+    this.costEvaluator = costEvaluator;\n+    this.shortestSoFar = shortestSoFar;\n+    this.epsilon = epsilon;\n+  }\n \n-    @Override\n-    protected boolean includePath( Path path, TraversalBranch startBranch, TraversalBranch endBranch )\n+  @Override\n+  protected boolean includePath(Path path, TraversalBranch startBranch, TraversalBranch endBranch)\n+  {\n+    if (!super.includePath(path, startBranch, endBranch))\n     {\n-        if ( !super.includePath( path, startBranch, endBranch ) )\n-        {\n-            return false;\n-        }\n+      return false;\n+    }\n \n         /*\n         In most cases we could prune startBranch and endBranch here.\n@@ -84,13 +85,13 @@ public class DijkstraBranchCollisionDetector extends StandardBranchCollisionDete\n         a path is missed.\n         */\n \n-        double cost = new WeightedPathImpl( costEvaluator, path ).weight();\n-\n-        if ( cost < shortestSoFar.doubleValue() )\n-        {\n-            shortestSoFar.setValue( cost );\n-        }\n-        return NoneStrictMath.compare( cost, shortestSoFar.doubleValue(), epsilon ) <= 0;\n+    double cost = new WeightedPathImpl(costEvaluator, path).weight();\n \n+    if (cost < shortestSoFar.doubleValue())\n+    {\n+      shortestSoFar.setValue(cost);\n     }\n+    return NoneStrictMath.compare(cost, shortestSoFar.doubleValue(), epsilon) <= 0;\n+\n+  }\n }\n",
            "diff_size": 33
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/802/DijkstraBranchCollisionDetector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/802/DijkstraBranchCollisionDetector.java\nindex 9b1e68b6113..45b2e09764c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/802/DijkstraBranchCollisionDetector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/802/DijkstraBranchCollisionDetector.java\n@@ -85,12 +85,11 @@ public class DijkstraBranchCollisionDetector extends StandardBranchCollisionDete\n         */\n \n         double cost = new WeightedPathImpl( costEvaluator, path ).weight();\n-\n-        if ( cost < shortestSoFar.doubleValue() )\n+if ( cost < shortestSoFar.doubleValue() )\n         {\n             shortestSoFar.setValue( cost );\n         }\n-        return NoneStrictMath.compare( cost, shortestSoFar.doubleValue(), epsilon ) <= 0;\n \n+return NoneStrictMath.compare( cost, shortestSoFar.doubleValue(), epsilon ) <= 0;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}