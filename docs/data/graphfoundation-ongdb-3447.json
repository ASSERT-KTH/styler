{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3447",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "116",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "15",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "133",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "146",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "192",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "65",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "334",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3447/Neo4jTransactionalContext.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3447/Neo4jTransactionalContext.java\nindex 4ce63de0327..7a4db60887e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3447/Neo4jTransactionalContext.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3447/Neo4jTransactionalContext.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.query;\n \n import org.neo4j.graphdb.Lock;\n@@ -42,329 +43,326 @@ import org.neo4j.kernel.impl.query.statistic.StatisticProvider;\n \n public class Neo4jTransactionalContext implements TransactionalContext\n {\n-    private final GraphDatabaseQueryService graph;\n-    private final Guard guard;\n-    private final ThreadToStatementContextBridge txBridge;\n-    private final PropertyContainerLocker locker;\n-\n-    public final KernelTransaction.Type transactionType;\n-    public final SecurityContext securityContext;\n-    private final ExecutingQuery executingQuery;\n-    private final Kernel kernel;\n-\n-    /**\n-     * Current transaction.\n-     * Field can be read from a different thread in {@link #terminate()}.\n-     */\n-    private volatile InternalTransaction transaction;\n-    private Statement statement;\n-    private boolean isOpen = true;\n-\n-    private long pageHits;\n-    private long pageMisses;\n-\n-    public Neo4jTransactionalContext(\n-            GraphDatabaseQueryService graph,\n-            Guard guard,\n-            ThreadToStatementContextBridge txBridge,\n-            PropertyContainerLocker locker,\n-            InternalTransaction initialTransaction,\n-            Statement initialStatement,\n-            ExecutingQuery executingQuery,\n-            Kernel kernel\n-    )\n-    {\n-        this.graph = graph;\n-        this.guard = guard;\n-        this.txBridge = txBridge;\n-        this.locker = locker;\n-        this.transactionType = initialTransaction.transactionType();\n-        this.securityContext = initialTransaction.securityContext();\n-        this.executingQuery = executingQuery;\n-\n-        this.transaction = initialTransaction;\n-        this.statement = initialStatement;\n-        this.kernel = kernel;\n-    }\n-\n-    @Override\n-    public ExecutingQuery executingQuery()\n-    {\n-        return executingQuery;\n-    }\n-\n-    @Override\n-    public DbmsOperations dbmsOperations()\n-    {\n-        return graph.getDbmsOperations();\n-    }\n-\n-    @Override\n-    public KernelTransaction kernelTransaction()\n-    {\n-        return txBridge.getKernelTransactionBoundToThisThread( true );\n-    }\n-\n-    @Override\n-    public boolean isTopLevelTx()\n-    {\n-        return transaction.transactionType() == KernelTransaction.Type.implicit;\n-    }\n-\n-    @Override\n-    public void close( boolean success )\n-    {\n-        if ( isOpen )\n-        {\n-            try\n-            {\n-                statement.queryRegistration().unregisterExecutingQuery( executingQuery );\n-                statement.close();\n-\n-                if ( success )\n-                {\n-                    transaction.success();\n-                }\n-                else\n-                {\n-                    transaction.failure();\n-                }\n-                transaction.close();\n-            }\n-            finally\n-            {\n-                statement = null;\n-                transaction = null;\n-                isOpen = false;\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void terminate()\n-    {\n-        InternalTransaction currentTransaction = transaction;\n-        if ( currentTransaction != null )\n-        {\n-            currentTransaction.terminate();\n-        }\n-    }\n-\n-    @Override\n-    public void commitAndRestartTx()\n-    {\n-       /*\n-        * This method is use by the Cypher runtime to cater for PERIODIC COMMIT, which allows a single query to\n-        * periodically, after x number of rows, to commit a transaction and spawn a new one.\n-        *\n-        * To still keep track of the running stream after switching transactions, we need to open the new transaction\n-        * before closing the old one. This way, a query will not disappear and appear when switching transactions.\n-        *\n-        * Since our transactions are thread bound, we must first unbind the old transaction from the thread before\n-        * creating a new one. And then we need to do that thread switching again to close the old transaction.\n-        */\n-\n-        checkNotTerminated();\n-\n-        collectTransactionExecutionStatistic();\n-\n-        // (1) Unbind current transaction\n-        QueryRegistryOperations oldQueryRegistryOperations = statement.queryRegistration();\n-        Statement oldStatement = statement;\n-        InternalTransaction oldTransaction = transaction;\n-        KernelTransaction oldKernelTx = txBridge.getKernelTransactionBoundToThisThread( true );\n-        txBridge.unbindTransactionFromCurrentThread();\n-\n-        // (2) Create, bind, register, and unbind new transaction\n-        transaction = graph.beginTransaction( transactionType, securityContext );\n-        statement = txBridge.get();\n-        statement.queryRegistration().registerExecutingQuery( executingQuery );\n-        KernelTransaction kernelTx = txBridge.getKernelTransactionBoundToThisThread( true );\n-        txBridge.unbindTransactionFromCurrentThread();\n-\n-        // (3) Rebind old transaction just to commit and close it (and unregister as a side effect of that)\n-        txBridge.bindTransactionToCurrentThread( oldKernelTx );\n-        oldQueryRegistryOperations.unregisterExecutingQuery( executingQuery );\n-        try\n-        {\n-            oldStatement.close();\n-            oldTransaction.success();\n-            oldTransaction.close();\n-        }\n-        catch ( Throwable t )\n-        {\n-            // Corner case: The old transaction might have been terminated by the user. Now we also need to\n-            // terminate the new transaction.\n-            txBridge.bindTransactionToCurrentThread( kernelTx );\n-            transaction.failure();\n-            transaction.close();\n-            txBridge.unbindTransactionFromCurrentThread();\n-            throw t;\n-        }\n-\n-        // (4) Unbind the now closed old transaction and rebind the new transaction for continued execution\n-        txBridge.unbindTransactionFromCurrentThread();\n-        txBridge.bindTransactionToCurrentThread( kernelTx );\n-    }\n-\n-    @Override\n-    public void cleanForReuse()\n+  private final GraphDatabaseQueryService graph;\n+  private final Guard guard;\n+  private final ThreadToStatementContextBridge txBridge;\n+  private final PropertyContainerLocker locker;\n+\n+  public final KernelTransaction.Type transactionType;\n+  public final SecurityContext securityContext;\n+  private final ExecutingQuery executingQuery;\n+  private final Kernel kernel;\n+\n+  /**\n+   * Current transaction.\n+   * Field can be read from a different thread in {@link #terminate()}.\n+   */\n+  private volatile InternalTransaction transaction;\n+  private Statement statement;\n+  private boolean isOpen = true;\n+\n+  private long pageHits;\n+  private long pageMisses;\n+\n+  public Neo4jTransactionalContext(\n+      GraphDatabaseQueryService graph,\n+      Guard guard,\n+      ThreadToStatementContextBridge txBridge,\n+      PropertyContainerLocker locker,\n+      InternalTransaction initialTransaction,\n+      Statement initialStatement,\n+      ExecutingQuery executingQuery,\n+      Kernel kernel\n+  )\n+  {\n+    this.graph = graph;\n+    this.guard = guard;\n+    this.txBridge = txBridge;\n+    this.locker = locker;\n+    this.transactionType = initialTransaction.transactionType();\n+    this.securityContext = initialTransaction.securityContext();\n+    this.executingQuery = executingQuery;\n+\n+    this.transaction = initialTransaction;\n+    this.statement = initialStatement;\n+    this.kernel = kernel;\n+  }\n+\n+  @Override\n+  public ExecutingQuery executingQuery()\n+  {\n+    return executingQuery;\n+  }\n+\n+  @Override\n+  public DbmsOperations dbmsOperations()\n+  {\n+    return graph.getDbmsOperations();\n+  }\n+\n+  @Override\n+  public KernelTransaction kernelTransaction()\n+  {\n+    return txBridge.getKernelTransactionBoundToThisThread(true);\n+  }\n+\n+  @Override\n+  public boolean isTopLevelTx()\n+  {\n+    return transaction.transactionType() == KernelTransaction.Type.implicit;\n+  }\n+\n+  @Override\n+  public void close(boolean success)\n+  {\n+    if (isOpen)\n     {\n-        // close the old statement reference after the statement has been \"upgraded\"\n-        // to either a schema data or a schema statement, so that the locks are \"handed over\".\n-        statement.queryRegistration().unregisterExecutingQuery( executingQuery );\n+      try\n+      {\n+        statement.queryRegistration().unregisterExecutingQuery(executingQuery);\n         statement.close();\n-        statement = txBridge.get();\n-        statement.queryRegistration().registerExecutingQuery( executingQuery );\n-    }\n-\n-    @Override\n-    public boolean twoLayerTransactionState()\n-    {\n-        return kernel.modes().twoLayerTransactionState();\n-    }\n \n-    @Override\n-    public TransactionalContext getOrBeginNewIfClosed()\n-    {\n-        checkNotTerminated();\n-\n-        if ( !isOpen )\n+        if (success)\n         {\n-            transaction = graph.beginTransaction( transactionType, securityContext );\n-            statement = txBridge.get();\n-            statement.queryRegistration().registerExecutingQuery( executingQuery );\n-            isOpen = true;\n+          transaction.success();\n+        } else\n+        {\n+          transaction.failure();\n         }\n-        return this;\n+        transaction.close();\n+      } finally\n+      {\n+        statement = null;\n+        transaction = null;\n+        isOpen = false;\n+      }\n     }\n+  }\n \n-    public TransactionalContext beginInNewThread()\n+  @Override\n+  public void terminate()\n+  {\n+    InternalTransaction currentTransaction = transaction;\n+    if (currentTransaction != null)\n     {\n-        InternalTransaction newTx = graph.beginTransaction( transactionType, securityContext );\n-        return new Neo4jTransactionalContext( graph, guard, txBridge, locker, newTx,\n-                txBridge.get(), executingQuery, kernel );\n+      currentTransaction.terminate();\n     }\n+  }\n+\n+  @Override\n+  public void commitAndRestartTx()\n+  {\n+    /*\n+     * This method is use by the Cypher runtime to cater for PERIODIC COMMIT, which allows a single query to\n+     * periodically, after x number of rows, to commit a transaction and spawn a new one.\n+     *\n+     * To still keep track of the running stream after switching transactions, we need to open the new transaction\n+     * before closing the old one. This way, a query will not disappear and appear when switching transactions.\n+     *\n+     * Since our transactions are thread bound, we must first unbind the old transaction from the thread before\n+     * creating a new one. And then we need to do that thread switching again to close the old transaction.\n+     */\n \n-    private void checkNotTerminated()\n-    {\n-        InternalTransaction currentTransaction = transaction;\n-        if ( currentTransaction != null )\n-        {\n-            currentTransaction.terminationReason().ifPresent( status ->\n-            {\n-                throw new TransactionTerminatedException( status );\n-            } );\n-        }\n-    }\n+    checkNotTerminated();\n \n-    @Override\n-    public boolean isOpen()\n-    {\n-        return isOpen;\n-    }\n+    collectTransactionExecutionStatistic();\n \n-    @Override\n-    public GraphDatabaseQueryService graph()\n-    {\n-        return graph;\n-    }\n+    // (1) Unbind current transaction\n+    QueryRegistryOperations oldQueryRegistryOperations = statement.queryRegistration();\n+    Statement oldStatement = statement;\n+    InternalTransaction oldTransaction = transaction;\n+    KernelTransaction oldKernelTx = txBridge.getKernelTransactionBoundToThisThread(true);\n+    txBridge.unbindTransactionFromCurrentThread();\n \n-    @Override\n-    public Statement statement()\n-    {\n-        return statement;\n-    }\n+    // (2) Create, bind, register, and unbind new transaction\n+    transaction = graph.beginTransaction(transactionType, securityContext);\n+    statement = txBridge.get();\n+    statement.queryRegistration().registerExecutingQuery(executingQuery);\n+    KernelTransaction kernelTx = txBridge.getKernelTransactionBoundToThisThread(true);\n+    txBridge.unbindTransactionFromCurrentThread();\n \n-    @Override\n-    public void check()\n+    // (3) Rebind old transaction just to commit and close it (and unregister as a side effect of that)\n+    txBridge.bindTransactionToCurrentThread(oldKernelTx);\n+    oldQueryRegistryOperations.unregisterExecutingQuery(executingQuery);\n+    try\n     {\n-        guard.check( kernelTransaction() );\n-    }\n-\n-    @Override\n-    public TxStateHolder stateView()\n+      oldStatement.close();\n+      oldTransaction.success();\n+      oldTransaction.close();\n+    } catch (Throwable t)\n     {\n-        return (KernelTransactionImplementation) kernelTransaction();\n+      // Corner case: The old transaction might have been terminated by the user. Now we also need to\n+      // terminate the new transaction.\n+      txBridge.bindTransactionToCurrentThread(kernelTx);\n+      transaction.failure();\n+      transaction.close();\n+      txBridge.unbindTransactionFromCurrentThread();\n+      throw t;\n     }\n \n-    @Override\n-    public Lock acquireWriteLock( PropertyContainer p )\n+    // (4) Unbind the now closed old transaction and rebind the new transaction for continued execution\n+    txBridge.unbindTransactionFromCurrentThread();\n+    txBridge.bindTransactionToCurrentThread(kernelTx);\n+  }\n+\n+  @Override\n+  public void cleanForReuse()\n+  {\n+    // close the old statement reference after the statement has been \"upgraded\"\n+    // to either a schema data or a schema statement, so that the locks are \"handed over\".\n+    statement.queryRegistration().unregisterExecutingQuery(executingQuery);\n+    statement.close();\n+    statement = txBridge.get();\n+    statement.queryRegistration().registerExecutingQuery(executingQuery);\n+  }\n+\n+  @Override\n+  public boolean twoLayerTransactionState()\n+  {\n+    return kernel.modes().twoLayerTransactionState();\n+  }\n+\n+  @Override\n+  public TransactionalContext getOrBeginNewIfClosed()\n+  {\n+    checkNotTerminated();\n+\n+    if (!isOpen)\n     {\n-        return locker.exclusiveLock( kernelTransaction(), p );\n+      transaction = graph.beginTransaction(transactionType, securityContext);\n+      statement = txBridge.get();\n+      statement.queryRegistration().registerExecutingQuery(executingQuery);\n+      isOpen = true;\n     }\n-\n-    @Override\n-    public KernelTransaction.Revertable restrictCurrentTransaction( SecurityContext context )\n+    return this;\n+  }\n+\n+  public TransactionalContext beginInNewThread()\n+  {\n+    InternalTransaction newTx = graph.beginTransaction(transactionType, securityContext);\n+    return new Neo4jTransactionalContext(graph, guard, txBridge, locker, newTx,\n+        txBridge.get(), executingQuery, kernel);\n+  }\n+\n+  private void checkNotTerminated()\n+  {\n+    InternalTransaction currentTransaction = transaction;\n+    if (currentTransaction != null)\n     {\n-        return transaction.overrideWith( context );\n+      currentTransaction.terminationReason().ifPresent(status ->\n+      {\n+        throw new TransactionTerminatedException(status);\n+      });\n     }\n-\n-    @Override\n-    public SecurityContext securityContext()\n+  }\n+\n+  @Override\n+  public boolean isOpen()\n+  {\n+    return isOpen;\n+  }\n+\n+  @Override\n+  public GraphDatabaseQueryService graph()\n+  {\n+    return graph;\n+  }\n+\n+  @Override\n+  public Statement statement()\n+  {\n+    return statement;\n+  }\n+\n+  @Override\n+  public void check()\n+  {\n+    guard.check(kernelTransaction());\n+  }\n+\n+  @Override\n+  public TxStateHolder stateView()\n+  {\n+    return (KernelTransactionImplementation) kernelTransaction();\n+  }\n+\n+  @Override\n+  public Lock acquireWriteLock(PropertyContainer p)\n+  {\n+    return locker.exclusiveLock(kernelTransaction(), p);\n+  }\n+\n+  @Override\n+  public KernelTransaction.Revertable restrictCurrentTransaction(SecurityContext context)\n+  {\n+    return transaction.overrideWith(context);\n+  }\n+\n+  @Override\n+  public SecurityContext securityContext()\n+  {\n+    return securityContext;\n+  }\n+\n+  @Override\n+  public ResourceTracker resourceTracker()\n+  {\n+    // We use the current statement as resourceTracker since it is attached to the KernelTransaction\n+    // and is guaranteed to be cleaned up on transaction failure.\n+    return statement;\n+  }\n+\n+  @Override\n+  public StatisticProvider kernelStatisticProvider()\n+  {\n+    return new TransactionalContextStatisticProvider(kernelTransaction().executionStatistics());\n+  }\n+\n+  private void collectTransactionExecutionStatistic()\n+  {\n+    ExecutionStatistics stats = kernelTransaction().executionStatistics();\n+    pageHits += stats.pageHits();\n+    pageMisses += stats.pageFaults();\n+  }\n+\n+  public Neo4jTransactionalContext copyFrom(GraphDatabaseQueryService graph,\n+                                            Guard guard,\n+                                            ThreadToStatementContextBridge txBridge, PropertyContainerLocker locker,\n+                                            InternalTransaction initialTransaction, Statement initialStatement,\n+                                            ExecutingQuery executingQuery)\n+  {\n+    return new Neo4jTransactionalContext(graph, guard, txBridge, locker, initialTransaction, initialStatement,\n+        executingQuery, kernel);\n+  }\n+\n+  interface Creator\n+  {\n+    Neo4jTransactionalContext create(\n+        InternalTransaction tx,\n+        Statement initialStatement,\n+        ExecutingQuery executingQuery\n+    );\n+  }\n+\n+  private class TransactionalContextStatisticProvider implements StatisticProvider\n+  {\n+    private final ExecutionStatistics executionStatistics;\n+\n+    private TransactionalContextStatisticProvider(ExecutionStatistics executionStatistics)\n     {\n-        return securityContext;\n+      this.executionStatistics = executionStatistics;\n     }\n \n     @Override\n-    public ResourceTracker resourceTracker()\n+    public long getPageCacheHits()\n     {\n-        // We use the current statement as resourceTracker since it is attached to the KernelTransaction\n-        // and is guaranteed to be cleaned up on transaction failure.\n-        return statement;\n+      return executionStatistics.pageHits() + pageHits;\n     }\n \n     @Override\n-    public StatisticProvider kernelStatisticProvider()\n-    {\n-        return new TransactionalContextStatisticProvider( kernelTransaction().executionStatistics() );\n-    }\n-\n-    private void collectTransactionExecutionStatistic()\n-    {\n-        ExecutionStatistics stats = kernelTransaction().executionStatistics();\n-        pageHits += stats.pageHits();\n-        pageMisses += stats.pageFaults();\n-    }\n-\n-    public Neo4jTransactionalContext copyFrom( GraphDatabaseQueryService graph,\n-            Guard guard,\n-            ThreadToStatementContextBridge txBridge, PropertyContainerLocker locker,\n-            InternalTransaction initialTransaction, Statement initialStatement,\n-            ExecutingQuery executingQuery )\n-    {\n-        return new Neo4jTransactionalContext( graph, guard, txBridge, locker, initialTransaction, initialStatement,\n-                executingQuery, kernel );\n-    }\n-\n-    interface Creator\n+    public long getPageCacheMisses()\n     {\n-        Neo4jTransactionalContext create(\n-                InternalTransaction tx,\n-                Statement initialStatement,\n-                ExecutingQuery executingQuery\n-        );\n-    }\n-\n-    private class TransactionalContextStatisticProvider implements StatisticProvider\n-    {\n-        private final ExecutionStatistics executionStatistics;\n-\n-        private TransactionalContextStatisticProvider( ExecutionStatistics executionStatistics )\n-        {\n-            this.executionStatistics = executionStatistics;\n-        }\n-\n-        @Override\n-        public long getPageCacheHits()\n-        {\n-            return executionStatistics.pageHits() + pageHits;\n-        }\n-\n-        @Override\n-        public long getPageCacheMisses()\n-        {\n-            return executionStatistics.pageFaults() + pageMisses;\n-        }\n+      return executionStatistics.pageFaults() + pageMisses;\n     }\n+  }\n }\n",
            "diff_size": 466
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3447/Neo4jTransactionalContext.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3447/Neo4jTransactionalContext.java\nindex 4ce63de0327..9d10966005c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3447/Neo4jTransactionalContext.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3447/Neo4jTransactionalContext.java\n@@ -48,7 +48,8 @@ public class Neo4jTransactionalContext implements TransactionalContext\n     private final PropertyContainerLocker locker;\n \n     public final KernelTransaction.Type transactionType;\n-    public final SecurityContext securityContext;\n+\n+public final SecurityContext securityContext;\n     private final ExecutingQuery executingQuery;\n     private final Kernel kernel;\n \n@@ -63,16 +64,14 @@ public class Neo4jTransactionalContext implements TransactionalContext\n     private long pageHits;\n     private long pageMisses;\n \n-    public Neo4jTransactionalContext(\n-            GraphDatabaseQueryService graph,\n+    public Neo4jTransactionalContext( GraphDatabaseQueryService graph,\n             Guard guard,\n             ThreadToStatementContextBridge txBridge,\n             PropertyContainerLocker locker,\n             InternalTransaction initialTransaction,\n             Statement initialStatement,\n             ExecutingQuery executingQuery,\n-            Kernel kernel\n-    )\n+            Kernel kernel )\n     {\n         this.graph = graph;\n         this.guard = guard;\n@@ -81,8 +80,7 @@ public class Neo4jTransactionalContext implements TransactionalContext\n         this.transactionType = initialTransaction.transactionType();\n         this.securityContext = initialTransaction.securityContext();\n         this.executingQuery = executingQuery;\n-\n-        this.transaction = initialTransaction;\n+this.transaction = initialTransaction;\n         this.statement = initialStatement;\n         this.kernel = kernel;\n     }\n@@ -120,8 +118,7 @@ public class Neo4jTransactionalContext implements TransactionalContext\n             {\n                 statement.queryRegistration().unregisterExecutingQuery( executingQuery );\n                 statement.close();\n-\n-                if ( success )\n+if ( success )\n                 {\n                     transaction.success();\n                 }\n@@ -153,7 +150,7 @@ public class Neo4jTransactionalContext implements TransactionalContext\n     @Override\n     public void commitAndRestartTx()\n     {\n-       /*\n+    /*\n         * This method is use by the Cypher runtime to cater for PERIODIC COMMIT, which allows a single query to\n         * periodically, after x number of rows, to commit a transaction and spawn a new one.\n         *\n@@ -162,9 +159,7 @@ public class Neo4jTransactionalContext implements TransactionalContext\n         *\n         * Since our transactions are thread bound, we must first unbind the old transaction from the thread before\n         * creating a new one. And then we need to do that thread switching again to close the old transaction.\n-        */\n-\n-        checkNotTerminated();\n+        */ checkNotTerminated();\n \n         collectTransactionExecutionStatistic();\n \n@@ -228,8 +223,7 @@ public class Neo4jTransactionalContext implements TransactionalContext\n     public TransactionalContext getOrBeginNewIfClosed()\n     {\n         checkNotTerminated();\n-\n-        if ( !isOpen )\n+if ( !isOpen )\n         {\n             transaction = graph.beginTransaction( transactionType, securityContext );\n             statement = txBridge.get();\n@@ -339,11 +333,9 @@ public class Neo4jTransactionalContext implements TransactionalContext\n \n     interface Creator\n     {\n-        Neo4jTransactionalContext create(\n-                InternalTransaction tx,\n+        Neo4jTransactionalContext create( InternalTransaction tx,\n                 Statement initialStatement,\n-                ExecutingQuery executingQuery\n-        );\n+                ExecutingQuery executingQuery );\n     }\n \n     private class TransactionalContextStatisticProvider implements StatisticProvider\n@@ -367,4 +359,4 @@ public class Neo4jTransactionalContext implements TransactionalContext\n             return executionStatistics.pageFaults() + pageMisses;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}