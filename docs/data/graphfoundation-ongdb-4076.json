{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4076",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "80",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "6",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "70",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "197",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "202",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "207",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "70",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4076/PkiUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4076/PkiUtils.java\nindex 28f32d710ea..8e4a78b0974 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4076/PkiUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4076/PkiUtils.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.ssl;\n \n import org.bouncycastle.asn1.x500.X500Name;\n@@ -67,173 +68,174 @@ import javax.crypto.NoSuchPaddingException;\n  */\n public class PkiUtils\n {\n-    /* Generating SSL certificates takes a long time.\n-     * This non-official setting allows us to use a fast source of randomness when running tests */\n-    private static final boolean useInsecureCertificateGeneration = Boolean.getBoolean( \"org.neo4j.useInsecureCertificateGeneration\" );\n-    private static final String CERTIFICATE_TYPE = \"X.509\";\n-    private static final String DEFAULT_ENCRYPTION = \"RSA\";\n-    private final SecureRandom random;\n-    /** Current time minus 1 year, just in case software clock goes back due to time synchronization */\n-    private static final Date NOT_BEFORE = new Date( System.currentTimeMillis() - 86400000L * 365 );\n-    /** The maximum possible value in X.509 specification: 9999-12-31 23:59:59 */\n-    private static final Date NOT_AFTER = new Date( 253402300799000L );\n-    private static final Provider PROVIDER = new BouncyCastleProvider();\n-\n-    private static volatile boolean cleanupRequired = true;\n-\n-    static\n-    {\n-        Security.addProvider( PROVIDER );\n-    }\n-\n-    public PkiUtils()\n+  /* Generating SSL certificates takes a long time.\n+   * This non-official setting allows us to use a fast source of randomness when running tests */\n+  private static final boolean useInsecureCertificateGeneration = Boolean.getBoolean(\"org.neo4j.useInsecureCertificateGeneration\");\n+  private static final String CERTIFICATE_TYPE = \"X.509\";\n+  private static final String DEFAULT_ENCRYPTION = \"RSA\";\n+  private final SecureRandom random;\n+  /**\n+   * Current time minus 1 year, just in case software clock goes back due to time synchronization\n+   */\n+  private static final Date NOT_BEFORE = new Date(System.currentTimeMillis() - 86400000L * 365);\n+  /**\n+   * The maximum possible value in X.509 specification: 9999-12-31 23:59:59\n+   */\n+  private static final Date NOT_AFTER = new Date(253402300799000L);\n+  private static final Provider PROVIDER = new BouncyCastleProvider();\n+\n+  private static volatile boolean cleanupRequired = true;\n+\n+  static\n+  {\n+    Security.addProvider(PROVIDER);\n+  }\n+\n+  public PkiUtils()\n+  {\n+    random = useInsecureCertificateGeneration ? new InsecureRandom() : new SecureRandom();\n+  }\n+\n+  public void createSelfSignedCertificate(File certificatePath, File privateKeyPath, String hostName)\n+      throws GeneralSecurityException, IOException, OperatorCreationException\n+  {\n+    installCleanupHook(certificatePath, privateKeyPath);\n+    KeyPairGenerator keyGen = KeyPairGenerator.getInstance(DEFAULT_ENCRYPTION);\n+    keyGen.initialize(2048, random);\n+    KeyPair keypair = keyGen.generateKeyPair();\n+\n+    // Prepare the information required for generating an X.509 certificate.\n+    X500Name owner = new X500Name(\"CN=\" + hostName);\n+    X509v3CertificateBuilder builder = new JcaX509v3CertificateBuilder(\n+        owner, new BigInteger(64, random), NOT_BEFORE, NOT_AFTER, owner, keypair.getPublic());\n+\n+    PrivateKey privateKey = keypair.getPrivate();\n+    ContentSigner signer = new JcaContentSignerBuilder(\"SHA512WithRSAEncryption\").build(privateKey);\n+    X509CertificateHolder certHolder = builder.build(signer);\n+    X509Certificate cert = new JcaX509CertificateConverter().setProvider(PROVIDER).getCertificate(certHolder);\n+\n+    //check so that cert is valid\n+    cert.verify(keypair.getPublic());\n+\n+    //write to disk\n+    writePem(\"CERTIFICATE\", cert.getEncoded(), certificatePath);\n+    writePem(\"PRIVATE KEY\", privateKey.getEncoded(), privateKeyPath);\n+    // Mark as done so we don't clean up certificates\n+    cleanupRequired = false;\n+  }\n+\n+  /**\n+   * Makes sure to delete partially generated certificates. Does nothing if both certificate and private key have\n+   * been generated successfully.\n+   * <p>\n+   * The hook should only be installed prior to generation of self-signed certificate, and not if certificates\n+   * already exist.\n+   */\n+  private static void installCleanupHook(final File certificatePath, final File privateKeyPath)\n+  {\n+    Runtime.getRuntime().addShutdownHook(new Thread(() ->\n     {\n-        random = useInsecureCertificateGeneration ? new InsecureRandom() : new SecureRandom();\n-    }\n+      if (cleanupRequired)\n+      {\n+        System.err.println(\"Cleaning up partially generated self-signed certificate...\");\n \n-    public void createSelfSignedCertificate( File certificatePath, File privateKeyPath, String hostName )\n-            throws GeneralSecurityException, IOException, OperatorCreationException\n-    {\n-        installCleanupHook( certificatePath, privateKeyPath );\n-        KeyPairGenerator keyGen = KeyPairGenerator.getInstance( DEFAULT_ENCRYPTION );\n-        keyGen.initialize( 2048, random );\n-        KeyPair keypair = keyGen.generateKeyPair();\n-\n-        // Prepare the information required for generating an X.509 certificate.\n-        X500Name owner = new X500Name( \"CN=\" + hostName );\n-        X509v3CertificateBuilder builder = new JcaX509v3CertificateBuilder(\n-                owner, new BigInteger( 64, random ), NOT_BEFORE, NOT_AFTER, owner, keypair.getPublic() );\n-\n-        PrivateKey privateKey = keypair.getPrivate();\n-        ContentSigner signer = new JcaContentSignerBuilder( \"SHA512WithRSAEncryption\" ).build( privateKey );\n-        X509CertificateHolder certHolder = builder.build( signer );\n-        X509Certificate cert = new JcaX509CertificateConverter().setProvider( PROVIDER ).getCertificate( certHolder );\n-\n-        //check so that cert is valid\n-        cert.verify( keypair.getPublic() );\n-\n-        //write to disk\n-        writePem( \"CERTIFICATE\", cert.getEncoded(), certificatePath );\n-        writePem( \"PRIVATE KEY\", privateKey.getEncoded(), privateKeyPath );\n-        // Mark as done so we don't clean up certificates\n-        cleanupRequired = false;\n-    }\n+        if (certificatePath.exists())\n+        {\n+          certificatePath.delete();\n+        }\n \n-    /**\n-     * Makes sure to delete partially generated certificates. Does nothing if both certificate and private key have\n-     * been generated successfully.\n-     *\n-     * The hook should only be installed prior to generation of self-signed certificate, and not if certificates\n-     * already exist.\n-     */\n-    private static void installCleanupHook( final File certificatePath, final File privateKeyPath )\n-    {\n-        Runtime.getRuntime().addShutdownHook( new Thread( () ->\n+        if (privateKeyPath.exists())\n         {\n-            if ( cleanupRequired )\n-            {\n-                System.err.println( \"Cleaning up partially generated self-signed certificate...\" );\n+          privateKeyPath.delete();\n+        }\n+      }\n+    }));\n+  }\n \n-                if ( certificatePath.exists() )\n-                {\n-                    certificatePath.delete();\n-                }\n+  public X509Certificate[] loadCertificates(File certFile) throws CertificateException, IOException\n+  {\n+    CertificateFactory certFactory = CertificateFactory.getInstance(CERTIFICATE_TYPE);\n+    Collection<X509Certificate> certificates = new LinkedList<>();\n \n-                if ( privateKeyPath.exists() )\n-                {\n-                    privateKeyPath.delete();\n-                }\n-            }\n-        } ) );\n+    try (PemReader r = new PemReader(new FileReader(certFile)))\n+    {\n+      for (PemObject pemObject = r.readPemObject(); pemObject != null; pemObject = r.readPemObject())\n+      {\n+        byte[] encodedCert = pemObject.getContent();\n+        Collection<? extends X509Certificate> loadedCertificates = (Collection<X509Certificate>)\n+            certFactory.generateCertificates(new ByteArrayInputStream(encodedCert));\n+        certificates.addAll(loadedCertificates);\n+      }\n     }\n \n-    public X509Certificate[] loadCertificates( File certFile ) throws CertificateException, IOException\n+    if (certificates.size() == 0)\n     {\n-        CertificateFactory certFactory = CertificateFactory.getInstance( CERTIFICATE_TYPE );\n-        Collection<X509Certificate> certificates = new LinkedList<>();\n+      // Ok, failed to read as PEM file, try and read it as raw binary certificate\n+      try (FileInputStream in = new FileInputStream(certFile))\n+      {\n+        certificates = (Collection<X509Certificate>) certFactory.generateCertificates(in);\n+      }\n+    }\n \n-        try ( PemReader r = new PemReader( new FileReader( certFile ) ) )\n-        {\n-            for ( PemObject pemObject = r.readPemObject(); pemObject != null; pemObject = r.readPemObject() )\n-            {\n-                byte[] encodedCert = pemObject.getContent();\n-                Collection<? extends X509Certificate> loadedCertificates = (Collection<X509Certificate>)\n-                        certFactory.generateCertificates( new ByteArrayInputStream( encodedCert ) );\n-                certificates.addAll( loadedCertificates );\n-            }\n-        }\n+    return certificates.toArray(new X509Certificate[certificates.size()]);\n+  }\n \n-        if ( certificates.size() == 0 )\n+  public PrivateKey loadPrivateKey(File privateKeyFile)\n+      throws IOException, NoSuchAlgorithmException,\n+      InvalidKeySpecException\n+  {\n+    try (PemReader r = new PemReader(new FileReader(privateKeyFile)))\n+    {\n+      PemObject pemObject = r.readPemObject();\n+      if (pemObject != null)\n+      {\n+        byte[] encodedKey = pemObject.getContent();\n+        KeySpec keySpec = new PKCS8EncodedKeySpec(encodedKey);\n+        try\n         {\n-            // Ok, failed to read as PEM file, try and read it as raw binary certificate\n-            try ( FileInputStream in = new FileInputStream( certFile ) )\n+          return KeyFactory.getInstance(\"RSA\").generatePrivate(keySpec);\n+        } catch (InvalidKeySpecException ignore)\n+        {\n+          try\n+          {\n+            return KeyFactory.getInstance(\"DSA\").generatePrivate(keySpec);\n+          } catch (InvalidKeySpecException ignore2)\n+          {\n+            try\n+            {\n+              return KeyFactory.getInstance(\"EC\").generatePrivate(keySpec);\n+            } catch (InvalidKeySpecException e)\n             {\n-                certificates = (Collection<X509Certificate>) certFactory.generateCertificates( in );\n+              throw new InvalidKeySpecException(\"Neither RSA, DSA nor EC worked\", e);\n             }\n+          }\n         }\n-\n-        return certificates.toArray( new X509Certificate[certificates.size()] );\n+      }\n     }\n \n-    public PrivateKey loadPrivateKey( File privateKeyFile )\n-            throws IOException, NoSuchAlgorithmException,\n-            InvalidKeySpecException\n+    // Ok, failed to read as PEM file, try and read it as a raw binary private key\n+    try (DataInputStream in = new DataInputStream(new FileInputStream(privateKeyFile)))\n     {\n-        try ( PemReader r = new PemReader( new FileReader( privateKeyFile ) ) )\n-        {\n-            PemObject pemObject = r.readPemObject();\n-            if ( pemObject != null )\n-            {\n-                byte[] encodedKey = pemObject.getContent();\n-                KeySpec keySpec = new PKCS8EncodedKeySpec( encodedKey );\n-                try\n-                {\n-                    return KeyFactory.getInstance( \"RSA\" ).generatePrivate( keySpec );\n-                }\n-                catch ( InvalidKeySpecException ignore )\n-                {\n-                    try\n-                    {\n-                        return KeyFactory.getInstance( \"DSA\" ).generatePrivate( keySpec );\n-                    }\n-                    catch ( InvalidKeySpecException ignore2 )\n-                    {\n-                        try\n-                        {\n-                            return KeyFactory.getInstance( \"EC\" ).generatePrivate( keySpec );\n-                        }\n-                        catch ( InvalidKeySpecException e )\n-                        {\n-                            throw new InvalidKeySpecException( \"Neither RSA, DSA nor EC worked\", e );\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-\n-        // Ok, failed to read as PEM file, try and read it as a raw binary private key\n-        try ( DataInputStream in = new DataInputStream( new FileInputStream( privateKeyFile ) ) )\n-        {\n-            byte[] keyBytes = new byte[(int) privateKeyFile.length()];\n-            in.readFully( keyBytes );\n+      byte[] keyBytes = new byte[(int) privateKeyFile.length()];\n+      in.readFully(keyBytes);\n \n-            KeySpec keySpec = new PKCS8EncodedKeySpec( keyBytes );\n+      KeySpec keySpec = new PKCS8EncodedKeySpec(keyBytes);\n \n-            return KeyFactory.getInstance( DEFAULT_ENCRYPTION ).generatePrivate( keySpec );\n-        }\n+      return KeyFactory.getInstance(DEFAULT_ENCRYPTION).generatePrivate(keySpec);\n     }\n+  }\n \n-    private void writePem( String type, byte[] encodedContent, File path ) throws IOException\n+  private void writePem(String type, byte[] encodedContent, File path) throws IOException\n+  {\n+    path.getParentFile().mkdirs();\n+    try (PemWriter writer = new PemWriter(new FileWriter(path)))\n     {\n-        path.getParentFile().mkdirs();\n-        try ( PemWriter writer = new PemWriter( new FileWriter( path ) ) )\n-        {\n-            writer.writeObject( new PemObject( type, encodedContent ) );\n-            writer.flush();\n-        }\n-        path.setReadable( false, false );\n-        path.setWritable( false, false );\n-        path.setReadable( true );\n-        path.setWritable( true );\n+      writer.writeObject(new PemObject(type, encodedContent));\n+      writer.flush();\n     }\n+    path.setReadable(false, false);\n+    path.setWritable(false, false);\n+    path.setReadable(true);\n+    path.setWritable(true);\n+  }\n }\n",
            "diff_size": 233
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "95",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "104",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "157",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 181).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4076/PkiUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4076/PkiUtils.java\nindex 28f32d710ea..9d6a7b6c1c3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4076/PkiUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4076/PkiUtils.java\n@@ -73,7 +73,8 @@ public class PkiUtils\n     private static final String CERTIFICATE_TYPE = \"X.509\";\n     private static final String DEFAULT_ENCRYPTION = \"RSA\";\n     private final SecureRandom random;\n-    /** Current time minus 1 year, just in case software clock goes back due to time synchronization */\n+\n+/** Current time minus 1 year, just in case software clock goes back due to time synchronization */\n     private static final Date NOT_BEFORE = new Date( System.currentTimeMillis() - 86400000L * 365 );\n     /** The maximum possible value in X.509 specification: 9999-12-31 23:59:59 */\n     private static final Date NOT_AFTER = new Date( 253402300799000L );\n@@ -91,9 +92,8 @@ public class PkiUtils\n         random = useInsecureCertificateGeneration ? new InsecureRandom() : new SecureRandom();\n     }\n \n-    public void createSelfSignedCertificate( File certificatePath, File privateKeyPath, String hostName )\n-            throws GeneralSecurityException, IOException, OperatorCreationException\n-    {\n+    public void createSelfSignedCertificate( File certificatePath, File privateKeyPath, String hostName ) throws GeneralSecurityException, IOException, OperatorCreationException\n+{\n         installCleanupHook( certificatePath, privateKeyPath );\n         KeyPairGenerator keyGen = KeyPairGenerator.getInstance( DEFAULT_ENCRYPTION );\n         keyGen.initialize( 2048, random );\n@@ -101,10 +101,8 @@ public class PkiUtils\n \n         // Prepare the information required for generating an X.509 certificate.\n         X500Name owner = new X500Name( \"CN=\" + hostName );\n-        X509v3CertificateBuilder builder = new JcaX509v3CertificateBuilder(\n-                owner, new BigInteger( 64, random ), NOT_BEFORE, NOT_AFTER, owner, keypair.getPublic() );\n-\n-        PrivateKey privateKey = keypair.getPrivate();\n+        X509v3CertificateBuilder builder = new JcaX509v3CertificateBuilder( owner, new BigInteger( 64, random ), NOT_BEFORE, NOT_AFTER, owner, keypair.getPublic() );\n+PrivateKey privateKey = keypair.getPrivate();\n         ContentSigner signer = new JcaContentSignerBuilder( \"SHA512WithRSAEncryption\" ).build( privateKey );\n         X509CertificateHolder certHolder = builder.build( signer );\n         X509Certificate cert = new JcaX509CertificateConverter().setProvider( PROVIDER ).getCertificate( certHolder );\n@@ -133,8 +131,7 @@ public class PkiUtils\n             if ( cleanupRequired )\n             {\n                 System.err.println( \"Cleaning up partially generated self-signed certificate...\" );\n-\n-                if ( certificatePath.exists() )\n+if ( certificatePath.exists() )\n                 {\n                     certificatePath.delete();\n                 }\n@@ -157,9 +154,8 @@ public class PkiUtils\n             for ( PemObject pemObject = r.readPemObject(); pemObject != null; pemObject = r.readPemObject() )\n             {\n                 byte[] encodedCert = pemObject.getContent();\n-                Collection<? extends X509Certificate> loadedCertificates = (Collection<X509Certificate>)\n-                        certFactory.generateCertificates( new ByteArrayInputStream( encodedCert ) );\n-                certificates.addAll( loadedCertificates );\n+                Collection<? extends X509Certificate> loadedCertificates = (Collection<X509Certificate>) certFactory.generateCertificates( new ByteArrayInputStream( encodedCert ) );\n+certificates.addAll( loadedCertificates );\n             }\n         }\n \n@@ -175,10 +171,9 @@ public class PkiUtils\n         return certificates.toArray( new X509Certificate[certificates.size()] );\n     }\n \n-    public PrivateKey loadPrivateKey( File privateKeyFile )\n-            throws IOException, NoSuchAlgorithmException,\n+    public PrivateKey loadPrivateKey( File privateKeyFile ) throws IOException, NoSuchAlgorithmException,\n             InvalidKeySpecException\n-    {\n+{\n         try ( PemReader r = new PemReader( new FileReader( privateKeyFile ) ) )\n         {\n             PemObject pemObject = r.readPemObject();\n@@ -216,10 +211,8 @@ public class PkiUtils\n         {\n             byte[] keyBytes = new byte[(int) privateKeyFile.length()];\n             in.readFully( keyBytes );\n-\n-            KeySpec keySpec = new PKCS8EncodedKeySpec( keyBytes );\n-\n-            return KeyFactory.getInstance( DEFAULT_ENCRYPTION ).generatePrivate( keySpec );\n+KeySpec keySpec = new PKCS8EncodedKeySpec( keyBytes );\n+return KeyFactory.getInstance( DEFAULT_ENCRYPTION ).generatePrivate( keySpec );\n         }\n     }\n \n@@ -236,4 +229,4 @@ public class PkiUtils\n         path.setReadable( true );\n         path.setWritable( true );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 22
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}