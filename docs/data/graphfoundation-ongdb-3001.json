{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3001",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "133",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "85",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3001/ExecutorBoltSchedulerProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3001/ExecutorBoltSchedulerProvider.java\nindex 3de84f4a582..4d52605eab6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3001/ExecutorBoltSchedulerProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3001/ExecutorBoltSchedulerProvider.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.bolt.runtime;\n \n import java.util.concurrent.ConcurrentHashMap;\n@@ -32,74 +33,73 @@ import org.neo4j.scheduler.JobScheduler;\n \n public class ExecutorBoltSchedulerProvider extends LifecycleAdapter implements BoltSchedulerProvider\n {\n-    private final Config config;\n-    private final ExecutorFactory executorFactory;\n-    private final JobScheduler scheduler;\n-    private final LogService logService;\n-    private final Log internalLog;\n-    private final ConcurrentHashMap<String, BoltScheduler> boltSchedulers;\n+  private final Config config;\n+  private final ExecutorFactory executorFactory;\n+  private final JobScheduler scheduler;\n+  private final LogService logService;\n+  private final Log internalLog;\n+  private final ConcurrentHashMap<String, BoltScheduler> boltSchedulers;\n \n-    private ExecutorService forkJoinThreadPool;\n+  private ExecutorService forkJoinThreadPool;\n \n-    public ExecutorBoltSchedulerProvider( Config config, ExecutorFactory executorFactory, JobScheduler scheduler, LogService logService )\n-    {\n-        this.config = config;\n-        this.executorFactory = executorFactory;\n-        this.scheduler = scheduler;\n-        this.logService = logService;\n-        this.internalLog = logService.getInternalLog( getClass() );\n-        this.boltSchedulers = new ConcurrentHashMap<>();\n-    }\n+  public ExecutorBoltSchedulerProvider(Config config, ExecutorFactory executorFactory, JobScheduler scheduler, LogService logService)\n+  {\n+    this.config = config;\n+    this.executorFactory = executorFactory;\n+    this.scheduler = scheduler;\n+    this.logService = logService;\n+    this.internalLog = logService.getInternalLog(getClass());\n+    this.boltSchedulers = new ConcurrentHashMap<>();\n+  }\n \n-    @Override\n-    public void start()\n+  @Override\n+  public void start()\n+  {\n+    forkJoinThreadPool = new ForkJoinPool();\n+    config.enabledBoltConnectors().forEach(connector ->\n     {\n-        forkJoinThreadPool = new ForkJoinPool();\n-        config.enabledBoltConnectors().forEach( connector ->\n-        {\n-            BoltScheduler boltScheduler =\n-                    new ExecutorBoltScheduler( connector.key(), executorFactory, scheduler, logService, config.get( connector.thread_pool_min_size ),\n-                            config.get( connector.thread_pool_max_size ), config.get( connector.thread_pool_keep_alive ),\n-                            config.get( connector.unsupported_thread_pool_queue_size ), forkJoinThreadPool );\n-            boltScheduler.start();\n-            boltSchedulers.put( connector.key(), boltScheduler );\n-        } );\n-    }\n+      BoltScheduler boltScheduler =\n+          new ExecutorBoltScheduler(connector.key(), executorFactory, scheduler, logService, config.get(connector.thread_pool_min_size),\n+              config.get(connector.thread_pool_max_size), config.get(connector.thread_pool_keep_alive),\n+              config.get(connector.unsupported_thread_pool_queue_size), forkJoinThreadPool);\n+      boltScheduler.start();\n+      boltSchedulers.put(connector.key(), boltScheduler);\n+    });\n+  }\n \n-    @Override\n-    public void stop()\n-    {\n-        boltSchedulers.values().forEach( this::stopScheduler );\n-        boltSchedulers.clear();\n+  @Override\n+  public void stop()\n+  {\n+    boltSchedulers.values().forEach(this::stopScheduler);\n+    boltSchedulers.clear();\n \n-        forkJoinThreadPool.shutdown();\n-        forkJoinThreadPool = null;\n-    }\n+    forkJoinThreadPool.shutdown();\n+    forkJoinThreadPool = null;\n+  }\n \n-    private void stopScheduler( BoltScheduler scheduler )\n+  private void stopScheduler(BoltScheduler scheduler)\n+  {\n+    try\n+    {\n+      scheduler.stop();\n+    } catch (Throwable t)\n     {\n-        try\n-        {\n-            scheduler.stop();\n-        }\n-        catch ( Throwable t )\n-        {\n-            internalLog.warn( String.format( \"An unexpected error occurred while stopping BoltScheduler [%s]\", scheduler.connector() ), t );\n-        }\n+      internalLog.warn(String.format(\"An unexpected error occurred while stopping BoltScheduler [%s]\", scheduler.connector()), t);\n     }\n+  }\n \n-    @Override\n-    public BoltScheduler get( BoltChannel channel )\n+  @Override\n+  public BoltScheduler get(BoltChannel channel)\n+  {\n+    BoltScheduler boltScheduler = boltSchedulers.get(channel.connector());\n+    if (boltScheduler == null)\n     {\n-        BoltScheduler boltScheduler = boltSchedulers.get( channel.connector() );\n-        if ( boltScheduler == null )\n-        {\n-            throw new IllegalArgumentException(\n-                    String.format( \"Provided channel instance [local: %s, remote: %s] is not bound to any known bolt listen addresses.\",\n-                            channel.serverAddress(), channel.clientAddress() ) );\n-        }\n-\n-        return boltScheduler;\n+      throw new IllegalArgumentException(\n+          String.format(\"Provided channel instance [local: %s, remote: %s] is not bound to any known bolt listen addresses.\",\n+              channel.serverAddress(), channel.clientAddress()));\n     }\n \n+    return boltScheduler;\n+  }\n+\n }\n",
            "diff_size": 73
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 347).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3001/ExecutorBoltSchedulerProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3001/ExecutorBoltSchedulerProvider.java\nindex 3de84f4a582..7e240c2856a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3001/ExecutorBoltSchedulerProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3001/ExecutorBoltSchedulerProvider.java\n@@ -37,7 +37,7 @@ public class ExecutorBoltSchedulerProvider extends LifecycleAdapter implements B\n     private final JobScheduler scheduler;\n     private final LogService logService;\n     private final Log internalLog;\n-    private final ConcurrentHashMap<String, BoltScheduler> boltSchedulers;\n+    private final ConcurrentHashMap<String,BoltScheduler> boltSchedulers;\n \n     private ExecutorService forkJoinThreadPool;\n \n@@ -57,11 +57,8 @@ public class ExecutorBoltSchedulerProvider extends LifecycleAdapter implements B\n         forkJoinThreadPool = new ForkJoinPool();\n         config.enabledBoltConnectors().forEach( connector ->\n         {\n-            BoltScheduler boltScheduler =\n-                    new ExecutorBoltScheduler( connector.key(), executorFactory, scheduler, logService, config.get( connector.thread_pool_min_size ),\n-                            config.get( connector.thread_pool_max_size ), config.get( connector.thread_pool_keep_alive ),\n-                            config.get( connector.unsupported_thread_pool_queue_size ), forkJoinThreadPool );\n-            boltScheduler.start();\n+            BoltScheduler boltScheduler = new ExecutorBoltScheduler( connector.key(), executorFactory, scheduler, logService, config.get( connector.thread_pool_min_size ), config.get( connector.thread_pool_max_size ), config.get( connector.thread_pool_keep_alive ), config.get( connector.unsupported_thread_pool_queue_size ), forkJoinThreadPool );\n+boltScheduler.start();\n             boltSchedulers.put( connector.key(), boltScheduler );\n         } );\n     }\n@@ -71,8 +68,7 @@ public class ExecutorBoltSchedulerProvider extends LifecycleAdapter implements B\n     {\n         boltSchedulers.values().forEach( this::stopScheduler );\n         boltSchedulers.clear();\n-\n-        forkJoinThreadPool.shutdown();\n+forkJoinThreadPool.shutdown();\n         forkJoinThreadPool = null;\n     }\n \n@@ -94,12 +90,10 @@ public class ExecutorBoltSchedulerProvider extends LifecycleAdapter implements B\n         BoltScheduler boltScheduler = boltSchedulers.get( channel.connector() );\n         if ( boltScheduler == null )\n         {\n-            throw new IllegalArgumentException(\n-                    String.format( \"Provided channel instance [local: %s, remote: %s] is not bound to any known bolt listen addresses.\",\n+            throw new IllegalArgumentException( String.format( \"Provided channel instance [local: %s, remote: %s] is not bound to any known bolt listen addresses.\",\n                             channel.serverAddress(), channel.clientAddress() ) );\n-        }\n+    }\n \n         return boltScheduler;\n     }\n-\n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "58",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 387).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "91",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 218).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3001/ExecutorBoltSchedulerProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/3001/ExecutorBoltSchedulerProvider.java\nindex 3de84f4a582..26f593709d5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3001/ExecutorBoltSchedulerProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/3001/ExecutorBoltSchedulerProvider.java\n@@ -22,7 +22,6 @@ package org.neo4j.bolt.runtime;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.ForkJoinPool;\n-\n import org.neo4j.bolt.BoltChannel;\n import org.neo4j.kernel.configuration.Config;\n import org.neo4j.kernel.impl.logging.LogService;\n@@ -37,8 +36,7 @@ public class ExecutorBoltSchedulerProvider extends LifecycleAdapter implements B\n     private final JobScheduler scheduler;\n     private final LogService logService;\n     private final Log internalLog;\n-    private final ConcurrentHashMap<String, BoltScheduler> boltSchedulers;\n-\n+    private final ConcurrentHashMap<String,BoltScheduler> boltSchedulers;\n     private ExecutorService forkJoinThreadPool;\n \n     public ExecutorBoltSchedulerProvider( Config config, ExecutorFactory executorFactory, JobScheduler scheduler, LogService logService )\n@@ -56,22 +54,18 @@ public class ExecutorBoltSchedulerProvider extends LifecycleAdapter implements B\n     {\n         forkJoinThreadPool = new ForkJoinPool();\n         config.enabledBoltConnectors().forEach( connector ->\n-        {\n-            BoltScheduler boltScheduler =\n-                    new ExecutorBoltScheduler( connector.key(), executorFactory, scheduler, logService, config.get( connector.thread_pool_min_size ),\n-                            config.get( connector.thread_pool_max_size ), config.get( connector.thread_pool_keep_alive ),\n-                            config.get( connector.unsupported_thread_pool_queue_size ), forkJoinThreadPool );\n-            boltScheduler.start();\n-            boltSchedulers.put( connector.key(), boltScheduler );\n-        } );\n+                                                {\n+                                                    BoltScheduler boltScheduler = new ExecutorBoltScheduler( connector.key(), executorFactory, scheduler, logService, config.get( connector.thread_pool_min_size ), config.get( connector.thread_pool_max_size ), config.get( connector.thread_pool_keep_alive ), config.get( connector.unsupported_thread_pool_queue_size ), forkJoinThreadPool );\n+                                                    boltScheduler.start();\n+                                                    boltSchedulers.put( connector.key(), boltScheduler );\n+                                                } );\n     }\n \n     @Override\n     public void stop()\n     {\n-        boltSchedulers.values().forEach( this::stopScheduler );\n+        boltSchedulers.values().forEach( this:: stopScheduler );\n         boltSchedulers.clear();\n-\n         forkJoinThreadPool.shutdown();\n         forkJoinThreadPool = null;\n     }\n@@ -94,12 +88,9 @@ public class ExecutorBoltSchedulerProvider extends LifecycleAdapter implements B\n         BoltScheduler boltScheduler = boltSchedulers.get( channel.connector() );\n         if ( boltScheduler == null )\n         {\n-            throw new IllegalArgumentException(\n-                    String.format( \"Provided channel instance [local: %s, remote: %s] is not bound to any known bolt listen addresses.\",\n-                            channel.serverAddress(), channel.clientAddress() ) );\n+            throw new IllegalArgumentException( String.format( \"Provided channel instance [local: %s, remote: %s] is not bound to any known bolt listen addresses.\", channel.serverAddress(), channel.clientAddress() ) );\n         }\n \n         return boltScheduler;\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}