{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2548",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "53",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2548/SchemaIndexDescriptor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2548/SchemaIndexDescriptor.java\nindex 731606e830c..255d0b108fe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2548/SchemaIndexDescriptor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2548/SchemaIndexDescriptor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.schema.index;\n \n import java.util.Iterator;\n@@ -38,125 +39,126 @@ import static org.neo4j.kernel.api.schema.index.SchemaIndexDescriptor.Filter.UNI\n  */\n public class SchemaIndexDescriptor implements SchemaDescriptorSupplier\n {\n-    public enum Type\n-    {\n-        GENERAL,\n-        UNIQUE\n-    }\n-\n-    public enum Filter implements Predicate<SchemaIndexDescriptor>\n-    {\n-        GENERAL\n-                {\n-                    @Override\n-                    public boolean test( SchemaIndexDescriptor index )\n-                    {\n-                        return index.type == Type.GENERAL;\n-                    }\n-                },\n-        UNIQUE\n-                {\n-                    @Override\n-                    public boolean test( SchemaIndexDescriptor index )\n-                    {\n-                        return index.type == Type.UNIQUE;\n-                    }\n-                },\n-        ANY\n-                {\n-                    @Override\n-                    public boolean test( SchemaIndexDescriptor index )\n-                    {\n-                        return true;\n-                    }\n-                }\n-    }\n-\n-    public interface Supplier\n-    {\n-        SchemaIndexDescriptor getIndexDescriptor();\n-    }\n-\n-    private final SchemaDescriptor schema;\n-    private final SchemaIndexDescriptor.Type type;\n-\n-    public SchemaIndexDescriptor( SchemaDescriptor schema, Type type )\n-    {\n-        this.schema = schema;\n-        this.type = type;\n-    }\n-\n-    // METHODS\n-\n-    public Type type()\n-    {\n-        return type;\n-    }\n-\n-    /**\n-     * This method currently returns the specific LabelSchemaDescriptor, as we do not support indexes on relations.\n-     * When we do, consider down-typing this to a SchemaDescriptor.\n-     */\n-    @Override\n-    public SchemaDescriptor schema()\n-    {\n-        return schema;\n-    }\n-\n-    /**\n-     * @param tokenNameLookup used for looking up names for token ids.\n-     * @return a user friendly description of what this index indexes.\n-     */\n-    public String userDescription( TokenNameLookup tokenNameLookup )\n-    {\n-        return SchemaUtil.withType( type.name(), schema.userDescription( tokenNameLookup ) );\n-    }\n-\n-    /**\n-     * Checks whether an index descriptor Supplier supplies this index descriptor.\n-     * @param supplier supplier to get a index descriptor from\n-     * @return true if the supplied index descriptor equals this index descriptor\n-     */\n-    public boolean isSame( Supplier supplier )\n-    {\n-        return this.equals( supplier.getIndexDescriptor() );\n-    }\n-\n-    @Override\n-    public boolean equals( Object o )\n-    {\n-        if ( o instanceof SchemaIndexDescriptor )\n+  public enum Type\n+  {\n+    GENERAL,\n+    UNIQUE\n+  }\n+\n+  public enum Filter implements Predicate<SchemaIndexDescriptor>\n+  {\n+    GENERAL\n+        {\n+          @Override\n+          public boolean test(SchemaIndexDescriptor index)\n+          {\n+            return index.type == Type.GENERAL;\n+          }\n+        },\n+    UNIQUE\n         {\n-            SchemaIndexDescriptor that = (SchemaIndexDescriptor)o;\n-            return this.type() == that.type() && this.schema().equals( that.schema() );\n+          @Override\n+          public boolean test(SchemaIndexDescriptor index)\n+          {\n+            return index.type == Type.UNIQUE;\n+          }\n+        },\n+    ANY\n+        {\n+          @Override\n+          public boolean test(SchemaIndexDescriptor index)\n+          {\n+            return true;\n+          }\n         }\n-        return false;\n-    }\n-\n-    @Override\n-    public int hashCode()\n-    {\n-        return type.hashCode() & schema.hashCode();\n-    }\n-\n-    @Override\n-    public String toString()\n-    {\n-        return userDescription( SchemaUtil.idTokenNameLookup );\n-    }\n-\n-    /**\n-     * Sorts indexes by type, returning first GENERAL indexes, followed by UNIQUE. Implementation is not suitable in\n-     * hot path.\n-     *\n-     * @param indexes Indexes to sort\n-     * @return sorted indexes\n-     */\n-    public static Iterator<SchemaIndexDescriptor> sortByType( Iterator<SchemaIndexDescriptor> indexes )\n+  }\n+\n+  public interface Supplier\n+  {\n+    SchemaIndexDescriptor getIndexDescriptor();\n+  }\n+\n+  private final SchemaDescriptor schema;\n+  private final SchemaIndexDescriptor.Type type;\n+\n+  public SchemaIndexDescriptor(SchemaDescriptor schema, Type type)\n+  {\n+    this.schema = schema;\n+    this.type = type;\n+  }\n+\n+  // METHODS\n+\n+  public Type type()\n+  {\n+    return type;\n+  }\n+\n+  /**\n+   * This method currently returns the specific LabelSchemaDescriptor, as we do not support indexes on relations.\n+   * When we do, consider down-typing this to a SchemaDescriptor.\n+   */\n+  @Override\n+  public SchemaDescriptor schema()\n+  {\n+    return schema;\n+  }\n+\n+  /**\n+   * @param tokenNameLookup used for looking up names for token ids.\n+   * @return a user friendly description of what this index indexes.\n+   */\n+  public String userDescription(TokenNameLookup tokenNameLookup)\n+  {\n+    return SchemaUtil.withType(type.name(), schema.userDescription(tokenNameLookup));\n+  }\n+\n+  /**\n+   * Checks whether an index descriptor Supplier supplies this index descriptor.\n+   *\n+   * @param supplier supplier to get a index descriptor from\n+   * @return true if the supplied index descriptor equals this index descriptor\n+   */\n+  public boolean isSame(Supplier supplier)\n+  {\n+    return this.equals(supplier.getIndexDescriptor());\n+  }\n+\n+  @Override\n+  public boolean equals(Object o)\n+  {\n+    if (o instanceof SchemaIndexDescriptor)\n     {\n-        List<SchemaIndexDescriptor> materialized = Iterators.asList( indexes );\n-        return Iterators.concat(\n-                Iterators.filter( GENERAL, materialized.iterator() ),\n-                Iterators.filter( UNIQUE, materialized.iterator() ) );\n+      SchemaIndexDescriptor that = (SchemaIndexDescriptor) o;\n+      return this.type() == that.type() && this.schema().equals(that.schema());\n     }\n+    return false;\n+  }\n+\n+  @Override\n+  public int hashCode()\n+  {\n+    return type.hashCode() & schema.hashCode();\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return userDescription(SchemaUtil.idTokenNameLookup);\n+  }\n+\n+  /**\n+   * Sorts indexes by type, returning first GENERAL indexes, followed by UNIQUE. Implementation is not suitable in\n+   * hot path.\n+   *\n+   * @param indexes Indexes to sort\n+   * @return sorted indexes\n+   */\n+  public static Iterator<SchemaIndexDescriptor> sortByType(Iterator<SchemaIndexDescriptor> indexes)\n+  {\n+    List<SchemaIndexDescriptor> materialized = Iterators.asList(indexes);\n+    return Iterators.concat(\n+        Iterators.filter(GENERAL, materialized.iterator()),\n+        Iterators.filter(UNIQUE, materialized.iterator()));\n+  }\n }\n",
            "diff_size": 192
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2548/SchemaIndexDescriptor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2548/SchemaIndexDescriptor.java\nindex 731606e830c..d6f8573732c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2548/SchemaIndexDescriptor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2548/SchemaIndexDescriptor.java\n@@ -47,23 +47,21 @@ public class SchemaIndexDescriptor implements SchemaDescriptorSupplier\n     public enum Filter implements Predicate<SchemaIndexDescriptor>\n     {\n         GENERAL\n-                {\n+{\n                     @Override\n                     public boolean test( SchemaIndexDescriptor index )\n                     {\n                         return index.type == Type.GENERAL;\n                     }\n-                },\n-        UNIQUE\n-                {\n+                }, UNIQUE\n+{\n                     @Override\n                     public boolean test( SchemaIndexDescriptor index )\n                     {\n                         return index.type == Type.UNIQUE;\n                     }\n-                },\n-        ANY\n-                {\n+                }, ANY\n+{\n                     @Override\n                     public boolean test( SchemaIndexDescriptor index )\n                     {\n@@ -155,8 +153,6 @@ public class SchemaIndexDescriptor implements SchemaDescriptorSupplier\n     public static Iterator<SchemaIndexDescriptor> sortByType( Iterator<SchemaIndexDescriptor> indexes )\n     {\n         List<SchemaIndexDescriptor> materialized = Iterators.asList( indexes );\n-        return Iterators.concat(\n-                Iterators.filter( GENERAL, materialized.iterator() ),\n-                Iterators.filter( UNIQUE, materialized.iterator() ) );\n+        return Iterators.concat( Iterators.filter( GENERAL, materialized.iterator() ), Iterators.filter( UNIQUE, materialized.iterator() ) );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}