{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2524",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "34",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "34",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "36",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "36",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "55",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2524/TokenRecordCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2524/TokenRecordCheck.java\nindex ba2d0295ad3..4c7aed01562 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2524/TokenRecordCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2524/TokenRecordCheck.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency.checking;\n \n import org.neo4j.consistency.report.ConsistencyReport;\n@@ -27,41 +28,40 @@ import org.neo4j.kernel.impl.store.record.Record;\n import org.neo4j.kernel.impl.store.record.TokenRecord;\n \n abstract class TokenRecordCheck<RECORD extends TokenRecord, REPORT extends ConsistencyReport>\n-        implements RecordCheck<RECORD, REPORT>, ComparativeRecordChecker<RECORD, DynamicRecord, REPORT>\n+    implements RecordCheck<RECORD, REPORT>, ComparativeRecordChecker<RECORD, DynamicRecord, REPORT>\n {\n-    @Override\n-    public void check( RECORD record, CheckerEngine<RECORD, REPORT> engine, RecordAccess records )\n+  @Override\n+  public void check(RECORD record, CheckerEngine<RECORD, REPORT> engine, RecordAccess records)\n+  {\n+    if (!record.inUse())\n+    {\n+      return;\n+    }\n+    if (!Record.NO_NEXT_BLOCK.is(record.getNameId()))\n     {\n-        if ( !record.inUse() )\n-        {\n-            return;\n-        }\n-        if ( !Record.NO_NEXT_BLOCK.is( record.getNameId() ) )\n-        {\n-            engine.comparativeCheck( name( records, record.getNameId() ), this );\n-        }\n+      engine.comparativeCheck(name(records, record.getNameId()), this);\n     }\n+  }\n \n-    @Override\n-    public void checkReference( RECORD record, DynamicRecord name, CheckerEngine<RECORD, REPORT> engine,\n-                                RecordAccess records )\n+  @Override\n+  public void checkReference(RECORD record, DynamicRecord name, CheckerEngine<RECORD, REPORT> engine,\n+                             RecordAccess records)\n+  {\n+    if (!name.inUse())\n+    {\n+      nameNotInUse(engine.report(), name);\n+    } else\n     {\n-        if ( !name.inUse() )\n-        {\n-            nameNotInUse( engine.report(), name );\n-        }\n-        else\n-        {\n-            if ( name.getLength() <= 0 )\n-            {\n-                emptyName( engine.report(), name );\n-            }\n-        }\n+      if (name.getLength() <= 0)\n+      {\n+        emptyName(engine.report(), name);\n+      }\n     }\n+  }\n \n-    abstract RecordReference<DynamicRecord> name( RecordAccess records, int id );\n+  abstract RecordReference<DynamicRecord> name(RecordAccess records, int id);\n \n-    abstract void nameNotInUse( REPORT report, DynamicRecord name );\n+  abstract void nameNotInUse(REPORT report, DynamicRecord name);\n \n-    abstract void emptyName( REPORT report, DynamicRecord name );\n+  abstract void emptyName(REPORT report, DynamicRecord name);\n }\n",
            "diff_size": 42
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 189).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2524/TokenRecordCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2524/TokenRecordCheck.java\nindex ba2d0295ad3..4122b51f460 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2524/TokenRecordCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2524/TokenRecordCheck.java\n@@ -26,26 +26,25 @@ import org.neo4j.kernel.impl.store.record.DynamicRecord;\n import org.neo4j.kernel.impl.store.record.Record;\n import org.neo4j.kernel.impl.store.record.TokenRecord;\n \n-abstract class TokenRecordCheck<RECORD extends TokenRecord, REPORT extends ConsistencyReport>\n-        implements RecordCheck<RECORD, REPORT>, ComparativeRecordChecker<RECORD, DynamicRecord, REPORT>\n+abstract class TokenRecordCheck<RECORD extends TokenRecord, REPORT extends ConsistencyReport> implements RecordCheck<RECORD, REPORT>, ComparativeRecordChecker<RECORD, DynamicRecord, REPORT>\n {\n     @Override\n-    public void check( RECORD record, CheckerEngine<RECORD, REPORT> engine, RecordAccess records )\n+    public void check( RECORD record, CheckerEngine<RECORD,REPORT> engine, RecordAccess records )\n     {\n         if ( !record.inUse() )\n         {\n             return;\n         }\n-        if ( !Record.NO_NEXT_BLOCK.is( record.getNameId() ) )\n+\n+if ( !Record.NO_NEXT_BLOCK.is( record.getNameId() ) )\n         {\n             engine.comparativeCheck( name( records, record.getNameId() ), this );\n         }\n     }\n \n     @Override\n-    public void checkReference( RECORD record, DynamicRecord name, CheckerEngine<RECORD, REPORT> engine,\n-                                RecordAccess records )\n-    {\n+    public void checkReference( RECORD record, DynamicRecord name, CheckerEngine<RECORD,REPORT> engine, RecordAccess records )\n+{\n         if ( !name.inUse() )\n         {\n             nameNotInUse( engine.report(), name );\n@@ -64,4 +63,4 @@ abstract class TokenRecordCheck<RECORD extends TokenRecord, REPORT extends Consi\n     abstract void nameNotInUse( REPORT report, DynamicRecord name );\n \n     abstract void emptyName( REPORT report, DynamicRecord name );\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}