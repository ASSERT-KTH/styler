{
    "project_name": "neo4j-neo4j",
    "error_id": "2338",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "64",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "70",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "77",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "94",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "81",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2338/CheckPointScheduler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2338/CheckPointScheduler.java\nindex dd17d620b97..b853de19ce4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2338/CheckPointScheduler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2338/CheckPointScheduler.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.log.checkpoint;\n \n import java.util.Arrays;\n@@ -42,7 +43,7 @@ public class CheckPointScheduler extends LifecycleAdapter\n      * check point failures more seriously, with a panic.\n      */\n     static final int MAX_CONSECUTIVE_FAILURES_TOLERANCE =\n-            FeatureToggles.getInteger( CheckPointScheduler.class, \"failure_tolerance\", 10 );\n+      FeatureToggles.getInteger(CheckPointScheduler.class, \"failure_tolerance\", 10);\n \n     private final CheckPointer checkPointer;\n     private final IOLimiter ioLimiter;\n@@ -60,39 +61,37 @@ public class CheckPointScheduler extends LifecycleAdapter\n             try\n             {\n                 checkPointing = true;\n-                if ( stopped )\n+                if (stopped)\n                 {\n                     return;\n                 }\n-                checkPointer.checkPointIfNeeded( new SimpleTriggerInfo( \"Scheduled checkpoint\" ) );\n+                checkPointer.checkPointIfNeeded(new SimpleTriggerInfo(\"Scheduled checkpoint\"));\n \n                 // There were previous unsuccessful attempts, but this attempt was a success\n                 // so let's clear those previous errors.\n-                if ( consecutiveFailures > 0 )\n+                if (consecutiveFailures > 0)\n                 {\n-                    Arrays.fill( failures, null );\n+                    Arrays.fill(failures, null);\n                     consecutiveFailures = 0;\n                 }\n-            }\n-            catch ( Throwable t )\n+            } catch (Throwable t)\n             {\n                 failures[consecutiveFailures++] = t;\n \n                 // We're counting check pointer to log about the failure itself\n-                if ( consecutiveFailures >= MAX_CONSECUTIVE_FAILURES_TOLERANCE )\n+                if (consecutiveFailures >= MAX_CONSECUTIVE_FAILURES_TOLERANCE)\n                 {\n                     UnderlyingStorageException combinedFailure = constructCombinedFailure();\n-                    health.panic( combinedFailure );\n+                    health.panic(combinedFailure);\n                     throw combinedFailure;\n                 }\n-            }\n-            finally\n+            } finally\n             {\n                 checkPointing = false;\n             }\n \n             // reschedule only if it is not stopped\n-            if ( !stopped )\n+            if (!stopped)\n             {\n                 schedule();\n             }\n@@ -100,10 +99,10 @@ public class CheckPointScheduler extends LifecycleAdapter\n \n         private UnderlyingStorageException constructCombinedFailure()\n         {\n-            UnderlyingStorageException combined = new UnderlyingStorageException( \"Error performing check point\" );\n-            for ( int i = 0; i < consecutiveFailures; i++ )\n+            UnderlyingStorageException combined = new UnderlyingStorageException(\"Error performing check point\");\n+            for (int i = 0; i < consecutiveFailures; i++)\n             {\n-                combined.addSuppressed( failures[i] );\n+                combined.addSuppressed(failures[i]);\n             }\n             return combined;\n         }\n@@ -114,8 +113,8 @@ public class CheckPointScheduler extends LifecycleAdapter\n     private volatile boolean checkPointing;\n     private final BooleanSupplier checkPointingCondition = () -> !checkPointing;\n \n-    public CheckPointScheduler( CheckPointer checkPointer, IOLimiter ioLimiter, JobScheduler scheduler, long recurringPeriodMillis,\n-            Health health, String databaseName )\n+    public CheckPointScheduler(CheckPointer checkPointer, IOLimiter ioLimiter, JobScheduler scheduler, long recurringPeriodMillis,\n+                               Health health, String databaseName)\n     {\n         this.checkPointer = checkPointer;\n         this.ioLimiter = ioLimiter;\n@@ -135,7 +134,7 @@ public class CheckPointScheduler extends LifecycleAdapter\n     public void stop()\n     {\n         stopped = true;\n-        if ( handle != null )\n+        if (handle != null)\n         {\n             handle.cancel();\n         }\n@@ -147,9 +146,8 @@ public class CheckPointScheduler extends LifecycleAdapter\n         ioLimiter.disableLimit();\n         try\n         {\n-            Predicates.awaitForever( checkPointingCondition, 100, MILLISECONDS );\n-        }\n-        finally\n+            Predicates.awaitForever(checkPointingCondition, 100, MILLISECONDS);\n+        } finally\n         {\n             ioLimiter.enableLimit();\n         }\n@@ -157,6 +155,6 @@ public class CheckPointScheduler extends LifecycleAdapter\n \n     private void schedule()\n     {\n-        handle = scheduler.schedule( Group.CHECKPOINT, systemJob( databaseName, \"Scheduled checkpoint\" ), job, recurringPeriodMillis, MILLISECONDS );\n+        handle = scheduler.schedule(Group.CHECKPOINT, systemJob(databaseName, \"Scheduled checkpoint\"), job, recurringPeriodMillis, MILLISECONDS);\n     }\n }\n",
            "diff_size": 23
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}