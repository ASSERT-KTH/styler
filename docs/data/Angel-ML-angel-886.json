{
    "project_name": "Angel-ML-angel",
    "error_id": "886",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/886/ParameterServerJVM.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/886/ParameterServerJVM.java\nindex 173c03d2db9..7615ca1edfd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/886/ParameterServerJVM.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/886/ParameterServerJVM.java\n@@ -60,7 +60,7 @@ public class ParameterServerJVM {\n    * Set environment variables of ps attempt process\r\n    *\r\n    * @param environment environment variables of ps attempt process\r\n-   * @param conf application configuration\r\n+   * @param conf        application configuration\r\n    */\r\n   public static void setVMEnv(Map<String, String> environment, Configuration conf) {\r\n     // Add the env variables passed by the user\r\n@@ -94,7 +94,7 @@ public class ParameterServerJVM {\n   }\r\n \r\n   private static String getChildJavaOpts(Configuration jobConf, ApplicationId appid,\r\n-      PSAttemptId psAttemptId) {\r\n+                                         PSAttemptId psAttemptId) {\r\n     String userOpts = null;\r\n     userOpts = jobConf.get(AngelConf.ANGEL_PS_JAVA_OPTS);\r\n     if (userOpts == null) {\r\n@@ -105,7 +105,7 @@ public class ParameterServerJVM {\n   }\r\n \r\n   private static String generateDefaultJVMParameters(Configuration conf, ApplicationId appid,\r\n-      PSAttemptId psAttemptId) {\r\n+                                                     PSAttemptId psAttemptId) {\r\n     int psMemSizeInMB =\r\n         conf.getInt(AngelConf.ANGEL_PS_MEMORY_GB, AngelConf.DEFAULT_ANGEL_PS_MEMORY_GB) * 1024;\r\n \r\n@@ -220,13 +220,13 @@ public class ParameterServerJVM {\n   /**\r\n    * Generate ps attempt jvm command\r\n    *\r\n-   * @param conf application configuration\r\n-   * @param appid application id\r\n+   * @param conf        application configuration\r\n+   * @param appid       application id\r\n    * @param psAttemptId ps attempt id\r\n    * @return ps attempt jvm command\r\n    */\r\n   public static List<String> getVMCommand(Configuration conf, ApplicationId appid,\r\n-      PSAttemptId psAttemptId) {\r\n+                                          PSAttemptId psAttemptId) {\r\n \r\n     Vector<String> vargs = new Vector<String>(8);\r\n     vargs.add(Environment.JAVA_HOME.$() + \"/bin/java\");\r\n",
            "diff_size": 6
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "115",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "121",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "122",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 123.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "123",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "139",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "231",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 232.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/886/ParameterServerJVM.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/886/ParameterServerJVM.java\nindex 173c03d2db9..20d191986b4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/886/ParameterServerJVM.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/886/ParameterServerJVM.java\n@@ -13,9 +13,8 @@\n  * or implied. See the License for the specific language governing permissions and limitations under\r\n  * the License.\r\n  *\r\n- */\r\n-\r\n-\r\n+ */\n+\n package com.tencent.angel.master.yarn.util;\r\n \r\n import com.tencent.angel.conf.AngelConf;\r\n@@ -47,9 +46,8 @@ public class ParameterServerJVM {\n     return ApplicationConstants.LOG_DIR_EXPANSION_VAR + Path.SEPARATOR + filter.toString();\r\n   }\r\n \r\n-  private static String getChildEnv(Configuration jobConf) {\r\n-\r\n-    return jobConf.get(AngelConf.ANGEL_PS_ENV, AngelConf.DEFAULT_ANGEL_PS_ENV);\r\n+  private static String getChildEnv(Configuration jobConf) {\n+  return jobConf.get(AngelConf.ANGEL_PS_ENV, AngelConf.DEFAULT_ANGEL_PS_ENV);\r\n   }\r\n \r\n   private static String getChildLogLevel(Configuration conf) {\r\n@@ -105,8 +103,8 @@ public class ParameterServerJVM {\n   }\r\n \r\n   private static String generateDefaultJVMParameters(Configuration conf, ApplicationId appid,\r\n-      PSAttemptId psAttemptId) {\r\n-    int psMemSizeInMB =\r\n+      PSAttemptId psAttemptId) {\n+  int psMemSizeInMB =\r\n         conf.getInt(AngelConf.ANGEL_PS_MEMORY_GB, AngelConf.DEFAULT_ANGEL_PS_MEMORY_GB) * 1024;\r\n \r\n     if (psMemSizeInMB < 2048) {\r\n@@ -114,23 +112,15 @@ public class ParameterServerJVM {\n     }\r\n \r\n     // General params\r\n-    boolean isUseDirect = conf\r\n-        .getBoolean(AngelConf.ANGEL_NETTY_MATRIXTRANSFER_SERVER_USEDIRECTBUFFER,\r\n-            AngelConf.DEFAULT_ANGEL_NETTY_MATRIXTRANSFER_SERVER_USEDIRECTBUFFER);\r\n-\r\n-    float directFatorUseDirectBuff = conf\r\n-        .getFloat(AngelConf.ANGEL_PS_JVM_DIRECT_FACTOR_USE_DIRECT_BUFF,\r\n-            AngelConf.DEFAULT_ANGEL_PS_JVM_DIRECT_FACTOR_USE_DIRECT_BUFF);\r\n-\r\n-    float directFatorUseHeapBuff = conf.getFloat(AngelConf.ANGEL_PS_JVM_DIRECT_FACTOR_USE_HEAP_BUFF,\r\n-        AngelConf.DEFAULT_ANGEL_PS_JVM_DIRECT_FACTOR_USE_HEAP_BUFF);\r\n-\r\n-    float youngFator = conf\r\n-        .getFloat(AngelConf.ANGEL_PS_JVM_YOUNG_FACTOR, AngelConf.DEFAULT_ANGEL_PS_JVM_YOUNG_FACTOR);\r\n-\r\n-    // G1 params\r\n-    boolean useG1 = conf\r\n-        .getBoolean(AngelConf.ANGEL_PS_JVM_USE_G1, AngelConf.DEFAULT_ANGEL_PS_JVM_USE_G1);\r\n+    boolean isUseDirect = conf.getBoolean(AngelConf.ANGEL_NETTY_MATRIXTRANSFER_SERVER_USEDIRECTBUFFER,\r\n+            AngelConf.DEFAULT_ANGEL_NETTY_MATRIXTRANSFER_SERVER_USEDIRECTBUFFER);\n+float directFatorUseDirectBuff = conf.getFloat(AngelConf.ANGEL_PS_JVM_DIRECT_FACTOR_USE_DIRECT_BUFF,\r\n+            AngelConf.DEFAULT_ANGEL_PS_JVM_DIRECT_FACTOR_USE_DIRECT_BUFF);\n+float directFatorUseHeapBuff = conf.getFloat(AngelConf.ANGEL_PS_JVM_DIRECT_FACTOR_USE_HEAP_BUFF,\r\n+        AngelConf.DEFAULT_ANGEL_PS_JVM_DIRECT_FACTOR_USE_HEAP_BUFF);\n+float youngFator = conf.getFloat(AngelConf.ANGEL_PS_JVM_YOUNG_FACTOR, AngelConf.DEFAULT_ANGEL_PS_JVM_YOUNG_FACTOR);\n+// G1 params\r\n+    boolean useG1 = conf.getBoolean(AngelConf.ANGEL_PS_JVM_USE_G1, AngelConf.DEFAULT_ANGEL_PS_JVM_USE_G1);\r\n \r\n     int maxPauseTimeTs = conf.getInt(AngelConf.ANGEL_PS_JVM_G1_MAXPAUSETIME_MS,\r\n         AngelConf.DEFAULT_ANGEL_PS_JVM_G1_MAXPAUSETIME_MS);\r\n@@ -146,8 +136,7 @@ public class ParameterServerJVM {\n \r\n     int ihop = conf.getInt(AngelConf.ANGEL_PS_JVM_G1_IHOP, AngelConf.DEFAULT_ANGEL_PS_JVM_G1_IHOP);\r\n \r\n-    int workerNum = conf\r\n-        .getInt(AngelConf.ANGEL_PS_JVM_G1_WORKER_NUM, AngelConf.DEFAULT_ANGEL_PS_JVM_G1_WORKER_NUM);\r\n+    int workerNum = conf.getInt(AngelConf.ANGEL_PS_JVM_G1_WORKER_NUM, AngelConf.DEFAULT_ANGEL_PS_JVM_G1_WORKER_NUM);\r\n \r\n     int concWorkerNum = conf.getInt(AngelConf.ANGEL_PS_JVM_G1_CONC_WORKER_NUM,\r\n         AngelConf.DEFAULT_ANGEL_PS_JVM_G1_CONC_WORKER_NUM);\r\n@@ -159,10 +148,8 @@ public class ParameterServerJVM {\n         AngelConf.DEFAULT_ANGEL_PS_JVM_G1_MIXGC_LIVE_THRESHOLD_PERCENT);\r\n \r\n     int mixGcTargetCount = conf.getInt(AngelConf.ANGEL_PS_JVM_G1_MIXGC_TARGET_COUNT,\r\n-        AngelConf.DEFAULT_ANGEL_PS_JVM_G1_MIXGC_TARGET_COUNT);\r\n-\r\n-\r\n-    int useMax = psMemSizeInMB - 512;\r\n+        AngelConf.DEFAULT_ANGEL_PS_JVM_G1_MIXGC_TARGET_COUNT);\n+int useMax = psMemSizeInMB - 512;\r\n     int directRegionSize = 0;\r\n     if (isUseDirect) {\r\n       directRegionSize = (int) (useMax * directFatorUseDirectBuff);\r\n@@ -195,8 +182,8 @@ public class ParameterServerJVM {\n           .append(\" -XX:G1ReservePercent=\").append(reservePercent)\r\n           .append(\" -verbose:gc\")\r\n           .append(\" -XX:+PrintGCDateStamps\").append(\" -XX:+PrintGCDetails\")\r\n-          .append(\" -Xloggc:<LOG_DIR>/gc.log\").toString();\r\n-    } else {\r\n+          .append(\" -Xloggc:<LOG_DIR>/gc.log\").toString();\n+  } else {\r\n       ret = new StringBuilder().append(\" -Xmx\").append(heapMax).append(\"M\").append(\" -Xmn\")\r\n           .append(youngRegionSize).append(\"M\").append(\" -XX:MaxDirectMemorySize=\")\r\n           .append(directRegionSize).append(\"M\").append(\" -XX:SurvivorRatio=\").append(survivorRatio)\r\n@@ -226,9 +213,8 @@ public class ParameterServerJVM {\n    * @return ps attempt jvm command\r\n    */\r\n   public static List<String> getVMCommand(Configuration conf, ApplicationId appid,\r\n-      PSAttemptId psAttemptId) {\r\n-\r\n-    Vector<String> vargs = new Vector<String>(8);\r\n+      PSAttemptId psAttemptId) {\n+  Vector<String> vargs = new Vector<String>(8);\r\n     vargs.add(Environment.JAVA_HOME.$() + \"/bin/java\");\r\n \r\n     String javaOpts = getChildJavaOpts(conf, appid, psAttemptId);\r\n@@ -241,7 +227,8 @@ public class ParameterServerJVM {\n     vargs.add(\"-Djava.io.tmpdir=\" + childTmpDir);\r\n \r\n     // Setup the log4j prop\r\n-    long logSize = 0;// TaskLog.getTaskLogLength(conf);\r\n+    long logSize = 0;\n+// TaskLog.getTaskLogLength(conf);\r\n     setupLog4jProperties(conf, vargs, logSize);\r\n \r\n     // Add main class and its arguments\r\n@@ -265,4 +252,4 @@ public class ParameterServerJVM {\n \r\n     return vargsFinal;\r\n   }\r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 39
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "107",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "114",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 172).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "115",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "116",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "117",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 119).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "120",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "121",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "122",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "123",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "124",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "126",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "127",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "128",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "129",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "130",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "144",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 999).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "146",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 715).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/886/ParameterServerJVM.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/886/ParameterServerJVM.java\nindex 173c03d2db9..2ab8f2ac6ba 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/886/ParameterServerJVM.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/886/ParameterServerJVM.java\n@@ -16,44 +16,43 @@\n  */\r\n \r\n \r\n-package com.tencent.angel.master.yarn.util;\r\n-\r\n-import com.tencent.angel.conf.AngelConf;\r\n-import com.tencent.angel.ps.PSAttemptId;\r\n-import java.util.Iterator;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import java.util.Vector;\r\n-import org.apache.commons.logging.Log;\r\n-import org.apache.commons.logging.LogFactory;\r\n-import org.apache.hadoop.conf.Configuration;\r\n-import org.apache.hadoop.fs.Path;\r\n-import org.apache.hadoop.mapred.TaskLog;\r\n-import org.apache.hadoop.mapred.TaskLog.LogName;\r\n-import org.apache.hadoop.yarn.api.ApplicationConstants;\r\n-import org.apache.hadoop.yarn.api.ApplicationConstants.Environment;\r\n-import org.apache.hadoop.yarn.api.records.ApplicationId;\r\n-import org.apache.hadoop.yarn.conf.YarnConfiguration;\r\n+package com.tencent.angel.master.yarn.util;\n+\n+import com.tencent.angel.conf.AngelConf;\n+import com.tencent.angel.ps.PSAttemptId;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Vector;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.mapred.TaskLog;\n+import org.apache.hadoop.mapred.TaskLog.LogName;\n+import org.apache.hadoop.yarn.api.ApplicationConstants;\n+import org.apache.hadoop.yarn.api.ApplicationConstants.Environment;\n+import org.apache.hadoop.yarn.api.records.ApplicationId;\n+import org.apache.hadoop.yarn.conf.YarnConfiguration;\n import org.apache.hadoop.yarn.util.Apps;\r\n \r\n /**\r\n  * Ps JVM command utils\r\n- */\r\n-public class ParameterServerJVM {\r\n-\r\n-  private static final Log LOG = LogFactory.getLog(ParameterServerJVM.class);\r\n-\r\n-  private static String getTaskLogFile(LogName filter) {\r\n-    return ApplicationConstants.LOG_DIR_EXPANSION_VAR + Path.SEPARATOR + filter.toString();\r\n-  }\r\n-\r\n-  private static String getChildEnv(Configuration jobConf) {\r\n-\r\n-    return jobConf.get(AngelConf.ANGEL_PS_ENV, AngelConf.DEFAULT_ANGEL_PS_ENV);\r\n-  }\r\n-\r\n-  private static String getChildLogLevel(Configuration conf) {\r\n-    return conf.get(AngelConf.ANGEL_PS_LOG_LEVEL, AngelConf.DEFAULT_ANGEL_PS_LOG_LEVEL);\r\n+ */\n+\n+public class ParameterServerJVM {\n+\n+  private static final Log LOG = LogFactory.getLog(ParameterServerJVM.class);\n+  private static String getTaskLogFile(LogName filter) {\n+    return ApplicationConstants.LOG_DIR_EXPANSION_VAR + Path.SEPARATOR + filter.toString();\n+  }\n+\n+  private static String getChildEnv(Configuration jobConf) {\n+    return jobConf.get(AngelConf.ANGEL_PS_ENV, AngelConf.DEFAULT_ANGEL_PS_ENV);\n+  }\n+\n+  private static String getChildLogLevel(Configuration conf) {\n+    return conf.get(AngelConf.ANGEL_PS_LOG_LEVEL, AngelConf.DEFAULT_ANGEL_PS_LOG_LEVEL);\n   }\r\n \r\n   /**\r\n@@ -61,160 +60,98 @@ public class ParameterServerJVM {\n    *\r\n    * @param environment environment variables of ps attempt process\r\n    * @param conf application configuration\r\n-   */\r\n+   */\n+\n   public static void setVMEnv(Map<String, String> environment, Configuration conf) {\r\n-    // Add the env variables passed by the user\r\n-    String setEnv = getChildEnv(conf);\r\n-    try {\r\n-      Apps.setEnvFromInputString(environment, setEnv);\r\n-    } catch (Exception x) {\r\n-      LOG.error(\"set ps env faile.\", x);\r\n-    }\r\n-\r\n-    // Set logging level in the environment.\r\n-    environment.put(\"HADOOP_ROOT_LOGGER\", getChildLogLevel(conf) + \",CLA\");\r\n-\r\n-    String hadoopClientOpts = System.getenv(\"HADOOP_CLIENT_OPTS\");\r\n-    if (hadoopClientOpts == null) {\r\n-      hadoopClientOpts = \"\";\r\n-    } else {\r\n-      hadoopClientOpts = hadoopClientOpts + \" \";\r\n-    }\r\n-\r\n-    long logSize = 0;\r\n-    Vector<String> logProps = new Vector<String>(4);\r\n-    setupLog4jProperties(conf, logProps, logSize);\r\n-    Iterator<String> it = logProps.iterator();\r\n-    StringBuilder buffer = new StringBuilder();\r\n-    while (it.hasNext()) {\r\n-      buffer.append(\" \").append(it.next());\r\n+    // Add the env variables passed by the user\n+    String setEnv = getChildEnv(conf);\n+    try {\n+      Apps.setEnvFromInputString(environment, setEnv);\n+    } catch (Exception x) {\n+      LOG.error(\"set ps env faile.\", x);\n     }\r\n-    hadoopClientOpts = hadoopClientOpts + buffer.toString();\r\n-    environment.put(\"HADOOP_CLIENT_OPTS\", hadoopClientOpts);\r\n-  }\r\n \r\n-  private static String getChildJavaOpts(Configuration jobConf, ApplicationId appid,\r\n-      PSAttemptId psAttemptId) {\r\n-    String userOpts = null;\r\n-    userOpts = jobConf.get(AngelConf.ANGEL_PS_JAVA_OPTS);\r\n-    if (userOpts == null) {\r\n-      userOpts = generateDefaultJVMParameters(jobConf, appid, psAttemptId);\r\n+    // Set logging level in the environment.\n+    environment.put(\"HADOOP_ROOT_LOGGER\", getChildLogLevel(conf) + \",CLA\");\n+    String hadoopClientOpts = System.getenv(\"HADOOP_CLIENT_OPTS\");\n+    if (hadoopClientOpts == null) {\n+      hadoopClientOpts = \"\";\n+    } else {\n+      hadoopClientOpts = hadoopClientOpts + \" \";\n+    }\n+\n+    long logSize = 0;\n+    Vector<String> logProps = new Vector<String>(4);\n+    setupLog4jProperties(conf, logProps, logSize);\n+    Iterator<String> it = logProps.iterator();\n+    StringBuilder buffer = new StringBuilder();\n+    while (it.hasNext()) {\n+      buffer.append(\" \").append(it.next());\n+    }\n+    hadoopClientOpts = hadoopClientOpts + buffer.toString();\n+    environment.put(\"HADOOP_CLIENT_OPTS\", hadoopClientOpts);\n+  }\n+\n+  private static String getChildJavaOpts(\n+    Configuration jobConf, ApplicationId appid, PSAttemptId psAttemptId) {\n+    String userOpts = null;\n+    userOpts = jobConf.get(AngelConf.ANGEL_PS_JAVA_OPTS);\n+    if (userOpts == null) {\n+      userOpts = generateDefaultJVMParameters(jobConf, appid, psAttemptId);\n+    }\n+    return userOpts;\n+  }\n+\n+  private static String generateDefaultJVMParameters(\n+    Configuration conf, ApplicationId appid, PSAttemptId psAttemptId) {\n+    int psMemSizeInMB = conf.getInt(AngelConf.ANGEL_PS_MEMORY_GB, AngelConf.DEFAULT_ANGEL_PS_MEMORY_GB) * 1024;\n+    if (psMemSizeInMB < 2048) {\n+      psMemSizeInMB = 2048;\n     }\r\n \r\n-    return userOpts;\r\n-  }\r\n-\r\n-  private static String generateDefaultJVMParameters(Configuration conf, ApplicationId appid,\r\n-      PSAttemptId psAttemptId) {\r\n-    int psMemSizeInMB =\r\n-        conf.getInt(AngelConf.ANGEL_PS_MEMORY_GB, AngelConf.DEFAULT_ANGEL_PS_MEMORY_GB) * 1024;\r\n-\r\n-    if (psMemSizeInMB < 2048) {\r\n-      psMemSizeInMB = 2048;\r\n-    }\r\n-\r\n-    // General params\r\n-    boolean isUseDirect = conf\r\n-        .getBoolean(AngelConf.ANGEL_NETTY_MATRIXTRANSFER_SERVER_USEDIRECTBUFFER,\r\n-            AngelConf.DEFAULT_ANGEL_NETTY_MATRIXTRANSFER_SERVER_USEDIRECTBUFFER);\r\n-\r\n-    float directFatorUseDirectBuff = conf\r\n-        .getFloat(AngelConf.ANGEL_PS_JVM_DIRECT_FACTOR_USE_DIRECT_BUFF,\r\n-            AngelConf.DEFAULT_ANGEL_PS_JVM_DIRECT_FACTOR_USE_DIRECT_BUFF);\r\n-\r\n-    float directFatorUseHeapBuff = conf.getFloat(AngelConf.ANGEL_PS_JVM_DIRECT_FACTOR_USE_HEAP_BUFF,\r\n-        AngelConf.DEFAULT_ANGEL_PS_JVM_DIRECT_FACTOR_USE_HEAP_BUFF);\r\n-\r\n-    float youngFator = conf\r\n-        .getFloat(AngelConf.ANGEL_PS_JVM_YOUNG_FACTOR, AngelConf.DEFAULT_ANGEL_PS_JVM_YOUNG_FACTOR);\r\n-\r\n-    // G1 params\r\n-    boolean useG1 = conf\r\n-        .getBoolean(AngelConf.ANGEL_PS_JVM_USE_G1, AngelConf.DEFAULT_ANGEL_PS_JVM_USE_G1);\r\n-\r\n-    int maxPauseTimeTs = conf.getInt(AngelConf.ANGEL_PS_JVM_G1_MAXPAUSETIME_MS,\r\n-        AngelConf.DEFAULT_ANGEL_PS_JVM_G1_MAXPAUSETIME_MS);\r\n-\r\n-    int minNewRatio = conf.getInt(AngelConf.ANGEL_PS_JVM_G1_MIN_NEWRATIO,\r\n-        AngelConf.DEFAULT_ANGEL_PS_JVM_G1_MIN_NEWRATIO);\r\n-\r\n-    int maxNewRatio = conf.getInt(AngelConf.ANGEL_PS_JVM_G1_MAX_NEWRATIO,\r\n-        AngelConf.DEFAULT_ANGEL_PS_JVM_G1_MAX_NEWRATIO);\r\n-\r\n-    int regionSizeMB = conf.getInt(AngelConf.ANGEL_PS_JVM_G1_REGIONSIZE_MB,\r\n-        AngelConf.DEFAULT_ANGEL_PS_JVM_G1_REGIONSIZE_MB);\r\n-\r\n-    int ihop = conf.getInt(AngelConf.ANGEL_PS_JVM_G1_IHOP, AngelConf.DEFAULT_ANGEL_PS_JVM_G1_IHOP);\r\n-\r\n-    int workerNum = conf\r\n-        .getInt(AngelConf.ANGEL_PS_JVM_G1_WORKER_NUM, AngelConf.DEFAULT_ANGEL_PS_JVM_G1_WORKER_NUM);\r\n-\r\n-    int concWorkerNum = conf.getInt(AngelConf.ANGEL_PS_JVM_G1_CONC_WORKER_NUM,\r\n-        AngelConf.DEFAULT_ANGEL_PS_JVM_G1_CONC_WORKER_NUM);\r\n-\r\n-    int reservePercent = conf.getInt(AngelConf.ANGEL_PS_JVM_G1_RESERVE_PERCENT,\r\n-        AngelConf.DEFAULT_ANGEL_PS_JVM_G1_RESERVE_PERCENT);\r\n-\r\n-    int mixGcLiveThreshold = conf.getInt(AngelConf.ANGEL_PS_JVM_G1_MIXGC_LIVE_THRESHOLD_PERCENT,\r\n-        AngelConf.DEFAULT_ANGEL_PS_JVM_G1_MIXGC_LIVE_THRESHOLD_PERCENT);\r\n-\r\n-    int mixGcTargetCount = conf.getInt(AngelConf.ANGEL_PS_JVM_G1_MIXGC_TARGET_COUNT,\r\n-        AngelConf.DEFAULT_ANGEL_PS_JVM_G1_MIXGC_TARGET_COUNT);\r\n-\r\n-\r\n-    int useMax = psMemSizeInMB - 512;\r\n-    int directRegionSize = 0;\r\n-    if (isUseDirect) {\r\n-      directRegionSize = (int) (useMax * directFatorUseDirectBuff);\r\n-    } else {\r\n-      directRegionSize = (int) (useMax * directFatorUseHeapBuff);\r\n-    }\r\n-\r\n-    int heapMax = useMax - directRegionSize;\r\n-    int youngRegionSize = (int) (heapMax * youngFator);\r\n-    int survivorRatio = 4;\r\n-\r\n-    String ret;\r\n-    if (useG1) {\r\n-      ret = new StringBuilder().append(\" -Xmx\").append(heapMax).append(\"M\")\r\n-          .append(\" -XX:MaxDirectMemorySize=\")\r\n-          .append(directRegionSize).append(\"M\")\r\n-          .append(\" -XX:+AggressiveOpts\")\r\n-          .append(\" -XX:+UseLargePages\")\r\n-          .append(\" -XX:+UseG1GC\")\r\n-          .append(\" -XX:+UnlockExperimentalVMOptions\")\r\n-          .append(\" -XX:MaxGCPauseMillis=\").append(maxPauseTimeTs)\r\n-          .append(\" -XX:G1NewSizePercent=\").append(minNewRatio)\r\n-          .append(\" -XX:G1MaxNewSizePercent=\").append(maxNewRatio)\r\n-          .append(\" -XX:G1HeapRegionSize=\").append(regionSizeMB).append(\"m\")\r\n-          .append(\" -XX:InitiatingHeapOccupancyPercent=\").append(ihop)\r\n-          .append(\" -XX:G1MixedGCLiveThresholdPercent=\").append(mixGcLiveThreshold)\r\n-          .append(\" -XX:G1MixedGCCountTarget=\").append(mixGcTargetCount)\r\n-          .append(\" -XX:ConcGCThreads=\").append(concWorkerNum)\r\n-          .append(\" -XX:ParallelGCThreads=\").append(workerNum)\r\n-          .append(\" -XX:G1ReservePercent=\").append(reservePercent)\r\n-          .append(\" -verbose:gc\")\r\n-          .append(\" -XX:+PrintGCDateStamps\").append(\" -XX:+PrintGCDetails\")\r\n-          .append(\" -Xloggc:<LOG_DIR>/gc.log\").toString();\r\n-    } else {\r\n-      ret = new StringBuilder().append(\" -Xmx\").append(heapMax).append(\"M\").append(\" -Xmn\")\r\n-          .append(youngRegionSize).append(\"M\").append(\" -XX:MaxDirectMemorySize=\")\r\n-          .append(directRegionSize).append(\"M\").append(\" -XX:SurvivorRatio=\").append(survivorRatio)\r\n-          .append(\" -XX:PermSize=100M -XX:MaxPermSize=200M\").append(\" -XX:+AggressiveOpts\")\r\n-          .append(\" -XX:+UseLargePages\").append(\" -XX:+UseConcMarkSweepGC\")\r\n-          .append(\" -XX:CMSInitiatingOccupancyFraction=70\")\r\n-          .append(\" -XX:+UseCMSInitiatingOccupancyOnly\").append(\" -XX:+CMSScavengeBeforeRemark\")\r\n-          .append(\" -XX:+UseCMSCompactAtFullCollection\").append(\" -verbose:gc\")\r\n-          .append(\" -XX:+PrintGCDateStamps\").append(\" -XX:+PrintGCDetails\")\r\n-          .append(\" -Xloggc:<LOG_DIR>/gc.log\").toString();\r\n-    }\r\n-\r\n-    return ret;\r\n-  }\r\n-\r\n-  private static void setupLog4jProperties(Configuration conf, Vector<String> vargs, long logSize) {\r\n-    String logLevel = getChildLogLevel(conf);\r\n-    AngelApps.addLog4jSystemProperties(logLevel, logSize, vargs);\r\n+    // General params\n+\n+    boolean isUseDirect = conf.getBoolean(AngelConf.ANGEL_NETTY_MATRIXTRANSFER_SERVER_USEDIRECTBUFFER, AngelConf.DEFAULT_ANGEL_NETTY_MATRIXTRANSFER_SERVER_USEDIRECTBUFFER);\n+    float directFatorUseDirectBuff = conf.getFloat(AngelConf.ANGEL_PS_JVM_DIRECT_FACTOR_USE_DIRECT_BUFF, AngelConf.DEFAULT_ANGEL_PS_JVM_DIRECT_FACTOR_USE_DIRECT_BUFF);\n+    float directFatorUseHeapBuff = conf.getFloat(AngelConf.ANGEL_PS_JVM_DIRECT_FACTOR_USE_HEAP_BUFF, AngelConf.DEFAULT_ANGEL_PS_JVM_DIRECT_FACTOR_USE_HEAP_BUFF);\n+    float youngFator = conf.getFloat(AngelConf.ANGEL_PS_JVM_YOUNG_FACTOR, AngelConf.DEFAULT_ANGEL_PS_JVM_YOUNG_FACTOR);\r\n+\r\n+    // G1 params\n+    boolean useG1 = conf.getBoolean(AngelConf.ANGEL_PS_JVM_USE_G1, AngelConf.DEFAULT_ANGEL_PS_JVM_USE_G1);\n+    int maxPauseTimeTs = conf.getInt(AngelConf.ANGEL_PS_JVM_G1_MAXPAUSETIME_MS, AngelConf.DEFAULT_ANGEL_PS_JVM_G1_MAXPAUSETIME_MS);\n+    int minNewRatio = conf.getInt(AngelConf.ANGEL_PS_JVM_G1_MIN_NEWRATIO, AngelConf.DEFAULT_ANGEL_PS_JVM_G1_MIN_NEWRATIO);\n+    int maxNewRatio = conf.getInt(AngelConf.ANGEL_PS_JVM_G1_MAX_NEWRATIO, AngelConf.DEFAULT_ANGEL_PS_JVM_G1_MAX_NEWRATIO);\n+    int regionSizeMB = conf.getInt(AngelConf.ANGEL_PS_JVM_G1_REGIONSIZE_MB, AngelConf.DEFAULT_ANGEL_PS_JVM_G1_REGIONSIZE_MB);\n+    int ihop = conf.getInt(AngelConf.ANGEL_PS_JVM_G1_IHOP, AngelConf.DEFAULT_ANGEL_PS_JVM_G1_IHOP);\n+    int workerNum = conf.getInt(AngelConf.ANGEL_PS_JVM_G1_WORKER_NUM, AngelConf.DEFAULT_ANGEL_PS_JVM_G1_WORKER_NUM);\n+    int concWorkerNum = conf.getInt(AngelConf.ANGEL_PS_JVM_G1_CONC_WORKER_NUM, AngelConf.DEFAULT_ANGEL_PS_JVM_G1_CONC_WORKER_NUM);\n+    int reservePercent = conf.getInt(AngelConf.ANGEL_PS_JVM_G1_RESERVE_PERCENT, AngelConf.DEFAULT_ANGEL_PS_JVM_G1_RESERVE_PERCENT);\n+    int mixGcLiveThreshold = conf.getInt(AngelConf.ANGEL_PS_JVM_G1_MIXGC_LIVE_THRESHOLD_PERCENT, AngelConf.DEFAULT_ANGEL_PS_JVM_G1_MIXGC_LIVE_THRESHOLD_PERCENT);\n+    int mixGcTargetCount = conf.getInt(AngelConf.ANGEL_PS_JVM_G1_MIXGC_TARGET_COUNT, AngelConf.DEFAULT_ANGEL_PS_JVM_G1_MIXGC_TARGET_COUNT);\n+    int useMax = psMemSizeInMB - 512;\n+    int directRegionSize = 0;\n+    if (isUseDirect) {\n+      directRegionSize = (int) (useMax * directFatorUseDirectBuff);\n+    } else {\n+      directRegionSize = (int) (useMax * directFatorUseHeapBuff);\n+    }\n+\n+    int heapMax = useMax - directRegionSize;\n+    int youngRegionSize = (int) (heapMax * youngFator);\n+    int survivorRatio = 4;\n+    String ret;\n+    if (useG1) {\n+      ret = new StringBuilder().append(\" -Xmx\").append(heapMax).append(\"M\").append(\" -XX:MaxDirectMemorySize=\").append(directRegionSize).append(\"M\").append(\" -XX:+AggressiveOpts\").append(\" -XX:+UseLargePages\").append(\" -XX:+UseG1GC\").append(\" -XX:+UnlockExperimentalVMOptions\").append(\" -XX:MaxGCPauseMillis=\").append(maxPauseTimeTs).append(\" -XX:G1NewSizePercent=\").append(minNewRatio).append(\" -XX:G1MaxNewSizePercent=\").append(maxNewRatio).append(\" -XX:G1HeapRegionSize=\").append(regionSizeMB).append(\"m\").append(\" -XX:InitiatingHeapOccupancyPercent=\").append(ihop).append(\" -XX:G1MixedGCLiveThresholdPercent=\").append(mixGcLiveThreshold).append(\" -XX:G1MixedGCCountTarget=\").append(mixGcTargetCount).append(\" -XX:ConcGCThreads=\").append(concWorkerNum).append(\" -XX:ParallelGCThreads=\").append(workerNum).append(\" -XX:G1ReservePercent=\").append(reservePercent).append(\" -verbose:gc\").append(\" -XX:+PrintGCDateStamps\").append(\" -XX:+PrintGCDetails\").append(\" -Xloggc:<LOG_DIR>/gc.log\").toString();\n+    } else {\n+      ret = new StringBuilder().append(\" -Xmx\").append(heapMax).append(\"M\").append(\" -Xmn\").append(youngRegionSize).append(\"M\").append(\" -XX:MaxDirectMemorySize=\").append(directRegionSize).append(\"M\").append(\" -XX:SurvivorRatio=\").append(survivorRatio).append(\" -XX:PermSize=100M -XX:MaxPermSize=200M\").append(\" -XX:+AggressiveOpts\").append(\" -XX:+UseLargePages\").append(\" -XX:+UseConcMarkSweepGC\").append(\" -XX:CMSInitiatingOccupancyFraction=70\").append(\" -XX:+UseCMSInitiatingOccupancyOnly\").append(\" -XX:+CMSScavengeBeforeRemark\").append(\" -XX:+UseCMSCompactAtFullCollection\").append(\" -verbose:gc\").append(\" -XX:+PrintGCDateStamps\").append(\" -XX:+PrintGCDetails\").append(\" -Xloggc:<LOG_DIR>/gc.log\").toString();\n+    }\n+    return ret;\n+  }\n+\n+  private static void setupLog4jProperties(\n+    Configuration conf, Vector<String> vargs, long logSize) {\n+    String logLevel = getChildLogLevel(conf);\n+    AngelApps.addLog4jSystemProperties(logLevel, logSize, vargs);\n   }\r\n \r\n   /**\r\n@@ -224,45 +161,44 @@ public class ParameterServerJVM {\n    * @param appid application id\r\n    * @param psAttemptId ps attempt id\r\n    * @return ps attempt jvm command\r\n-   */\r\n-  public static List<String> getVMCommand(Configuration conf, ApplicationId appid,\r\n-      PSAttemptId psAttemptId) {\r\n-\r\n-    Vector<String> vargs = new Vector<String>(8);\r\n-    vargs.add(Environment.JAVA_HOME.$() + \"/bin/java\");\r\n-\r\n-    String javaOpts = getChildJavaOpts(conf, appid, psAttemptId);\r\n-    String[] javaOptsSplit = javaOpts.split(\" \");\r\n-    for (int i = 0; i < javaOptsSplit.length; i++) {\r\n-      vargs.add(javaOptsSplit[i]);\r\n-    }\r\n-\r\n-    Path childTmpDir = new Path(Environment.PWD.$(), YarnConfiguration.DEFAULT_CONTAINER_TEMP_DIR);\r\n+   */\n+\n+  public static List<String> getVMCommand(\n+    Configuration conf, ApplicationId appid, PSAttemptId psAttemptId) {\n+    Vector<String> vargs = new Vector<String>(8);\n+    vargs.add(Environment.JAVA_HOME.$() + \"/bin/java\");\n+    String javaOpts = getChildJavaOpts(conf, appid, psAttemptId);\n+    String[] javaOptsSplit = javaOpts.split(\" \");\n+    for (int i = 0; i < javaOptsSplit.length; i++) {\n+      vargs.add(javaOptsSplit[i]);\n+    }\n+\n+    Path childTmpDir = new Path(Environment.PWD.$(), YarnConfiguration.DEFAULT_CONTAINER_TEMP_DIR);\n     vargs.add(\"-Djava.io.tmpdir=\" + childTmpDir);\r\n \r\n-    // Setup the log4j prop\r\n-    long logSize = 0;// TaskLog.getTaskLogLength(conf);\r\n+    // Setup the log4j prop\n+\n+    long logSize = 0;// TaskLog.getTaskLogLength(conf);\n     setupLog4jProperties(conf, vargs, logSize);\r\n \r\n-    // Add main class and its arguments\r\n-    String psClassName = conf.get(AngelConf.ANGEL_PS_CLASS, AngelConf.DEFAULT_ANGEL_PS_CLASS);\r\n+    // Add main class and its arguments\n+    String psClassName = conf.get(AngelConf.ANGEL_PS_CLASS, AngelConf.DEFAULT_ANGEL_PS_CLASS);\n     vargs.add(psClassName); // main of Child\r\n \r\n     // Finally add the jvmID\r\n-    // vargs.add(String.valueOf(jvmID.getId()));\r\n-    vargs.add(\"1>\" + getTaskLogFile(TaskLog.LogName.STDOUT));\r\n+    // vargs.add(String.valueOf(jvmID.getId()));\n+    vargs.add(\"1>\" + getTaskLogFile(TaskLog.LogName.STDOUT));\n     vargs.add(\"2>\" + getTaskLogFile(TaskLog.LogName.STDERR));\r\n \r\n-    // Final commmand\r\n-    StringBuilder mergedCommand = new StringBuilder();\r\n-    for (CharSequence str : vargs) {\r\n-      mergedCommand.append(str).append(\" \");\r\n-    }\r\n-    Vector<String> vargsFinal = new Vector<String>(1);\r\n-    vargsFinal.add(mergedCommand.toString());\r\n-\r\n-    LOG.info(\"Command to launch container for PS is : \" + mergedCommand);\r\n-\r\n-    return vargsFinal;\r\n-  }\r\n-}\r\n+    // Final commmand\n+    StringBuilder mergedCommand = new StringBuilder();\n+    for (CharSequence str : vargs) {\n+      mergedCommand.append(str).append(\" \");\n+    }\n+\n+    Vector<String> vargsFinal = new Vector<String>(1);\n+    vargsFinal.add(mergedCommand.toString());\n+    LOG.info(\"Command to launch container for PS is : \" + mergedCommand);\n+    return vargsFinal;\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 248
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}