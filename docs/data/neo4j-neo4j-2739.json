{
    "project_name": "neo4j-neo4j",
    "error_id": "2739",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "61",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2739/IdRange.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2739/IdRange.java\nindex cd346d1d63a..b6d52a2b782 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2739/IdRange.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2739/IdRange.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.id.indexed;\n \n import org.apache.commons.lang3.StringUtils;\n@@ -35,7 +36,7 @@ import static java.util.Arrays.fill;\n  *     <li>Reuse bits, i.e. 0=not reusable, 1=free</li>\n  *     <li>Reserved bits, i.e. 0=not reserved, 1=reserved</li>\n  * </ul>\n- *\n+ * <p>\n  * Each {@link IdRange} is associated with an {@link IdRangeKey} which specifies the range, e.g. an ID range of 3 in a layout where ids-per-entry is 128\n  * holds IDs between 384-511.\n  */\n@@ -57,54 +58,54 @@ class IdRange\n     private final long[][] bitSets;\n     private final int numOfLongs;\n \n-    IdRange( int numOfLongs )\n+    IdRange(int numOfLongs)\n     {\n         this.bitSets = new long[BITSET_COUNT][numOfLongs];\n         this.numOfLongs = numOfLongs;\n     }\n \n-    IdState getState( int n )\n+    IdState getState(int n)\n     {\n         int longIndex = n / BITSET_SIZE;\n         int bitIndex = n % BITSET_SIZE;\n-        boolean commitBit = (bitSets[BITSET_COMMIT][longIndex] & bitMask( bitIndex )) != 0;\n-        if ( commitBit )\n+        boolean commitBit = (bitSets[BITSET_COMMIT][longIndex] & bitMask(bitIndex)) != 0;\n+        if (commitBit)\n         {\n-            boolean reuseBit = (bitSets[BITSET_REUSE][longIndex] & bitMask( bitIndex )) != 0;\n-            boolean reservedBit = (bitSets[BITSET_RESERVED][longIndex] & bitMask( bitIndex )) != 0;\n+            boolean reuseBit = (bitSets[BITSET_REUSE][longIndex] & bitMask(bitIndex)) != 0;\n+            boolean reservedBit = (bitSets[BITSET_RESERVED][longIndex] & bitMask(bitIndex)) != 0;\n             return reuseBit && !reservedBit ? IdState.FREE : IdState.DELETED;\n         }\n         return IdState.USED;\n     }\n \n-    private static long bitMask( int bitIndex )\n+    private static long bitMask(int bitIndex)\n     {\n         return 1L << bitIndex;\n     }\n \n-    void setBit( int type, int n )\n+    void setBit(int type, int n)\n     {\n         int longIndex = n / BITSET_SIZE;\n         int bitIndex = n % BITSET_SIZE;\n-        bitSets[type][longIndex] |= bitMask( bitIndex );\n+        bitSets[type][longIndex] |= bitMask(bitIndex);\n     }\n \n-    void setBitsForAllTypes( int n )\n+    void setBitsForAllTypes(int n)\n     {\n         int longIndex = n / BITSET_SIZE;\n         int bitIndex = n % BITSET_SIZE;\n-        bitSets[BITSET_COMMIT][longIndex] |= bitMask( bitIndex );\n-        bitSets[BITSET_REUSE][longIndex] |= bitMask( bitIndex );\n-        bitSets[BITSET_RESERVED][longIndex] |= bitMask( bitIndex );\n+        bitSets[BITSET_COMMIT][longIndex] |= bitMask(bitIndex);\n+        bitSets[BITSET_REUSE][longIndex] |= bitMask(bitIndex);\n+        bitSets[BITSET_RESERVED][longIndex] |= bitMask(bitIndex);\n     }\n \n-    void clear( long generation, boolean addition )\n+    void clear(long generation, boolean addition)\n     {\n         this.generation = generation;\n         this.addition = addition;\n-        fill( bitSets[BITSET_COMMIT], 0 );\n-        fill( bitSets[BITSET_REUSE], 0 );\n-        fill( bitSets[BITSET_RESERVED], 0 );\n+        fill(bitSets[BITSET_COMMIT], 0);\n+        fill(bitSets[BITSET_REUSE], 0);\n+        fill(bitSets[BITSET_RESERVED], 0);\n     }\n \n     long getGeneration()\n@@ -112,7 +113,7 @@ class IdRange\n         return generation;\n     }\n \n-    void setGeneration( long generation )\n+    void setGeneration(long generation)\n     {\n         this.generation = generation;\n     }\n@@ -124,7 +125,7 @@ class IdRange\n \n     void normalize()\n     {\n-        for ( int i = 0; i < numOfLongs; i++ )\n+        for (int i = 0; i < numOfLongs; i++)\n         {\n             // Set the reuse bits to whatever the commit bits are. This will let USED be USED and DELETED will become FREE\n             bitSets[BITSET_REUSE][i] = bitSets[BITSET_COMMIT][i];\n@@ -132,92 +133,92 @@ class IdRange\n         }\n     }\n \n-    boolean mergeFrom( IdRange other, boolean recoveryMode )\n+    boolean mergeFrom(IdRange other, boolean recoveryMode)\n     {\n-        if ( !recoveryMode )\n+        if (!recoveryMode)\n         {\n-            verifyMerge( other );\n+            verifyMerge(other);\n         }\n \n-        for ( int bitSetIndex = 0; bitSetIndex < BITSET_COUNT; bitSetIndex++ )\n+        for (int bitSetIndex = 0; bitSetIndex < BITSET_COUNT; bitSetIndex++)\n         {\n-            mergeBitSet( bitSets[bitSetIndex], other.bitSets[bitSetIndex], other.addition );\n+            mergeBitSet(bitSets[bitSetIndex], other.bitSets[bitSetIndex], other.addition);\n         }\n \n         return true;\n     }\n \n-    private static void mergeBitSet( long[] into, long[] mergeFrom, boolean addition )\n+    private static void mergeBitSet(long[] into, long[] mergeFrom, boolean addition)\n     {\n-        for ( int i = 0; i < into.length; i++ )\n+        for (int i = 0; i < into.length; i++)\n         {\n             into[i] = addition ? into[i] | mergeFrom[i]\n-                               : into[i] & ~mergeFrom[i];\n+              : into[i] & ~mergeFrom[i];\n         }\n     }\n \n-    private void verifyMerge( IdRange other )\n+    private void verifyMerge(IdRange other)\n     {\n         boolean addition = other.addition;\n         long[] intoBitSet = bitSets[BITSET_COMMIT];\n         long[] fromBitSet = other.bitSets[BITSET_COMMIT];\n-        for ( int i = 0; i < intoBitSet.length; i++ )\n+        for (int i = 0; i < intoBitSet.length; i++)\n         {\n             long into = intoBitSet[i];\n             long from = fromBitSet[i];\n-            if ( addition )\n+            if (addition)\n             {\n-                if ( (into & from ) != 0 )\n+                if ((into & from) != 0)\n                 {\n-                    throw new IllegalStateException( format( \"Illegal addition ID state transition longIdx: %d%ninto: %s%nfrom: %s\",\n-                            i, toPaddedBinaryString( into ), toPaddedBinaryString( from ) ) );\n+                    throw new IllegalStateException(format(\"Illegal addition ID state transition longIdx: %d%ninto: %s%nfrom: %s\",\n+                      i, toPaddedBinaryString(into), toPaddedBinaryString(from)));\n                 }\n             }\n             // don't very removal since we can't quite verify transitioning to USED since 0 is the default bit value\n         }\n     }\n \n-    private static String toPaddedBinaryString( long bits )\n+    private static String toPaddedBinaryString(long bits)\n     {\n-        char[] padded = StringUtils.leftPad( toBinaryString( bits ), Long.SIZE, '0' ).toCharArray();\n+        char[] padded = StringUtils.leftPad(toBinaryString(bits), Long.SIZE, '0').toCharArray();\n \n         // Now add a space between each byte\n         int numberOfSpaces = padded.length / Byte.SIZE - 1;\n         char[] spaced = new char[padded.length + numberOfSpaces];\n-        Arrays.fill( spaced, ' ' );\n-        for ( int i = 0; i < numberOfSpaces + 1; i++ )\n+        Arrays.fill(spaced, ' ');\n+        for (int i = 0; i < numberOfSpaces + 1; i++)\n         {\n-            System.arraycopy( padded, i * Byte.SIZE, spaced, i * Byte.SIZE + i, Byte.SIZE );\n+            System.arraycopy(padded, i * Byte.SIZE, spaced, i * Byte.SIZE + i, Byte.SIZE);\n         }\n-        return String.valueOf( spaced );\n+        return String.valueOf(spaced);\n     }\n \n     @Override\n     public String toString()\n     {\n-        StringBuilder builder = new StringBuilder().append( \" gen:\" ).append( generation );\n-        appendBitSet( builder, bitSets[BITSET_COMMIT], \"commit  \" );\n-        appendBitSet( builder, bitSets[BITSET_REUSE], \"reuse   \" );\n-        appendBitSet( builder, bitSets[BITSET_RESERVED], \"reserved\" );\n+        StringBuilder builder = new StringBuilder().append(\" gen:\").append(generation);\n+        appendBitSet(builder, bitSets[BITSET_COMMIT], \"commit  \");\n+        appendBitSet(builder, bitSets[BITSET_REUSE], \"reuse   \");\n+        appendBitSet(builder, bitSets[BITSET_RESERVED], \"reserved\");\n         return builder.toString();\n     }\n \n-    private static void appendBitSet( StringBuilder builder, long[] bitSet, String name )\n+    private static void appendBitSet(StringBuilder builder, long[] bitSet, String name)\n     {\n-        builder.append( format( \"%n\" ) ).append( name ).append( ':' );\n+        builder.append(format(\"%n\")).append(name).append(':');\n         String delimiter = \"\";\n-        for ( int i = bitSet.length - 1; i >= 0; i-- )\n+        for (int i = bitSet.length - 1; i >= 0; i--)\n         {\n-            builder.append( delimiter ).append( toPaddedBinaryString( bitSet[i] ) );\n+            builder.append(delimiter).append(toPaddedBinaryString(bitSet[i]));\n             delimiter = \" , \";\n         }\n     }\n \n     public boolean isEmpty()\n     {\n-        for ( long bits : bitSets[BITSET_COMMIT] )\n+        for (long bits : bitSets[BITSET_COMMIT])\n         {\n-            if ( bits != 0 )\n+            if (bits != 0)\n             {\n                 return false;\n             }\n",
            "diff_size": 51
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}