{
    "project_name": "Activiti-Activiti",
    "error_id": "576",
    "information": {
        "errors": [
            {
                "line": "40",
                "severity": "error",
                "message": "'CLASS_DEF' has more than 1 empty lines before.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "\n\npublic class ProcessEngineImpl implements ProcessEngine {\n\n  private static Logger log = LoggerFactory.getLogger(ProcessEngineImpl.class);\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/576/ProcessEngineImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/576/ProcessEngineImpl.java\nindex ec4bdbcca1d..d590f46b5cb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/576/ProcessEngineImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/576/ProcessEngineImpl.java\n@@ -36,7 +36,6 @@ import org.activiti.engine.impl.interceptor.SessionFactory;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-\n public class ProcessEngineImpl implements ProcessEngine {\n \n   private static Logger log = LoggerFactory.getLogger(ProcessEngineImpl.class);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "40",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/576/ProcessEngineImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/576/ProcessEngineImpl.java\nindex ec4bdbcca1d..063ae8176ea 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/576/ProcessEngineImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/576/ProcessEngineImpl.java\n@@ -39,106 +39,106 @@ import org.slf4j.LoggerFactory;\n \n public class ProcessEngineImpl implements ProcessEngine {\n \n-  private static Logger log = LoggerFactory.getLogger(ProcessEngineImpl.class);\n-\n-  protected String name;\n-  protected RepositoryService repositoryService;\n-  protected RuntimeService runtimeService;\n-  protected HistoryService historicDataService;\n-  protected TaskService taskService;\n-  protected ManagementService managementService;\n-  protected DynamicBpmnService dynamicBpmnService;\n-  protected AsyncExecutor asyncExecutor;\n-  protected CommandExecutor commandExecutor;\n-  protected Map<Class<?>, SessionFactory> sessionFactories;\n-  protected TransactionContextFactory transactionContextFactory;\n-  protected ProcessEngineConfigurationImpl processEngineConfiguration;\n-\n-  public ProcessEngineImpl(ProcessEngineConfigurationImpl processEngineConfiguration) {\n-    this.processEngineConfiguration = processEngineConfiguration;\n-    this.name = processEngineConfiguration.getProcessEngineName();\n-    this.repositoryService = processEngineConfiguration.getRepositoryService();\n-    this.runtimeService = processEngineConfiguration.getRuntimeService();\n-    this.historicDataService = processEngineConfiguration.getHistoryService();\n-    this.taskService = processEngineConfiguration.getTaskService();\n-    this.managementService = processEngineConfiguration.getManagementService();\n-    this.dynamicBpmnService = processEngineConfiguration.getDynamicBpmnService();\n-    this.asyncExecutor = processEngineConfiguration.getAsyncExecutor();\n-    this.commandExecutor = processEngineConfiguration.getCommandExecutor();\n-    this.sessionFactories = processEngineConfiguration.getSessionFactories();\n-    this.transactionContextFactory = processEngineConfiguration.getTransactionContextFactory();\n-\n-    if (processEngineConfiguration.isUsingRelationalDatabase() && processEngineConfiguration.getDatabaseSchemaUpdate() != null) {\n-      commandExecutor.execute(processEngineConfiguration.getSchemaCommandConfig(), new SchemaOperationsProcessEngineBuild());\n+    private static Logger log = LoggerFactory.getLogger(ProcessEngineImpl.class);\n+\n+    protected String name;\n+    protected RepositoryService repositoryService;\n+    protected RuntimeService runtimeService;\n+    protected HistoryService historicDataService;\n+    protected TaskService taskService;\n+    protected ManagementService managementService;\n+    protected DynamicBpmnService dynamicBpmnService;\n+    protected AsyncExecutor asyncExecutor;\n+    protected CommandExecutor commandExecutor;\n+    protected Map<Class<?>, SessionFactory> sessionFactories;\n+    protected TransactionContextFactory transactionContextFactory;\n+    protected ProcessEngineConfigurationImpl processEngineConfiguration;\n+\n+    public ProcessEngineImpl(ProcessEngineConfigurationImpl processEngineConfiguration) {\n+        this.processEngineConfiguration = processEngineConfiguration;\n+        this.name = processEngineConfiguration.getProcessEngineName();\n+        this.repositoryService = processEngineConfiguration.getRepositoryService();\n+        this.runtimeService = processEngineConfiguration.getRuntimeService();\n+        this.historicDataService = processEngineConfiguration.getHistoryService();\n+        this.taskService = processEngineConfiguration.getTaskService();\n+        this.managementService = processEngineConfiguration.getManagementService();\n+        this.dynamicBpmnService = processEngineConfiguration.getDynamicBpmnService();\n+        this.asyncExecutor = processEngineConfiguration.getAsyncExecutor();\n+        this.commandExecutor = processEngineConfiguration.getCommandExecutor();\n+        this.sessionFactories = processEngineConfiguration.getSessionFactories();\n+        this.transactionContextFactory = processEngineConfiguration.getTransactionContextFactory();\n+\n+        if (processEngineConfiguration.isUsingRelationalDatabase() && processEngineConfiguration.getDatabaseSchemaUpdate() != null) {\n+            commandExecutor.execute(processEngineConfiguration.getSchemaCommandConfig(), new SchemaOperationsProcessEngineBuild());\n+        }\n+\n+        if (name == null) {\n+            log.info(\"default activiti ProcessEngine created\");\n+        } else {\n+            log.info(\"ProcessEngine {} created\", name);\n+        }\n+\n+        ProcessEngines.registerProcessEngine(this);\n+\n+        if (asyncExecutor != null && asyncExecutor.isAutoActivate()) {\n+            asyncExecutor.start();\n+        }\n+\n+        if (processEngineConfiguration.getProcessEngineLifecycleListener() != null) {\n+            processEngineConfiguration.getProcessEngineLifecycleListener().onProcessEngineBuilt(this);\n+        }\n+\n+        processEngineConfiguration.getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createGlobalEvent(ActivitiEventType.ENGINE_CREATED));\n     }\n \n-    if (name == null) {\n-      log.info(\"default activiti ProcessEngine created\");\n-    } else {\n-      log.info(\"ProcessEngine {} created\", name);\n-    }\n+    public void close() {\n+        ProcessEngines.unregister(this);\n+        if (asyncExecutor != null && asyncExecutor.isActive()) {\n+            asyncExecutor.shutdown();\n+        }\n \n-    ProcessEngines.registerProcessEngine(this);\n+        commandExecutor.execute(processEngineConfiguration.getSchemaCommandConfig(), new SchemaOperationProcessEngineClose());\n \n-    if (asyncExecutor != null && asyncExecutor.isAutoActivate()) {\n-      asyncExecutor.start();\n-    }\n+        if (processEngineConfiguration.getProcessEngineLifecycleListener() != null) {\n+            processEngineConfiguration.getProcessEngineLifecycleListener().onProcessEngineClosed(this);\n+        }\n \n-    if (processEngineConfiguration.getProcessEngineLifecycleListener() != null) {\n-      processEngineConfiguration.getProcessEngineLifecycleListener().onProcessEngineBuilt(this);\n+        processEngineConfiguration.getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createGlobalEvent(ActivitiEventType.ENGINE_CLOSED));\n     }\n \n-    processEngineConfiguration.getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createGlobalEvent(ActivitiEventType.ENGINE_CREATED));\n-  }\n+    // getters and setters\n+    // //////////////////////////////////////////////////////\n \n-  public void close() {\n-    ProcessEngines.unregister(this);\n-    if (asyncExecutor != null && asyncExecutor.isActive()) {\n-      asyncExecutor.shutdown();\n+    public String getName() {\n+        return name;\n     }\n \n-    commandExecutor.execute(processEngineConfiguration.getSchemaCommandConfig(), new SchemaOperationProcessEngineClose());\n-\n-    if (processEngineConfiguration.getProcessEngineLifecycleListener() != null) {\n-      processEngineConfiguration.getProcessEngineLifecycleListener().onProcessEngineClosed(this);\n+    public ManagementService getManagementService() {\n+        return managementService;\n     }\n \n-    processEngineConfiguration.getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createGlobalEvent(ActivitiEventType.ENGINE_CLOSED));\n-  }\n-\n-  // getters and setters\n-  // //////////////////////////////////////////////////////\n-\n-  public String getName() {\n-    return name;\n-  }\n-\n-  public ManagementService getManagementService() {\n-    return managementService;\n-  }\n-\n-  public TaskService getTaskService() {\n-    return taskService;\n-  }\n+    public TaskService getTaskService() {\n+        return taskService;\n+    }\n \n-  public HistoryService getHistoryService() {\n-    return historicDataService;\n-  }\n+    public HistoryService getHistoryService() {\n+        return historicDataService;\n+    }\n \n-  public RuntimeService getRuntimeService() {\n-    return runtimeService;\n-  }\n+    public RuntimeService getRuntimeService() {\n+        return runtimeService;\n+    }\n \n-  public RepositoryService getRepositoryService() {\n-    return repositoryService;\n-  }\n+    public RepositoryService getRepositoryService() {\n+        return repositoryService;\n+    }\n \n-  public DynamicBpmnService getDynamicBpmnService() {\n-    return dynamicBpmnService;\n-  }\n+    public DynamicBpmnService getDynamicBpmnService() {\n+        return dynamicBpmnService;\n+    }\n \n-  public ProcessEngineConfigurationImpl getProcessEngineConfiguration() {\n-    return processEngineConfiguration;\n-  }\n+    public ProcessEngineConfigurationImpl getProcessEngineConfiguration() {\n+        return processEngineConfiguration;\n+    }\n \n }\n",
            "diff_size": 103
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "39",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/576/ProcessEngineImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/576/ProcessEngineImpl.java\nindex ec4bdbcca1d..9443c2a0ff3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/576/ProcessEngineImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/576/ProcessEngineImpl.java\n@@ -17,7 +17,6 @@\n package org.activiti.engine.impl;\n \n import java.util.Map;\n-\n import org.activiti.engine.DynamicBpmnService;\n import org.activiti.engine.HistoryService;\n import org.activiti.engine.ManagementService;\n@@ -40,7 +39,6 @@ import org.slf4j.LoggerFactory;\n public class ProcessEngineImpl implements ProcessEngine {\n \n   private static Logger log = LoggerFactory.getLogger(ProcessEngineImpl.class);\n-\n   protected String name;\n   protected RepositoryService repositoryService;\n   protected RuntimeService runtimeService;\n@@ -67,27 +65,21 @@ public class ProcessEngineImpl implements ProcessEngine {\n     this.commandExecutor = processEngineConfiguration.getCommandExecutor();\n     this.sessionFactories = processEngineConfiguration.getSessionFactories();\n     this.transactionContextFactory = processEngineConfiguration.getTransactionContextFactory();\n-\n     if (processEngineConfiguration.isUsingRelationalDatabase() && processEngineConfiguration.getDatabaseSchemaUpdate() != null) {\n       commandExecutor.execute(processEngineConfiguration.getSchemaCommandConfig(), new SchemaOperationsProcessEngineBuild());\n     }\n-\n     if (name == null) {\n       log.info(\"default activiti ProcessEngine created\");\n     } else {\n       log.info(\"ProcessEngine {} created\", name);\n     }\n-\n     ProcessEngines.registerProcessEngine(this);\n-\n     if (asyncExecutor != null && asyncExecutor.isAutoActivate()) {\n       asyncExecutor.start();\n     }\n-\n     if (processEngineConfiguration.getProcessEngineLifecycleListener() != null) {\n       processEngineConfiguration.getProcessEngineLifecycleListener().onProcessEngineBuilt(this);\n     }\n-\n     processEngineConfiguration.getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createGlobalEvent(ActivitiEventType.ENGINE_CREATED));\n   }\n \n@@ -96,13 +88,10 @@ public class ProcessEngineImpl implements ProcessEngine {\n     if (asyncExecutor != null && asyncExecutor.isActive()) {\n       asyncExecutor.shutdown();\n     }\n-\n     commandExecutor.execute(processEngineConfiguration.getSchemaCommandConfig(), new SchemaOperationProcessEngineClose());\n-\n     if (processEngineConfiguration.getProcessEngineLifecycleListener() != null) {\n       processEngineConfiguration.getProcessEngineLifecycleListener().onProcessEngineClosed(this);\n     }\n-\n     processEngineConfiguration.getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createGlobalEvent(ActivitiEventType.ENGINE_CLOSED));\n   }\n \n@@ -140,5 +129,4 @@ public class ProcessEngineImpl implements ProcessEngine {\n   public ProcessEngineConfigurationImpl getProcessEngineConfiguration() {\n     return processEngineConfiguration;\n   }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/576/ProcessEngineImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/576/ProcessEngineImpl.java\nindex ec4bdbcca1d..d590f46b5cb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/576/ProcessEngineImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/576/ProcessEngineImpl.java\n@@ -36,7 +36,6 @@ import org.activiti.engine.impl.interceptor.SessionFactory;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-\n public class ProcessEngineImpl implements ProcessEngine {\n \n   private static Logger log = LoggerFactory.getLogger(ProcessEngineImpl.class);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/576/ProcessEngineImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/576/ProcessEngineImpl.java\nindex ec4bdbcca1d..d590f46b5cb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/576/ProcessEngineImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/576/ProcessEngineImpl.java\n@@ -36,7 +36,6 @@ import org.activiti.engine.impl.interceptor.SessionFactory;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-\n public class ProcessEngineImpl implements ProcessEngine {\n \n   private static Logger log = LoggerFactory.getLogger(ProcessEngineImpl.class);\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}