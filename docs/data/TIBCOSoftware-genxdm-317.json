{
    "project_name": "TIBCOSoftware-genxdm",
    "error_id": "317",
    "information": {
        "errors": [
            {
                "line": "33",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "final class ModelGroupExpression implements ValidationExpr\n{\n\tprivate static  void compile(final SchemaParticle particle, final ArrayList<ValidationExpr> subTerms)\n\t{\n\t\tfinal ParticleTerm term = particle.getTerm();\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "34",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/317/ModelGroupExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/317/ModelGroupExpression.java\nindex efb6d3af3a8..6ec0a644f91 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/317/ModelGroupExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/317/ModelGroupExpression.java\n@@ -30,7 +30,7 @@ import org.genxdm.xs.components.SchemaWildcard;\n \n final class ModelGroupExpression implements ValidationExpr\n {\n-\tprivate static  void compile(final SchemaParticle particle, final ArrayList<ValidationExpr> subTerms)\n+private static  void compile(final SchemaParticle particle, final ArrayList<ValidationExpr> subTerms)\n \t{\n \t\tfinal ParticleTerm term = particle.getTerm();\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/317/ModelGroupExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/317/ModelGroupExpression.java\nindex efb6d3af3a8..07f70233c24 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/317/ModelGroupExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/317/ModelGroupExpression.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright (c) 2009-2010 TIBCO Software Inc.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.genxdm.processor.w3c.xs.validation.impl;\n \n import java.util.ArrayList;\n@@ -28,145 +29,113 @@ import org.genxdm.xs.components.SchemaParticle;\n import org.genxdm.xs.components.ParticleTerm;\n import org.genxdm.xs.components.SchemaWildcard;\n \n-final class ModelGroupExpression implements ValidationExpr\n-{\n-\tprivate static  void compile(final SchemaParticle particle, final ArrayList<ValidationExpr> subTerms)\n-\t{\n-\t\tfinal ParticleTerm term = particle.getTerm();\n-\n-\t\tif (term instanceof ElementDefinition)\n-\t\t{\n-\t\t\tfinal ElementDefinition element = (ElementDefinition)term;\n-\t\t\tif (element.hasSubstitutionGroupMembers())\n-\t\t\t{\n-\t\t\t\t// Build a set of substitution element choices.\n-\t\t\t\tfinal Stack<ElementDefinition> stack = new Stack<ElementDefinition>();\n-\t\t\t\tstack.push(element);\n-\t\t\t\tfinal HashSet<ElementDefinition> choices = new HashSet<ElementDefinition>();\n-\t\t\t\twhile (!stack.isEmpty())\n-\t\t\t\t{\n-\t\t\t\t\tfinal ElementDefinition popped = stack.pop();\n-\t\t\t\t\tchoices.add(popped);\n-\t\t\t\t\tfor (final ElementDefinition substitution : popped.getSubstitutionGroupMembers())\n-\t\t\t\t\t{\n-\t\t\t\t\t\tstack.push(substitution);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tif (particle.isMaxOccursUnbounded())\n-\t\t\t\t{\n-\t\t\t\t\tsubTerms.add(new SubstitutionGroupExpression(particle.getMinOccurs(), choices));\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tsubTerms.add(new SubstitutionGroupExpression(particle.getMinOccurs(), particle.getMaxOccurs(), choices));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\tif (particle.isMaxOccursUnbounded())\n-\t\t\t\t{\n-\t\t\t\t\tsubTerms.add(new ParticleElementExpression(particle.getMinOccurs(), element));\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tsubTerms.add(new ParticleElementExpression(particle.getMinOccurs(), particle.getMaxOccurs(), element));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\telse if (term instanceof AttributeDefinition)\n-\t\t{\n-\t\t\tthrow new RuntimeException();\n-\t\t}\n-\t\telse if (term instanceof ModelGroup)\n-\t\t{\n-\t\t\tsubTerms.add(new ModelGroupExpression(particle, (ModelGroup)term));\n-\t\t}\n-\t\telse if (term instanceof SchemaWildcard)\n-\t\t{\n-\t\t\tsubTerms.add(new ParticleWildcardExpression(particle, (SchemaWildcard)term));\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tthrow new RuntimeException();\n-\t\t}\n-\t}\n-\n-\tprivate static  Iterable<ValidationExpr> compileSubTerms(final ModelGroup group)\n-\t{\n-\t\tfinal ArrayList<ValidationExpr> subTerms = new ArrayList<ValidationExpr>();\n-\n-\t\tfor (final SchemaParticle particle : group.getParticles())\n-\t\t{\n-\t\t\tcompile(particle, subTerms);\n-\t\t}\n-\t\treturn subTerms;\n-\t}\n-\n-\tprivate final ModelGroup m_group;\n-\n-\tprivate final SchemaParticle m_particle;\n-\n-\tprivate final Iterable<ValidationExpr> m_subTerms;\n-\n-\tpublic ModelGroupExpression(final SchemaParticle particle, final ModelGroup group)\n-\t{\n-\t\tm_particle = particle;\n-\t\tm_group = group;\n-\t\tm_subTerms = compileSubTerms(group);\n-\t}\n-\n-\tpublic ParticleTerm getParticleTerm()\n-\t{\n-\t\treturn m_group;\n-\t}\n-\n-\tpublic Iterable<ValidationExpr> getSubTerms()\n-\t{\n-\t\treturn m_subTerms;\n-\t}\n-\n-\tpublic boolean intersects(final ValidationExpr other)\n-\t{\n-\t\treturn false;\n-\t}\n-\n-\tpublic boolean isChoice()\n-\t{\n-\t\treturn m_group.getCompositor() == ModelGroup.SmCompositor.Choice;\n-\t}\n-\n-\tpublic boolean isGroup()\n-\t{\n-\t\treturn true;\n-\t}\n-\n-\tpublic boolean isInterleave()\n-\t{\n-\t\treturn m_group.getCompositor() == ModelGroup.SmCompositor.All;\n-\t}\n-\n-\tpublic boolean isMaxOccursUnbounded()\n-\t{\n-\t\treturn (null != m_particle) ? m_particle.isMaxOccursUnbounded() : false;\n-\t}\n-\n-\tpublic boolean isSequence()\n-\t{\n-\t\treturn m_group.getCompositor() == ModelGroup.SmCompositor.Sequence;\n-\t}\n-\n-\tpublic boolean matches(final QName token)\n-\t{\n-\t\treturn false;\n-\t}\n-\n-\tpublic int maxOccurs()\n-\t{\n-\t\treturn (null != m_particle) ? m_particle.getMaxOccurs() : 1;\n-\t}\n-\n-\tpublic int minOccurs()\n-\t{\n-\t\treturn (null != m_particle) ? m_particle.getMinOccurs() : 1;\n-\t}\n+final class ModelGroupExpression implements ValidationExpr {\n+    private static void compile(final SchemaParticle particle,\n+                                final ArrayList<ValidationExpr> subTerms) {\n+        final ParticleTerm term = particle.getTerm();\n+\n+        if (term instanceof ElementDefinition) {\n+            final ElementDefinition element = (ElementDefinition) term;\n+            if (element.hasSubstitutionGroupMembers()) {\n+                // Build a set of substitution element choices.\n+                final Stack<ElementDefinition> stack = new Stack<ElementDefinition>();\n+                stack.push(element);\n+                final HashSet<ElementDefinition> choices = new HashSet<ElementDefinition>();\n+                while (!stack.isEmpty()) {\n+                    final ElementDefinition popped = stack.pop();\n+                    choices.add(popped);\n+                    for (final ElementDefinition substitution : popped\n+                        .getSubstitutionGroupMembers()) {\n+                        stack.push(substitution);\n+                    }\n+                }\n+                if (particle.isMaxOccursUnbounded()) {\n+                    subTerms.add(new SubstitutionGroupExpression(particle.getMinOccurs(), choices));\n+                } else {\n+                    subTerms.add(new SubstitutionGroupExpression(particle.getMinOccurs(),\n+                        particle.getMaxOccurs(), choices));\n+                }\n+            } else {\n+                if (particle.isMaxOccursUnbounded()) {\n+                    subTerms.add(new ParticleElementExpression(particle.getMinOccurs(), element));\n+                } else {\n+                    subTerms.add(new ParticleElementExpression(particle.getMinOccurs(),\n+                        particle.getMaxOccurs(), element));\n+                }\n+            }\n+        } else if (term instanceof AttributeDefinition) {\n+            throw new RuntimeException();\n+        } else if (term instanceof ModelGroup) {\n+            subTerms.add(new ModelGroupExpression(particle, (ModelGroup) term));\n+        } else if (term instanceof SchemaWildcard) {\n+            subTerms.add(new ParticleWildcardExpression(particle, (SchemaWildcard) term));\n+        } else {\n+            throw new RuntimeException();\n+        }\n+    }\n+\n+    private static Iterable<ValidationExpr> compileSubTerms(final ModelGroup group) {\n+        final ArrayList<ValidationExpr> subTerms = new ArrayList<ValidationExpr>();\n+\n+        for (final SchemaParticle particle : group.getParticles()) {\n+            compile(particle, subTerms);\n+        }\n+        return subTerms;\n+    }\n+\n+    private final ModelGroup m_group;\n+\n+    private final SchemaParticle m_particle;\n+\n+    private final Iterable<ValidationExpr> m_subTerms;\n+\n+    public ModelGroupExpression(final SchemaParticle particle, final ModelGroup group) {\n+        m_particle = particle;\n+        m_group = group;\n+        m_subTerms = compileSubTerms(group);\n+    }\n+\n+    public ParticleTerm getParticleTerm() {\n+        return m_group;\n+    }\n+\n+    public Iterable<ValidationExpr> getSubTerms() {\n+        return m_subTerms;\n+    }\n+\n+    public boolean intersects(final ValidationExpr other) {\n+        return false;\n+    }\n+\n+    public boolean isChoice() {\n+        return m_group.getCompositor() == ModelGroup.SmCompositor.Choice;\n+    }\n+\n+    public boolean isGroup() {\n+        return true;\n+    }\n+\n+    public boolean isInterleave() {\n+        return m_group.getCompositor() == ModelGroup.SmCompositor.All;\n+    }\n+\n+    public boolean isMaxOccursUnbounded() {\n+        return (null != m_particle) ? m_particle.isMaxOccursUnbounded() : false;\n+    }\n+\n+    public boolean isSequence() {\n+        return m_group.getCompositor() == ModelGroup.SmCompositor.Sequence;\n+    }\n+\n+    public boolean matches(final QName token) {\n+        return false;\n+    }\n+\n+    public int maxOccurs() {\n+        return (null != m_particle) ? m_particle.getMaxOccurs() : 1;\n+    }\n+\n+    public int minOccurs() {\n+        return (null != m_particle) ? m_particle.getMinOccurs() : 1;\n+    }\n }\n",
            "diff_size": 146
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "34",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/317/ModelGroupExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/317/ModelGroupExpression.java\nindex efb6d3af3a8..3940c3e2612 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/317/ModelGroupExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/317/ModelGroupExpression.java\n@@ -30,77 +30,77 @@ import org.genxdm.xs.components.SchemaWildcard;\n \n final class ModelGroupExpression implements ValidationExpr\n {\n-\tprivate static  void compile(final SchemaParticle particle, final ArrayList<ValidationExpr> subTerms)\n+    private static void compile(final SchemaParticle particle, final ArrayList<ValidationExpr> subTerms)\n \t{\n-\t\tfinal ParticleTerm term = particle.getTerm();\n+    final ParticleTerm term = particle.getTerm();\n \n \t\tif (term instanceof ElementDefinition)\n \t\t{\n-\t\t\tfinal ElementDefinition element = (ElementDefinition)term;\n+    final ElementDefinition element = (ElementDefinition)term;\n \t\t\tif (element.hasSubstitutionGroupMembers())\n \t\t\t{\n-\t\t\t\t// Build a set of substitution element choices.\n+    // Build a set of substitution element choices.\n \t\t\t\tfinal Stack<ElementDefinition> stack = new Stack<ElementDefinition>();\n \t\t\t\tstack.push(element);\n \t\t\t\tfinal HashSet<ElementDefinition> choices = new HashSet<ElementDefinition>();\n \t\t\t\twhile (!stack.isEmpty())\n \t\t\t\t{\n-\t\t\t\t\tfinal ElementDefinition popped = stack.pop();\n+    final ElementDefinition popped = stack.pop();\n \t\t\t\t\tchoices.add(popped);\n \t\t\t\t\tfor (final ElementDefinition substitution : popped.getSubstitutionGroupMembers())\n \t\t\t\t\t{\n-\t\t\t\t\t\tstack.push(substitution);\n-\t\t\t\t\t}\n-\t\t\t\t}\n+    stack.push(substitution);\n+    }\n+    }\n \t\t\t\tif (particle.isMaxOccursUnbounded())\n \t\t\t\t{\n-\t\t\t\t\tsubTerms.add(new SubstitutionGroupExpression(particle.getMinOccurs(), choices));\n-\t\t\t\t}\n+    subTerms.add(new SubstitutionGroupExpression(particle.getMinOccurs(), choices));\n+    }\n \t\t\t\telse\n \t\t\t\t{\n-\t\t\t\t\tsubTerms.add(new SubstitutionGroupExpression(particle.getMinOccurs(), particle.getMaxOccurs(), choices));\n-\t\t\t\t}\n-\t\t\t}\n+    subTerms.add(new SubstitutionGroupExpression(particle.getMinOccurs(), particle.getMaxOccurs(), choices));\n+    }\n+    }\n \t\t\telse\n \t\t\t{\n-\t\t\t\tif (particle.isMaxOccursUnbounded())\n+    if (particle.isMaxOccursUnbounded())\n \t\t\t\t{\n-\t\t\t\t\tsubTerms.add(new ParticleElementExpression(particle.getMinOccurs(), element));\n-\t\t\t\t}\n+    subTerms.add(new ParticleElementExpression(particle.getMinOccurs(), element));\n+    }\n \t\t\t\telse\n \t\t\t\t{\n-\t\t\t\t\tsubTerms.add(new ParticleElementExpression(particle.getMinOccurs(), particle.getMaxOccurs(), element));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n+    subTerms.add(new ParticleElementExpression(particle.getMinOccurs(), particle.getMaxOccurs(), element));\n+    }\n+    }\n+    }\n \t\telse if (term instanceof AttributeDefinition)\n \t\t{\n-\t\t\tthrow new RuntimeException();\n-\t\t}\n+    throw new RuntimeException();\n+    }\n \t\telse if (term instanceof ModelGroup)\n \t\t{\n-\t\t\tsubTerms.add(new ModelGroupExpression(particle, (ModelGroup)term));\n-\t\t}\n+    subTerms.add(new ModelGroupExpression(particle, (ModelGroup)term));\n+    }\n \t\telse if (term instanceof SchemaWildcard)\n \t\t{\n-\t\t\tsubTerms.add(new ParticleWildcardExpression(particle, (SchemaWildcard)term));\n-\t\t}\n+    subTerms.add(new ParticleWildcardExpression(particle, (SchemaWildcard)term));\n+    }\n \t\telse\n \t\t{\n-\t\t\tthrow new RuntimeException();\n-\t\t}\n-\t}\n+    throw new RuntimeException();\n+    }\n+    }\n \n \tprivate static  Iterable<ValidationExpr> compileSubTerms(final ModelGroup group)\n \t{\n-\t\tfinal ArrayList<ValidationExpr> subTerms = new ArrayList<ValidationExpr>();\n+    final ArrayList<ValidationExpr> subTerms = new ArrayList<ValidationExpr>();\n \n \t\tfor (final SchemaParticle particle : group.getParticles())\n \t\t{\n-\t\t\tcompile(particle, subTerms);\n-\t\t}\n+    compile(particle, subTerms);\n+    }\n \t\treturn subTerms;\n-\t}\n+    }\n \n \tprivate final ModelGroup m_group;\n \n@@ -110,63 +110,63 @@ final class ModelGroupExpression implements ValidationExpr\n \n \tpublic ModelGroupExpression(final SchemaParticle particle, final ModelGroup group)\n \t{\n-\t\tm_particle = particle;\n+    m_particle = particle;\n \t\tm_group = group;\n \t\tm_subTerms = compileSubTerms(group);\n-\t}\n+    }\n \n \tpublic ParticleTerm getParticleTerm()\n \t{\n-\t\treturn m_group;\n-\t}\n+    return m_group;\n+    }\n \n \tpublic Iterable<ValidationExpr> getSubTerms()\n \t{\n-\t\treturn m_subTerms;\n-\t}\n+    return m_subTerms;\n+    }\n \n \tpublic boolean intersects(final ValidationExpr other)\n \t{\n-\t\treturn false;\n-\t}\n+    return false;\n+    }\n \n \tpublic boolean isChoice()\n \t{\n-\t\treturn m_group.getCompositor() == ModelGroup.SmCompositor.Choice;\n-\t}\n+    return m_group.getCompositor() == ModelGroup.SmCompositor.Choice;\n+    }\n \n \tpublic boolean isGroup()\n \t{\n-\t\treturn true;\n-\t}\n+    return true;\n+    }\n \n \tpublic boolean isInterleave()\n \t{\n-\t\treturn m_group.getCompositor() == ModelGroup.SmCompositor.All;\n-\t}\n+    return m_group.getCompositor() == ModelGroup.SmCompositor.All;\n+    }\n \n \tpublic boolean isMaxOccursUnbounded()\n \t{\n-\t\treturn (null != m_particle) ? m_particle.isMaxOccursUnbounded() : false;\n-\t}\n+    return (null != m_particle) ? m_particle.isMaxOccursUnbounded() : false;\n+    }\n \n \tpublic boolean isSequence()\n \t{\n-\t\treturn m_group.getCompositor() == ModelGroup.SmCompositor.Sequence;\n-\t}\n+    return m_group.getCompositor() == ModelGroup.SmCompositor.Sequence;\n+    }\n \n \tpublic boolean matches(final QName token)\n \t{\n-\t\treturn false;\n-\t}\n+    return false;\n+    }\n \n \tpublic int maxOccurs()\n \t{\n-\t\treturn (null != m_particle) ? m_particle.getMaxOccurs() : 1;\n-\t}\n+    return (null != m_particle) ? m_particle.getMaxOccurs() : 1;\n+    }\n \n \tpublic int minOccurs()\n \t{\n-\t\treturn (null != m_particle) ? m_particle.getMinOccurs() : 1;\n-\t}\n-}\n+    return (null != m_particle) ? m_particle.getMinOccurs() : 1;\n+    }\n+    }\n\\ No newline at end of file\n",
            "diff_size": 58
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/317/ModelGroupExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/317/ModelGroupExpression.java\nindex efb6d3af3a8..2ff12d1f990 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/317/ModelGroupExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/317/ModelGroupExpression.java\n@@ -18,9 +18,7 @@ package org.genxdm.processor.w3c.xs.validation.impl;\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.Stack;\n-\n import javax.xml.namespace.QName;\n-\n import org.genxdm.xs.components.AttributeDefinition;\n import org.genxdm.xs.components.ElementDefinition;\n import org.genxdm.xs.components.ModelGroup;\n@@ -30,143 +28,140 @@ import org.genxdm.xs.components.SchemaWildcard;\n \n final class ModelGroupExpression implements ValidationExpr\n {\n-\tprivate static  void compile(final SchemaParticle particle, final ArrayList<ValidationExpr> subTerms)\n-\t{\n-\t\tfinal ParticleTerm term = particle.getTerm();\n-\n-\t\tif (term instanceof ElementDefinition)\n-\t\t{\n-\t\t\tfinal ElementDefinition element = (ElementDefinition)term;\n-\t\t\tif (element.hasSubstitutionGroupMembers())\n-\t\t\t{\n-\t\t\t\t// Build a set of substitution element choices.\n-\t\t\t\tfinal Stack<ElementDefinition> stack = new Stack<ElementDefinition>();\n-\t\t\t\tstack.push(element);\n-\t\t\t\tfinal HashSet<ElementDefinition> choices = new HashSet<ElementDefinition>();\n-\t\t\t\twhile (!stack.isEmpty())\n-\t\t\t\t{\n-\t\t\t\t\tfinal ElementDefinition popped = stack.pop();\n-\t\t\t\t\tchoices.add(popped);\n-\t\t\t\t\tfor (final ElementDefinition substitution : popped.getSubstitutionGroupMembers())\n-\t\t\t\t\t{\n-\t\t\t\t\t\tstack.push(substitution);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tif (particle.isMaxOccursUnbounded())\n-\t\t\t\t{\n-\t\t\t\t\tsubTerms.add(new SubstitutionGroupExpression(particle.getMinOccurs(), choices));\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tsubTerms.add(new SubstitutionGroupExpression(particle.getMinOccurs(), particle.getMaxOccurs(), choices));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\tif (particle.isMaxOccursUnbounded())\n-\t\t\t\t{\n-\t\t\t\t\tsubTerms.add(new ParticleElementExpression(particle.getMinOccurs(), element));\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tsubTerms.add(new ParticleElementExpression(particle.getMinOccurs(), particle.getMaxOccurs(), element));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\telse if (term instanceof AttributeDefinition)\n-\t\t{\n-\t\t\tthrow new RuntimeException();\n-\t\t}\n-\t\telse if (term instanceof ModelGroup)\n-\t\t{\n-\t\t\tsubTerms.add(new ModelGroupExpression(particle, (ModelGroup)term));\n-\t\t}\n-\t\telse if (term instanceof SchemaWildcard)\n-\t\t{\n-\t\t\tsubTerms.add(new ParticleWildcardExpression(particle, (SchemaWildcard)term));\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tthrow new RuntimeException();\n-\t\t}\n-\t}\n-\n-\tprivate static  Iterable<ValidationExpr> compileSubTerms(final ModelGroup group)\n-\t{\n-\t\tfinal ArrayList<ValidationExpr> subTerms = new ArrayList<ValidationExpr>();\n-\n-\t\tfor (final SchemaParticle particle : group.getParticles())\n-\t\t{\n-\t\t\tcompile(particle, subTerms);\n-\t\t}\n-\t\treturn subTerms;\n-\t}\n-\n-\tprivate final ModelGroup m_group;\n-\n-\tprivate final SchemaParticle m_particle;\n-\n-\tprivate final Iterable<ValidationExpr> m_subTerms;\n-\n-\tpublic ModelGroupExpression(final SchemaParticle particle, final ModelGroup group)\n-\t{\n-\t\tm_particle = particle;\n-\t\tm_group = group;\n-\t\tm_subTerms = compileSubTerms(group);\n-\t}\n-\n-\tpublic ParticleTerm getParticleTerm()\n-\t{\n-\t\treturn m_group;\n-\t}\n-\n-\tpublic Iterable<ValidationExpr> getSubTerms()\n-\t{\n-\t\treturn m_subTerms;\n-\t}\n-\n-\tpublic boolean intersects(final ValidationExpr other)\n-\t{\n-\t\treturn false;\n-\t}\n-\n-\tpublic boolean isChoice()\n-\t{\n-\t\treturn m_group.getCompositor() == ModelGroup.SmCompositor.Choice;\n-\t}\n-\n-\tpublic boolean isGroup()\n-\t{\n-\t\treturn true;\n-\t}\n-\n-\tpublic boolean isInterleave()\n-\t{\n-\t\treturn m_group.getCompositor() == ModelGroup.SmCompositor.All;\n-\t}\n-\n-\tpublic boolean isMaxOccursUnbounded()\n-\t{\n-\t\treturn (null != m_particle) ? m_particle.isMaxOccursUnbounded() : false;\n-\t}\n-\n-\tpublic boolean isSequence()\n-\t{\n-\t\treturn m_group.getCompositor() == ModelGroup.SmCompositor.Sequence;\n-\t}\n-\n-\tpublic boolean matches(final QName token)\n-\t{\n-\t\treturn false;\n-\t}\n-\n-\tpublic int maxOccurs()\n-\t{\n-\t\treturn (null != m_particle) ? m_particle.getMaxOccurs() : 1;\n-\t}\n-\n-\tpublic int minOccurs()\n-\t{\n-\t\treturn (null != m_particle) ? m_particle.getMinOccurs() : 1;\n-\t}\n-}\n+    private static void compile(final SchemaParticle particle, final ArrayList<ValidationExpr> subTerms)\n+    {\n+        final ParticleTerm term = particle.getTerm();\n+        if (term instanceof ElementDefinition)\n+        {\n+            final ElementDefinition element = (ElementDefinition)term;\n+            if (element.hasSubstitutionGroupMembers())\n+            {\n+                // Build a set of substitution element choices.\n+                final Stack<ElementDefinition> stack = new Stack<ElementDefinition>();\n+                stack.push(element);\n+\n+                final HashSet<ElementDefinition> choices = new HashSet<ElementDefinition>();\n+                while (!stack.isEmpty())\n+                {\n+                    final ElementDefinition popped = stack.pop();\n+                    choices.add(popped);\n+                    for (final ElementDefinition substitution : popped.getSubstitutionGroupMembers())\n+                    {\n+                        stack.push(substitution);\n+                    }\n+                }\n+                if (particle.isMaxOccursUnbounded())\n+                {\n+                    subTerms.add(new SubstitutionGroupExpression(particle.getMinOccurs(), choices));\n+                }\n+                else\n+                {\n+                    subTerms.add(new SubstitutionGroupExpression(particle.getMinOccurs(), particle.getMaxOccurs(), choices));\n+                }\n+            }\n+            else\n+            {\n+                if (particle.isMaxOccursUnbounded())\n+                {\n+                    subTerms.add(new ParticleElementExpression(particle.getMinOccurs(), element));\n+                }\n+                else\n+                {\n+                    subTerms.add(new ParticleElementExpression(particle.getMinOccurs(), particle.getMaxOccurs(), element));\n+                }\n+            }\n+        }\n+        else if (term instanceof AttributeDefinition)\n+        {\n+            throw new RuntimeException();\n+        }\n+        else if (term instanceof ModelGroup)\n+        {\n+            subTerms.add(new ModelGroupExpression(particle, (ModelGroup)term));\n+        }\n+        else if (term instanceof SchemaWildcard)\n+        {\n+            subTerms.add(new ParticleWildcardExpression(particle, (SchemaWildcard)term));\n+        }\n+        else\n+        {\n+            throw new RuntimeException();\n+        }\n+    }\n+\n+    private static Iterable<ValidationExpr> compileSubTerms(final ModelGroup group)\n+    {\n+        final ArrayList<ValidationExpr> subTerms = new ArrayList<ValidationExpr>();\n+        for (final SchemaParticle particle : group.getParticles())\n+        {\n+            compile(particle, subTerms);\n+        }\n+        return subTerms;\n+    }\n+\n+    private final ModelGroup m_group;\n+    private final SchemaParticle m_particle;\n+    private final Iterable<ValidationExpr> m_subTerms;\n+\n+    public ModelGroupExpression(final SchemaParticle particle, final ModelGroup group)\n+    {\n+        m_particle = particle;\n+        m_group = group;\n+        m_subTerms = compileSubTerms(group);\n+    }\n+\n+    public ParticleTerm getParticleTerm()\n+    {\n+        return m_group;\n+    }\n+\n+    public Iterable<ValidationExpr> getSubTerms()\n+    {\n+        return m_subTerms;\n+    }\n+\n+    public boolean intersects(final ValidationExpr other)\n+    {\n+        return false;\n+    }\n+\n+    public boolean isChoice()\n+    {\n+        return m_group.getCompositor() == ModelGroup.SmCompositor.Choice;\n+    }\n+\n+    public boolean isGroup()\n+    {\n+        return true;\n+    }\n+\n+    public boolean isInterleave()\n+    {\n+        return m_group.getCompositor() == ModelGroup.SmCompositor.All;\n+    }\n+\n+    public boolean isMaxOccursUnbounded()\n+    {\n+        return (null != m_particle) ? m_particle.isMaxOccursUnbounded() : false;\n+    }\n+\n+    public boolean isSequence()\n+    {\n+        return m_group.getCompositor() == ModelGroup.SmCompositor.Sequence;\n+    }\n+\n+    public boolean matches(final QName token)\n+    {\n+        return false;\n+    }\n+\n+    public int maxOccurs()\n+    {\n+        return (null != m_particle) ? m_particle.getMaxOccurs() : 1;\n+    }\n+\n+    public int minOccurs()\n+    {\n+        return (null != m_particle) ? m_particle.getMinOccurs() : 1;\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 142
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "34",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/317/ModelGroupExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/317/ModelGroupExpression.java\nindex efb6d3af3a8..6ec0a644f91 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/317/ModelGroupExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/317/ModelGroupExpression.java\n@@ -30,7 +30,7 @@ import org.genxdm.xs.components.SchemaWildcard;\n \n final class ModelGroupExpression implements ValidationExpr\n {\n-\tprivate static  void compile(final SchemaParticle particle, final ArrayList<ValidationExpr> subTerms)\n+private static  void compile(final SchemaParticle particle, final ArrayList<ValidationExpr> subTerms)\n \t{\n \t\tfinal ParticleTerm term = particle.getTerm();\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "34",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/317/ModelGroupExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/317/ModelGroupExpression.java\nindex efb6d3af3a8..7c1a60788d0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/317/ModelGroupExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/317/ModelGroupExpression.java\n@@ -30,7 +30,7 @@ import org.genxdm.xs.components.SchemaWildcard;\n \n final class ModelGroupExpression implements ValidationExpr\n {\n-\tprivate static  void compile(final SchemaParticle particle, final ArrayList<ValidationExpr> subTerms)\n+    private static  void compile(final SchemaParticle particle, final ArrayList<ValidationExpr> subTerms)\n \t{\n \t\tfinal ParticleTerm term = particle.getTerm();\n \n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}