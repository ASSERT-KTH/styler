{
    "project_name": "opencb-opencga",
    "error_id": "337",
    "information": {
        "errors": [
            {
                "line": "167",
                "severity": "error",
                "message": "Line is longer than 140 characters (found 145).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        // Check BAM file\n        if (catalogBamFile == null) {\n            addWarning(\"Skipping picard/CollectHsMetrics analysis: no BAM file was provided and no BAM file found for sample \" + sample.getId());\n            return;\n        }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "167",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/337/SampleQcLocalAnalysisExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/337/SampleQcLocalAnalysisExecutor.java\nindex a511d38b9f6..79d3bb1098d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/337/SampleQcLocalAnalysisExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/337/SampleQcLocalAnalysisExecutor.java\n@@ -45,264 +45,264 @@ import java.util.List;\n \n import static org.opencb.opencga.core.api.ParamConstants.LOW_COVERAGE_REGION_THRESHOLD_DEFAULT;\n \n-@ToolExecutor(id=\"opencga-local\", tool = SampleQcAnalysis.ID, framework = ToolExecutor.Framework.LOCAL,\n-        source = ToolExecutor.Source.STORAGE)\n+@ToolExecutor(id = \"opencga-local\", tool = SampleQcAnalysis.ID, framework = ToolExecutor.Framework.LOCAL,\n+    source = ToolExecutor.Source.STORAGE)\n public class SampleQcLocalAnalysisExecutor extends SampleQcAnalysisExecutor implements StorageToolExecutor {\n \n-    private CatalogManager catalogManager;\n+  private CatalogManager catalogManager;\n \n-    @Override\n-    public void run() throws ToolException {\n-        // Sanity check: metrics to update can not be null\n-        if (metrics == null) {\n-            throw new ToolException(\"Sample quality control metrics is null\");\n-        }\n+  @Override\n+  public void run() throws ToolException {\n+    // Sanity check: metrics to update can not be null\n+    if (metrics == null) {\n+      throw new ToolException(\"Sample quality control metrics is null\");\n+    }\n \n-        catalogManager = getVariantStorageManager().getCatalogManager();\n+    catalogManager = getVariantStorageManager().getCatalogManager();\n \n-        switch (qcType) {\n-            case FASTQC: {\n-                runFastqc();\n-                break;\n-            }\n+    switch (qcType) {\n+      case FASTQC: {\n+        runFastqc();\n+        break;\n+      }\n \n-            case FLAG_STATS: {\n-                runFlagStats();\n-                break;\n-            }\n+      case FLAG_STATS: {\n+        runFlagStats();\n+        break;\n+      }\n \n-            case HS_METRICS: {\n-                runHsMetrics();\n-                break;\n-            }\n+      case HS_METRICS: {\n+        runHsMetrics();\n+        break;\n+      }\n \n-            case GENE_COVERAGE_STATS: {\n-                runGeneCoverageStats();\n-                break;\n-            }\n+      case GENE_COVERAGE_STATS: {\n+        runGeneCoverageStats();\n+        break;\n+      }\n \n-            default: {\n-                throw new ToolException(\"Unknown quality control type: \" + qcType);\n-            }\n-        }\n+      default: {\n+        throw new ToolException(\"Unknown quality control type: \" + qcType);\n+      }\n     }\n+  }\n \n-    private void runFastqc() throws ToolException {\n-        if (metrics.getFastQc() != null) {\n-            // FastQC already exists!\n-            addWarning(\"Skipping FastQC analysis: it was already computed\");\n-            return;\n-        }\n+  private void runFastqc() throws ToolException {\n+    if (metrics.getFastQc() != null) {\n+      // FastQC already exists!\n+      addWarning(\"Skipping FastQC analysis: it was already computed\");\n+      return;\n+    }\n \n-        // Check BAM file\n-        if (catalogBamFile == null) {\n-            addWarning(\"Skipping FastQC analysis: no BAM file was provided\");\n-            return;\n-        }\n+    // Check BAM file\n+    if (catalogBamFile == null) {\n+      addWarning(\"Skipping FastQC analysis: no BAM file was provided\");\n+      return;\n+    }\n \n-        ObjectMap params = new ObjectMap();\n-        params.put(\"extract\", \"\");\n+    ObjectMap params = new ObjectMap();\n+    params.put(\"extract\", \"\");\n \n-        Path outDir = getOutDir().resolve(\"fastqc\");\n-        Path scratchDir = outDir.resolve(\"scratch\");\n-        scratchDir.toFile().mkdirs();\n+    Path outDir = getOutDir().resolve(\"fastqc\");\n+    Path scratchDir = outDir.resolve(\"scratch\");\n+    scratchDir.toFile().mkdirs();\n \n-        FastqcWrapperAnalysisExecutor executor = new FastqcWrapperAnalysisExecutor(getStudyId(), params, outDir, scratchDir, catalogManager,\n-                getToken());\n+    FastqcWrapperAnalysisExecutor executor = new FastqcWrapperAnalysisExecutor(getStudyId(), params, outDir, scratchDir, catalogManager,\n+        getToken());\n \n-        executor.setFile(catalogBamFile.getId());\n-        executor.run();\n+    executor.setFile(catalogBamFile.getId());\n+    executor.run();\n \n-        // Check for result\n-        FastQc fastQc = executor.getResult();\n-        if (fastQc != null) {\n-            metrics.setFastQc(fastQc);\n-        }\n+    // Check for result\n+    FastQc fastQc = executor.getResult();\n+    if (fastQc != null) {\n+      metrics.setFastQc(fastQc);\n     }\n+  }\n \n-    private void runFlagStats() throws ToolException {\n-        if (metrics.getSamtoolsFlagstats() != null) {\n-            // Samtools flag stats already exists!\n-            addWarning(\"Skipping samtools/flagstat analysis: it was already computed\");\n-            return;\n-        }\n+  private void runFlagStats() throws ToolException {\n+    if (metrics.getSamtoolsFlagstats() != null) {\n+      // Samtools flag stats already exists!\n+      addWarning(\"Skipping samtools/flagstat analysis: it was already computed\");\n+      return;\n+    }\n \n-        // Check BAM file\n-        if (catalogBamFile == null) {\n-            addWarning(\"Skipping samtools/flagstat analysis: no BAM file was provided\");\n-            return;\n-        }\n+    // Check BAM file\n+    if (catalogBamFile == null) {\n+      addWarning(\"Skipping samtools/flagstat analysis: no BAM file was provided\");\n+      return;\n+    }\n \n-        ObjectMap params = new ObjectMap();\n+    ObjectMap params = new ObjectMap();\n \n-        Path outDir = getOutDir().resolve(\"flagstat\");\n-        Path scratchDir = outDir.resolve(\"scratch\");\n-        scratchDir.toFile().mkdirs();\n+    Path outDir = getOutDir().resolve(\"flagstat\");\n+    Path scratchDir = outDir.resolve(\"scratch\");\n+    scratchDir.toFile().mkdirs();\n \n-        SamtoolsWrapperAnalysisExecutor executor = new SamtoolsWrapperAnalysisExecutor(getStudyId(), params, outDir, scratchDir,\n-                catalogManager, getToken());\n+    SamtoolsWrapperAnalysisExecutor executor = new SamtoolsWrapperAnalysisExecutor(getStudyId(), params, outDir, scratchDir,\n+        catalogManager, getToken());\n \n-        executor.setCommand(\"flagstat\");\n-        executor.setBamFile(catalogBamFile.getId());\n-        executor.run();\n+    executor.setCommand(\"flagstat\");\n+    executor.setBamFile(catalogBamFile.getId());\n+    executor.run();\n \n-        // Check for result\n-        SamtoolsFlagstats flagtats = executor.getFlagstatsResult();\n-        if (flagtats != null) {\n-            metrics.setSamtoolsFlagstats(flagtats);\n-        }\n+    // Check for result\n+    SamtoolsFlagstats flagtats = executor.getFlagstatsResult();\n+    if (flagtats != null) {\n+      metrics.setSamtoolsFlagstats(flagtats);\n     }\n+  }\n \n-    private void runHsMetrics() throws ToolException {\n-        addWarning(\"Skipping picard/CollectHsMetrics analysis: not yet implemented\");\n+  private void runHsMetrics() throws ToolException {\n+    addWarning(\"Skipping picard/CollectHsMetrics analysis: not yet implemented\");\n \n-        if (metrics.getHsMetrics() != null) {\n-            // Hs metrics already exists!\n-            addWarning(\"Skipping picard/CollectHsMetrics analysis: it was already computed\");\n-            return;\n-        }\n+    if (metrics.getHsMetrics() != null) {\n+      // Hs metrics already exists!\n+      addWarning(\"Skipping picard/CollectHsMetrics analysis: it was already computed\");\n+      return;\n+    }\n \n-        // Check BAM file\n-        if (catalogBamFile == null) {\n-            addWarning(\"Skipping picard/CollectHsMetrics analysis: no BAM file was provided and no BAM file found for sample \" + sample.getId());\n-            return;\n-        }\n+    // Check BAM file\n+    if (catalogBamFile == null) {\n+      addWarning(\"Skipping picard/CollectHsMetrics analysis: no BAM file was provided and no BAM file found for sample \" + sample.getId());\n+      return;\n+    }\n \n-        // Check bait file\n-        if (StringUtils.isEmpty(getBaitFile())) {\n-            addWarning(\"Skipping picard/CollectHsMetrics analysis: no bait file was provided\");\n-            return;\n-        }\n-        File bedBaitFile;\n-        try {\n-            bedBaitFile = AnalysisUtils.getCatalogFile(getBaitFile(), getStudyId(), catalogManager.getFileManager(), getToken());\n-        } catch (CatalogException e) {\n-            throw new ToolException(e);\n-        }\n+    // Check bait file\n+    if (StringUtils.isEmpty(getBaitFile())) {\n+      addWarning(\"Skipping picard/CollectHsMetrics analysis: no bait file was provided\");\n+      return;\n+    }\n+    File bedBaitFile;\n+    try {\n+      bedBaitFile = AnalysisUtils.getCatalogFile(getBaitFile(), getStudyId(), catalogManager.getFileManager(), getToken());\n+    } catch (CatalogException e) {\n+      throw new ToolException(e);\n+    }\n \n-        // Check dictionary file\n-        if (StringUtils.isEmpty(getDictFile())) {\n-            addWarning(\"Skipping picard/CollectHsMetrics analysis: no dictionary file was provided\");\n-            return;\n-        }\n-        File dictFile;\n-        try {\n-            dictFile = AnalysisUtils.getCatalogFile(getDictFile(), getStudyId(), catalogManager.getFileManager(), getToken());\n-        } catch (CatalogException e) {\n-            throw new ToolException(e);\n-        }\n+    // Check dictionary file\n+    if (StringUtils.isEmpty(getDictFile())) {\n+      addWarning(\"Skipping picard/CollectHsMetrics analysis: no dictionary file was provided\");\n+      return;\n+    }\n+    File dictFile;\n+    try {\n+      dictFile = AnalysisUtils.getCatalogFile(getDictFile(), getStudyId(), catalogManager.getFileManager(), getToken());\n+    } catch (CatalogException e) {\n+      throw new ToolException(e);\n+    }\n \n-        // Run picard/BedToIntervalList, to convert BED file to INTERVAL\n-        String intervalFilename = bedBaitFile.getName() + \".interval\";\n-        ObjectMap params = new ObjectMap()\n-                .append(\"I\", bedBaitFile.getId())\n-                .append(\"SD\", dictFile.getId())\n-                .append(\"O\", intervalFilename);\n+    // Run picard/BedToIntervalList, to convert BED file to INTERVAL\n+    String intervalFilename = bedBaitFile.getName() + \".interval\";\n+    ObjectMap params = new ObjectMap()\n+        .append(\"I\", bedBaitFile.getId())\n+        .append(\"SD\", dictFile.getId())\n+        .append(\"O\", intervalFilename);\n \n \n-        Path picardDir = getOutDir().resolve(\"picard\");\n-        Path picardScratchDir = picardDir.resolve(\"scratch\");\n-        picardScratchDir.toFile().mkdirs();\n+    Path picardDir = getOutDir().resolve(\"picard\");\n+    Path picardScratchDir = picardDir.resolve(\"scratch\");\n+    picardScratchDir.toFile().mkdirs();\n \n-        PicardWrapperAnalysisExecutor picardExecutor = new PicardWrapperAnalysisExecutor(getStudyId(), params, picardDir, picardScratchDir,\n-                catalogManager, getToken());\n+    PicardWrapperAnalysisExecutor picardExecutor = new PicardWrapperAnalysisExecutor(getStudyId(), params, picardDir, picardScratchDir,\n+        catalogManager, getToken());\n \n-        picardExecutor.setCommand(\"BedToIntervalList\");\n-        picardExecutor.run();\n+    picardExecutor.setCommand(\"BedToIntervalList\");\n+    picardExecutor.run();\n \n-        if (!picardDir.resolve(intervalFilename).toFile().exists()) {\n-            throw new ToolException(\"Error converting BED file '\" + getBaitFile() + \"' to interval format using Picard\"\n-                    + \" command: \" + picardExecutor.getCommand());\n-        }\n+    if (!picardDir.resolve(intervalFilename).toFile().exists()) {\n+      throw new ToolException(\"Error converting BED file '\" + getBaitFile() + \"' to interval format using Picard\"\n+          + \" command: \" + picardExecutor.getCommand());\n+    }\n \n-        // Link interval file to catalog, we need to do it to execute CollectHsMetrics\n-        File intervalFile;\n-        try {\n-            intervalFile = catalogManager.getFileManager().link(getStudyId(), picardDir.resolve(intervalFilename).toUri(),\n-                    \"BedToIntervalList.\" + RandomStringUtils.randomAlphabetic(6), new ObjectMap(\"parents\", true), getToken()).first();\n+    // Link interval file to catalog, we need to do it to execute CollectHsMetrics\n+    File intervalFile;\n+    try {\n+      intervalFile = catalogManager.getFileManager().link(getStudyId(), picardDir.resolve(intervalFilename).toUri(),\n+          \"BedToIntervalList.\" + RandomStringUtils.randomAlphabetic(6), new ObjectMap(\"parents\", true), getToken()).first();\n \n-        } catch (CatalogException e) {\n-            throw new ToolException(e);\n-        }\n+    } catch (CatalogException e) {\n+      throw new ToolException(e);\n+    }\n \n-        // Run picard/CollectHsMetrics\n-        String hsMetricsFilename = \"hsmetrics.txt\";\n-        params = new ObjectMap()\n-                .append(\"I\", catalogBamFile.getId())\n-                .append(\"BI\", intervalFile.getId())\n-                .append(\"TI\", intervalFile.getId())\n-                .append(\"O\", hsMetricsFilename);\n-        picardExecutor = new PicardWrapperAnalysisExecutor(getStudyId(), params, picardDir, picardScratchDir, catalogManager, getToken());\n+    // Run picard/CollectHsMetrics\n+    String hsMetricsFilename = \"hsmetrics.txt\";\n+    params = new ObjectMap()\n+        .append(\"I\", catalogBamFile.getId())\n+        .append(\"BI\", intervalFile.getId())\n+        .append(\"TI\", intervalFile.getId())\n+        .append(\"O\", hsMetricsFilename);\n+    picardExecutor = new PicardWrapperAnalysisExecutor(getStudyId(), params, picardDir, picardScratchDir, catalogManager, getToken());\n \n-        picardExecutor.setCommand(\"CollectHsMetrics\");\n-        picardExecutor.run();\n+    picardExecutor.setCommand(\"CollectHsMetrics\");\n+    picardExecutor.run();\n \n-        if (!picardDir.resolve(hsMetricsFilename).toFile().exists()) {\n-            throw new ToolException(\"Error running Picard command: \" + picardExecutor.getCommand());\n-        }\n+    if (!picardDir.resolve(hsMetricsFilename).toFile().exists()) {\n+      throw new ToolException(\"Error running Picard command: \" + picardExecutor.getCommand());\n+    }\n \n-        try {\n-            // Parse Hs metrics and update sample quality control\n-            HsMetrics hsMetrics = HsMetricsParser.parse(picardDir.resolve(hsMetricsFilename).toFile());\n-            metrics.setHsMetrics(hsMetrics);\n-        } catch (IOException e) {\n-            throw new ToolException(e);\n-        }\n+    try {\n+      // Parse Hs metrics and update sample quality control\n+      HsMetrics hsMetrics = HsMetricsParser.parse(picardDir.resolve(hsMetricsFilename).toFile());\n+      metrics.setHsMetrics(hsMetrics);\n+    } catch (IOException e) {\n+      throw new ToolException(e);\n     }\n+  }\n \n-    private void runGeneCoverageStats() throws ToolException {\n-        // Check BAM file\n-        if (catalogBamFile == null) {\n-            addWarning(\"Skipping gene coverage stats analysis: no BAM file was provided\");\n-            return;\n-        }\n+  private void runGeneCoverageStats() throws ToolException {\n+    // Check BAM file\n+    if (catalogBamFile == null) {\n+      addWarning(\"Skipping gene coverage stats analysis: no BAM file was provided\");\n+      return;\n+    }\n \n-        // Check genes\n-        if (CollectionUtils.isEmpty(getGenesForCoverageStats())) {\n-            addWarning(\"Skipping gene coverage stats analysis: missing genes\");\n-            return;\n-        }\n+    // Check genes\n+    if (CollectionUtils.isEmpty(getGenesForCoverageStats())) {\n+      addWarning(\"Skipping gene coverage stats analysis: missing genes\");\n+      return;\n+    }\n \n-        // Sanity check\n-        List<GeneCoverageStats> geneCoverageStats = metrics.getGeneCoverageStats();\n-        if (geneCoverageStats == null) {\n-            geneCoverageStats = new ArrayList<>();\n-        }\n+    // Sanity check\n+    List<GeneCoverageStats> geneCoverageStats = metrics.getGeneCoverageStats();\n+    if (geneCoverageStats == null) {\n+      geneCoverageStats = new ArrayList<>();\n+    }\n \n-        List<String> targetGenes = new ArrayList<>();\n-        if (CollectionUtils.isEmpty(geneCoverageStats)) {\n-            targetGenes = getGenesForCoverageStats();\n-        } else {\n-            for (String gene : getGenesForCoverageStats()) {\n-                boolean found = false;\n-                for (GeneCoverageStats stats : geneCoverageStats) {\n-                    if (gene.equals(stats.getGeneName())) {\n-                        found = true;\n-                        addWarning(\"Skipping gene coverage stats for gene \" + gene + \": it was already computed\");\n-                        break;\n-                    }\n-                }\n-                if (!found) {\n-                    targetGenes.add(gene);\n-                }\n-            }\n+    List<String> targetGenes = new ArrayList<>();\n+    if (CollectionUtils.isEmpty(geneCoverageStats)) {\n+      targetGenes = getGenesForCoverageStats();\n+    } else {\n+      for (String gene : getGenesForCoverageStats()) {\n+        boolean found = false;\n+        for (GeneCoverageStats stats : geneCoverageStats) {\n+          if (gene.equals(stats.getGeneName())) {\n+            found = true;\n+            addWarning(\"Skipping gene coverage stats for gene \" + gene + \": it was already computed\");\n+            break;\n+          }\n+        }\n+        if (!found) {\n+          targetGenes.add(gene);\n         }\n+      }\n+    }\n \n-        if (CollectionUtils.isNotEmpty(targetGenes)) {\n-            try {\n-                OpenCGAResult<GeneCoverageStats> geneCoverageStatsResult = getAlignmentStorageManager().coverageStats(getStudyId(),\n-                        catalogBamFile.getId(), targetGenes, Integer.parseInt(LOW_COVERAGE_REGION_THRESHOLD_DEFAULT), getToken());\n-\n-                if (geneCoverageStatsResult.getNumResults() != 1) {\n-                    throw new ToolException(\"Something wrong happened when computing gene coverage stats: no results returned\");\n-                }\n-                geneCoverageStats.add(geneCoverageStatsResult.first());\n-\n-                // Add result to the list\n-                metrics.setGeneCoverageStats(geneCoverageStats);\n-            } catch (Exception e) {\n-                throw new ToolException(e);\n-            }\n+    if (CollectionUtils.isNotEmpty(targetGenes)) {\n+      try {\n+        OpenCGAResult<GeneCoverageStats> geneCoverageStatsResult = getAlignmentStorageManager().coverageStats(getStudyId(),\n+            catalogBamFile.getId(), targetGenes, Integer.parseInt(LOW_COVERAGE_REGION_THRESHOLD_DEFAULT), getToken());\n+\n+        if (geneCoverageStatsResult.getNumResults() != 1) {\n+          throw new ToolException(\"Something wrong happened when computing gene coverage stats: no results returned\");\n         }\n+        geneCoverageStats.add(geneCoverageStatsResult.first());\n+\n+        // Add result to the list\n+        metrics.setGeneCoverageStats(geneCoverageStats);\n+      } catch (Exception e) {\n+        throw new ToolException(e);\n+      }\n     }\n+  }\n }\n",
            "diff_size": 222
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "164",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/337/SampleQcLocalAnalysisExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/337/SampleQcLocalAnalysisExecutor.java\nindex a511d38b9f6..3cfec5e2a72 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/337/SampleQcLocalAnalysisExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/337/SampleQcLocalAnalysisExecutor.java\n@@ -45,7 +45,7 @@ import java.util.List;\n \n import static org.opencb.opencga.core.api.ParamConstants.LOW_COVERAGE_REGION_THRESHOLD_DEFAULT;\n \n-@ToolExecutor(id=\"opencga-local\", tool = SampleQcAnalysis.ID, framework = ToolExecutor.Framework.LOCAL,\n+@ToolExecutor(id = \"opencga-local\", tool = SampleQcAnalysis.ID, framework = ToolExecutor.Framework.LOCAL,\n         source = ToolExecutor.Source.STORAGE)\n public class SampleQcLocalAnalysisExecutor extends SampleQcAnalysisExecutor implements StorageToolExecutor {\n \n@@ -65,18 +65,15 @@ public class SampleQcLocalAnalysisExecutor extends SampleQcAnalysisExecutor impl\n                 runFastqc();\n                 break;\n             }\n-\n-            case FLAG_STATS: {\n+case FLAG_STATS: {\n                 runFlagStats();\n                 break;\n             }\n-\n-            case HS_METRICS: {\n+case HS_METRICS: {\n                 runHsMetrics();\n                 break;\n             }\n-\n-            case GENE_COVERAGE_STATS: {\n+case GENE_COVERAGE_STATS: {\n                 runGeneCoverageStats();\n                 break;\n             }\n@@ -198,9 +195,7 @@ public class SampleQcLocalAnalysisExecutor extends SampleQcAnalysisExecutor impl\n                 .append(\"I\", bedBaitFile.getId())\n                 .append(\"SD\", dictFile.getId())\n                 .append(\"O\", intervalFilename);\n-\n-\n-        Path picardDir = getOutDir().resolve(\"picard\");\n+Path picardDir = getOutDir().resolve(\"picard\");\n         Path picardScratchDir = picardDir.resolve(\"scratch\");\n         picardScratchDir.toFile().mkdirs();\n \n@@ -305,4 +300,4 @@ public class SampleQcLocalAnalysisExecutor extends SampleQcAnalysisExecutor impl\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "167",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "167",
                    "column": "127",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "167",
                    "column": "128",
                    "severity": "error",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "168",
                    "column": "22",
                    "severity": "error",
                    "message": "';' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "168",
                    "column": "22",
                    "severity": "error",
                    "message": "'return' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/337/SampleQcLocalAnalysisExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/337/SampleQcLocalAnalysisExecutor.java\nindex a511d38b9f6..b99362c113d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/337/SampleQcLocalAnalysisExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/337/SampleQcLocalAnalysisExecutor.java\n@@ -164,8 +164,8 @@ public class SampleQcLocalAnalysisExecutor extends SampleQcAnalysisExecutor impl\n \n         // Check BAM file\n         if (catalogBamFile == null) {\n-            addWarning(\"Skipping picard/CollectHsMetrics analysis: no BAM file was provided and no BAM file found for sample \" + sample.getId());\n-            return;\n+            addWarning(\"Skipping picard/CollectHsMetrics analysis: no BAM file was provided and no BAM file found for sample \"+sample.\n+            getId());return;\n         }\n \n         // Check bait file\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}