{
    "project_name": "neo4j-neo4j",
    "error_id": "2307",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "70",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2307/FileRepositorySerializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2307/FileRepositorySerializer.java\nindex 95a79708902..de13ab0bbf5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2307/FileRepositorySerializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2307/FileRepositorySerializer.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.server.security.auth;\n \n import java.io.IOException;\n@@ -41,88 +42,87 @@ public abstract class FileRepositorySerializer<S>\n {\n     private final SecureRandom random = new SecureRandom();\n \n-    public static void writeToFile( FileSystemAbstraction fs, Path path, byte[] bytes ) throws IOException\n+    public static void writeToFile(FileSystemAbstraction fs, Path path, byte[] bytes) throws IOException\n     {\n-        try ( OutputStream o = fs.openAsOutputStream( path, false ) )\n+        try (OutputStream o = fs.openAsOutputStream(path, false))\n         {\n-            o.write( bytes );\n+            o.write(bytes);\n         }\n     }\n \n-    private static List<String> readFromFile( FileSystemAbstraction fs, Path path ) throws IOException\n+    private static List<String> readFromFile(FileSystemAbstraction fs, Path path) throws IOException\n     {\n-        try ( var reader = fs.openAsReader( path, UTF_8 ) )\n+        try (var reader = fs.openAsReader(path, UTF_8))\n         {\n-            return readLines( reader );\n+            return readLines(reader);\n         }\n     }\n \n-    public void saveRecordsToFile( FileSystemAbstraction fileSystem, Path recordsFile, Collection<S> records ) throws\n-            IOException\n+    public void saveRecordsToFile(FileSystemAbstraction fileSystem, Path recordsFile, Collection<S> records) throws\n+      IOException\n     {\n-        Path tempFile = getTempFile( fileSystem, recordsFile );\n+        Path tempFile = getTempFile(fileSystem, recordsFile);\n \n         try\n         {\n-            writeToFile( fileSystem, tempFile, serialize( records ) );\n-            fileSystem.renameFile( tempFile, recordsFile, ATOMIC_MOVE, REPLACE_EXISTING );\n-        }\n-        catch ( Throwable e )\n+            writeToFile(fileSystem, tempFile, serialize(records));\n+            fileSystem.renameFile(tempFile, recordsFile, ATOMIC_MOVE, REPLACE_EXISTING);\n+        } catch (Throwable e)\n         {\n-            fileSystem.deleteFile( tempFile );\n+            fileSystem.deleteFile(tempFile);\n             throw e;\n         }\n     }\n \n-    private Path getTempFile( FileSystemAbstraction fileSystem, Path recordsFile ) throws IOException\n+    private Path getTempFile(FileSystemAbstraction fileSystem, Path recordsFile) throws IOException\n     {\n         Path directory = recordsFile.getParent();\n-        if ( !fileSystem.fileExists( directory ) )\n+        if (!fileSystem.fileExists(directory))\n         {\n-            fileSystem.mkdirs( directory );\n+            fileSystem.mkdirs(directory);\n         }\n \n         long n = random.nextLong();\n-        n = (n == Long.MIN_VALUE) ? 0 : Math.abs( n );\n-        return directory.resolve( n + \"_\" + recordsFile.getFileName() + \".tmp\" );\n+        n = (n == Long.MIN_VALUE) ? 0 : Math.abs(n);\n+        return directory.resolve(n + \"_\" + recordsFile.getFileName() + \".tmp\");\n     }\n \n-    public List<S> loadRecordsFromFile( FileSystemAbstraction fileSystem, Path recordsFile ) throws IOException, FormatException\n+    public List<S> loadRecordsFromFile(FileSystemAbstraction fileSystem, Path recordsFile) throws IOException, FormatException\n     {\n-        return deserializeRecords( readFromFile( fileSystem, recordsFile ) );\n+        return deserializeRecords(readFromFile(fileSystem, recordsFile));\n     }\n \n-    public byte[] serialize( Collection<S> records )\n+    public byte[] serialize(Collection<S> records)\n     {\n         StringBuilder sb = new StringBuilder();\n-        for ( S record : records )\n+        for (S record : records)\n         {\n-            sb.append( serialize( record ) ).append( \"\\n\" );\n+            sb.append(serialize(record)).append(\"\\n\");\n         }\n-        return UTF8.encode( sb.toString() );\n+        return UTF8.encode(sb.toString());\n     }\n \n-    public List<S> deserializeRecords( byte[] bytes ) throws FormatException\n+    public List<S> deserializeRecords(byte[] bytes) throws FormatException\n     {\n-        return deserializeRecords( Arrays.asList( UTF8.decode( bytes ).split( \"\\n\" ) ) );\n+        return deserializeRecords(Arrays.asList(UTF8.decode(bytes).split(\"\\n\")));\n     }\n \n-    private List<S> deserializeRecords( List<String> lines ) throws FormatException\n+    private List<S> deserializeRecords(List<String> lines) throws FormatException\n     {\n         List<S> out = new ArrayList<>();\n         int lineNumber = 1;\n-        for ( String line : lines )\n+        for (String line : lines)\n         {\n-            if ( !line.isBlank() )\n+            if (!line.isBlank())\n             {\n-                out.add( deserializeRecord( line, lineNumber ) );\n+                out.add(deserializeRecord(line, lineNumber));\n             }\n             lineNumber++;\n         }\n         return out;\n     }\n \n-    protected abstract String serialize( S record );\n+    protected abstract String serialize(S record);\n \n-    protected abstract S deserializeRecord( String line, int lineNumber ) throws FormatException;\n+    protected abstract S deserializeRecord(String line, int lineNumber) throws FormatException;\n }\n",
            "diff_size": 34
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2307/FileRepositorySerializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/2307/FileRepositorySerializer.java\nindex 95a79708902..e87fe88b2e2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2307/FileRepositorySerializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/2307/FileRepositorySerializer.java\n@@ -125,4 +125,4 @@ public abstract class FileRepositorySerializer<S>\n     protected abstract String serialize( S record );\n \n     protected abstract S deserializeRecord( String line, int lineNumber ) throws FormatException;\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}