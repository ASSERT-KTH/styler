{
    "project_name": "graphfoundation-ongdb",
    "error_id": "551",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "37",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "141",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/551/PageCacheArrayFactoryMonitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/551/PageCacheArrayFactoryMonitor.java\nindex c0c51749d4c..d0858e39e8c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/551/PageCacheArrayFactoryMonitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/551/PageCacheArrayFactoryMonitor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.unsafe.impl.batchimport.cache;\n \n import java.util.concurrent.atomic.AtomicReference;\n@@ -28,39 +29,39 @@ import static org.neo4j.helpers.Format.bytes;\n \n public class PageCacheArrayFactoryMonitor implements NumberArrayFactory.Monitor\n {\n-    // This field is designed to allow multiple threads setting it concurrently, where one of those will win and either one is fine\n-    // because this monitor mostly revolves around highlighting the fact that the page cache number array is in use at all.\n-    private final AtomicReference<String> failedFactoriesDescription = new AtomicReference<>();\n+  // This field is designed to allow multiple threads setting it concurrently, where one of those will win and either one is fine\n+  // because this monitor mostly revolves around highlighting the fact that the page cache number array is in use at all.\n+  private final AtomicReference<String> failedFactoriesDescription = new AtomicReference<>();\n \n-    @Override\n-    public void allocationSuccessful( long memory, NumberArrayFactory successfulFactory,\n-            Iterable<NumberArrayFactory.AllocationFailure> attemptedAllocationFailures )\n+  @Override\n+  public void allocationSuccessful(long memory, NumberArrayFactory successfulFactory,\n+                                   Iterable<NumberArrayFactory.AllocationFailure> attemptedAllocationFailures)\n+  {\n+    if (successfulFactory instanceof PageCachedNumberArrayFactory)\n     {\n-        if ( successfulFactory instanceof PageCachedNumberArrayFactory )\n-        {\n-            StringBuilder builder =\n-                    new StringBuilder( format( \"Memory allocation of %s ended up in page cache, which may impact performance negatively\", bytes( memory ) ) );\n-            attemptedAllocationFailures.forEach(\n-                    failure -> builder.append( format( \"%n%s: %s\", failure.getFactory(), failure.getFailure() ) ) );\n-            failedFactoriesDescription.compareAndSet( null, builder.toString() );\n-        }\n+      StringBuilder builder =\n+          new StringBuilder(format(\"Memory allocation of %s ended up in page cache, which may impact performance negatively\", bytes(memory)));\n+      attemptedAllocationFailures.forEach(\n+          failure -> builder.append(format(\"%n%s: %s\", failure.getFactory(), failure.getFailure())));\n+      failedFactoriesDescription.compareAndSet(null, builder.toString());\n     }\n+  }\n \n-    /**\n-     * Called by user-facing progress monitor at arbitrary points to get information about whether or not there has been\n-     * one or more {@link NumberArrayFactory} allocations backed by the {@link PageCache}, this because it severely affects\n-     * performance. Calling this method clears the failure description, if any.\n-     *\n-     * @return if there have been {@link NumberArrayFactory} allocations backed by the {@link PageCache} since the last call to this method\n-     * then a description of why it was chosen is returned, otherwise {@code null}.\n-     */\n-    public String pageCacheAllocationOrNull()\n+  /**\n+   * Called by user-facing progress monitor at arbitrary points to get information about whether or not there has been\n+   * one or more {@link NumberArrayFactory} allocations backed by the {@link PageCache}, this because it severely affects\n+   * performance. Calling this method clears the failure description, if any.\n+   *\n+   * @return if there have been {@link NumberArrayFactory} allocations backed by the {@link PageCache} since the last call to this method\n+   * then a description of why it was chosen is returned, otherwise {@code null}.\n+   */\n+  public String pageCacheAllocationOrNull()\n+  {\n+    String failure = failedFactoriesDescription.get();\n+    if (failure != null)\n     {\n-        String failure = failedFactoriesDescription.get();\n-        if ( failure != null )\n-        {\n-            failedFactoriesDescription.compareAndSet( failure, null );\n-        }\n-        return failure;\n+      failedFactoriesDescription.compareAndSet(failure, null);\n     }\n+    return failure;\n+  }\n }\n",
            "diff_size": 38
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 174).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/551/PageCacheArrayFactoryMonitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/551/PageCacheArrayFactoryMonitor.java\nindex c0c51749d4c..6a77ded3ccc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/551/PageCacheArrayFactoryMonitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/551/PageCacheArrayFactoryMonitor.java\n@@ -33,16 +33,13 @@ public class PageCacheArrayFactoryMonitor implements NumberArrayFactory.Monitor\n     private final AtomicReference<String> failedFactoriesDescription = new AtomicReference<>();\n \n     @Override\n-    public void allocationSuccessful( long memory, NumberArrayFactory successfulFactory,\n-            Iterable<NumberArrayFactory.AllocationFailure> attemptedAllocationFailures )\n+    public void allocationSuccessful( long memory, NumberArrayFactory successfulFactory, Iterable<NumberArrayFactory.AllocationFailure> attemptedAllocationFailures )\n     {\n         if ( successfulFactory instanceof PageCachedNumberArrayFactory )\n         {\n-            StringBuilder builder =\n-                    new StringBuilder( format( \"Memory allocation of %s ended up in page cache, which may impact performance negatively\", bytes( memory ) ) );\n-            attemptedAllocationFailures.forEach(\n-                    failure -> builder.append( format( \"%n%s: %s\", failure.getFactory(), failure.getFailure() ) ) );\n-            failedFactoriesDescription.compareAndSet( null, builder.toString() );\n+            StringBuilder builder = new StringBuilder( format( \"Memory allocation of %s ended up in page cache, which may impact performance negatively\", bytes( memory ) ) );\n+attemptedAllocationFailures.forEach( failure -> builder.append( format( \"%n%s: %s\", failure.getFactory(), failure.getFailure() ) ) );\n+failedFactoriesDescription.compareAndSet( null, builder.toString() );\n         }\n     }\n \n@@ -61,6 +58,7 @@ public class PageCacheArrayFactoryMonitor implements NumberArrayFactory.Monitor\n         {\n             failedFactoriesDescription.compareAndSet( failure, null );\n         }\n-        return failure;\n+\n+return failure;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}