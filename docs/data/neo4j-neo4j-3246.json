{
    "project_name": "neo4j-neo4j",
    "error_id": "3246",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "153",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "118",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3246/RelationshipStoreScan.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3246/RelationshipStoreScan.java\nindex 2055be08a21..7736c844c82 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3246/RelationshipStoreScan.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3246/RelationshipStoreScan.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.state.storeview;\n \n import java.util.function.IntPredicate;\n@@ -38,48 +39,48 @@ import static org.neo4j.lock.LockType.SHARED;\n  * Scan the relationship store and produce {@link EntityUpdates updates for indexes} and/or {@link EntityTokenUpdate updates for relationship type index}\n  * depending on which {@link Visitor visitors} that are used.\n  */\n-public class RelationshipStoreScan<FAILURE extends Exception> extends PropertyAwareEntityStoreScan<StorageRelationshipScanCursor,FAILURE>\n+public class RelationshipStoreScan<FAILURE extends Exception> extends PropertyAwareEntityStoreScan<StorageRelationshipScanCursor, FAILURE>\n {\n-    private final Visitor<EntityTokenUpdate,FAILURE> relationshipTypeUpdateVisitor;\n+    private final Visitor<EntityTokenUpdate, FAILURE> relationshipTypeUpdateVisitor;\n     final int[] relationshipTypeIds;\n-    private final Visitor<EntityUpdates,FAILURE> propertyUpdatesVisitor;\n+    private final Visitor<EntityUpdates, FAILURE> propertyUpdatesVisitor;\n \n-    public RelationshipStoreScan( StorageReader storageReader, LockService locks,\n-            @Nullable Visitor<EntityTokenUpdate,FAILURE> relationshipTypeUpdateVisitor,\n-            @Nullable Visitor<EntityUpdates,FAILURE> propertyUpdatesVisitor,\n-            int[] relationshipTypeIds, IntPredicate propertyKeyIdFilter, PageCursorTracer cursorTracer, MemoryTracker memoryTracker )\n+    public RelationshipStoreScan(StorageReader storageReader, LockService locks,\n+                                 @Nullable Visitor<EntityTokenUpdate, FAILURE> relationshipTypeUpdateVisitor,\n+                                 @Nullable Visitor<EntityUpdates, FAILURE> propertyUpdatesVisitor,\n+                                 int[] relationshipTypeIds, IntPredicate propertyKeyIdFilter, PageCursorTracer cursorTracer, MemoryTracker memoryTracker)\n     {\n-        super( storageReader, storageReader.relationshipsGetCount(), propertyKeyIdFilter,\n-                id -> locks.acquireRelationshipLock( id, SHARED ), cursorTracer, memoryTracker );\n+        super(storageReader, storageReader.relationshipsGetCount(), propertyKeyIdFilter,\n+          id -> locks.acquireRelationshipLock(id, SHARED), cursorTracer, memoryTracker);\n         this.relationshipTypeUpdateVisitor = relationshipTypeUpdateVisitor;\n         this.propertyUpdatesVisitor = propertyUpdatesVisitor;\n         this.relationshipTypeIds = relationshipTypeIds;\n     }\n \n     @Override\n-    protected StorageRelationshipScanCursor allocateCursor( StorageReader storageReader, PageCursorTracer cursorTracer )\n+    protected StorageRelationshipScanCursor allocateCursor(StorageReader storageReader, PageCursorTracer cursorTracer)\n     {\n-        return storageReader.allocateRelationshipScanCursor( cursorTracer );\n+        return storageReader.allocateRelationshipScanCursor(cursorTracer);\n     }\n \n     @Override\n-    protected boolean process( StorageRelationshipScanCursor cursor ) throws FAILURE\n+    protected boolean process(StorageRelationshipScanCursor cursor) throws FAILURE\n     {\n         int relType = cursor.type();\n \n-        if ( relationshipTypeUpdateVisitor != null )\n+        if (relationshipTypeUpdateVisitor != null)\n         {\n-            relationshipTypeUpdateVisitor.visit( EntityTokenUpdate.tokenChanges( cursor.entityReference(), EMPTY_LONG_ARRAY, new long[]{relType} ) );\n+            relationshipTypeUpdateVisitor.visit(EntityTokenUpdate.tokenChanges(cursor.entityReference(), EMPTY_LONG_ARRAY, new long[] {relType}));\n         }\n \n-        if ( propertyUpdatesVisitor != null && containsAnyEntityToken( relationshipTypeIds, relType ) )\n+        if (propertyUpdatesVisitor != null && containsAnyEntityToken(relationshipTypeIds, relType))\n         {\n             // Notify the property update visitor\n-            EntityUpdates.Builder updates = EntityUpdates.forEntity( cursor.entityReference(), true ).withTokens( relType );\n+            EntityUpdates.Builder updates = EntityUpdates.forEntity(cursor.entityReference(), true).withTokens(relType);\n \n-            if ( hasRelevantProperty( cursor, updates ) )\n+            if (hasRelevantProperty(cursor, updates))\n             {\n-                return propertyUpdatesVisitor.visit( updates.build() );\n+                return propertyUpdatesVisitor.visit(updates.build());\n             }\n         }\n         return false;\n",
            "diff_size": 19
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}