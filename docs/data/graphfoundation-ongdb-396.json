{
    "project_name": "graphfoundation-ongdb",
    "error_id": "396",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "31",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "31",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/396/Dependencies.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/396/Dependencies.java\nindex cb7c26309a5..2b06bfe081e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/396/Dependencies.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/396/Dependencies.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.util;\n \n import java.util.ArrayList;\n@@ -27,112 +28,112 @@ import java.util.function.Supplier;\n \n import org.neo4j.graphdb.DependencyResolver;\n \n-@SuppressWarnings( \"unchecked\" )\n+@SuppressWarnings(\"unchecked\")\n public class Dependencies extends DependencyResolver.Adapter implements DependencySatisfier\n {\n-    private final Supplier<DependencyResolver> parent;\n-    private final Map<Class<?>, List<?>> typeDependencies = new HashMap<>();\n-\n-    public Dependencies()\n-    {\n-        parent = null;\n-    }\n-\n-    public Dependencies( final DependencyResolver parent )\n-    {\n-        this.parent = () -> parent;\n-    }\n-\n-    public Dependencies( Supplier<DependencyResolver> parent )\n+  private final Supplier<DependencyResolver> parent;\n+  private final Map<Class<?>, List<?>> typeDependencies = new HashMap<>();\n+\n+  public Dependencies()\n+  {\n+    parent = null;\n+  }\n+\n+  public Dependencies(final DependencyResolver parent)\n+  {\n+    this.parent = () -> parent;\n+  }\n+\n+  public Dependencies(Supplier<DependencyResolver> parent)\n+  {\n+    this.parent = parent;\n+  }\n+\n+  @Override\n+  public <T> T resolveDependency(Class<T> type, SelectionStrategy selector)\n+  {\n+    List<?> options = typeDependencies.get(type);\n+\n+    if (options != null)\n     {\n-        this.parent = parent;\n+      return selector.select(type, (Iterable<T>) options);\n     }\n \n-    @Override\n-    public <T> T resolveDependency( Class<T> type, SelectionStrategy selector )\n+    // Try parent\n+    if (parent != null)\n     {\n-        List<?> options = typeDependencies.get( type );\n-\n-        if ( options != null )\n-        {\n-            return selector.select( type, (Iterable<T>) options);\n-        }\n-\n-        // Try parent\n-        if ( parent != null )\n-        {\n-            DependencyResolver dependencyResolver = parent.get();\n-\n-            if ( dependencyResolver != null )\n-            {\n-                return dependencyResolver.resolveDependency( type, selector );\n-            }\n-        }\n-\n-        // Out of options\n-        throw new UnsatisfiedDependencyException( type );\n-    }\n+      DependencyResolver dependencyResolver = parent.get();\n \n-    @Override\n-    public <T> Supplier<T> provideDependency( final Class<T> type, final SelectionStrategy selector )\n-    {\n-        return () -> resolveDependency( type, selector );\n+      if (dependencyResolver != null)\n+      {\n+        return dependencyResolver.resolveDependency(type, selector);\n+      }\n     }\n \n-    @Override\n-    public <T> Supplier<T> provideDependency( final Class<T> type )\n+    // Out of options\n+    throw new UnsatisfiedDependencyException(type);\n+  }\n+\n+  @Override\n+  public <T> Supplier<T> provideDependency(final Class<T> type, final SelectionStrategy selector)\n+  {\n+    return () -> resolveDependency(type, selector);\n+  }\n+\n+  @Override\n+  public <T> Supplier<T> provideDependency(final Class<T> type)\n+  {\n+    return () -> resolveDependency(type);\n+  }\n+\n+  @Override\n+  public <T> T satisfyDependency(T dependency)\n+  {\n+    // File this object under all its possible types\n+    Class<?> type = dependency.getClass();\n+    do\n     {\n-        return () -> resolveDependency( type );\n+      List<Object> deps = (List<Object>) typeDependencies.get(type);\n+      if (deps == null)\n+      {\n+        deps = new ArrayList<>();\n+        typeDependencies.put(type, deps);\n+      }\n+      deps.add(dependency);\n+\n+      // Add as all interfaces\n+      Class<?>[] interfaces = type.getInterfaces();\n+      addInterfaces(interfaces, dependency);\n+\n+      type = type.getSuperclass();\n     }\n+    while (type != null);\n \n-    @Override\n-    public <T> T satisfyDependency( T dependency )\n-    {\n-        // File this object under all its possible types\n-        Class<?> type = dependency.getClass();\n-        do\n-        {\n-            List<Object> deps = (List<Object>) typeDependencies.get( type );\n-            if ( deps == null )\n-            {\n-                deps = new ArrayList<>(  );\n-                typeDependencies.put(type, deps);\n-            }\n-            deps.add( dependency );\n-\n-            // Add as all interfaces\n-            Class<?>[] interfaces = type.getInterfaces();\n-            addInterfaces(interfaces, dependency);\n-\n-            type = type.getSuperclass();\n-        }\n-        while ( type != null );\n-\n-        return dependency;\n-    }\n+    return dependency;\n+  }\n \n-    public void satisfyDependencies( Object... dependencies )\n+  public void satisfyDependencies(Object... dependencies)\n+  {\n+    for (Object dependency : dependencies)\n     {\n-        for ( Object dependency : dependencies )\n-        {\n-            satisfyDependency( dependency );\n-        }\n+      satisfyDependency(dependency);\n     }\n+  }\n \n-    private <T> void addInterfaces( Class<?>[] interfaces, T dependency )\n+  private <T> void addInterfaces(Class<?>[] interfaces, T dependency)\n+  {\n+    for (Class<?> type : interfaces)\n     {\n-        for ( Class<?> type : interfaces )\n-        {\n-            List<Object> deps = (List<Object>) typeDependencies.get( type );\n-            if ( deps == null )\n-            {\n-                deps = new ArrayList<>(  );\n-                typeDependencies.put(type, deps);\n-            }\n-            deps.add( dependency );\n-\n-            // Add as all sub-interfaces\n-            addInterfaces(type.getInterfaces(), dependency);\n-        }\n+      List<Object> deps = (List<Object>) typeDependencies.get(type);\n+      if (deps == null)\n+      {\n+        deps = new ArrayList<>();\n+        typeDependencies.put(type, deps);\n+      }\n+      deps.add(dependency);\n+\n+      // Add as all sub-interfaces\n+      addInterfaces(type.getInterfaces(), dependency);\n     }\n+  }\n }\n",
            "diff_size": 140
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "29",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "9",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "115",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "115",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "123",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/396/Dependencies.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/396/Dependencies.java\nindex cb7c26309a5..34d4cd1dbf7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/396/Dependencies.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/396/Dependencies.java\n@@ -24,14 +24,13 @@ import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.function.Supplier;\n-\n import org.neo4j.graphdb.DependencyResolver;\n \n-@SuppressWarnings( \"unchecked\" )\n+@ SuppressWarnings( \"unchecked\")\n public class Dependencies extends DependencyResolver.Adapter implements DependencySatisfier\n {\n     private final Supplier<DependencyResolver> parent;\n-    private final Map<Class<?>, List<?>> typeDependencies = new HashMap<>();\n+    private final Map<Class<?>,List<?>> typeDependencies = new HashMap<>();\n \n     public Dependencies()\n     {\n@@ -52,17 +51,16 @@ public class Dependencies extends DependencyResolver.Adapter implements Dependen\n     public <T> T resolveDependency( Class<T> type, SelectionStrategy selector )\n     {\n         List<?> options = typeDependencies.get( type );\n-\n         if ( options != null )\n         {\n-            return selector.select( type, (Iterable<T>) options);\n+            return selector.select( type, (Iterable<T>) options );\n         }\n \n         // Try parent\n+\n         if ( parent != null )\n         {\n             DependencyResolver dependencyResolver = parent.get();\n-\n             if ( dependencyResolver != null )\n             {\n                 return dependencyResolver.resolveDependency( type, selector );\n@@ -70,6 +68,7 @@ public class Dependencies extends DependencyResolver.Adapter implements Dependen\n         }\n \n         // Out of options\n+\n         throw new UnsatisfiedDependencyException( type );\n     }\n \n@@ -95,25 +94,25 @@ public class Dependencies extends DependencyResolver.Adapter implements Dependen\n             List<Object> deps = (List<Object>) typeDependencies.get( type );\n             if ( deps == null )\n             {\n-                deps = new ArrayList<>(  );\n-                typeDependencies.put(type, deps);\n+                deps = new ArrayList<>();\n+                typeDependencies.put( type, deps );\n             }\n+\n             deps.add( dependency );\n \n             // Add as all interfaces\n             Class<?>[] interfaces = type.getInterfaces();\n-            addInterfaces(interfaces, dependency);\n-\n+            addInterfaces( interfaces, dependency );\n             type = type.getSuperclass();\n         }\n-        while ( type != null );\n \n+        while( type != null );\n         return dependency;\n     }\n \n     public void satisfyDependencies( Object... dependencies )\n     {\n-        for ( Object dependency : dependencies )\n+        for( Object dependency : dependencies)\n         {\n             satisfyDependency( dependency );\n         }\n@@ -121,18 +120,19 @@ public class Dependencies extends DependencyResolver.Adapter implements Dependen\n \n     private <T> void addInterfaces( Class<?>[] interfaces, T dependency )\n     {\n-        for ( Class<?> type : interfaces )\n+        for( Class<?> type : interfaces)\n         {\n             List<Object> deps = (List<Object>) typeDependencies.get( type );\n             if ( deps == null )\n             {\n-                deps = new ArrayList<>(  );\n-                typeDependencies.put(type, deps);\n+                deps = new ArrayList<>();\n+                typeDependencies.put( type, deps );\n             }\n+\n             deps.add( dependency );\n \n             // Add as all sub-interfaces\n-            addInterfaces(type.getInterfaces(), dependency);\n+            addInterfaces( type.getInterfaces(), dependency );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 22
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}