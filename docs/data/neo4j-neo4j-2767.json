{
    "project_name": "neo4j-neo4j",
    "error_id": "2767",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "53",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "135",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "150",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "190",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2767/ZonedDateTimeType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2767/ZonedDateTimeType.java\nindex 6b32191bc88..19ebbcc8c6c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2767/ZonedDateTimeType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2767/ZonedDateTimeType.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema;\n \n import java.time.ZoneId;\n@@ -41,7 +42,7 @@ class ZonedDateTimeType extends Type\n     // This is used to determine if the value is negative (after applying the bitmask)\n     private static final int ZONE_ID_HIGH = 0x0080_0000;\n     // This is used to restore masked negative offsets to their real value\n-    private static final int ZONE_ID_EXT =  0xFF00_0000;\n+    private static final int ZONE_ID_EXT = 0xFF00_0000;\n \n     // Affected key state:\n     // long0 (epochSecondUTC)\n@@ -49,19 +50,19 @@ class ZonedDateTimeType extends Type\n     // long2 (zoneId)\n     // long3 (zoneOffsetSeconds)\n \n-    ZonedDateTimeType( byte typeId )\n+    ZonedDateTimeType(byte typeId)\n     {\n-        super( ValueGroup.ZONED_DATE_TIME, typeId, DateTimeValue.MIN_VALUE, DateTimeValue.MAX_VALUE );\n+        super(ValueGroup.ZONED_DATE_TIME, typeId, DateTimeValue.MIN_VALUE, DateTimeValue.MAX_VALUE);\n     }\n \n     @Override\n-    int valueSize( GenericKey state )\n+    int valueSize(GenericKey state)\n     {\n         return GenericKey.SIZE_ZONED_DATE_TIME;\n     }\n \n     @Override\n-    void copyValue( GenericKey to, GenericKey from )\n+    void copyValue(GenericKey to, GenericKey from)\n     {\n         to.long0 = from.long0;\n         to.long1 = from.long1;\n@@ -70,97 +71,95 @@ class ZonedDateTimeType extends Type\n     }\n \n     @Override\n-    Value asValue( GenericKey state )\n+    Value asValue(GenericKey state)\n     {\n-        return asValue( state.long0, state.long1, state.long2, state.long3 );\n+        return asValue(state.long0, state.long1, state.long2, state.long3);\n     }\n \n     @Override\n-    int compareValue( GenericKey left, GenericKey right )\n+    int compareValue(GenericKey left, GenericKey right)\n     {\n         return compare(\n-                left.long0, left.long1, left.long2, left.long3,\n-                right.long0, right.long1, right.long2, right.long3 );\n+          left.long0, left.long1, left.long2, left.long3,\n+          right.long0, right.long1, right.long2, right.long3);\n     }\n \n     @Override\n-    void putValue( PageCursor cursor, GenericKey state )\n+    void putValue(PageCursor cursor, GenericKey state)\n     {\n-        put( cursor, state.long0, state.long1, state.long2, state.long3 );\n+        put(cursor, state.long0, state.long1, state.long2, state.long3);\n     }\n \n     @Override\n-    boolean readValue( PageCursor cursor, int size, GenericKey into )\n+    boolean readValue(PageCursor cursor, int size, GenericKey into)\n     {\n-        return read( cursor, into );\n+        return read(cursor, into);\n     }\n \n     static int compare(\n-            long this_long0, long this_long1, long this_long2, long this_long3,\n-            long that_long0, long that_long1, long that_long2, long that_long3 )\n+      long this_long0, long this_long1, long this_long2, long this_long3,\n+      long that_long0, long that_long1, long that_long2, long that_long3)\n     {\n-        int compare = Long.compare( this_long0, that_long0 );\n-        if ( compare == 0 )\n+        int compare = Long.compare(this_long0, that_long0);\n+        if (compare == 0)\n         {\n-            compare = Integer.compare( (int) this_long1, (int) that_long1 );\n-            if ( compare == 0 && !(this_long2 == that_long2 && this_long3 == that_long3) &&\n-                    // We need to check validity upfront without throwing exceptions, because the PageCursor might give garbage bytes\n-                    TimeZones.validZoneOffset( (int) this_long3 ) &&\n-                    TimeZones.validZoneOffset( (int) that_long3 ) )\n+            compare = Integer.compare((int) this_long1, (int) that_long1);\n+            if (compare == 0 && !(this_long2 == that_long2 && this_long3 == that_long3) &&\n+              // We need to check validity upfront without throwing exceptions, because the PageCursor might give garbage bytes\n+              TimeZones.validZoneOffset((int) this_long3) &&\n+              TimeZones.validZoneOffset((int) that_long3))\n             {\n                 // In the rare case of comparing the same instant in different time zones, we settle for\n                 // mapping to values and comparing using the general values comparator.\n                 compare = Values.COMPARATOR.compare(\n-                        asValue( this_long0, this_long1, this_long2, this_long3 ),\n-                        asValue( that_long0, that_long1, that_long2, that_long3 ) );\n+                  asValue(this_long0, this_long1, this_long2, this_long3),\n+                  asValue(that_long0, that_long1, that_long2, that_long3));\n             }\n         }\n         return compare;\n     }\n \n-    static void put( PageCursor cursor, long long0, long long1, long long2, long long3 )\n+    static void put(PageCursor cursor, long long0, long long1, long long2, long long3)\n     {\n-        cursor.putLong( long0 );\n-        cursor.putInt( (int) long1 );\n-        if ( long2 >= 0 )\n+        cursor.putLong(long0);\n+        cursor.putInt((int) long1);\n+        if (long2 >= 0)\n         {\n-            cursor.putInt( (int) long2 | ZONE_ID_FLAG );\n-        }\n-        else\n+            cursor.putInt((int) long2 | ZONE_ID_FLAG);\n+        } else\n         {\n-            cursor.putInt( (int) long3 & ZONE_ID_MASK );\n+            cursor.putInt((int) long3 & ZONE_ID_MASK);\n         }\n     }\n \n-    static boolean read( PageCursor cursor, GenericKey into )\n+    static boolean read(PageCursor cursor, GenericKey into)\n     {\n         long epochSecondUTC = cursor.getLong();\n         int nanoOfSecond = cursor.getInt();\n         int encodedZone = cursor.getInt();\n-        if ( isZoneId( encodedZone ) )\n+        if (isZoneId(encodedZone))\n         {\n-            into.writeDateTime( epochSecondUTC, nanoOfSecond, asZoneId( encodedZone ) );\n-        }\n-        else\n+            into.writeDateTime(epochSecondUTC, nanoOfSecond, asZoneId(encodedZone));\n+        } else\n         {\n-            into.writeDateTime( epochSecondUTC, nanoOfSecond, asZoneOffset( encodedZone ) );\n+            into.writeDateTime(epochSecondUTC, nanoOfSecond, asZoneOffset(encodedZone));\n         }\n         return true;\n     }\n \n-    static DateTimeValue asValue( long long0, long long1, long long2, long long3 )\n+    static DateTimeValue asValue(long long0, long long1, long long2, long long3)\n     {\n-        return DateTimeValue.datetime( asValueRaw( long0, long1, long2, long3 ) );\n+        return DateTimeValue.datetime(asValueRaw(long0, long1, long2, long3));\n     }\n \n-    static ZonedDateTime asValueRaw( long long0, long long1, long long2, long long3 )\n+    static ZonedDateTime asValueRaw(long long0, long long1, long long2, long long3)\n     {\n-        return TimeZones.validZoneId( (short) long2 ) ?\n-               DateTimeValue.datetimeRaw( long0, long1, ZoneId.of( TimeZones.map( (short) long2 ) ) ) :\n-               DateTimeValue.datetimeRaw( long0, long1, ZoneOffset.ofTotalSeconds( (int) long3 ) );\n+        return TimeZones.validZoneId((short) long2) ?\n+          DateTimeValue.datetimeRaw(long0, long1, ZoneId.of(TimeZones.map((short) long2))) :\n+          DateTimeValue.datetimeRaw(long0, long1, ZoneOffset.ofTotalSeconds((int) long3));\n     }\n \n-    void write( GenericKey state, long epochSecondUTC, int nano, short zoneId, int offsetSeconds )\n+    void write(GenericKey state, long epochSecondUTC, int nano, short zoneId, int offsetSeconds)\n     {\n         state.long0 = epochSecondUTC;\n         state.long1 = nano;\n@@ -169,33 +168,32 @@ class ZonedDateTimeType extends Type\n     }\n \n     @Override\n-    protected void addTypeSpecificDetails( StringJoiner joiner, GenericKey state )\n+    protected void addTypeSpecificDetails(StringJoiner joiner, GenericKey state)\n     {\n-        joiner.add( \"long0=\" + state.long0 );\n-        joiner.add( \"long1=\" + state.long1 );\n-        joiner.add( \"long2=\" + state.long2 );\n-        joiner.add( \"long3=\" + state.long3 );\n+        joiner.add(\"long0=\" + state.long0);\n+        joiner.add(\"long1=\" + state.long1);\n+        joiner.add(\"long2=\" + state.long2);\n+        joiner.add(\"long3=\" + state.long3);\n     }\n \n-    private static int asZoneOffset( int encodedZone )\n+    private static int asZoneOffset(int encodedZone)\n     {\n-        if ( (ZONE_ID_HIGH & encodedZone) == ZONE_ID_HIGH )\n+        if ((ZONE_ID_HIGH & encodedZone) == ZONE_ID_HIGH)\n         {\n             return ZONE_ID_EXT | encodedZone;\n-        }\n-        else\n+        } else\n         {\n             return encodedZone;\n         }\n     }\n \n-    private static short asZoneId( int encodedZone )\n+    private static short asZoneId(int encodedZone)\n     {\n-        return (short) ( encodedZone & ZONE_ID_MASK );\n+        return (short) (encodedZone & ZONE_ID_MASK);\n     }\n \n-    private static boolean isZoneId( int encodedZone )\n+    private static boolean isZoneId(int encodedZone)\n     {\n-        return ( encodedZone & ZONE_ID_FLAG ) != 0;\n+        return (encodedZone & ZONE_ID_FLAG) != 0;\n     }\n }\n",
            "diff_size": 60
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2767/ZonedDateTimeType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/2767/ZonedDateTimeType.java\nindex 6b32191bc88..fc78dcd116a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2767/ZonedDateTimeType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/2767/ZonedDateTimeType.java\n@@ -191,11 +191,11 @@ class ZonedDateTimeType extends Type\n \n     private static short asZoneId( int encodedZone )\n     {\n-        return (short) ( encodedZone & ZONE_ID_MASK );\n+        return (short) (encodedZone & ZONE_ID_MASK );\n     }\n \n     private static boolean isZoneId( int encodedZone )\n     {\n-        return ( encodedZone & ZONE_ID_FLAG ) != 0;\n+        return (encodedZone & ZONE_ID_FLAG ) != 0;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}