{
    "project_name": "Angel-ML-angel",
    "error_id": "569",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/569/PSAgent.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/569/PSAgent.java\nindex 68f65c365cc..673936a0994 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/569/PSAgent.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/569/PSAgent.java\n@@ -319,7 +319,8 @@ public class PSAgent {\n     Map<ParameterServerId, Location> psIdToLocMap = masterClient.getPSLocations();\r\n     List<ParameterServerId> psIds = new ArrayList<>(psIdToLocMap.keySet());\r\n     Collections.sort(psIds, new Comparator<ParameterServerId>() {\r\n-      @Override public int compare(ParameterServerId s1, ParameterServerId s2) {\r\n+      @Override\r\n+      public int compare(ParameterServerId s1, ParameterServerId s2) {\r\n         return s1.getIndex() - s2.getIndex();\r\n       }\r\n     });\r\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "255",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/569/PSAgent.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/569/PSAgent.java\nindex 68f65c365cc..5f4adbc1542 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/569/PSAgent.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/569/PSAgent.java\n@@ -13,9 +13,8 @@\n  * or implied. See the License for the specific language governing permissions and limitations under\r\n  * the License.\r\n  *\r\n- */\r\n-\r\n-\r\n+ */\n+\n package com.tencent.angel.psagent;\r\n \r\n import com.google.protobuf.ServiceException;\r\n@@ -228,11 +227,10 @@ public class PSAgent {\n                  int masterPort, boolean needHeartBeat, Executor executor) {\r\n     this.needHeartBeat = needHeartBeat;\r\n     this.conf = conf;\r\n-    this.executor = executor;\r\n-\r\n-    this.heartbeatIntervalMs = conf.getInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS,\r\n-        AngelConf.DEFAULT_ANGEL_WORKER_HEARTBEAT_INTERVAL);\r\n-    this.runningMode = initRunningMode(conf);\r\n+    this.executor = executor;\n+this.heartbeatIntervalMs = conf.getInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS,\r\n+        AngelConf.DEFAULT_ANGEL_WORKER_HEARTBEAT_INTERVAL);\n+this.runningMode = initRunningMode(conf);\r\n     this.appId = appId;\r\n     this.user = user;\r\n     this.masterLocation = new Location(masterIp, masterPort);\r\n@@ -254,20 +252,17 @@ public class PSAgent {\n    * @param needHeartBeat true means need startup heartbeat thread\r\n    * @param executor      the machine learning executor reference\r\n    */\r\n-  public PSAgent(Configuration conf, String masterIp, int masterPort, int clientIndex,\r\n-                 boolean needHeartBeat, Executor executor) {\r\n+  public PSAgent(Configuration conf, String masterIp, int masterPort, int clientIndex, boolean needHeartBeat, Executor executor) {\r\n     this.needHeartBeat = needHeartBeat;\r\n     this.conf = conf;\r\n     this.executor = executor;\r\n     this.heartbeatIntervalMs = conf.getInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS,\r\n-        AngelConf.DEFAULT_ANGEL_WORKER_HEARTBEAT_INTERVAL);\r\n-    this.runningMode = initRunningMode(conf);\r\n-\r\n-    this.masterLocation = new Location(masterIp, masterPort);\r\n+        AngelConf.DEFAULT_ANGEL_WORKER_HEARTBEAT_INTERVAL);\n+this.runningMode = initRunningMode(conf);\n+this.masterLocation = new Location(masterIp, masterPort);\r\n     this.appId = null;\r\n-    this.user = null;\r\n-\r\n-    this.connection = TConnectionManager.getConnection(conf);\r\n+    this.user = null;\n+this.connection = TConnectionManager.getConnection(conf);\r\n     this.psAgentInitFinishedFlag = new AtomicBoolean(false);\r\n     this.stopped = new AtomicBoolean(false);\r\n     this.exitedFlag = new AtomicBoolean(false);\r\n@@ -319,7 +314,8 @@ public class PSAgent {\n     Map<ParameterServerId, Location> psIdToLocMap = masterClient.getPSLocations();\r\n     List<ParameterServerId> psIds = new ArrayList<>(psIdToLocMap.keySet());\r\n     Collections.sort(psIds, new Comparator<ParameterServerId>() {\r\n-      @Override public int compare(ParameterServerId s1, ParameterServerId s2) {\r\n+      @Override\n+public int compare(ParameterServerId s1, ParameterServerId s2) {\r\n         return s1.getIndex() - s2.getIndex();\r\n       }\r\n     });\r\n@@ -364,8 +360,8 @@ public class PSAgent {\n    * @throws InterruptedException interrupted while wait for rpc results\r\n    */\r\n   public void refreshMatrixInfo()\r\n-      throws InterruptedException, ServiceException, ClassNotFoundException {\r\n-    matrixMetaManager.addMatrices(masterClient.getMatrices());\r\n+      throws InterruptedException, ServiceException, ClassNotFoundException {\n+  matrixMetaManager.addMatrices(masterClient.getMatrices());\r\n   }\r\n \r\n   /**\r\n@@ -412,9 +408,8 @@ public class PSAgent {\n           LOG.error(\"register failed: \", x);\r\n           stop();\r\n         }\r\n-        break;\r\n-\r\n-      case PSAGENT_SHUTDOWN:\r\n+        break;\n+  case PSAGENT_SHUTDOWN:\r\n         LOG.error(\"shutdown command come from appmaster, exit now!!\");\r\n         stop();\r\n         break;\r\n@@ -744,8 +739,8 @@ public class PSAgent {\n    * @throws AngelException exception come from master\r\n    */\r\n   public void createMatrices(List<MatrixContext> matrixContexts, long timeOutMs)\r\n-      throws AngelException {\r\n-    try {\r\n+      throws AngelException {\n+  try {\r\n       masterClient.createMatrices(matrixContexts, timeOutMs);\r\n     } catch (Throwable x) {\r\n       throw new AngelException(x);\r\n@@ -822,4 +817,4 @@ public class PSAgent {\n   public PSControlClientManager getPsControlClientManager() {\r\n     return psControlClientManager;\r\n   }\r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 27
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}