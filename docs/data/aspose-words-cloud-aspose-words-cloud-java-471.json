{
    "project_name": "aspose-words-cloud-aspose-words-cloud-java",
    "error_id": "471",
    "information": {
        "errors": [
            {
                "line": "162",
                "column": "73",
                "severity": "error",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "            return false;\n        }\n    ReplaceTextParameters replaceTextParameters = (ReplaceTextParameters)o;\n    return\n        Objects.equals(this.isMatchCase, replaceTextParameters.isMatchCase) &&\n        Objects.equals(this.isMatchWholeWord, replaceTextParameters.isMatchWholeWord) &&",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/471/ReplaceTextParameters.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/471/ReplaceTextParameters.java\nindex 675df3bc99b..d01f3a5bff4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/471/ReplaceTextParameters.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/471/ReplaceTextParameters.java\n@@ -159,7 +159,7 @@ public class ReplaceTextParameters {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    ReplaceTextParameters replaceTextParameters = (ReplaceTextParameters)o;\n+    ReplaceTextParameters replaceTextParameters = (ReplaceTextParameters) o;\n     return\n         Objects.equals(this.isMatchCase, replaceTextParameters.isMatchCase) &&\n         Objects.equals(this.isMatchWholeWord, replaceTextParameters.isMatchWholeWord) &&\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/471/ReplaceTextParameters.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/471/ReplaceTextParameters.java\nindex 675df3bc99b..be7bb691737 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/471/ReplaceTextParameters.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/471/ReplaceTextParameters.java\n@@ -10,10 +10,10 @@\n  *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  *  copies of the Software, and to permit persons to whom the Software is\n  *  furnished to do so, subject to the following conditions:\n- * \n+ *\n  *  The above copyright notice and this permission notice shall be included in all\n  *  copies or substantial portions of the Software.\n- * \n+ *\n  *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -32,13 +32,16 @@ import java.util.Arrays;\n import java.util.ArrayList;\n import java.util.List;\n import java.io.IOException;\n+\n import org.threeten.bp.OffsetDateTime;\n+\n import com.aspose.words.cloud.model.*;\n import com.google.gson.TypeAdapter;\n import com.google.gson.annotations.JsonAdapter;\n import com.google.gson.annotations.SerializedName;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n+\n import io.swagger.annotations.ApiModel;\n import io.swagger.annotations.ApiModelProperty;\n \n@@ -61,6 +64,7 @@ public class ReplaceTextParameters {\n \n     @SerializedName(\"OldValue\")\n     private String oldValue = null;\n+\n     public ReplaceTextParameters isMatchCase(Boolean isMatchCase) {\n         this.isMatchCase = isMatchCase;\n         return this;\n@@ -68,8 +72,9 @@ public class ReplaceTextParameters {\n \n     /**\n      * Gets or sets a value indicating whether flag, true means the search is case-sensitive; false means the search is not case-sensitive.\n-    * @return isMatchCase\n-    **/\n+     *\n+     * @return isMatchCase\n+     **/\n     @ApiModelProperty(value = \"Gets or sets a value indicating whether flag, true means the search is case-sensitive; false means the search is not case-sensitive.\")\n     public Boolean getIsMatchCase() {\n         return isMatchCase;\n@@ -86,8 +91,9 @@ public class ReplaceTextParameters {\n \n     /**\n      * Gets or sets a value indicating whether flag, means that only whole word matched are replaced.\n-    * @return isMatchWholeWord\n-    **/\n+     *\n+     * @return isMatchWholeWord\n+     **/\n     @ApiModelProperty(value = \"Gets or sets a value indicating whether flag, means that only whole word matched are replaced.\")\n     public Boolean getIsMatchWholeWord() {\n         return isMatchWholeWord;\n@@ -104,8 +110,9 @@ public class ReplaceTextParameters {\n \n     /**\n      * Gets or sets a value indicating whether flag, means that OldValue contains regex expression.\n-    * @return isOldValueRegex\n-    **/\n+     *\n+     * @return isOldValueRegex\n+     **/\n     @ApiModelProperty(value = \"Gets or sets a value indicating whether flag, means that OldValue contains regex expression.\")\n     public Boolean getIsOldValueRegex() {\n         return isOldValueRegex;\n@@ -122,8 +129,9 @@ public class ReplaceTextParameters {\n \n     /**\n      * Gets or sets new text value to replace by.\n-    * @return newValue\n-    **/\n+     *\n+     * @return newValue\n+     **/\n     @ApiModelProperty(value = \"Gets or sets new text value to replace by.\")\n     public String getNewValue() {\n         return newValue;\n@@ -140,8 +148,9 @@ public class ReplaceTextParameters {\n \n     /**\n      * Gets or sets old text value (or regex pattern IsOldValueRegex) to replace.\n-    * @return oldValue\n-    **/\n+     *\n+     * @return oldValue\n+     **/\n     @ApiModelProperty(value = \"Gets or sets old text value (or regex pattern IsOldValueRegex) to replace.\")\n     public String getOldValue() {\n         return oldValue;\n@@ -159,41 +168,41 @@ public class ReplaceTextParameters {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    ReplaceTextParameters replaceTextParameters = (ReplaceTextParameters)o;\n-    return\n-        Objects.equals(this.isMatchCase, replaceTextParameters.isMatchCase) &&\n-        Objects.equals(this.isMatchWholeWord, replaceTextParameters.isMatchWholeWord) &&\n-        Objects.equals(this.isOldValueRegex, replaceTextParameters.isOldValueRegex) &&\n-        Objects.equals(this.newValue, replaceTextParameters.newValue) &&\n-        Objects.equals(this.oldValue, replaceTextParameters.oldValue);\n-  }\n-\n-  @Override\n-  public int hashCode() {\n-    return Objects.hash(isMatchCase, isMatchWholeWord, isOldValueRegex, newValue, oldValue);\n-  }\n-\n-  @Override\n-  public String toString() {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(\"class ReplaceTextParameters {\\n\");\n-    sb.append(\"    isMatchCase: \").append(toIndentedString(isMatchCase)).append(\"\\n\");\n-    sb.append(\"    isMatchWholeWord: \").append(toIndentedString(isMatchWholeWord)).append(\"\\n\");\n-    sb.append(\"    isOldValueRegex: \").append(toIndentedString(isOldValueRegex)).append(\"\\n\");\n-    sb.append(\"    newValue: \").append(toIndentedString(newValue)).append(\"\\n\");\n-    sb.append(\"    oldValue: \").append(toIndentedString(oldValue)).append(\"\\n\");\n-    sb.append(\"}\");\n-    return sb.toString();\n-  }\n-\n-  /**\n-   * Convert the given object to string with each line indented by 4 spaces\n-   * (except the first line).\n-   */\n-  private String toIndentedString(java.lang.Object o) {\n-    if (o == null) {\n-      return \"null\";\n-    }\n-    return o.toString().replace(\"\\n\", \"\\n    \");\n-  }\n+        ReplaceTextParameters replaceTextParameters = (ReplaceTextParameters) o;\n+        return\n+            Objects.equals(this.isMatchCase, replaceTextParameters.isMatchCase) &&\n+                Objects.equals(this.isMatchWholeWord, replaceTextParameters.isMatchWholeWord) &&\n+                Objects.equals(this.isOldValueRegex, replaceTextParameters.isOldValueRegex) &&\n+                Objects.equals(this.newValue, replaceTextParameters.newValue) &&\n+                Objects.equals(this.oldValue, replaceTextParameters.oldValue);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(isMatchCase, isMatchWholeWord, isOldValueRegex, newValue, oldValue);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"class ReplaceTextParameters {\\n\");\n+        sb.append(\"    isMatchCase: \").append(toIndentedString(isMatchCase)).append(\"\\n\");\n+        sb.append(\"    isMatchWholeWord: \").append(toIndentedString(isMatchWholeWord)).append(\"\\n\");\n+        sb.append(\"    isOldValueRegex: \").append(toIndentedString(isOldValueRegex)).append(\"\\n\");\n+        sb.append(\"    newValue: \").append(toIndentedString(newValue)).append(\"\\n\");\n+        sb.append(\"    oldValue: \").append(toIndentedString(oldValue)).append(\"\\n\");\n+        sb.append(\"}\");\n+        return sb.toString();\n+    }\n+\n+    /**\n+     * Convert the given object to string with each line indented by 4 spaces\n+     * (except the first line).\n+     */\n+    private String toIndentedString(java.lang.Object o) {\n+        if (o == null) {\n+            return \"null\";\n+        }\n+        return o.toString().replace(\"\\n\", \"\\n    \");\n+    }\n }\n",
            "diff_size": 58
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "164",
                    "column": "69",
                    "severity": "error",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/471/ReplaceTextParameters.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/naturalize/471/ReplaceTextParameters.java\nindex 675df3bc99b..f543537ebf3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/471/ReplaceTextParameters.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/naturalize/471/ReplaceTextParameters.java\n@@ -61,7 +61,8 @@ public class ReplaceTextParameters {\n \n     @SerializedName(\"OldValue\")\n     private String oldValue = null;\n-    public ReplaceTextParameters isMatchCase(Boolean isMatchCase) {\n+\n+public ReplaceTextParameters isMatchCase(Boolean isMatchCase) {\n         this.isMatchCase = isMatchCase;\n         return this;\n     }\n@@ -155,13 +156,13 @@ public class ReplaceTextParameters {\n     public boolean equals(java.lang.Object o) {\n         if (this == o) {\n             return true;\n-        }\n+  }\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    ReplaceTextParameters replaceTextParameters = (ReplaceTextParameters)o;\n-    return\n-        Objects.equals(this.isMatchCase, replaceTextParameters.isMatchCase) &&\n+\n+ReplaceTextParameters replaceTextParameters = (ReplaceTextParameters)o;\n+    return Objects.equals(this.isMatchCase, replaceTextParameters.isMatchCase) &&\n         Objects.equals(this.isMatchWholeWord, replaceTextParameters.isMatchWholeWord) &&\n         Objects.equals(this.isOldValueRegex, replaceTextParameters.isOldValueRegex) &&\n         Objects.equals(this.newValue, replaceTextParameters.newValue) &&\n@@ -196,4 +197,4 @@ public class ReplaceTextParameters {\n     }\n     return o.toString().replace(\"\\n\", \"\\n    \");\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/471/ReplaceTextParameters.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/471/ReplaceTextParameters.java\nindex 675df3bc99b..f0183d79862 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/471/ReplaceTextParameters.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/471/ReplaceTextParameters.java\n@@ -45,134 +45,151 @@ import io.swagger.annotations.ApiModelProperty;\n /**\n  * Class for document replace text request building.\n  */\n+\n+\n @ApiModel(description = \"Class for document replace text request building.\")\n+\n public class ReplaceTextParameters {\n-    @SerializedName(\"IsMatchCase\")\n-    private Boolean isMatchCase = null;\n+  @SerializedName(\"IsMatchCase\")\n+  private Boolean isMatchCase = null;\n \n-    @SerializedName(\"IsMatchWholeWord\")\n-    private Boolean isMatchWholeWord = null;\n+  @SerializedName(\"IsMatchWholeWord\")\n+  private Boolean isMatchWholeWord = null;\n \n-    @SerializedName(\"IsOldValueRegex\")\n-    private Boolean isOldValueRegex = null;\n+  @SerializedName(\"IsOldValueRegex\")\n+  private Boolean isOldValueRegex = null;\n \n-    @SerializedName(\"NewValue\")\n-    private String newValue = null;\n+  @SerializedName(\"NewValue\")\n+  private String newValue = null;\n \n-    @SerializedName(\"OldValue\")\n-    private String oldValue = null;\n-    public ReplaceTextParameters isMatchCase(Boolean isMatchCase) {\n-        this.isMatchCase = isMatchCase;\n-        return this;\n-    }\n+  @SerializedName(\"OldValue\")\n+  private String oldValue = null;\n+\n+  public ReplaceTextParameters isMatchCase(Boolean isMatchCase) {\n+    this.isMatchCase = isMatchCase;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets a value indicating whether flag, true means the search is case-sensitive; false means the search is not case-sensitive.\n     * @return isMatchCase\n     **/\n-    @ApiModelProperty(value = \"Gets or sets a value indicating whether flag, true means the search is case-sensitive; false means the search is not case-sensitive.\")\n-    public Boolean getIsMatchCase() {\n-        return isMatchCase;\n-    }\n \n-    public void setIsMatchCase(Boolean isMatchCase) {\n-        this.isMatchCase = isMatchCase;\n-    }\n \n-    public ReplaceTextParameters isMatchWholeWord(Boolean isMatchWholeWord) {\n-        this.isMatchWholeWord = isMatchWholeWord;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets a value indicating whether flag, true means the search is case-sensitive; false means the search is not case-sensitive.\")\n+  public Boolean getIsMatchCase() {\n+    return isMatchCase;\n+  }\n+\n+  public void setIsMatchCase(Boolean isMatchCase) {\n+    this.isMatchCase = isMatchCase;\n+  }\n+\n+  public ReplaceTextParameters isMatchWholeWord(Boolean isMatchWholeWord) {\n+    this.isMatchWholeWord = isMatchWholeWord;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets a value indicating whether flag, means that only whole word matched are replaced.\n     * @return isMatchWholeWord\n     **/\n-    @ApiModelProperty(value = \"Gets or sets a value indicating whether flag, means that only whole word matched are replaced.\")\n-    public Boolean getIsMatchWholeWord() {\n-        return isMatchWholeWord;\n-    }\n \n-    public void setIsMatchWholeWord(Boolean isMatchWholeWord) {\n-        this.isMatchWholeWord = isMatchWholeWord;\n-    }\n \n-    public ReplaceTextParameters isOldValueRegex(Boolean isOldValueRegex) {\n-        this.isOldValueRegex = isOldValueRegex;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets a value indicating whether flag, means that only whole word matched are replaced.\")\n+  public Boolean getIsMatchWholeWord() {\n+    return isMatchWholeWord;\n+  }\n+\n+  public void setIsMatchWholeWord(Boolean isMatchWholeWord) {\n+    this.isMatchWholeWord = isMatchWholeWord;\n+  }\n+\n+  public ReplaceTextParameters isOldValueRegex(Boolean isOldValueRegex) {\n+    this.isOldValueRegex = isOldValueRegex;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets a value indicating whether flag, means that OldValue contains regex expression.\n     * @return isOldValueRegex\n     **/\n-    @ApiModelProperty(value = \"Gets or sets a value indicating whether flag, means that OldValue contains regex expression.\")\n-    public Boolean getIsOldValueRegex() {\n-        return isOldValueRegex;\n-    }\n \n-    public void setIsOldValueRegex(Boolean isOldValueRegex) {\n-        this.isOldValueRegex = isOldValueRegex;\n-    }\n \n-    public ReplaceTextParameters newValue(String newValue) {\n-        this.newValue = newValue;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets a value indicating whether flag, means that OldValue contains regex expression.\")\n+  public Boolean getIsOldValueRegex() {\n+    return isOldValueRegex;\n+  }\n+\n+  public void setIsOldValueRegex(Boolean isOldValueRegex) {\n+    this.isOldValueRegex = isOldValueRegex;\n+  }\n+\n+  public ReplaceTextParameters newValue(String newValue) {\n+    this.newValue = newValue;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets new text value to replace by.\n     * @return newValue\n     **/\n-    @ApiModelProperty(value = \"Gets or sets new text value to replace by.\")\n-    public String getNewValue() {\n-        return newValue;\n-    }\n \n-    public void setNewValue(String newValue) {\n-        this.newValue = newValue;\n-    }\n \n-    public ReplaceTextParameters oldValue(String oldValue) {\n-        this.oldValue = oldValue;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets new text value to replace by.\")\n+  public String getNewValue() {\n+    return newValue;\n+  }\n+\n+  public void setNewValue(String newValue) {\n+    this.newValue = newValue;\n+  }\n+\n+  public ReplaceTextParameters oldValue(String oldValue) {\n+    this.oldValue = oldValue;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets old text value (or regex pattern IsOldValueRegex) to replace.\n     * @return oldValue\n     **/\n-    @ApiModelProperty(value = \"Gets or sets old text value (or regex pattern IsOldValueRegex) to replace.\")\n-    public String getOldValue() {\n-        return oldValue;\n-    }\n \n-    public void setOldValue(String oldValue) {\n-        this.oldValue = oldValue;\n+\n+  @ApiModelProperty(value = \"Gets or sets old text value (or regex pattern IsOldValueRegex) to replace.\")\n+  public String getOldValue() {\n+    return oldValue;\n+  }\n+\n+  public void setOldValue(String oldValue) {\n+    this.oldValue = oldValue;\n+  }\n+\n+\n+  @Override\n+  public boolean equals(java.lang.Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n     }\n \n-    @Override\n-    public boolean equals(java.lang.Object o) {\n-        if (this == o) {\n-            return true;\n-        }\n-        if (o == null || getClass() != o.getClass()) {\n-            return false;\n-        }\n-    ReplaceTextParameters replaceTextParameters = (ReplaceTextParameters)o;\n-    return\n-        Objects.equals(this.isMatchCase, replaceTextParameters.isMatchCase) &&\n-        Objects.equals(this.isMatchWholeWord, replaceTextParameters.isMatchWholeWord) &&\n-        Objects.equals(this.isOldValueRegex, replaceTextParameters.isOldValueRegex) &&\n-        Objects.equals(this.newValue, replaceTextParameters.newValue) &&\n-        Objects.equals(this.oldValue, replaceTextParameters.oldValue);\n+    ReplaceTextParameters replaceTextParameters = (ReplaceTextParameters) o;\n+    return Objects.equals(this.isMatchCase, replaceTextParameters.isMatchCase) &&\n+    Objects.equals(this.isMatchWholeWord, replaceTextParameters.isMatchWholeWord) &&\n+    Objects.equals(this.isOldValueRegex, replaceTextParameters.isOldValueRegex) &&\n+    Objects.equals(this.newValue, replaceTextParameters.newValue) &&\n+    Objects.equals(this.oldValue, replaceTextParameters.oldValue);\n   }\n \n+\n   @Override\n   public int hashCode() {\n     return Objects.hash(isMatchCase, isMatchWholeWord, isOldValueRegex, newValue, oldValue);\n   }\n \n+\n   @Override\n   public String toString() {\n     StringBuilder sb = new StringBuilder();\n@@ -190,10 +207,12 @@ public class ReplaceTextParameters {\n    * Convert the given object to string with each line indented by 4 spaces\n    * (except the first line).\n    */\n+\n   private String toIndentedString(java.lang.Object o) {\n     if (o == null) {\n       return \"null\";\n     }\n     return o.toString().replace(\"\\n\", \"\\n    \");\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 140
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/471/ReplaceTextParameters.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/471/ReplaceTextParameters.java\nindex 675df3bc99b..d01f3a5bff4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/471/ReplaceTextParameters.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/471/ReplaceTextParameters.java\n@@ -159,7 +159,7 @@ public class ReplaceTextParameters {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    ReplaceTextParameters replaceTextParameters = (ReplaceTextParameters)o;\n+    ReplaceTextParameters replaceTextParameters = (ReplaceTextParameters) o;\n     return\n         Objects.equals(this.isMatchCase, replaceTextParameters.isMatchCase) &&\n         Objects.equals(this.isMatchWholeWord, replaceTextParameters.isMatchWholeWord) &&\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/471/ReplaceTextParameters.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/471/ReplaceTextParameters.java\nindex 675df3bc99b..d01f3a5bff4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/471/ReplaceTextParameters.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/471/ReplaceTextParameters.java\n@@ -159,7 +159,7 @@ public class ReplaceTextParameters {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    ReplaceTextParameters replaceTextParameters = (ReplaceTextParameters)o;\n+    ReplaceTextParameters replaceTextParameters = (ReplaceTextParameters) o;\n     return\n         Objects.equals(this.isMatchCase, replaceTextParameters.isMatchCase) &&\n         Objects.equals(this.isMatchWholeWord, replaceTextParameters.isMatchWholeWord) &&\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}