{
    "project_name": "Angel-ML-angel",
    "error_id": "1000",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "30",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1000/TMatrixFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/1000/TMatrixFactory.java\nindex b313802e25b..cc87d2e6073 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1000/TMatrixFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/1000/TMatrixFactory.java\n@@ -23,16 +23,13 @@ import org.apache.commons.pool.impl.GenericObjectPool;\n import org.apache.hadoop.conf.Configuration;\n \n public class TMatrixFactory {\n-\n   @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n   public static GenericObjectPool initCOOIntMatrixPool(int row, int col) {\n     Configuration conf = PSAgentContext.get().getConf();\n     int taskNumber =\n-        conf.getInt(AngelConfiguration.ANGEL_TASK_ACTUAL_NUM, conf.getInt(\n-            AngelConfiguration.ANGEL_WORKER_TASK_NUMBER,\n+        conf.getInt(AngelConfiguration.ANGEL_TASK_ACTUAL_NUM, conf.getInt(AngelConfiguration.ANGEL_WORKER_TASK_NUMBER,\n             AngelConfiguration.DEFAULT_ANGEL_WORKER_TASK_NUMBER));\n-\n-    GenericObjectPool.Config config = new GenericObjectPool.Config();\n+GenericObjectPool.Config config = new GenericObjectPool.Config();\n     config.maxActive = taskNumber * 3;\n     config.maxWait = 1000;\n     config.maxIdle = taskNumber;\n@@ -46,4 +43,4 @@ public class TMatrixFactory {\n             new TMatrixPoolableObjectFactory(row, col, new COOIntMatrixBuilder()), config);\n     return pool;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "30",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 186).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1000/TMatrixFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/1000/TMatrixFactory.java\nindex b313802e25b..5cfbe8f802b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1000/TMatrixFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/1000/TMatrixFactory.java\n@@ -18,20 +18,16 @@ package com.tencent.angel.ml.math.factory;\n \n import com.tencent.angel.conf.AngelConfiguration;\n import com.tencent.angel.psagent.PSAgentContext;\n-\n import org.apache.commons.pool.impl.GenericObjectPool;\n import org.apache.hadoop.conf.Configuration;\n \n public class TMatrixFactory {\n \n+\n   @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n   public static GenericObjectPool initCOOIntMatrixPool(int row, int col) {\n     Configuration conf = PSAgentContext.get().getConf();\n-    int taskNumber =\n-        conf.getInt(AngelConfiguration.ANGEL_TASK_ACTUAL_NUM, conf.getInt(\n-            AngelConfiguration.ANGEL_WORKER_TASK_NUMBER,\n-            AngelConfiguration.DEFAULT_ANGEL_WORKER_TASK_NUMBER));\n-\n+    int taskNumber = conf.getInt(AngelConfiguration.ANGEL_TASK_ACTUAL_NUM, conf.getInt(AngelConfiguration.ANGEL_WORKER_TASK_NUMBER, AngelConfiguration.DEFAULT_ANGEL_WORKER_TASK_NUMBER));\n     GenericObjectPool.Config config = new GenericObjectPool.Config();\n     config.maxActive = taskNumber * 3;\n     config.maxWait = 1000;\n@@ -41,9 +37,8 @@ public class TMatrixFactory {\n     config.testOnReturn = false;\n     config.minEvictableIdleTimeMillis = 10000;\n     config.whenExhaustedAction = GenericObjectPool.WHEN_EXHAUSTED_BLOCK;\n-    GenericObjectPool pool =\n-        new GenericObjectPool(\n-            new TMatrixPoolableObjectFactory(row, col, new COOIntMatrixBuilder()), config);\n+    GenericObjectPool pool = new GenericObjectPool(new TMatrixPoolableObjectFactory(row, col, new COOIntMatrixBuilder()), config);\n     return pool;\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}