{
    "project_name": "neo4j-neo4j",
    "error_id": "210",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "91",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "318",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "327",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "327",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "334",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "334",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "344",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "344",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "369",
                    "column": "41",
                    "severity": "error",
                    "message": "'}' at column 41 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "378",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "379",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "382",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "382",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "403",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "404",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "416",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "416",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "431",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "431",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "448",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "448",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "466",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "466",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "468",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "468",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "471",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "471",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "477",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "477",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "488",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "489",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "490",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "491",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "494",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "494",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "496",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "496",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "500",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "500",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "503",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "503",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "508",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "508",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "512",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "512",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "515",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "515",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "520",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "520",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "524",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "524",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "539",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "539",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "541",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "541",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "553",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "553",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "555",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "555",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "558",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "558",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "564",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "564",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "571",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "571",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "573",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "573",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "594",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "594",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "596",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "596",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "599",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "599",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "605",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "605",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "612",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "612",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "614",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "614",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "635",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "635",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "637",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "637",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "640",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "640",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "646",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "646",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "653",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "653",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "655",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "655",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "676",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "676",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "678",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "678",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "681",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "681",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "700",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "700",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "702",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "702",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "705",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "705",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "724",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "724",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "726",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "726",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "729",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "729",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "748",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "748",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "759",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "759",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "770",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "770",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "782",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "782",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "812",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "812",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/210/Dijkstra.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/210/Dijkstra.java\nindex d8fcf1444e5..496ac1c8792 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/210/Dijkstra.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/210/Dijkstra.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphalgo.impl.shortestpath;\n \n import java.util.Collections;\n@@ -51,14 +52,14 @@ import org.neo4j.internal.helpers.collection.Iterables;\n  * be sure to call getPaths (or calculateMultiple) before any call to getPath or\n  * getCost (or calculate) is made.\n  *\n- * @complexity The {@link CostEvaluator}, the {@link CostAccumulator} and the\n- *             cost comparator will all be called once for every relationship\n- *             traversed. Assuming they run in constant time, the time\n- *             complexity for this algorithm is O(m + n * log(n)).\n  * @param <CostType> The datatype the edge weights will be represented by.\n+ * @complexity The {@link CostEvaluator}, the {@link CostAccumulator} and the\n+ * cost comparator will all be called once for every relationship\n+ * traversed. Assuming they run in constant time, the time\n+ * complexity for this algorithm is O(m + n * log(n)).\n  */\n public class Dijkstra<CostType> implements\n-        SingleSourceSingleSinkShortestPath<CostType>\n+  SingleSourceSingleSinkShortestPath<CostType>\n {\n     protected CostType startCost; // starting cost for both the start node and\n     // the end node\n@@ -79,20 +80,20 @@ public class Dijkstra<CostType> implements\n \n     /**\n      * @return True if the set limits for the calculation has been reached (but\n-     *         not exceeded)\n+     * not exceeded)\n      */\n     protected boolean limitReached()\n     {\n         return maxRelationShipsToTraverse >= 0 && numberOfTraversedRelationShips >= maxRelationShipsToTraverse ||\n-                maxNodesToTraverse >= 0 && numberOfNodesTraversed >= maxNodesToTraverse;\n+          maxNodesToTraverse >= 0 && numberOfNodesTraversed >= maxNodesToTraverse;\n     }\n \n-    protected boolean limitReached( CostType cost1, CostType cost2 )\n+    protected boolean limitReached(CostType cost1, CostType cost2)\n     {\n-        if ( maxCost != null )\n+        if (maxCost != null)\n         {\n-            CostType totalCost = costAccumulator.addCosts( cost1, cost2 );\n-            if ( costComparator.compare( totalCost, maxCost ) > 0 )\n+            CostType totalCost = costAccumulator.addCosts(cost1, cost2);\n+            if (costComparator.compare(totalCost, maxCost) > 0)\n             {\n                 foundPathsMiddleNodes = null;\n                 foundPathsCost = null;\n@@ -127,21 +128,21 @@ public class Dijkstra<CostType> implements\n     }\n \n     /**\n-     * @param startCost Starting cost for both the start node and the end node\n-     * @param startNode the start node\n-     * @param endNode the end node\n+     * @param startCost         Starting cost for both the start node and the end node\n+     * @param startNode         the start node\n+     * @param endNode           the end node\n      * @param costRelationTypes the relationship that should be included in the\n-     *            path\n+     *                          path\n      * @param relationDirection relationship direction to follow\n-     * @param costEvaluator the cost function per relationship\n-     * @param costAccumulator adding up the path cost\n-     * @param costComparator comparing to path costs\n+     * @param costEvaluator     the cost function per relationship\n+     * @param costAccumulator   adding up the path cost\n+     * @param costComparator    comparing to path costs\n      */\n-    public Dijkstra( CostType startCost, Node startNode, Node endNode,\n-            CostEvaluator<CostType> costEvaluator,\n-            CostAccumulator<CostType> costAccumulator,\n-            Comparator<CostType> costComparator, Direction relationDirection,\n-            RelationshipType... costRelationTypes )\n+    public Dijkstra(CostType startCost, Node startNode, Node endNode,\n+                    CostEvaluator<CostType> costEvaluator,\n+                    CostAccumulator<CostType> costAccumulator,\n+                    Comparator<CostType> costComparator, Direction relationDirection,\n+                    RelationshipType... costRelationTypes)\n     {\n         super();\n         this.startCost = startCost;\n@@ -180,12 +181,12 @@ public class Dijkstra<CostType> implements\n         protected boolean oneShortestPathHasBeenFound;\n         protected boolean allShortestPathsHasBeenFound;\n \n-        public DijkstraIterator( Node startNode,\n-                Map<Node, List<Relationship>> predecessors,\n-                Map<Node, CostType> mySeen,\n-                Map<Node, CostType> otherSeen,\n-                Map<Node, CostType> myDistances,\n-                Map<Node, CostType> otherDistances, boolean backwards )\n+        public DijkstraIterator(Node startNode,\n+                                Map<Node, List<Relationship>> predecessors,\n+                                Map<Node, CostType> mySeen,\n+                                Map<Node, CostType> otherSeen,\n+                                Map<Node, CostType> myDistances,\n+                                Map<Node, CostType> otherDistances, boolean backwards)\n         {\n             super();\n             this.startNode = startNode;\n@@ -203,13 +204,13 @@ public class Dijkstra<CostType> implements\n          */\n         protected Direction getDirection()\n         {\n-            if ( backwards )\n+            if (backwards)\n             {\n-                if ( relationDirection.equals( Direction.INCOMING ) )\n+                if (relationDirection.equals(Direction.INCOMING))\n                 {\n                     return Direction.OUTGOING;\n                 }\n-                if ( relationDirection.equals( Direction.OUTGOING ) )\n+                if (relationDirection.equals(Direction.OUTGOING))\n                 {\n                     return Direction.INCOMING;\n                 }\n@@ -220,9 +221,9 @@ public class Dijkstra<CostType> implements\n         // This puts the start node into the queue\n         protected void InitQueue()\n         {\n-            queue = new DijkstraPriorityQueueFibonacciImpl<>( costComparator );\n-            queue.insertValue( startNode, startCost );\n-            mySeen.put( startNode, startCost );\n+            queue = new DijkstraPriorityQueueFibonacciImpl<>(costComparator);\n+            queue.insertValue(startNode, startCost);\n+            mySeen.put(startNode, startCost);\n         }\n \n         @Override\n@@ -245,39 +246,39 @@ public class Dijkstra<CostType> implements\n          * cost for the path is calculated and compared to previously found\n          * paths.\n          *\n-         * @param currentNode The node to be examined.\n-         * @param currentCost The cost from the start node to this node.\n+         * @param currentNode        The node to be examined.\n+         * @param currentCost        The cost from the start node to this node.\n          * @param otherSideDistances Map over distances from other side. A path\n-         *            is found and examined if this contains currentNode.\n+         *                           is found and examined if this contains currentNode.\n          */\n-        protected void checkForPath( Node currentNode, CostType currentCost,\n-                Map<Node, CostType> otherSideDistances )\n+        protected void checkForPath(Node currentNode, CostType currentCost,\n+                                    Map<Node, CostType> otherSideDistances)\n         {\n             // Found a path?\n-            if ( otherSideDistances.containsKey( currentNode ) )\n+            if (otherSideDistances.containsKey(currentNode))\n             {\n                 // Is it better than previously found paths?\n-                CostType otherCost = otherSideDistances.get( currentNode );\n-                CostType newTotalCost = costAccumulator.addCosts( currentCost,\n-                        otherCost );\n-                if ( foundPathsMiddleNodes == null )\n+                CostType otherCost = otherSideDistances.get(currentNode);\n+                CostType newTotalCost = costAccumulator.addCosts(currentCost,\n+                  otherCost);\n+                if (foundPathsMiddleNodes == null)\n                 {\n                     foundPathsMiddleNodes = new HashSet<>();\n                 }\n                 // No previous path found, or equally good one found?\n-                if ( foundPathsMiddleNodes.isEmpty()\n-                     || costComparator.compare( foundPathsCost, newTotalCost ) == 0 )\n+                if (foundPathsMiddleNodes.isEmpty()\n+                  || costComparator.compare(foundPathsCost, newTotalCost) == 0)\n                 {\n                     foundPathsCost = newTotalCost; // in case we had no\n                     // previous path\n-                    foundPathsMiddleNodes.add( currentNode );\n+                    foundPathsMiddleNodes.add(currentNode);\n                 }\n                 // New better path found?\n-                else if ( costComparator.compare( foundPathsCost, newTotalCost ) > 0 )\n+                else if (costComparator.compare(foundPathsCost, newTotalCost) > 0)\n                 {\n                     foundPathsMiddleNodes.clear();\n                     foundPathsCost = newTotalCost;\n-                    foundPathsMiddleNodes.add( currentNode );\n+                    foundPathsMiddleNodes.add(currentNode);\n                 }\n             }\n         }\n@@ -285,128 +286,126 @@ public class Dijkstra<CostType> implements\n         @Override\n         public Node next()\n         {\n-            if ( !hasNext() )\n+            if (!hasNext())\n             {\n                 throw new NoSuchElementException();\n             }\n \n             Node currentNode = queue.extractMin();\n-            CostType currentCost = mySeen.get( currentNode );\n+            CostType currentCost = mySeen.get(currentNode);\n             // Already done with this node?\n-            if ( myDistances.containsKey( currentNode ) )\n+            if (myDistances.containsKey(currentNode))\n             {\n                 return null;\n             }\n-            if ( limitReached() )\n+            if (limitReached())\n             {\n                 return null;\n             }\n             ++numberOfNodesTraversed;\n-            myDistances.put( currentNode, currentCost );\n+            myDistances.put(currentNode, currentCost);\n             // TODO: remove from seen or not? probably not... because of path\n             // detection\n             // Check if we have found a better path\n-            checkForPath( currentNode, currentCost, otherSeen );\n+            checkForPath(currentNode, currentCost, otherSeen);\n             // Found a path? (abort traversing from this node)\n-            if ( otherDistances.containsKey( currentNode ) )\n+            if (otherDistances.containsKey(currentNode))\n             {\n                 oneShortestPathHasBeenFound = true;\n-            }\n-            else\n+            } else\n             {\n                 // Otherwise, follow all edges from this node\n-                for ( RelationshipType costRelationType : costRelationTypes )\n+                for (RelationshipType costRelationType : costRelationTypes)\n                 {\n                     ResourceIterable<Relationship> relationships = Iterables.asResourceIterable(\n-                            currentNode.getRelationships( getDirection(), costRelationType ) );\n-                    try ( ResourceIterator<Relationship> iterator = relationships.iterator() )\n+                      currentNode.getRelationships(getDirection(), costRelationType));\n+                    try (ResourceIterator<Relationship> iterator = relationships.iterator())\n                     {\n-                        while ( iterator.hasNext() )\n+                        while (iterator.hasNext())\n                         {\n                             Relationship relationship = iterator.next();\n-                            if ( limitReached() )\n+                            if (limitReached())\n                             {\n                                 break;\n                             }\n                             ++numberOfTraversedRelationShips;\n                             // Target node\n-                            Node target = relationship.getOtherNode( currentNode );\n-                            if ( otherDistances.containsKey( target ) )\n+                            Node target = relationship.getOtherNode(currentNode);\n+                            if (otherDistances.containsKey(target))\n                             {\n                                 continue;\n                             }\n                             // Find out if an eventual path would go in the opposite\n                             // direction of the edge\n-                            boolean backwardsEdge = relationship.getEndNode().equals( currentNode ) ^ backwards;\n-                            CostType newCost = costAccumulator.addCosts( currentCost, costEvaluator\n-                                    .getCost( relationship, backwardsEdge ? Direction.INCOMING : Direction.OUTGOING ) );\n+                            boolean backwardsEdge = relationship.getEndNode().equals(currentNode) ^ backwards;\n+                            CostType newCost = costAccumulator.addCosts(currentCost, costEvaluator\n+                              .getCost(relationship, backwardsEdge ? Direction.INCOMING : Direction.OUTGOING));\n                             // Already done with target node?\n-                            if ( myDistances.containsKey( target ) )\n+                            if (myDistances.containsKey(target))\n                             {\n                                 // Have we found a better cost for a node which is\n                                 // already\n                                 // calculated?\n-                                if ( costComparator.compare( myDistances.get( target ), newCost ) > 0 )\n+                                if (costComparator.compare(myDistances.get(target), newCost) > 0)\n                                 {\n-                                    throw new RuntimeException( \"Cycle with negative costs found.\" );\n+                                    throw new RuntimeException(\"Cycle with negative costs found.\");\n                                 }\n                                 // Equally good path found?\n-                                else if ( calculateAllShortestPaths &&\n-                                        costComparator.compare( myDistances.get( target ), newCost ) == 0 )\n+                                else if (calculateAllShortestPaths &&\n+                                  costComparator.compare(myDistances.get(target), newCost) == 0)\n                                 {\n                                     // Put it in predecessors\n-                                    List<Relationship> myPredecessors = predecessors.get( currentNode );\n+                                    List<Relationship> myPredecessors = predecessors.get(currentNode);\n                                     // Dont do it if this relation is already in\n                                     // predecessors (other direction)\n-                                    if ( myPredecessors == null || !myPredecessors.contains( relationship ) )\n+                                    if (myPredecessors == null || !myPredecessors.contains(relationship))\n                                     {\n-                                        List<Relationship> predList = predecessors.get( target );\n-                                        if ( predList == null )\n+                                        List<Relationship> predList = predecessors.get(target);\n+                                        if (predList == null)\n                                         {\n                                             // This only happens if we get back to\n                                             // the\n                                             // start node, which is just bogus\n-                                        }\n-                                        else\n+                                        } else\n                                         {\n-                                            predList.add( relationship );\n+                                            predList.add(relationship);\n                                         }\n                                     }\n                                 }\n                                 continue;\n                             }\n                             // Have we found a better cost for this node?\n-                            if ( !mySeen.containsKey( target ) ||\n-                                    costComparator.compare( mySeen.get( target ), newCost ) > 0 )\n+                            if (!mySeen.containsKey(target) ||\n+                              costComparator.compare(mySeen.get(target), newCost) > 0)\n                             {\n                                 // Put it in the queue\n-                                if ( !mySeen.containsKey( target ) )\n+                                if (!mySeen.containsKey(target))\n                                 {\n-                                    queue.insertValue( target, newCost );\n+                                    queue.insertValue(target, newCost);\n                                 }\n                                 // or update the entry. (It is important to keep\n                                 // these\n                                 // cases apart to limit the size of the queue)\n                                 else\n                                 {\n-                                    queue.decreaseValue( target, newCost );\n+                                    queue.decreaseValue(target, newCost);\n                                 }\n                                 // Update it\n-                                mySeen.put( target, newCost );\n+                                mySeen.put(target, newCost);\n                                 // Put it in predecessors\n                                 List<Relationship> predList = new LinkedList<>();\n-                                predList.add( relationship );\n-                                predecessors.put( target, predList );\n+                                predList.add(relationship);\n+                                predecessors.put(target, predList);\n                             }\n                             // Have we found an equal cost for (additional path to)\n                             // this\n                             // node?\n-                            else if ( calculateAllShortestPaths &&\n-                                    costComparator.compare( mySeen.get( target ), newCost ) == 0 )\n+                            else if (calculateAllShortestPaths &&\n+                              costComparator.compare(mySeen.get(target), newCost) == 0)\n                             {\n                                 // Put it in predecessors\n-                                List<Relationship> predList = predecessors.get( target );\n-                                predList.add( relationship );\n+                                List<Relationship> predList = predecessors.get(target);\n+                                predList.add(relationship);\n                             }\n                         }\n                     }\n@@ -414,22 +413,22 @@ public class Dijkstra<CostType> implements\n             }\n             // Check how far we need to continue when searching for all shortest\n             // paths\n-            if ( calculateAllShortestPaths && oneShortestPathHasBeenFound )\n+            if (calculateAllShortestPaths && oneShortestPathHasBeenFound)\n             {\n                 // If we cannot continue or continuation would only find more\n                 // expensive paths: conclude that all shortest paths have been\n                 // found.\n                 allShortestPathsHasBeenFound = queue.isEmpty()\n-                                               || costComparator.compare(\n-                                                       mySeen.get( queue.peek() ),\n-                                                       currentCost ) > 0;\n+                  || costComparator.compare(\n+                  mySeen.get(queue.peek()),\n+                  currentCost) > 0;\n             }\n             return currentNode;\n         }\n \n         public boolean isDone()\n         {\n-            if ( !calculateAllShortestPaths )\n+            if (!calculateAllShortestPaths)\n             {\n                 return oneShortestPathHasBeenFound;\n             }\n@@ -446,7 +445,7 @@ public class Dijkstra<CostType> implements\n      */\n     public boolean calculateMultiple()\n     {\n-        if ( !calculateAllShortestPaths )\n+        if (!calculateAllShortestPaths)\n         {\n             reset();\n             calculateAllShortestPaths = true;\n@@ -464,65 +463,65 @@ public class Dijkstra<CostType> implements\n     {\n         // Do this first as a general error check since this is supposed to be\n         // called whenever a result is asked for.\n-        if ( startNode == null || endNode == null )\n+        if (startNode == null || endNode == null)\n         {\n-            throw new RuntimeException( \"Start or end node undefined.\" );\n+            throw new RuntimeException(\"Start or end node undefined.\");\n         }\n         // Don't do it more than once\n-        if ( doneCalculation )\n+        if (doneCalculation)\n         {\n             return true;\n         }\n         doneCalculation = true;\n         // Special case when path length is zero\n-        if ( startNode.equals( endNode ) )\n+        if (startNode.equals(endNode))\n         {\n             foundPathsMiddleNodes = new HashSet<>();\n-            foundPathsMiddleNodes.add( startNode );\n-            foundPathsCost = costAccumulator.addCosts( startCost, startCost );\n+            foundPathsMiddleNodes.add(startNode);\n+            foundPathsCost = costAccumulator.addCosts(startCost, startCost);\n             return true;\n         }\n         Map<Node, CostType> seen1 = new HashMap<>();\n         Map<Node, CostType> seen2 = new HashMap<>();\n         Map<Node, CostType> dists1 = new HashMap<>();\n         Map<Node, CostType> dists2 = new HashMap<>();\n-        DijkstraIterator iter1 = new DijkstraIterator( startNode, predecessors1,\n-                seen1, seen2, dists1, dists2, false );\n-        DijkstraIterator iter2 = new DijkstraIterator( endNode, predecessors2,\n-                seen2, seen1, dists2, dists1, true );\n+        DijkstraIterator iter1 = new DijkstraIterator(startNode, predecessors1,\n+          seen1, seen2, dists1, dists2, false);\n+        DijkstraIterator iter2 = new DijkstraIterator(endNode, predecessors2,\n+          seen2, seen1, dists2, dists1, true);\n         Node node1 = null;\n         Node node2 = null;\n-        while ( iter1.hasNext() && iter2.hasNext() )\n+        while (iter1.hasNext() && iter2.hasNext())\n         {\n-            if ( limitReached() )\n+            if (limitReached())\n             {\n                 break;\n             }\n-            if ( iter1.hasNext() )\n+            if (iter1.hasNext())\n             {\n                 node1 = iter1.next();\n-                if ( node1 == null )\n+                if (node1 == null)\n                 {\n                     break;\n                 }\n             }\n-            if ( limitReached() )\n+            if (limitReached())\n             {\n                 break;\n             }\n-            if ( !iter1.isDone() && iter2.hasNext() )\n+            if (!iter1.isDone() && iter2.hasNext())\n             {\n                 node2 = iter2.next();\n-                if ( node2 == null )\n+                if (node2 == null)\n                 {\n                     break;\n                 }\n             }\n-            if ( limitReached( seen1.get( node1 ), seen2.get( node2 ) ) )\n+            if (limitReached(seen1.get(node1), seen2.get(node2)))\n             {\n                 break;\n             }\n-            if ( iter1.isDone() || iter2.isDone() ) // A path was found\n+            if (iter1.isDone() || iter2.isDone()) // A path was found\n             {\n                 return true;\n             }\n@@ -537,9 +536,9 @@ public class Dijkstra<CostType> implements\n     @Override\n     public CostType getCost()\n     {\n-        if ( startNode == null || endNode == null )\n+        if (startNode == null || endNode == null)\n         {\n-            throw new RuntimeException( \"Start or end node undefined.\" );\n+            throw new RuntimeException(\"Start or end node undefined.\");\n         }\n         calculate();\n         return foundPathsCost;\n@@ -551,34 +550,34 @@ public class Dijkstra<CostType> implements\n     @Override\n     public List<List<Entity>> getPaths()\n     {\n-        if ( startNode == null || endNode == null )\n+        if (startNode == null || endNode == null)\n         {\n-            throw new RuntimeException( \"Start or end node undefined.\" );\n+            throw new RuntimeException(\"Start or end node undefined.\");\n         }\n         calculateMultiple();\n-        if ( foundPathsMiddleNodes == null || foundPathsMiddleNodes.isEmpty() )\n+        if (foundPathsMiddleNodes == null || foundPathsMiddleNodes.isEmpty())\n         {\n             return Collections.emptyList();\n         }\n \n         List<List<Entity>> paths = new LinkedList<>();\n-        for ( Node middleNode : foundPathsMiddleNodes )\n+        for (Node middleNode : foundPathsMiddleNodes)\n         {\n             List<List<Entity>> paths1 = Util.constructAllPathsToNode(\n-                    middleNode, predecessors1, true, false );\n+              middleNode, predecessors1, true, false);\n             List<List<Entity>> paths2 = Util.constructAllPathsToNode(\n-                    middleNode, predecessors2, false, true );\n+              middleNode, predecessors2, false, true);\n             // For all combinations...\n-            for ( List<Entity> part1 : paths1 )\n+            for (List<Entity> part1 : paths1)\n             {\n-                for ( List<Entity> part2 : paths2 )\n+                for (List<Entity> part2 : paths2)\n                 {\n                     // Combine them\n                     List<Entity> path = new LinkedList<>();\n-                    path.addAll( part1 );\n-                    path.addAll( part2 );\n+                    path.addAll(part1);\n+                    path.addAll(part2);\n                     // Add to collection\n-                    paths.add( path );\n+                    paths.add(path);\n                 }\n             }\n         }\n@@ -592,34 +591,34 @@ public class Dijkstra<CostType> implements\n     @Override\n     public List<List<Node>> getPathsAsNodes()\n     {\n-        if ( startNode == null || endNode == null )\n+        if (startNode == null || endNode == null)\n         {\n-            throw new RuntimeException( \"Start or end node undefined.\" );\n+            throw new RuntimeException(\"Start or end node undefined.\");\n         }\n         calculateMultiple();\n-        if ( foundPathsMiddleNodes == null || foundPathsMiddleNodes.isEmpty() )\n+        if (foundPathsMiddleNodes == null || foundPathsMiddleNodes.isEmpty())\n         {\n             return null;\n         }\n \n         List<List<Node>> paths = new LinkedList<>();\n-        for ( Node middleNode : foundPathsMiddleNodes )\n+        for (Node middleNode : foundPathsMiddleNodes)\n         {\n             List<List<Node>> paths1 = Util.constructAllPathsToNodeAsNodes(\n-                    middleNode, predecessors1, true, false );\n+              middleNode, predecessors1, true, false);\n             List<List<Node>> paths2 = Util.constructAllPathsToNodeAsNodes(\n-                    middleNode, predecessors2, false, true );\n+              middleNode, predecessors2, false, true);\n             // For all combinations...\n-            for ( List<Node> part1 : paths1 )\n+            for (List<Node> part1 : paths1)\n             {\n-                for ( List<Node> part2 : paths2 )\n+                for (List<Node> part2 : paths2)\n                 {\n                     // Combine them\n                     List<Node> path = new LinkedList<>();\n-                    path.addAll( part1 );\n-                    path.addAll( part2 );\n+                    path.addAll(part1);\n+                    path.addAll(part2);\n                     // Add to collection\n-                    paths.add( path );\n+                    paths.add(path);\n                 }\n             }\n         }\n@@ -633,34 +632,34 @@ public class Dijkstra<CostType> implements\n     @Override\n     public List<List<Relationship>> getPathsAsRelationships()\n     {\n-        if ( startNode == null || endNode == null )\n+        if (startNode == null || endNode == null)\n         {\n-            throw new RuntimeException( \"Start or end node undefined.\" );\n+            throw new RuntimeException(\"Start or end node undefined.\");\n         }\n         calculateMultiple();\n-        if ( foundPathsMiddleNodes == null || foundPathsMiddleNodes.isEmpty() )\n+        if (foundPathsMiddleNodes == null || foundPathsMiddleNodes.isEmpty())\n         {\n             return null;\n         }\n \n         List<List<Relationship>> paths = new LinkedList<>();\n-        for ( Node middleNode : foundPathsMiddleNodes )\n+        for (Node middleNode : foundPathsMiddleNodes)\n         {\n             List<List<Relationship>> paths1 = Util.constructAllPathsToNodeAsRelationships(\n-                    middleNode, predecessors1, false );\n+              middleNode, predecessors1, false);\n             List<List<Relationship>> paths2 = Util.constructAllPathsToNodeAsRelationships(\n-                    middleNode, predecessors2, true );\n+              middleNode, predecessors2, true);\n             // For all combinations...\n-            for ( List<Relationship> part1 : paths1 )\n+            for (List<Relationship> part1 : paths1)\n             {\n-                for ( List<Relationship> part2 : paths2 )\n+                for (List<Relationship> part2 : paths2)\n                 {\n                     // Combine them\n                     List<Relationship> path = new LinkedList<>();\n-                    path.addAll( part1 );\n-                    path.addAll( part2 );\n+                    path.addAll(part1);\n+                    path.addAll(part2);\n                     // Add to collection\n-                    paths.add( path );\n+                    paths.add(path);\n                 }\n             }\n         }\n@@ -674,21 +673,21 @@ public class Dijkstra<CostType> implements\n     @Override\n     public List<Entity> getPath()\n     {\n-        if ( startNode == null || endNode == null )\n+        if (startNode == null || endNode == null)\n         {\n-            throw new RuntimeException( \"Start or end node undefined.\" );\n+            throw new RuntimeException(\"Start or end node undefined.\");\n         }\n         calculate();\n-        if ( foundPathsMiddleNodes == null || foundPathsMiddleNodes.isEmpty() )\n+        if (foundPathsMiddleNodes == null || foundPathsMiddleNodes.isEmpty())\n         {\n             return null;\n         }\n         Node middleNode = foundPathsMiddleNodes.iterator().next();\n         List<Entity> path = new LinkedList<>();\n-        path.addAll( Util.constructSinglePathToNode( middleNode, predecessors1,\n-                true, false ) );\n-        path.addAll( Util.constructSinglePathToNode( middleNode, predecessors2,\n-                false, true ) );\n+        path.addAll(Util.constructSinglePathToNode(middleNode, predecessors1,\n+          true, false));\n+        path.addAll(Util.constructSinglePathToNode(middleNode, predecessors2,\n+          false, true));\n         return path;\n     }\n \n@@ -698,21 +697,21 @@ public class Dijkstra<CostType> implements\n     @Override\n     public List<Node> getPathAsNodes()\n     {\n-        if ( startNode == null || endNode == null )\n+        if (startNode == null || endNode == null)\n         {\n-            throw new RuntimeException( \"Start or end node undefined.\" );\n+            throw new RuntimeException(\"Start or end node undefined.\");\n         }\n         calculate();\n-        if ( foundPathsMiddleNodes == null || foundPathsMiddleNodes.isEmpty() )\n+        if (foundPathsMiddleNodes == null || foundPathsMiddleNodes.isEmpty())\n         {\n             return null;\n         }\n         Node middleNode = foundPathsMiddleNodes.iterator().next();\n         List<Node> pathNodes = new LinkedList<>();\n-        pathNodes.addAll( Util.constructSinglePathToNodeAsNodes( middleNode,\n-                predecessors1, true, false ) );\n-        pathNodes.addAll( Util.constructSinglePathToNodeAsNodes( middleNode,\n-                predecessors2, false, true ) );\n+        pathNodes.addAll(Util.constructSinglePathToNodeAsNodes(middleNode,\n+          predecessors1, true, false));\n+        pathNodes.addAll(Util.constructSinglePathToNodeAsNodes(middleNode,\n+          predecessors2, false, true));\n         return pathNodes;\n     }\n \n@@ -722,21 +721,21 @@ public class Dijkstra<CostType> implements\n     @Override\n     public List<Relationship> getPathAsRelationships()\n     {\n-        if ( startNode == null || endNode == null )\n+        if (startNode == null || endNode == null)\n         {\n-            throw new RuntimeException( \"Start or end node undefined.\" );\n+            throw new RuntimeException(\"Start or end node undefined.\");\n         }\n         calculate();\n-        if ( foundPathsMiddleNodes == null || foundPathsMiddleNodes.isEmpty() )\n+        if (foundPathsMiddleNodes == null || foundPathsMiddleNodes.isEmpty())\n         {\n             return null;\n         }\n         Node middleNode = foundPathsMiddleNodes.iterator().next();\n         List<Relationship> path = new LinkedList<>();\n-        path.addAll( Util.constructSinglePathToNodeAsRelationships( middleNode,\n-                predecessors1, false ) );\n-        path.addAll( Util.constructSinglePathToNodeAsRelationships( middleNode,\n-                predecessors2, true ) );\n+        path.addAll(Util.constructSinglePathToNodeAsRelationships(middleNode,\n+          predecessors1, false));\n+        path.addAll(Util.constructSinglePathToNodeAsRelationships(middleNode,\n+          predecessors2, true));\n         return path;\n     }\n \n@@ -746,7 +745,7 @@ public class Dijkstra<CostType> implements\n      *\n      * @param maxRelationShipsToTraverse\n      */\n-    public void limitMaxRelationShipsToTraverse( long maxRelationShipsToTraverse )\n+    public void limitMaxRelationShipsToTraverse(long maxRelationShipsToTraverse)\n     {\n         this.maxRelationShipsToTraverse = maxRelationShipsToTraverse;\n     }\n@@ -757,7 +756,7 @@ public class Dijkstra<CostType> implements\n      *\n      * @param maxNodesToTraverse\n      */\n-    public void limitMaxNodesToTraverse( long maxNodesToTraverse )\n+    public void limitMaxNodesToTraverse(long maxNodesToTraverse)\n     {\n         this.maxNodesToTraverse = maxNodesToTraverse;\n     }\n@@ -768,7 +767,7 @@ public class Dijkstra<CostType> implements\n      * @param endNode the endNode to set\n      */\n     @Override\n-    public void setEndNode( Node endNode )\n+    public void setEndNode(Node endNode)\n     {\n         reset();\n         this.endNode = endNode;\n@@ -780,7 +779,7 @@ public class Dijkstra<CostType> implements\n      * @param startNode the startNode to set\n      */\n     @Override\n-    public void setStartNode( Node startNode )\n+    public void setStartNode(Node startNode)\n     {\n         this.startNode = startNode;\n         reset();\n@@ -810,7 +809,7 @@ public class Dijkstra<CostType> implements\n      *\n      * @param maxCost\n      */\n-    public void limitMaxCostToTraverse( CostType maxCost )\n+    public void limitMaxCostToTraverse(CostType maxCost)\n     {\n         this.maxCost = maxCost;\n     }\n",
            "diff_size": 184
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}