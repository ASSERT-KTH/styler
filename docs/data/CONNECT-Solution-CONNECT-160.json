{
    "project_name": "CONNECT-Solution-CONNECT",
    "error_id": "160",
    "information": {
        "errors": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.direct.edge.proxy;\n\nimport gov.hhs.fha.nhinc.direct.DirectException;\nimport gov.hhs.fha.nhinc.direct.edge.proxy.service.DirectEdgeSoapServicePortDescriptor;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/160/DirectEdgeProxySoapImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/160/DirectEdgeProxySoapImpl.java\nindex 693ecfd9fa1..97c9efdbf61 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/160/DirectEdgeProxySoapImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/160/DirectEdgeProxySoapImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.direct.edge.proxy;\n \n import gov.hhs.fha.nhinc.direct.DirectException;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/160/DirectEdgeProxySoapImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/160/DirectEdgeProxySoapImpl.java\nindex 693ecfd9fa1..49eb35efedb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/160/DirectEdgeProxySoapImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/160/DirectEdgeProxySoapImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.direct.edge.proxy;\n \n import gov.hhs.fha.nhinc.direct.DirectException;\n@@ -46,96 +47,96 @@ import oasis.names.tc.ebxml_regrep.xsd.rs._3.RegistryResponseType;\n import org.apache.log4j.Logger;\n \n /**\n- *\n  * @author jhoppesc\n  */\n+\n /**\n  * @author mweaver\n  *\n  */\n public class DirectEdgeProxySoapImpl implements DirectEdgeProxy {\n \n-    private static final Logger LOG = Logger.getLogger(DirectEdgeProxySoapImpl.class);\n-    private final WebServiceProxyHelper oProxyHelper;\n-\n-    /**\n-     * @param oProxyHelper web service proxy helper for soap edge clients.\n-     */\n-    public DirectEdgeProxySoapImpl(WebServiceProxyHelper oProxyHelper) {\n-        this.oProxyHelper = oProxyHelper;\n-    }\n-\n-    /*\n-     * (non-Javadoc)\n-     *\n-     * @see\n-     * gov.hhs.fha.nhinc.direct.edge.proxy.DirectEdgeProxy#provideAndRegisterDocumentSetB\n-     * (javax.mail.internet.MimeMessage)\n-     */\n-    @Override\n-    public RegistryResponseType provideAndRegisterDocumentSetB(MimeMessage message) {\n-        LOG.debug(\"Begin provideAndRegisterDocumentSetB\");\n-        RegistryResponseType response = null;\n-\n-        try {\n-            ProvideAndRegisterDocumentSetRequestType prdsrt = null;\n-\n-            if (message instanceof MimeMessage) {\n-                MimeMessageTransformer transformer = new MimeMessageTransformer();\n-\n-                prdsrt = transformer.transform(message);\n-            } else {\n-                LOG.warn(\"MimeMessage was expected but not recieved.\");\n-            }\n-\n-            String url = oProxyHelper\n-                    .getAdapterEndPointFromConnectionManager(NhincConstants.DIRECT_SOAP_EDGE_SERVICE_NAME);\n-            if (NullChecker.isNotNullish(url)) {\n-\n-                ServicePortDescriptor<DocumentRepositoryPortType> portDescriptor =\n-                        new DirectEdgeSoapServicePortDescriptor();\n-\n-                CONNECTClient<DocumentRepositoryPortType> client = getClient(portDescriptor, url);\n-\n-                response = (RegistryResponseType) client.invokePort(DocumentRepositoryPortType.class,\n-                        \"documentRepositoryProvideAndRegisterDocumentSetB\", prdsrt);\n-\n-            } else {\n-                handleError(\"Failed to call the web service (\" + NhincConstants.DIRECT_SOAP_EDGE_SERVICE_NAME\n-                        + \").  The URL is null.\", message);\n-            }\n-        } catch (Exception ex) {\n-            handleError(\"Error sending Adapter Doc Submission Unsecured message: \", ex, message);\n-        }\n-\n-        LOG.debug(\"End provideAndRegisterDocumentSetB\");\n-        return response;\n-    }\n-\n-    private void handleError(String errorMessage, MimeMessage mimeMessage) {\n-        handleError(errorMessage, null, mimeMessage);\n-    }\n-\n-    private void handleError(String errorMessage, Throwable e, MimeMessage mimeMessage) {\n-        XDCommonResponseHelper helper = new XDCommonResponseHelper();\n-        if (e != null) {\n-            String message = errorMessage + e.getMessage();\n-            LOG.error(helper.createError(message));\n-            throw new DirectException(errorMessage, e, mimeMessage);\n-        } else {\n-            LOG.error(helper.createError(errorMessage));\n-            throw new DirectException(errorMessage, mimeMessage);\n-        }\n+  private static final Logger LOG = Logger.getLogger(DirectEdgeProxySoapImpl.class);\n+  private final WebServiceProxyHelper oProxyHelper;\n+\n+  /**\n+   * @param oProxyHelper web service proxy helper for soap edge clients.\n+   */\n+  public DirectEdgeProxySoapImpl(WebServiceProxyHelper oProxyHelper) {\n+    this.oProxyHelper = oProxyHelper;\n+  }\n+\n+  /*\n+   * (non-Javadoc)\n+   *\n+   * @see\n+   * gov.hhs.fha.nhinc.direct.edge.proxy.DirectEdgeProxy#provideAndRegisterDocumentSetB\n+   * (javax.mail.internet.MimeMessage)\n+   */\n+  @Override\n+  public RegistryResponseType provideAndRegisterDocumentSetB(MimeMessage message) {\n+    LOG.debug(\"Begin provideAndRegisterDocumentSetB\");\n+    RegistryResponseType response = null;\n+\n+    try {\n+      ProvideAndRegisterDocumentSetRequestType prdsrt = null;\n+\n+      if (message instanceof MimeMessage) {\n+        MimeMessageTransformer transformer = new MimeMessageTransformer();\n+\n+        prdsrt = transformer.transform(message);\n+      } else {\n+        LOG.warn(\"MimeMessage was expected but not recieved.\");\n+      }\n+\n+      String url = oProxyHelper\n+          .getAdapterEndPointFromConnectionManager(NhincConstants.DIRECT_SOAP_EDGE_SERVICE_NAME);\n+      if (NullChecker.isNotNullish(url)) {\n+\n+        ServicePortDescriptor<DocumentRepositoryPortType> portDescriptor =\n+            new DirectEdgeSoapServicePortDescriptor();\n+\n+        CONNECTClient<DocumentRepositoryPortType> client = getClient(portDescriptor, url);\n+\n+        response = (RegistryResponseType) client.invokePort(DocumentRepositoryPortType.class,\n+            \"documentRepositoryProvideAndRegisterDocumentSetB\", prdsrt);\n+\n+      } else {\n+        handleError(\"Failed to call the web service (\" + NhincConstants.DIRECT_SOAP_EDGE_SERVICE_NAME\n+            + \").  The URL is null.\", message);\n+      }\n+    } catch (Exception ex) {\n+      handleError(\"Error sending Adapter Doc Submission Unsecured message: \", ex, message);\n     }\n \n-    /**\n-     * @param portDescriptor description object representing the WSDL port for the service to be called.\n-     * @param url endpoint url to be called.\n-     * @return a client for a DocumentRepositoryPortType WSDL port based on the descriptor and url.\n-     */\n-    protected CONNECTClient<DocumentRepositoryPortType> getClient(\n-            ServicePortDescriptor<DocumentRepositoryPortType> portDescriptor, String url) {\n-        return CONNECTClientFactory.getInstance().getCONNECTClientUnsecured(portDescriptor, url, null);\n+    LOG.debug(\"End provideAndRegisterDocumentSetB\");\n+    return response;\n+  }\n+\n+  private void handleError(String errorMessage, MimeMessage mimeMessage) {\n+    handleError(errorMessage, null, mimeMessage);\n+  }\n+\n+  private void handleError(String errorMessage, Throwable e, MimeMessage mimeMessage) {\n+    XDCommonResponseHelper helper = new XDCommonResponseHelper();\n+    if (e != null) {\n+      String message = errorMessage + e.getMessage();\n+      LOG.error(helper.createError(message));\n+      throw new DirectException(errorMessage, e, mimeMessage);\n+    } else {\n+      LOG.error(helper.createError(errorMessage));\n+      throw new DirectException(errorMessage, mimeMessage);\n     }\n+  }\n+\n+  /**\n+   * @param portDescriptor description object representing the WSDL port for the service to be called.\n+   * @param url endpoint url to be called.\n+   * @return a client for a DocumentRepositoryPortType WSDL port based on the descriptor and url.\n+   */\n+  protected CONNECTClient<DocumentRepositoryPortType> getClient(\n+      ServicePortDescriptor<DocumentRepositoryPortType> portDescriptor, String url) {\n+    return CONNECTClientFactory.getInstance().getCONNECTClientUnsecured(portDescriptor, url, null);\n+  }\n \n }\n",
            "diff_size": 102
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "90",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "95",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "97",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/160/DirectEdgeProxySoapImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/160/DirectEdgeProxySoapImpl.java\nindex 693ecfd9fa1..493263fe315 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/160/DirectEdgeProxySoapImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/160/DirectEdgeProxySoapImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.direct.edge.proxy;\n \n import gov.hhs.fha.nhinc.direct.DirectException;\n@@ -76,11 +77,9 @@ public class DirectEdgeProxySoapImpl implements DirectEdgeProxy {\n     public RegistryResponseType provideAndRegisterDocumentSetB(MimeMessage message) {\n         LOG.debug(\"Begin provideAndRegisterDocumentSetB\");\n         RegistryResponseType response = null;\n-\n-        try {\n+try {\n             ProvideAndRegisterDocumentSetRequestType prdsrt = null;\n-\n-            if (message instanceof MimeMessage) {\n+if (message instanceof MimeMessage) {\n                 MimeMessageTransformer transformer = new MimeMessageTransformer();\n \n                 prdsrt = transformer.transform(message);\n@@ -88,28 +87,22 @@ public class DirectEdgeProxySoapImpl implements DirectEdgeProxy {\n                 LOG.warn(\"MimeMessage was expected but not recieved.\");\n             }\n \n-            String url = oProxyHelper\n-                    .getAdapterEndPointFromConnectionManager(NhincConstants.DIRECT_SOAP_EDGE_SERVICE_NAME);\n-            if (NullChecker.isNotNullish(url)) {\n-\n-                ServicePortDescriptor<DocumentRepositoryPortType> portDescriptor =\n-                        new DirectEdgeSoapServicePortDescriptor();\n-\n-                CONNECTClient<DocumentRepositoryPortType> client = getClient(portDescriptor, url);\n-\n-                response = (RegistryResponseType) client.invokePort(DocumentRepositoryPortType.class,\n-                        \"documentRepositoryProvideAndRegisterDocumentSetB\", prdsrt);\n+            String url = oProxyHelper.getAdapterEndPointFromConnectionManager(NhincConstants.DIRECT_SOAP_EDGE_SERVICE_NAME);\n+if (NullChecker.isNotNullish(url)) {\n+    ServicePortDescriptor<DocumentRepositoryPortType> portDescriptor = new DirectEdgeSoapServicePortDescriptor();\n+CONNECTClient<DocumentRepositoryPortType> client = getClient(portDescriptor, url);\n \n-            } else {\n-                handleError(\"Failed to call the web service (\" + NhincConstants.DIRECT_SOAP_EDGE_SERVICE_NAME\n-                        + \").  The URL is null.\", message);\n-            }\n+                response = (RegistryResponseType) client.invokePort(DocumentRepositoryPortType.class, \"documentRepositoryProvideAndRegisterDocumentSetB\", prdsrt);\n+    } else {\n+                handleError(\"Failed to call the web service (\" + NhincConstants.DIRECT_SOAP_EDGE_SERVICE_NAME + \").  The URL is null.\", message);\n+    }\n         } catch (Exception ex) {\n             handleError(\"Error sending Adapter Doc Submission Unsecured message: \", ex, message);\n         }\n \n         LOG.debug(\"End provideAndRegisterDocumentSetB\");\n-        return response;\n+\n+return response;\n     }\n \n     private void handleError(String errorMessage, MimeMessage mimeMessage) {\n@@ -121,10 +114,12 @@ public class DirectEdgeProxySoapImpl implements DirectEdgeProxy {\n         if (e != null) {\n             String message = errorMessage + e.getMessage();\n             LOG.error(helper.createError(message));\n-            throw new DirectException(errorMessage, e, mimeMessage);\n+\n+throw new DirectException(errorMessage, e, mimeMessage);\n         } else {\n             LOG.error(helper.createError(errorMessage));\n-            throw new DirectException(errorMessage, mimeMessage);\n+\n+throw new DirectException(errorMessage, mimeMessage);\n         }\n     }\n \n@@ -135,7 +130,7 @@ public class DirectEdgeProxySoapImpl implements DirectEdgeProxy {\n      */\n     protected CONNECTClient<DocumentRepositoryPortType> getClient(\n             ServicePortDescriptor<DocumentRepositoryPortType> portDescriptor, String url) {\n-        return CONNECTClientFactory.getInstance().getCONNECTClientUnsecured(portDescriptor, url, null);\n+    return CONNECTClientFactory.getInstance().getCONNECTClientUnsecured(portDescriptor, url, null);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 28
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "83",
                    "column": "15",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "86",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "92",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "93",
                    "column": "15",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "94",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "97",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "98",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "102",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "118",
                    "column": "11",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "122",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "138",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/160/DirectEdgeProxySoapImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/160/DirectEdgeProxySoapImpl.java\nindex 693ecfd9fa1..a03285ae869 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/160/DirectEdgeProxySoapImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/160/DirectEdgeProxySoapImpl.java\n@@ -38,11 +38,8 @@ import gov.hhs.fha.nhinc.webserviceproxy.WebServiceProxyHelper;\n import gov.hhs.fha.nhinc.xdcommon.XDCommonResponseHelper;\n import ihe.iti.xds_b._2007.DocumentRepositoryPortType;\n import ihe.iti.xds_b._2007.ProvideAndRegisterDocumentSetRequestType;\n-\n import javax.mail.internet.MimeMessage;\n-\n import oasis.names.tc.ebxml_regrep.xsd.rs._3.RegistryResponseType;\n-\n import org.apache.log4j.Logger;\n \n /**\n@@ -53,6 +50,8 @@ import org.apache.log4j.Logger;\n  * @author mweaver\n  *\n  */\n+\n+\n public class DirectEdgeProxySoapImpl implements DirectEdgeProxy {\n \n     private static final Logger LOG = Logger.getLogger(DirectEdgeProxySoapImpl.class);\n@@ -61,6 +60,7 @@ public class DirectEdgeProxySoapImpl implements DirectEdgeProxy {\n     /**\n      * @param oProxyHelper web service proxy helper for soap edge clients.\n      */\n+\n     public DirectEdgeProxySoapImpl(WebServiceProxyHelper oProxyHelper) {\n         this.oProxyHelper = oProxyHelper;\n     }\n@@ -72,42 +72,38 @@ public class DirectEdgeProxySoapImpl implements DirectEdgeProxy {\n      * gov.hhs.fha.nhinc.direct.edge.proxy.DirectEdgeProxy#provideAndRegisterDocumentSetB\n      * (javax.mail.internet.MimeMessage)\n      */\n+\n+\n     @Override\n     public RegistryResponseType provideAndRegisterDocumentSetB(MimeMessage message) {\n         LOG.debug(\"Begin provideAndRegisterDocumentSetB\");\n         RegistryResponseType response = null;\n-\n         try {\n             ProvideAndRegisterDocumentSetRequestType prdsrt = null;\n-\n-            if (message instanceof MimeMessage) {\n+            if(message instanceof MimeMessage) {\n                 MimeMessageTransformer transformer = new MimeMessageTransformer();\n-\n                 prdsrt = transformer.transform(message);\n-            } else {\n-                LOG.warn(\"MimeMessage was expected but not recieved.\");\n             }\n \n-            String url = oProxyHelper\n-                    .getAdapterEndPointFromConnectionManager(NhincConstants.DIRECT_SOAP_EDGE_SERVICE_NAME);\n-            if (NullChecker.isNotNullish(url)) {\n-\n-                ServicePortDescriptor<DocumentRepositoryPortType> portDescriptor =\n-                        new DirectEdgeSoapServicePortDescriptor();\n \n+else {\n+                LOG.warn(\"MimeMessage was expected but not recieved.\");\n+            }\n+            String url = oProxyHelper.getAdapterEndPointFromConnectionManager(NhincConstants.DIRECT_SOAP_EDGE_SERVICE_NAME);\n+            if(NullChecker.isNotNullish(url)) {\n+                ServicePortDescriptor<DocumentRepositoryPortType> portDescriptor = new DirectEdgeSoapServicePortDescriptor();\n                 CONNECTClient<DocumentRepositoryPortType> client = getClient(portDescriptor, url);\n+                response = (RegistryResponseType)\n+                               client.invokePort(DocumentRepositoryPortType.class, \"documentRepositoryProvideAndRegisterDocumentSetB\", prdsrt);\n+            }\n \n-                response = (RegistryResponseType) client.invokePort(DocumentRepositoryPortType.class,\n-                        \"documentRepositoryProvideAndRegisterDocumentSetB\", prdsrt);\n \n-            } else {\n-                handleError(\"Failed to call the web service (\" + NhincConstants.DIRECT_SOAP_EDGE_SERVICE_NAME\n-                        + \").  The URL is null.\", message);\n+else {\n+                handleError(\"Failed to call the web service (\" + NhincConstants.DIRECT_SOAP_EDGE_SERVICE_NAME + \").  The URL is null.\", message);\n             }\n         } catch (Exception ex) {\n             handleError(\"Error sending Adapter Doc Submission Unsecured message: \", ex, message);\n         }\n-\n         LOG.debug(\"End provideAndRegisterDocumentSetB\");\n         return response;\n     }\n@@ -116,13 +112,17 @@ public class DirectEdgeProxySoapImpl implements DirectEdgeProxy {\n         handleError(errorMessage, null, mimeMessage);\n     }\n \n-    private void handleError(String errorMessage, Throwable e, MimeMessage mimeMessage) {\n+    private void handleError(String errorMessage,\n+        Throwable e, MimeMessage mimeMessage) {\n         XDCommonResponseHelper helper = new XDCommonResponseHelper();\n-        if (e != null) {\n+        if(e != null) {\n             String message = errorMessage + e.getMessage();\n             LOG.error(helper.createError(message));\n             throw new DirectException(errorMessage, e, mimeMessage);\n-        } else {\n+        }\n+\n+\n+else {\n             LOG.error(helper.createError(errorMessage));\n             throw new DirectException(errorMessage, mimeMessage);\n         }\n@@ -133,9 +133,10 @@ public class DirectEdgeProxySoapImpl implements DirectEdgeProxy {\n      * @param url endpoint url to be called.\n      * @return a client for a DocumentRepositoryPortType WSDL port based on the descriptor and url.\n      */\n-    protected CONNECTClient<DocumentRepositoryPortType> getClient(\n-            ServicePortDescriptor<DocumentRepositoryPortType> portDescriptor, String url) {\n+\n+\n+    protected CONNECTClient<DocumentRepositoryPortType> getClient(ServicePortDescriptor<DocumentRepositoryPortType> portDescriptor, String url) {\n         return CONNECTClientFactory.getInstance().getCONNECTClientUnsecured(portDescriptor, url, null);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 46
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "28",
                    "severity": "error",
                    "message": "'import' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/160/DirectEdgeProxySoapImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_random/160/DirectEdgeProxySoapImpl.java\nindex 693ecfd9fa1..5417feb9f78 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/160/DirectEdgeProxySoapImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_random/160/DirectEdgeProxySoapImpl.java\n@@ -25,7 +25,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n package gov.hhs.fha.nhinc.direct.edge.proxy;\n-\n import gov.hhs.fha.nhinc.direct.DirectException;\n import gov.hhs.fha.nhinc.direct.edge.proxy.service.DirectEdgeSoapServicePortDescriptor;\n import gov.hhs.fha.nhinc.direct.transform.MimeMessageTransformer;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/160/DirectEdgeProxySoapImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/160/DirectEdgeProxySoapImpl.java\nindex 693ecfd9fa1..97c9efdbf61 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/160/DirectEdgeProxySoapImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/160/DirectEdgeProxySoapImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.direct.edge.proxy;\n \n import gov.hhs.fha.nhinc.direct.DirectException;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}