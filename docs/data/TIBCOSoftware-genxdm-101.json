{
    "project_name": "TIBCOSoftware-genxdm",
    "error_id": "101",
    "information": {
        "errors": [
            {
                "line": "45",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "    extends PathPatternBase\n{\n\tprivate final PathPatternBase pattern;\n\tprivate final BooleanExpr predicate;\n\tprivate final boolean inheritAttributes;\n\tprivate final boolean inheritNamespaces;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "46",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/101/FilterPattern.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/101/FilterPattern.java\nindex a04681e680d..abe2839bafc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/101/FilterPattern.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/101/FilterPattern.java\n@@ -42,7 +42,7 @@ import org.genxdm.xpath.v10.TraverserVariant;\n final class FilterPattern\r\n     extends PathPatternBase\r\n {\r\n-\tprivate final PathPatternBase pattern;\r\n+private final PathPatternBase pattern;\r\n \tprivate final BooleanExpr predicate;\r\n \tprivate final boolean inheritAttributes;\r\n \tprivate final boolean inheritNamespaces;\r\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/101/FilterPattern.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/101/FilterPattern.java\nindex a04681e680d..76ee7460163 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/101/FilterPattern.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/101/FilterPattern.java\n@@ -3,7 +3,7 @@\n  * license details\r\n  * Portions copyright (c) 2002, Bill Lindsey : see copying.txt for license\r\n  * details\r\n- * \r\n+ *\r\n  * Portions copyright (c) 2009-2011 TIBCO Software Inc.\r\n  *\r\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n@@ -18,6 +18,7 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n+\r\n package org.genxdm.processor.xpath.v10.patterns;\r\n \r\n import javax.xml.namespace.QName;\r\n@@ -40,181 +41,177 @@ import org.genxdm.xpath.v10.TraverserVariant;\n  * a pattern that has a predicate to eliminate some nodes\r\n  */\r\n final class FilterPattern\r\n-    extends PathPatternBase\r\n-{\r\n-\tprivate final PathPatternBase pattern;\r\n-\tprivate final BooleanExpr predicate;\r\n-\tprivate final boolean inheritAttributes;\r\n-\tprivate final boolean inheritNamespaces;\r\n-\r\n-\tFilterPattern(final PathPatternBase pattern, final BooleanExpr predicate, final boolean inheritAttributes, final boolean inheritNamespaces)\r\n-\t{\r\n-\t\tthis.pattern = pattern;\r\n-\t\tthis.predicate = predicate;\r\n-\t\tthis.inheritAttributes = inheritAttributes;\r\n-\t\tthis.inheritNamespaces = inheritNamespaces;\r\n-\t}\r\n+    extends PathPatternBase {\r\n+    private final PathPatternBase pattern;\r\n+\r\n+    private final BooleanExpr predicate;\r\n+\r\n+    private final boolean inheritAttributes;\r\n+\r\n+    private final boolean inheritNamespaces;\r\n+\r\n+    FilterPattern(final PathPatternBase pattern, final BooleanExpr predicate,\r\n+                  final boolean inheritAttributes, final boolean inheritNamespaces) {\r\n+        this.pattern = pattern;\r\n+        this.predicate = predicate;\r\n+        this.inheritAttributes = inheritAttributes;\r\n+        this.inheritNamespaces = inheritNamespaces;\r\n+    }\r\n \r\n     @Override\r\n-\tpublic <N> boolean matches(Model<N> model, final N node, final ExprContextDynamic<N> dynEnv) {\r\n-\t\tif (!pattern.matches(model, node, dynEnv))\r\n-\t\t{\r\n-\t\t\treturn false;\r\n-\t\t}\r\n-\t\treturn predicate.booleanFunction(model, node, new Context<N>(model, node, dynEnv));\r\n-\t}\r\n+    public <N> boolean matches(Model<N> model, final N node, final ExprContextDynamic<N> dynEnv) {\r\n+        if (!pattern.matches(model, node, dynEnv)) {\r\n+            return false;\r\n+        }\r\n+        return predicate.booleanFunction(model, node, new Context<N>(model, node, dynEnv));\r\n+    }\r\n \r\n     @Override\r\n     public boolean matches(TraversingInformer node, TraverserDynamicContext dynEnv) {\r\n-        if (!pattern.matches(node, dynEnv))\r\n-        {\r\n+        if (!pattern.matches(node, dynEnv)) {\r\n             return false;\r\n         }\r\n         return predicate.booleanFunction(node, new CursorContext(node, dynEnv));\r\n     }\r\n \r\n     @Override\r\n-    public int getDefaultPriority()\r\n-\t{\r\n-\t\treturn 1;\r\n-\t}\r\n+    public int getDefaultPriority() {\r\n+        return 1;\r\n+    }\r\n \r\n     @Override\r\n-\tpublic String getMatchNamespaceURI()\r\n-\t{\r\n-\t\treturn pattern.getMatchNamespaceURI();\r\n-\t}\r\n+    public String getMatchNamespaceURI() {\r\n+        return pattern.getMatchNamespaceURI();\r\n+    }\r\n \r\n     @Override\r\n-\tpublic String getMatchLocalName()\r\n-\t{\r\n-\t\treturn pattern.getMatchLocalName();\r\n-\t}\r\n+    public String getMatchLocalName() {\r\n+        return pattern.getMatchLocalName();\r\n+    }\r\n \r\n     @Override\r\n-\tpublic NodeKind getMatchNodeType()\r\n-\t{\r\n-\t\treturn pattern.getMatchNodeType();\r\n-\t}\r\n-\r\n-\t// ////////////////////////////////////////\r\n-\t//  \r\n-\t// the context changes a bit from our caller's context to reflect a\r\n-\t// different way of tracking position()\r\n-\t//\r\n-\tclass Context<N> extends DelegateExprContext<N>\r\n-\t{\r\n-\t\tN node;\r\n-\t\tfinal Model<N> model;\r\n-\t\tint position = 0;\r\n-\t\tint lastPosition = 0;\r\n-\r\n-\t\tContext(Model<N> model, final N node, final ExprContextDynamic<N> context)\r\n-\t\t{\r\n-\t\t\tsuper(context);\r\n-\t\t\tthis.node = node;\r\n-\t\t\tthis.model = model;\r\n-\t\t}\r\n-\r\n-\t\tpublic int getContextPosition() {\r\n-\t\t\tif (position != 0)\r\n-\t\t\t{\r\n-\t\t\t\treturn position;\r\n-\t\t\t}\r\n-\t\t\tNodeIterator<N> iter;\r\n-\t\t\tswitch (model.getNodeKind(node))\r\n-\t\t\t{\r\n-\t\t\t\tcase DOCUMENT:\r\n-\t\t\t\t\tposition = 1;\r\n-\t\t\t\t\treturn 1;\r\n-\t\t\t\tcase ATTRIBUTE:\r\n-\t\t\t\t\titer = new NodeIteratorOnIterator<N>(model.getAttributeAxis(model.getParent(node), inheritAttributes).iterator());\r\n-\t\t\t\tbreak;\r\n-\t\t\t\tcase NAMESPACE:\r\n-\t\t\t\t\titer = new NodeIteratorOnIterator<N>(model.getNamespaceAxis(model.getParent(node), inheritNamespaces).iterator());\r\n-\t\t\t\tbreak;\r\n-\t\t\t\tdefault:\r\n-\t\t\t\t\titer = new NodeIteratorOnIterator<N>(model.getChildAxis(model.getParent(node)).iterator());\r\n-\t\t\t\tbreak;\r\n-\t\t\t}\r\n-\t\t\tposition = 1;\r\n-\t\t\tfor (;;)\r\n-\t\t\t{\r\n-\t\t\t\tN tem = iter.next();\r\n-\t\t\t\tif (tem.equals(node))\r\n-\t\t\t\t{\r\n-\t\t\t\t\tbreak;\r\n-\t\t\t\t}\r\n-\t\t\t\tif (pattern.matches(model, tem, origContext))\r\n-\t\t\t\t{\r\n-\t\t\t\t\tposition++;\r\n-\t\t\t\t}\r\n-\t\t\t}\r\n-\t\t\treturn position;\r\n-\t\t}\r\n-\r\n-\t\tpublic int getContextSize() {\r\n-\t\t\tif (lastPosition != 0)\r\n-\t\t\t{\r\n-\t\t\t\treturn lastPosition;\r\n-\t\t\t}\r\n-\t\t\tNodeIterator<N> iter;\r\n-\t\t\tswitch (model.getNodeKind(node))\r\n-\t\t\t{\r\n-\t\t\t\tcase DOCUMENT:\r\n-\t\t\t\t\tlastPosition = 1;\r\n-\t\t\t\t\treturn 1;\r\n-\t\t\t\tcase ATTRIBUTE:\r\n-\t\t\t\t\titer = new NodeIteratorOnIterator<N>(model.getAttributeAxis(model.getParent(node), inheritAttributes).iterator());\r\n-\t\t\t\t\tlastPosition = 0;\r\n-\t\t\t\tbreak;\r\n-\t\t\t\tcase NAMESPACE:\r\n-\t\t\t\t\titer = new NodeIteratorOnIterator<N>(model.getNamespaceAxis(model.getParent(node), inheritNamespaces).iterator());\r\n-\t\t\t\t\tlastPosition = 0;\r\n-\t\t\t\tbreak;\r\n-\t\t\t\tdefault:\r\n-\t\t\t\t\titer = new NodeIteratorOnIterator<N>(model.getFollowingSiblingAxis(node).iterator());\r\n-\t\t\t\t\tlastPosition = position;\r\n-\t\t\t\tbreak;\r\n-\t\t\t}\r\n-\t\t\tfor (;;)\r\n-\t\t\t{\r\n-\t\t\t\tN tem = iter.next();\r\n-\t\t\t\tif (tem == null)\r\n-\t\t\t\t{\r\n-\t\t\t\t\tbreak;\r\n-\t\t\t\t}\r\n-\t\t\t\tif (pattern.matches(model, tem, origContext))\r\n-\t\t\t\t{\r\n-\t\t\t\t\tlastPosition++;\r\n-\t\t\t\t}\r\n-\t\t\t}\r\n-\t\t\treturn lastPosition;\r\n-\t\t}\r\n-\t}\r\n+    public NodeKind getMatchNodeType() {\r\n+        return pattern.getMatchNodeType();\r\n+    }\r\n+\r\n+    // ////////////////////////////////////////\r\n+    //\r\n+    // the context changes a bit from our caller's context to reflect a\r\n+    // different way of tracking position()\r\n+    //\r\n+    class Context<N> extends DelegateExprContext<N> {\r\n+        N node;\r\n+\r\n+        final Model<N> model;\r\n+\r\n+        int position = 0;\r\n+\r\n+        int lastPosition = 0;\r\n+\r\n+        Context(Model<N> model, final N node, final ExprContextDynamic<N> context) {\r\n+            super(context);\r\n+            this.node = node;\r\n+            this.model = model;\r\n+        }\r\n+\r\n+        public int getContextPosition() {\r\n+            if (position != 0) {\r\n+                return position;\r\n+            }\r\n+            NodeIterator<N> iter;\r\n+            switch (model.getNodeKind(node)) {\r\n+                case DOCUMENT:\r\n+                    position = 1;\r\n+                    return 1;\r\n+                case ATTRIBUTE:\r\n+                    iter = new NodeIteratorOnIterator<N>(\r\n+                        model.getAttributeAxis(model.getParent(node), inheritAttributes)\r\n+                            .iterator());\r\n+                    break;\r\n+                case NAMESPACE:\r\n+                    iter = new NodeIteratorOnIterator<N>(\r\n+                        model.getNamespaceAxis(model.getParent(node), inheritNamespaces)\r\n+                            .iterator());\r\n+                    break;\r\n+                default:\r\n+                    iter = new NodeIteratorOnIterator<N>(\r\n+                        model.getChildAxis(model.getParent(node)).iterator());\r\n+                    break;\r\n+            }\r\n+            position = 1;\r\n+            for (; ; ) {\r\n+                N tem = iter.next();\r\n+                if (tem.equals(node)) {\r\n+                    break;\r\n+                }\r\n+                if (pattern.matches(model, tem, origContext)) {\r\n+                    position++;\r\n+                }\r\n+            }\r\n+            return position;\r\n+        }\r\n+\r\n+        public int getContextSize() {\r\n+            if (lastPosition != 0) {\r\n+                return lastPosition;\r\n+            }\r\n+            NodeIterator<N> iter;\r\n+            switch (model.getNodeKind(node)) {\r\n+                case DOCUMENT:\r\n+                    lastPosition = 1;\r\n+                    return 1;\r\n+                case ATTRIBUTE:\r\n+                    iter = new NodeIteratorOnIterator<N>(\r\n+                        model.getAttributeAxis(model.getParent(node), inheritAttributes)\r\n+                            .iterator());\r\n+                    lastPosition = 0;\r\n+                    break;\r\n+                case NAMESPACE:\r\n+                    iter = new NodeIteratorOnIterator<N>(\r\n+                        model.getNamespaceAxis(model.getParent(node), inheritNamespaces)\r\n+                            .iterator());\r\n+                    lastPosition = 0;\r\n+                    break;\r\n+                default:\r\n+                    iter = new NodeIteratorOnIterator<N>(\r\n+                        model.getFollowingSiblingAxis(node).iterator());\r\n+                    lastPosition = position;\r\n+                    break;\r\n+            }\r\n+            for (; ; ) {\r\n+                N tem = iter.next();\r\n+                if (tem == null) {\r\n+                    break;\r\n+                }\r\n+                if (pattern.matches(model, tem, origContext)) {\r\n+                    lastPosition++;\r\n+                }\r\n+            }\r\n+            return lastPosition;\r\n+        }\r\n+    }\r\n \r\n     // ////////////////////////////////////////\r\n     //  \r\n     // the context changes a bit from our caller's context to reflect a\r\n     // different way of tracking position()\r\n     //\r\n-    class CursorContext implements TraverserDynamicContext\r\n-    {\r\n+    class CursorContext implements TraverserDynamicContext {\r\n         TraversingInformer node;\r\n+\r\n         int position = 0;\r\n+\r\n         int lastPosition = 0;\r\n+\r\n         TraverserDynamicContext origCtx;\r\n \r\n-        CursorContext(TraversingInformer node, final TraverserDynamicContext context)\r\n-        {\r\n+        CursorContext(TraversingInformer node, final TraverserDynamicContext context) {\r\n             origCtx = context;\r\n             this.node = node;\r\n         }\r\n \r\n-        public int getContextPosition()\r\n-        {\r\n-            if (position != 0)\r\n-            {\r\n+        public int getContextPosition() {\r\n+            if (position != 0) {\r\n                 return position;\r\n             }\r\n             Traverser iter;\r\n@@ -225,8 +222,7 @@ final class FilterPattern\n             }\r\n             Precursor parent = node.newPrecursor();\r\n             parent.moveToParent();\r\n-            switch (nodeKind)\r\n-            {\r\n+            switch (nodeKind) {\r\n                 case ATTRIBUTE:\r\n                     iter = parent.traverseAttributeAxis(inheritAttributes);\r\n                     break;\r\n@@ -238,31 +234,25 @@ final class FilterPattern\n                     break;\r\n             }\r\n             position = 1;\r\n-            while(iter.moveToNext())\r\n-            {\r\n-                if (iter.equals(node))\r\n-                {\r\n+            while (iter.moveToNext()) {\r\n+                if (iter.equals(node)) {\r\n                     break;\r\n                 }\r\n-                if (pattern.matches(iter, origCtx))\r\n-                {\r\n+                if (pattern.matches(iter, origCtx)) {\r\n                     position++;\r\n                 }\r\n             }\r\n             return position;\r\n         }\r\n \r\n-        public int getContextSize()\r\n-        {\r\n-            if (lastPosition != 0)\r\n-            {\r\n+        public int getContextSize() {\r\n+            if (lastPosition != 0) {\r\n                 return lastPosition;\r\n             }\r\n-            \r\n+\r\n             Traverser iter;\r\n             NodeKind nodeKind = node.getNodeKind();\r\n-            switch (nodeKind)\r\n-            {\r\n+            switch (nodeKind) {\r\n                 case DOCUMENT:\r\n                     lastPosition = 1;\r\n                     return 1;\r\n@@ -277,15 +267,14 @@ final class FilterPattern\n                     nsParent.moveToParent();\r\n                     iter = nsParent.traverseNamespaceAxis(inheritNamespaces);\r\n                     lastPosition = 0;\r\n-                break;\r\n+                    break;\r\n                 default:\r\n                     iter = node.traverseFollowingSiblingAxis();\r\n                     lastPosition = position;\r\n-                break;\r\n+                    break;\r\n             }\r\n             while (iter.moveToNext()) {\r\n-                if (pattern.matches(iter, origCtx))\r\n-                {\r\n+                if (pattern.matches(iter, origCtx)) {\r\n                     lastPosition++;\r\n                 }\r\n             }\r\n@@ -294,7 +283,7 @@ final class FilterPattern\n \r\n         @Override\r\n         public TraverserVariant getVariableValue(QName name) {\r\n-            return origCtx.getVariableValue(name); \r\n+            return origCtx.getVariableValue(name);\r\n         }\r\n \r\n         @Override\r\n",
            "diff_size": 170
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "46",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/101/FilterPattern.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/101/FilterPattern.java\nindex a04681e680d..8cebd60a149 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/101/FilterPattern.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/101/FilterPattern.java\n@@ -41,30 +41,30 @@ import org.genxdm.xpath.v10.TraverserVariant;\n  */\r\n final class FilterPattern\r\n     extends PathPatternBase\r\n-{\r\n-\tprivate final PathPatternBase pattern;\r\n+{\n+    private final PathPatternBase pattern;\r\n \tprivate final BooleanExpr predicate;\r\n \tprivate final boolean inheritAttributes;\r\n \tprivate final boolean inheritNamespaces;\r\n \r\n \tFilterPattern(final PathPatternBase pattern, final BooleanExpr predicate, final boolean inheritAttributes, final boolean inheritNamespaces)\r\n-\t{\r\n-\t\tthis.pattern = pattern;\r\n+\t{\n+    this.pattern = pattern;\r\n \t\tthis.predicate = predicate;\r\n \t\tthis.inheritAttributes = inheritAttributes;\r\n-\t\tthis.inheritNamespaces = inheritNamespaces;\r\n-\t}\r\n-\r\n-    @Override\r\n-\tpublic <N> boolean matches(Model<N> model, final N node, final ExprContextDynamic<N> dynEnv) {\r\n-\t\tif (!pattern.matches(model, node, dynEnv))\r\n-\t\t{\r\n-\t\t\treturn false;\r\n-\t\t}\r\n-\t\treturn predicate.booleanFunction(model, node, new Context<N>(model, node, dynEnv));\r\n-\t}\r\n-\r\n-    @Override\r\n+\t\tthis.inheritNamespaces = inheritNamespaces;\n+    }\n+\n+@Override\n+public <N> boolean matches(Model<N> model, final N node, final ExprContextDynamic<N> dynEnv) {\n+    if (!pattern.matches(model, node, dynEnv))\r\n+\t\t{\n+    return false;\n+    }\r\n+\t\treturn predicate.booleanFunction(model, node, new Context<N>(model, node, dynEnv));\n+    }\n+\n+@Override\r\n     public boolean matches(TraversingInformer node, TraverserDynamicContext dynEnv) {\r\n         if (!pattern.matches(node, dynEnv))\r\n         {\r\n@@ -74,28 +74,28 @@ final class FilterPattern\n     }\r\n \r\n     @Override\r\n-    public int getDefaultPriority()\r\n-\t{\r\n-\t\treturn 1;\r\n-\t}\r\n-\r\n-    @Override\r\n-\tpublic String getMatchNamespaceURI()\r\n-\t{\r\n-\t\treturn pattern.getMatchNamespaceURI();\r\n-\t}\r\n-\r\n-    @Override\r\n-\tpublic String getMatchLocalName()\r\n-\t{\r\n-\t\treturn pattern.getMatchLocalName();\r\n-\t}\r\n-\r\n-    @Override\r\n-\tpublic NodeKind getMatchNodeType()\r\n-\t{\r\n-\t\treturn pattern.getMatchNodeType();\r\n-\t}\r\n+    public int getDefaultPriority()\n+{\n+    return 1;\n+    }\n+\n+@Override\n+public String getMatchNamespaceURI()\r\n+\t{\n+    return pattern.getMatchNamespaceURI();\n+    }\n+\n+@Override\n+public String getMatchLocalName()\r\n+\t{\n+    return pattern.getMatchLocalName();\n+    }\n+\n+@Override\n+public NodeKind getMatchNodeType()\r\n+\t{\n+    return pattern.getMatchNodeType();\n+    }\r\n \r\n \t// ////////////////////////////////////////\r\n \t//  \r\n@@ -103,97 +103,97 @@ final class FilterPattern\n \t// different way of tracking position()\r\n \t//\r\n \tclass Context<N> extends DelegateExprContext<N>\r\n-\t{\r\n-\t\tN node;\r\n+\t{\n+\n+    N node;\r\n \t\tfinal Model<N> model;\r\n \t\tint position = 0;\r\n \t\tint lastPosition = 0;\r\n \r\n \t\tContext(Model<N> model, final N node, final ExprContextDynamic<N> context)\r\n-\t\t{\r\n-\t\t\tsuper(context);\r\n+\t\t{\n+    super(context);\r\n \t\t\tthis.node = node;\r\n-\t\t\tthis.model = model;\r\n-\t\t}\r\n+\t\t\tthis.model = model;\n+    }\r\n \r\n-\t\tpublic int getContextPosition() {\r\n-\t\t\tif (position != 0)\r\n-\t\t\t{\r\n-\t\t\t\treturn position;\r\n-\t\t\t}\r\n+\t\tpublic int getContextPosition() {\n+    if (position != 0)\r\n+\t\t\t{\n+    return position;\n+    }\r\n \t\t\tNodeIterator<N> iter;\r\n \t\t\tswitch (model.getNodeKind(node))\r\n-\t\t\t{\r\n-\t\t\t\tcase DOCUMENT:\r\n-\t\t\t\t\tposition = 1;\r\n-\t\t\t\t\treturn 1;\r\n-\t\t\t\tcase ATTRIBUTE:\r\n-\t\t\t\t\titer = new NodeIteratorOnIterator<N>(model.getAttributeAxis(model.getParent(node), inheritAttributes).iterator());\r\n-\t\t\t\tbreak;\r\n-\t\t\t\tcase NAMESPACE:\r\n-\t\t\t\t\titer = new NodeIteratorOnIterator<N>(model.getNamespaceAxis(model.getParent(node), inheritNamespaces).iterator());\r\n-\t\t\t\tbreak;\r\n-\t\t\t\tdefault:\r\n-\t\t\t\t\titer = new NodeIteratorOnIterator<N>(model.getChildAxis(model.getParent(node)).iterator());\r\n-\t\t\t\tbreak;\r\n-\t\t\t}\r\n+\t\t\t{\n+    case DOCUMENT:\n+position = 1;\r\n+\t\t\t\t\treturn 1;\n+    case ATTRIBUTE:\n+iter = new NodeIteratorOnIterator<N>(model.getAttributeAxis(model.getParent(node), inheritAttributes).iterator());\n+break;\r\n+\t\t\t\tcase NAMESPACE:\n+iter = new NodeIteratorOnIterator<N>(model.getNamespaceAxis(model.getParent(node), inheritNamespaces).iterator());\n+break;\r\n+\t\t\t\tdefault:\n+iter = new NodeIteratorOnIterator<N>(model.getChildAxis(model.getParent(node)).iterator());\n+break;\n+    }\r\n \t\t\tposition = 1;\r\n \t\t\tfor (;;)\r\n-\t\t\t{\r\n-\t\t\t\tN tem = iter.next();\r\n+\t\t\t{\n+    N tem = iter.next();\r\n \t\t\t\tif (tem.equals(node))\r\n-\t\t\t\t{\r\n-\t\t\t\t\tbreak;\r\n-\t\t\t\t}\r\n+\t\t\t\t{\n+    break;\n+    }\r\n \t\t\t\tif (pattern.matches(model, tem, origContext))\r\n-\t\t\t\t{\r\n-\t\t\t\t\tposition++;\r\n-\t\t\t\t}\r\n-\t\t\t}\r\n-\t\t\treturn position;\r\n-\t\t}\r\n+\t\t\t\t{\n+    position++;\n+    }\n+    }\r\n+\t\t\treturn position;\n+    }\r\n \r\n-\t\tpublic int getContextSize() {\r\n-\t\t\tif (lastPosition != 0)\r\n-\t\t\t{\r\n-\t\t\t\treturn lastPosition;\r\n-\t\t\t}\r\n+\t\tpublic int getContextSize() {\n+    if (lastPosition != 0)\r\n+\t\t\t{\n+    return lastPosition;\n+    }\r\n \t\t\tNodeIterator<N> iter;\r\n \t\t\tswitch (model.getNodeKind(node))\r\n-\t\t\t{\r\n-\t\t\t\tcase DOCUMENT:\r\n-\t\t\t\t\tlastPosition = 1;\r\n-\t\t\t\t\treturn 1;\r\n-\t\t\t\tcase ATTRIBUTE:\r\n-\t\t\t\t\titer = new NodeIteratorOnIterator<N>(model.getAttributeAxis(model.getParent(node), inheritAttributes).iterator());\r\n-\t\t\t\t\tlastPosition = 0;\r\n-\t\t\t\tbreak;\r\n-\t\t\t\tcase NAMESPACE:\r\n-\t\t\t\t\titer = new NodeIteratorOnIterator<N>(model.getNamespaceAxis(model.getParent(node), inheritNamespaces).iterator());\r\n-\t\t\t\t\tlastPosition = 0;\r\n-\t\t\t\tbreak;\r\n-\t\t\t\tdefault:\r\n-\t\t\t\t\titer = new NodeIteratorOnIterator<N>(model.getFollowingSiblingAxis(node).iterator());\r\n-\t\t\t\t\tlastPosition = position;\r\n-\t\t\t\tbreak;\r\n-\t\t\t}\r\n+\t\t\t{\n+    case DOCUMENT:\n+lastPosition = 1;\r\n+\t\t\t\t\treturn 1;\n+    case ATTRIBUTE:\n+iter = new NodeIteratorOnIterator<N>(model.getAttributeAxis(model.getParent(node), inheritAttributes).iterator());\r\n+\t\t\t\t\tlastPosition = 0;\n+break;\r\n+\t\t\t\tcase NAMESPACE:\n+iter = new NodeIteratorOnIterator<N>(model.getNamespaceAxis(model.getParent(node), inheritNamespaces).iterator());\r\n+\t\t\t\t\tlastPosition = 0;\n+break;\r\n+\t\t\t\tdefault:\n+iter = new NodeIteratorOnIterator<N>(model.getFollowingSiblingAxis(node).iterator());\r\n+\t\t\t\t\tlastPosition = position;\n+    break;\n+    }\r\n \t\t\tfor (;;)\r\n-\t\t\t{\r\n-\t\t\t\tN tem = iter.next();\r\n+\t\t\t{\n+    N tem = iter.next();\r\n \t\t\t\tif (tem == null)\r\n-\t\t\t\t{\r\n-\t\t\t\t\tbreak;\r\n-\t\t\t\t}\r\n+\t\t\t\t{\n+    break;\n+    }\r\n \t\t\t\tif (pattern.matches(model, tem, origContext))\r\n-\t\t\t\t{\r\n-\t\t\t\t\tlastPosition++;\r\n-\t\t\t\t}\r\n-\t\t\t}\r\n-\t\t\treturn lastPosition;\r\n-\t\t}\r\n-\t}\r\n-\r\n-    // ////////////////////////////////////////\r\n+\t\t\t\t{\n+    lastPosition++;\n+    }\n+    }\r\n+\t\t\treturn lastPosition;\n+    }\n+    }\n+// ////////////////////////////////////////\r\n     //  \r\n     // the context changes a bit from our caller's context to reflect a\r\n     // different way of tracking position()\r\n@@ -238,7 +238,7 @@ final class FilterPattern\n                     break;\r\n             }\r\n             position = 1;\r\n-            while(iter.moveToNext())\r\n+            while (iter.moveToNext())\r\n             {\r\n                 if (iter.equals(node))\r\n                 {\r\n@@ -257,9 +257,8 @@ final class FilterPattern\n             if (lastPosition != 0)\r\n             {\r\n                 return lastPosition;\r\n-            }\r\n-            \r\n-            Traverser iter;\r\n+            }\n+Traverser iter;\r\n             NodeKind nodeKind = node.getNodeKind();\r\n             switch (nodeKind)\r\n             {\r\n@@ -295,9 +294,9 @@ final class FilterPattern\n         @Override\r\n         public TraverserVariant getVariableValue(QName name) {\r\n             return origCtx.getVariableValue(name); \r\n-        }\r\n-\r\n-        @Override\r\n+        }\n+\n+@Override\r\n         public ExtensionContext getExtensionContext(String namespace) {\r\n             return origCtx.getExtensionContext(namespace);\r\n         }\r\n@@ -312,4 +311,4 @@ final class FilterPattern\n             return origCtx.getInheritNamespaces();\r\n         }\r\n     }\r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 120
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/101/FilterPattern.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/101/FilterPattern.java\nindex a04681e680d..d35c86b01f1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/101/FilterPattern.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/101/FilterPattern.java\n@@ -18,298 +18,314 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n-package org.genxdm.processor.xpath.v10.patterns;\r\n-\r\n-import javax.xml.namespace.QName;\r\n-\r\n-import org.genxdm.Model;\r\n-import org.genxdm.NodeKind;\r\n-import org.genxdm.Precursor;\r\n-import org.genxdm.nodes.Traverser;\r\n-import org.genxdm.nodes.TraversingInformer;\r\n-import org.genxdm.processor.xpath.v10.expressions.DelegateExprContext;\r\n-import org.genxdm.processor.xpath.v10.iterators.NodeIteratorOnIterator;\r\n-import org.genxdm.xpath.v10.BooleanExpr;\r\n-import org.genxdm.xpath.v10.TraverserDynamicContext;\r\n-import org.genxdm.xpath.v10.ExprContextDynamic;\r\n-import org.genxdm.xpath.v10.ExtensionContext;\r\n-import org.genxdm.xpath.v10.NodeIterator;\r\n+package org.genxdm.processor.xpath.v10.patterns;\n+\n+import javax.xml.namespace.QName;\n+import org.genxdm.Model;\n+import org.genxdm.NodeKind;\n+import org.genxdm.Precursor;\n+import org.genxdm.nodes.Traverser;\n+import org.genxdm.nodes.TraversingInformer;\n+import org.genxdm.processor.xpath.v10.expressions.DelegateExprContext;\n+import org.genxdm.processor.xpath.v10.iterators.NodeIteratorOnIterator;\n+import org.genxdm.xpath.v10.BooleanExpr;\n+import org.genxdm.xpath.v10.TraverserDynamicContext;\n+import org.genxdm.xpath.v10.ExprContextDynamic;\n+import org.genxdm.xpath.v10.ExtensionContext;\n+import org.genxdm.xpath.v10.NodeIterator;\n import org.genxdm.xpath.v10.TraverserVariant;\r\n \r\n /**\r\n  * a pattern that has a predicate to eliminate some nodes\r\n- */\r\n-final class FilterPattern\r\n-    extends PathPatternBase\r\n-{\r\n-\tprivate final PathPatternBase pattern;\r\n-\tprivate final BooleanExpr predicate;\r\n-\tprivate final boolean inheritAttributes;\r\n-\tprivate final boolean inheritNamespaces;\r\n-\r\n-\tFilterPattern(final PathPatternBase pattern, final BooleanExpr predicate, final boolean inheritAttributes, final boolean inheritNamespaces)\r\n-\t{\r\n-\t\tthis.pattern = pattern;\r\n-\t\tthis.predicate = predicate;\r\n-\t\tthis.inheritAttributes = inheritAttributes;\r\n-\t\tthis.inheritNamespaces = inheritNamespaces;\r\n-\t}\r\n-\r\n-    @Override\r\n-\tpublic <N> boolean matches(Model<N> model, final N node, final ExprContextDynamic<N> dynEnv) {\r\n-\t\tif (!pattern.matches(model, node, dynEnv))\r\n-\t\t{\r\n-\t\t\treturn false;\r\n-\t\t}\r\n-\t\treturn predicate.booleanFunction(model, node, new Context<N>(model, node, dynEnv));\r\n-\t}\r\n-\r\n-    @Override\r\n-    public boolean matches(TraversingInformer node, TraverserDynamicContext dynEnv) {\r\n-        if (!pattern.matches(node, dynEnv))\r\n-        {\r\n-            return false;\r\n-        }\r\n-        return predicate.booleanFunction(node, new CursorContext(node, dynEnv));\r\n+ */\n+\n+final class FilterPattern extends PathPatternBase\n+{\n+    private final PathPatternBase pattern;\n+    private final BooleanExpr predicate;\n+    private final boolean inheritAttributes;\n+    private final boolean inheritNamespaces;\n+\n+    FilterPattern(final PathPatternBase pattern, final BooleanExpr predicate, final boolean inheritAttributes, final boolean inheritNamespaces)\n+    {\n+        this.pattern = pattern;\n+        this.predicate = predicate;\n+        this.inheritAttributes = inheritAttributes;\n+        this.inheritNamespaces = inheritNamespaces;\n+    }\n+\n+    @Override\n+    public <N> boolean matches(Model<N> model, final N node, final ExprContextDynamic<N> dynEnv)\n+    {\n+        if (!pattern.matches(model, node, dynEnv))\n+        {\n+            return false;\n+        }\n+        return predicate.booleanFunction(model, node, new Context<N>(model, node, dynEnv));\n+    }\n+\n+    @Override\n+    public boolean matches(TraversingInformer node, TraverserDynamicContext dynEnv)\n+    {\n+        if (!pattern.matches(node, dynEnv))\n+        {\n+            return false;\n+        }\n+        return predicate.booleanFunction(node, new CursorContext(node, dynEnv));\n+    }\n+\n+    @Override\n+    public int getDefaultPriority()\n+    {\n+        return 1;\n+    }\n+\n+    @Override\n+    public String getMatchNamespaceURI()\n+    {\n+        return pattern.getMatchNamespaceURI();\n+    }\n+\n+    @Override\n+    public String getMatchLocalName()\n+    {\n+        return pattern.getMatchLocalName();\n+    }\n+\n+    @Override\n+    public NodeKind getMatchNodeType()\n+    {\n+        return pattern.getMatchNodeType();\n     }\r\n \r\n-    @Override\r\n-    public int getDefaultPriority()\r\n-\t{\r\n-\t\treturn 1;\r\n-\t}\r\n-\r\n-    @Override\r\n-\tpublic String getMatchNamespaceURI()\r\n-\t{\r\n-\t\treturn pattern.getMatchNamespaceURI();\r\n-\t}\r\n-\r\n-    @Override\r\n-\tpublic String getMatchLocalName()\r\n-\t{\r\n-\t\treturn pattern.getMatchLocalName();\r\n-\t}\r\n-\r\n-    @Override\r\n-\tpublic NodeKind getMatchNodeType()\r\n-\t{\r\n-\t\treturn pattern.getMatchNodeType();\r\n-\t}\r\n-\r\n-\t// ////////////////////////////////////////\r\n-\t//  \r\n-\t// the context changes a bit from our caller's context to reflect a\r\n-\t// different way of tracking position()\r\n-\t//\r\n-\tclass Context<N> extends DelegateExprContext<N>\r\n-\t{\r\n-\t\tN node;\r\n-\t\tfinal Model<N> model;\r\n-\t\tint position = 0;\r\n-\t\tint lastPosition = 0;\r\n-\r\n-\t\tContext(Model<N> model, final N node, final ExprContextDynamic<N> context)\r\n-\t\t{\r\n-\t\t\tsuper(context);\r\n-\t\t\tthis.node = node;\r\n-\t\t\tthis.model = model;\r\n-\t\t}\r\n-\r\n-\t\tpublic int getContextPosition() {\r\n-\t\t\tif (position != 0)\r\n-\t\t\t{\r\n-\t\t\t\treturn position;\r\n-\t\t\t}\r\n-\t\t\tNodeIterator<N> iter;\r\n-\t\t\tswitch (model.getNodeKind(node))\r\n-\t\t\t{\r\n-\t\t\t\tcase DOCUMENT:\r\n-\t\t\t\t\tposition = 1;\r\n-\t\t\t\t\treturn 1;\r\n-\t\t\t\tcase ATTRIBUTE:\r\n-\t\t\t\t\titer = new NodeIteratorOnIterator<N>(model.getAttributeAxis(model.getParent(node), inheritAttributes).iterator());\r\n-\t\t\t\tbreak;\r\n-\t\t\t\tcase NAMESPACE:\r\n-\t\t\t\t\titer = new NodeIteratorOnIterator<N>(model.getNamespaceAxis(model.getParent(node), inheritNamespaces).iterator());\r\n-\t\t\t\tbreak;\r\n-\t\t\t\tdefault:\r\n-\t\t\t\t\titer = new NodeIteratorOnIterator<N>(model.getChildAxis(model.getParent(node)).iterator());\r\n-\t\t\t\tbreak;\r\n-\t\t\t}\r\n-\t\t\tposition = 1;\r\n-\t\t\tfor (;;)\r\n-\t\t\t{\r\n-\t\t\t\tN tem = iter.next();\r\n-\t\t\t\tif (tem.equals(node))\r\n-\t\t\t\t{\r\n-\t\t\t\t\tbreak;\r\n-\t\t\t\t}\r\n-\t\t\t\tif (pattern.matches(model, tem, origContext))\r\n-\t\t\t\t{\r\n-\t\t\t\t\tposition++;\r\n-\t\t\t\t}\r\n-\t\t\t}\r\n-\t\t\treturn position;\r\n-\t\t}\r\n-\r\n-\t\tpublic int getContextSize() {\r\n-\t\t\tif (lastPosition != 0)\r\n-\t\t\t{\r\n-\t\t\t\treturn lastPosition;\r\n-\t\t\t}\r\n-\t\t\tNodeIterator<N> iter;\r\n-\t\t\tswitch (model.getNodeKind(node))\r\n-\t\t\t{\r\n-\t\t\t\tcase DOCUMENT:\r\n-\t\t\t\t\tlastPosition = 1;\r\n-\t\t\t\t\treturn 1;\r\n-\t\t\t\tcase ATTRIBUTE:\r\n-\t\t\t\t\titer = new NodeIteratorOnIterator<N>(model.getAttributeAxis(model.getParent(node), inheritAttributes).iterator());\r\n-\t\t\t\t\tlastPosition = 0;\r\n-\t\t\t\tbreak;\r\n-\t\t\t\tcase NAMESPACE:\r\n-\t\t\t\t\titer = new NodeIteratorOnIterator<N>(model.getNamespaceAxis(model.getParent(node), inheritNamespaces).iterator());\r\n-\t\t\t\t\tlastPosition = 0;\r\n-\t\t\t\tbreak;\r\n-\t\t\t\tdefault:\r\n-\t\t\t\t\titer = new NodeIteratorOnIterator<N>(model.getFollowingSiblingAxis(node).iterator());\r\n-\t\t\t\t\tlastPosition = position;\r\n-\t\t\t\tbreak;\r\n-\t\t\t}\r\n-\t\t\tfor (;;)\r\n-\t\t\t{\r\n-\t\t\t\tN tem = iter.next();\r\n-\t\t\t\tif (tem == null)\r\n-\t\t\t\t{\r\n-\t\t\t\t\tbreak;\r\n-\t\t\t\t}\r\n-\t\t\t\tif (pattern.matches(model, tem, origContext))\r\n-\t\t\t\t{\r\n-\t\t\t\t\tlastPosition++;\r\n-\t\t\t\t}\r\n-\t\t\t}\r\n-\t\t\treturn lastPosition;\r\n-\t\t}\r\n-\t}\r\n-\r\n     // ////////////////////////////////////////\r\n     //  \r\n     // the context changes a bit from our caller's context to reflect a\r\n     // different way of tracking position()\r\n-    //\r\n-    class CursorContext implements TraverserDynamicContext\r\n-    {\r\n-        TraversingInformer node;\r\n-        int position = 0;\r\n-        int lastPosition = 0;\r\n-        TraverserDynamicContext origCtx;\r\n-\r\n-        CursorContext(TraversingInformer node, final TraverserDynamicContext context)\r\n-        {\r\n-            origCtx = context;\r\n-            this.node = node;\r\n-        }\r\n-\r\n-        public int getContextPosition()\r\n-        {\r\n-            if (position != 0)\r\n-            {\r\n-                return position;\r\n-            }\r\n-            Traverser iter;\r\n-            NodeKind nodeKind = node.getNodeKind();\r\n-            if (nodeKind == NodeKind.DOCUMENT) {\r\n-                position = 1;\r\n-                return 1;\r\n-            }\r\n-            Precursor parent = node.newPrecursor();\r\n-            parent.moveToParent();\r\n-            switch (nodeKind)\r\n-            {\r\n-                case ATTRIBUTE:\r\n-                    iter = parent.traverseAttributeAxis(inheritAttributes);\r\n-                    break;\r\n-                case NAMESPACE:\r\n-                    iter = parent.traverseNamespaceAxis(inheritNamespaces);\r\n-                    break;\r\n-                default:\r\n-                    iter = parent.traverseChildAxis();\r\n-                    break;\r\n-            }\r\n-            position = 1;\r\n-            while(iter.moveToNext())\r\n-            {\r\n-                if (iter.equals(node))\r\n-                {\r\n-                    break;\r\n-                }\r\n-                if (pattern.matches(iter, origCtx))\r\n-                {\r\n-                    position++;\r\n-                }\r\n-            }\r\n-            return position;\r\n-        }\r\n-\r\n-        public int getContextSize()\r\n-        {\r\n-            if (lastPosition != 0)\r\n-            {\r\n-                return lastPosition;\r\n-            }\r\n-            \r\n-            Traverser iter;\r\n-            NodeKind nodeKind = node.getNodeKind();\r\n-            switch (nodeKind)\r\n-            {\r\n-                case DOCUMENT:\r\n-                    lastPosition = 1;\r\n-                    return 1;\r\n-                case ATTRIBUTE:\r\n-                    Precursor parent = node.newPrecursor();\r\n-                    parent.moveToParent();\r\n-                    iter = parent.traverseAttributeAxis(inheritAttributes);\r\n-                    lastPosition = 0;\r\n-                    break;\r\n-                case NAMESPACE:\r\n-                    Precursor nsParent = node.newPrecursor();\r\n-                    nsParent.moveToParent();\r\n-                    iter = nsParent.traverseNamespaceAxis(inheritNamespaces);\r\n-                    lastPosition = 0;\r\n-                break;\r\n-                default:\r\n-                    iter = node.traverseFollowingSiblingAxis();\r\n-                    lastPosition = position;\r\n-                break;\r\n-            }\r\n-            while (iter.moveToNext()) {\r\n-                if (pattern.matches(iter, origCtx))\r\n-                {\r\n-                    lastPosition++;\r\n-                }\r\n-            }\r\n-            return lastPosition;\r\n-        }\r\n-\r\n-        @Override\r\n-        public TraverserVariant getVariableValue(QName name) {\r\n-            return origCtx.getVariableValue(name); \r\n-        }\r\n-\r\n-        @Override\r\n-        public ExtensionContext getExtensionContext(String namespace) {\r\n-            return origCtx.getExtensionContext(namespace);\r\n-        }\r\n-\r\n-        @Override\r\n-        public boolean getInheritAttributes() {\r\n-            return origCtx.getInheritAttributes();\r\n-        }\r\n-\r\n-        @Override\r\n-        public boolean getInheritNamespaces() {\r\n-            return origCtx.getInheritNamespaces();\r\n-        }\r\n+    //\n+\n+    class Context<N>\n+        extends DelegateExprContext<N>\n+    {\n+        N node;\n+\n+        final Model<N> model;\n+        int position = 0;\n+        int lastPosition = 0;\n+\n+        Context(Model<N> model, final N node, final ExprContextDynamic<N> context)\n+        {\n+            super(context);\n+            this.node = node;\n+            this.model = model;\n+        }\n+\n+        public int getContextPosition()\n+        {\n+            if (position != 0)\n+            {\n+                return position;\n+            }\n+            NodeIterator<N> iter;\n+\n+            switch (model.getNodeKind(node))\n+            {\n+                case DOCUMENT:\n+                position = 1;\n+                return 1;\n+                case ATTRIBUTE:\n+                iter = new NodeIteratorOnIterator<N>(model.getAttributeAxis(model.getParent(node), inheritAttributes).iterator());\n+                break;\n+                case NAMESPACE:\n+                iter = new NodeIteratorOnIterator<N>(model.getNamespaceAxis(model.getParent(node), inheritNamespaces).iterator());\n+                break;\n+                default:\n+                iter = new NodeIteratorOnIterator<N>(model.getChildAxis(model.getParent(node)).iterator());\n+                break;\n+            }\n+            position = 1;\n+            for (;;)\n+            {\n+                N tem = iter.next();\n+                if (tem.equals(node))\n+                {\n+                    break;\n+                }\n+                if (pattern.matches(model, tem, origContext))\n+                {\n+                    position++;\n+                }\n+            }\n+            return position;\n+        }\n+\n+        public int getContextSize()\n+        {\n+            if (lastPosition != 0)\n+            {\n+                return lastPosition;\n+            }\n+            NodeIterator<N> iter;\n+\n+            switch (model.getNodeKind(node))\n+            {\n+                case DOCUMENT:\n+                lastPosition = 1;\n+                return 1;\n+                case ATTRIBUTE:\n+                iter = new NodeIteratorOnIterator<N>(model.getAttributeAxis(model.getParent(node), inheritAttributes).iterator());\n+                lastPosition = 0;\n+                break;\n+                case NAMESPACE:\n+                iter = new NodeIteratorOnIterator<N>(model.getNamespaceAxis(model.getParent(node), inheritNamespaces).iterator());\n+                lastPosition = 0;\n+                break;\n+                default:\n+                iter = new NodeIteratorOnIterator<N>(model.getFollowingSiblingAxis(node).iterator());\n+                lastPosition = position;\n+                break;\n+            }\n+            for (;;)\n+            {\n+                N tem = iter.next();\n+                if (tem == null)\n+                {\n+                    break;\n+                }\n+                if (pattern.matches(model, tem, origContext))\n+                {\n+                    lastPosition++;\n+                }\n+            }\n+            return lastPosition;\n+        }\n     }\r\n-}\r\n+\r\n+    // ////////////////////////////////////////\r\n+    //  \r\n+    // the context changes a bit from our caller's context to reflect a\r\n+    // different way of tracking position()\r\n+    //\n+\n+    class CursorContext implements TraverserDynamicContext\n+    {\n+        TraversingInformer node;\n+        int position = 0;\n+        int lastPosition = 0;\n+        TraverserDynamicContext origCtx;\n+\n+        CursorContext(TraversingInformer node, final TraverserDynamicContext context)\n+        {\n+            origCtx = context;\n+            this.node = node;\n+        }\n+\n+        public int getContextPosition()\n+        {\n+            if (position != 0)\n+            {\n+                return position;\n+            }\n+            Traverser iter;\n+            NodeKind nodeKind = node.getNodeKind();\n+            if (nodeKind == NodeKind.DOCUMENT)\n+            {\n+                position = 1;\n+                return 1;\n+            }\n+            Precursor parent = node.newPrecursor();\n+            parent.moveToParent();\n+            switch (nodeKind)\n+            {\n+                case ATTRIBUTE:\n+                iter = parent.traverseAttributeAxis(inheritAttributes);\n+                break;\n+                case NAMESPACE:\n+                iter = parent.traverseNamespaceAxis(inheritNamespaces);\n+                break;\n+                default:\n+                iter = parent.traverseChildAxis();\n+                break;\n+            }\n+            position = 1;\n+            while (iter.moveToNext())\n+            {\n+                if (iter.equals(node))\n+                {\n+                    break;\n+                }\n+                if (pattern.matches(iter, origCtx))\n+                {\n+                    position++;\n+                }\n+            }\n+            return position;\n+        }\n+\n+        public int getContextSize()\n+        {\n+            if (lastPosition != 0)\n+            {\n+                return lastPosition;\n+            }\n+            Traverser iter;\n+            NodeKind nodeKind = node.getNodeKind();\n+\n+            switch (nodeKind)\n+            {\n+                case DOCUMENT:\n+                lastPosition = 1;\n+                return 1;\n+                case ATTRIBUTE:\n+                Precursor parent = node.newPrecursor();\n+                parent.moveToParent();\n+                iter = parent.traverseAttributeAxis(inheritAttributes);\n+                lastPosition = 0;\n+                break;\n+                case NAMESPACE:\n+                Precursor nsParent = node.newPrecursor();\n+                nsParent.moveToParent();\n+                iter = nsParent.traverseNamespaceAxis(inheritNamespaces);\n+                lastPosition = 0;\n+                break;\n+                default:\n+                iter = node.traverseFollowingSiblingAxis();\n+                lastPosition = position;\n+                break;\n+            }\n+\n+            while (iter.moveToNext())\n+            {\n+                if (pattern.matches(iter, origCtx))\n+                {\n+                    lastPosition++;\n+                }\n+            }\n+            return lastPosition;\n+        }\n+\n+        @Override\n+        public TraverserVariant getVariableValue(QName name)\n+        {\n+            return origCtx.getVariableValue(name);\n+        }\n+\n+        @Override\n+        public ExtensionContext getExtensionContext(String namespace)\n+        {\n+            return origCtx.getExtensionContext(namespace);\n+        }\n+\n+        @Override\n+        public boolean getInheritAttributes()\n+        {\n+            return origCtx.getInheritAttributes();\n+        }\n+\n+        @Override\n+        public boolean getInheritNamespaces()\n+        {\n+            return origCtx.getInheritNamespaces();\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 438
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "46",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/101/FilterPattern.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/101/FilterPattern.java\nindex a04681e680d..abe2839bafc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/101/FilterPattern.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/101/FilterPattern.java\n@@ -42,7 +42,7 @@ import org.genxdm.xpath.v10.TraverserVariant;\n final class FilterPattern\r\n     extends PathPatternBase\r\n {\r\n-\tprivate final PathPatternBase pattern;\r\n+private final PathPatternBase pattern;\r\n \tprivate final BooleanExpr predicate;\r\n \tprivate final boolean inheritAttributes;\r\n \tprivate final boolean inheritNamespaces;\r\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "46",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/101/FilterPattern.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/101/FilterPattern.java\nindex a04681e680d..864c4c9d02d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/101/FilterPattern.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/101/FilterPattern.java\n@@ -42,7 +42,7 @@ import org.genxdm.xpath.v10.TraverserVariant;\n final class FilterPattern\r\n     extends PathPatternBase\r\n {\r\n-\tprivate final PathPatternBase pattern;\r\n+    private final PathPatternBase pattern;\r\n \tprivate final BooleanExpr predicate;\r\n \tprivate final boolean inheritAttributes;\r\n \tprivate final boolean inheritNamespaces;\r\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}