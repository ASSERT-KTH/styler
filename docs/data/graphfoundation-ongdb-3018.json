{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3018",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "143",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "166",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3018/HilbertSpaceFillingCurve3D.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3018/HilbertSpaceFillingCurve3D.java\nindex 31fc20547f4..e6dd7662c79 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3018/HilbertSpaceFillingCurve3D.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3018/HilbertSpaceFillingCurve3D.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.gis.spatial.index.curves;\n \n import java.util.LinkedHashMap;\n@@ -34,259 +35,257 @@ import static org.neo4j.gis.spatial.index.curves.HilbertSpaceFillingCurve3D.Dire\n public class HilbertSpaceFillingCurve3D extends SpaceFillingCurve\n {\n \n-    /**\n-     * Utilities for rotating point values in binary about various axes\n-     */\n-    static class BinaryCoordinateRotationUtils3D\n+  /**\n+   * Utilities for rotating point values in binary about various axes\n+   */\n+  static class BinaryCoordinateRotationUtils3D\n+  {\n+    static int rotateNPointLeft(int value)\n     {\n-        static int rotateNPointLeft( int value )\n-        {\n-            return (value << 1) & 0b111 | ((value & 0b100) >> 2);\n-        }\n-\n-        static int rotateNPointRight( int value )\n-        {\n-            return (value >> 1) | ((value & 0b001) << 2);\n-        }\n-\n-        static int xXOR( int value )\n-        {\n-            return value ^ 0b100;\n-        }\n+      return (value << 1) & 0b111 | ((value & 0b100) >> 2);\n+    }\n \n-        static int rotateYZ( int value )\n-        {\n-            return value ^ 0b011;\n-        }\n+    static int rotateNPointRight(int value)\n+    {\n+      return (value >> 1) | ((value & 0b001) << 2);\n     }\n \n-    /**\n-     * Description of the space filling curve structure\n-     */\n-    static class HilbertCurve3D extends CurveRule\n+    static int xXOR(int value)\n     {\n-        HilbertCurve3D[] children;\n+      return value ^ 0b100;\n+    }\n \n-        private HilbertCurve3D( int... npointValues )\n-        {\n-            super( 3, npointValues );\n-            assert npointValues[0] == 0 || npointValues[0] == 3 || npointValues[0] == 5 || npointValues[0] == 6;\n-        }\n+    static int rotateYZ(int value)\n+    {\n+      return value ^ 0b011;\n+    }\n+  }\n \n-        @Override\n-        public CurveRule childAt( int npoint )\n-        {\n-            return children[npoint];\n-        }\n+  /**\n+   * Description of the space filling curve structure\n+   */\n+  static class HilbertCurve3D extends CurveRule\n+  {\n+    HilbertCurve3D[] children;\n \n-        @Override\n-        public String toString()\n-        {\n-            return name().toString();\n-        }\n+    private HilbertCurve3D(int... npointValues)\n+    {\n+      super(3, npointValues);\n+      assert npointValues[0] == 0 || npointValues[0] == 3 || npointValues[0] == 5 || npointValues[0] == 6;\n+    }\n \n-        static String binaryString( int value )\n-        {\n-            String binary = \"00\" + Integer.toBinaryString( value );\n-            return binary.substring( binary.length() - 3, binary.length() );\n-        }\n+    @Override\n+    public CurveRule childAt(int npoint)\n+    {\n+      return children[npoint];\n+    }\n \n-        private Direction3D direction( int start, int end )\n-        {\n-            end -= start;\n-            switch ( end )\n-            {\n-            case 1:\n-                return FRONT; // move forward 000->001\n-            case 2:\n-                return UP;    // move up      000->010\n-            case 4:\n-                return RIGHT; // move right   000->100\n-            case -4:\n-                return LEFT;  // move left    111->011\n-            case -2:\n-                return DOWN;  // move down    111->101\n-            case -1:\n-                return BACK;  // move back    111->110\n-            default:\n-                throw new IllegalArgumentException( \"Illegal direction: \" + end );\n-            }\n-        }\n+    @Override\n+    public String toString()\n+    {\n+      return name().toString();\n+    }\n \n-        SubCurve3D name()\n-        {\n-            return new SubCurve3D(\n-                    direction( npointValues[0], npointValues[1] ),\n-                    direction( npointValues[1], npointValues[2] ),\n-                    direction( npointValues[0], npointValues[length() - 1] ) );\n-        }\n+    static String binaryString(int value)\n+    {\n+      String binary = \"00\" + Integer.toBinaryString(value);\n+      return binary.substring(binary.length() - 3, binary.length());\n+    }\n \n-        /**\n-         * Rotate about the normal diagonal (the 000->111 diagonal). This simply involves\n-         * rotating the bits of all npoint values either left or right depending on the\n-         * direction of rotation, normal or reversed (positive or negative).\n-         */\n-        private HilbertCurve3D rotateOneThirdDiagonalPos( boolean direction )\n-        {\n-            int[] newNpoints = new int[length()];\n-            for ( int i = 0; i < length(); i++ )\n-            {\n-                if ( direction )\n-                {\n-                    newNpoints[i] = BinaryCoordinateRotationUtils3D.rotateNPointRight( npointValues[i] );\n-                }\n-                else\n-                {\n-                    newNpoints[i] = BinaryCoordinateRotationUtils3D.rotateNPointLeft( npointValues[i] );\n-                }\n-            }\n-            return new HilbertCurve3D( newNpoints );\n-        }\n+    private Direction3D direction(int start, int end)\n+    {\n+      end -= start;\n+      switch (end)\n+      {\n+        case 1:\n+          return FRONT; // move forward 000->001\n+        case 2:\n+          return UP;    // move up      000->010\n+        case 4:\n+          return RIGHT; // move right   000->100\n+        case -4:\n+          return LEFT;  // move left    111->011\n+        case -2:\n+          return DOWN;  // move down    111->101\n+        case -1:\n+          return BACK;  // move back    111->110\n+        default:\n+          throw new IllegalArgumentException(\"Illegal direction: \" + end);\n+      }\n+    }\n \n-        /**\n-         * Rotate about the neg-x diagonal (the 100->011 diagonal). This is similar to the\n-         * normal diagonal rotation, but with x-switched, so we XOR the x value before and after\n-         * the rotation, and rotate in the opposite direction to specified.\n-         */\n-        private HilbertCurve3D rotateOneThirdDiagonalNeg( boolean direction )\n-        {\n-            int[] newNpoints = new int[length()];\n-            for ( int i = 0; i < length(); i++ )\n-            {\n-                if ( direction )\n-                {\n-                    newNpoints[i] = BinaryCoordinateRotationUtils3D.xXOR(\n-                            BinaryCoordinateRotationUtils3D.rotateNPointLeft( BinaryCoordinateRotationUtils3D.xXOR( npointValues[i] ) ) );\n-                }\n-                else\n-                {\n-                    newNpoints[i] = BinaryCoordinateRotationUtils3D.xXOR(\n-                            BinaryCoordinateRotationUtils3D.rotateNPointRight( BinaryCoordinateRotationUtils3D.xXOR( npointValues[i] ) ) );\n-                }\n-            }\n-            return new HilbertCurve3D( newNpoints );\n-        }\n+    SubCurve3D name()\n+    {\n+      return new SubCurve3D(\n+          direction(npointValues[0], npointValues[1]),\n+          direction(npointValues[1], npointValues[2]),\n+          direction(npointValues[0], npointValues[length() - 1]));\n+    }\n \n-        /**\n-         * Rotate about the x-axis. This involves leaving x values the same, but xOR'ing the rest.\n-         */\n-        private HilbertCurve3D rotateAboutX()\n+    /**\n+     * Rotate about the normal diagonal (the 000->111 diagonal). This simply involves\n+     * rotating the bits of all npoint values either left or right depending on the\n+     * direction of rotation, normal or reversed (positive or negative).\n+     */\n+    private HilbertCurve3D rotateOneThirdDiagonalPos(boolean direction)\n+    {\n+      int[] newNpoints = new int[length()];\n+      for (int i = 0; i < length(); i++)\n+      {\n+        if (direction)\n         {\n-            int[] newNpoints = new int[length()];\n-            for ( int i = 0; i < length(); i++ )\n-            {\n-                newNpoints[i] = BinaryCoordinateRotationUtils3D.rotateYZ( npointValues[i] );\n-            }\n-            return new HilbertCurve3D( newNpoints );\n-        }\n-\n-        private void buildCurveTree( Map<SubCurve3D,HilbertCurve3D> curves )\n+          newNpoints[i] = BinaryCoordinateRotationUtils3D.rotateNPointRight(npointValues[i]);\n+        } else\n         {\n-            if ( children == null )\n-            {\n-                makeChildren( curves );\n-                curves.put( name(), this );\n-\n-                for ( HilbertCurve3D child : children )\n-                {\n-                    child.buildCurveTree( curves );\n-                }\n-            }\n+          newNpoints[i] = BinaryCoordinateRotationUtils3D.rotateNPointLeft(npointValues[i]);\n         }\n+      }\n+      return new HilbertCurve3D(newNpoints);\n+    }\n \n-        private void makeChildren( Map<SubCurve3D,HilbertCurve3D> curves )\n+    /**\n+     * Rotate about the neg-x diagonal (the 100->011 diagonal). This is similar to the\n+     * normal diagonal rotation, but with x-switched, so we XOR the x value before and after\n+     * the rotation, and rotate in the opposite direction to specified.\n+     */\n+    private HilbertCurve3D rotateOneThirdDiagonalNeg(boolean direction)\n+    {\n+      int[] newNpoints = new int[length()];\n+      for (int i = 0; i < length(); i++)\n+      {\n+        if (direction)\n         {\n-            children = new HilbertCurve3D[length()];\n-            children[0] = singleton( curves, rotateOneThirdDiagonalPos( true ) );\n-            children[1] = singleton( curves, rotateOneThirdDiagonalPos( false ) );\n-            children[2] = singleton( curves, rotateOneThirdDiagonalPos( false ) );\n-            children[3] = singleton( curves, rotateAboutX() );\n-            children[4] = singleton( curves, rotateAboutX() );\n-            children[5] = singleton( curves, rotateOneThirdDiagonalNeg( true ) );\n-            children[6] = singleton( curves, rotateOneThirdDiagonalNeg( true ) );\n-            children[7] = singleton( curves, rotateOneThirdDiagonalNeg( false ) );\n-        }\n-\n-        private HilbertCurve3D singleton( Map<SubCurve3D,HilbertCurve3D> curves, HilbertCurve3D newCurve )\n+          newNpoints[i] = BinaryCoordinateRotationUtils3D.xXOR(\n+              BinaryCoordinateRotationUtils3D.rotateNPointLeft(BinaryCoordinateRotationUtils3D.xXOR(npointValues[i])));\n+        } else\n         {\n-            return curves.computeIfAbsent( newCurve.name(), key -> newCurve );\n+          newNpoints[i] = BinaryCoordinateRotationUtils3D.xXOR(\n+              BinaryCoordinateRotationUtils3D.rotateNPointRight(BinaryCoordinateRotationUtils3D.xXOR(npointValues[i])));\n         }\n+      }\n+      return new HilbertCurve3D(newNpoints);\n     }\n \n-    enum Direction3D\n+    /**\n+     * Rotate about the x-axis. This involves leaving x values the same, but xOR'ing the rest.\n+     */\n+    private HilbertCurve3D rotateAboutX()\n     {\n-        UP, RIGHT, LEFT, DOWN, FRONT, BACK\n+      int[] newNpoints = new int[length()];\n+      for (int i = 0; i < length(); i++)\n+      {\n+        newNpoints[i] = BinaryCoordinateRotationUtils3D.rotateYZ(npointValues[i]);\n+      }\n+      return new HilbertCurve3D(newNpoints);\n     }\n \n-    static class SubCurve3D\n+    private void buildCurveTree(Map<SubCurve3D, HilbertCurve3D> curves)\n     {\n-        private final Direction3D firstMove;\n-        private final Direction3D secondMove;\n-        private final Direction3D overallDirection;\n-\n-        SubCurve3D( Direction3D firstMove, Direction3D secondMove, Direction3D overallDirection )\n-        {\n-            this.firstMove = firstMove;\n-            this.secondMove = secondMove;\n-            this.overallDirection = overallDirection;\n-        }\n-\n-        @Override\n-        public int hashCode()\n-        {\n-            return java.util.Objects.hash( firstMove, secondMove, overallDirection );\n-        }\n-\n-        @Override\n-        public boolean equals( Object obj )\n-        {\n-            if ( obj == null || this.getClass() != obj.getClass() )\n-            {\n-                return false;\n-            }\n-            SubCurve3D other = (SubCurve3D) obj;\n-            return this.firstMove == other.firstMove && this.secondMove == other.secondMove && this.overallDirection == other.overallDirection;\n-        }\n+      if (children == null)\n+      {\n+        makeChildren(curves);\n+        curves.put(name(), this);\n \n-        @Override\n-        public String toString()\n+        for (HilbertCurve3D child : children)\n         {\n-            return firstMove.toString() + secondMove.toString() + overallDirection.toString();\n+          child.buildCurveTree(curves);\n         }\n+      }\n     }\n \n-    // this is left accessible to make debugging easier\n-    static Map<SubCurve3D,HilbertCurve3D> curves = new LinkedHashMap<>();\n-\n-    private static HilbertCurve3D buildTheCurve()\n+    private void makeChildren(Map<SubCurve3D, HilbertCurve3D> curves)\n     {\n-        // We start with a UFR curve\n-        int[] npointValues = {0b000, 0b010, 0b011, 0b001, 0b101, 0b111, 0b110, 0b100};\n-        HilbertCurve3D theCurve = new HilbertCurve3D( npointValues );\n+      children = new HilbertCurve3D[length()];\n+      children[0] = singleton(curves, rotateOneThirdDiagonalPos(true));\n+      children[1] = singleton(curves, rotateOneThirdDiagonalPos(false));\n+      children[2] = singleton(curves, rotateOneThirdDiagonalPos(false));\n+      children[3] = singleton(curves, rotateAboutX());\n+      children[4] = singleton(curves, rotateAboutX());\n+      children[5] = singleton(curves, rotateOneThirdDiagonalNeg(true));\n+      children[6] = singleton(curves, rotateOneThirdDiagonalNeg(true));\n+      children[7] = singleton(curves, rotateOneThirdDiagonalNeg(false));\n+    }\n \n-        theCurve.buildCurveTree( curves );\n-        return theCurve;\n+    private HilbertCurve3D singleton(Map<SubCurve3D, HilbertCurve3D> curves, HilbertCurve3D newCurve)\n+    {\n+      return curves.computeIfAbsent(newCurve.name(), key -> newCurve);\n     }\n+  }\n \n-    private static final HilbertCurve3D THE_CURVE = buildTheCurve();\n+  enum Direction3D\n+  {\n+    UP, RIGHT, LEFT, DOWN, FRONT, BACK\n+  }\n \n-    public static final int MAX_LEVEL = 63 / 3 - 1;\n+  static class SubCurve3D\n+  {\n+    private final Direction3D firstMove;\n+    private final Direction3D secondMove;\n+    private final Direction3D overallDirection;\n \n-    public HilbertSpaceFillingCurve3D( Envelope range )\n+    SubCurve3D(Direction3D firstMove, Direction3D secondMove, Direction3D overallDirection)\n     {\n-        this( range, MAX_LEVEL );\n+      this.firstMove = firstMove;\n+      this.secondMove = secondMove;\n+      this.overallDirection = overallDirection;\n     }\n \n-    public HilbertSpaceFillingCurve3D( Envelope range, int maxLevel )\n+    @Override\n+    public int hashCode()\n+    {\n+      return java.util.Objects.hash(firstMove, secondMove, overallDirection);\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj)\n     {\n-        super( range, maxLevel );\n-        assert maxLevel <= MAX_LEVEL;\n-        assert range.getDimension() == 3;\n+      if (obj == null || this.getClass() != obj.getClass())\n+      {\n+        return false;\n+      }\n+      SubCurve3D other = (SubCurve3D) obj;\n+      return this.firstMove == other.firstMove && this.secondMove == other.secondMove && this.overallDirection == other.overallDirection;\n     }\n \n     @Override\n-    protected CurveRule rootCurve()\n+    public String toString()\n     {\n-        return THE_CURVE;\n+      return firstMove.toString() + secondMove.toString() + overallDirection.toString();\n     }\n+  }\n+\n+  // this is left accessible to make debugging easier\n+  static Map<SubCurve3D, HilbertCurve3D> curves = new LinkedHashMap<>();\n+\n+  private static HilbertCurve3D buildTheCurve()\n+  {\n+    // We start with a UFR curve\n+    int[] npointValues = {0b000, 0b010, 0b011, 0b001, 0b101, 0b111, 0b110, 0b100};\n+    HilbertCurve3D theCurve = new HilbertCurve3D(npointValues);\n+\n+    theCurve.buildCurveTree(curves);\n+    return theCurve;\n+  }\n+\n+  private static final HilbertCurve3D THE_CURVE = buildTheCurve();\n+\n+  public static final int MAX_LEVEL = 63 / 3 - 1;\n+\n+  public HilbertSpaceFillingCurve3D(Envelope range)\n+  {\n+    this(range, MAX_LEVEL);\n+  }\n+\n+  public HilbertSpaceFillingCurve3D(Envelope range, int maxLevel)\n+  {\n+    super(range, maxLevel);\n+    assert maxLevel <= MAX_LEVEL;\n+    assert range.getDimension() == 3;\n+  }\n+\n+  @Override\n+  protected CurveRule rootCurve()\n+  {\n+    return THE_CURVE;\n+  }\n }\n",
            "diff_size": 309
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}