{
    "project_name": "neo4j-neo4j",
    "error_id": "2708",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "35",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "35",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2708/ShortestPathCommonEndNodesForbiddenException.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2708/ShortestPathCommonEndNodesForbiddenException.java\nindex 6524803fc5b..840cb3854d7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2708/ShortestPathCommonEndNodesForbiddenException.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2708/ShortestPathCommonEndNodesForbiddenException.java\n@@ -17,20 +17,21 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.exceptions;\n \n public class ShortestPathCommonEndNodesForbiddenException extends CypherExecutionException\n {\n     private static final String ERROR_MSG = \"The shortest path algorithm does not work when the start and end nodes are the same. This can happen if you\\n\" +\n-                                           \"perform a shortestPath search after a cartesian product that might have the same start and end nodes for some\\n\" +\n-                                           \"of the rows passed to shortestPath. If you would rather not experience this exception, and can accept the\\n\" +\n-                                           \"possibility of missing results for those rows, disable this in the Neo4j configuration by setting\\n\" +\n-                                           \"`cypher.forbid_shortestpath_common_nodes` to false. If you cannot accept missing results, and really want the\\n\" +\n-                                           \"shortestPath between two common nodes, then re-write the query using a standard Cypher variable length pattern\\n\" +\n-                                           \"expression followed by ordering by path length and limiting to one result.\";\n+      \"perform a shortestPath search after a cartesian product that might have the same start and end nodes for some\\n\" +\n+      \"of the rows passed to shortestPath. If you would rather not experience this exception, and can accept the\\n\" +\n+      \"possibility of missing results for those rows, disable this in the Neo4j configuration by setting\\n\" +\n+      \"`cypher.forbid_shortestpath_common_nodes` to false. If you cannot accept missing results, and really want the\\n\" +\n+      \"shortestPath between two common nodes, then re-write the query using a standard Cypher variable length pattern\\n\" +\n+      \"expression followed by ordering by path length and limiting to one result.\";\n \n     public ShortestPathCommonEndNodesForbiddenException()\n     {\n-        super( ERROR_MSG );\n+        super(ERROR_MSG);\n     }\n }\n",
            "diff_size": 8
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2708/ShortestPathCommonEndNodesForbiddenException.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/2708/ShortestPathCommonEndNodesForbiddenException.java\nindex 6524803fc5b..28d11bc457e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2708/ShortestPathCommonEndNodesForbiddenException.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/2708/ShortestPathCommonEndNodesForbiddenException.java\n@@ -33,4 +33,4 @@ public class ShortestPathCommonEndNodesForbiddenException extends CypherExecutio\n     {\n         super( ERROR_MSG );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}