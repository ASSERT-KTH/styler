{
    "project_name": "wso2-attic-commons",
    "error_id": "414",
    "information": {
        "errors": [
            {
                "line": "89",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 130).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                    findMigrations(version, CURRENT_SCHEMA_VERSION, migrations);\n                    if (migrations.size() == 0) {\n                        __log.error(\"Don't know how to migrate from \" + version + \" to \" + CURRENT_SCHEMA_VERSION + \", aborting\");\n                        return false;\n                    } else {\n                        boolean success = true;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/414/MigrationHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/414/MigrationHandler.java\nindex 0cd68339cb7..0c3e325cc74 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/414/MigrationHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/414/MigrationHandler.java\n@@ -86,8 +86,9 @@ public class MigrationHandler {\n                     ArrayList<Migration> migrations = new ArrayList<Migration>();\n                     findMigrations(version, CURRENT_SCHEMA_VERSION, migrations);\n                     if (migrations.size() == 0) {\n-                        __log.error(\"Don't know how to migrate from \" + version + \" to \" + CURRENT_SCHEMA_VERSION + \", aborting\");\n-                        return false;\n+                        __log.error(\"Don't know how to migrate from \" + version + \" to \" + CURRENT_SCHEMA_VERSION\n+                                  + \", aborting\");\n+                         return false;\n                     } else {\n                         boolean success = true;\n                         for (Migration mig : migrations) {\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/414/MigrationHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/414/MigrationHandler.java\nindex 0cd68339cb7..c3353ef1ee5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/414/MigrationHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/414/MigrationHandler.java\n@@ -40,155 +40,177 @@ import org.apache.ode.bpel.engine.Contexts;\n  * Checks database schema versions and migrates when necessary.\n  */\n public class MigrationHandler {\n-    private static final Log __log = LogFactory.getLog(MigrationHandler.class);\n+  private static final Log __log = LogFactory.getLog(MigrationHandler.class);\n \n-    public static final int CURRENT_SCHEMA_VERSION = 6;\n+  public static final int CURRENT_SCHEMA_VERSION = 6;\n \n \n-    private Contexts _contexts;\n-    private List<MigrationLink> migrationLinks = new ArrayList<MigrationLink>() {{\n-        add(new MigrationLink(1, 2, new Migration[] { new CorrelatorsMigration(),\n-                                                        new CorrelationKeyMigration() } ));\n-        add(new MigrationLink(2, 3, new Migration[] { new CorrelationKeySetMigration() } ));\n-        add(new MigrationLink(4, 3, new Migration[] { new CorrelationKeySetMigration() } ));\n-        add(new MigrationLink(3, 5, new Migration[] { new CorrelationKeySetDataMigration() } ));\n-        add(new MigrationLink(5, 6, new Migration[] { new OutstandingRequestsMigration() } ));\n-    }};\n+  private Contexts _contexts;\n+  private List<MigrationLink> migrationLinks = new ArrayList<MigrationLink>() {{\n+    add(new MigrationLink(1, 2, new Migration[] {new CorrelatorsMigration(),\n+      new CorrelationKeyMigration()}));\n+    add(new MigrationLink(2, 3, new Migration[] {new CorrelationKeySetMigration()}));\n+    add(new MigrationLink(4, 3, new Migration[] {new CorrelationKeySetMigration()}));\n+    add(new MigrationLink(3, 5, new Migration[] {new CorrelationKeySetDataMigration()}));\n+    add(new MigrationLink(5, 6, new Migration[] {new OutstandingRequestsMigration()}));\n+  }};\n \n \n-    public MigrationHandler(Contexts _contexts) {\n-        this._contexts = _contexts;\n+  public MigrationHandler(Contexts _contexts) {\n+    this._contexts = _contexts;\n+  }\n+\n+  public boolean migrate(final Set<BpelProcess> registeredProcesses, int migrationTransactionTimeout) {\n+    if (_contexts.dao.getDataSource() == null) {\n+      __log.debug(\"No datasource available, stopping migration. Probably running fully in-memory.\");\n+      return true;\n     }\n \n-    public boolean migrate(final Set<BpelProcess> registeredProcesses, int migrationTransactionTimeout) {\n-        if (_contexts.dao.getDataSource() == null) {\n-            __log.debug(\"No datasource available, stopping migration. Probably running fully in-memory.\");\n-            return true;\n-        }\n+    final int version;\n+    try {\n+      version = getDbVersion();\n+    } catch (Throwable e) {\n+      __log.info(\"The ODE_SCHEMA_VERSION database table doesn't exist. Unless you need to migrate your data\" +\n+        \"from a past version, this message can be safely ignored.\");\n+      return false;\n+    }\n+    if (version == -1) {\n+      __log.info(\"No schema version available from the database, migrations will be skipped.\");\n+      return true;\n+    }\n+    if (version == CURRENT_SCHEMA_VERSION) {\n+      return true;\n+    }\n \n-        final int version;\n-        try {\n-            version = getDbVersion();\n-        } catch (Throwable e) {\n-            __log.info(\"The ODE_SCHEMA_VERSION database table doesn't exist. Unless you need to migrate your data\" +\n-                    \"from a past version, this message can be safely ignored.\");\n+    try {\n+      boolean success = _contexts.scheduler.execTransaction(new Callable<Boolean>() {\n+        public Boolean call() throws Exception {\n+          ArrayList<Migration> migrations = new ArrayList<Migration>();\n+          findMigrations(version, CURRENT_SCHEMA_VERSION, migrations);\n+          if (migrations.size() == 0) {\n+            __log.error(\"Don't know how to migrate from \" + version + \" to \" + CURRENT_SCHEMA_VERSION + \", aborting\");\n             return false;\n-        }\n-        if (version == -1) {\n-            __log.info(\"No schema version available from the database, migrations will be skipped.\");\n-            return true;\n-        }\n-        if (version == CURRENT_SCHEMA_VERSION) return true;\n-\n-        try {\n-            boolean success = _contexts.scheduler.execTransaction(new Callable<Boolean>() {\n-                public Boolean call() throws Exception {\n-                    ArrayList<Migration> migrations = new ArrayList<Migration>();\n-                    findMigrations(version, CURRENT_SCHEMA_VERSION, migrations);\n-                    if (migrations.size() == 0) {\n-                        __log.error(\"Don't know how to migrate from \" + version + \" to \" + CURRENT_SCHEMA_VERSION + \", aborting\");\n-                        return false;\n-                    } else {\n-                        boolean success = true;\n-                        for (Migration mig : migrations) {\n-                            __log.debug(\"Running migration \" + mig);\n-                            success = mig.migrate(registeredProcesses, _contexts.dao.getConnection()) && success;\n-                        }\n-\n-                        if (!success) _contexts.scheduler.setRollbackOnly();\n-                        else setDbVersion(CURRENT_SCHEMA_VERSION);\n-                        return success;\n-                    }\n-                }\n-            }, migrationTransactionTimeout);\n+          } else {\n+            boolean success = true;\n+            for (Migration mig : migrations) {\n+              __log.debug(\"Running migration \" + mig);\n+              success = mig.migrate(registeredProcesses, _contexts.dao.getConnection()) && success;\n+            }\n+\n+            if (!success) {\n+              _contexts.scheduler.setRollbackOnly();\n+            } else {\n+              setDbVersion(CURRENT_SCHEMA_VERSION);\n+            }\n             return success;\n-        } catch (Exception e) {\n-            __log.error(\"An error occured while migrating your database to a newer version of ODE, changes have \" +\n-                    \"been aborted\", e);\n-            throw new RuntimeException(e);\n+          }\n         }\n+      }, migrationTransactionTimeout);\n+      return success;\n+    } catch (Exception e) {\n+      __log.error(\"An error occured while migrating your database to a newer version of ODE, changes have \" +\n+        \"been aborted\", e);\n+      throw new RuntimeException(e);\n     }\n+  }\n \n-    private static class MigrationLink {\n-        int source;\n-        int target;\n-        Migration[] migrations;\n-        public MigrationLink(int source, int target, Migration[] migrations) {\n-            this.source = source;\n-            this.target = target;\n-            this.migrations = migrations;\n-        }\n-    }\n+  private static class MigrationLink {\n+    int source;\n+    int target;\n+    Migration[] migrations;\n \n-    /**\n-     * Attempts to find a way from a source to a target and collects the migrations found along. Assumes\n-     * a directed graph with no loops. Guarantees that migrations are collected in the proper start-to-end\n-     * order.\n-     */\n-    private boolean findMigrations(int source, int target, List<Migration> ms) {\n-        List<MigrationLink> l = findLinksTo(target);\n-        for (MigrationLink link : l) {\n-            if (link.source == source || findMigrations(source, link.source, ms)) {\n-                ms.addAll(Arrays.asList(link.migrations));\n-                return true;\n-            }\n-        }\n-        return false;\n+    public MigrationLink(int source, int target, Migration[] migrations) {\n+      this.source = source;\n+      this.target = target;\n+      this.migrations = migrations;\n     }\n-\n-    /**\n-     * Finds all the links with a given target.\n-     */\n-    private List<MigrationLink> findLinksTo(int target) {\n-        ArrayList<MigrationLink> mls = new ArrayList<MigrationLink>();\n-        for (MigrationLink ml : migrationLinks) {\n-            if (ml.target == target) mls.add(ml);\n-        }\n-        return mls;\n+  }\n+\n+  /**\n+   * Attempts to find a way from a source to a target and collects the migrations found along. Assumes\n+   * a directed graph with no loops. Guarantees that migrations are collected in the proper start-to-end\n+   * order.\n+   */\n+  private boolean findMigrations(int source, int target, List<Migration> ms) {\n+    List<MigrationLink> l = findLinksTo(target);\n+    for (MigrationLink link : l) {\n+      if (link.source == source || findMigrations(source, link.source, ms)) {\n+        ms.addAll(Arrays.asList(link.migrations));\n+        return true;\n+      }\n     }\n-\n-    private int getDbVersion() {\n-        int version = -1;\n-        Connection conn = null;\n-        PreparedStatement stmt = null;\n-        ResultSet rs = null;\n-        try {\n-            conn = _contexts.dao.getDataSource().getConnection();\n-            stmt = conn.prepareStatement(\"SELECT VERSION FROM ODE_SCHEMA_VERSION\");\n-            rs = stmt.executeQuery();\n-            if (rs.next()) version = rs.getInt(\"VERSION\");\n-        } catch (Exception e) {\n-            // Swallow, we'll just abort based on the version number\n-        } finally {\n-            try {\n-                if (rs != null) rs.close();\n-                if (stmt != null) stmt.close();\n-                if (conn != null) conn.close();\n-            } catch (SQLException e) {\n-                throw new RuntimeException(e);\n-            }\n+    return false;\n+  }\n+\n+  /**\n+   * Finds all the links with a given target.\n+   */\n+  private List<MigrationLink> findLinksTo(int target) {\n+    ArrayList<MigrationLink> mls = new ArrayList<MigrationLink>();\n+    for (MigrationLink ml : migrationLinks) {\n+      if (ml.target == target) {\n+        mls.add(ml);\n+      }\n+    }\n+    return mls;\n+  }\n+\n+  private int getDbVersion() {\n+    int version = -1;\n+    Connection conn = null;\n+    PreparedStatement stmt = null;\n+    ResultSet rs = null;\n+    try {\n+      conn = _contexts.dao.getDataSource().getConnection();\n+      stmt = conn.prepareStatement(\"SELECT VERSION FROM ODE_SCHEMA_VERSION\");\n+      rs = stmt.executeQuery();\n+      if (rs.next()) {\n+        version = rs.getInt(\"VERSION\");\n+      }\n+    } catch (Exception e) {\n+      // Swallow, we'll just abort based on the version number\n+    } finally {\n+      try {\n+        if (rs != null) {\n+          rs.close();\n+        }\n+        if (stmt != null) {\n+          stmt.close();\n+        }\n+        if (conn != null) {\n+          conn.close();\n         }\n-        return version;\n+      } catch (SQLException e) {\n+        throw new RuntimeException(e);\n+      }\n     }\n-\n-    private void setDbVersion(int version) {\n-        Connection conn = null;\n-        Statement stmt = null;\n-        try {\n-            conn = _contexts.dao.getDataSource().getConnection();\n-            stmt = conn.createStatement();\n-            int res = stmt.executeUpdate(\"UPDATE ODE_SCHEMA_VERSION SET VERSION = \" + version);\n-            // This should never happen but who knows?\n-            if (res == 0) throw new RuntimeException(\"Couldn't update schema version.\");\n-        } catch (Exception e) {\n-            // Swallow, we'll just abort based on the version number\n-        } finally {\n-            try {\n-                if (stmt != null) stmt.close();\n-                if (conn != null) conn.close();\n-            } catch (SQLException e) {\n-                throw new RuntimeException(e);\n-            }\n+    return version;\n+  }\n+\n+  private void setDbVersion(int version) {\n+    Connection conn = null;\n+    Statement stmt = null;\n+    try {\n+      conn = _contexts.dao.getDataSource().getConnection();\n+      stmt = conn.createStatement();\n+      int res = stmt.executeUpdate(\"UPDATE ODE_SCHEMA_VERSION SET VERSION = \" + version);\n+      // This should never happen but who knows?\n+      if (res == 0) {\n+        throw new RuntimeException(\"Couldn't update schema version.\");\n+      }\n+    } catch (Exception e) {\n+      // Swallow, we'll just abort based on the version number\n+    } finally {\n+      try {\n+        if (stmt != null) {\n+          stmt.close();\n+        }\n+        if (conn != null) {\n+          conn.close();\n         }\n+      } catch (SQLException e) {\n+        throw new RuntimeException(e);\n+      }\n     }\n+  }\n }\n",
            "diff_size": 188
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/414/MigrationHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/414/MigrationHandler.java\nindex 0cd68339cb7..643b2d0c025 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/414/MigrationHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/414/MigrationHandler.java\n@@ -43,20 +43,17 @@ public class MigrationHandler {\n     private static final Log __log = LogFactory.getLog(MigrationHandler.class);\n \n     public static final int CURRENT_SCHEMA_VERSION = 6;\n-\n-\n-    private Contexts _contexts;\n+private Contexts _contexts;\n     private List<MigrationLink> migrationLinks = new ArrayList<MigrationLink>() {{\n-        add(new MigrationLink(1, 2, new Migration[] { new CorrelatorsMigration(),\n-                                                        new CorrelationKeyMigration() } ));\n-        add(new MigrationLink(2, 3, new Migration[] { new CorrelationKeySetMigration() } ));\n-        add(new MigrationLink(4, 3, new Migration[] { new CorrelationKeySetMigration() } ));\n-        add(new MigrationLink(3, 5, new Migration[] { new CorrelationKeySetDataMigration() } ));\n-        add(new MigrationLink(5, 6, new Migration[] { new OutstandingRequestsMigration() } ));\n-    }};\n-\n+        add(new MigrationLink(1, 2, new Migration[] { new CorrelatorsMigration(), new CorrelationKeyMigration() }));\n+add(new MigrationLink(2, 3, new Migration[] { new CorrelationKeySetMigration() }));\n+        add(new MigrationLink(4, 3, new Migration[] { new CorrelationKeySetMigration() }));\n+        add(new MigrationLink(3, 5, new Migration[] { new CorrelationKeySetDataMigration() }));\n+        add(new MigrationLink(5, 6, new Migration[] { new OutstandingRequestsMigration() }));\n+    }\n+    };\n \n-    public MigrationHandler(Contexts _contexts) {\n+public MigrationHandler(Contexts _contexts) {\n         this._contexts = _contexts;\n     }\n \n@@ -156,7 +153,8 @@ public class MigrationHandler {\n             conn = _contexts.dao.getDataSource().getConnection();\n             stmt = conn.prepareStatement(\"SELECT VERSION FROM ODE_SCHEMA_VERSION\");\n             rs = stmt.executeQuery();\n-            if (rs.next()) version = rs.getInt(\"VERSION\");\n+            if (rs.next())\n+    version = rs.getInt(\"VERSION\");\n         } catch (Exception e) {\n             // Swallow, we'll just abort based on the version number\n         } finally {\n@@ -179,7 +177,8 @@ public class MigrationHandler {\n             stmt = conn.createStatement();\n             int res = stmt.executeUpdate(\"UPDATE ODE_SCHEMA_VERSION SET VERSION = \" + version);\n             // This should never happen but who knows?\n-            if (res == 0) throw new RuntimeException(\"Couldn't update schema version.\");\n+            if (res == 0)\n+    throw new RuntimeException(\"Couldn't update schema version.\");\n         } catch (Exception e) {\n             // Swallow, we'll just abort based on the version number\n         } finally {\n@@ -191,4 +190,4 @@ public class MigrationHandler {\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "89",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/414/MigrationHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/414/MigrationHandler.java\nindex 0cd68339cb7..0c3e325cc74 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/414/MigrationHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/414/MigrationHandler.java\n@@ -86,8 +86,9 @@ public class MigrationHandler {\n                     ArrayList<Migration> migrations = new ArrayList<Migration>();\n                     findMigrations(version, CURRENT_SCHEMA_VERSION, migrations);\n                     if (migrations.size() == 0) {\n-                        __log.error(\"Don't know how to migrate from \" + version + \" to \" + CURRENT_SCHEMA_VERSION + \", aborting\");\n-                        return false;\n+                        __log.error(\"Don't know how to migrate from \" + version + \" to \" + CURRENT_SCHEMA_VERSION\n+                                  + \", aborting\");\n+                         return false;\n                     } else {\n                         boolean success = true;\n                         for (Migration mig : migrations) {\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}