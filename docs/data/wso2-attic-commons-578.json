{
    "project_name": "wso2-attic-commons",
    "error_id": "578",
    "information": {
        "errors": [
            {
                "line": "115",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 146).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                final Node variableNode = _ectx.readVariable(variable, part);\n                if (variableNode == null)\n                    throw new FaultException(variable.getOwner().constants.qnSelectionFailure, \"Unknown variable \" + variableName.getLocalPart());\n                if (_ectx.narrowTypes()) {\n                    if (variable.type instanceof OXsdTypeVarType && ((OXsdTypeVarType) variable.type).simple)\n                        return getSimpleContent(variableNode, ((OXsdTypeVarType) variable.type).xsdType);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/578/JaxpVariableResolver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/578/JaxpVariableResolver.java\nindex ced70f22de6..73f6a14c711 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/578/JaxpVariableResolver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/578/JaxpVariableResolver.java\n@@ -112,8 +112,9 @@ public class JaxpVariableResolver implements XPathVariableResolver {\n             try {\n                 final Node variableNode = _ectx.readVariable(variable, part);\n                 if (variableNode == null)\n-                    throw new FaultException(variable.getOwner().constants.qnSelectionFailure, \"Unknown variable \" + variableName.getLocalPart());\n-                if (_ectx.narrowTypes()) {\n+                    throw new FaultException(variable.getOwner().constants.qnSelectionFailure,\n+                                        \"Unknown variable \" + variableName.getLocalPart());\n+                 if (_ectx.narrowTypes()) {\n                     if (variable.type instanceof OXsdTypeVarType && ((OXsdTypeVarType) variable.type).simple)\n                         return getSimpleContent(variableNode, ((OXsdTypeVarType) variable.type).xsdType);\n                     if (part != null && part.type instanceof OXsdTypeVarType && ((OXsdTypeVarType) part.type).simple)\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/578/JaxpVariableResolver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/578/JaxpVariableResolver.java\nindex ced70f22de6..53edcbd176f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/578/JaxpVariableResolver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/578/JaxpVariableResolver.java\n@@ -53,117 +53,121 @@ import org.w3c.dom.Node;\n  */\n public class JaxpVariableResolver implements XPathVariableResolver {\n \n-    private static final Log __log = LogFactory.getLog(JaxpVariableResolver.class);\n+  private static final Log __log = LogFactory.getLog(JaxpVariableResolver.class);\n \n-    private EvaluationContext _ectx;\n-    private OXPath10ExpressionBPEL20 _oxpath;\n-    private Configuration _config;\n+  private EvaluationContext _ectx;\n+  private OXPath10ExpressionBPEL20 _oxpath;\n+  private Configuration _config;\n \n-    public JaxpVariableResolver(EvaluationContext ectx, OXPath10ExpressionBPEL20 oxpath, Configuration config) {\n-        _ectx = ectx;\n-        _oxpath = oxpath;\n-        _config = config;\n+  public JaxpVariableResolver(EvaluationContext ectx, OXPath10ExpressionBPEL20 oxpath, Configuration config) {\n+    _ectx = ectx;\n+    _oxpath = oxpath;\n+    _config = config;\n+  }\n+\n+  public Object resolveVariable(QName variableName) {\n+    if (__log.isDebugEnabled()) {\n+      __log.debug(\"Resolving variable \" + variableName);\n     }\n \n-    public Object resolveVariable(QName variableName) {\n-        if (__log.isDebugEnabled()) {\n-            __log.debug(\"Resolving variable \" + variableName);\n-        }\n+    if (!(_oxpath instanceof OXPath10ExpressionBPEL20)) {\n+      throw new IllegalStateException(\"XPath variables not supported for bpel 1.1\");\n+    }\n \n-        if (!(_oxpath instanceof OXPath10ExpressionBPEL20)) {\n-            throw new IllegalStateException(\"XPath variables not supported for bpel 1.1\");\n-        }\n+    // Custom variables\n+    if (variableName.getNamespaceURI().equals(Namespaces.ODE_EXTENSION_NS)) {\n+      if (\"pid\".equals(variableName.getLocalPart())) {\n+        return _ectx.getProcessId();\n+      } else if (\"processQName\".equals(variableName.getLocalPart())) {\n+        return _ectx.getProcessQName();\n+      }\n+      if (\"currentEventDateTime\".equals(variableName.getLocalPart())) {\n+        return _ectx.getCurrentEventDateTime();\n+      }\n+    }\n \n-        // Custom variables\n-        if (variableName.getNamespaceURI().equals(Namespaces.ODE_EXTENSION_NS)) {\n-            if (\"pid\".equals(variableName.getLocalPart())) {\n-                return _ectx.getProcessId();\n-            } else if (\"processQName\".equals(variableName.getLocalPart())) {\n-                return _ectx.getProcessQName();\n-            }\n-            if (\"currentEventDateTime\".equals(variableName.getLocalPart())) {\n-                return _ectx.getCurrentEventDateTime();\n-            }\n+    OXPath10ExpressionBPEL20 expr = _oxpath;\n+    if (expr.isJoinExpression) {\n+      OLink olink = _oxpath.links.get(variableName.getLocalPart());\n+\n+      try {\n+        return _ectx.isLinkActive(olink) ? Boolean.TRUE : Boolean.FALSE;\n+      } catch (FaultException e) {\n+        throw new WrappedResolverException(e);\n+      }\n+    } else {\n+      String varName;\n+      String partName;\n+      int dotloc = variableName.getLocalPart().indexOf('.');\n+      if (dotloc == -1) {\n+        varName = variableName.getLocalPart();\n+        partName = null;\n+      } else {\n+        varName = variableName.getLocalPart().substring(0, dotloc);\n+        partName = variableName.getLocalPart().substring(dotloc + 1);\n+      }\n+      OScope.Variable variable = _oxpath.vars.get(varName);\n+      OMessageVarType.Part part = partName == null ? null : ((OMessageVarType) variable.type).parts.get(partName);\n+\n+      try {\n+        final Node variableNode = _ectx.readVariable(variable, part);\n+        if (variableNode == null) {\n+          throw new FaultException(variable.getOwner().constants.qnSelectionFailure,\n+            \"Unknown variable \" + variableName.getLocalPart());\n         }\n-\n-        OXPath10ExpressionBPEL20 expr = _oxpath;\n-        if (expr.isJoinExpression) {\n-            OLink olink = _oxpath.links.get(variableName.getLocalPart());\n-\n-            try {\n-                return _ectx.isLinkActive(olink) ? Boolean.TRUE : Boolean.FALSE;\n-            } catch (FaultException e) {\n-                throw new WrappedResolverException(e);\n-            }\n-        } else {\n-            String varName;\n-            String partName;\n-            int dotloc = variableName.getLocalPart().indexOf('.');\n-            if (dotloc == -1) {\n-                varName = variableName.getLocalPart();\n-                partName = null;\n-            } else {\n-                varName = variableName.getLocalPart().substring(0, dotloc);\n-                partName = variableName.getLocalPart().substring(dotloc + 1);\n-            }\n-            OScope.Variable variable = _oxpath.vars.get(varName);\n-            OMessageVarType.Part part = partName == null ? null : ((OMessageVarType) variable.type).parts.get(partName);\n-\n-            try {\n-                final Node variableNode = _ectx.readVariable(variable, part);\n-                if (variableNode == null)\n-                    throw new FaultException(variable.getOwner().constants.qnSelectionFailure, \"Unknown variable \" + variableName.getLocalPart());\n-                if (_ectx.narrowTypes()) {\n-                    if (variable.type instanceof OXsdTypeVarType && ((OXsdTypeVarType) variable.type).simple)\n-                        return getSimpleContent(variableNode, ((OXsdTypeVarType) variable.type).xsdType);\n-                    if (part != null && part.type instanceof OXsdTypeVarType && ((OXsdTypeVarType) part.type).simple)\n-                        return getSimpleContent(variableNode, ((OXsdTypeVarType) part.type).xsdType);\n-                }\n-\n-                // Saxon used to expect a node list, but now a regular node will suffice.\n-                return variableNode;\n-            } catch (FaultException e) {\n-                throw new WrappedResolverException(e);\n-            }\n+        if (_ectx.narrowTypes()) {\n+          if (variable.type instanceof OXsdTypeVarType && ((OXsdTypeVarType) variable.type).simple) {\n+            return getSimpleContent(variableNode, ((OXsdTypeVarType) variable.type).xsdType);\n+          }\n+          if (part != null && part.type instanceof OXsdTypeVarType && ((OXsdTypeVarType) part.type).simple) {\n+            return getSimpleContent(variableNode, ((OXsdTypeVarType) part.type).xsdType);\n+          }\n         }\n-    }\n \n-    public Value convertSimpleTypeToSaxon(QName type, String value) {\n-        int fp = _config.getNamePool().allocate(\"\", type.getNamespaceURI(), type.getLocalPart());\n-        SchemaType type2 = _config.getSchemaType(fp);\n-        if (type2 == null || !type2.isAtomicType()) {\n-            __log.warn(\"Can't find simple type \" + type + \" value \" + value + \" result: \" + null);\n-            return null;\n-        } else {\n-            try {\n-\t\t//TODO this is an ugly hack to remove decimal points from an int\n-                if (type2.equals(BuiltInAtomicType.INT)) {\n-                    if (value.indexOf(\".\") != -1) {\n-                        value = value.substring(0, value.indexOf(\".\"));\n-                    }\n-                }\n-\n-                AtomicValue tmpVal = StringConverter.STRING_TO_STRING.convertString(value).asAtomic();\n-                AtomicValue value2 = StringConverter.convert(tmpVal,(AtomicType) type2, new ConversionRules());\n-\n-\n-                if (__log.isDebugEnabled()) {\n-                    __log.debug(\"converting \" + type + \" value \" + value + \" result: \" + value2);\n-                }\n-                return value2;\n-            } catch (ValidationException e) {\n-                __log.debug(\"Can't convert \" + value + \" to \" + type + \" returning empty sequence\");\n-                return EmptySequence.getInstance();\n-            }\n-        }\n+        // Saxon used to expect a node list, but now a regular node will suffice.\n+        return variableNode;\n+      } catch (FaultException e) {\n+        throw new WrappedResolverException(e);\n+      }\n     }\n+  }\n+\n+  public Value convertSimpleTypeToSaxon(QName type, String value) {\n+    int fp = _config.getNamePool().allocate(\"\", type.getNamespaceURI(), type.getLocalPart());\n+    SchemaType type2 = _config.getSchemaType(fp);\n+    if (type2 == null || !type2.isAtomicType()) {\n+      __log.warn(\"Can't find simple type \" + type + \" value \" + value + \" result: \" + null);\n+      return null;\n+    } else {\n+      try {\n+        //TODO this is an ugly hack to remove decimal points from an int\n+        if (type2.equals(BuiltInAtomicType.INT)) {\n+          if (value.indexOf(\".\") != -1) {\n+            value = value.substring(0, value.indexOf(\".\"));\n+          }\n+        }\n+\n+        AtomicValue tmpVal = StringConverter.STRING_TO_STRING.convertString(value).asAtomic();\n+        AtomicValue value2 = StringConverter.convert(tmpVal, (AtomicType) type2, new ConversionRules());\n+\n \n-    public Object getSimpleContent(Node simpleNode, QName type) {\n-        String text = simpleNode.getTextContent();\n-        Object o = convertSimpleTypeToSaxon(type, text);\n         if (__log.isDebugEnabled()) {\n-            __log.debug(\"getSimpleContent for \" + DOMUtils.domToString(simpleNode) + \" \" + type + \" returned \" + o);\n+          __log.debug(\"converting \" + type + \" value \" + value + \" result: \" + value2);\n         }\n-        return o;\n+        return value2;\n+      } catch (ValidationException e) {\n+        __log.debug(\"Can't convert \" + value + \" to \" + type + \" returning empty sequence\");\n+        return EmptySequence.getInstance();\n+      }\n+    }\n+  }\n+\n+  public Object getSimpleContent(Node simpleNode, QName type) {\n+    String text = simpleNode.getTextContent();\n+    Object o = convertSimpleTypeToSaxon(type, text);\n+    if (__log.isDebugEnabled()) {\n+      __log.debug(\"getSimpleContent for \" + DOMUtils.domToString(simpleNode) + \" \" + type + \" returned \" + o);\n     }\n+    return o;\n+  }\n }\n",
            "diff_size": 164
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "115",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/578/JaxpVariableResolver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/578/JaxpVariableResolver.java\nindex ced70f22de6..73f6a14c711 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/578/JaxpVariableResolver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/578/JaxpVariableResolver.java\n@@ -112,8 +112,9 @@ public class JaxpVariableResolver implements XPathVariableResolver {\n             try {\n                 final Node variableNode = _ectx.readVariable(variable, part);\n                 if (variableNode == null)\n-                    throw new FaultException(variable.getOwner().constants.qnSelectionFailure, \"Unknown variable \" + variableName.getLocalPart());\n-                if (_ectx.narrowTypes()) {\n+                    throw new FaultException(variable.getOwner().constants.qnSelectionFailure,\n+                                        \"Unknown variable \" + variableName.getLocalPart());\n+                 if (_ectx.narrowTypes()) {\n                     if (variable.type instanceof OXsdTypeVarType && ((OXsdTypeVarType) variable.type).simple)\n                         return getSimpleContent(variableNode, ((OXsdTypeVarType) variable.type).xsdType);\n                     if (part != null && part.type instanceof OXsdTypeVarType && ((OXsdTypeVarType) part.type).simple)\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}