{
    "project_name": "neo4j-neo4j",
    "error_id": "2842",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "41",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "157",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "112",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "149",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "149",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "127",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "119",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2842/FromPaths.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2842/FromPaths.java\nindex 49e1c41f2c7..ce24cfedbbd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2842/FromPaths.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2842/FromPaths.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.configuration.helpers;\n \n import org.apache.commons.lang3.StringUtils;\n@@ -37,10 +38,10 @@ public class FromPaths\n     private final Set<Path> paths;\n     private final FileSystemAbstraction fs = new DefaultFileSystemAbstraction();\n \n-    public FromPaths( String value )\n+    public FromPaths(String value)\n     {\n-        validateNotEmpty( value );\n-        this.paths = buildPaths( value );\n+        validateNotEmpty(value);\n+        this.paths = buildPaths(value);\n     }\n \n     public boolean isSingle()\n@@ -53,91 +54,89 @@ public class FromPaths\n         return paths;\n     }\n \n-    private Set<Path> getAllFolders( Path path )\n+    private Set<Path> getAllFolders(Path path)\n     {\n-        return Arrays.stream( fs.listFiles( path ) )\n-                     .filter( Files::isDirectory )\n-                     .collect( Collectors.toSet() );\n+        return Arrays.stream(fs.listFiles(path))\n+          .filter(Files::isDirectory)\n+          .collect(Collectors.toSet());\n     }\n \n-    private Set<Path> buildPaths( String value )\n+    private Set<Path> buildPaths(String value)\n     {\n-        final var tokens = value.split( \",\" );\n-        return Arrays.stream( tokens )\n-                     .map( String::trim )\n-                     .filter( t -> !t.isEmpty() )\n-                     .map( path -> new File( path ).getAbsoluteFile() ) // Path class can't be used because Path can't be created with regex for some\n-                     // file systems\n-                     .peek( file ->\n-                            {\n-                                validateParentPath( file ); //Path class can't contain regex in the subpath\n-                                validateLastSubPath( file );\n-                            } )\n-                     .flatMap( file -> getAndFilterPaths( file ).stream() )\n-                     .collect( Collectors.toSet() );\n+        final var tokens = value.split(\",\");\n+        return Arrays.stream(tokens)\n+          .map(String::trim)\n+          .filter(t -> !t.isEmpty())\n+          .map(path -> new File(path).getAbsoluteFile()) // Path class can't be used because Path can't be created with regex for some\n+          // file systems\n+          .peek(file ->\n+          {\n+              validateParentPath(file); //Path class can't contain regex in the subpath\n+              validateLastSubPath(file);\n+          })\n+          .flatMap(file -> getAndFilterPaths(file).stream())\n+          .collect(Collectors.toSet());\n     }\n \n-    private Set<Path> getAndFilterPaths( File file )\n+    private Set<Path> getAndFilterPaths(File file)\n     {\n         final var parent = file.getParent(); //not null, protect by validateParentPath\n-        final var pattern = new DatabaseNamePattern( file.getName() );\n-        if ( !pattern.containsPattern() )\n+        final var pattern = new DatabaseNamePattern(file.getName());\n+        if (!pattern.containsPattern())\n         {\n-            return Set.of( Path.of( file.toString() ) );\n+            return Set.of(Path.of(file.toString()));\n         }\n \n-        return getAllFolders( Path.of( parent ) ).stream()\n-                                                 .filter( path ->\n-                                                          {\n-                                                              final var name = path.getName( path.getNameCount() - 1 );\n-                                                              return pattern.matches( name.toString() );\n-                                                          } )\n-                                                 .collect( Collectors.toSet() );\n+        return getAllFolders(Path.of(parent)).stream()\n+          .filter(path ->\n+          {\n+              final var name = path.getName(path.getNameCount() - 1);\n+              return pattern.matches(name.toString());\n+          })\n+          .collect(Collectors.toSet());\n     }\n \n-    private void validateParentPath( File file )\n+    private void validateParentPath(File file)\n     {\n         final var parentPath = file.getParent();\n-        if ( parentPath != null && !parentPath.trim().isEmpty() )\n+        if (parentPath != null && !parentPath.trim().isEmpty())\n         {\n-            final var asterisks = StringUtils.countMatches( parentPath, '*' );\n-            final var questionMarks = StringUtils.countMatches( parentPath, '?' );\n-            if ( asterisks > 0 || questionMarks > 0 )\n+            final var asterisks = StringUtils.countMatches(parentPath, '*');\n+            final var questionMarks = StringUtils.countMatches(parentPath, '?');\n+            if (asterisks > 0 || questionMarks > 0)\n             {\n-                throw new IllegalArgumentException( file.getAbsolutePath() + \" is illegal. Asterisks and question marks should be placed in the last subpath\" );\n+                throw new IllegalArgumentException(file.getAbsolutePath() + \" is illegal. Asterisks and question marks should be placed in the last subpath\");\n             }\n-        }\n-        else\n+        } else\n         {\n-            throw new IllegalArgumentException( \"From path with value=\" + file.getAbsolutePath() + \" should not point to the root of the file system\" );\n+            throw new IllegalArgumentException(\"From path with value=\" + file.getAbsolutePath() + \" should not point to the root of the file system\");\n         }\n     }\n \n-    private void validateLastSubPath( File file )\n+    private void validateLastSubPath(File file)\n     {\n-        if ( file.getParent() == null || Path.of( file.getParent() ).getNameCount() == 0 )\n+        if (file.getParent() == null || Path.of(file.getParent()).getNameCount() == 0)\n         {\n-            throw new IllegalArgumentException( \"From path with value=\" + file.getAbsolutePath() + \" should not point to the root of the file system\" );\n+            throw new IllegalArgumentException(\"From path with value=\" + file.getAbsolutePath() + \" should not point to the root of the file system\");\n         }\n \n         final var lastSubPath = file.getName();\n         try\n         {\n-            new DatabaseNamePattern( lastSubPath );\n-        }\n-        catch ( IllegalArgumentException ex )\n+            new DatabaseNamePattern(lastSubPath);\n+        } catch (IllegalArgumentException ex)\n         {\n-            throw new IllegalArgumentException( \"Last path of \" + file.getAbsolutePath() + \" is in illegal format.\", ex );\n+            throw new IllegalArgumentException(\"Last path of \" + file.getAbsolutePath() + \" is in illegal format.\", ex);\n         }\n     }\n \n-    private void validateNotEmpty( String path )\n+    private void validateNotEmpty(String path)\n     {\n-        Objects.requireNonNull( path, \"The provided from parameter is empty.\" );\n+        Objects.requireNonNull(path, \"The provided from parameter is empty.\");\n \n-        if ( path.trim().isEmpty() )\n+        if (path.trim().isEmpty())\n         {\n-            throw new IllegalArgumentException( \"The provided from parameter is empty.\" );\n+            throw new IllegalArgumentException(\"The provided from parameter is empty.\");\n         }\n     }\n }\n",
            "diff_size": 53
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2842/FromPaths.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/2842/FromPaths.java\nindex 49e1c41f2c7..cf72d8fd5b9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2842/FromPaths.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/2842/FromPaths.java\n@@ -86,8 +86,7 @@ public class FromPaths\n             return Set.of( Path.of( file.toString() ) );\n         }\n \n-        return getAllFolders( Path.of( parent ) ).stream()\n-                                                 .filter( path ->\n+        return getAllFolders( Path.of( parent ) ).stream().filter( path ->\n                                                           {\n                                                               final var name = path.getName( path.getNameCount() - 1 );\n                                                               return pattern.matches( name.toString() );\n@@ -140,4 +139,4 @@ public class FromPaths\n             throw new IllegalArgumentException( \"The provided from parameter is empty.\" );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}