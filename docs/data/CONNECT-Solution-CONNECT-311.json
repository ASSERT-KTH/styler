{
    "project_name": "CONNECT-Solution-CONNECT",
    "error_id": "311",
    "information": {
        "errors": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.messaging.builder.impl;\n\nimport gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\nimport gov.hhs.fha.nhinc.common.nhinccommon.CeType;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/311/AssertionBuilderImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/311/AssertionBuilderImpl.java\nindex 47543aef096..cb87aa4e292 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/311/AssertionBuilderImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/311/AssertionBuilderImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.messaging.builder.impl;\n \n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/311/AssertionBuilderImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/311/AssertionBuilderImpl.java\nindex 47543aef096..5fa9633866e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/311/AssertionBuilderImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/311/AssertionBuilderImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.messaging.builder.impl;\n \n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n@@ -46,66 +47,66 @@ import org.slf4j.LoggerFactory;\n  */\n public class AssertionBuilderImpl extends AbstractAssertionBuilder implements AssertionBuilder {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(AssertionBuilderImpl.class);\n+  private static final Logger LOG = LoggerFactory.getLogger(AssertionBuilderImpl.class);\n \n-    @Override\n-    public void build() {\n-        super.build();\n-        assertionType = new AssertionType();\n-        // building UserInfo assertion\n-        if (StringUtils.isBlank(userName)) {\n-            throw new IllegalArgumentException(\"User Name is required.\");\n-        }\n+  @Override\n+  public void build() {\n+    super.build();\n+    assertionType = new AssertionType();\n+    // building UserInfo assertion\n+    if (StringUtils.isBlank(userName)) {\n+      throw new IllegalArgumentException(\"User Name is required.\");\n+    }\n \n-        UserType userInfo = new UserType();\n-        userInfo.setUserName(userName);\n+    UserType userInfo = new UserType();\n+    userInfo.setUserName(userName);\n \n-        PersonNameType personName = new PersonNameType();\n-        personName.setGivenName(userFirstName);\n-        personName.setFamilyName(userLastName);\n-        personName.setSecondNameOrInitials(userMiddleName);\n-        userInfo.setPersonName(personName);\n+    PersonNameType personName = new PersonNameType();\n+    personName.setGivenName(userFirstName);\n+    personName.setFamilyName(userLastName);\n+    personName.setSecondNameOrInitials(userMiddleName);\n+    userInfo.setPersonName(personName);\n \n-        // User organization attribute statement\n-        if (StringUtils.isBlank(userOrganization)) {\n-            throw new IllegalArgumentException(\"User Organization is required.\");\n-        }\n-        HomeCommunityType homeCommunity = new HomeCommunityType();\n-        homeCommunity.setName(userOrganization);\n-        userInfo.setOrg(homeCommunity);\n+    // User organization attribute statement\n+    if (StringUtils.isBlank(userOrganization)) {\n+      throw new IllegalArgumentException(\"User Organization is required.\");\n+    }\n+    HomeCommunityType homeCommunity = new HomeCommunityType();\n+    homeCommunity.setName(userOrganization);\n+    userInfo.setOrg(homeCommunity);\n \n-        // User role\n-        if (StringUtils.isBlank(userCode) || StringUtils.isBlank(userSystem) || StringUtils.isBlank(userSystemName)\n-                || StringUtils.isBlank(userDisplay)) {\n-            CeType userRole = new CeType();\n-            userRole.setCode(userCode);\n-            userRole.setCodeSystem(userSystem);\n-            userRole.setCodeSystemName(userSystemName);\n-            userRole.setDisplayName(userDisplay);\n-            userInfo.setRoleCoded(userRole);\n-        }\n-        assertionType.setUserInfo(userInfo);\n-        // end UserInfo Assertion\n+    // User role\n+    if (StringUtils.isBlank(userCode) || StringUtils.isBlank(userSystem) || StringUtils.isBlank(userSystemName)\n+        || StringUtils.isBlank(userDisplay)) {\n+      CeType userRole = new CeType();\n+      userRole.setCode(userCode);\n+      userRole.setCodeSystem(userSystem);\n+      userRole.setCodeSystemName(userSystemName);\n+      userRole.setDisplayName(userDisplay);\n+      userInfo.setRoleCoded(userRole);\n+    }\n+    assertionType.setUserInfo(userInfo);\n+    // end UserInfo Assertion\n \n-        // building purposeCoded assertion\n-        CeType purposeCoded = new CeType();\n-        purposeCoded.setCode(purposeCode);\n-        purposeCoded.setCodeSystem(purposeCodeSystem);\n-        purposeCoded.setCodeSystemName(purposeCodeSystemName);\n-        purposeCoded.setDisplayName(purposeDisplayName);\n-        assertionType.setPurposeOfDisclosureCoded(purposeCoded);\n-        // end purposeCoded assertion\n+    // building purposeCoded assertion\n+    CeType purposeCoded = new CeType();\n+    purposeCoded.setCode(purposeCode);\n+    purposeCoded.setCodeSystem(purposeCodeSystem);\n+    purposeCoded.setCodeSystemName(purposeCodeSystemName);\n+    purposeCoded.setDisplayName(purposeDisplayName);\n+    assertionType.setPurposeOfDisclosureCoded(purposeCoded);\n+    // end purposeCoded assertion\n \n-        // authentication instant\n-        SamlAuthnStatementType authnStatement = new SamlAuthnStatementType();\n-        authnStatement.setAuthInstant(samlAuthInstant);\n-        authnStatement.setAuthContextClassRef(samlAuthClass);\n-        assertionType.setSamlAuthnStatement(authnStatement);\n-    }\n+    // authentication instant\n+    SamlAuthnStatementType authnStatement = new SamlAuthnStatementType();\n+    authnStatement.setAuthInstant(samlAuthInstant);\n+    authnStatement.setAuthContextClassRef(samlAuthClass);\n+    assertionType.setSamlAuthnStatement(authnStatement);\n+  }\n \n-    @Override\n-    public AssertionType getAssertion() {\n-        return assertionType;\n-    }\n+  @Override\n+  public AssertionType getAssertion() {\n+    return assertionType;\n+  }\n \n }\n",
            "diff_size": 54
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 153).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "79",
                    "column": "116",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/311/AssertionBuilderImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/311/AssertionBuilderImpl.java\nindex 47543aef096..6d49dd49acd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/311/AssertionBuilderImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/311/AssertionBuilderImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.messaging.builder.impl;\n \n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n@@ -75,8 +76,7 @@ public class AssertionBuilderImpl extends AbstractAssertionBuilder implements As\n         userInfo.setOrg(homeCommunity);\n \n         // User role\n-        if (StringUtils.isBlank(userCode) || StringUtils.isBlank(userSystem) || StringUtils.isBlank(userSystemName)\n-                || StringUtils.isBlank(userDisplay)) {\n+        if (StringUtils.isBlank(userCode) || StringUtils.isBlank(userSystem) || StringUtils.isBlank(userSystemName)|| StringUtils.isBlank(userDisplay)) {\n             CeType userRole = new CeType();\n             userRole.setCode(userCode);\n             userRole.setCodeSystem(userSystem);\n@@ -108,4 +108,4 @@ public class AssertionBuilderImpl extends AbstractAssertionBuilder implements As\n         return assertionType;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "80",
                    "column": "42",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "80",
                    "column": "42",
                    "severity": "error",
                    "message": "'||' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                },
                {
                    "line": "81",
                    "column": "48",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "81",
                    "column": "48",
                    "severity": "error",
                    "message": "'||' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                },
                {
                    "line": "82",
                    "column": "52",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "82",
                    "column": "52",
                    "severity": "error",
                    "message": "'||' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/311/AssertionBuilderImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/311/AssertionBuilderImpl.java\nindex 47543aef096..864cc93e518 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/311/AssertionBuilderImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/311/AssertionBuilderImpl.java\n@@ -44,10 +44,14 @@ import org.slf4j.LoggerFactory;\n  *\n  * @author tjafri\n  */\n-public class AssertionBuilderImpl extends AbstractAssertionBuilder implements AssertionBuilder {\n+\n+\n+public class AssertionBuilderImpl extends\n+    AbstractAssertionBuilder implements AssertionBuilder {\n \n     private static final Logger LOG = LoggerFactory.getLogger(AssertionBuilderImpl.class);\n \n+\n     @Override\n     public void build() {\n         super.build();\n@@ -56,10 +60,8 @@ public class AssertionBuilderImpl extends AbstractAssertionBuilder implements As\n         if (StringUtils.isBlank(userName)) {\n             throw new IllegalArgumentException(\"User Name is required.\");\n         }\n-\n         UserType userInfo = new UserType();\n         userInfo.setUserName(userName);\n-\n         PersonNameType personName = new PersonNameType();\n         personName.setGivenName(userFirstName);\n         personName.setFamilyName(userLastName);\n@@ -75,8 +77,10 @@ public class AssertionBuilderImpl extends AbstractAssertionBuilder implements As\n         userInfo.setOrg(homeCommunity);\n \n         // User role\n-        if (StringUtils.isBlank(userCode) || StringUtils.isBlank(userSystem) || StringUtils.isBlank(userSystemName)\n-                || StringUtils.isBlank(userDisplay)) {\n+        if (StringUtils.isBlank(userCode)||\n+                StringUtils.isBlank(userSystem)||\n+                StringUtils.isBlank(userSystemName)||\n+            StringUtils.isBlank(userDisplay)) {\n             CeType userRole = new CeType();\n             userRole.setCode(userCode);\n             userRole.setCodeSystem(userSystem);\n@@ -103,9 +107,10 @@ public class AssertionBuilderImpl extends AbstractAssertionBuilder implements As\n         assertionType.setSamlAuthnStatement(authnStatement);\n     }\n \n+\n     @Override\n     public AssertionType getAssertion() {\n         return assertionType;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "28",
                    "severity": "error",
                    "message": "'import' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/311/AssertionBuilderImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_random/311/AssertionBuilderImpl.java\nindex 47543aef096..cc13f93e203 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/311/AssertionBuilderImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_random/311/AssertionBuilderImpl.java\n@@ -25,7 +25,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n package gov.hhs.fha.nhinc.messaging.builder.impl;\n-\n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n import gov.hhs.fha.nhinc.common.nhinccommon.CeType;\n import gov.hhs.fha.nhinc.common.nhinccommon.HomeCommunityType;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/311/AssertionBuilderImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/311/AssertionBuilderImpl.java\nindex 47543aef096..cb87aa4e292 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/311/AssertionBuilderImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/311/AssertionBuilderImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.messaging.builder.impl;\n \n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}