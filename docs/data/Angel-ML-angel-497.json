{
    "project_name": "Angel-ML-angel",
    "error_id": "497",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/497/RequestConverter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/497/RequestConverter.java\nindex 55fdc9e5549..ce18f317fa4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/497/RequestConverter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/497/RequestConverter.java\n@@ -13,6 +13,7 @@\n  * either express or implied. See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.tencent.angel.protobuf;\n \n import com.tencent.angel.PartitionKey;\n@@ -44,7 +45,8 @@ public final class RequestConverter {\n \n   private static final Log LOG = LogFactory.getLog(RequestConverter.class);\n \n-  private RequestConverter() {}\n+  private RequestConverter() {\n+  }\n \n   public static Partition buildPartition(int matrixId, PartitionKey part) {\n     Partition.Builder partitionBuilder = Partition.newBuilder();\n@@ -93,7 +95,7 @@ public final class RequestConverter {\n \n   private static TaskStateProto buildTaskReport(TaskId taskId, Task task) {\n     TaskStateProto.Builder builder = TaskStateProto.newBuilder();\n-    if(!PSAgentContext.get().syncClockEnable()) {\n+    if (!PSAgentContext.get().syncClockEnable()) {\n       builder.setIteration(task.getTaskContext().getEpoch());\n       Map<Integer, AtomicInteger> matrixClocks = task.getTaskContext().getMatrixClocks();\n       MatrixClock.Builder clockBuilder = MatrixClock.newBuilder();\n@@ -118,7 +120,7 @@ public final class RequestConverter {\n   }\n \n   public static CreateMatricesRequest buildCreateMatricesRequest(\n-      List<MatrixProto> matrixList)  {\n+      List<MatrixProto> matrixList) {\n     CreateMatricesRequest.Builder createMatricesReqBuilder =\n         CreateMatricesRequest.newBuilder();\n     if (matrixList != null) {\n",
            "diff_size": 5
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/497/RequestConverter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/497/RequestConverter.java\nindex 55fdc9e5549..2c1edcdb20b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/497/RequestConverter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/497/RequestConverter.java\n@@ -117,11 +117,10 @@ public final class RequestConverter {\n     return builder.build();\n   }\n \n-  public static CreateMatricesRequest buildCreateMatricesRequest(\n-      List<MatrixProto> matrixList)  {\n-    CreateMatricesRequest.Builder createMatricesReqBuilder =\n+  public static CreateMatricesRequest buildCreateMatricesRequest(List<MatrixProto> matrixList) {\n+  CreateMatricesRequest.Builder createMatricesReqBuilder =\n         CreateMatricesRequest.newBuilder();\n-    if (matrixList != null) {\n+if (matrixList != null) {\n       for (MatrixProto matrixProto : matrixList) {\n         createMatricesReqBuilder.addMatrices(matrixProto);\n       }\n@@ -129,4 +128,4 @@ public final class RequestConverter {\n \n     return createMatricesReqBuilder.build();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "99",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/497/RequestConverter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/497/RequestConverter.java\nindex 55fdc9e5549..18a83f1213a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/497/RequestConverter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/497/RequestConverter.java\n@@ -29,7 +29,6 @@ import com.tencent.angel.worker.task.Task;\n import com.tencent.angel.worker.task.TaskId;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-\n import java.util.List;\n import java.util.Map;\n import java.util.Map.Entry;\n@@ -40,6 +39,7 @@ import java.util.concurrent.atomic.AtomicLong;\n  * Helper utility to build protocol buffer requests, or build components for protocol buffer\n  * requests.\n  */\n+\n public final class RequestConverter {\n \n   private static final Log LOG = LogFactory.getLog(RequestConverter.class);\n@@ -63,6 +63,7 @@ public final class RequestConverter {\n     if (!worker.isWorkerInitFinished()) {\n       return builder.build();\n     }\n+\n     Map<TaskId, Task> tasks = worker.getTaskManager().getRunningTask();\n     if (tasks != null && !tasks.isEmpty()) {\n       for (Entry<TaskId, Task> entry : tasks.entrySet()) {\n@@ -71,7 +72,6 @@ public final class RequestConverter {\n     }\n \n     Pair.Builder kvBuilder = Pair.newBuilder();\n-\n     Map<String, String> props = worker.getMetrics();\n     for (Entry<String, String> kv : props.entrySet()) {\n       kvBuilder.setKey(kv.getKey());\n@@ -86,27 +86,22 @@ public final class RequestConverter {\n       kvBuilder.setValue(kv.getValue());\n       builder.addPairs(kvBuilder.build());\n     }\n-\n     return builder.build();\n   }\n \n-\n   private static TaskStateProto buildTaskReport(TaskId taskId, Task task) {\n     TaskStateProto.Builder builder = TaskStateProto.newBuilder();\n-    if(!PSAgentContext.get().syncClockEnable()) {\n+    if (!PSAgentContext.get().syncClockEnable()) {\n       builder.setIteration(task.getTaskContext().getEpoch());\n       Map<Integer, AtomicInteger> matrixClocks = task.getTaskContext().getMatrixClocks();\n       MatrixClock.Builder clockBuilder = MatrixClock.newBuilder();\n       for (Entry<Integer, AtomicInteger> clockEntry : matrixClocks.entrySet()) {\n-        builder.addMatrixClocks(clockBuilder.setMatrixId(clockEntry.getKey())\n-            .setClock(clockEntry.getValue().get()).build());\n+        builder.addMatrixClocks(clockBuilder.setMatrixId(clockEntry.getKey()).setClock(clockEntry.getValue().get()).build());\n       }\n     }\n-\n     builder.setProgress(task.getProgress());\n     builder.setState(task.getTaskState().toString());\n     builder.setTaskId(ProtobufUtil.convertToIdProto(taskId));\n-\n     Pair.Builder kvBuilder = Pair.newBuilder();\n     Map<String, AtomicLong> taskCounters = task.getTaskContext().getCounters();\n     for (Entry<String, AtomicLong> kv : taskCounters.entrySet()) {\n@@ -117,16 +112,14 @@ public final class RequestConverter {\n     return builder.build();\n   }\n \n-  public static CreateMatricesRequest buildCreateMatricesRequest(\n-      List<MatrixProto> matrixList)  {\n-    CreateMatricesRequest.Builder createMatricesReqBuilder =\n-        CreateMatricesRequest.newBuilder();\n+  public static CreateMatricesRequest buildCreateMatricesRequest(List<MatrixProto> matrixList) {\n+    CreateMatricesRequest.Builder createMatricesReqBuilder = CreateMatricesRequest.newBuilder();\n     if (matrixList != null) {\n       for (MatrixProto matrixProto : matrixList) {\n         createMatricesReqBuilder.addMatrices(matrixProto);\n       }\n     }\n-\n     return createMatricesReqBuilder.build();\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}