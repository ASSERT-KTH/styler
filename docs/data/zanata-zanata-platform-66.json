{
    "project_name": "zanata-zanata-platform",
    "error_id": "66",
    "information": {
        "errors": [
            {
                "line": "116",
                "column": "23",
                "severity": "error",
                "message": "'=' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "        this.textFlowTargetDAO = textFlowTargetDAO;\n        this.localeServiceImpl = localeServiceImpl;\n        this.identity =identity;\n        this.reviewCriteriaDAO = reviewCriteriaDAO;\n        this.textFlowTargetReviewCommentsDAO = textFlowTargetReviewCommentsDAO;\n        this.authenticatedAccount = authenticatedAccount;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/66/TranslationReviewService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler/66/TranslationReviewService.java\nindex 84356f5b7c6..aaed4cb5b0c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/66/TranslationReviewService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler/66/TranslationReviewService.java\n@@ -113,7 +113,7 @@ public class TranslationReviewService implements TranslationReviewResource {\n \n         this.textFlowTargetDAO = textFlowTargetDAO;\n         this.localeServiceImpl = localeServiceImpl;\n-        this.identity =identity;\n+        this.identity = identity;\n         this.reviewCriteriaDAO = reviewCriteriaDAO;\n         this.textFlowTargetReviewCommentsDAO = textFlowTargetReviewCommentsDAO;\n         this.authenticatedAccount = authenticatedAccount;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/66/TranslationReviewService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/intellij/66/TranslationReviewService.java\nindex 84356f5b7c6..3db6a6da185 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/66/TranslationReviewService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/intellij/66/TranslationReviewService.java\n@@ -29,93 +29,93 @@ import javax.ws.rs.core.Response;\n @Path(TranslationReviewResource.SERVICE_PATH)\n @RequestScoped\n public class TranslationReviewService implements TranslationReviewResource {\n-    private static final org.slf4j.Logger log =\n-            org.slf4j.LoggerFactory.getLogger(TranslationReviewService.class);\n+  private static final org.slf4j.Logger log =\n+    org.slf4j.LoggerFactory.getLogger(TranslationReviewService.class);\n \n-    @Inject\n-    private TextFlowTargetDAO textFlowTargetDAO;\n-    @Inject\n-    private LocaleService localeServiceImpl;\n-    @Inject\n-    private ZanataIdentity identity;\n-    @Inject\n-    private ReviewCriteriaDAO reviewCriteriaDAO;\n-    @Authenticated\n-    @Inject\n-    private HAccount authenticatedAccount;\n-    @Inject\n-    private TextFlowTargetReviewCommentsDAO textFlowTargetReviewCommentsDAO;\n+  @Inject\n+  private TextFlowTargetDAO textFlowTargetDAO;\n+  @Inject\n+  private LocaleService localeServiceImpl;\n+  @Inject\n+  private ZanataIdentity identity;\n+  @Inject\n+  private ReviewCriteriaDAO reviewCriteriaDAO;\n+  @Authenticated\n+  @Inject\n+  private HAccount authenticatedAccount;\n+  @Inject\n+  private TextFlowTargetReviewCommentsDAO textFlowTargetReviewCommentsDAO;\n \n-    @Override\n-    public Response put(String localeId, @NotNull ReviewData data) {\n-        if (data == null) {\n-            return Response.status(\n-                    Response.Status.BAD_REQUEST)\n-                    .entity(Lists.newArrayList(\"data is invalid\"))\n-                    .build();\n-        }\n-        HLocale locale =\n-                localeServiceImpl.getByLocaleId(localeId);\n-        if (locale == null) {\n-            return Response.status(\n-                    Response.Status.BAD_REQUEST)\n-                    .entity(Lists.newArrayList(\"locale ID is invalid, or not found.\"))\n-                    .build();\n-        }\n-        HTextFlowTarget hTextFlowTarget = textFlowTargetDAO.getTextFlowTarget(\n-                data.getTransUnitId(), new LocaleId(localeId));\n-        if (hTextFlowTarget == null\n-                || hTextFlowTarget.getState().isUntranslated()) {\n-             return Response.status(\n-                     Response.Status.BAD_REQUEST)\n-                     .entity(Lists.newArrayList(\"comment on untranslated message is pointless!\"))\n-                     .build();\n-        }\n-        HProjectIteration projectIteration =\n-                hTextFlowTarget.getTextFlow().getDocument()\n-                        .getProjectIteration();\n-        HProject project = projectIteration.getProject();\n-        if (!projectIteration.isActive()) {\n-            return Response.status(\n-                    Response.Status.FORBIDDEN)\n-                    .entity(Lists.newArrayList(\"project or version is not active.\"))\n-                    .build();\n-        }\n-        identity.checkPermission(\"review-comment\", locale, project);\n-\n-        HTextFlowTargetReviewComment hComment;\n-        ReviewCriteria criteria = null;\n-        if (data.getReviewCriteriaId() != null) {\n-            ReviewCriterionId reviewId = new ReviewCriterionId(data.getReviewCriteriaId());\n-            criteria = reviewCriteriaDAO.findById(reviewId.getId());\n-        }\n-        hComment = hTextFlowTarget.addReview(authenticatedAccount.getPerson(), criteria, data.getComment());\n-        textFlowTargetReviewCommentsDAO.makePersistent(hComment);\n-        textFlowTargetReviewCommentsDAO.flush();\n-\n-        log.info(\"success\");\n-        return Response.ok(data).build();\n+  @Override\n+  public Response put(String localeId, @NotNull ReviewData data) {\n+    if (data == null) {\n+      return Response.status(\n+        Response.Status.BAD_REQUEST)\n+        .entity(Lists.newArrayList(\"data is invalid\"))\n+        .build();\n+    }\n+    HLocale locale =\n+      localeServiceImpl.getByLocaleId(localeId);\n+    if (locale == null) {\n+      return Response.status(\n+        Response.Status.BAD_REQUEST)\n+        .entity(Lists.newArrayList(\"locale ID is invalid, or not found.\"))\n+        .build();\n+    }\n+    HTextFlowTarget hTextFlowTarget = textFlowTargetDAO.getTextFlowTarget(\n+      data.getTransUnitId(), new LocaleId(localeId));\n+    if (hTextFlowTarget == null\n+      || hTextFlowTarget.getState().isUntranslated()) {\n+      return Response.status(\n+        Response.Status.BAD_REQUEST)\n+        .entity(Lists.newArrayList(\"comment on untranslated message is pointless!\"))\n+        .build();\n     }\n+    HProjectIteration projectIteration =\n+      hTextFlowTarget.getTextFlow().getDocument()\n+        .getProjectIteration();\n+    HProject project = projectIteration.getProject();\n+    if (!projectIteration.isActive()) {\n+      return Response.status(\n+        Response.Status.FORBIDDEN)\n+        .entity(Lists.newArrayList(\"project or version is not active.\"))\n+        .build();\n+    }\n+    identity.checkPermission(\"review-comment\", locale, project);\n \n-    public TranslationReviewService() {\n+    HTextFlowTargetReviewComment hComment;\n+    ReviewCriteria criteria = null;\n+    if (data.getReviewCriteriaId() != null) {\n+      ReviewCriterionId reviewId = new ReviewCriterionId(data.getReviewCriteriaId());\n+      criteria = reviewCriteriaDAO.findById(reviewId.getId());\n     }\n+    hComment = hTextFlowTarget.addReview(authenticatedAccount.getPerson(), criteria, data.getComment());\n+    textFlowTargetReviewCommentsDAO.makePersistent(hComment);\n+    textFlowTargetReviewCommentsDAO.flush();\n \n-    @java.beans.ConstructorProperties({ \"textFlowTargetDAO\",\n-            \"localeServiceImpl\", \"identity\", \"reviewCriteriaDAO\",\n-            \"textFlowTargetReviewCommentsDAO\", \"authenticatedAccount\" })\n-    protected TranslationReviewService(\n-            TextFlowTargetDAO textFlowTargetDAO,\n-            LocaleService localeServiceImpl,\n-            ZanataIdentity identity,\n-            ReviewCriteriaDAO reviewCriteriaDAO,\n-            TextFlowTargetReviewCommentsDAO textFlowTargetReviewCommentsDAO,\n-            HAccount authenticatedAccount) {\n+    log.info(\"success\");\n+    return Response.ok(data).build();\n+  }\n \n-        this.textFlowTargetDAO = textFlowTargetDAO;\n-        this.localeServiceImpl = localeServiceImpl;\n-        this.identity =identity;\n-        this.reviewCriteriaDAO = reviewCriteriaDAO;\n-        this.textFlowTargetReviewCommentsDAO = textFlowTargetReviewCommentsDAO;\n-        this.authenticatedAccount = authenticatedAccount;\n-    }\n+  public TranslationReviewService() {\n+  }\n+\n+  @java.beans.ConstructorProperties({\"textFlowTargetDAO\",\n+    \"localeServiceImpl\", \"identity\", \"reviewCriteriaDAO\",\n+    \"textFlowTargetReviewCommentsDAO\", \"authenticatedAccount\"})\n+  protected TranslationReviewService(\n+    TextFlowTargetDAO textFlowTargetDAO,\n+    LocaleService localeServiceImpl,\n+    ZanataIdentity identity,\n+    ReviewCriteriaDAO reviewCriteriaDAO,\n+    TextFlowTargetReviewCommentsDAO textFlowTargetReviewCommentsDAO,\n+    HAccount authenticatedAccount) {\n+\n+    this.textFlowTargetDAO = textFlowTargetDAO;\n+    this.localeServiceImpl = localeServiceImpl;\n+    this.identity = identity;\n+    this.reviewCriteriaDAO = reviewCriteriaDAO;\n+    this.textFlowTargetReviewCommentsDAO = textFlowTargetReviewCommentsDAO;\n+    this.authenticatedAccount = authenticatedAccount;\n+  }\n }\n",
            "diff_size": 114
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/66/TranslationReviewService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/naturalize/66/TranslationReviewService.java\nindex 84356f5b7c6..c5bcc903ff4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/66/TranslationReviewService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/naturalize/66/TranslationReviewService.java\n@@ -66,11 +66,11 @@ public class TranslationReviewService implements TranslationReviewResource {\n                 data.getTransUnitId(), new LocaleId(localeId));\n         if (hTextFlowTarget == null\n                 || hTextFlowTarget.getState().isUntranslated()) {\n-             return Response.status(\n+    return Response.status(\n                      Response.Status.BAD_REQUEST)\n                      .entity(Lists.newArrayList(\"comment on untranslated message is pointless!\"))\n                      .build();\n-        }\n+    }\n         HProjectIteration projectIteration =\n                 hTextFlowTarget.getTextFlow().getDocument()\n                         .getProjectIteration();\n@@ -110,12 +110,11 @@ public class TranslationReviewService implements TranslationReviewResource {\n             ReviewCriteriaDAO reviewCriteriaDAO,\n             TextFlowTargetReviewCommentsDAO textFlowTargetReviewCommentsDAO,\n             HAccount authenticatedAccount) {\n-\n-        this.textFlowTargetDAO = textFlowTargetDAO;\n+    this.textFlowTargetDAO = textFlowTargetDAO;\n         this.localeServiceImpl = localeServiceImpl;\n-        this.identity =identity;\n+        this.identity = identity;\n         this.reviewCriteriaDAO = reviewCriteriaDAO;\n         this.textFlowTargetReviewCommentsDAO = textFlowTargetReviewCommentsDAO;\n         this.authenticatedAccount = authenticatedAccount;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/66/TranslationReviewService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/codebuff/66/TranslationReviewService.java\nindex 84356f5b7c6..96f92483b0b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/66/TranslationReviewService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/codebuff/66/TranslationReviewService.java\n@@ -19,19 +19,17 @@ import org.zanata.security.ZanataIdentity;\n import org.zanata.security.annotations.Authenticated;\n import org.zanata.service.LocaleService;\n import org.zanata.webtrans.shared.model.ReviewCriterionId;\n-\n import javax.enterprise.context.RequestScoped;\n import javax.inject.Inject;\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.Path;\n import javax.ws.rs.core.Response;\n \n+\n @Path(TranslationReviewResource.SERVICE_PATH)\n @RequestScoped\n public class TranslationReviewService implements TranslationReviewResource {\n-    private static final org.slf4j.Logger log =\n-            org.slf4j.LoggerFactory.getLogger(TranslationReviewService.class);\n-\n+    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(TranslationReviewService.class);\n     @Inject\n     private TextFlowTargetDAO textFlowTargetDAO;\n     @Inject\n@@ -45,44 +43,26 @@ public class TranslationReviewService implements TranslationReviewResource {\n     private HAccount authenticatedAccount;\n     @Inject\n     private TextFlowTargetReviewCommentsDAO textFlowTargetReviewCommentsDAO;\n-\n     @Override\n-    public Response put(String localeId, @NotNull ReviewData data) {\n+    public Response put(String localeId,\n+                        @NotNull ReviewData data) {\n         if (data == null) {\n-            return Response.status(\n-                    Response.Status.BAD_REQUEST)\n-                    .entity(Lists.newArrayList(\"data is invalid\"))\n-                    .build();\n+            return Response.status(Response.Status.BAD_REQUEST).entity(Lists.newArrayList(\"data is invalid\")).build();\n         }\n-        HLocale locale =\n-                localeServiceImpl.getByLocaleId(localeId);\n+        HLocale locale = localeServiceImpl.getByLocaleId(localeId);\n         if (locale == null) {\n-            return Response.status(\n-                    Response.Status.BAD_REQUEST)\n-                    .entity(Lists.newArrayList(\"locale ID is invalid, or not found.\"))\n-                    .build();\n+            return Response.status(Response.Status.BAD_REQUEST).entity(Lists.newArrayList(\"locale ID is invalid, or not found.\")).build();\n         }\n-        HTextFlowTarget hTextFlowTarget = textFlowTargetDAO.getTextFlowTarget(\n-                data.getTransUnitId(), new LocaleId(localeId));\n-        if (hTextFlowTarget == null\n-                || hTextFlowTarget.getState().isUntranslated()) {\n-             return Response.status(\n-                     Response.Status.BAD_REQUEST)\n-                     .entity(Lists.newArrayList(\"comment on untranslated message is pointless!\"))\n-                     .build();\n+        HTextFlowTarget hTextFlowTarget = textFlowTargetDAO.getTextFlowTarget(data.getTransUnitId(), new LocaleId(localeId));\n+        if (hTextFlowTarget == null || hTextFlowTarget.getState().isUntranslated()) {\n+            return Response.status(Response.Status.BAD_REQUEST).entity(Lists.newArrayList(\"comment on untranslated message is pointless!\")).build();\n         }\n-        HProjectIteration projectIteration =\n-                hTextFlowTarget.getTextFlow().getDocument()\n-                        .getProjectIteration();\n+        HProjectIteration projectIteration = hTextFlowTarget.getTextFlow().getDocument().getProjectIteration();\n         HProject project = projectIteration.getProject();\n         if (!projectIteration.isActive()) {\n-            return Response.status(\n-                    Response.Status.FORBIDDEN)\n-                    .entity(Lists.newArrayList(\"project or version is not active.\"))\n-                    .build();\n+            return Response.status(Response.Status.FORBIDDEN).entity(Lists.newArrayList(\"project or version is not active.\")).build();\n         }\n         identity.checkPermission(\"review-comment\", locale, project);\n-\n         HTextFlowTargetReviewComment hComment;\n         ReviewCriteria criteria = null;\n         if (data.getReviewCriteriaId() != null) {\n@@ -92,7 +72,6 @@ public class TranslationReviewService implements TranslationReviewResource {\n         hComment = hTextFlowTarget.addReview(authenticatedAccount.getPerson(), criteria, data.getComment());\n         textFlowTargetReviewCommentsDAO.makePersistent(hComment);\n         textFlowTargetReviewCommentsDAO.flush();\n-\n         log.info(\"success\");\n         return Response.ok(data).build();\n     }\n@@ -100,22 +79,17 @@ public class TranslationReviewService implements TranslationReviewResource {\n     public TranslationReviewService() {\n     }\n \n-    @java.beans.ConstructorProperties({ \"textFlowTargetDAO\",\n-            \"localeServiceImpl\", \"identity\", \"reviewCriteriaDAO\",\n-            \"textFlowTargetReviewCommentsDAO\", \"authenticatedAccount\" })\n-    protected TranslationReviewService(\n-            TextFlowTargetDAO textFlowTargetDAO,\n-            LocaleService localeServiceImpl,\n-            ZanataIdentity identity,\n-            ReviewCriteriaDAO reviewCriteriaDAO,\n-            TextFlowTargetReviewCommentsDAO textFlowTargetReviewCommentsDAO,\n-            HAccount authenticatedAccount) {\n-\n+    @java.beans.ConstructorProperties({ \"textFlowTargetDAO\", \"localeServiceImpl\", \"identity\", \"reviewCriteriaDAO\", \"textFlowTargetReviewCommentsDAO\", \"authenticatedAccount\" })\n+    protected TranslationReviewService(TextFlowTargetDAO textFlowTargetDAO,\n+LocaleService localeServiceImpl,\n+ZanataIdentity identity,\n+ReviewCriteriaDAO reviewCriteriaDAO,\n+TextFlowTargetReviewCommentsDAO textFlowTargetReviewCommentsDAO, HAccount authenticatedAccount) {\n         this.textFlowTargetDAO = textFlowTargetDAO;\n         this.localeServiceImpl = localeServiceImpl;\n-        this.identity =identity;\n+        this.identity = identity;\n         this.reviewCriteriaDAO = reviewCriteriaDAO;\n         this.textFlowTargetReviewCommentsDAO = textFlowTargetReviewCommentsDAO;\n         this.authenticatedAccount = authenticatedAccount;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 48
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/66/TranslationReviewService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_random/66/TranslationReviewService.java\nindex 84356f5b7c6..aaed4cb5b0c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/66/TranslationReviewService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_random/66/TranslationReviewService.java\n@@ -113,7 +113,7 @@ public class TranslationReviewService implements TranslationReviewResource {\n \n         this.textFlowTargetDAO = textFlowTargetDAO;\n         this.localeServiceImpl = localeServiceImpl;\n-        this.identity =identity;\n+        this.identity = identity;\n         this.reviewCriteriaDAO = reviewCriteriaDAO;\n         this.textFlowTargetReviewCommentsDAO = textFlowTargetReviewCommentsDAO;\n         this.authenticatedAccount = authenticatedAccount;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/66/TranslationReviewService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_three_grams/66/TranslationReviewService.java\nindex 84356f5b7c6..aaed4cb5b0c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/66/TranslationReviewService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_three_grams/66/TranslationReviewService.java\n@@ -113,7 +113,7 @@ public class TranslationReviewService implements TranslationReviewResource {\n \n         this.textFlowTargetDAO = textFlowTargetDAO;\n         this.localeServiceImpl = localeServiceImpl;\n-        this.identity =identity;\n+        this.identity = identity;\n         this.reviewCriteriaDAO = reviewCriteriaDAO;\n         this.textFlowTargetReviewCommentsDAO = textFlowTargetReviewCommentsDAO;\n         this.authenticatedAccount = authenticatedAccount;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}