{
    "project_name": "graphfoundation-ongdb",
    "error_id": "905",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "42",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "116",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "152",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/905/NodeLabelsCache.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/905/NodeLabelsCache.java\nindex 2218f398a95..b719c38cd82 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/905/NodeLabelsCache.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/905/NodeLabelsCache.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.unsafe.impl.batchimport.cache;\n \n import org.neo4j.kernel.impl.util.Bits;\n@@ -31,166 +32,164 @@ import static org.neo4j.kernel.impl.util.Bits.bitsFromLongs;\n  */\n public class NodeLabelsCache implements MemoryStatsVisitor.Visitable, AutoCloseable\n {\n-    public static class Client\n+  public static class Client\n+  {\n+    private final long[] labelScratch;\n+    private final Bits labelBits;\n+    private final long[] fieldScratch = new long[1];\n+    private final Bits fieldBits = bitsFromLongs(fieldScratch);\n+\n+    public Client(int worstCaseLongsNeeded)\n     {\n-        private final long[] labelScratch;\n-        private final Bits labelBits;\n-        private final long[] fieldScratch = new long[1];\n-        private final Bits fieldBits = bitsFromLongs( fieldScratch );\n-\n-        public Client( int worstCaseLongsNeeded )\n-        {\n-            this.labelScratch = new long[worstCaseLongsNeeded];\n-            this.labelBits = bitsFromLongs( labelScratch );\n-        }\n+      this.labelScratch = new long[worstCaseLongsNeeded];\n+      this.labelBits = bitsFromLongs(labelScratch);\n     }\n-\n-    private final LongArray cache;\n-    private final LongArray spillOver;\n-    private long spillOverIndex;\n-    private final int bitsPerLabel;\n-    private final int worstCaseLongsNeeded;\n-    private final Client putClient;\n-\n-    public NodeLabelsCache( NumberArrayFactory cacheFactory, int highLabelId )\n+  }\n+\n+  private final LongArray cache;\n+  private final LongArray spillOver;\n+  private long spillOverIndex;\n+  private final int bitsPerLabel;\n+  private final int worstCaseLongsNeeded;\n+  private final Client putClient;\n+\n+  public NodeLabelsCache(NumberArrayFactory cacheFactory, int highLabelId)\n+  {\n+    this(cacheFactory, highLabelId, 10_000_000);\n+  }\n+\n+  public NodeLabelsCache(NumberArrayFactory cacheFactory, int highLabelId, int chunkSize)\n+  {\n+    this.cache = cacheFactory.newDynamicLongArray(chunkSize, 0);\n+    this.spillOver = cacheFactory.newDynamicLongArray(chunkSize / 5, 0); // expect way less of these\n+    this.bitsPerLabel = max(Integer.SIZE - numberOfLeadingZeros(highLabelId), 1);\n+    this.worstCaseLongsNeeded = ((bitsPerLabel * (highLabelId + 1 /*length slot*/)) - 1) / Long.SIZE + 1;\n+    this.putClient = new Client(worstCaseLongsNeeded);\n+  }\n+\n+  /**\n+   * @return a new {@link Client} used in {@link #get(Client, long, int[])}. {@link Client} contains\n+   * mutable state and so each thread calling {@link #get(Client, long, int[])} must create their own\n+   * client instance once and (re)use it for every get-call they do.\n+   */\n+  public Client newClient()\n+  {\n+    return new Client(worstCaseLongsNeeded);\n+  }\n+\n+  /**\n+   * Keeps label ids for the given node id. Labels ids are int[] really, but by accident they arrive\n+   * from the store disguised as long[]. When looping over them there can be assumed that they are ints.\n+   * <p>\n+   * The format is that the longs in this cache are divided up into bit slots of size whatever bitsPerLabel is.\n+   * The first slot will contain number of labels for this node. If those labels fit in the long, after the\n+   * length slot, they will be stored there. Otherwise the rest of the bits will point to the index into\n+   * the spillOver array.\n+   * <p>\n+   * This method may only be called by a single thread, putting from multiple threads may cause undeterministic\n+   * behaviour.\n+   */\n+  public void put(long nodeId, long[] labelIds)\n+  {\n+    putClient.labelBits.clear(true);\n+    putClient.labelBits.put(labelIds.length, bitsPerLabel);\n+    for (long labelId : labelIds)\n     {\n-        this( cacheFactory, highLabelId, 10_000_000 );\n+      putClient.labelBits.put((int) labelId, bitsPerLabel);\n     }\n \n-    public NodeLabelsCache( NumberArrayFactory cacheFactory, int highLabelId, int chunkSize )\n-    {\n-        this.cache = cacheFactory.newDynamicLongArray( chunkSize, 0 );\n-        this.spillOver = cacheFactory.newDynamicLongArray( chunkSize / 5, 0 ); // expect way less of these\n-        this.bitsPerLabel = max( Integer.SIZE - numberOfLeadingZeros( highLabelId ), 1 );\n-        this.worstCaseLongsNeeded = ((bitsPerLabel * (highLabelId + 1 /*length slot*/)) - 1) / Long.SIZE + 1;\n-        this.putClient = new Client( worstCaseLongsNeeded );\n+    int longsInUse = putClient.labelBits.longsInUse();\n+    assert longsInUse > 0 : \"Uhm\";\n+    if (longsInUse == 1)\n+    {   // We only require one long, so put it right in there\n+      cache.set(nodeId, putClient.labelScratch[0]);\n+    } else\n+    {   // Now it gets tricky, we have to spill over into another array\n+      // So create the reference\n+      putClient.fieldBits.clear(true);\n+      putClient.fieldBits.put(labelIds.length, bitsPerLabel);\n+      putClient.fieldBits.put(spillOverIndex, Long.SIZE - bitsPerLabel);\n+      cache.set(nodeId, putClient.fieldBits.getLongs()[0]);\n+\n+      // And set the longs in the spill over array. For simplicity we put the encoded bits as they\n+      // are right into the spill over array, where the first slot will have the length \"again\".\n+      for (int i = 0; i < longsInUse; i++)\n+      {\n+        spillOver.set(spillOverIndex++, putClient.labelScratch[i]);\n+      }\n     }\n-\n-    /**\n-     * @return a new {@link Client} used in {@link #get(Client, long, int[])}. {@link Client} contains\n-     * mutable state and so each thread calling {@link #get(Client, long, int[])} must create their own\n-     * client instance once and (re)use it for every get-call they do.\n-     */\n-    public Client newClient()\n-    {\n-        return new Client( worstCaseLongsNeeded );\n+  }\n+\n+  /**\n+   * Write labels for a node into {@code target}. If target isn't big enough it will grow.\n+   * The target, intact or grown, will be returned.\n+   * <p>\n+   * Multiple threads may call this method simultaneously, given that they do so with each their own {@link Client}\n+   * instance.\n+   */\n+  public int[] get(Client client, long nodeId, int[] target)\n+  {\n+    // make this field available to our Bits instance, hackish? meh\n+    client.fieldBits.clear(false);\n+    client.fieldScratch[0] = cache.get(nodeId);\n+    if (client.fieldScratch[0] == 0)\n+    {   // Nothing here\n+      target[0] = -1; // mark the end\n+      return target;\n     }\n \n-    /**\n-     * Keeps label ids for the given node id. Labels ids are int[] really, but by accident they arrive\n-     * from the store disguised as long[]. When looping over them there can be assumed that they are ints.\n-     *\n-     * The format is that the longs in this cache are divided up into bit slots of size whatever bitsPerLabel is.\n-     * The first slot will contain number of labels for this node. If those labels fit in the long, after the\n-     * length slot, they will be stored there. Otherwise the rest of the bits will point to the index into\n-     * the spillOver array.\n-     *\n-     * This method may only be called by a single thread, putting from multiple threads may cause undeterministic\n-     * behaviour.\n-     */\n-    public void put( long nodeId, long[] labelIds )\n+    int length = client.fieldBits.getInt(bitsPerLabel);\n+    int longsInUse = ((bitsPerLabel * (length + 1)) - 1) / Long.SIZE + 1;\n+    target = ensureCapacity(target, length);\n+    if (longsInUse == 1)\n     {\n-        putClient.labelBits.clear( true );\n-        putClient.labelBits.put( labelIds.length, bitsPerLabel );\n-        for ( long labelId : labelIds )\n-        {\n-            putClient.labelBits.put( (int) labelId, bitsPerLabel );\n-        }\n-\n-        int longsInUse = putClient.labelBits.longsInUse();\n-        assert longsInUse > 0 : \"Uhm\";\n-        if ( longsInUse == 1 )\n-        {   // We only require one long, so put it right in there\n-            cache.set( nodeId, putClient.labelScratch[0] );\n-        }\n-        else\n-        {   // Now it gets tricky, we have to spill over into another array\n-            // So create the reference\n-            putClient.fieldBits.clear( true );\n-            putClient.fieldBits.put( labelIds.length, bitsPerLabel );\n-            putClient.fieldBits.put( spillOverIndex, Long.SIZE - bitsPerLabel );\n-            cache.set( nodeId, putClient.fieldBits.getLongs()[0] );\n-\n-            // And set the longs in the spill over array. For simplicity we put the encoded bits as they\n-            // are right into the spill over array, where the first slot will have the length \"again\".\n-            for ( int i = 0; i < longsInUse; i++ )\n-            {\n-                spillOver.set( spillOverIndex++, putClient.labelScratch[i] );\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Write labels for a node into {@code target}. If target isn't big enough it will grow.\n-     * The target, intact or grown, will be returned.\n-     *\n-     * Multiple threads may call this method simultaneously, given that they do so with each their own {@link Client}\n-     * instance.\n-     */\n-    public int[] get( Client client, long nodeId, int[] target )\n+      decode(client.fieldBits, length, target);\n+    } else\n     {\n-        // make this field available to our Bits instance, hackish? meh\n-        client.fieldBits.clear( false );\n-        client.fieldScratch[0] = cache.get( nodeId );\n-        if ( client.fieldScratch[0] == 0 )\n-        {   // Nothing here\n-            target[0] = -1; // mark the end\n-            return target;\n-        }\n-\n-        int length = client.fieldBits.getInt( bitsPerLabel );\n-        int longsInUse = ((bitsPerLabel * (length + 1)) - 1) / Long.SIZE + 1;\n-        target = ensureCapacity( target, length );\n-        if ( longsInUse == 1 )\n-        {\n-            decode( client.fieldBits, length, target );\n-        }\n-        else\n-        {\n-            // Read data from spill over cache into the label bits array for decoding\n-            long spillOverIndex = client.fieldBits.getLong( Long.SIZE - bitsPerLabel );\n-            client.labelBits.clear( false );\n-            for ( int i = 0; i < longsInUse; i++ )\n-            {\n-                client.labelScratch[i] = spillOver.get( spillOverIndex + i );\n-            }\n-            client.labelBits.getInt( bitsPerLabel ); // first one ignored, since it's just the length\n-            decode( client.labelBits, length, target );\n-        }\n-\n-        return target;\n+      // Read data from spill over cache into the label bits array for decoding\n+      long spillOverIndex = client.fieldBits.getLong(Long.SIZE - bitsPerLabel);\n+      client.labelBits.clear(false);\n+      for (int i = 0; i < longsInUse; i++)\n+      {\n+        client.labelScratch[i] = spillOver.get(spillOverIndex + i);\n+      }\n+      client.labelBits.getInt(bitsPerLabel); // first one ignored, since it's just the length\n+      decode(client.labelBits, length, target);\n     }\n \n-    @Override\n-    public void acceptMemoryStatsVisitor( MemoryStatsVisitor visitor )\n-    {\n-        cache.acceptMemoryStatsVisitor( visitor );\n-        spillOver.acceptMemoryStatsVisitor( visitor );\n-    }\n+    return target;\n+  }\n \n-    private void decode( Bits bits, int length, int[] target )\n-    {\n-        for ( int i = 0; i < length; i++ )\n-        {\n-            target[i] = bits.getInt( bitsPerLabel );\n-        }\n-\n-        if ( target.length > length )\n-        {   // we have to mark the end here, since the target array is larger\n-            target[length] = -1;\n-        }\n-    }\n+  @Override\n+  public void acceptMemoryStatsVisitor(MemoryStatsVisitor visitor)\n+  {\n+    cache.acceptMemoryStatsVisitor(visitor);\n+    spillOver.acceptMemoryStatsVisitor(visitor);\n+  }\n \n-    private static int[] ensureCapacity( int[] target, int capacity )\n+  private void decode(Bits bits, int length, int[] target)\n+  {\n+    for (int i = 0; i < length; i++)\n     {\n-        return capacity > target.length\n-                ? new int[capacity]\n-                : target;\n+      target[i] = bits.getInt(bitsPerLabel);\n     }\n \n-    public void close()\n-    {\n-        cache.close();\n-        spillOver.close();\n+    if (target.length > length)\n+    {   // we have to mark the end here, since the target array is larger\n+      target[length] = -1;\n     }\n+  }\n+\n+  private static int[] ensureCapacity(int[] target, int capacity)\n+  {\n+    return capacity > target.length\n+        ? new int[capacity]\n+        : target;\n+  }\n+\n+  public void close()\n+  {\n+    cache.close();\n+    spillOver.close();\n+  }\n }\n",
            "diff_size": 230
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "97",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "27",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "190",
                    "column": "24",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/905/NodeLabelsCache.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/905/NodeLabelsCache.java\nindex 2218f398a95..9420a7cfa84 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/905/NodeLabelsCache.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/905/NodeLabelsCache.java\n@@ -94,17 +94,19 @@ public class NodeLabelsCache implements MemoryStatsVisitor.Visitable, AutoClosea\n         putClient.labelBits.put( labelIds.length, bitsPerLabel );\n         for ( long labelId : labelIds )\n         {\n-            putClient.labelBits.put( (int) labelId, bitsPerLabel );\n+            putClient.labelBits.put( ( int) labelId, bitsPerLabel );\n         }\n \n         int longsInUse = putClient.labelBits.longsInUse();\n         assert longsInUse > 0 : \"Uhm\";\n         if ( longsInUse == 1 )\n-        {   // We only require one long, so put it right in there\n+        {\n+    // We only require one long, so put it right in there\n             cache.set( nodeId, putClient.labelScratch[0] );\n         }\n         else\n-        {   // Now it gets tricky, we have to spill over into another array\n+        {\n+    // Now it gets tricky, we have to spill over into another array\n             // So create the reference\n             putClient.fieldBits.clear( true );\n             putClient.fieldBits.put( labelIds.length, bitsPerLabel );\n@@ -133,13 +135,14 @@ public class NodeLabelsCache implements MemoryStatsVisitor.Visitable, AutoClosea\n         client.fieldBits.clear( false );\n         client.fieldScratch[0] = cache.get( nodeId );\n         if ( client.fieldScratch[0] == 0 )\n-        {   // Nothing here\n+        {\n+    // Nothing here\n             target[0] = -1; // mark the end\n             return target;\n         }\n \n         int length = client.fieldBits.getInt( bitsPerLabel );\n-        int longsInUse = ((bitsPerLabel * (length + 1)) - 1) / Long.SIZE + 1;\n+        int longsInUse = ((bitsPerLabel * (length + 1 )) - 1) / Long.SIZE + 1;\n         target = ensureCapacity( target, length );\n         if ( longsInUse == 1 )\n         {\n@@ -175,17 +178,16 @@ public class NodeLabelsCache implements MemoryStatsVisitor.Visitable, AutoClosea\n             target[i] = bits.getInt( bitsPerLabel );\n         }\n \n-        if ( target.length > length )\n-        {   // we have to mark the end here, since the target array is larger\n+        if ( target.length> length )\n+        {\n+    // we have to mark the end here, since the target array is larger\n             target[length] = -1;\n         }\n     }\n \n     private static int[] ensureCapacity( int[] target, int capacity )\n     {\n-        return capacity > target.length\n-                ? new int[capacity]\n-                : target;\n+        return capacity> target.length ? new int[capacity] : target;\n     }\n \n     public void close()\n@@ -193,4 +195,4 @@ public class NodeLabelsCache implements MemoryStatsVisitor.Visitable, AutoClosea\n         cache.close();\n         spillOver.close();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}