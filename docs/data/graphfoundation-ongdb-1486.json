{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1486",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "171",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "192",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "344",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "344",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "346",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "390",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "391",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "410",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "410",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "412",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "412",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "414",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "425",
                    "column": "72",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "425",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "428",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "428",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "488",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "488",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "488",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "495",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "495",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "499",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "499",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "499",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "504",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "504",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "514",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "514",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "514",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "523",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "523",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "523",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "527",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "527",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "539",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "540",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "544",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "544",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "548",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "548",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "551",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "551",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "560",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "568",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "571",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "577",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "587",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "591",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "593",
                    "column": "85",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "593",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "594",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "594",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "600",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "600",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "603",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "603",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "607",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "609",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "610",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "616",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "619",
                    "column": "70",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "620",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "625",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "626",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "639",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "641",
                    "column": "65",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "642",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "643",
                    "column": "70",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "643",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "644",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "644",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "645",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "646",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "650",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "654",
                    "column": "137",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "668",
                    "column": "79",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "668",
                    "column": "142",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "670",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "671",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "680",
                    "column": "76",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "686",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "690",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "691",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "696",
                    "column": "68",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "697",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "700",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "700",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "705",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "705",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "706",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "706",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "708",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "708",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "711",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "723",
                    "column": "75",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "723",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "724",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "724",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "726",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "726",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "729",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "739",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "739",
                    "column": "115",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "742",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "742",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "745",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "746",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "753",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "753",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "770",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "770",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "786",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "786",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "790",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "790",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "823",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "823",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "825",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "825",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "828",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "839",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "839",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "855",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "856",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "859",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "859",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "861",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "861",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "865",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "865",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "872",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "872",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1486/NeoStoreDataSource.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1486/NeoStoreDataSource.java\nindex 01255c00dfa..6de1e47cc84 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1486/NeoStoreDataSource.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1486/NeoStoreDataSource.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel;\n \n import java.io.File;\n@@ -165,754 +166,748 @@ import static org.neo4j.helpers.Exceptions.throwIfUnchecked;\n public class NeoStoreDataSource implements Lifecycle, IndexProviders\n {\n \n-    enum Diagnostics implements DiagnosticsExtractor<NeoStoreDataSource>\n-    {\n-        TRANSACTION_RANGE( \"Transaction log:\" )\n-                {\n-                    @Override\n-                    void dump( NeoStoreDataSource source, Logger log )\n-                    {\n-                        LogFiles logFiles = source.getDependencyResolver().resolveDependency( LogFiles.class );\n-                        try\n-                        {\n-                            for ( long logVersion = logFiles.getLowestLogVersion();\n-                                  logFiles.versionExists( logVersion ); logVersion++ )\n-                            {\n-                                if ( logFiles.hasAnyEntries( logVersion ) )\n-                                {\n-                                    LogHeader header = logFiles.extractHeader( logVersion );\n-                                    long firstTransactionIdInThisLog = header.lastCommittedTxId + 1;\n-                                    log.log( \"Oldest transaction \" + firstTransactionIdInThisLog +\n-                                             \" found in log with version \" + logVersion );\n-                                    return;\n-                                }\n-                            }\n-                            log.log( \"No transactions found in any log\" );\n-                        }\n-                        catch ( IOException e )\n-                        {   // It's fine, we just tried to be nice and log this. Failing is OK\n-                            log.log( \"Error trying to figure out oldest transaction in log\" );\n-                        }\n-                    }\n-                };\n-\n-        private final String message;\n-\n-        Diagnostics( String message )\n-        {\n-            this.message = message;\n-        }\n-\n-        @Override\n-        public void dumpDiagnostics( final NeoStoreDataSource source, DiagnosticsPhase phase, Logger logger )\n-        {\n-            if ( applicable( phase ) )\n-            {\n-                logger.log( message );\n-                dump( source, logger );\n-            }\n-        }\n-\n-        boolean applicable( DiagnosticsPhase phase )\n-        {\n-            return phase.isInitialization() || phase.isExplicitlyRequested();\n-        }\n-\n-        abstract void dump( NeoStoreDataSource source, Logger logger );\n-    }\n-\n-    public static final String DEFAULT_DATA_SOURCE_NAME = \"nioneodb\";\n-\n-    private final Monitors monitors;\n-    private final Tracers tracers;\n-\n-    private final Log msgLog;\n-    private final LogService logService;\n-    private final AutoIndexing autoIndexing;\n-    private final LogProvider logProvider;\n-    private final DependencyResolver dependencyResolver;\n-    private final TokenNameLookup tokenNameLookup;\n-    private final PropertyKeyTokenHolder propertyKeyTokenHolder;\n-    private final LabelTokenHolder labelTokens;\n-    private final RelationshipTypeTokenHolder relationshipTypeTokens;\n-    private final StatementLocksFactory statementLocksFactory;\n-    private final SchemaWriteGuard schemaWriteGuard;\n-    private final TransactionEventHandlers transactionEventHandlers;\n-    private final IdGeneratorFactory idGeneratorFactory;\n-    private final JobScheduler scheduler;\n-    private final Config config;\n-    private final LockService lockService;\n-    private final IndexingService.Monitor indexingServiceMonitor;\n-    private final FileSystemAbstraction fs;\n-    private final TransactionMonitor transactionMonitor;\n-    private final DatabaseHealth databaseHealth;\n-    private final LogFileCreationMonitor physicalLogMonitor;\n-    private final TransactionHeaderInformationFactory transactionHeaderInformationFactory;\n-    private final StartupStatisticsProvider startupStatistics;\n-    private final CommitProcessFactory commitProcessFactory;\n-    private final PageCache pageCache;\n-    private final Map<String,IndexImplementation> indexProviders = new HashMap<>();\n-    private final ExplicitIndexProviderLookup explicitIndexProviderLookup;\n-    private final ConstraintSemantics constraintSemantics;\n-    private final Procedures procedures;\n-    private final IOLimiter ioLimiter;\n-    private final AvailabilityGuard availabilityGuard;\n-    private final SystemNanoClock clock;\n-    private final StoreCopyCheckPointMutex storeCopyCheckPointMutex;\n-    private final CollectionsFactorySupplier collectionsFactorySupplier;\n-\n-    private Dependencies dependencies;\n-    private LifeSupport life;\n-    private IndexProviderMap indexProviderMap;\n-    private File storeDir;\n-    private boolean readOnly;\n-    private final IdController idController;\n-    private final OperationalMode operationalMode;\n-    private final RecoveryCleanupWorkCollector recoveryCleanupWorkCollector;\n-    private final VersionContextSupplier versionContextSupplier;\n-    private final AccessCapability accessCapability;\n-\n-    private StorageEngine storageEngine;\n-    private NeoStoreTransactionLogModule transactionLogModule;\n-    private NeoStoreKernelModule kernelModule;\n-\n-    private final boolean failOnCorruptedLogFiles;\n-\n-    public NeoStoreDataSource( File storeDir, Config config, IdGeneratorFactory idGeneratorFactory,\n-            LogService logService, JobScheduler scheduler, TokenNameLookup tokenNameLookup,\n-            DependencyResolver dependencyResolver, PropertyKeyTokenHolder propertyKeyTokens,\n-            LabelTokenHolder labelTokens, RelationshipTypeTokenHolder relationshipTypeTokens,\n-            StatementLocksFactory statementLocksFactory, SchemaWriteGuard schemaWriteGuard,\n-            TransactionEventHandlers transactionEventHandlers, IndexingService.Monitor indexingServiceMonitor,\n-            FileSystemAbstraction fs, TransactionMonitor transactionMonitor, DatabaseHealth databaseHealth,\n-            LogFileCreationMonitor physicalLogMonitor,\n-            TransactionHeaderInformationFactory transactionHeaderInformationFactory,\n-            StartupStatisticsProvider startupStatistics, CommitProcessFactory commitProcessFactory,\n-            AutoIndexing autoIndexing, PageCache pageCache, ConstraintSemantics constraintSemantics, Monitors monitors,\n-            Tracers tracers, Procedures procedures, IOLimiter ioLimiter, AvailabilityGuard availabilityGuard,\n-            SystemNanoClock clock, AccessCapability accessCapability, StoreCopyCheckPointMutex storeCopyCheckPointMutex,\n-            RecoveryCleanupWorkCollector recoveryCleanupWorkCollector, IdController idController,\n-            OperationalMode operationalMode, VersionContextSupplier versionContextSupplier, CollectionsFactorySupplier collectionsFactorySupplier )\n-    {\n-        this.storeDir = storeDir;\n-        this.config = config;\n-        this.idGeneratorFactory = idGeneratorFactory;\n-        this.tokenNameLookup = tokenNameLookup;\n-        this.dependencyResolver = dependencyResolver;\n-        this.scheduler = scheduler;\n-        this.logService = logService;\n-        this.autoIndexing = autoIndexing;\n-        this.storeCopyCheckPointMutex = storeCopyCheckPointMutex;\n-        this.logProvider = logService.getInternalLogProvider();\n-        this.propertyKeyTokenHolder = propertyKeyTokens;\n-        this.labelTokens = labelTokens;\n-        this.relationshipTypeTokens = relationshipTypeTokens;\n-        this.statementLocksFactory = statementLocksFactory;\n-        this.schemaWriteGuard = schemaWriteGuard;\n-        this.transactionEventHandlers = transactionEventHandlers;\n-        this.indexingServiceMonitor = indexingServiceMonitor;\n-        this.fs = fs;\n-        this.transactionMonitor = transactionMonitor;\n-        this.databaseHealth = databaseHealth;\n-        this.physicalLogMonitor = physicalLogMonitor;\n-        this.transactionHeaderInformationFactory = transactionHeaderInformationFactory;\n-        this.startupStatistics = startupStatistics;\n-        this.constraintSemantics = constraintSemantics;\n-        this.monitors = monitors;\n-        this.tracers = tracers;\n-        this.procedures = procedures;\n-        this.ioLimiter = ioLimiter;\n-        this.availabilityGuard = availabilityGuard;\n-        this.clock = clock;\n-        this.accessCapability = accessCapability;\n-        this.recoveryCleanupWorkCollector = recoveryCleanupWorkCollector;\n-\n-        readOnly = config.get( GraphDatabaseSettings.read_only );\n-        this.idController = idController;\n-        this.operationalMode = operationalMode;\n-        this.versionContextSupplier = versionContextSupplier;\n-        msgLog = logProvider.getLog( getClass() );\n-        this.lockService = new ReentrantLockService();\n-        this.explicitIndexProviderLookup = new ExplicitIndexProviderLookup()\n-        {\n-            @Override\n-            public IndexImplementation apply( String name )\n-            {\n-                assert name != null : \"Null provider name supplied\";\n-                IndexImplementation provider = indexProviders.get( name );\n-                if ( provider == null )\n-                {\n-                    throw new IllegalArgumentException( \"No index provider '\" + name +\n-                                                        \"' found. Maybe the intended provider (or one more of its \" +\n-                                                        \"dependencies) \" +\n-                                                        \"aren't on the classpath or it failed to load.\" );\n-                }\n-                return provider;\n-            }\n-\n-            @Override\n-            public Iterable<IndexImplementation> all()\n-            {\n-                return indexProviders.values();\n-            }\n-        };\n-\n-        this.commitProcessFactory = commitProcessFactory;\n-        this.pageCache = pageCache;\n-        this.monitors.addMonitorListener( new LoggingLogFileMonitor( msgLog ) );\n-        this.collectionsFactorySupplier = collectionsFactorySupplier;\n-        this.failOnCorruptedLogFiles = config.get( GraphDatabaseSettings.fail_on_corrupted_log_files );\n-    }\n-\n-    @Override\n-    public void init()\n-    {\n-        // We do our own internal life management:\n-        // start() does life.init() and life.start(),\n-        // stop() does life.stop() and life.shutdown().\n-    }\n-\n-    @Override\n-    public void start() throws IOException\n-    {\n-        dependencies = new Dependencies();\n-        life = new LifeSupport();\n-\n-        life.add( recoveryCleanupWorkCollector );\n-\n-        AllByPrioritySelectionStrategy<IndexProvider> indexProviderSelection =\n-                new AllByPrioritySelectionStrategy<>();\n-        IndexProvider defaultIndexProvider =\n-                dependencyResolver.resolveDependency( IndexProvider.class, indexProviderSelection );\n-\n-        indexProviderMap =\n-                new DefaultIndexProviderMap( defaultIndexProvider,\n-                        indexProviderSelection.lowerPrioritizedCandidates() );\n-        dependencies.satisfyDependency( indexProviderMap );\n-\n-        IndexConfigStore indexConfigStore = new IndexConfigStore( storeDir, fs );\n-        dependencies.satisfyDependency( lockService );\n-        dependencies.satisfyDependency( indexConfigStore );\n-        life.add( indexConfigStore );\n-\n-        life.add( Lifecycles.multiple( indexProviders.values() ) );\n-\n-        // Check the tail of transaction logs and validate version\n-        final LogEntryReader<ReadableClosablePositionAwareChannel> logEntryReader = new VersionAwareLogEntryReader<>();\n-\n-        LogFiles logFiles = LogFilesBuilder.builder( storeDir, fs )\n-                .withLogEntryReader( logEntryReader )\n-                .withLogFileMonitor( physicalLogMonitor )\n-                .withConfig( config )\n-                .withDependencies( dependencies ).build();\n-\n-        LogTailScanner tailScanner = new LogTailScanner( logFiles, logEntryReader, monitors, failOnCorruptedLogFiles );\n-        monitors.addMonitorListener(\n-                new LoggingLogTailScannerMonitor( logService.getInternalLog( LogTailScanner.class ) ) );\n-        monitors.addMonitorListener( new ReverseTransactionCursorLoggingMonitor(\n-                logService.getInternalLog( ReversedSingleFileTransactionCursor.class ) ) );\n-        LogVersionUpgradeChecker.check( tailScanner, config );\n-\n-        // Upgrade the store before we begin\n-        RecordFormats formats = selectStoreFormats( config, storeDir, pageCache, logService );\n-        upgradeStore( formats, tailScanner );\n-\n-        // Build all modules and their services\n-        StorageEngine storageEngine = null;\n-        try\n+  enum Diagnostics implements DiagnosticsExtractor<NeoStoreDataSource>\n+  {\n+    TRANSACTION_RANGE(\"Transaction log:\")\n         {\n-            DatabaseSchemaState databaseSchemaState = new DatabaseSchemaState( logProvider );\n-\n-            SynchronizedArrayIdOrderingQueue explicitIndexTransactionOrdering =\n-                    new SynchronizedArrayIdOrderingQueue( 20 );\n-\n-            Supplier<KernelTransactionsSnapshot> transactionsSnapshotSupplier =\n-                    () -> kernelModule.kernelTransactions().get();\n-            idController.initialize( transactionsSnapshotSupplier );\n-\n-            storageEngine = buildStorageEngine(\n-                    propertyKeyTokenHolder, labelTokens, relationshipTypeTokens, explicitIndexProviderLookup,\n-                    indexConfigStore, databaseSchemaState, explicitIndexTransactionOrdering, operationalMode,\n-                    versionContextSupplier );\n-            life.add( logFiles );\n-\n-            TransactionIdStore transactionIdStore = dependencies.resolveDependency( TransactionIdStore.class );\n-\n-            versionContextSupplier.init( transactionIdStore::getLastClosedTransactionId );\n-\n-            LogVersionRepository logVersionRepository = dependencies.resolveDependency( LogVersionRepository.class );\n-            NeoStoreTransactionLogModule transactionLogModule = buildTransactionLogs( logFiles, config, logProvider,\n-                    scheduler, storageEngine, logEntryReader, explicitIndexTransactionOrdering, transactionIdStore );\n-            transactionLogModule.satisfyDependencies( dependencies );\n-\n-            buildRecovery( fs,\n-                    transactionIdStore,\n-                    tailScanner,\n-                    monitors.newMonitor( RecoveryMonitor.class ),\n-                    monitors.newMonitor( RecoveryStartInformationProvider.Monitor.class ),\n-                    logFiles, startupStatistics,\n-                    storageEngine, transactionLogModule.logicalTransactionStore(), logVersionRepository\n-            );\n-\n-            // At the time of writing this comes from the storage engine (IndexStoreView)\n-            PropertyAccessor propertyAccessor = dependencies.resolveDependency( PropertyAccessor.class );\n-\n-            final NeoStoreKernelModule kernelModule = buildKernel(\n-                    logFiles,\n-                    transactionLogModule.transactionAppender(),\n-                    dependencies.resolveDependency( IndexingService.class ),\n-                    storageEngine.storeReadLayer(),\n-                    databaseSchemaState,\n-                    dependencies.resolveDependency( LabelScanStore.class ),\n-                    storageEngine,\n-                    indexConfigStore,\n-                    transactionIdStore,\n-                    availabilityGuard,\n-                    clock,\n-                    propertyAccessor );\n-\n-            kernelModule.satisfyDependencies( dependencies );\n-\n-            // Do these assignments last so that we can ensure no cyclical dependencies exist\n-            this.storageEngine = storageEngine;\n-            this.transactionLogModule = transactionLogModule;\n-            this.kernelModule = kernelModule;\n-\n-            dependencies.satisfyDependency( this );\n-            dependencies.satisfyDependency( databaseSchemaState );\n-            dependencies.satisfyDependency( storageEngine.storeReadLayer() );\n-            dependencies.satisfyDependency( logEntryReader );\n-            dependencies.satisfyDependency( storageEngine );\n-            dependencies.satisfyDependency( explicitIndexProviderLookup );\n-        }\n-        catch ( Throwable e )\n-        {\n-            // Something unexpected happened during startup\n-            msgLog.warn( \"Exception occurred while setting up store modules. Attempting to close things down.\", e );\n+          @Override\n+          void dump(NeoStoreDataSource source, Logger log)\n+          {\n+            LogFiles logFiles = source.getDependencyResolver().resolveDependency(LogFiles.class);\n             try\n             {\n-                // Close the neostore, so that locks are released properly\n-                if ( storageEngine != null )\n+              for (long logVersion = logFiles.getLowestLogVersion();\n+                   logFiles.versionExists(logVersion); logVersion++)\n+              {\n+                if (logFiles.hasAnyEntries(logVersion))\n                 {\n-                    storageEngine.forceClose();\n+                  LogHeader header = logFiles.extractHeader(logVersion);\n+                  long firstTransactionIdInThisLog = header.lastCommittedTxId + 1;\n+                  log.log(\"Oldest transaction \" + firstTransactionIdInThisLog +\n+                      \" found in log with version \" + logVersion);\n+                  return;\n                 }\n+              }\n+              log.log(\"No transactions found in any log\");\n+            } catch (IOException e)\n+            {   // It's fine, we just tried to be nice and log this. Failing is OK\n+              log.log(\"Error trying to figure out oldest transaction in log\");\n             }\n-            catch ( Exception closeException )\n-            {\n-                msgLog.error( \"Couldn't close neostore after startup failure\", closeException );\n-            }\n-            throwIfUnchecked( e );\n-            throw new RuntimeException( e );\n-        }\n-\n-        // NOTE: please make sure this is performed after having added everything to the life, in fact we would like\n-        // to perform the checkpointing as first step when the life is shutdown.\n-        life.add( lifecycleToTriggerCheckPointOnShutdown() );\n-\n-        try\n-        {\n-            life.start();\n-        }\n-        catch ( Throwable e )\n-        {\n-            // Something unexpected happened during startup\n-            msgLog.warn( \"Exception occurred while starting the datasource. Attempting to close things down.\", e );\n-            try\n-            {\n-                life.shutdown();\n-                // Close the neostore, so that locks are released properly\n-                storageEngine.forceClose();\n-            }\n-            catch ( Exception closeException )\n-            {\n-                msgLog.error( \"Couldn't close neostore after startup failure\", closeException );\n-            }\n-            throw new RuntimeException( e );\n-        }\n-        /*\n-         * At this point recovery has completed and the datasource is ready for use. Whatever panic might have\n-         * happened before has been healed. So we can safely set the kernel health to ok.\n-         * This right now has any real effect only in the case of internal restarts (for example, after a store copy\n-         * in the case of HA). Standalone instances will have to be restarted by the user, as is proper for all\n-         * kernel panics.\n-         */\n-        databaseHealth.healed();\n-    }\n-\n-    private static RecordFormats selectStoreFormats( Config config, File storeDir, PageCache pageCache,\n-            LogService logService )\n-    {\n-        LogProvider logging = logService.getInternalLogProvider();\n-        RecordFormats formats = RecordFormatSelector.selectNewestFormat( config, storeDir, pageCache, logging );\n-        new RecordFormatPropertyConfigurator( formats, config ).configure();\n-        return formats;\n-    }\n-\n-    private void upgradeStore( RecordFormats format, LogTailScanner tailScanner )\n-    {\n-        VisibleMigrationProgressMonitor progressMonitor =\n-                new VisibleMigrationProgressMonitor( logService.getUserLog( StoreMigrator.class ) );\n-        new DatabaseMigrator(\n-                progressMonitor,\n-                fs,\n-                config,\n-                logService,\n-                indexProviderMap,\n-                indexProviders,\n-                pageCache,\n-                format, tailScanner ).migrate( storeDir );\n-    }\n-\n-    private StorageEngine buildStorageEngine(\n-            PropertyKeyTokenHolder propertyKeyTokenHolder, LabelTokenHolder labelTokens,\n-            RelationshipTypeTokenHolder relationshipTypeTokens,\n-            ExplicitIndexProviderLookup explicitIndexProviderLookup, IndexConfigStore indexConfigStore,\n-            SchemaState schemaState, SynchronizedArrayIdOrderingQueue explicitIndexTransactionOrdering,\n-            OperationalMode operationalMode, VersionContextSupplier versionContextSupplier )\n-    {\n-        RecordStorageEngine storageEngine =\n-                new RecordStorageEngine( storeDir, config, pageCache, fs, logProvider, propertyKeyTokenHolder,\n-                        labelTokens, relationshipTypeTokens, schemaState, constraintSemantics, scheduler,\n-                        tokenNameLookup, lockService, indexProviderMap, indexingServiceMonitor, databaseHealth,\n-                        explicitIndexProviderLookup, indexConfigStore,\n-                        explicitIndexTransactionOrdering, idGeneratorFactory, idController, monitors,\n-                        recoveryCleanupWorkCollector,\n-                        operationalMode, versionContextSupplier );\n-\n-        // We pretend that the storage engine abstract hides all details within it. Whereas that's mostly\n-        // true it's not entirely true for the time being. As long as we need this call below, which\n-        // makes available one or more internal things to the outside world, there are leaks to plug.\n-        storageEngine.satisfyDependencies( dependencies );\n-\n-        return life.add( storageEngine );\n-    }\n-\n-    private NeoStoreTransactionLogModule buildTransactionLogs( LogFiles logFiles, Config config,\n-            LogProvider logProvider, JobScheduler scheduler, StorageEngine storageEngine,\n-            LogEntryReader<ReadableClosablePositionAwareChannel> logEntryReader,\n-            SynchronizedArrayIdOrderingQueue explicitIndexTransactionOrdering, TransactionIdStore transactionIdStore )\n-    {\n-        TransactionMetadataCache transactionMetadataCache = new TransactionMetadataCache( 100_000 );\n-        if ( config.get( GraphDatabaseFacadeFactory.Configuration.ephemeral ) )\n-        {\n-            config.augmentDefaults( GraphDatabaseSettings.keep_logical_logs, \"1 files\" );\n-        }\n-\n-        final LogPruning logPruning =\n-                new LogPruningImpl( fs, logFiles, logProvider, new LogPruneStrategyFactory(), clock, config );\n-\n-        final LogRotation logRotation =\n-                new LogRotationImpl( monitors.newMonitor( LogRotation.Monitor.class ), logFiles, databaseHealth );\n-\n-        final TransactionAppender appender = life.add( new BatchingTransactionAppender(\n-                logFiles, logRotation, transactionMetadataCache, transactionIdStore, explicitIndexTransactionOrdering,\n-                databaseHealth ) );\n-        final LogicalTransactionStore logicalTransactionStore =\n-                new PhysicalLogicalTransactionStore( logFiles, transactionMetadataCache, logEntryReader, monitors,\n-                        failOnCorruptedLogFiles );\n-\n-        CheckPointThreshold threshold = CheckPointThreshold.createThreshold( config, clock, logPruning, logProvider );\n-\n-        final CheckPointerImpl checkPointer = new CheckPointerImpl(\n-                transactionIdStore, threshold, storageEngine, logPruning, appender, databaseHealth, logProvider,\n-                tracers.checkPointTracer, ioLimiter, storeCopyCheckPointMutex );\n-\n-        long recurringPeriod = threshold.checkFrequencyMillis();\n-        CheckPointScheduler checkPointScheduler = new CheckPointScheduler( checkPointer, ioLimiter, scheduler,\n-                recurringPeriod, databaseHealth );\n-\n-        life.add( checkPointer );\n-        life.add( checkPointScheduler );\n-\n-        return new NeoStoreTransactionLogModule( logicalTransactionStore, logFiles,\n-                logRotation, checkPointer, appender, explicitIndexTransactionOrdering );\n-    }\n-\n-    private void buildRecovery(\n-            final FileSystemAbstraction fileSystemAbstraction,\n-            TransactionIdStore transactionIdStore,\n-            LogTailScanner tailScanner,\n-            RecoveryMonitor recoveryMonitor,\n-            RecoveryStartInformationProvider.Monitor positionMonitor,\n-            final LogFiles logFiles,\n-            final StartupStatisticsProvider startupStatistics,\n-            StorageEngine storageEngine,\n-            LogicalTransactionStore logicalTransactionStore,\n-            LogVersionRepository logVersionRepository )\n-    {\n-        RecoveryService recoveryService = new DefaultRecoveryService( storageEngine, tailScanner, transactionIdStore,\n-                logicalTransactionStore, logVersionRepository, positionMonitor );\n-        CorruptedLogsTruncator logsTruncator = new CorruptedLogsTruncator( storeDir, logFiles, fileSystemAbstraction );\n-        ProgressReporter progressReporter = new LogProgressReporter( logService.getInternalLog( Recovery.class ) );\n-        Recovery recovery = new Recovery( recoveryService, startupStatistics, logsTruncator, recoveryMonitor,\n-                progressReporter, failOnCorruptedLogFiles );\n-        life.add( recovery );\n-    }\n-\n-    private NeoStoreKernelModule buildKernel( LogFiles logFiles, TransactionAppender appender,\n-            IndexingService indexingService,\n-            StoreReadLayer storeLayer, DatabaseSchemaState databaseSchemaState, LabelScanStore labelScanStore,\n-            StorageEngine storageEngine, IndexConfigStore indexConfigStore, TransactionIdStore transactionIdStore,\n-            AvailabilityGuard availabilityGuard, SystemNanoClock clock, PropertyAccessor propertyAccessor )\n-    {\n-        AtomicReference<CpuClock> cpuClockRef = setupCpuClockAtomicReference();\n-        AtomicReference<HeapAllocation> heapAllocationRef = setupHeapAllocationAtomicReference();\n-\n-        TransactionCommitProcess transactionCommitProcess = commitProcessFactory.create( appender, storageEngine,\n-                config );\n-\n-        /*\n-         * This is used by explicit indexes and constraint indexes whenever a transaction is to be spawned\n-         * from within an existing transaction. It smells, and we should look over alternatives when time permits.\n-         */\n-        Supplier<Kernel> kernelProvider = () -> kernelModule.kernelAPI();\n-\n-        ConstraintIndexCreator constraintIndexCreator = new ConstraintIndexCreator( kernelProvider, indexingService, propertyAccessor, logProvider );\n-\n-        ExplicitIndexStore explicitIndexStore = new ExplicitIndexStore( config,\n-                indexConfigStore, kernelProvider, explicitIndexProviderLookup );\n-\n-        StatementOperationParts statementOperationParts = dependencies.satisfyDependency(\n-                buildStatementOperations(\n-                        cpuClockRef,\n-                        heapAllocationRef ) );\n-\n-        TransactionHooks hooks = new TransactionHooks();\n-\n-        KernelTransactions kernelTransactions = life.add( new KernelTransactions( statementLocksFactory,\n-                constraintIndexCreator, statementOperationParts, schemaWriteGuard, transactionHeaderInformationFactory,\n-                transactionCommitProcess, indexConfigStore, explicitIndexProviderLookup, hooks, transactionMonitor,\n-                availabilityGuard, tracers, storageEngine, procedures, transactionIdStore, clock,\n-                cpuClockRef, heapAllocationRef, accessCapability, DefaultCursors::new, autoIndexing,\n-                explicitIndexStore, versionContextSupplier, collectionsFactorySupplier, constraintSemantics,\n-                databaseSchemaState, indexingService, indexProviderMap ) );\n-\n-        buildTransactionMonitor( kernelTransactions, clock, config );\n-\n-        final KernelImpl kernel = new KernelImpl( kernelTransactions, hooks, databaseHealth, transactionMonitor, procedures,\n-                config, storageEngine );\n-\n-        kernel.registerTransactionHook( transactionEventHandlers );\n-        life.add( kernel );\n-\n-        final NeoStoreFileListing fileListing = new NeoStoreFileListing( storeDir, logFiles, labelScanStore,\n-                indexingService, explicitIndexProviderLookup, storageEngine );\n-        dependencies.satisfyDependency( fileListing );\n-\n-        return new NeoStoreKernelModule( transactionCommitProcess, kernel, kernelTransactions, fileListing );\n-    }\n-\n-    private AtomicReference<CpuClock> setupCpuClockAtomicReference()\n-    {\n-        AtomicReference<CpuClock> cpuClock = new AtomicReference<>( CpuClock.NOT_AVAILABLE );\n-        BiConsumer<Boolean,Boolean> cpuClockUpdater = ( before, after ) ->\n-        {\n-            if ( after )\n-            {\n-                cpuClock.set( CpuClock.CPU_CLOCK );\n-            }\n-            else\n-            {\n-                cpuClock.set( CpuClock.NOT_AVAILABLE );\n-            }\n+          }\n         };\n-        cpuClockUpdater.accept( null, config.get( GraphDatabaseSettings.track_query_cpu_time ) );\n-        config.registerDynamicUpdateListener( GraphDatabaseSettings.track_query_cpu_time, cpuClockUpdater );\n-        return cpuClock;\n-    }\n \n-    private AtomicReference<HeapAllocation> setupHeapAllocationAtomicReference()\n-    {\n-        AtomicReference<HeapAllocation> heapAllocation = new AtomicReference<>( HeapAllocation.NOT_AVAILABLE );\n-        BiConsumer<Boolean,Boolean> heapAllocationUpdater = ( before, after ) ->\n-        {\n-            if ( after )\n-            {\n-                heapAllocation.set( HeapAllocation.HEAP_ALLOCATION );\n-            }\n-            else\n-            {\n-                heapAllocation.set( HeapAllocation.NOT_AVAILABLE );\n-            }\n-        };\n-        heapAllocationUpdater.accept( null, config.get( GraphDatabaseSettings.track_query_allocation ) );\n-        config.registerDynamicUpdateListener( GraphDatabaseSettings.track_query_allocation, heapAllocationUpdater );\n-        return heapAllocation;\n-    }\n+    private final String message;\n \n-    private void buildTransactionMonitor( KernelTransactions kernelTransactions, SystemNanoClock clock, Config config )\n+    Diagnostics(String message)\n     {\n-        KernelTransactionTimeoutMonitor kernelTransactionTimeoutMonitor =\n-                new KernelTransactionTimeoutMonitor( kernelTransactions, clock, logService );\n-        dependencies.satisfyDependency( kernelTransactionTimeoutMonitor );\n-        KernelTransactionMonitorScheduler transactionMonitorScheduler =\n-                new KernelTransactionMonitorScheduler( kernelTransactionTimeoutMonitor, scheduler,\n-                        config.get( GraphDatabaseSettings.transaction_monitor_check_interval ).toMillis() );\n-        life.add( transactionMonitorScheduler );\n+      this.message = message;\n     }\n \n     @Override\n-    public synchronized void stop()\n-    {\n-        if ( !life.isRunning() )\n+    public void dumpDiagnostics(final NeoStoreDataSource source, DiagnosticsPhase phase, Logger logger)\n+    {\n+      if (applicable(phase))\n+      {\n+        logger.log(message);\n+        dump(source, logger);\n+      }\n+    }\n+\n+    boolean applicable(DiagnosticsPhase phase)\n+    {\n+      return phase.isInitialization() || phase.isExplicitlyRequested();\n+    }\n+\n+    abstract void dump(NeoStoreDataSource source, Logger logger);\n+  }\n+\n+  public static final String DEFAULT_DATA_SOURCE_NAME = \"nioneodb\";\n+\n+  private final Monitors monitors;\n+  private final Tracers tracers;\n+\n+  private final Log msgLog;\n+  private final LogService logService;\n+  private final AutoIndexing autoIndexing;\n+  private final LogProvider logProvider;\n+  private final DependencyResolver dependencyResolver;\n+  private final TokenNameLookup tokenNameLookup;\n+  private final PropertyKeyTokenHolder propertyKeyTokenHolder;\n+  private final LabelTokenHolder labelTokens;\n+  private final RelationshipTypeTokenHolder relationshipTypeTokens;\n+  private final StatementLocksFactory statementLocksFactory;\n+  private final SchemaWriteGuard schemaWriteGuard;\n+  private final TransactionEventHandlers transactionEventHandlers;\n+  private final IdGeneratorFactory idGeneratorFactory;\n+  private final JobScheduler scheduler;\n+  private final Config config;\n+  private final LockService lockService;\n+  private final IndexingService.Monitor indexingServiceMonitor;\n+  private final FileSystemAbstraction fs;\n+  private final TransactionMonitor transactionMonitor;\n+  private final DatabaseHealth databaseHealth;\n+  private final LogFileCreationMonitor physicalLogMonitor;\n+  private final TransactionHeaderInformationFactory transactionHeaderInformationFactory;\n+  private final StartupStatisticsProvider startupStatistics;\n+  private final CommitProcessFactory commitProcessFactory;\n+  private final PageCache pageCache;\n+  private final Map<String, IndexImplementation> indexProviders = new HashMap<>();\n+  private final ExplicitIndexProviderLookup explicitIndexProviderLookup;\n+  private final ConstraintSemantics constraintSemantics;\n+  private final Procedures procedures;\n+  private final IOLimiter ioLimiter;\n+  private final AvailabilityGuard availabilityGuard;\n+  private final SystemNanoClock clock;\n+  private final StoreCopyCheckPointMutex storeCopyCheckPointMutex;\n+  private final CollectionsFactorySupplier collectionsFactorySupplier;\n+\n+  private Dependencies dependencies;\n+  private LifeSupport life;\n+  private IndexProviderMap indexProviderMap;\n+  private File storeDir;\n+  private boolean readOnly;\n+  private final IdController idController;\n+  private final OperationalMode operationalMode;\n+  private final RecoveryCleanupWorkCollector recoveryCleanupWorkCollector;\n+  private final VersionContextSupplier versionContextSupplier;\n+  private final AccessCapability accessCapability;\n+\n+  private StorageEngine storageEngine;\n+  private NeoStoreTransactionLogModule transactionLogModule;\n+  private NeoStoreKernelModule kernelModule;\n+\n+  private final boolean failOnCorruptedLogFiles;\n+\n+  public NeoStoreDataSource(File storeDir, Config config, IdGeneratorFactory idGeneratorFactory,\n+                            LogService logService, JobScheduler scheduler, TokenNameLookup tokenNameLookup,\n+                            DependencyResolver dependencyResolver, PropertyKeyTokenHolder propertyKeyTokens,\n+                            LabelTokenHolder labelTokens, RelationshipTypeTokenHolder relationshipTypeTokens,\n+                            StatementLocksFactory statementLocksFactory, SchemaWriteGuard schemaWriteGuard,\n+                            TransactionEventHandlers transactionEventHandlers, IndexingService.Monitor indexingServiceMonitor,\n+                            FileSystemAbstraction fs, TransactionMonitor transactionMonitor, DatabaseHealth databaseHealth,\n+                            LogFileCreationMonitor physicalLogMonitor,\n+                            TransactionHeaderInformationFactory transactionHeaderInformationFactory,\n+                            StartupStatisticsProvider startupStatistics, CommitProcessFactory commitProcessFactory,\n+                            AutoIndexing autoIndexing, PageCache pageCache, ConstraintSemantics constraintSemantics, Monitors monitors,\n+                            Tracers tracers, Procedures procedures, IOLimiter ioLimiter, AvailabilityGuard availabilityGuard,\n+                            SystemNanoClock clock, AccessCapability accessCapability, StoreCopyCheckPointMutex storeCopyCheckPointMutex,\n+                            RecoveryCleanupWorkCollector recoveryCleanupWorkCollector, IdController idController,\n+                            OperationalMode operationalMode, VersionContextSupplier versionContextSupplier,\n+                            CollectionsFactorySupplier collectionsFactorySupplier)\n+  {\n+    this.storeDir = storeDir;\n+    this.config = config;\n+    this.idGeneratorFactory = idGeneratorFactory;\n+    this.tokenNameLookup = tokenNameLookup;\n+    this.dependencyResolver = dependencyResolver;\n+    this.scheduler = scheduler;\n+    this.logService = logService;\n+    this.autoIndexing = autoIndexing;\n+    this.storeCopyCheckPointMutex = storeCopyCheckPointMutex;\n+    this.logProvider = logService.getInternalLogProvider();\n+    this.propertyKeyTokenHolder = propertyKeyTokens;\n+    this.labelTokens = labelTokens;\n+    this.relationshipTypeTokens = relationshipTypeTokens;\n+    this.statementLocksFactory = statementLocksFactory;\n+    this.schemaWriteGuard = schemaWriteGuard;\n+    this.transactionEventHandlers = transactionEventHandlers;\n+    this.indexingServiceMonitor = indexingServiceMonitor;\n+    this.fs = fs;\n+    this.transactionMonitor = transactionMonitor;\n+    this.databaseHealth = databaseHealth;\n+    this.physicalLogMonitor = physicalLogMonitor;\n+    this.transactionHeaderInformationFactory = transactionHeaderInformationFactory;\n+    this.startupStatistics = startupStatistics;\n+    this.constraintSemantics = constraintSemantics;\n+    this.monitors = monitors;\n+    this.tracers = tracers;\n+    this.procedures = procedures;\n+    this.ioLimiter = ioLimiter;\n+    this.availabilityGuard = availabilityGuard;\n+    this.clock = clock;\n+    this.accessCapability = accessCapability;\n+    this.recoveryCleanupWorkCollector = recoveryCleanupWorkCollector;\n+\n+    readOnly = config.get(GraphDatabaseSettings.read_only);\n+    this.idController = idController;\n+    this.operationalMode = operationalMode;\n+    this.versionContextSupplier = versionContextSupplier;\n+    msgLog = logProvider.getLog(getClass());\n+    this.lockService = new ReentrantLockService();\n+    this.explicitIndexProviderLookup = new ExplicitIndexProviderLookup()\n+    {\n+      @Override\n+      public IndexImplementation apply(String name)\n+      {\n+        assert name != null : \"Null provider name supplied\";\n+        IndexImplementation provider = indexProviders.get(name);\n+        if (provider == null)\n         {\n-            return;\n+          throw new IllegalArgumentException(\"No index provider '\" + name +\n+              \"' found. Maybe the intended provider (or one more of its \" +\n+              \"dependencies) \" +\n+              \"aren't on the classpath or it failed to load.\");\n         }\n-\n-        life.stop();\n-        awaitAllClosingTransactions();\n-        // Checkpointing is now triggered as part of life.shutdown see lifecycleToTriggerCheckPointOnShutdown()\n-        // Shut down all services in here, effectively making the database unusable for anyone who tries.\n-        life.shutdown();\n-    }\n-\n-    private void awaitAllClosingTransactions()\n-    {\n-        KernelTransactions kernelTransactions = kernelModule.kernelTransactions();\n-        kernelTransactions.terminateTransactions();\n-\n-        while ( kernelTransactions.haveClosingTransaction() )\n+        return provider;\n+      }\n+\n+      @Override\n+      public Iterable<IndexImplementation> all()\n+      {\n+        return indexProviders.values();\n+      }\n+    };\n+\n+    this.commitProcessFactory = commitProcessFactory;\n+    this.pageCache = pageCache;\n+    this.monitors.addMonitorListener(new LoggingLogFileMonitor(msgLog));\n+    this.collectionsFactorySupplier = collectionsFactorySupplier;\n+    this.failOnCorruptedLogFiles = config.get(GraphDatabaseSettings.fail_on_corrupted_log_files);\n+  }\n+\n+  @Override\n+  public void init()\n+  {\n+    // We do our own internal life management:\n+    // start() does life.init() and life.start(),\n+    // stop() does life.stop() and life.shutdown().\n+  }\n+\n+  @Override\n+  public void start() throws IOException\n+  {\n+    dependencies = new Dependencies();\n+    life = new LifeSupport();\n+\n+    life.add(recoveryCleanupWorkCollector);\n+\n+    AllByPrioritySelectionStrategy<IndexProvider> indexProviderSelection =\n+        new AllByPrioritySelectionStrategy<>();\n+    IndexProvider defaultIndexProvider =\n+        dependencyResolver.resolveDependency(IndexProvider.class, indexProviderSelection);\n+\n+    indexProviderMap =\n+        new DefaultIndexProviderMap(defaultIndexProvider,\n+            indexProviderSelection.lowerPrioritizedCandidates());\n+    dependencies.satisfyDependency(indexProviderMap);\n+\n+    IndexConfigStore indexConfigStore = new IndexConfigStore(storeDir, fs);\n+    dependencies.satisfyDependency(lockService);\n+    dependencies.satisfyDependency(indexConfigStore);\n+    life.add(indexConfigStore);\n+\n+    life.add(Lifecycles.multiple(indexProviders.values()));\n+\n+    // Check the tail of transaction logs and validate version\n+    final LogEntryReader<ReadableClosablePositionAwareChannel> logEntryReader = new VersionAwareLogEntryReader<>();\n+\n+    LogFiles logFiles = LogFilesBuilder.builder(storeDir, fs)\n+        .withLogEntryReader(logEntryReader)\n+        .withLogFileMonitor(physicalLogMonitor)\n+        .withConfig(config)\n+        .withDependencies(dependencies).build();\n+\n+    LogTailScanner tailScanner = new LogTailScanner(logFiles, logEntryReader, monitors, failOnCorruptedLogFiles);\n+    monitors.addMonitorListener(\n+        new LoggingLogTailScannerMonitor(logService.getInternalLog(LogTailScanner.class)));\n+    monitors.addMonitorListener(new ReverseTransactionCursorLoggingMonitor(\n+        logService.getInternalLog(ReversedSingleFileTransactionCursor.class)));\n+    LogVersionUpgradeChecker.check(tailScanner, config);\n+\n+    // Upgrade the store before we begin\n+    RecordFormats formats = selectStoreFormats(config, storeDir, pageCache, logService);\n+    upgradeStore(formats, tailScanner);\n+\n+    // Build all modules and their services\n+    StorageEngine storageEngine = null;\n+    try\n+    {\n+      DatabaseSchemaState databaseSchemaState = new DatabaseSchemaState(logProvider);\n+\n+      SynchronizedArrayIdOrderingQueue explicitIndexTransactionOrdering =\n+          new SynchronizedArrayIdOrderingQueue(20);\n+\n+      Supplier<KernelTransactionsSnapshot> transactionsSnapshotSupplier =\n+          () -> kernelModule.kernelTransactions().get();\n+      idController.initialize(transactionsSnapshotSupplier);\n+\n+      storageEngine = buildStorageEngine(\n+          propertyKeyTokenHolder, labelTokens, relationshipTypeTokens, explicitIndexProviderLookup,\n+          indexConfigStore, databaseSchemaState, explicitIndexTransactionOrdering, operationalMode,\n+          versionContextSupplier);\n+      life.add(logFiles);\n+\n+      TransactionIdStore transactionIdStore = dependencies.resolveDependency(TransactionIdStore.class);\n+\n+      versionContextSupplier.init(transactionIdStore::getLastClosedTransactionId);\n+\n+      LogVersionRepository logVersionRepository = dependencies.resolveDependency(LogVersionRepository.class);\n+      NeoStoreTransactionLogModule transactionLogModule = buildTransactionLogs(logFiles, config, logProvider,\n+          scheduler, storageEngine, logEntryReader, explicitIndexTransactionOrdering, transactionIdStore);\n+      transactionLogModule.satisfyDependencies(dependencies);\n+\n+      buildRecovery(fs,\n+          transactionIdStore,\n+          tailScanner,\n+          monitors.newMonitor(RecoveryMonitor.class),\n+          monitors.newMonitor(RecoveryStartInformationProvider.Monitor.class),\n+          logFiles, startupStatistics,\n+          storageEngine, transactionLogModule.logicalTransactionStore(), logVersionRepository\n+      );\n+\n+      // At the time of writing this comes from the storage engine (IndexStoreView)\n+      PropertyAccessor propertyAccessor = dependencies.resolveDependency(PropertyAccessor.class);\n+\n+      final NeoStoreKernelModule kernelModule = buildKernel(\n+          logFiles,\n+          transactionLogModule.transactionAppender(),\n+          dependencies.resolveDependency(IndexingService.class),\n+          storageEngine.storeReadLayer(),\n+          databaseSchemaState,\n+          dependencies.resolveDependency(LabelScanStore.class),\n+          storageEngine,\n+          indexConfigStore,\n+          transactionIdStore,\n+          availabilityGuard,\n+          clock,\n+          propertyAccessor);\n+\n+      kernelModule.satisfyDependencies(dependencies);\n+\n+      // Do these assignments last so that we can ensure no cyclical dependencies exist\n+      this.storageEngine = storageEngine;\n+      this.transactionLogModule = transactionLogModule;\n+      this.kernelModule = kernelModule;\n+\n+      dependencies.satisfyDependency(this);\n+      dependencies.satisfyDependency(databaseSchemaState);\n+      dependencies.satisfyDependency(storageEngine.storeReadLayer());\n+      dependencies.satisfyDependency(logEntryReader);\n+      dependencies.satisfyDependency(storageEngine);\n+      dependencies.satisfyDependency(explicitIndexProviderLookup);\n+    } catch (Throwable e)\n+    {\n+      // Something unexpected happened during startup\n+      msgLog.warn(\"Exception occurred while setting up store modules. Attempting to close things down.\", e);\n+      try\n+      {\n+        // Close the neostore, so that locks are released properly\n+        if (storageEngine != null)\n         {\n-            LockSupport.parkNanos( TimeUnit.MILLISECONDS.toNanos( 10 ) );\n+          storageEngine.forceClose();\n         }\n+      } catch (Exception closeException)\n+      {\n+        msgLog.error(\"Couldn't close neostore after startup failure\", closeException);\n+      }\n+      throwIfUnchecked(e);\n+      throw new RuntimeException(e);\n     }\n \n-    private Lifecycle lifecycleToTriggerCheckPointOnShutdown()\n-    {\n-        // Write new checkpoint in the log only if the kernel is healthy.\n-        // We cannot throw here since we need to shutdown without exceptions,\n-        // so let's make the checkpointing part of the life, so LifeSupport can handle exceptions properly\n-        return new LifecycleAdapter()\n-        {\n-            @Override\n-            public void shutdown() throws IOException\n-            {\n-                if ( databaseHealth.isHealthy() )\n-                {\n-                    // Flushing of neo stores happens as part of the checkpoint\n-                    transactionLogModule.checkPointing()\n-                            .forceCheckPoint( new SimpleTriggerInfo( \"database shutdown\" ) );\n-                }\n-            }\n-        };\n-    }\n-\n-    @Override\n-    public void shutdown()\n-    {   // We do our own internal life management:\n-        // start() does life.init() and life.start(),\n-        // stop() does life.stop() and life.shutdown().\n-    }\n+    // NOTE: please make sure this is performed after having added everything to the life, in fact we would like\n+    // to perform the checkpointing as first step when the life is shutdown.\n+    life.add(lifecycleToTriggerCheckPointOnShutdown());\n \n-    public StoreId getStoreId()\n+    try\n     {\n-        return getDependencyResolver().resolveDependency( MetaDataStore.class ).getStoreId();\n-    }\n-\n-    public File getStoreDir()\n-    {\n-        return storeDir;\n-    }\n-\n-    public boolean isReadOnly()\n-    {\n-        return readOnly;\n-    }\n-\n-    public InwardKernel getKernel()\n-    {\n-        return kernelModule.kernelAPI();\n-    }\n-\n-    public ResourceIterator<StoreFileMetadata> listStoreFiles( boolean includeLogs ) throws IOException\n+      life.start();\n+    } catch (Throwable e)\n     {\n-        if ( includeLogs )\n-        {\n-            return getNeoStoreFileListing().builder().build();\n-        }\n-        else\n-        {\n-            return getNeoStoreFileListing().builder().excludeLogFiles().build();\n-        }\n-    }\n-\n-    public NeoStoreFileListing getNeoStoreFileListing()\n-    {\n-        return kernelModule.fileListing();\n-    }\n-\n-    public void registerDiagnosticsWith( DiagnosticsManager manager )\n-    {\n-        storageEngine.registerDiagnostics( manager );\n-        manager.registerAll( Diagnostics.class, this );\n-    }\n-\n-    public StoreReadLayer getStoreLayer()\n-    {\n-        return storageEngine.storeReadLayer();\n-    }\n-\n-    public DependencyResolver getDependencyResolver()\n-    {\n-        return dependencies;\n-    }\n-\n-    private StatementOperationParts buildStatementOperations( AtomicReference<CpuClock> cpuClockRef,\n-            AtomicReference<HeapAllocation> heapAllocationRef )\n-    {\n-        QueryRegistrationOperations queryRegistrationOperations =\n-                new StackingQueryRegistrationOperations( clock, cpuClockRef, heapAllocationRef );\n-\n-        return new StatementOperationParts( queryRegistrationOperations );\n-    }\n-\n-    @Override\n-    public void registerIndexProvider( String name, IndexImplementation index )\n-    {\n-        assert !indexProviders.containsKey( name ) : \"Index provider '\" + name + \"' already registered\";\n-        indexProviders.put( name, index );\n-    }\n-\n-    @Override\n-    public boolean unregisterIndexProvider( String name )\n-    {\n-        IndexImplementation removed = indexProviders.remove( name );\n-        return removed != null;\n-    }\n-\n-    /**\n-     * Hook that must be called before there is an HA mode switch (eg master/slave switch),\n-     * i.e. after state has changed to pending and before state is about to change to the new target state.\n-     * This must only be called when the database is otherwise inaccessible.\n+      // Something unexpected happened during startup\n+      msgLog.warn(\"Exception occurred while starting the datasource. Attempting to close things down.\", e);\n+      try\n+      {\n+        life.shutdown();\n+        // Close the neostore, so that locks are released properly\n+        storageEngine.forceClose();\n+      } catch (Exception closeException)\n+      {\n+        msgLog.error(\"Couldn't close neostore after startup failure\", closeException);\n+      }\n+      throw new RuntimeException(e);\n+    }\n+    /*\n+     * At this point recovery has completed and the datasource is ready for use. Whatever panic might have\n+     * happened before has been healed. So we can safely set the kernel health to ok.\n+     * This right now has any real effect only in the case of internal restarts (for example, after a store copy\n+     * in the case of HA). Standalone instances will have to be restarted by the user, as is proper for all\n+     * kernel panics.\n      */\n-    public void beforeModeSwitch()\n-    {\n-        clearTransactions();\n-    }\n-\n-    private void clearTransactions()\n-    {\n-        // We don't want to have buffered ids carry over to the new role\n-        storageEngine.clearBufferedIds();\n-\n-        // Get rid of all pooled transactions, as they will otherwise reference\n-        // components that have been swapped out during the mode switch.\n-        kernelModule.kernelTransactions().disposeAll();\n-    }\n-\n-    /**\n-     * Hook that must be called after an HA mode switch (eg master/slave switch) have completed.\n-     * This must only be called when the database is otherwise inaccessible.\n+    databaseHealth.healed();\n+  }\n+\n+  private static RecordFormats selectStoreFormats(Config config, File storeDir, PageCache pageCache,\n+                                                  LogService logService)\n+  {\n+    LogProvider logging = logService.getInternalLogProvider();\n+    RecordFormats formats = RecordFormatSelector.selectNewestFormat(config, storeDir, pageCache, logging);\n+    new RecordFormatPropertyConfigurator(formats, config).configure();\n+    return formats;\n+  }\n+\n+  private void upgradeStore(RecordFormats format, LogTailScanner tailScanner)\n+  {\n+    VisibleMigrationProgressMonitor progressMonitor =\n+        new VisibleMigrationProgressMonitor(logService.getUserLog(StoreMigrator.class));\n+    new DatabaseMigrator(\n+        progressMonitor,\n+        fs,\n+        config,\n+        logService,\n+        indexProviderMap,\n+        indexProviders,\n+        pageCache,\n+        format, tailScanner).migrate(storeDir);\n+  }\n+\n+  private StorageEngine buildStorageEngine(\n+      PropertyKeyTokenHolder propertyKeyTokenHolder, LabelTokenHolder labelTokens,\n+      RelationshipTypeTokenHolder relationshipTypeTokens,\n+      ExplicitIndexProviderLookup explicitIndexProviderLookup, IndexConfigStore indexConfigStore,\n+      SchemaState schemaState, SynchronizedArrayIdOrderingQueue explicitIndexTransactionOrdering,\n+      OperationalMode operationalMode, VersionContextSupplier versionContextSupplier)\n+  {\n+    RecordStorageEngine storageEngine =\n+        new RecordStorageEngine(storeDir, config, pageCache, fs, logProvider, propertyKeyTokenHolder,\n+            labelTokens, relationshipTypeTokens, schemaState, constraintSemantics, scheduler,\n+            tokenNameLookup, lockService, indexProviderMap, indexingServiceMonitor, databaseHealth,\n+            explicitIndexProviderLookup, indexConfigStore,\n+            explicitIndexTransactionOrdering, idGeneratorFactory, idController, monitors,\n+            recoveryCleanupWorkCollector,\n+            operationalMode, versionContextSupplier);\n+\n+    // We pretend that the storage engine abstract hides all details within it. Whereas that's mostly\n+    // true it's not entirely true for the time being. As long as we need this call below, which\n+    // makes available one or more internal things to the outside world, there are leaks to plug.\n+    storageEngine.satisfyDependencies(dependencies);\n+\n+    return life.add(storageEngine);\n+  }\n+\n+  private NeoStoreTransactionLogModule buildTransactionLogs(LogFiles logFiles, Config config,\n+                                                            LogProvider logProvider, JobScheduler scheduler, StorageEngine storageEngine,\n+                                                            LogEntryReader<ReadableClosablePositionAwareChannel> logEntryReader,\n+                                                            SynchronizedArrayIdOrderingQueue explicitIndexTransactionOrdering,\n+                                                            TransactionIdStore transactionIdStore)\n+  {\n+    TransactionMetadataCache transactionMetadataCache = new TransactionMetadataCache(100_000);\n+    if (config.get(GraphDatabaseFacadeFactory.Configuration.ephemeral))\n+    {\n+      config.augmentDefaults(GraphDatabaseSettings.keep_logical_logs, \"1 files\");\n+    }\n+\n+    final LogPruning logPruning =\n+        new LogPruningImpl(fs, logFiles, logProvider, new LogPruneStrategyFactory(), clock, config);\n+\n+    final LogRotation logRotation =\n+        new LogRotationImpl(monitors.newMonitor(LogRotation.Monitor.class), logFiles, databaseHealth);\n+\n+    final TransactionAppender appender = life.add(new BatchingTransactionAppender(\n+        logFiles, logRotation, transactionMetadataCache, transactionIdStore, explicitIndexTransactionOrdering,\n+        databaseHealth));\n+    final LogicalTransactionStore logicalTransactionStore =\n+        new PhysicalLogicalTransactionStore(logFiles, transactionMetadataCache, logEntryReader, monitors,\n+            failOnCorruptedLogFiles);\n+\n+    CheckPointThreshold threshold = CheckPointThreshold.createThreshold(config, clock, logPruning, logProvider);\n+\n+    final CheckPointerImpl checkPointer = new CheckPointerImpl(\n+        transactionIdStore, threshold, storageEngine, logPruning, appender, databaseHealth, logProvider,\n+        tracers.checkPointTracer, ioLimiter, storeCopyCheckPointMutex);\n+\n+    long recurringPeriod = threshold.checkFrequencyMillis();\n+    CheckPointScheduler checkPointScheduler = new CheckPointScheduler(checkPointer, ioLimiter, scheduler,\n+        recurringPeriod, databaseHealth);\n+\n+    life.add(checkPointer);\n+    life.add(checkPointScheduler);\n+\n+    return new NeoStoreTransactionLogModule(logicalTransactionStore, logFiles,\n+        logRotation, checkPointer, appender, explicitIndexTransactionOrdering);\n+  }\n+\n+  private void buildRecovery(\n+      final FileSystemAbstraction fileSystemAbstraction,\n+      TransactionIdStore transactionIdStore,\n+      LogTailScanner tailScanner,\n+      RecoveryMonitor recoveryMonitor,\n+      RecoveryStartInformationProvider.Monitor positionMonitor,\n+      final LogFiles logFiles,\n+      final StartupStatisticsProvider startupStatistics,\n+      StorageEngine storageEngine,\n+      LogicalTransactionStore logicalTransactionStore,\n+      LogVersionRepository logVersionRepository)\n+  {\n+    RecoveryService recoveryService = new DefaultRecoveryService(storageEngine, tailScanner, transactionIdStore,\n+        logicalTransactionStore, logVersionRepository, positionMonitor);\n+    CorruptedLogsTruncator logsTruncator = new CorruptedLogsTruncator(storeDir, logFiles, fileSystemAbstraction);\n+    ProgressReporter progressReporter = new LogProgressReporter(logService.getInternalLog(Recovery.class));\n+    Recovery recovery = new Recovery(recoveryService, startupStatistics, logsTruncator, recoveryMonitor,\n+        progressReporter, failOnCorruptedLogFiles);\n+    life.add(recovery);\n+  }\n+\n+  private NeoStoreKernelModule buildKernel(LogFiles logFiles, TransactionAppender appender,\n+                                           IndexingService indexingService,\n+                                           StoreReadLayer storeLayer, DatabaseSchemaState databaseSchemaState, LabelScanStore labelScanStore,\n+                                           StorageEngine storageEngine, IndexConfigStore indexConfigStore, TransactionIdStore transactionIdStore,\n+                                           AvailabilityGuard availabilityGuard, SystemNanoClock clock, PropertyAccessor propertyAccessor)\n+  {\n+    AtomicReference<CpuClock> cpuClockRef = setupCpuClockAtomicReference();\n+    AtomicReference<HeapAllocation> heapAllocationRef = setupHeapAllocationAtomicReference();\n+\n+    TransactionCommitProcess transactionCommitProcess = commitProcessFactory.create(appender, storageEngine,\n+        config);\n+\n+    /*\n+     * This is used by explicit indexes and constraint indexes whenever a transaction is to be spawned\n+     * from within an existing transaction. It smells, and we should look over alternatives when time permits.\n      */\n-    public void afterModeSwitch()\n-    {\n-        storageEngine.loadSchemaCache();\n-        clearTransactions();\n-    }\n-\n-    // For test purposes only, not thread safe\n-    public LifeSupport getLife()\n-    {\n-        return life;\n-    }\n+    Supplier<Kernel> kernelProvider = () -> kernelModule.kernelAPI();\n+\n+    ConstraintIndexCreator constraintIndexCreator = new ConstraintIndexCreator(kernelProvider, indexingService, propertyAccessor, logProvider);\n+\n+    ExplicitIndexStore explicitIndexStore = new ExplicitIndexStore(config,\n+        indexConfigStore, kernelProvider, explicitIndexProviderLookup);\n+\n+    StatementOperationParts statementOperationParts = dependencies.satisfyDependency(\n+        buildStatementOperations(\n+            cpuClockRef,\n+            heapAllocationRef));\n+\n+    TransactionHooks hooks = new TransactionHooks();\n+\n+    KernelTransactions kernelTransactions = life.add(new KernelTransactions(statementLocksFactory,\n+        constraintIndexCreator, statementOperationParts, schemaWriteGuard, transactionHeaderInformationFactory,\n+        transactionCommitProcess, indexConfigStore, explicitIndexProviderLookup, hooks, transactionMonitor,\n+        availabilityGuard, tracers, storageEngine, procedures, transactionIdStore, clock,\n+        cpuClockRef, heapAllocationRef, accessCapability, DefaultCursors::new, autoIndexing,\n+        explicitIndexStore, versionContextSupplier, collectionsFactorySupplier, constraintSemantics,\n+        databaseSchemaState, indexingService, indexProviderMap));\n+\n+    buildTransactionMonitor(kernelTransactions, clock, config);\n+\n+    final KernelImpl kernel = new KernelImpl(kernelTransactions, hooks, databaseHealth, transactionMonitor, procedures,\n+        config, storageEngine);\n+\n+    kernel.registerTransactionHook(transactionEventHandlers);\n+    life.add(kernel);\n+\n+    final NeoStoreFileListing fileListing = new NeoStoreFileListing(storeDir, logFiles, labelScanStore,\n+        indexingService, explicitIndexProviderLookup, storageEngine);\n+    dependencies.satisfyDependency(fileListing);\n+\n+    return new NeoStoreKernelModule(transactionCommitProcess, kernel, kernelTransactions, fileListing);\n+  }\n+\n+  private AtomicReference<CpuClock> setupCpuClockAtomicReference()\n+  {\n+    AtomicReference<CpuClock> cpuClock = new AtomicReference<>(CpuClock.NOT_AVAILABLE);\n+    BiConsumer<Boolean, Boolean> cpuClockUpdater = (before, after) ->\n+    {\n+      if (after)\n+      {\n+        cpuClock.set(CpuClock.CPU_CLOCK);\n+      } else\n+      {\n+        cpuClock.set(CpuClock.NOT_AVAILABLE);\n+      }\n+    };\n+    cpuClockUpdater.accept(null, config.get(GraphDatabaseSettings.track_query_cpu_time));\n+    config.registerDynamicUpdateListener(GraphDatabaseSettings.track_query_cpu_time, cpuClockUpdater);\n+    return cpuClock;\n+  }\n+\n+  private AtomicReference<HeapAllocation> setupHeapAllocationAtomicReference()\n+  {\n+    AtomicReference<HeapAllocation> heapAllocation = new AtomicReference<>(HeapAllocation.NOT_AVAILABLE);\n+    BiConsumer<Boolean, Boolean> heapAllocationUpdater = (before, after) ->\n+    {\n+      if (after)\n+      {\n+        heapAllocation.set(HeapAllocation.HEAP_ALLOCATION);\n+      } else\n+      {\n+        heapAllocation.set(HeapAllocation.NOT_AVAILABLE);\n+      }\n+    };\n+    heapAllocationUpdater.accept(null, config.get(GraphDatabaseSettings.track_query_allocation));\n+    config.registerDynamicUpdateListener(GraphDatabaseSettings.track_query_allocation, heapAllocationUpdater);\n+    return heapAllocation;\n+  }\n+\n+  private void buildTransactionMonitor(KernelTransactions kernelTransactions, SystemNanoClock clock, Config config)\n+  {\n+    KernelTransactionTimeoutMonitor kernelTransactionTimeoutMonitor =\n+        new KernelTransactionTimeoutMonitor(kernelTransactions, clock, logService);\n+    dependencies.satisfyDependency(kernelTransactionTimeoutMonitor);\n+    KernelTransactionMonitorScheduler transactionMonitorScheduler =\n+        new KernelTransactionMonitorScheduler(kernelTransactionTimeoutMonitor, scheduler,\n+            config.get(GraphDatabaseSettings.transaction_monitor_check_interval).toMillis());\n+    life.add(transactionMonitorScheduler);\n+  }\n+\n+  @Override\n+  public synchronized void stop()\n+  {\n+    if (!life.isRunning())\n+    {\n+      return;\n+    }\n+\n+    life.stop();\n+    awaitAllClosingTransactions();\n+    // Checkpointing is now triggered as part of life.shutdown see lifecycleToTriggerCheckPointOnShutdown()\n+    // Shut down all services in here, effectively making the database unusable for anyone who tries.\n+    life.shutdown();\n+  }\n+\n+  private void awaitAllClosingTransactions()\n+  {\n+    KernelTransactions kernelTransactions = kernelModule.kernelTransactions();\n+    kernelTransactions.terminateTransactions();\n+\n+    while (kernelTransactions.haveClosingTransaction())\n+    {\n+      LockSupport.parkNanos(TimeUnit.MILLISECONDS.toNanos(10));\n+    }\n+  }\n+\n+  private Lifecycle lifecycleToTriggerCheckPointOnShutdown()\n+  {\n+    // Write new checkpoint in the log only if the kernel is healthy.\n+    // We cannot throw here since we need to shutdown without exceptions,\n+    // so let's make the checkpointing part of the life, so LifeSupport can handle exceptions properly\n+    return new LifecycleAdapter()\n+    {\n+      @Override\n+      public void shutdown() throws IOException\n+      {\n+        if (databaseHealth.isHealthy())\n+        {\n+          // Flushing of neo stores happens as part of the checkpoint\n+          transactionLogModule.checkPointing()\n+              .forceCheckPoint(new SimpleTriggerInfo(\"database shutdown\"));\n+        }\n+      }\n+    };\n+  }\n+\n+  @Override\n+  public void shutdown()\n+  {   // We do our own internal life management:\n+    // start() does life.init() and life.start(),\n+    // stop() does life.stop() and life.shutdown().\n+  }\n+\n+  public StoreId getStoreId()\n+  {\n+    return getDependencyResolver().resolveDependency(MetaDataStore.class).getStoreId();\n+  }\n+\n+  public File getStoreDir()\n+  {\n+    return storeDir;\n+  }\n+\n+  public boolean isReadOnly()\n+  {\n+    return readOnly;\n+  }\n+\n+  public InwardKernel getKernel()\n+  {\n+    return kernelModule.kernelAPI();\n+  }\n+\n+  public ResourceIterator<StoreFileMetadata> listStoreFiles(boolean includeLogs) throws IOException\n+  {\n+    if (includeLogs)\n+    {\n+      return getNeoStoreFileListing().builder().build();\n+    } else\n+    {\n+      return getNeoStoreFileListing().builder().excludeLogFiles().build();\n+    }\n+  }\n+\n+  public NeoStoreFileListing getNeoStoreFileListing()\n+  {\n+    return kernelModule.fileListing();\n+  }\n+\n+  public void registerDiagnosticsWith(DiagnosticsManager manager)\n+  {\n+    storageEngine.registerDiagnostics(manager);\n+    manager.registerAll(Diagnostics.class, this);\n+  }\n+\n+  public StoreReadLayer getStoreLayer()\n+  {\n+    return storageEngine.storeReadLayer();\n+  }\n+\n+  public DependencyResolver getDependencyResolver()\n+  {\n+    return dependencies;\n+  }\n+\n+  private StatementOperationParts buildStatementOperations(AtomicReference<CpuClock> cpuClockRef,\n+                                                           AtomicReference<HeapAllocation> heapAllocationRef)\n+  {\n+    QueryRegistrationOperations queryRegistrationOperations =\n+        new StackingQueryRegistrationOperations(clock, cpuClockRef, heapAllocationRef);\n+\n+    return new StatementOperationParts(queryRegistrationOperations);\n+  }\n+\n+  @Override\n+  public void registerIndexProvider(String name, IndexImplementation index)\n+  {\n+    assert !indexProviders.containsKey(name) : \"Index provider '\" + name + \"' already registered\";\n+    indexProviders.put(name, index);\n+  }\n+\n+  @Override\n+  public boolean unregisterIndexProvider(String name)\n+  {\n+    IndexImplementation removed = indexProviders.remove(name);\n+    return removed != null;\n+  }\n+\n+  /**\n+   * Hook that must be called before there is an HA mode switch (eg master/slave switch),\n+   * i.e. after state has changed to pending and before state is about to change to the new target state.\n+   * This must only be called when the database is otherwise inaccessible.\n+   */\n+  public void beforeModeSwitch()\n+  {\n+    clearTransactions();\n+  }\n+\n+  private void clearTransactions()\n+  {\n+    // We don't want to have buffered ids carry over to the new role\n+    storageEngine.clearBufferedIds();\n+\n+    // Get rid of all pooled transactions, as they will otherwise reference\n+    // components that have been swapped out during the mode switch.\n+    kernelModule.kernelTransactions().disposeAll();\n+  }\n+\n+  /**\n+   * Hook that must be called after an HA mode switch (eg master/slave switch) have completed.\n+   * This must only be called when the database is otherwise inaccessible.\n+   */\n+  public void afterModeSwitch()\n+  {\n+    storageEngine.loadSchemaCache();\n+    clearTransactions();\n+  }\n+\n+  // For test purposes only, not thread safe\n+  public LifeSupport getLife()\n+  {\n+    return life;\n+  }\n }\n",
            "diff_size": 1360
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "343",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 218).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "410",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 241).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "421",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 252).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "427",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "428",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 174).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "520",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 391).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "538",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 621).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "538",
                    "column": "263",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "538",
                    "column": "466",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "539",
                    "column": "50",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "542",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "592",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 539).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1486/NeoStoreDataSource.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1486/NeoStoreDataSource.java\nindex 01255c00dfa..c889aa5f723 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1486/NeoStoreDataSource.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1486/NeoStoreDataSource.java\n@@ -164,11 +164,10 @@ import static org.neo4j.helpers.Exceptions.throwIfUnchecked;\n \n public class NeoStoreDataSource implements Lifecycle, IndexProviders\n {\n-\n     enum Diagnostics implements DiagnosticsExtractor<NeoStoreDataSource>\n     {\n         TRANSACTION_RANGE( \"Transaction log:\" )\n-                {\n+{\n                     @Override\n                     void dump( NeoStoreDataSource source, Logger log )\n                     {\n@@ -176,27 +175,27 @@ public class NeoStoreDataSource implements Lifecycle, IndexProviders\n                         try\n                         {\n                             for ( long logVersion = logFiles.getLowestLogVersion();\n-                                  logFiles.versionExists( logVersion ); logVersion++ )\n-                            {\n+logFiles.versionExists( logVersion ); logVersion++ )\n+{\n                                 if ( logFiles.hasAnyEntries( logVersion ) )\n                                 {\n                                     LogHeader header = logFiles.extractHeader( logVersion );\n                                     long firstTransactionIdInThisLog = header.lastCommittedTxId + 1;\n-                                    log.log( \"Oldest transaction \" + firstTransactionIdInThisLog +\n-                                             \" found in log with version \" + logVersion );\n-                                    return;\n+                                    log.log( \"Oldest transaction \" + firstTransactionIdInThisLog + \" found in log with version \" + logVersion );\n+return;\n                                 }\n                             }\n                             log.log( \"No transactions found in any log\" );\n                         }\n                         catch ( IOException e )\n-                        {   // It's fine, we just tried to be nice and log this. Failing is OK\n+                        {\n+    // It's fine, we just tried to be nice and log this. Failing is OK\n                             log.log( \"Error trying to figure out oldest transaction in log\" );\n                         }\n                     }\n                 };\n \n-        private final String message;\n+private final String message;\n \n         Diagnostics( String message )\n         {\n@@ -222,8 +221,7 @@ public class NeoStoreDataSource implements Lifecycle, IndexProviders\n     }\n \n     public static final String DEFAULT_DATA_SOURCE_NAME = \"nioneodb\";\n-\n-    private final Monitors monitors;\n+private final Monitors monitors;\n     private final Tracers tracers;\n \n     private final Log msgLog;\n@@ -342,11 +340,8 @@ public class NeoStoreDataSource implements Lifecycle, IndexProviders\n                 IndexImplementation provider = indexProviders.get( name );\n                 if ( provider == null )\n                 {\n-                    throw new IllegalArgumentException( \"No index provider '\" + name +\n-                                                        \"' found. Maybe the intended provider (or one more of its \" +\n-                                                        \"dependencies) \" +\n-                                                        \"aren't on the classpath or it failed to load.\" );\n-                }\n+                    throw new IllegalArgumentException( \"No index provider '\" + name + \"' found. Maybe the intended provider (or one more of its \" + \"dependencies) \" + \"aren't on the classpath or it failed to load.\" );\n+    }\n                 return provider;\n             }\n \n@@ -356,8 +351,7 @@ public class NeoStoreDataSource implements Lifecycle, IndexProviders\n                 return indexProviders.values();\n             }\n         };\n-\n-        this.commitProcessFactory = commitProcessFactory;\n+this.commitProcessFactory = commitProcessFactory;\n         this.pageCache = pageCache;\n         this.monitors.addMonitorListener( new LoggingLogFileMonitor( msgLog ) );\n         this.collectionsFactorySupplier = collectionsFactorySupplier;\n@@ -377,41 +371,29 @@ public class NeoStoreDataSource implements Lifecycle, IndexProviders\n     {\n         dependencies = new Dependencies();\n         life = new LifeSupport();\n+life.add( recoveryCleanupWorkCollector );\n \n-        life.add( recoveryCleanupWorkCollector );\n-\n-        AllByPrioritySelectionStrategy<IndexProvider> indexProviderSelection =\n-                new AllByPrioritySelectionStrategy<>();\n-        IndexProvider defaultIndexProvider =\n-                dependencyResolver.resolveDependency( IndexProvider.class, indexProviderSelection );\n-\n-        indexProviderMap =\n-                new DefaultIndexProviderMap( defaultIndexProvider,\n+        AllByPrioritySelectionStrategy<IndexProvider> indexProviderSelection = new AllByPrioritySelectionStrategy<>();\n+IndexProvider defaultIndexProvider = dependencyResolver.resolveDependency( IndexProvider.class, indexProviderSelection );\n+indexProviderMap = new DefaultIndexProviderMap( defaultIndexProvider,\n                         indexProviderSelection.lowerPrioritizedCandidates() );\n-        dependencies.satisfyDependency( indexProviderMap );\n-\n-        IndexConfigStore indexConfigStore = new IndexConfigStore( storeDir, fs );\n+dependencies.satisfyDependency( indexProviderMap );\n+IndexConfigStore indexConfigStore = new IndexConfigStore( storeDir, fs );\n         dependencies.satisfyDependency( lockService );\n         dependencies.satisfyDependency( indexConfigStore );\n         life.add( indexConfigStore );\n-\n-        life.add( Lifecycles.multiple( indexProviders.values() ) );\n+life.add( Lifecycles.multiple( indexProviders.values() ) );\n \n         // Check the tail of transaction logs and validate version\n         final LogEntryReader<ReadableClosablePositionAwareChannel> logEntryReader = new VersionAwareLogEntryReader<>();\n-\n-        LogFiles logFiles = LogFilesBuilder.builder( storeDir, fs )\n-                .withLogEntryReader( logEntryReader )\n+LogFiles logFiles = LogFilesBuilder.builder( storeDir, fs ).withLogEntryReader( logEntryReader )\n                 .withLogFileMonitor( physicalLogMonitor )\n                 .withConfig( config )\n                 .withDependencies( dependencies ).build();\n-\n-        LogTailScanner tailScanner = new LogTailScanner( logFiles, logEntryReader, monitors, failOnCorruptedLogFiles );\n-        monitors.addMonitorListener(\n-                new LoggingLogTailScannerMonitor( logService.getInternalLog( LogTailScanner.class ) ) );\n-        monitors.addMonitorListener( new ReverseTransactionCursorLoggingMonitor(\n-                logService.getInternalLog( ReversedSingleFileTransactionCursor.class ) ) );\n-        LogVersionUpgradeChecker.check( tailScanner, config );\n+LogTailScanner tailScanner = new LogTailScanner( logFiles, logEntryReader, monitors, failOnCorruptedLogFiles );\n+        monitors.addMonitorListener( new LoggingLogTailScannerMonitor( logService.getInternalLog( LogTailScanner.class ) ) );\n+monitors.addMonitorListener( new ReverseTransactionCursorLoggingMonitor( logService.getInternalLog( ReversedSingleFileTransactionCursor.class ) ) );\n+LogVersionUpgradeChecker.check( tailScanner, config );\n \n         // Upgrade the store before we begin\n         RecordFormats formats = selectStoreFormats( config, storeDir, pageCache, logService );\n@@ -422,56 +404,29 @@ public class NeoStoreDataSource implements Lifecycle, IndexProviders\n         try\n         {\n             DatabaseSchemaState databaseSchemaState = new DatabaseSchemaState( logProvider );\n-\n-            SynchronizedArrayIdOrderingQueue explicitIndexTransactionOrdering =\n-                    new SynchronizedArrayIdOrderingQueue( 20 );\n-\n-            Supplier<KernelTransactionsSnapshot> transactionsSnapshotSupplier =\n-                    () -> kernelModule.kernelTransactions().get();\n-            idController.initialize( transactionsSnapshotSupplier );\n-\n-            storageEngine = buildStorageEngine(\n-                    propertyKeyTokenHolder, labelTokens, relationshipTypeTokens, explicitIndexProviderLookup,\n-                    indexConfigStore, databaseSchemaState, explicitIndexTransactionOrdering, operationalMode,\n-                    versionContextSupplier );\n-            life.add( logFiles );\n-\n-            TransactionIdStore transactionIdStore = dependencies.resolveDependency( TransactionIdStore.class );\n-\n-            versionContextSupplier.init( transactionIdStore::getLastClosedTransactionId );\n-\n-            LogVersionRepository logVersionRepository = dependencies.resolveDependency( LogVersionRepository.class );\n+SynchronizedArrayIdOrderingQueue explicitIndexTransactionOrdering = new SynchronizedArrayIdOrderingQueue( 20 );\n+Supplier<KernelTransactionsSnapshot> transactionsSnapshotSupplier = () -> kernelModule.kernelTransactions().get();\n+idController.initialize( transactionsSnapshotSupplier );\n+storageEngine = buildStorageEngine( propertyKeyTokenHolder, labelTokens, relationshipTypeTokens, explicitIndexProviderLookup, indexConfigStore, databaseSchemaState, explicitIndexTransactionOrdering, operationalMode, versionContextSupplier );\n+life.add( logFiles );\n+TransactionIdStore transactionIdStore = dependencies.resolveDependency( TransactionIdStore.class );\n+versionContextSupplier.init( transactionIdStore::getLastClosedTransactionId );\n+LogVersionRepository logVersionRepository = dependencies.resolveDependency( LogVersionRepository.class );\n             NeoStoreTransactionLogModule transactionLogModule = buildTransactionLogs( logFiles, config, logProvider,\n                     scheduler, storageEngine, logEntryReader, explicitIndexTransactionOrdering, transactionIdStore );\n-            transactionLogModule.satisfyDependencies( dependencies );\n+transactionLogModule.satisfyDependencies( dependencies );\n \n             buildRecovery( fs,\n-                    transactionIdStore,\n-                    tailScanner,\n-                    monitors.newMonitor( RecoveryMonitor.class ),\n-                    monitors.newMonitor( RecoveryStartInformationProvider.Monitor.class ),\n-                    logFiles, startupStatistics,\n-                    storageEngine, transactionLogModule.logicalTransactionStore(), logVersionRepository\n-            );\n+                    transactionIdStore, tailScanner,\n+                    monitors.newMonitor( RecoveryMonitor.class ), monitors.newMonitor( RecoveryStartInformationProvider.Monitor.class ), logFiles, startupStatistics, storageEngine, transactionLogModule.logicalTransactionStore(), logVersionRepository );\n \n             // At the time of writing this comes from the storage engine (IndexStoreView)\n             PropertyAccessor propertyAccessor = dependencies.resolveDependency( PropertyAccessor.class );\n \n-            final NeoStoreKernelModule kernelModule = buildKernel(\n-                    logFiles,\n-                    transactionLogModule.transactionAppender(),\n-                    dependencies.resolveDependency( IndexingService.class ),\n-                    storageEngine.storeReadLayer(),\n-                    databaseSchemaState,\n-                    dependencies.resolveDependency( LabelScanStore.class ),\n-                    storageEngine,\n-                    indexConfigStore,\n-                    transactionIdStore,\n-                    availabilityGuard,\n-                    clock,\n-                    propertyAccessor );\n-\n-            kernelModule.satisfyDependencies( dependencies );\n+            final NeoStoreKernelModule kernelModule = buildKernel( logFiles,\n+                    transactionLogModule.transactionAppender(), dependencies.resolveDependency( IndexingService.class ), storageEngine.storeReadLayer(), databaseSchemaState,\n+                    dependencies.resolveDependency( LabelScanStore.class ), storageEngine, indexConfigStore, transactionIdStore, availabilityGuard, clock, propertyAccessor );\n+kernelModule.satisfyDependencies( dependencies );\n \n             // Do these assignments last so that we can ensure no cyclical dependencies exist\n             this.storageEngine = storageEngine;\n@@ -501,7 +456,8 @@ public class NeoStoreDataSource implements Lifecycle, IndexProviders\n             {\n                 msgLog.error( \"Couldn't close neostore after startup failure\", closeException );\n             }\n-            throwIfUnchecked( e );\n+\n+throwIfUnchecked( e );\n             throw new RuntimeException( e );\n         }\n \n@@ -550,46 +506,27 @@ public class NeoStoreDataSource implements Lifecycle, IndexProviders\n \n     private void upgradeStore( RecordFormats format, LogTailScanner tailScanner )\n     {\n-        VisibleMigrationProgressMonitor progressMonitor =\n-                new VisibleMigrationProgressMonitor( logService.getUserLog( StoreMigrator.class ) );\n-        new DatabaseMigrator(\n-                progressMonitor,\n-                fs,\n-                config,\n-                logService,\n-                indexProviderMap,\n-                indexProviders,\n-                pageCache,\n-                format, tailScanner ).migrate( storeDir );\n-    }\n-\n-    private StorageEngine buildStorageEngine(\n-            PropertyKeyTokenHolder propertyKeyTokenHolder, LabelTokenHolder labelTokens,\n+        VisibleMigrationProgressMonitor progressMonitor = new VisibleMigrationProgressMonitor( logService.getUserLog( StoreMigrator.class ) );\n+    new DatabaseMigrator( progressMonitor, fs, config, logService, indexProviderMap, indexProviders, pageCache, format, tailScanner ).migrate( storeDir );\n+    }\n+\n+    private StorageEngine buildStorageEngine( PropertyKeyTokenHolder propertyKeyTokenHolder, LabelTokenHolder labelTokens,\n             RelationshipTypeTokenHolder relationshipTypeTokens,\n             ExplicitIndexProviderLookup explicitIndexProviderLookup, IndexConfigStore indexConfigStore,\n             SchemaState schemaState, SynchronizedArrayIdOrderingQueue explicitIndexTransactionOrdering,\n             OperationalMode operationalMode, VersionContextSupplier versionContextSupplier )\n     {\n-        RecordStorageEngine storageEngine =\n-                new RecordStorageEngine( storeDir, config, pageCache, fs, logProvider, propertyKeyTokenHolder,\n-                        labelTokens, relationshipTypeTokens, schemaState, constraintSemantics, scheduler,\n-                        tokenNameLookup, lockService, indexProviderMap, indexingServiceMonitor, databaseHealth,\n-                        explicitIndexProviderLookup, indexConfigStore,\n-                        explicitIndexTransactionOrdering, idGeneratorFactory, idController, monitors,\n-                        recoveryCleanupWorkCollector,\n-                        operationalMode, versionContextSupplier );\n-\n-        // We pretend that the storage engine abstract hides all details within it. Whereas that's mostly\n+        RecordStorageEngine storageEngine = new RecordStorageEngine( storeDir, config, pageCache, fs, logProvider, propertyKeyTokenHolder,\n+                        labelTokens, relationshipTypeTokens, schemaState, constraintSemantics, scheduler, tokenNameLookup, lockService, indexProviderMap, indexingServiceMonitor, databaseHealth, explicitIndexProviderLookup, indexConfigStore, explicitIndexTransactionOrdering, idGeneratorFactory, idController, monitors, recoveryCleanupWorkCollector, operationalMode, versionContextSupplier );\n+    // We pretend that the storage engine abstract hides all details within it. Whereas that's mostly\n         // true it's not entirely true for the time being. As long as we need this call below, which\n         // makes available one or more internal things to the outside world, there are leaks to plug.\n         storageEngine.satisfyDependencies( dependencies );\n-\n-        return life.add( storageEngine );\n+return life.add( storageEngine );\n     }\n \n     private NeoStoreTransactionLogModule buildTransactionLogs( LogFiles logFiles, Config config,\n-            LogProvider logProvider, JobScheduler scheduler, StorageEngine storageEngine,\n-            LogEntryReader<ReadableClosablePositionAwareChannel> logEntryReader,\n+            LogProvider logProvider, JobScheduler scheduler, StorageEngine storageEngine, LogEntryReader<ReadableClosablePositionAwareChannel> logEntryReader,\n             SynchronizedArrayIdOrderingQueue explicitIndexTransactionOrdering, TransactionIdStore transactionIdStore )\n     {\n         TransactionMetadataCache transactionMetadataCache = new TransactionMetadataCache( 100_000 );\n@@ -598,55 +535,37 @@ public class NeoStoreDataSource implements Lifecycle, IndexProviders\n             config.augmentDefaults( GraphDatabaseSettings.keep_logical_logs, \"1 files\" );\n         }\n \n-        final LogPruning logPruning =\n-                new LogPruningImpl( fs, logFiles, logProvider, new LogPruneStrategyFactory(), clock, config );\n-\n-        final LogRotation logRotation =\n-                new LogRotationImpl( monitors.newMonitor( LogRotation.Monitor.class ), logFiles, databaseHealth );\n-\n-        final TransactionAppender appender = life.add( new BatchingTransactionAppender(\n-                logFiles, logRotation, transactionMetadataCache, transactionIdStore, explicitIndexTransactionOrdering,\n-                databaseHealth ) );\n-        final LogicalTransactionStore logicalTransactionStore =\n-                new PhysicalLogicalTransactionStore( logFiles, transactionMetadataCache, logEntryReader, monitors,\n+        final LogPruning logPruning = new LogPruningImpl( fs, logFiles, logProvider, new LogPruneStrategyFactory(), clock, config ); final LogRotation logRotation = new LogRotationImpl( monitors.newMonitor( LogRotation.Monitor.class ), logFiles, databaseHealth ); final TransactionAppender appender = life.add( new BatchingTransactionAppender( logFiles, logRotation, transactionMetadataCache, transactionIdStore, explicitIndexTransactionOrdering, databaseHealth ) ); final LogicalTransactionStore logicalTransactionStore = new PhysicalLogicalTransactionStore( logFiles, transactionMetadataCache, logEntryReader, monitors,\n                         failOnCorruptedLogFiles );\n+CheckPointThreshold threshold = CheckPointThreshold.createThreshold( config, clock, logPruning, logProvider );\n \n-        CheckPointThreshold threshold = CheckPointThreshold.createThreshold( config, clock, logPruning, logProvider );\n-\n-        final CheckPointerImpl checkPointer = new CheckPointerImpl(\n-                transactionIdStore, threshold, storageEngine, logPruning, appender, databaseHealth, logProvider,\n+        final CheckPointerImpl checkPointer = new CheckPointerImpl( transactionIdStore, threshold, storageEngine, logPruning, appender, databaseHealth, logProvider,\n                 tracers.checkPointTracer, ioLimiter, storeCopyCheckPointMutex );\n-\n-        long recurringPeriod = threshold.checkFrequencyMillis();\n+    long recurringPeriod = threshold.checkFrequencyMillis();\n         CheckPointScheduler checkPointScheduler = new CheckPointScheduler( checkPointer, ioLimiter, scheduler,\n                 recurringPeriod, databaseHealth );\n-\n-        life.add( checkPointer );\n+life.add( checkPointer );\n         life.add( checkPointScheduler );\n-\n-        return new NeoStoreTransactionLogModule( logicalTransactionStore, logFiles,\n+return new NeoStoreTransactionLogModule( logicalTransactionStore, logFiles,\n                 logRotation, checkPointer, appender, explicitIndexTransactionOrdering );\n     }\n \n-    private void buildRecovery(\n-            final FileSystemAbstraction fileSystemAbstraction,\n+    private void buildRecovery( final FileSystemAbstraction fileSystemAbstraction,\n             TransactionIdStore transactionIdStore,\n             LogTailScanner tailScanner,\n             RecoveryMonitor recoveryMonitor,\n-            RecoveryStartInformationProvider.Monitor positionMonitor,\n-            final LogFiles logFiles,\n-            final StartupStatisticsProvider startupStatistics,\n+            RecoveryStartInformationProvider.Monitor positionMonitor, final LogFiles logFiles, final StartupStatisticsProvider startupStatistics,\n             StorageEngine storageEngine,\n             LogicalTransactionStore logicalTransactionStore,\n             LogVersionRepository logVersionRepository )\n     {\n         RecoveryService recoveryService = new DefaultRecoveryService( storageEngine, tailScanner, transactionIdStore,\n                 logicalTransactionStore, logVersionRepository, positionMonitor );\n-        CorruptedLogsTruncator logsTruncator = new CorruptedLogsTruncator( storeDir, logFiles, fileSystemAbstraction );\n+CorruptedLogsTruncator logsTruncator = new CorruptedLogsTruncator( storeDir, logFiles, fileSystemAbstraction );\n         ProgressReporter progressReporter = new LogProgressReporter( logService.getInternalLog( Recovery.class ) );\n         Recovery recovery = new Recovery( recoveryService, startupStatistics, logsTruncator, recoveryMonitor,\n                 progressReporter, failOnCorruptedLogFiles );\n-        life.add( recovery );\n+life.add( recovery );\n     }\n \n     private NeoStoreKernelModule buildKernel( LogFiles logFiles, TransactionAppender appender,\n@@ -657,49 +576,31 @@ public class NeoStoreDataSource implements Lifecycle, IndexProviders\n     {\n         AtomicReference<CpuClock> cpuClockRef = setupCpuClockAtomicReference();\n         AtomicReference<HeapAllocation> heapAllocationRef = setupHeapAllocationAtomicReference();\n-\n-        TransactionCommitProcess transactionCommitProcess = commitProcessFactory.create( appender, storageEngine,\n+TransactionCommitProcess transactionCommitProcess = commitProcessFactory.create( appender, storageEngine,\n                 config );\n-\n-        /*\n+    /*\n          * This is used by explicit indexes and constraint indexes whenever a transaction is to be spawned\n          * from within an existing transaction. It smells, and we should look over alternatives when time permits.\n          */\n         Supplier<Kernel> kernelProvider = () -> kernelModule.kernelAPI();\n-\n-        ConstraintIndexCreator constraintIndexCreator = new ConstraintIndexCreator( kernelProvider, indexingService, propertyAccessor, logProvider );\n-\n-        ExplicitIndexStore explicitIndexStore = new ExplicitIndexStore( config,\n+ConstraintIndexCreator constraintIndexCreator = new ConstraintIndexCreator( kernelProvider, indexingService, propertyAccessor, logProvider );\n+ExplicitIndexStore explicitIndexStore = new ExplicitIndexStore( config,\n                 indexConfigStore, kernelProvider, explicitIndexProviderLookup );\n-\n-        StatementOperationParts statementOperationParts = dependencies.satisfyDependency(\n-                buildStatementOperations(\n-                        cpuClockRef,\n-                        heapAllocationRef ) );\n-\n-        TransactionHooks hooks = new TransactionHooks();\n-\n-        KernelTransactions kernelTransactions = life.add( new KernelTransactions( statementLocksFactory,\n-                constraintIndexCreator, statementOperationParts, schemaWriteGuard, transactionHeaderInformationFactory,\n-                transactionCommitProcess, indexConfigStore, explicitIndexProviderLookup, hooks, transactionMonitor,\n-                availabilityGuard, tracers, storageEngine, procedures, transactionIdStore, clock,\n-                cpuClockRef, heapAllocationRef, accessCapability, DefaultCursors::new, autoIndexing,\n-                explicitIndexStore, versionContextSupplier, collectionsFactorySupplier, constraintSemantics,\n-                databaseSchemaState, indexingService, indexProviderMap ) );\n-\n-        buildTransactionMonitor( kernelTransactions, clock, config );\n+StatementOperationParts statementOperationParts = dependencies.satisfyDependency( buildStatementOperations( cpuClockRef, heapAllocationRef ) );\n+TransactionHooks hooks = new TransactionHooks();\n+KernelTransactions kernelTransactions = life.add( new KernelTransactions( statementLocksFactory,\n+                constraintIndexCreator, statementOperationParts, schemaWriteGuard, transactionHeaderInformationFactory, transactionCommitProcess, indexConfigStore, explicitIndexProviderLookup, hooks, transactionMonitor, availabilityGuard, tracers, storageEngine, procedures, transactionIdStore, clock, cpuClockRef, heapAllocationRef, accessCapability, DefaultCursors::new, autoIndexing, explicitIndexStore, versionContextSupplier, collectionsFactorySupplier, constraintSemantics, databaseSchemaState, indexingService, indexProviderMap ) );\n+buildTransactionMonitor( kernelTransactions, clock, config );\n \n         final KernelImpl kernel = new KernelImpl( kernelTransactions, hooks, databaseHealth, transactionMonitor, procedures,\n                 config, storageEngine );\n-\n-        kernel.registerTransactionHook( transactionEventHandlers );\n+kernel.registerTransactionHook( transactionEventHandlers );\n         life.add( kernel );\n \n         final NeoStoreFileListing fileListing = new NeoStoreFileListing( storeDir, logFiles, labelScanStore,\n                 indexingService, explicitIndexProviderLookup, storageEngine );\n-        dependencies.satisfyDependency( fileListing );\n-\n-        return new NeoStoreKernelModule( transactionCommitProcess, kernel, kernelTransactions, fileListing );\n+dependencies.satisfyDependency( fileListing );\n+return new NeoStoreKernelModule( transactionCommitProcess, kernel, kernelTransactions, fileListing );\n     }\n \n     private AtomicReference<CpuClock> setupCpuClockAtomicReference()\n@@ -742,13 +643,11 @@ public class NeoStoreDataSource implements Lifecycle, IndexProviders\n \n     private void buildTransactionMonitor( KernelTransactions kernelTransactions, SystemNanoClock clock, Config config )\n     {\n-        KernelTransactionTimeoutMonitor kernelTransactionTimeoutMonitor =\n-                new KernelTransactionTimeoutMonitor( kernelTransactions, clock, logService );\n-        dependencies.satisfyDependency( kernelTransactionTimeoutMonitor );\n-        KernelTransactionMonitorScheduler transactionMonitorScheduler =\n-                new KernelTransactionMonitorScheduler( kernelTransactionTimeoutMonitor, scheduler,\n+        KernelTransactionTimeoutMonitor kernelTransactionTimeoutMonitor = new KernelTransactionTimeoutMonitor( kernelTransactions, clock, logService );\n+dependencies.satisfyDependency( kernelTransactionTimeoutMonitor );\n+        KernelTransactionMonitorScheduler transactionMonitorScheduler = new KernelTransactionMonitorScheduler( kernelTransactionTimeoutMonitor, scheduler,\n                         config.get( GraphDatabaseSettings.transaction_monitor_check_interval ).toMillis() );\n-        life.add( transactionMonitorScheduler );\n+life.add( transactionMonitorScheduler );\n     }\n \n     @Override\n@@ -790,16 +689,16 @@ public class NeoStoreDataSource implements Lifecycle, IndexProviders\n                 if ( databaseHealth.isHealthy() )\n                 {\n                     // Flushing of neo stores happens as part of the checkpoint\n-                    transactionLogModule.checkPointing()\n-                            .forceCheckPoint( new SimpleTriggerInfo( \"database shutdown\" ) );\n-                }\n+                    transactionLogModule.checkPointing().forceCheckPoint( new SimpleTriggerInfo( \"database shutdown\" ) );\n+    }\n             }\n         };\n     }\n \n     @Override\n     public void shutdown()\n-    {   // We do our own internal life management:\n+    {\n+    // We do our own internal life management:\n         // start() does life.init() and life.start(),\n         // stop() does life.stop() and life.shutdown().\n     }\n@@ -857,13 +756,10 @@ public class NeoStoreDataSource implements Lifecycle, IndexProviders\n         return dependencies;\n     }\n \n-    private StatementOperationParts buildStatementOperations( AtomicReference<CpuClock> cpuClockRef,\n-            AtomicReference<HeapAllocation> heapAllocationRef )\n+    private StatementOperationParts buildStatementOperations( AtomicReference<CpuClock> cpuClockRef, AtomicReference<HeapAllocation> heapAllocationRef )\n     {\n-        QueryRegistrationOperations queryRegistrationOperations =\n-                new StackingQueryRegistrationOperations( clock, cpuClockRef, heapAllocationRef );\n-\n-        return new StatementOperationParts( queryRegistrationOperations );\n+        QueryRegistrationOperations queryRegistrationOperations = new StackingQueryRegistrationOperations( clock, cpuClockRef, heapAllocationRef );\n+return new StatementOperationParts( queryRegistrationOperations );\n     }\n \n     @Override\n@@ -915,4 +811,4 @@ public class NeoStoreDataSource implements Lifecycle, IndexProviders\n     {\n         return life;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 194
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}