{
    "project_name": "seedstack-business",
    "error_id": "146",
    "information": {
        "errors": [
            {
                "line": "8",
                "column": "1",
                "severity": "warning",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\npackage org.seedstack.business.spi;\n\nimport static org.seedstack.business.internal.utils.BusinessUtils.getQualifier;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/146/BaseSpecificationTranslator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/styler/146/BaseSpecificationTranslator.java\nindex 0bfe2749dd3..c540677049c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/146/BaseSpecificationTranslator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/styler/146/BaseSpecificationTranslator.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.spi;\n \n import static org.seedstack.business.internal.utils.BusinessUtils.getQualifier;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/146/BaseSpecificationTranslator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/intellij/146/BaseSpecificationTranslator.java\nindex 0bfe2749dd3..c540677049c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/146/BaseSpecificationTranslator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/intellij/146/BaseSpecificationTranslator.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.spi;\n \n import static org.seedstack.business.internal.utils.BusinessUtils.getQualifier;\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "8",
                    "column": "1",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "76",
                    "column": "5",
                    "severity": "warning",
                    "message": "'catch rcurly' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "92",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "93",
                    "column": "5",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "94",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 207).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "95",
                    "column": "5",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "96",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 196).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "97",
                    "column": "5",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/146/BaseSpecificationTranslator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/naturalize/146/BaseSpecificationTranslator.java\nindex 0bfe2749dd3..deaa4eb2fee 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/146/BaseSpecificationTranslator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/naturalize/146/BaseSpecificationTranslator.java\n@@ -73,7 +73,7 @@ public abstract class BaseSpecificationTranslator<C, T> implements Specification\n                         .put(\"contextClass\", contextClass)\n                         .put(\"targetClass\", targetClass)\n                         .put(\"specificationClass\", specificationClass);\n-            }\n+    }\n             return converter.convert(specification, context, this);\n         }\n     }\n@@ -89,16 +89,11 @@ public abstract class BaseSpecificationTranslator<C, T> implements Specification\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    private <S extends Specification<?>> Key<SpecificationConverter<S, C, T>> buildKey(\n-            Class<? extends Specification> specificationClass) {\n-        if (qualifier != null) {\n-            return Key.get((TypeLiteral<SpecificationConverter<S, C, T>>) TypeLiteral.get(\n-                    Types.newParameterizedType(SpecificationConverter.class, specificationClass, contextClass,\n-                            targetClass)), qualifier);\n-        } else {\n-            return Key.get((TypeLiteral<SpecificationConverter<S, C, T>>) TypeLiteral.get(\n-                    Types.newParameterizedType(SpecificationConverter.class, specificationClass, contextClass,\n-                            targetClass)));\n-        }\n+    private <S extends Specification<?>> Key<SpecificationConverter<S, C, T>> buildKey(Class<? extends Specification> specificationClass) {\n+    if (qualifier != null) {\n+            return Key.get((TypeLiteral<SpecificationConverter<S, C, T>>) TypeLiteral.get(Types.newParameterizedType(SpecificationConverter.class, specificationClass, contextClass, targetClass)), qualifier);\n+    } else {\n+            return Key.get((TypeLiteral<SpecificationConverter<S, C, T>>) TypeLiteral.get(Types.newParameterizedType(SpecificationConverter.class, specificationClass, contextClass, targetClass)));\n+    }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "8",
                    "column": "1",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "79",
                    "column": "1",
                    "severity": "warning",
                    "message": "'catch' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "79",
                    "column": "1",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'catch' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "80",
                    "column": "5",
                    "severity": "warning",
                    "message": "'catch' child has incorrect indentation level 4, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "84",
                    "column": "1",
                    "severity": "warning",
                    "message": "'catch rcurly' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "100",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "102",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 207).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "104",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 196).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/146/BaseSpecificationTranslator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/codebuff/146/BaseSpecificationTranslator.java\nindex 0bfe2749dd3..4329bd55910 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/146/BaseSpecificationTranslator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/codebuff/146/BaseSpecificationTranslator.java\n@@ -8,7 +8,6 @@\n package org.seedstack.business.spi;\n \n import static org.seedstack.business.internal.utils.BusinessUtils.getQualifier;\n-\n import com.google.inject.ConfigurationException;\n import com.google.inject.Injector;\n import com.google.inject.Key;\n@@ -31,11 +30,14 @@ import org.seedstack.business.specification.SubstitutableSpecification;\n  * @param <C> the type of the translation context.\n  * @param <T> the type of the target object.\n  */\n+\n+\n public abstract class BaseSpecificationTranslator<C, T> implements SpecificationTranslator<C, T> {\n \n     private final Class<C> contextClass;\n     private final Class<T> targetClass;\n     private final Annotation qualifier;\n+\n     @Inject\n     private Injector injector;\n \n@@ -43,12 +45,13 @@ public abstract class BaseSpecificationTranslator<C, T> implements Specification\n      * Creates a base specification translator. Actual classes used for translation are determined by\n      * reflection.\n      */\n-    @SuppressWarnings(\"unchecked\")\n-    protected BaseSpecificationTranslator() {\n+\n+    @SuppressWarnings(\"unchecked\") protected BaseSpecificationTranslator() {\n         Type[] generics = BusinessUtils.resolveGenerics(BaseSpecificationTranslator.class, getClass());\n         this.contextClass = (Class<C>) generics[0];\n         this.targetClass = (Class<T>) generics[1];\n-        this.qualifier = getQualifier(getClass()).orElse(null);\n+        this.qualifier = getQualifier(getClass())\n+            .orElse(null);\n     }\n \n     /**\n@@ -60,20 +63,25 @@ public abstract class BaseSpecificationTranslator<C, T> implements Specification\n      * @param <S>           the type of the specification to convert.\n      * @return the converted target object representing the given specification.\n      */\n+\n     protected <S extends Specification<?>> T convert(S specification, C context) {\n         if (specification instanceof SubstitutableSpecification) {\n-            return convert(((SubstitutableSpecification<?>) specification).getSubstitute(), context);\n+            return convert(((SubstitutableSpecification<?>) specification)\n+                .getSubstitute(), context);\n         } else {\n             SpecificationConverter<S, C, T> converter;\n+\n             Class<? extends Specification> specificationClass = specification.getClass();\n             try {\n                 converter = injector.getInstance(buildKey(specificationClass));\n-            } catch (ConfigurationException e) {\n-                throw BusinessException.wrap(e, BusinessErrorCode.NO_CONVERTER_FOUND)\n-                        .put(\"contextClass\", contextClass)\n-                        .put(\"targetClass\", targetClass)\n-                        .put(\"specificationClass\", specificationClass);\n             }\n+\n+catch(ConfigurationException e) {\n+    throw BusinessException.wrap(e, BusinessErrorCode.NO_CONVERTER_FOUND)\n+        .put(\"contextClass\", contextClass)\n+        .put(\"targetClass\", targetClass)\n+        .put(\"specificationClass\", specificationClass);\n+}\n             return converter.convert(specification, context, this);\n         }\n     }\n@@ -89,16 +97,11 @@ public abstract class BaseSpecificationTranslator<C, T> implements Specification\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    private <S extends Specification<?>> Key<SpecificationConverter<S, C, T>> buildKey(\n-            Class<? extends Specification> specificationClass) {\n+    private <S extends Specification<?>> Key<SpecificationConverter<S, C, T>> buildKey(Class<? extends Specification> specificationClass) {\n         if (qualifier != null) {\n-            return Key.get((TypeLiteral<SpecificationConverter<S, C, T>>) TypeLiteral.get(\n-                    Types.newParameterizedType(SpecificationConverter.class, specificationClass, contextClass,\n-                            targetClass)), qualifier);\n+            return Key.get((TypeLiteral<SpecificationConverter<S, C, T>>) TypeLiteral.get(Types.newParameterizedType(SpecificationConverter.class, specificationClass, contextClass, targetClass)), qualifier);\n         } else {\n-            return Key.get((TypeLiteral<SpecificationConverter<S, C, T>>) TypeLiteral.get(\n-                    Types.newParameterizedType(SpecificationConverter.class, specificationClass, contextClass,\n-                            targetClass)));\n+            return Key.get((TypeLiteral<SpecificationConverter<S, C, T>>) TypeLiteral.get(Types.newParameterizedType(SpecificationConverter.class, specificationClass, contextClass, targetClass)));\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 33
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/146/BaseSpecificationTranslator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/styler_random/146/BaseSpecificationTranslator.java\nindex 0bfe2749dd3..c540677049c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/146/BaseSpecificationTranslator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/styler_random/146/BaseSpecificationTranslator.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.spi;\n \n import static org.seedstack.business.internal.utils.BusinessUtils.getQualifier;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/146/BaseSpecificationTranslator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/styler_three_grams/146/BaseSpecificationTranslator.java\nindex 0bfe2749dd3..c540677049c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/146/BaseSpecificationTranslator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/styler_three_grams/146/BaseSpecificationTranslator.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.spi;\n \n import static org.seedstack.business.internal.utils.BusinessUtils.getQualifier;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}