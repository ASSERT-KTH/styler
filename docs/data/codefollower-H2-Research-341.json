{
    "project_name": "codefollower-H2-Research",
    "error_id": "341",
    "information": {
        "errors": [
            {
                "line": "104",
                "column": "26",
                "severity": "warning",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "     * @return the matching or next index\n     */\n    int find(long key) { //\u6298\u534a\u67e5\u627e\n        int l = 0, r = entryCount;\n        while (l < r) {\n            int i = (l + r) >>> 1;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/341/PageData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/341/PageData.java\nindex 27391cb758d..7206204f1e6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/341/PageData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/341/PageData.java\n@@ -101,8 +101,9 @@ abstract class PageData extends Page {\n      * @param key the key (may not exist)\n      * @return the matching or next index\n      */\n-    int find(long key) { //\u6298\u534a\u67e5\u627e\n-        int l = 0, r = entryCount;\n+    int find(long key) {\n+        //\u6298\u534a\u67e5\u627e\n+    int l = 0, r = entryCount;\n         while (l < r) {\n             int i = (l + r) >>> 1;\n             long k = keys[i];\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "105",
                    "column": "24",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/341/PageData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/341/PageData.java\nindex 27391cb758d..abaca352f58 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/341/PageData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/341/PageData.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.pagestore.db;\n \n import org.h2.engine.Session;\n@@ -16,234 +17,234 @@ import org.h2.store.Data;\n  */\n abstract class PageData extends Page {\n \n-    /**\n-     * The position of the parent page id.\n-     */\n-    static final int START_PARENT = 3;\n-\n-    /**\n-     * This is a root page.\n-     */\n-    static final int ROOT = 0;\n-\n-    /**\n-     * Indicator that the row count is not known.\n-     */\n-    static final int UNKNOWN_ROWCOUNT = -1;\n-\n-    /**\n-     * The index.\n-     */\n-    protected final PageDataIndex index;\n-\n-    /**\n-     * The page number of the parent.\n-     */\n-    protected int parentPageId;\n-\n-    /**\n-     * The data page.\n-     */\n-    protected final Data data;\n-\n-    /**\n-     * The number of entries.\n-     */\n-    protected int entryCount;\n-\n-    /**\n-     * The row keys.\n-     */\n-    protected long[] keys;\n-\n-    /**\n-     * Whether the data page is up-to-date.\n-     */\n-    protected boolean written;\n-\n-    /**\n-     * The estimated heap memory used by this object, in number of double words\n-     * (4 bytes each).\n-     */\n-    private final int memoryEstimated;\n-\n-    PageData(PageDataIndex index, int pageId, Data data) {\n-        this.index = index;\n-        this.data = data;\n-        setPos(pageId);\n-        memoryEstimated = index.getMemoryPerPage();\n-    }\n-\n-    /**\n-     * Get the real row count. If required, this will read all child pages.\n-     *\n-     * @return the row count\n-     */\n-    abstract int getRowCount();\n-\n-    /**\n-     * Set the stored row count. This will write the page.\n-     *\n-     * @param rowCount the stored row count\n-     */\n-    abstract void setRowCountStored(int rowCount);\n-\n-    /**\n-     * Get the used disk space for this index.\n-     *\n-     * @return the estimated number of bytes\n-     */\n-    abstract long getDiskSpaceUsed();\n-\n-    /**\n-     * Find an entry by key.\n-     *\n-     * @param key the key (may not exist)\n-     * @return the matching or next index\n-     */\n-    int find(long key) { //\u6298\u534a\u67e5\u627e\n-        int l = 0, r = entryCount;\n-        while (l < r) {\n-            int i = (l + r) >>> 1;\n-            long k = keys[i];\n-            if (k == key) {\n-                return i;\n-            } else if (k > key) {\n-                r = i;\n-            } else {\n-                l = i + 1;\n-            }\n-        }\n-        return l;\n-    }\n-\n-    /**\n-     * Add a row if possible. If it is possible this method returns -1,\n-     * otherwise the split point. It is always possible to add one row.\n-     *\n-     * @param row the now to add\n-     * @return the split point of this page, or -1 if no split is required\n-     */\n-    abstract int addRowTry(Row row);\n-\n-    /**\n-     * Get a cursor.\n-     *\n-     * @param session the session\n-     * @param minKey the smallest key\n-     * @param maxKey the largest key\n-     * @return the cursor\n-     */\n-    abstract Cursor find(Session session, long minKey, long maxKey);\n-\n-    /**\n-     * Get the key at this position.\n-     *\n-     * @param at the index\n-     * @return the key\n-     */\n-    long getKey(int at) {\n-        return keys[at];\n-    }\n-\n-    /**\n-     * Split the index page at the given point.\n-     *\n-     * @param splitPoint the index where to split\n-     * @return the new page that contains about half the entries\n-     */\n-    abstract PageData split(int splitPoint);\n-\n-    /**\n-     * Change the page id.\n-     *\n-     * @param id the new page id\n-     */\n-    void setPageId(int id) {\n-        int old = getPos();\n-        index.getPageStore().removeFromCache(getPos());\n-        setPos(id);\n-        index.getPageStore().logUndo(this, null);\n-        remapChildren(old);\n+  /**\n+   * The position of the parent page id.\n+   */\n+  static final int START_PARENT = 3;\n+\n+  /**\n+   * This is a root page.\n+   */\n+  static final int ROOT = 0;\n+\n+  /**\n+   * Indicator that the row count is not known.\n+   */\n+  static final int UNKNOWN_ROWCOUNT = -1;\n+\n+  /**\n+   * The index.\n+   */\n+  protected final PageDataIndex index;\n+\n+  /**\n+   * The page number of the parent.\n+   */\n+  protected int parentPageId;\n+\n+  /**\n+   * The data page.\n+   */\n+  protected final Data data;\n+\n+  /**\n+   * The number of entries.\n+   */\n+  protected int entryCount;\n+\n+  /**\n+   * The row keys.\n+   */\n+  protected long[] keys;\n+\n+  /**\n+   * Whether the data page is up-to-date.\n+   */\n+  protected boolean written;\n+\n+  /**\n+   * The estimated heap memory used by this object, in number of double words\n+   * (4 bytes each).\n+   */\n+  private final int memoryEstimated;\n+\n+  PageData(PageDataIndex index, int pageId, Data data) {\n+    this.index = index;\n+    this.data = data;\n+    setPos(pageId);\n+    memoryEstimated = index.getMemoryPerPage();\n+  }\n+\n+  /**\n+   * Get the real row count. If required, this will read all child pages.\n+   *\n+   * @return the row count\n+   */\n+  abstract int getRowCount();\n+\n+  /**\n+   * Set the stored row count. This will write the page.\n+   *\n+   * @param rowCount the stored row count\n+   */\n+  abstract void setRowCountStored(int rowCount);\n+\n+  /**\n+   * Get the used disk space for this index.\n+   *\n+   * @return the estimated number of bytes\n+   */\n+  abstract long getDiskSpaceUsed();\n+\n+  /**\n+   * Find an entry by key.\n+   *\n+   * @param key the key (may not exist)\n+   * @return the matching or next index\n+   */\n+  int find(long key) { //\u6298\u534a\u67e5\u627e\n+    int l = 0, r = entryCount;\n+    while (l < r) {\n+      int i = (l + r) >>> 1;\n+      long k = keys[i];\n+      if (k == key) {\n+        return i;\n+      } else if (k > key) {\n+        r = i;\n+      } else {\n+        l = i + 1;\n+      }\n     }\n-\n-    /**\n-     * Get the last key of a page.\n-     *\n-     * @return the last key\n-     */\n-    abstract long getLastKey();\n-\n-    /**\n-     * Get the first child leaf page of a page.\n-     *\n-     * @return the page\n-     */\n-    abstract PageDataLeaf getFirstLeaf();\n-\n-    /**\n-     * Change the parent page id.\n-     *\n-     * @param id the new parent page id\n-     */\n-    void setParentPageId(int id) {\n-        index.getPageStore().logUndo(this, data);\n-        parentPageId = id;\n-        if (written) {\n-            changeCount = index.getPageStore().getChangeCount();\n-            data.setInt(START_PARENT, parentPageId);\n-        }\n-    }\n-\n-    /**\n-     * Update the parent id of all children.\n-     *\n-     * @param old the previous position\n-     */\n-    abstract void remapChildren(int old);\n-\n-    /**\n-     * Remove a row.\n-     *\n-     * @param key the key of the row to remove\n-     * @return true if this page is now empty\n-     */\n-    abstract boolean remove(long key);\n-\n-    /**\n-     * Free this page and all child pages.\n-     */\n-    abstract void freeRecursive();\n-\n-    /**\n-     * Get the row for the given key.\n-     *\n-     * @param key the key\n-     * @return the row\n-     */\n-    abstract Row getRowWithKey(long key);\n-\n-    /**\n-     * Get the estimated heap memory size.\n-     *\n-     * @return number of double words (4 bytes each)\n-     */\n-    @Override\n-    public int getMemory() {\n-        // need to always return the same value for the same object (otherwise\n-        // the cache size would change after adding and then removing the same\n-        // page from the cache) but index.getMemoryPerPage() can adopt according\n-        // to how much memory a row needs on average\n-        return memoryEstimated;\n-    }\n-\n-    int getParentPageId() {\n-        return parentPageId;\n-    }\n-\n-    @Override\n-    public boolean canRemove() {\n-        return changeCount < index.getPageStore().getChangeCount();\n+    return l;\n+  }\n+\n+  /**\n+   * Add a row if possible. If it is possible this method returns -1,\n+   * otherwise the split point. It is always possible to add one row.\n+   *\n+   * @param row the now to add\n+   * @return the split point of this page, or -1 if no split is required\n+   */\n+  abstract int addRowTry(Row row);\n+\n+  /**\n+   * Get a cursor.\n+   *\n+   * @param session the session\n+   * @param minKey  the smallest key\n+   * @param maxKey  the largest key\n+   * @return the cursor\n+   */\n+  abstract Cursor find(Session session, long minKey, long maxKey);\n+\n+  /**\n+   * Get the key at this position.\n+   *\n+   * @param at the index\n+   * @return the key\n+   */\n+  long getKey(int at) {\n+    return keys[at];\n+  }\n+\n+  /**\n+   * Split the index page at the given point.\n+   *\n+   * @param splitPoint the index where to split\n+   * @return the new page that contains about half the entries\n+   */\n+  abstract PageData split(int splitPoint);\n+\n+  /**\n+   * Change the page id.\n+   *\n+   * @param id the new page id\n+   */\n+  void setPageId(int id) {\n+    int old = getPos();\n+    index.getPageStore().removeFromCache(getPos());\n+    setPos(id);\n+    index.getPageStore().logUndo(this, null);\n+    remapChildren(old);\n+  }\n+\n+  /**\n+   * Get the last key of a page.\n+   *\n+   * @return the last key\n+   */\n+  abstract long getLastKey();\n+\n+  /**\n+   * Get the first child leaf page of a page.\n+   *\n+   * @return the page\n+   */\n+  abstract PageDataLeaf getFirstLeaf();\n+\n+  /**\n+   * Change the parent page id.\n+   *\n+   * @param id the new parent page id\n+   */\n+  void setParentPageId(int id) {\n+    index.getPageStore().logUndo(this, data);\n+    parentPageId = id;\n+    if (written) {\n+      changeCount = index.getPageStore().getChangeCount();\n+      data.setInt(START_PARENT, parentPageId);\n     }\n+  }\n+\n+  /**\n+   * Update the parent id of all children.\n+   *\n+   * @param old the previous position\n+   */\n+  abstract void remapChildren(int old);\n+\n+  /**\n+   * Remove a row.\n+   *\n+   * @param key the key of the row to remove\n+   * @return true if this page is now empty\n+   */\n+  abstract boolean remove(long key);\n+\n+  /**\n+   * Free this page and all child pages.\n+   */\n+  abstract void freeRecursive();\n+\n+  /**\n+   * Get the row for the given key.\n+   *\n+   * @param key the key\n+   * @return the row\n+   */\n+  abstract Row getRowWithKey(long key);\n+\n+  /**\n+   * Get the estimated heap memory size.\n+   *\n+   * @return number of double words (4 bytes each)\n+   */\n+  @Override\n+  public int getMemory() {\n+    // need to always return the same value for the same object (otherwise\n+    // the cache size would change after adding and then removing the same\n+    // page from the cache) but index.getMemoryPerPage() can adopt according\n+    // to how much memory a row needs on average\n+    return memoryEstimated;\n+  }\n+\n+  int getParentPageId() {\n+    return parentPageId;\n+  }\n+\n+  @Override\n+  public boolean canRemove() {\n+    return changeCount < index.getPageStore().getChangeCount();\n+  }\n \n }\n",
            "diff_size": 280
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "132",
                    "column": "26",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/341/PageData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/341/PageData.java\nindex 27391cb758d..4c71de365bc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/341/PageData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/341/PageData.java\n@@ -14,51 +14,71 @@ import org.h2.store.Data;\n /**\n  * A page that contains data rows.\n  */\n+\n+\n abstract class PageData extends Page {\n \n     /**\n      * The position of the parent page id.\n      */\n+\n+\n     static final int START_PARENT = 3;\n \n     /**\n      * This is a root page.\n      */\n+\n+\n     static final int ROOT = 0;\n \n     /**\n      * Indicator that the row count is not known.\n      */\n+\n+\n     static final int UNKNOWN_ROWCOUNT = -1;\n \n     /**\n      * The index.\n      */\n+\n+\n     protected final PageDataIndex index;\n \n     /**\n      * The page number of the parent.\n      */\n+\n+\n     protected int parentPageId;\n \n     /**\n      * The data page.\n      */\n+\n+\n     protected final Data data;\n \n     /**\n      * The number of entries.\n      */\n+\n+\n     protected int entryCount;\n \n     /**\n      * The row keys.\n      */\n+\n+\n     protected long[] keys;\n \n     /**\n      * Whether the data page is up-to-date.\n      */\n+\n+\n     protected boolean written;\n \n     /**\n@@ -79,6 +99,8 @@ abstract class PageData extends Page {\n      *\n      * @return the row count\n      */\n+\n+\n     abstract int getRowCount();\n \n     /**\n@@ -86,6 +108,8 @@ abstract class PageData extends Page {\n      *\n      * @param rowCount the stored row count\n      */\n+\n+\n     abstract void setRowCountStored(int rowCount);\n \n     /**\n@@ -93,6 +117,8 @@ abstract class PageData extends Page {\n      *\n      * @return the estimated number of bytes\n      */\n+\n+\n     abstract long getDiskSpaceUsed();\n \n     /**\n@@ -101,6 +127,8 @@ abstract class PageData extends Page {\n      * @param key the key (may not exist)\n      * @return the matching or next index\n      */\n+\n+\n     int find(long key) { //\u6298\u534a\u67e5\u627e\n         int l = 0, r = entryCount;\n         while (l < r) {\n@@ -110,7 +138,7 @@ abstract class PageData extends Page {\n                 return i;\n             } else if (k > key) {\n                 r = i;\n-            } else {\n+                      } else {\n                 l = i + 1;\n             }\n         }\n@@ -124,6 +152,8 @@ abstract class PageData extends Page {\n      * @param row the now to add\n      * @return the split point of this page, or -1 if no split is required\n      */\n+\n+\n     abstract int addRowTry(Row row);\n \n     /**\n@@ -134,6 +164,8 @@ abstract class PageData extends Page {\n      * @param maxKey the largest key\n      * @return the cursor\n      */\n+\n+\n     abstract Cursor find(Session session, long minKey, long maxKey);\n \n     /**\n@@ -142,6 +174,8 @@ abstract class PageData extends Page {\n      * @param at the index\n      * @return the key\n      */\n+\n+\n     long getKey(int at) {\n         return keys[at];\n     }\n@@ -152,6 +186,8 @@ abstract class PageData extends Page {\n      * @param splitPoint the index where to split\n      * @return the new page that contains about half the entries\n      */\n+\n+\n     abstract PageData split(int splitPoint);\n \n     /**\n@@ -159,6 +195,8 @@ abstract class PageData extends Page {\n      *\n      * @param id the new page id\n      */\n+\n+\n     void setPageId(int id) {\n         int old = getPos();\n         index.getPageStore().removeFromCache(getPos());\n@@ -172,6 +210,8 @@ abstract class PageData extends Page {\n      *\n      * @return the last key\n      */\n+\n+\n     abstract long getLastKey();\n \n     /**\n@@ -179,6 +219,8 @@ abstract class PageData extends Page {\n      *\n      * @return the page\n      */\n+\n+\n     abstract PageDataLeaf getFirstLeaf();\n \n     /**\n@@ -186,6 +228,8 @@ abstract class PageData extends Page {\n      *\n      * @param id the new parent page id\n      */\n+\n+\n     void setParentPageId(int id) {\n         index.getPageStore().logUndo(this, data);\n         parentPageId = id;\n@@ -200,6 +244,8 @@ abstract class PageData extends Page {\n      *\n      * @param old the previous position\n      */\n+\n+\n     abstract void remapChildren(int old);\n \n     /**\n@@ -208,11 +254,15 @@ abstract class PageData extends Page {\n      * @param key the key of the row to remove\n      * @return true if this page is now empty\n      */\n+\n+\n     abstract boolean remove(long key);\n \n     /**\n      * Free this page and all child pages.\n      */\n+\n+\n     abstract void freeRecursive();\n \n     /**\n@@ -221,6 +271,8 @@ abstract class PageData extends Page {\n      * @param key the key\n      * @return the row\n      */\n+\n+\n     abstract Row getRowWithKey(long key);\n \n     /**\n@@ -228,6 +280,7 @@ abstract class PageData extends Page {\n      *\n      * @return number of double words (4 bytes each)\n      */\n+\n     @Override\n     public int getMemory() {\n         // need to always return the same value for the same object (otherwise\n@@ -237,6 +290,7 @@ abstract class PageData extends Page {\n         return memoryEstimated;\n     }\n \n+\n     int getParentPageId() {\n         return parentPageId;\n     }\n@@ -246,4 +300,4 @@ abstract class PageData extends Page {\n         return changeCount < index.getPageStore().getChangeCount();\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 56
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/341/PageData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/341/PageData.java\nindex 27391cb758d..7206204f1e6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/341/PageData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/341/PageData.java\n@@ -101,8 +101,9 @@ abstract class PageData extends Page {\n      * @param key the key (may not exist)\n      * @return the matching or next index\n      */\n-    int find(long key) { //\u6298\u534a\u67e5\u627e\n-        int l = 0, r = entryCount;\n+    int find(long key) {\n+        //\u6298\u534a\u67e5\u627e\n+    int l = 0, r = entryCount;\n         while (l < r) {\n             int i = (l + r) >>> 1;\n             long k = keys[i];\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/341/PageData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/341/PageData.java\nindex 27391cb758d..b0ac586ea55 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/341/PageData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/341/PageData.java\n@@ -101,8 +101,9 @@ abstract class PageData extends Page {\n      * @param key the key (may not exist)\n      * @return the matching or next index\n      */\n-    int find(long key) { //\u6298\u534a\u67e5\u627e\n-        int l = 0, r = entryCount;\n+    int find(long key) {\n+    //\u6298\u534a\u67e5\u627e\n+    int l = 0, r = entryCount;\n         while (l < r) {\n             int i = (l + r) >>> 1;\n             long k = keys[i];\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}