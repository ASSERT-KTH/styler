{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "481",
    "information": {
        "errors": [
            {
                "line": "34",
                "severity": "warning",
                "message": "Line is longer than 100 characters (found 108).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "public class SerializationTest extends BaseSerializationTest {\n\n  private static final Storage STORAGE = StorageOptions.newBuilder().setProjectId(\"p\").build().getService();\n  private static final Acl.Domain ACL_DOMAIN = new Acl.Domain(\"domain\");\n  private static final Acl.Group ACL_GROUP = new Acl.Group(\"group\");\n  private static final Acl.Project ACL_PROJECT_ = new Acl.Project(ProjectRole.VIEWERS, \"pid\");",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "34",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/481/SerializationTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/481/SerializationTest.java\nindex 0a8d55ae307..dc11ada15a7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/481/SerializationTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/481/SerializationTest.java\n@@ -31,7 +31,8 @@ import java.util.Map;\n \n public class SerializationTest extends BaseSerializationTest {\n \n-  private static final Storage STORAGE = StorageOptions.newBuilder().setProjectId(\"p\").build().getService();\n+  private static final Storage STORAGE =\n+      StorageOptions.newBuilder().setProjectId(\"p\").build().getService();\n   private static final Acl.Domain ACL_DOMAIN = new Acl.Domain(\"domain\");\n   private static final Acl.Group ACL_GROUP = new Acl.Group(\"group\");\n   private static final Acl.Project ACL_PROJECT_ = new Acl.Project(ProjectRole.VIEWERS, \"pid\");\n@@ -69,7 +70,7 @@ public class SerializationTest extends BaseSerializationTest {\n         .setCredentials(NoCredentials.getInstance())\n         .build();\n     StorageOptions otherOptions = options.toBuilder().setProjectId(\"p2\").build();\n-    return new Serializable[]{ACL_DOMAIN, ACL_GROUP, ACL_PROJECT_, ACL_USER, ACL_RAW, ACL,\n+    return new Serializable[] {ACL_DOMAIN, ACL_GROUP, ACL_PROJECT_, ACL_USER, ACL_RAW, ACL,\n         BLOB_INFO, BLOB, BUCKET_INFO, BUCKET, ORIGIN, CORS, PAGE_RESULT, BLOB_LIST_OPTIONS,\n         BLOB_SOURCE_OPTIONS, BLOB_TARGET_OPTIONS, BUCKET_LIST_OPTIONS, BUCKET_SOURCE_OPTIONS,\n         BUCKET_TARGET_OPTIONS, STORAGE_EXCEPTION, options, otherOptions};\n@@ -84,6 +85,6 @@ public class SerializationTest extends BaseSerializationTest {\n     @SuppressWarnings(\"resource\")\n     BlobWriteChannel writer = new BlobWriteChannel(options,\n         BlobInfo.newBuilder(BlobId.of(\"b\", \"n\")).build(), \"upload-id\");\n-    return new Restorable<?>[]{reader, writer};\n+    return new Restorable<?>[] {reader, writer};\n   }\n }\n",
            "diff_size": 4
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "34",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "46",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "47",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "49",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "50",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "51",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "52",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "54",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "59",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "61",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 326).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "70",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/481/SerializationTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/481/SerializationTest.java\nindex 0a8d55ae307..279eda13686 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/481/SerializationTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/481/SerializationTest.java\n@@ -24,11 +24,11 @@ import com.google.cloud.Restorable;\n import com.google.cloud.storage.Acl.Project.ProjectRole;\n import com.google.cloud.storage.spi.v1.StorageRpc;\n import com.google.common.collect.ImmutableMap;\n-\n import java.io.Serializable;\n import java.util.Collections;\n import java.util.Map;\n \n+\n public class SerializationTest extends BaseSerializationTest {\n \n   private static final Storage STORAGE = StorageOptions.newBuilder().setProjectId(\"p\").build().getService();\n@@ -43,47 +43,31 @@ public class SerializationTest extends BaseSerializationTest {\n   private static final Blob BLOB = new Blob(STORAGE, new BlobInfo.BuilderImpl(BLOB_INFO));\n   private static final Bucket BUCKET = new Bucket(STORAGE, new BucketInfo.BuilderImpl(BUCKET_INFO));\n   private static final Cors.Origin ORIGIN = Cors.Origin.any();\n-  private static final Cors CORS =\n-      Cors.newBuilder().setMaxAgeSeconds(1).setOrigins(Collections.singleton(ORIGIN)).build();\n-  private static final PageImpl<Blob> PAGE_RESULT =\n-      new PageImpl<>(null, \"c\", Collections.singletonList(BLOB));\n+  private static final Cors CORS = Cors.newBuilder().setMaxAgeSeconds(1).setOrigins(Collections.singleton(ORIGIN)).build();\n+  private static final PageImpl<Blob> PAGE_RESULT = new PageImpl<>(null, \"c\", Collections.singletonList(BLOB));\n   private static final StorageException STORAGE_EXCEPTION = new StorageException(42, \"message\");\n-  private static final Storage.BlobListOption BLOB_LIST_OPTIONS =\n-      Storage.BlobListOption.pageSize(100);\n-  private static final Storage.BlobSourceOption BLOB_SOURCE_OPTIONS =\n-      Storage.BlobSourceOption.generationMatch(1);\n-  private static final Storage.BlobTargetOption BLOB_TARGET_OPTIONS =\n-      Storage.BlobTargetOption.generationMatch();\n-  private static final Storage.BucketListOption BUCKET_LIST_OPTIONS =\n-      Storage.BucketListOption.prefix(\"bla\");\n-  private static final Storage.BucketSourceOption BUCKET_SOURCE_OPTIONS =\n-      Storage.BucketSourceOption.metagenerationMatch(1);\n-  private static final Storage.BucketTargetOption BUCKET_TARGET_OPTIONS =\n-      Storage.BucketTargetOption.metagenerationNotMatch();\n+  private static final Storage.BlobListOption BLOB_LIST_OPTIONS = Storage.BlobListOption.pageSize(100);\n+  private static final Storage.BlobSourceOption BLOB_SOURCE_OPTIONS = Storage.BlobSourceOption.generationMatch(1);\n+  private static final Storage.BlobTargetOption BLOB_TARGET_OPTIONS = Storage.BlobTargetOption.generationMatch();\n+  private static final Storage.BucketListOption BUCKET_LIST_OPTIONS = Storage.BucketListOption.prefix(\"bla\");\n+  private static final Storage.BucketSourceOption BUCKET_SOURCE_OPTIONS = Storage.BucketSourceOption.metagenerationMatch(1);\n+  private static final Storage.BucketTargetOption BUCKET_TARGET_OPTIONS = Storage.BucketTargetOption.metagenerationNotMatch();\n   private static final Map<StorageRpc.Option, ?> EMPTY_RPC_OPTIONS = ImmutableMap.of();\n \n   @Override\n   protected Serializable[] serializableObjects() {\n-    StorageOptions options = StorageOptions.newBuilder()\n-        .setProjectId(\"p1\")\n-        .setCredentials(NoCredentials.getInstance())\n-        .build();\n+    StorageOptions options = StorageOptions.newBuilder().setProjectId(\"p1\").setCredentials(NoCredentials.getInstance()).build();\n     StorageOptions otherOptions = options.toBuilder().setProjectId(\"p2\").build();\n-    return new Serializable[]{ACL_DOMAIN, ACL_GROUP, ACL_PROJECT_, ACL_USER, ACL_RAW, ACL,\n-        BLOB_INFO, BLOB, BUCKET_INFO, BUCKET, ORIGIN, CORS, PAGE_RESULT, BLOB_LIST_OPTIONS,\n-        BLOB_SOURCE_OPTIONS, BLOB_TARGET_OPTIONS, BUCKET_LIST_OPTIONS, BUCKET_SOURCE_OPTIONS,\n-        BUCKET_TARGET_OPTIONS, STORAGE_EXCEPTION, options, otherOptions};\n+    return new Serializable[]{ACL_DOMAIN, ACL_GROUP, ACL_PROJECT_, ACL_USER, ACL_RAW, ACL, BLOB_INFO, BLOB, BUCKET_INFO, BUCKET, ORIGIN, CORS, PAGE_RESULT, BLOB_LIST_OPTIONS, BLOB_SOURCE_OPTIONS, BLOB_TARGET_OPTIONS, BUCKET_LIST_OPTIONS, BUCKET_SOURCE_OPTIONS, BUCKET_TARGET_OPTIONS, STORAGE_EXCEPTION, options, otherOptions};\n   }\n \n   @Override\n   protected Restorable<?>[] restorableObjects() {\n     StorageOptions options = StorageOptions.newBuilder().setProjectId(\"p2\").build();\n-    ReadChannel reader =\n-        new BlobReadChannel(options, BlobId.of(\"b\", \"n\"), EMPTY_RPC_OPTIONS);\n+    ReadChannel reader = new BlobReadChannel(options, BlobId.of(\"b\", \"n\"), EMPTY_RPC_OPTIONS);\n     // avoid closing when you don't want partial writes to GCS upon failure\n     @SuppressWarnings(\"resource\")\n-    BlobWriteChannel writer = new BlobWriteChannel(options,\n-        BlobInfo.newBuilder(BlobId.of(\"b\", \"n\")).build(), \"upload-id\");\n+    BlobWriteChannel writer = new BlobWriteChannel(options, BlobInfo.newBuilder(BlobId.of(\"b\", \"n\")).build(), \"upload-id\");\n     return new Restorable<?>[]{reader, writer};\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 31
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "36",
                    "column": "72",
                    "severity": "warning",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/481/SerializationTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/481/SerializationTest.java\nindex 0a8d55ae307..fcede1648ea 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/481/SerializationTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/481/SerializationTest.java\n@@ -31,8 +31,9 @@ import java.util.Map;\n \n public class SerializationTest extends BaseSerializationTest {\n \n-  private static final Storage STORAGE = StorageOptions.newBuilder().setProjectId(\"p\").build().getService();\n-  private static final Acl.Domain ACL_DOMAIN = new Acl.Domain(\"domain\");\n+  private static final Storage STORAGE = StorageOptions.newBuilder().setProjectId(\"p\"\n+      ).build().getService()\n+; private static final Acl.Domain ACL_DOMAIN = new Acl.Domain(\"domain\");\n   private static final Acl.Group ACL_GROUP = new Acl.Group(\"group\");\n   private static final Acl.Project ACL_PROJECT_ = new Acl.Project(ProjectRole.VIEWERS, \"pid\");\n   private static final Acl.User ACL_USER = new Acl.User(\"user\");\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "34",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}