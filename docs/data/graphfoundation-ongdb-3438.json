{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3438",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "58",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3438/RelationshipRecordFormatV3_0_0.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3438/RelationshipRecordFormatV3_0_0.java\nindex 87991918ce6..827a2e3702b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3438/RelationshipRecordFormatV3_0_0.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3438/RelationshipRecordFormatV3_0_0.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.format.highlimit.v300;\n \n import org.neo4j.io.pagecache.PageCursor;\n@@ -28,7 +29,7 @@ import static org.neo4j.kernel.impl.store.format.highlimit.Reference.toRelative;\n /**\n  * LEGEND:\n  * V: variable between 3B-8B\n- *\n+ * <p>\n  * Record format:\n  * 1B   header\n  * 2B   relationship type\n@@ -39,127 +40,127 @@ import static org.neo4j.kernel.impl.store.format.highlimit.Reference.toRelative;\n  * VB   start node chain next relationship\n  * VB   end node chain previous relationship\n  * VB   end node chain next relationship\n- *\n+ * <p>\n  * => 24B-59B\n  */\n public class RelationshipRecordFormatV3_0_0 extends BaseHighLimitRecordFormatV3_0_0<RelationshipRecord>\n {\n-    public static final int RECORD_SIZE = 32;\n-\n-    private static final int FIRST_IN_FIRST_CHAIN_BIT = 0b0000_1000;\n-    private static final int FIRST_IN_SECOND_CHAIN_BIT = 0b0001_0000;\n-    private static final int HAS_FIRST_CHAIN_NEXT_BIT = 0b0010_0000;\n-    private static final int HAS_SECOND_CHAIN_NEXT_BIT = 0b0100_0000;\n-    private static final int HAS_PROPERTY_BIT = 0b1000_0000;\n-\n-    public RelationshipRecordFormatV3_0_0()\n-    {\n-        this( RECORD_SIZE );\n-    }\n-\n-    RelationshipRecordFormatV3_0_0( int recordSize )\n-    {\n-        super( fixedRecordSize( recordSize ), 0 );\n-    }\n-\n-    @Override\n-    public RelationshipRecord newRecord()\n-    {\n-        return new RelationshipRecord( -1 );\n-    }\n-\n-    @Override\n-    protected void doReadInternal(\n-            RelationshipRecord record, PageCursor cursor, int recordSize, long headerByte, boolean inUse )\n-    {\n-        int type = cursor.getShort() & 0xFFFF;\n-        long recordId = record.getId();\n-        record.initialize( inUse,\n-                decodeCompressedReference( cursor, headerByte, HAS_PROPERTY_BIT, NULL ),\n-                decodeCompressedReference( cursor ),\n-                decodeCompressedReference( cursor ),\n-                type,\n-                decodeAbsoluteOrRelative( cursor, headerByte, FIRST_IN_FIRST_CHAIN_BIT, recordId ),\n-                decodeAbsoluteIfPresent( cursor, headerByte, HAS_FIRST_CHAIN_NEXT_BIT, recordId ),\n-                decodeAbsoluteOrRelative( cursor, headerByte, FIRST_IN_SECOND_CHAIN_BIT, recordId ),\n-                decodeAbsoluteIfPresent( cursor, headerByte, HAS_SECOND_CHAIN_NEXT_BIT, recordId ),\n-                has( headerByte, FIRST_IN_FIRST_CHAIN_BIT ),\n-                has( headerByte, FIRST_IN_SECOND_CHAIN_BIT ) );\n-    }\n-\n-    private long decodeAbsoluteOrRelative( PageCursor cursor, long headerByte, int firstInStartBit, long recordId )\n-    {\n-        return has( headerByte, firstInStartBit ) ?\n-               decodeCompressedReference( cursor ) :\n-               toAbsolute( decodeCompressedReference( cursor ), recordId );\n-    }\n-\n-    @Override\n-    protected byte headerBits( RelationshipRecord record )\n-    {\n-        byte header = 0;\n-        header = set( header, FIRST_IN_FIRST_CHAIN_BIT, record.isFirstInFirstChain() );\n-        header = set( header, FIRST_IN_SECOND_CHAIN_BIT, record.isFirstInSecondChain() );\n-        header = set( header, HAS_PROPERTY_BIT, record.getNextProp(), NULL );\n-        header = set( header, HAS_FIRST_CHAIN_NEXT_BIT, record.getFirstNextRel(), NULL );\n-        header = set( header, HAS_SECOND_CHAIN_NEXT_BIT, record.getSecondNextRel(), NULL );\n-        return header;\n-    }\n-\n-    @Override\n-    protected int requiredDataLength( RelationshipRecord record )\n-    {\n-        long recordId = record.getId();\n-        return Short.BYTES + // type\n-               length( record.getNextProp(), NULL ) +\n-               length( record.getFirstNode() ) +\n-               length( record.getSecondNode() ) +\n-               length( getFirstPrevReference( record, recordId ) ) +\n-               getRelativeReferenceLength( record.getFirstNextRel(), recordId ) +\n-               length( getSecondPrevReference( record, recordId ) ) +\n-               getRelativeReferenceLength( record.getSecondNextRel(), recordId );\n-    }\n-\n-    @Override\n-    protected void doWriteInternal( RelationshipRecord record, PageCursor cursor )\n-    {\n-        cursor.putShort( (short) record.getType() );\n-        long recordId = record.getId();\n-        encode( cursor, record.getNextProp(), NULL );\n-        encode( cursor, record.getFirstNode() );\n-        encode( cursor, record.getSecondNode() );\n-\n-        encode( cursor, getFirstPrevReference( record, recordId ) );\n-        if ( record.getFirstNextRel() != NULL )\n-        {\n-            encode( cursor, toRelative( record.getFirstNextRel(), recordId ) );\n-        }\n-        encode( cursor, getSecondPrevReference( record, recordId ) );\n-        if ( record.getSecondNextRel() != NULL )\n-        {\n-            encode( cursor, toRelative( record.getSecondNextRel(), recordId ) );\n-        }\n-    }\n-\n-    private long getSecondPrevReference( RelationshipRecord record, long recordId )\n-    {\n-        return record.isFirstInSecondChain() ? record.getSecondPrevRel() :\n-               toRelative( record.getSecondPrevRel(), recordId );\n-    }\n-\n-    private long getFirstPrevReference( RelationshipRecord record, long recordId )\n+  public static final int RECORD_SIZE = 32;\n+\n+  private static final int FIRST_IN_FIRST_CHAIN_BIT = 0b0000_1000;\n+  private static final int FIRST_IN_SECOND_CHAIN_BIT = 0b0001_0000;\n+  private static final int HAS_FIRST_CHAIN_NEXT_BIT = 0b0010_0000;\n+  private static final int HAS_SECOND_CHAIN_NEXT_BIT = 0b0100_0000;\n+  private static final int HAS_PROPERTY_BIT = 0b1000_0000;\n+\n+  public RelationshipRecordFormatV3_0_0()\n+  {\n+    this(RECORD_SIZE);\n+  }\n+\n+  RelationshipRecordFormatV3_0_0(int recordSize)\n+  {\n+    super(fixedRecordSize(recordSize), 0);\n+  }\n+\n+  @Override\n+  public RelationshipRecord newRecord()\n+  {\n+    return new RelationshipRecord(-1);\n+  }\n+\n+  @Override\n+  protected void doReadInternal(\n+      RelationshipRecord record, PageCursor cursor, int recordSize, long headerByte, boolean inUse)\n+  {\n+    int type = cursor.getShort() & 0xFFFF;\n+    long recordId = record.getId();\n+    record.initialize(inUse,\n+        decodeCompressedReference(cursor, headerByte, HAS_PROPERTY_BIT, NULL),\n+        decodeCompressedReference(cursor),\n+        decodeCompressedReference(cursor),\n+        type,\n+        decodeAbsoluteOrRelative(cursor, headerByte, FIRST_IN_FIRST_CHAIN_BIT, recordId),\n+        decodeAbsoluteIfPresent(cursor, headerByte, HAS_FIRST_CHAIN_NEXT_BIT, recordId),\n+        decodeAbsoluteOrRelative(cursor, headerByte, FIRST_IN_SECOND_CHAIN_BIT, recordId),\n+        decodeAbsoluteIfPresent(cursor, headerByte, HAS_SECOND_CHAIN_NEXT_BIT, recordId),\n+        has(headerByte, FIRST_IN_FIRST_CHAIN_BIT),\n+        has(headerByte, FIRST_IN_SECOND_CHAIN_BIT));\n+  }\n+\n+  private long decodeAbsoluteOrRelative(PageCursor cursor, long headerByte, int firstInStartBit, long recordId)\n+  {\n+    return has(headerByte, firstInStartBit) ?\n+        decodeCompressedReference(cursor) :\n+        toAbsolute(decodeCompressedReference(cursor), recordId);\n+  }\n+\n+  @Override\n+  protected byte headerBits(RelationshipRecord record)\n+  {\n+    byte header = 0;\n+    header = set(header, FIRST_IN_FIRST_CHAIN_BIT, record.isFirstInFirstChain());\n+    header = set(header, FIRST_IN_SECOND_CHAIN_BIT, record.isFirstInSecondChain());\n+    header = set(header, HAS_PROPERTY_BIT, record.getNextProp(), NULL);\n+    header = set(header, HAS_FIRST_CHAIN_NEXT_BIT, record.getFirstNextRel(), NULL);\n+    header = set(header, HAS_SECOND_CHAIN_NEXT_BIT, record.getSecondNextRel(), NULL);\n+    return header;\n+  }\n+\n+  @Override\n+  protected int requiredDataLength(RelationshipRecord record)\n+  {\n+    long recordId = record.getId();\n+    return Short.BYTES + // type\n+        length(record.getNextProp(), NULL) +\n+        length(record.getFirstNode()) +\n+        length(record.getSecondNode()) +\n+        length(getFirstPrevReference(record, recordId)) +\n+        getRelativeReferenceLength(record.getFirstNextRel(), recordId) +\n+        length(getSecondPrevReference(record, recordId)) +\n+        getRelativeReferenceLength(record.getSecondNextRel(), recordId);\n+  }\n+\n+  @Override\n+  protected void doWriteInternal(RelationshipRecord record, PageCursor cursor)\n+  {\n+    cursor.putShort((short) record.getType());\n+    long recordId = record.getId();\n+    encode(cursor, record.getNextProp(), NULL);\n+    encode(cursor, record.getFirstNode());\n+    encode(cursor, record.getSecondNode());\n+\n+    encode(cursor, getFirstPrevReference(record, recordId));\n+    if (record.getFirstNextRel() != NULL)\n     {\n-        return record.isFirstInFirstChain() ? record.getFirstPrevRel()\n-                                            : toRelative( record.getFirstPrevRel(), recordId );\n+      encode(cursor, toRelative(record.getFirstNextRel(), recordId));\n     }\n-\n-    private int getRelativeReferenceLength( long absoluteReference, long recordId )\n-    {\n-        return absoluteReference != NULL ? length( toRelative( absoluteReference, recordId ) ) : 0;\n-    }\n-\n-    private long decodeAbsoluteIfPresent( PageCursor cursor, long headerByte, int conditionBit, long recordId )\n+    encode(cursor, getSecondPrevReference(record, recordId));\n+    if (record.getSecondNextRel() != NULL)\n     {\n-        return has( headerByte, conditionBit ) ? toAbsolute( decodeCompressedReference( cursor ), recordId ) : NULL;\n+      encode(cursor, toRelative(record.getSecondNextRel(), recordId));\n     }\n+  }\n+\n+  private long getSecondPrevReference(RelationshipRecord record, long recordId)\n+  {\n+    return record.isFirstInSecondChain() ? record.getSecondPrevRel() :\n+        toRelative(record.getSecondPrevRel(), recordId);\n+  }\n+\n+  private long getFirstPrevReference(RelationshipRecord record, long recordId)\n+  {\n+    return record.isFirstInFirstChain() ? record.getFirstPrevRel()\n+        : toRelative(record.getFirstPrevRel(), recordId);\n+  }\n+\n+  private int getRelativeReferenceLength(long absoluteReference, long recordId)\n+  {\n+    return absoluteReference != NULL ? length(toRelative(absoluteReference, recordId)) : 0;\n+  }\n+\n+  private long decodeAbsoluteIfPresent(PageCursor cursor, long headerByte, int conditionBit, long recordId)\n+  {\n+    return has(headerByte, conditionBit) ? toAbsolute(decodeCompressedReference(cursor), recordId) : NULL;\n+  }\n }\n",
            "diff_size": 140
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}