{
    "project_name": "Angel-ML-angel",
    "error_id": "597",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/597/ServerIntFloatRow.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/597/ServerIntFloatRow.java\nindex 592cf714d7c..d8e41c6cd1b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/597/ServerIntFloatRow.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/597/ServerIntFloatRow.java\n@@ -40,29 +40,29 @@ public class ServerIntFloatRow extends ServerBasicTypeRow implements IIntFloatOp\n   /**\n    * Create a new ServerIntDoubleRow\n    *\n-   * @param rowId row index\n-   * @param rowType row type\n-   * @param startCol start position\n-   * @param endCol end position\n+   * @param rowId      row index\n+   * @param rowType    row type\n+   * @param startCol   start position\n+   * @param endCol     end position\n    * @param estElemNum the estimate element number\n-   * @param storage inner storage\n+   * @param storage    inner storage\n    */\n   public ServerIntFloatRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum,\n-      IntFloatStorage storage, RouterType routerType) {\n+                           IntFloatStorage storage, RouterType routerType) {\n     super(rowId, rowType, startCol, endCol, estElemNum, storage, routerType);\n   }\n \n   /**\n    * Create a new ServerIntDoubleRow\n    *\n-   * @param rowId row index\n-   * @param rowType row type\n-   * @param startCol start position\n-   * @param endCol end position\n+   * @param rowId      row index\n+   * @param rowType    row type\n+   * @param startCol   start position\n+   * @param endCol     end position\n    * @param estElemNum the estimate element number\n    */\n   public ServerIntFloatRow(int rowId, RowType rowType, int startCol, int endCol,\n-      int estElemNum, RouterType routerType) {\n+                           int estElemNum, RouterType routerType) {\n     this(rowId, rowType, startCol, endCol, estElemNum, null, routerType);\n   }\n \n",
            "diff_size": 11
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "63",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/597/ServerIntFloatRow.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/597/ServerIntFloatRow.java\nindex 592cf714d7c..e6cbdfe17e3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/597/ServerIntFloatRow.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/597/ServerIntFloatRow.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ps.storage.vector;\n \n import com.tencent.angel.ml.math2.vector.IntFloatVector;\n@@ -61,9 +60,8 @@ public class ServerIntFloatRow extends ServerBasicTypeRow implements IIntFloatOp\n    * @param endCol end position\n    * @param estElemNum the estimate element number\n    */\n-  public ServerIntFloatRow(int rowId, RowType rowType, int startCol, int endCol,\n-      int estElemNum, RouterType routerType) {\n-    this(rowId, rowType, startCol, endCol, estElemNum, null, routerType);\n+  public ServerIntFloatRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum, RouterType routerType) {\n+  this(rowId, rowType, startCol, endCol, estElemNum, null, routerType);\n   }\n \n   /**\n@@ -137,8 +135,8 @@ public class ServerIntFloatRow extends ServerBasicTypeRow implements IIntFloatOp\n     startRead();\n     try {\n       return new ServerIntFloatRow(rowId, rowType, (int) startCol, (int) endCol, (int) estElemNum,\n-          (IntFloatStorage) getStorage().deepClone(), routerType);\n-    } finally {\n+(IntFloatStorage) getStorage().deepClone(), routerType);\n+  } finally {\n       endRead();\n     }\n   }\n@@ -148,8 +146,8 @@ public class ServerIntFloatRow extends ServerBasicTypeRow implements IIntFloatOp\n     startRead();\n     try {\n       return new ServerIntFloatRow(rowId, rowType, (int) startCol, (int) endCol, (int) estElemNum,\n-          (IntFloatStorage) getStorage().adaptiveClone(), routerType);\n-    } finally {\n+(IntFloatStorage) getStorage().adaptiveClone(), routerType);\n+  } finally {\n       endRead();\n     }\n   }\n@@ -178,4 +176,4 @@ public class ServerIntFloatRow extends ServerBasicTypeRow implements IIntFloatOp\n   public void elemUpdate(FloatElemUpdateFunc func) {\n     getStorage().elemUpdate(func);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "66",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/597/ServerIntFloatRow.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/597/ServerIntFloatRow.java\nindex 592cf714d7c..cdc2ffc7a8a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/597/ServerIntFloatRow.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/597/ServerIntFloatRow.java\n@@ -33,6 +33,7 @@ import org.apache.commons.logging.LogFactory;\n /**\n  * The row with \"int\" index type and \"float\" value type in PS\n  */\n+\n public class ServerIntFloatRow extends ServerBasicTypeRow implements IIntFloatOp {\n \n   private static final Log LOG = LogFactory.getLog(ServerIntFloatRow.class);\n@@ -47,8 +48,8 @@ public class ServerIntFloatRow extends ServerBasicTypeRow implements IIntFloatOp\n    * @param estElemNum the estimate element number\n    * @param storage inner storage\n    */\n-  public ServerIntFloatRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum,\n-      IntFloatStorage storage, RouterType routerType) {\n+\n+  public ServerIntFloatRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum, IntFloatStorage storage, RouterType routerType) {\n     super(rowId, rowType, startCol, endCol, estElemNum, storage, routerType);\n   }\n \n@@ -61,8 +62,8 @@ public class ServerIntFloatRow extends ServerBasicTypeRow implements IIntFloatOp\n    * @param endCol end position\n    * @param estElemNum the estimate element number\n    */\n-  public ServerIntFloatRow(int rowId, RowType rowType, int startCol, int endCol,\n-      int estElemNum, RouterType routerType) {\n+\n+  public ServerIntFloatRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum, RouterType routerType) {\n     this(rowId, rowType, startCol, endCol, estElemNum, null, routerType);\n   }\n \n@@ -71,6 +72,7 @@ public class ServerIntFloatRow extends ServerBasicTypeRow implements IIntFloatOp\n    *\n    * @param rowType row type\n    */\n+\n   public ServerIntFloatRow(RowType rowType) {\n     this(0, rowType, 0, 0, 0, RouterType.RANGE);\n   }\n@@ -136,8 +138,11 @@ public class ServerIntFloatRow extends ServerBasicTypeRow implements IIntFloatOp\n   public ServerRow deepClone() {\n     startRead();\n     try {\n-      return new ServerIntFloatRow(rowId, rowType, (int) startCol, (int) endCol, (int) estElemNum,\n-          (IntFloatStorage) getStorage().deepClone(), routerType);\n+      return new ServerIntFloatRow(rowId, rowType,\n+        (int) startCol,\n+        (int) endCol,\n+        (int) estElemNum,\n+        (IntFloatStorage) getStorage().deepClone(), routerType);\n     } finally {\n       endRead();\n     }\n@@ -147,8 +152,11 @@ public class ServerIntFloatRow extends ServerBasicTypeRow implements IIntFloatOp\n   public ServerRow adaptiveClone() {\n     startRead();\n     try {\n-      return new ServerIntFloatRow(rowId, rowType, (int) startCol, (int) endCol, (int) estElemNum,\n-          (IntFloatStorage) getStorage().adaptiveClone(), routerType);\n+      return new ServerIntFloatRow(rowId, rowType,\n+        (int) startCol,\n+        (int) endCol,\n+        (int) estElemNum,\n+        (IntFloatStorage) getStorage().adaptiveClone(), routerType);\n     } finally {\n       endRead();\n     }\n@@ -160,6 +168,7 @@ public class ServerIntFloatRow extends ServerBasicTypeRow implements IIntFloatOp\n    * @param index element index\n    * @return true means exist\n    */\n+\n   public boolean exist(int index) {\n     return getStorage().exist(index);\n   }\n@@ -170,7 +179,8 @@ public class ServerIntFloatRow extends ServerBasicTypeRow implements IIntFloatOp\n   }\n \n   @Override\n-  public void indexGet(KeyType keyType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func) {\n+  public void indexGet(\n+    KeyType keyType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func) {\n     getStorage().indexGet(keyType, indexSize, in, out, func);\n   }\n \n@@ -178,4 +188,5 @@ public class ServerIntFloatRow extends ServerBasicTypeRow implements IIntFloatOp\n   public void elemUpdate(FloatElemUpdateFunc func) {\n     getStorage().elemUpdate(func);\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}