{
    "project_name": "neo4j-neo4j",
    "error_id": "3248",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "50",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "96",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "78",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "94",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "126",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "129",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "114",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "123",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "160",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "124",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "155",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "68",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3248/NativeIndexReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3248/NativeIndexReader.java\nindex 686802a63cd..005fe1f4b3f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3248/NativeIndexReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3248/NativeIndexReader.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema;\n \n import java.io.IOException;\n@@ -43,10 +44,10 @@ import static org.neo4j.kernel.impl.index.schema.NativeIndexKey.Inclusion.NEUTRA\n abstract class NativeIndexReader<KEY extends NativeIndexKey<KEY>, VALUE extends NativeIndexValue> implements IndexReader\n {\n     protected final IndexDescriptor descriptor;\n-    final IndexLayout<KEY,VALUE> layout;\n-    final GBPTree<KEY,VALUE> tree;\n+    final IndexLayout<KEY, VALUE> layout;\n+    final GBPTree<KEY, VALUE> tree;\n \n-    NativeIndexReader( GBPTree<KEY,VALUE> tree, IndexLayout<KEY,VALUE> layout, IndexDescriptor descriptor )\n+    NativeIndexReader(GBPTree<KEY, VALUE> tree, IndexLayout<KEY, VALUE> layout, IndexDescriptor descriptor)\n     {\n         this.tree = tree;\n         this.layout = layout;\n@@ -68,19 +69,18 @@ abstract class NativeIndexReader<KEY extends NativeIndexKey<KEY>, VALUE extends\n         // non-unique sampler which scans the index and counts (potentially duplicates, of which there will\n         // be none in a unique index).\n \n-        FullScanNonUniqueIndexSampler<KEY,VALUE> sampler = new FullScanNonUniqueIndexSampler<>( tree, layout );\n+        FullScanNonUniqueIndexSampler<KEY, VALUE> sampler = new FullScanNonUniqueIndexSampler<>(tree, layout);\n         return tracer ->\n         {\n             try\n             {\n-                return sampler.sample( tracer );\n-            }\n-            catch ( UncheckedIOException e )\n+                return sampler.sample(tracer);\n+            } catch (UncheckedIOException e)\n             {\n-                if ( getRootCause( e ) instanceof FileIsNotMappedException )\n+                if (getRootCause(e) instanceof FileIsNotMappedException)\n                 {\n-                    IndexNotFoundKernelException exception = new IndexNotFoundKernelException( \"Index dropped while sampling.\" );\n-                    exception.addSuppressed( e );\n+                    IndexNotFoundKernelException exception = new IndexNotFoundKernelException(\"Index dropped while sampling.\");\n+                    exception.addSuppressed(e);\n                     throw exception;\n                 }\n                 throw e;\n@@ -89,101 +89,99 @@ abstract class NativeIndexReader<KEY extends NativeIndexKey<KEY>, VALUE extends\n     }\n \n     @Override\n-    public long countIndexedEntities( long entityId, PageCursorTracer cursorTracer, int[] propertyKeyIds, Value... propertyValues )\n+    public long countIndexedEntities(long entityId, PageCursorTracer cursorTracer, int[] propertyKeyIds, Value... propertyValues)\n     {\n         KEY treeKeyFrom = layout.newKey();\n         KEY treeKeyTo = layout.newKey();\n-        treeKeyFrom.initialize( entityId );\n-        treeKeyTo.initialize( entityId );\n-        for ( int i = 0; i < propertyValues.length; i++ )\n+        treeKeyFrom.initialize(entityId);\n+        treeKeyTo.initialize(entityId);\n+        for (int i = 0; i < propertyValues.length; i++)\n         {\n-            treeKeyFrom.initFromValue( i, propertyValues[i], NEUTRAL );\n-            treeKeyTo.initFromValue( i, propertyValues[i], NEUTRAL );\n+            treeKeyFrom.initFromValue(i, propertyValues[i], NEUTRAL);\n+            treeKeyTo.initFromValue(i, propertyValues[i], NEUTRAL);\n         }\n-        try ( Seeker<KEY,VALUE> seeker = tree.seek( treeKeyFrom, treeKeyTo, cursorTracer ) )\n+        try (Seeker<KEY, VALUE> seeker = tree.seek(treeKeyFrom, treeKeyTo, cursorTracer))\n         {\n             long count = 0;\n-            while ( seeker.next() )\n+            while (seeker.next())\n             {\n-                if ( seeker.key().getEntityId() == entityId )\n+                if (seeker.key().getEntityId() == entityId)\n                 {\n                     count++;\n                 }\n             }\n             return count;\n-        }\n-        catch ( IOException e )\n+        } catch (IOException e)\n         {\n-            throw new UncheckedIOException( e );\n+            throw new UncheckedIOException(e);\n         }\n     }\n \n     @Override\n-    public void query( QueryContext context, IndexProgressor.EntityValueClient cursor, IndexQueryConstraints constraints,\n-            IndexQuery... predicates )\n+    public void query(QueryContext context, IndexProgressor.EntityValueClient cursor, IndexQueryConstraints constraints,\n+                      IndexQuery... predicates)\n     {\n-        validateQuery( constraints, predicates );\n+        validateQuery(constraints, predicates);\n \n         KEY treeKeyFrom = layout.newKey();\n         KEY treeKeyTo = layout.newKey();\n-        initializeFromToKeys( treeKeyFrom, treeKeyTo );\n+        initializeFromToKeys(treeKeyFrom, treeKeyTo);\n \n-        boolean needFilter = initializeRangeForQuery( treeKeyFrom, treeKeyTo, predicates );\n-        startSeekForInitializedRange( cursor, treeKeyFrom, treeKeyTo, predicates, constraints, needFilter, context.cursorTracer() );\n+        boolean needFilter = initializeRangeForQuery(treeKeyFrom, treeKeyTo, predicates);\n+        startSeekForInitializedRange(cursor, treeKeyFrom, treeKeyTo, predicates, constraints, needFilter, context.cursorTracer());\n     }\n \n-    void initializeFromToKeys( KEY treeKeyFrom, KEY treeKeyTo )\n+    void initializeFromToKeys(KEY treeKeyFrom, KEY treeKeyTo)\n     {\n-        treeKeyFrom.initialize( Long.MIN_VALUE );\n-        treeKeyTo.initialize( Long.MAX_VALUE );\n+        treeKeyFrom.initialize(Long.MIN_VALUE);\n+        treeKeyTo.initialize(Long.MAX_VALUE);\n     }\n \n-    abstract void validateQuery( IndexQueryConstraints constraints, IndexQuery[] predicates );\n+    abstract void validateQuery(IndexQueryConstraints constraints, IndexQuery[] predicates);\n \n     /**\n      * @return true if query results from seek will need to be filtered through the predicates, else false\n      */\n-    abstract boolean initializeRangeForQuery( KEY treeKeyFrom, KEY treeKeyTo, IndexQuery[] predicates );\n+    abstract boolean initializeRangeForQuery(KEY treeKeyFrom, KEY treeKeyTo, IndexQuery[] predicates);\n \n-    void startSeekForInitializedRange( IndexProgressor.EntityValueClient client, KEY treeKeyFrom, KEY treeKeyTo, IndexQuery[] query,\n-            IndexQueryConstraints constraints, boolean needFilter, PageCursorTracer cursorTracer )\n+    void startSeekForInitializedRange(IndexProgressor.EntityValueClient client, KEY treeKeyFrom, KEY treeKeyTo, IndexQuery[] query,\n+                                      IndexQueryConstraints constraints, boolean needFilter, PageCursorTracer cursorTracer)\n     {\n-        if ( isEmptyRange( treeKeyFrom, treeKeyTo ) )\n+        if (isEmptyRange(treeKeyFrom, treeKeyTo))\n         {\n-            client.initialize( descriptor, IndexProgressor.EMPTY, query, constraints, false );\n+            client.initialize(descriptor, IndexProgressor.EMPTY, query, constraints, false);\n             return;\n         }\n         try\n         {\n-            Seeker<KEY,VALUE> seeker = makeIndexSeeker( treeKeyFrom, treeKeyTo, constraints.order(), cursorTracer );\n-            IndexProgressor hitProgressor = getIndexProgressor( seeker, client, needFilter, query );\n-            client.initialize( descriptor, hitProgressor, query, constraints, false );\n-        }\n-        catch ( IOException e )\n+            Seeker<KEY, VALUE> seeker = makeIndexSeeker(treeKeyFrom, treeKeyTo, constraints.order(), cursorTracer);\n+            IndexProgressor hitProgressor = getIndexProgressor(seeker, client, needFilter, query);\n+            client.initialize(descriptor, hitProgressor, query, constraints, false);\n+        } catch (IOException e)\n         {\n-            throw new UncheckedIOException( e );\n+            throw new UncheckedIOException(e);\n         }\n     }\n \n-    Seeker<KEY,VALUE> makeIndexSeeker( KEY treeKeyFrom, KEY treeKeyTo, IndexOrder indexOrder, PageCursorTracer cursorTracer ) throws IOException\n+    Seeker<KEY, VALUE> makeIndexSeeker(KEY treeKeyFrom, KEY treeKeyTo, IndexOrder indexOrder, PageCursorTracer cursorTracer) throws IOException\n     {\n-        if ( indexOrder == IndexOrder.DESCENDING )\n+        if (indexOrder == IndexOrder.DESCENDING)\n         {\n             KEY tmpKey = treeKeyFrom;\n             treeKeyFrom = treeKeyTo;\n             treeKeyTo = tmpKey;\n         }\n-        return tree.seek( treeKeyFrom, treeKeyTo, cursorTracer );\n+        return tree.seek(treeKeyFrom, treeKeyTo, cursorTracer);\n     }\n \n-    private IndexProgressor getIndexProgressor( Seeker<KEY,VALUE> seeker, IndexProgressor.EntityValueClient client, boolean needFilter, IndexQuery[] query )\n+    private IndexProgressor getIndexProgressor(Seeker<KEY, VALUE> seeker, IndexProgressor.EntityValueClient client, boolean needFilter, IndexQuery[] query)\n     {\n-        return needFilter ? new FilteringNativeHitIndexProgressor<>( seeker, client, query )\n-                          : new NativeHitIndexProgressor<>( seeker, client );\n+        return needFilter ? new FilteringNativeHitIndexProgressor<>(seeker, client, query)\n+          : new NativeHitIndexProgressor<>(seeker, client);\n     }\n \n-    private boolean isEmptyRange( KEY treeKeyFrom, KEY treeKeyTo )\n+    private boolean isEmptyRange(KEY treeKeyFrom, KEY treeKeyTo)\n     {\n-        return layout.compare( treeKeyFrom, treeKeyTo ) > 0;\n+        return layout.compare(treeKeyFrom, treeKeyTo) > 0;\n     }\n }\n",
            "diff_size": 52
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3248/NativeIndexReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/3248/NativeIndexReader.java\nindex 686802a63cd..13868bd1ed7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3248/NativeIndexReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/3248/NativeIndexReader.java\n@@ -186,4 +186,4 @@ abstract class NativeIndexReader<KEY extends NativeIndexKey<KEY>, VALUE extends\n     {\n         return layout.compare( treeKeyFrom, treeKeyTo ) > 0;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}