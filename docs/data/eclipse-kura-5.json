{
    "project_name": "eclipse-kura",
    "error_id": "5",
    "information": {
        "errors": [
            {
                "line": "82",
                "severity": "error",
                "message": "Line is longer than 150 characters (found 213).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    private static final long serialVersionUID = 693996483299382655L;\n\n    private static final String CLOUD_CONNECTION_FACTORY_FILTER = \"(|(objectClass=org.eclipse.kura.cloudconnection.factory.CloudConnectionFactory)(objectClass=org.eclipse.kura.cloud.factory.CloudServiceFactory))\";\n\n    private static final String KURA_UI_CSF_PID_DEFAULT = \"kura.ui.csf.pid.default\";\n    private static final String KURA_UI_CSF_PID_REGEX = \"kura.ui.csf.pid.regex\";",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 213).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "84",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 155).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/5/GwtCloudConnectionServiceImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/intellij/5/GwtCloudConnectionServiceImpl.java\nindex 8d99736414d..fbd43eb1a89 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/5/GwtCloudConnectionServiceImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/intellij/5/GwtCloudConnectionServiceImpl.java\n@@ -11,6 +11,7 @@\n  *  Eurotech\n  *  Red Hat Inc\n  *******************************************************************************/\n+\n package org.eclipse.kura.web.server;\n \n import static java.lang.String.format;\n@@ -79,7 +80,8 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n \n     private static final long serialVersionUID = 693996483299382655L;\n \n-    private static final String CLOUD_CONNECTION_FACTORY_FILTER = \"(|(objectClass=org.eclipse.kura.cloudconnection.factory.CloudConnectionFactory)(objectClass=org.eclipse.kura.cloud.factory.CloudServiceFactory))\";\n+    private static final String CLOUD_CONNECTION_FACTORY_FILTER =\n+        \"(|(objectClass=org.eclipse.kura.cloudconnection.factory.CloudConnectionFactory)(objectClass=org.eclipse.kura.cloud.factory.CloudServiceFactory))\";\n \n     private static final String KURA_UI_CSF_PID_DEFAULT = \"kura.ui.csf.pid.default\";\n     private static final String KURA_UI_CSF_PID_REGEX = \"kura.ui.csf.pid.regex\";\n@@ -134,7 +136,7 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n         withAllServices(null, filter, service -> {\n             if (service instanceof CloudConnectionManager) {\n                 cloudConnectionEntry\n-                        .setState(((CloudConnectionManager) service).isConnected() ? CONNECTED : DISCONNECTED);\n+                    .setState(((CloudConnectionManager) service).isConnected() ? CONNECTED : DISCONNECTED);\n                 cloudConnectionEntry.setConnectionType(GwtCloudConnectionType.CONNECTION);\n             } else if (service instanceof CloudEndpoint) {\n                 cloudConnectionEntry.setConnectionType(GwtCloudConnectionType.ENDPOINT);\n@@ -163,7 +165,7 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n \n     @Override\n     public List<GwtConfigComponent> getStackConfigurationsByFactory(final String factoryPid,\n-            final String cloudServicePid) throws GwtKuraException {\n+                                                                    final String cloudServicePid) throws GwtKuraException {\n \n         final List<String> result = new ArrayList<>();\n \n@@ -178,10 +180,10 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n \n     @Override\n     public void createCloudServiceFromFactory(GwtXSRFToken xsrfToken, String factoryPid, String cloudServicePid)\n-            throws GwtKuraException {\n+        throws GwtKuraException {\n         checkXSRFToken(xsrfToken);\n         if (factoryPid == null || factoryPid.trim().isEmpty() || cloudServicePid == null\n-                || cloudServicePid.trim().isEmpty()) {\n+            || cloudServicePid.trim().isEmpty()) {\n             throw new GwtKuraException(GwtKuraErrorCode.ILLEGAL_NULL_ARGUMENT);\n         }\n \n@@ -194,9 +196,9 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n \n     @Override\n     public void deleteCloudServiceFromFactory(GwtXSRFToken xsrfToken, String factoryPid, String cloudServicePid)\n-            throws GwtKuraException {\n+        throws GwtKuraException {\n         if (factoryPid == null || factoryPid.trim().isEmpty() || cloudServicePid == null\n-                || cloudServicePid.trim().isEmpty()) {\n+            || cloudServicePid.trim().isEmpty()) {\n             throw new GwtKuraException(GwtKuraErrorCode.ILLEGAL_NULL_ARGUMENT);\n         }\n \n@@ -256,14 +258,14 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n \n     @Override\n     public void createPubSubInstance(final GwtXSRFToken token, final String pid, final String factoryPid,\n-            final String cloudConnectionPid) throws GwtKuraException {\n+                                     final String cloudConnectionPid) throws GwtKuraException {\n         checkXSRFToken(token);\n \n         requireIsPubSubFactory(factoryPid);\n \n         ServiceLocator.applyToServiceOptionally(ConfigurationService.class, cs -> {\n             cs.createFactoryConfiguration(factoryPid, pid, Collections.singletonMap(\n-                    CloudConnectionConstants.CLOUD_ENDPOINT_SERVICE_PID_PROP_NAME.value(), cloudConnectionPid), true);\n+                CloudConnectionConstants.CLOUD_ENDPOINT_SERVICE_PID_PROP_NAME.value(), cloudConnectionPid), true);\n \n             return (Void) null;\n         });\n@@ -302,7 +304,7 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n \n     private static boolean isPubSub(final String pid) {\n         return GwtServerUtil.providesService(pid, CloudPublisher.class)\n-                || GwtServerUtil.providesService(pid, CloudSubscriber.class);\n+            || GwtServerUtil.providesService(pid, CloudSubscriber.class);\n     }\n \n     private static boolean isComponentManagedByFactory(final String pid) {\n@@ -333,7 +335,7 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n     private static GwtCloudEntry pubSubToGwt(final ComponentDescriptionDTO component) {\n \n         if (Arrays.stream(component.serviceInterfaces)\n-                .noneMatch(intf -> CLOUD_PUBLISHER.equals(intf) || CLOUD_SUBSCRIBER.equals(intf))) {\n+            .noneMatch(intf -> CLOUD_PUBLISHER.equals(intf) || CLOUD_SUBSCRIBER.equals(intf))) {\n             return null;\n         }\n \n@@ -346,15 +348,15 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n \n         if (!(factoryPid instanceof String)) {\n             logger.warn(\n-                    \"component {} defines a CloudPublisher or CloudSubscriber but does not specify the service.pid property, ignoring it\",\n-                    component.name);\n+                \"component {} defines a CloudPublisher or CloudSubscriber but does not specify the service.pid property, ignoring it\",\n+                component.name);\n             return null;\n         }\n \n         if (!(ccsfFactoryPid instanceof String)) {\n             logger.warn(\n-                    \"component {} defines a CloudPublisher or CloudSubscriber but does not specify the {} property, ignoring it\",\n-                    component.name, ccsfFactoryPidPropName);\n+                \"component {} defines a CloudPublisher or CloudSubscriber but does not specify the {} property, ignoring it\",\n+                component.name, ccsfFactoryPidPropName);\n             return null;\n         }\n \n@@ -372,12 +374,12 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n \n         return ServiceLocator.applyToServiceOptionally(ServiceComponentRuntime.class, scr ->\n \n-        scr.getComponentDescriptionDTOs().stream().map(GwtCloudConnectionServiceImpl::pubSubToGwt)\n+            scr.getComponentDescriptionDTOs().stream().map(GwtCloudConnectionServiceImpl::pubSubToGwt)\n                 .filter(Objects::nonNull).collect(Collectors.toList()));\n     }\n \n     private static GwtCloudPubSubEntry pubSubRefToGwt(final ServiceReference<?> ref,\n-            final GwtCloudPubSubEntry.Type type) {\n+                                                      final GwtCloudPubSubEntry.Type type) {\n         final Object ccsPid = ref.getProperty(CloudConnectionConstants.CLOUD_ENDPOINT_SERVICE_PID_PROP_NAME.value());\n         final Object factoryPid = ref.getProperty(ConfigurationAdmin.SERVICE_FACTORYPID);\n \n@@ -404,8 +406,8 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n \n         try {\n             context.getServiceReferences(CloudPublisher.class, null).stream()\n-                    .map(ref -> pubSubRefToGwt(ref, GwtCloudPubSubEntry.Type.PUBLISHER)).filter(Objects::nonNull)\n-                    .forEach(result::add);\n+                .map(ref -> pubSubRefToGwt(ref, GwtCloudPubSubEntry.Type.PUBLISHER)).filter(Objects::nonNull)\n+                .forEach(result::add);\n \n             return result;\n         } catch (InvalidSyntaxException e) {\n@@ -420,8 +422,8 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n \n         try {\n             context.getServiceReferences(CloudSubscriber.class, null).stream()\n-                    .map(ref -> pubSubRefToGwt(ref, GwtCloudPubSubEntry.Type.SUBSCRIBER)).filter(Objects::nonNull)\n-                    .forEach(result::add);\n+                .map(ref -> pubSubRefToGwt(ref, GwtCloudPubSubEntry.Type.SUBSCRIBER)).filter(Objects::nonNull)\n+                .forEach(result::add);\n \n             return result;\n         } catch (InvalidSyntaxException e) {\n@@ -430,12 +432,12 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n     }\n \n     private static void withAllCloudConnectionFactoryRefs(final ServiceReferenceConsumer<Object> consumer)\n-            throws GwtKuraException {\n+        throws GwtKuraException {\n         ServiceLocator.withAllServiceReferences(CLOUD_CONNECTION_FACTORY_FILTER, consumer);\n     }\n \n     private static void withAllCloudConnectionFactories(final ServiceConsumer<CloudConnectionFactory> consumer)\n-            throws GwtKuraException {\n+        throws GwtKuraException {\n         withAllServices(CLOUD_CONNECTION_FACTORY_FILTER, o -> consumer.consume(wrap(o)));\n     }\n \n@@ -487,7 +489,7 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n \n     @Override\n     public void updateStackComponentConfiguration(GwtXSRFToken xsrfToken, GwtConfigComponent component)\n-            throws GwtKuraException {\n+        throws GwtKuraException {\n         checkXSRFToken(xsrfToken);\n \n         if (!(isPubSub(component.getComponentId()) || isComponentManagedByFactory(component.getComponentId()))) {\n@@ -505,15 +507,15 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n         final HttpSession session = request.getSession(false);\n \n         Collection<ServiceReference<CloudService>> cloudServiceReferences = ServiceLocator.getInstance()\n-                .getServiceReferences(CloudService.class, null);\n+            .getServiceReferences(CloudService.class, null);\n \n         for (ServiceReference<CloudService> cloudServiceReference : cloudServiceReferences) {\n             String cloudServicePid = (String) cloudServiceReference.getProperty(KURA_SERVICE_PID);\n             if (cloudServicePid.endsWith(connectionId)) {\n                 String dataServiceRef = (String) cloudServiceReference\n-                        .getProperty(DATA_SERVICE_REFERENCE_NAME + ComponentConstants.REFERENCE_TARGET_SUFFIX);\n+                    .getProperty(DATA_SERVICE_REFERENCE_NAME + ComponentConstants.REFERENCE_TARGET_SUFFIX);\n                 Collection<ServiceReference<DataService>> dataServiceReferences = ServiceLocator.getInstance()\n-                        .getServiceReferences(DataService.class, dataServiceRef);\n+                    .getServiceReferences(DataService.class, dataServiceRef);\n \n                 for (ServiceReference<DataService> dataServiceReference : dataServiceReferences) {\n                     DataService dataService = ServiceLocator.getInstance().getService(dataServiceReference);\n@@ -529,15 +531,15 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n                         } catch (KuraConnectException e) {\n                             logger.warn(\"Error connecting\", e);\n                             gwtKuraException = new GwtKuraException(GwtKuraErrorCode.CONNECTION_FAILURE, e,\n-                                    \"Error connecting. Please review your configuration.\");\n+                                \"Error connecting. Please review your configuration.\");\n                         } catch (InterruptedException e) {\n                             logger.warn(\"Interrupt Exception\");\n                             gwtKuraException = new GwtKuraException(GwtKuraErrorCode.INTERNAL_ERROR, e,\n-                                    \"Interrupt Exception\");\n+                                \"Interrupt Exception\");\n                         } catch (IllegalStateException e) {\n                             logger.warn(\"Illegal client state\", e);\n                             gwtKuraException = new GwtKuraException(GwtKuraErrorCode.INTERNAL_ERROR, e,\n-                                    \"Illegal client state\");\n+                                \"Illegal client state\");\n                         }\n \n                         if (gwtKuraException != null) {\n@@ -551,19 +553,19 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n         }\n \n         Collection<ServiceReference<CloudConnectionManager>> cloudConnectionManagerReferences = ServiceLocator\n-                .getInstance().getServiceReferences(CloudConnectionManager.class, null);\n+            .getInstance().getServiceReferences(CloudConnectionManager.class, null);\n \n         for (ServiceReference<CloudConnectionManager> cloudConnectionManagerReference : cloudConnectionManagerReferences) {\n             String cloudConnectionManagerPid = (String) cloudConnectionManagerReference.getProperty(KURA_SERVICE_PID);\n             if (cloudConnectionManagerPid.endsWith(connectionId)) {\n                 CloudConnectionManager cloudConnectionManager = ServiceLocator.getInstance()\n-                        .getService(cloudConnectionManagerReference);\n+                    .getService(cloudConnectionManagerReference);\n                 try {\n                     cloudConnectionManager.connect();\n                 } catch (KuraException e) {\n                     logger.warn(\"Error connecting\");\n                     throw new GwtKuraException(GwtKuraErrorCode.CONNECTION_FAILURE, e,\n-                            \"Error connecting. Please review your configuration.\");\n+                        \"Error connecting. Please review your configuration.\");\n                 }\n             }\n             ServiceLocator.getInstance().ungetService(cloudConnectionManagerReference);\n@@ -578,15 +580,15 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n         final HttpSession session = request.getSession(false);\n \n         Collection<ServiceReference<CloudService>> cloudServiceReferences = ServiceLocator.getInstance()\n-                .getServiceReferences(CloudService.class, null);\n+            .getServiceReferences(CloudService.class, null);\n \n         for (ServiceReference<CloudService> cloudServiceReference : cloudServiceReferences) {\n             String cloudServicePid = (String) cloudServiceReference.getProperty(KURA_SERVICE_PID);\n             if (cloudServicePid.endsWith(connectionId)) {\n                 String dataServiceRef = (String) cloudServiceReference\n-                        .getProperty(DATA_SERVICE_REFERENCE_NAME + ComponentConstants.REFERENCE_TARGET_SUFFIX);\n+                    .getProperty(DATA_SERVICE_REFERENCE_NAME + ComponentConstants.REFERENCE_TARGET_SUFFIX);\n                 Collection<ServiceReference<DataService>> dataServiceReferences = ServiceLocator.getInstance()\n-                        .getServiceReferences(DataService.class, dataServiceRef);\n+                    .getServiceReferences(DataService.class, dataServiceRef);\n \n                 for (ServiceReference<DataService> dataServiceReference : dataServiceReferences) {\n                     DataService dataService = ServiceLocator.getInstance().getService(dataServiceReference);\n@@ -600,19 +602,19 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n         }\n \n         Collection<ServiceReference<CloudConnectionManager>> cloudConnectionManagerReferences = ServiceLocator\n-                .getInstance().getServiceReferences(CloudConnectionManager.class, null);\n+            .getInstance().getServiceReferences(CloudConnectionManager.class, null);\n \n         for (ServiceReference<CloudConnectionManager> cloudConnectionManagerReference : cloudConnectionManagerReferences) {\n             String cloudConnectionManagerPid = (String) cloudConnectionManagerReference.getProperty(KURA_SERVICE_PID);\n             if (cloudConnectionManagerPid.endsWith(connectionId)) {\n                 CloudConnectionManager cloudConnectionManager = ServiceLocator.getInstance()\n-                        .getService(cloudConnectionManagerReference);\n+                    .getService(cloudConnectionManagerReference);\n                 try {\n                     cloudConnectionManager.disconnect();\n                 } catch (KuraException e) {\n                     logger.warn(\"Error disconnecting\");\n                     throw new GwtKuraException(GwtKuraErrorCode.CONNECTION_FAILURE, e,\n-                            \"Error disconnecting. Please review your configuration.\");\n+                        \"Error disconnecting. Please review your configuration.\");\n                 }\n             }\n             ServiceLocator.getInstance().ungetService(cloudConnectionManagerReference);\n@@ -625,15 +627,15 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n         boolean isConnected = false;\n \n         Collection<ServiceReference<CloudService>> cloudServiceReferences = ServiceLocator.getInstance()\n-                .getServiceReferences(CloudService.class, null);\n+            .getServiceReferences(CloudService.class, null);\n \n         for (ServiceReference<CloudService> cloudServiceReference : cloudServiceReferences) {\n             String cloudServicePid = (String) cloudServiceReference.getProperty(KURA_SERVICE_PID);\n             if (cloudServicePid.endsWith(connectionId)) {\n                 String dataServiceRef = (String) cloudServiceReference\n-                        .getProperty(DATA_SERVICE_REFERENCE_NAME + ComponentConstants.REFERENCE_TARGET_SUFFIX);\n+                    .getProperty(DATA_SERVICE_REFERENCE_NAME + ComponentConstants.REFERENCE_TARGET_SUFFIX);\n                 Collection<ServiceReference<DataService>> dataServiceReferences = ServiceLocator.getInstance()\n-                        .getServiceReferences(DataService.class, dataServiceRef);\n+                    .getServiceReferences(DataService.class, dataServiceRef);\n \n                 for (ServiceReference<DataService> dataServiceReference : dataServiceReferences) {\n                     DataService dataService = ServiceLocator.getInstance().getService(dataServiceReference);\n@@ -647,13 +649,13 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n         }\n \n         Collection<ServiceReference<CloudConnectionManager>> cloudConnectionManagerReferences = ServiceLocator\n-                .getInstance().getServiceReferences(CloudConnectionManager.class, null);\n+            .getInstance().getServiceReferences(CloudConnectionManager.class, null);\n \n         for (ServiceReference<CloudConnectionManager> cloudConnectionManagerReference : cloudConnectionManagerReferences) {\n             String cloudConnectionManagerPid = (String) cloudConnectionManagerReference.getProperty(KURA_SERVICE_PID);\n             if (cloudConnectionManagerPid.endsWith(connectionId)) {\n                 CloudConnectionManager cloudConnectionManager = ServiceLocator.getInstance()\n-                        .getService(cloudConnectionManagerReference);\n+                    .getService(cloudConnectionManagerReference);\n \n                 isConnected = cloudConnectionManager.isConnected();\n             }\n",
            "diff_size": 46
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 213).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "373",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 183).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/5/GwtCloudConnectionServiceImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/naturalize/5/GwtCloudConnectionServiceImpl.java\nindex 8d99736414d..2440a816595 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/5/GwtCloudConnectionServiceImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/naturalize/5/GwtCloudConnectionServiceImpl.java\n@@ -370,9 +370,7 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n \n     private static List<GwtCloudEntry> getPubSubFactories() throws GwtKuraException {\n \n-        return ServiceLocator.applyToServiceOptionally(ServiceComponentRuntime.class, scr ->\n-\n-        scr.getComponentDescriptionDTOs().stream().map(GwtCloudConnectionServiceImpl::pubSubToGwt)\n+        return ServiceLocator.applyToServiceOptionally(ServiceComponentRuntime.class, scr -> scr.getComponentDescriptionDTOs().stream().map(GwtCloudConnectionServiceImpl::pubSubToGwt)\n                 .filter(Objects::nonNull).collect(Collectors.toList()));\n     }\n \n@@ -662,4 +660,4 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n \n         return isConnected;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 213).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "224",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "228",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 154).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "298",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 159).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "302",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 174).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "315",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 239).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "338",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 192).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "349",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 194).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "423",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 152).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "427",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 157).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "428",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "462",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 182).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "486",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 152).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "490",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 157).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "491",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "503",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 182).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "525",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 152).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "529",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 157).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "530",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "542",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 182).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/5/GwtCloudConnectionServiceImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/codebuff/5/GwtCloudConnectionServiceImpl.java\nindex 8d99736414d..8c5eed1e93d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/5/GwtCloudConnectionServiceImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/codebuff/5/GwtCloudConnectionServiceImpl.java\n@@ -32,10 +32,8 @@ import java.util.Set;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicReference;\n import java.util.stream.Collectors;\n-\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpSession;\n-\n import org.eclipse.kura.KuraConnectException;\n import org.eclipse.kura.KuraException;\n import org.eclipse.kura.cloud.CloudService;\n@@ -78,31 +76,21 @@ import org.slf4j.LoggerFactory;\n public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet implements GwtCloudConnectionService {\n \n     private static final long serialVersionUID = 693996483299382655L;\n-\n     private static final String CLOUD_CONNECTION_FACTORY_FILTER = \"(|(objectClass=org.eclipse.kura.cloudconnection.factory.CloudConnectionFactory)(objectClass=org.eclipse.kura.cloud.factory.CloudServiceFactory))\";\n-\n     private static final String KURA_UI_CSF_PID_DEFAULT = \"kura.ui.csf.pid.default\";\n     private static final String KURA_UI_CSF_PID_REGEX = \"kura.ui.csf.pid.regex\";\n-\n     private static final String CLOUD_PUBLISHER = CloudPublisher.class.getName();\n     private static final String CLOUD_SUBSCRIBER = CloudSubscriber.class.getName();\n-\n     private static final String DATA_SERVICE_REFERENCE_NAME = \"DataService\";\n-\n     private static final Logger logger = LoggerFactory.getLogger(GwtCertificatesServiceImpl.class);\n-\n     @Override\n     public List<GwtCloudEntry> findCloudEntries() throws GwtKuraException {\n-\n         final List<GwtCloudEntry> result = new ArrayList<>();\n-\n         withAllCloudConnectionFactories(service -> {\n-\n             final String factoryPid = service.getFactoryPid();\n             if (factoryPid == null) {\n                 return;\n             }\n-\n             for (final String pid : service.getManagedCloudConnectionPids()) {\n                 if (pid == null) {\n                     continue;\n@@ -111,36 +99,28 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n                 final GwtCloudConnectionEntry cloudConnectionEntry = new GwtCloudConnectionEntry();\n                 cloudConnectionEntry.setCloudConnectionFactoryPid(factoryPid);\n                 cloudConnectionEntry.setPid(pid);\n-\n                 fillState(cloudConnectionEntry);\n-\n                 result.add(cloudConnectionEntry);\n             }\n-\n         });\n-\n         result.addAll(getPublisherInstances());\n         result.addAll(getSubscriberInstances());\n-\n         return result;\n     }\n \n     private static void fillState(final GwtCloudConnectionEntry cloudConnectionEntry) throws GwtKuraException {\n-\n         cloudConnectionEntry.setState(UNREGISTERED);\n \n         final String filter = format(\"(%s=%s)\", KURA_SERVICE_PID, cloudConnectionEntry.getPid());\n-\n         withAllServices(null, filter, service -> {\n             if (service instanceof CloudConnectionManager) {\n-                cloudConnectionEntry\n-                        .setState(((CloudConnectionManager) service).isConnected() ? CONNECTED : DISCONNECTED);\n+                cloudConnectionEntry.setState(((CloudConnectionManager) service).isConnected() ? CONNECTED : DISCONNECTED);\n                 cloudConnectionEntry.setConnectionType(GwtCloudConnectionType.CONNECTION);\n             } else if (service instanceof CloudEndpoint) {\n                 cloudConnectionEntry.setConnectionType(GwtCloudConnectionType.ENDPOINT);\n             } else if (service instanceof CloudService) {\n-                cloudConnectionEntry.setState(((CloudService) service).isConnected() ? CONNECTED : DISCONNECTED);\n-                cloudConnectionEntry.setConnectionType(GwtCloudConnectionType.CONNECTION);\n+                       cloudConnectionEntry.setState(((CloudService) service).isConnected() ? CONNECTED : DISCONNECTED);\n+                       cloudConnectionEntry.setConnectionType(GwtCloudConnectionType.CONNECTION);\n             }\n         });\n     }\n@@ -148,43 +128,34 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n     @Override\n     public GwtCloudComponentFactories getCloudComponentFactories() throws GwtKuraException {\n         final List<String> cloudConnectionFactoryPids = new ArrayList<>();\n-\n         withAllCloudConnectionFactories(service -> cloudConnectionFactoryPids.add(service.getFactoryPid()));\n \n         final List<GwtCloudEntry> pubSubFactories = getPubSubFactories();\n-\n         final GwtCloudComponentFactories result = new GwtCloudComponentFactories();\n-\n         result.setCloudConnectionFactoryPids(cloudConnectionFactoryPids);\n         result.setPubSubFactories(pubSubFactories);\n-\n         return result;\n     }\n \n     @Override\n-    public List<GwtConfigComponent> getStackConfigurationsByFactory(final String factoryPid,\n-            final String cloudServicePid) throws GwtKuraException {\n-\n+    public List<GwtConfigComponent> getStackConfigurationsByFactory(final String factoryPid, final String cloudServicePid) throws GwtKuraException {\n         final List<String> result = new ArrayList<>();\n-\n         withAllCloudConnectionFactories(factory -> {\n             if (factoryPid.equals(factory.getFactoryPid())) {\n                 result.addAll(factory.getStackComponentsPids(cloudServicePid));\n             }\n         });\n-\n         return GwtComponentServiceInternal.findComponentConfigurations(FilterUtil.getPidFilter(result.iterator()));\n     }\n \n     @Override\n-    public void createCloudServiceFromFactory(GwtXSRFToken xsrfToken, String factoryPid, String cloudServicePid)\n-            throws GwtKuraException {\n+    public void createCloudServiceFromFactory(GwtXSRFToken xsrfToken, String factoryPid, String cloudServicePid) throws GwtKuraException {\n         checkXSRFToken(xsrfToken);\n-        if (factoryPid == null || factoryPid.trim().isEmpty() || cloudServicePid == null\n-                || cloudServicePid.trim().isEmpty()) {\n+\n+        if (factoryPid == null || factoryPid.trim().isEmpty()\n+                || cloudServicePid == null || cloudServicePid.trim().isEmpty()) {\n             throw new GwtKuraException(GwtKuraErrorCode.ILLEGAL_NULL_ARGUMENT);\n         }\n-\n         withAllCloudConnectionFactories(service -> {\n             if (service.getFactoryPid().equals(factoryPid)) {\n                 service.createConfiguration(cloudServicePid);\n@@ -193,13 +164,11 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n     }\n \n     @Override\n-    public void deleteCloudServiceFromFactory(GwtXSRFToken xsrfToken, String factoryPid, String cloudServicePid)\n-            throws GwtKuraException {\n-        if (factoryPid == null || factoryPid.trim().isEmpty() || cloudServicePid == null\n-                || cloudServicePid.trim().isEmpty()) {\n+    public void deleteCloudServiceFromFactory(GwtXSRFToken xsrfToken, String factoryPid, String cloudServicePid) throws GwtKuraException {\n+        if (factoryPid == null || factoryPid.trim().isEmpty()\n+                || cloudServicePid == null || cloudServicePid.trim().isEmpty()) {\n             throw new GwtKuraException(GwtKuraErrorCode.ILLEGAL_NULL_ARGUMENT);\n         }\n-\n         withAllCloudConnectionFactories(service -> {\n             if (service.getFactoryPid().equals(factoryPid)) {\n                 service.deleteConfiguration(cloudServicePid);\n@@ -209,15 +178,14 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n \n     @Override\n     public String findSuggestedCloudServicePid(String factoryPid) throws GwtKuraException {\n-\n         final AtomicReference<String> result = new AtomicReference<>();\n-\n         withAllCloudConnectionFactoryRefs((ref, ctx) -> {\n             final CloudConnectionFactory cloudServiceFactory = wrap(ctx.getService(ref));\n             try {\n                 if (!cloudServiceFactory.getFactoryPid().equals(factoryPid)) {\n                     return;\n                 }\n+\n                 Object propertyObject = ref.getProperty(KURA_UI_CSF_PID_DEFAULT);\n                 if (propertyObject != null) {\n                     result.set((String) propertyObject);\n@@ -226,23 +194,22 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n                 ctx.ungetService(ref);\n             }\n         });\n-\n         return result.get();\n     }\n \n     @Override\n     public String findCloudServicePidRegex(String factoryPid) throws GwtKuraException {\n-\n         final AtomicReference<String> result = new AtomicReference<>();\n-\n         withAllCloudConnectionFactoryRefs((ref, ctx) -> {\n             final CloudConnectionFactory cloudServiceFactory = wrap(ctx.getService(ref));\n             try {\n                 if (!cloudServiceFactory.getFactoryPid().equals(factoryPid)) {\n                     return;\n                 }\n+\n                 Object propertyObject = ref.getProperty(KURA_UI_CSF_PID_REGEX);\n                 ServiceLocator.getInstance().ungetService(ref);\n+\n                 if (propertyObject != null) {\n                     result.set((String) propertyObject);\n                 }\n@@ -250,21 +217,16 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n                 ctx.ungetService(ref);\n             }\n         });\n-\n         return result.get();\n     }\n \n     @Override\n-    public void createPubSubInstance(final GwtXSRFToken token, final String pid, final String factoryPid,\n-            final String cloudConnectionPid) throws GwtKuraException {\n+    public void createPubSubInstance(final GwtXSRFToken token, final String pid, final String factoryPid, final String cloudConnectionPid) throws GwtKuraException {\n         checkXSRFToken(token);\n-\n         requireIsPubSubFactory(factoryPid);\n-\n         ServiceLocator.applyToServiceOptionally(ConfigurationService.class, cs -> {\n-            cs.createFactoryConfiguration(factoryPid, pid, Collections.singletonMap(\n-                    CloudConnectionConstants.CLOUD_ENDPOINT_SERVICE_PID_PROP_NAME.value(), cloudConnectionPid), true);\n-\n+            cs.createFactoryConfiguration(factoryPid, pid, Collections.singletonMap(CloudConnectionConstants.CLOUD_ENDPOINT_SERVICE_PID_PROP_NAME.value(),\n+                cloudConnectionPid), true);\n             return (Void) null;\n         });\n     }\n@@ -272,42 +234,35 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n     @Override\n     public void deletePubSubInstance(final GwtXSRFToken token, final String pid) throws GwtKuraException {\n         checkXSRFToken(token);\n-\n         requireIsPubSub(pid);\n-\n-        ServiceLocator.applyToServiceOptionally(ConfigurationService.class, cs -> {\n+        ServiceLocator.applyToServiceOptionally(ConfigurationService.class,\n+            cs -> {\n             cs.deleteFactoryConfiguration(pid, true);\n-\n             return (Void) null;\n         });\n     }\n \n     private static void requireIsPubSubFactory(final String factoryPid) throws GwtKuraException {\n         final boolean isPubSub = ServiceLocator.applyToServiceOptionally(ServiceComponentRuntime.class, scr -> {\n-            return scr.getComponentDescriptionDTOs().stream().anyMatch(c -> {\n-                final Map<String, Object> properties = c.properties;\n-\n-                if (properties == null) {\n-                    return false;\n-                }\n-\n-                return Objects.equals(factoryPid, properties.get(\"service.pid\")) && pubSubToGwt(c) != null;\n-            });\n-        });\n-\n+                                     return scr.getComponentDescriptionDTOs().stream().anyMatch(c -> {\n+                                         final Map<String, Object> properties = c.properties;\n+                                         if (properties == null) {\n+                                             return false;\n+                                         }\n+                                         return Objects.equals(factoryPid, properties.get(\"service.pid\")) && pubSubToGwt(c) != null;\n+                                     });\n+                                 });\n         if (!isPubSub) {\n             throw new GwtKuraException(GwtKuraErrorCode.ILLEGAL_ARGUMENT);\n         }\n     }\n \n     private static boolean isPubSub(final String pid) {\n-        return GwtServerUtil.providesService(pid, CloudPublisher.class)\n-                || GwtServerUtil.providesService(pid, CloudSubscriber.class);\n+        return GwtServerUtil.providesService(pid, CloudPublisher.class) || GwtServerUtil.providesService(pid, CloudSubscriber.class);\n     }\n \n     private static boolean isComponentManagedByFactory(final String pid) {\n         final AtomicBoolean result = new AtomicBoolean(false);\n-\n         try {\n             withAllCloudConnectionFactories(f -> {\n                 for (final String stackPid : f.getManagedCloudConnectionPids()) {\n@@ -320,7 +275,6 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n         } catch (final Exception e) {\n             return false;\n         }\n-\n         return result.get();\n     }\n \n@@ -331,82 +285,57 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n     }\n \n     private static GwtCloudEntry pubSubToGwt(final ComponentDescriptionDTO component) {\n-\n-        if (Arrays.stream(component.serviceInterfaces)\n-                .noneMatch(intf -> CLOUD_PUBLISHER.equals(intf) || CLOUD_SUBSCRIBER.equals(intf))) {\n+        if (Arrays.stream(component.serviceInterfaces).noneMatch(intf -> CLOUD_PUBLISHER.equals(intf) || CLOUD_SUBSCRIBER.equals(intf))) {\n             return null;\n         }\n \n         final String ccsfFactoryPidPropName = CloudConnectionConstants.CLOUD_CONNECTION_FACTORY_PID_PROP_NAME.value();\n-\n         final Object ccsfFactoryPid = component.properties.get(ccsfFactoryPidPropName);\n         final Object factoryPid = component.properties.get(\"service.pid\");\n         final Object defaultFactoryPid = component.properties.get(KURA_UI_CSF_PID_DEFAULT);\n         final Object defaultFactoryPidRegex = component.properties.get(KURA_UI_CSF_PID_REGEX);\n-\n         if (!(factoryPid instanceof String)) {\n-            logger.warn(\n-                    \"component {} defines a CloudPublisher or CloudSubscriber but does not specify the service.pid property, ignoring it\",\n-                    component.name);\n+            logger.warn(\"component {} defines a CloudPublisher or CloudSubscriber but does not specify the service.pid property, ignoring it\", component.name);\n             return null;\n         }\n-\n         if (!(ccsfFactoryPid instanceof String)) {\n-            logger.warn(\n-                    \"component {} defines a CloudPublisher or CloudSubscriber but does not specify the {} property, ignoring it\",\n-                    component.name, ccsfFactoryPidPropName);\n+            logger.warn(\"component {} defines a CloudPublisher or CloudSubscriber but does not specify the {} property, ignoring it\", component.name, ccsfFactoryPidPropName);\n             return null;\n         }\n \n         final GwtCloudEntry entry = new GwtCloudEntry();\n-\n         entry.setPid((String) factoryPid);\n         entry.setFactoryPid((String) ccsfFactoryPid);\n         entry.setDefaultFactoryPid((String) defaultFactoryPid);\n         entry.setDefaultFactoryPidRegex((String) defaultFactoryPidRegex);\n-\n         return entry;\n     }\n \n     private static List<GwtCloudEntry> getPubSubFactories() throws GwtKuraException {\n-\n-        return ServiceLocator.applyToServiceOptionally(ServiceComponentRuntime.class, scr ->\n-\n-        scr.getComponentDescriptionDTOs().stream().map(GwtCloudConnectionServiceImpl::pubSubToGwt)\n-                .filter(Objects::nonNull).collect(Collectors.toList()));\n+        return ServiceLocator.applyToServiceOptionally(ServiceComponentRuntime.class, scr -> scr.getComponentDescriptionDTOs().stream().map(GwtCloudConnectionServiceImpl::pubSubToGwt).filter(Objects::nonNull).collect(Collectors.toList()));\n     }\n \n-    private static GwtCloudPubSubEntry pubSubRefToGwt(final ServiceReference<?> ref,\n-            final GwtCloudPubSubEntry.Type type) {\n+    private static GwtCloudPubSubEntry pubSubRefToGwt(final ServiceReference<?> ref, final GwtCloudPubSubEntry.Type type) {\n         final Object ccsPid = ref.getProperty(CloudConnectionConstants.CLOUD_ENDPOINT_SERVICE_PID_PROP_NAME.value());\n         final Object factoryPid = ref.getProperty(ConfigurationAdmin.SERVICE_FACTORYPID);\n-\n         if (!(ccsPid instanceof String && factoryPid instanceof String)) {\n             return null;\n         }\n \n         final String kuraServicePid = (String) ref.getProperty(ConfigurationService.KURA_SERVICE_PID);\n-\n         final GwtCloudPubSubEntry result = new GwtCloudPubSubEntry();\n-\n         result.setPid(kuraServicePid);\n         result.setCloudConnectionPid((String) ccsPid);\n         result.setFactoryPid((String) factoryPid);\n         result.setType(type);\n-\n         return result;\n     }\n \n     private static Set<GwtCloudPubSubEntry> getPublisherInstances() throws GwtKuraException {\n         final BundleContext context = FrameworkUtil.getBundle(GwtCloudConnectionServiceImpl.class).getBundleContext();\n-\n         final Set<GwtCloudPubSubEntry> result = new HashSet<>();\n-\n         try {\n-            context.getServiceReferences(CloudPublisher.class, null).stream()\n-                    .map(ref -> pubSubRefToGwt(ref, GwtCloudPubSubEntry.Type.PUBLISHER)).filter(Objects::nonNull)\n-                    .forEach(result::add);\n-\n+            context.getServiceReferences(CloudPublisher.class, null).stream().map(ref -> pubSubRefToGwt(ref, GwtCloudPubSubEntry.Type.PUBLISHER)).filter(Objects::nonNull).forEach(result::add);\n             return result;\n         } catch (InvalidSyntaxException e) {\n             throw new GwtKuraException(\"Unexpected error\");\n@@ -415,27 +344,20 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n \n     private static Set<GwtCloudPubSubEntry> getSubscriberInstances() throws GwtKuraException {\n         final BundleContext context = FrameworkUtil.getBundle(GwtCloudConnectionServiceImpl.class).getBundleContext();\n-\n         final Set<GwtCloudPubSubEntry> result = new HashSet<>();\n-\n         try {\n-            context.getServiceReferences(CloudSubscriber.class, null).stream()\n-                    .map(ref -> pubSubRefToGwt(ref, GwtCloudPubSubEntry.Type.SUBSCRIBER)).filter(Objects::nonNull)\n-                    .forEach(result::add);\n-\n+            context.getServiceReferences(CloudSubscriber.class, null).stream().map(ref -> pubSubRefToGwt(ref, GwtCloudPubSubEntry.Type.SUBSCRIBER)).filter(Objects::nonNull).forEach(result::add);\n             return result;\n         } catch (InvalidSyntaxException e) {\n             throw new GwtKuraException(\"Unexpected error\");\n         }\n     }\n \n-    private static void withAllCloudConnectionFactoryRefs(final ServiceReferenceConsumer<Object> consumer)\n-            throws GwtKuraException {\n+    private static void withAllCloudConnectionFactoryRefs(final ServiceReferenceConsumer<Object> consumer) throws GwtKuraException {\n         ServiceLocator.withAllServiceReferences(CLOUD_CONNECTION_FACTORY_FILTER, consumer);\n     }\n \n-    private static void withAllCloudConnectionFactories(final ServiceConsumer<CloudConnectionFactory> consumer)\n-            throws GwtKuraException {\n+    private static void withAllCloudConnectionFactories(final ServiceConsumer<CloudConnectionFactory> consumer) throws GwtKuraException {\n         withAllServices(CLOUD_CONNECTION_FACTORY_FILTER, o -> consumer.consume(wrap(o)));\n     }\n \n@@ -444,7 +366,6 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n             return (CloudConnectionFactory) o;\n         } else if (o instanceof CloudServiceFactory) {\n             final CloudServiceFactory f = (CloudServiceFactory) o;\n-\n             return new CloudConnectionFactory() {\n \n                 @Override\n@@ -479,21 +400,17 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n     @Override\n     public GwtConfigComponent getPubSubConfiguration(GwtXSRFToken xsrfToken, String pid) throws GwtKuraException {\n         checkXSRFToken(xsrfToken);\n-\n         requireIsPubSub(pid);\n-\n         return GwtComponentServiceInternal.findFilteredComponentConfiguration(pid).get(0);\n     }\n \n     @Override\n-    public void updateStackComponentConfiguration(GwtXSRFToken xsrfToken, GwtConfigComponent component)\n-            throws GwtKuraException {\n+    public void updateStackComponentConfiguration(GwtXSRFToken xsrfToken, GwtConfigComponent component) throws GwtKuraException {\n         checkXSRFToken(xsrfToken);\n \n         if (!(isPubSub(component.getComponentId()) || isComponentManagedByFactory(component.getComponentId()))) {\n             throw new GwtKuraException(GwtKuraErrorCode.INTERNAL_ERROR);\n         }\n-\n         GwtComponentServiceInternal.updateComponentConfiguration(component);\n     }\n \n@@ -503,18 +420,12 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n \n         final HttpServletRequest request = getThreadLocalRequest();\n         final HttpSession session = request.getSession(false);\n-\n-        Collection<ServiceReference<CloudService>> cloudServiceReferences = ServiceLocator.getInstance()\n-                .getServiceReferences(CloudService.class, null);\n-\n+        Collection<ServiceReference<CloudService>> cloudServiceReferences = ServiceLocator.getInstance().getServiceReferences(CloudService.class, null);\n         for (ServiceReference<CloudService> cloudServiceReference : cloudServiceReferences) {\n             String cloudServicePid = (String) cloudServiceReference.getProperty(KURA_SERVICE_PID);\n             if (cloudServicePid.endsWith(connectionId)) {\n-                String dataServiceRef = (String) cloudServiceReference\n-                        .getProperty(DATA_SERVICE_REFERENCE_NAME + ComponentConstants.REFERENCE_TARGET_SUFFIX);\n-                Collection<ServiceReference<DataService>> dataServiceReferences = ServiceLocator.getInstance()\n-                        .getServiceReferences(DataService.class, dataServiceRef);\n-\n+                String dataServiceRef = (String) cloudServiceReference.getProperty(DATA_SERVICE_REFERENCE_NAME + ComponentConstants.REFERENCE_TARGET_SUFFIX);\n+                Collection<ServiceReference<DataService>> dataServiceReferences = ServiceLocator.getInstance().getServiceReferences(DataService.class, dataServiceRef);\n                 for (ServiceReference<DataService> dataServiceReference : dataServiceReferences) {\n                     DataService dataService = ServiceLocator.getInstance().getService(dataServiceReference);\n                     if (dataService != null) {\n@@ -528,18 +439,16 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n                             }\n                         } catch (KuraConnectException e) {\n                             logger.warn(\"Error connecting\", e);\n-                            gwtKuraException = new GwtKuraException(GwtKuraErrorCode.CONNECTION_FAILURE, e,\n+                            gwtKuraException = new GwtKuraException(GwtKuraErrorCode.CONNECTION_FAILURE,\n+                                e,\n                                     \"Error connecting. Please review your configuration.\");\n                         } catch (InterruptedException e) {\n                             logger.warn(\"Interrupt Exception\");\n-                            gwtKuraException = new GwtKuraException(GwtKuraErrorCode.INTERNAL_ERROR, e,\n-                                    \"Interrupt Exception\");\n+                            gwtKuraException = new GwtKuraException(GwtKuraErrorCode.INTERNAL_ERROR, e, \"Interrupt Exception\");\n                         } catch (IllegalStateException e) {\n                             logger.warn(\"Illegal client state\", e);\n-                            gwtKuraException = new GwtKuraException(GwtKuraErrorCode.INTERNAL_ERROR, e,\n-                                    \"Illegal client state\");\n+                            gwtKuraException = new GwtKuraException(GwtKuraErrorCode.INTERNAL_ERROR, e, \"Illegal client state\");\n                         }\n-\n                         if (gwtKuraException != null) {\n                             throw gwtKuraException;\n                         }\n@@ -550,19 +459,17 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n             ServiceLocator.getInstance().ungetService(cloudServiceReference);\n         }\n \n-        Collection<ServiceReference<CloudConnectionManager>> cloudConnectionManagerReferences = ServiceLocator\n-                .getInstance().getServiceReferences(CloudConnectionManager.class, null);\n-\n+        Collection<ServiceReference<CloudConnectionManager>> cloudConnectionManagerReferences = ServiceLocator.getInstance().getServiceReferences(CloudConnectionManager.class, null);\n         for (ServiceReference<CloudConnectionManager> cloudConnectionManagerReference : cloudConnectionManagerReferences) {\n             String cloudConnectionManagerPid = (String) cloudConnectionManagerReference.getProperty(KURA_SERVICE_PID);\n             if (cloudConnectionManagerPid.endsWith(connectionId)) {\n-                CloudConnectionManager cloudConnectionManager = ServiceLocator.getInstance()\n-                        .getService(cloudConnectionManagerReference);\n+                CloudConnectionManager cloudConnectionManager = ServiceLocator.getInstance().getService(cloudConnectionManagerReference);\n                 try {\n                     cloudConnectionManager.connect();\n                 } catch (KuraException e) {\n                     logger.warn(\"Error connecting\");\n-                    throw new GwtKuraException(GwtKuraErrorCode.CONNECTION_FAILURE, e,\n+                    throw new GwtKuraException(GwtKuraErrorCode.CONNECTION_FAILURE,\n+                        e,\n                             \"Error connecting. Please review your configuration.\");\n                 }\n             }\n@@ -576,18 +483,12 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n \n         final HttpServletRequest request = getThreadLocalRequest();\n         final HttpSession session = request.getSession(false);\n-\n-        Collection<ServiceReference<CloudService>> cloudServiceReferences = ServiceLocator.getInstance()\n-                .getServiceReferences(CloudService.class, null);\n-\n+        Collection<ServiceReference<CloudService>> cloudServiceReferences = ServiceLocator.getInstance().getServiceReferences(CloudService.class, null);\n         for (ServiceReference<CloudService> cloudServiceReference : cloudServiceReferences) {\n             String cloudServicePid = (String) cloudServiceReference.getProperty(KURA_SERVICE_PID);\n             if (cloudServicePid.endsWith(connectionId)) {\n-                String dataServiceRef = (String) cloudServiceReference\n-                        .getProperty(DATA_SERVICE_REFERENCE_NAME + ComponentConstants.REFERENCE_TARGET_SUFFIX);\n-                Collection<ServiceReference<DataService>> dataServiceReferences = ServiceLocator.getInstance()\n-                        .getServiceReferences(DataService.class, dataServiceRef);\n-\n+                String dataServiceRef = (String) cloudServiceReference.getProperty(DATA_SERVICE_REFERENCE_NAME + ComponentConstants.REFERENCE_TARGET_SUFFIX);\n+                Collection<ServiceReference<DataService>> dataServiceReferences = ServiceLocator.getInstance().getServiceReferences(DataService.class, dataServiceRef);\n                 for (ServiceReference<DataService> dataServiceReference : dataServiceReferences) {\n                     DataService dataService = ServiceLocator.getInstance().getService(dataServiceReference);\n                     if (dataService != null) {\n@@ -599,19 +500,17 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n             ServiceLocator.getInstance().ungetService(cloudServiceReference);\n         }\n \n-        Collection<ServiceReference<CloudConnectionManager>> cloudConnectionManagerReferences = ServiceLocator\n-                .getInstance().getServiceReferences(CloudConnectionManager.class, null);\n-\n+        Collection<ServiceReference<CloudConnectionManager>> cloudConnectionManagerReferences = ServiceLocator.getInstance().getServiceReferences(CloudConnectionManager.class, null);\n         for (ServiceReference<CloudConnectionManager> cloudConnectionManagerReference : cloudConnectionManagerReferences) {\n             String cloudConnectionManagerPid = (String) cloudConnectionManagerReference.getProperty(KURA_SERVICE_PID);\n             if (cloudConnectionManagerPid.endsWith(connectionId)) {\n-                CloudConnectionManager cloudConnectionManager = ServiceLocator.getInstance()\n-                        .getService(cloudConnectionManagerReference);\n+                CloudConnectionManager cloudConnectionManager = ServiceLocator.getInstance().getService(cloudConnectionManagerReference);\n                 try {\n                     cloudConnectionManager.disconnect();\n                 } catch (KuraException e) {\n                     logger.warn(\"Error disconnecting\");\n-                    throw new GwtKuraException(GwtKuraErrorCode.CONNECTION_FAILURE, e,\n+                    throw new GwtKuraException(GwtKuraErrorCode.CONNECTION_FAILURE,\n+                        e,\n                             \"Error disconnecting. Please review your configuration.\");\n                 }\n             }\n@@ -623,18 +522,12 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n     public boolean isConnected(GwtXSRFToken xsrfToken, String connectionId) throws GwtKuraException {\n         checkXSRFToken(xsrfToken);\n         boolean isConnected = false;\n-\n-        Collection<ServiceReference<CloudService>> cloudServiceReferences = ServiceLocator.getInstance()\n-                .getServiceReferences(CloudService.class, null);\n-\n+        Collection<ServiceReference<CloudService>> cloudServiceReferences = ServiceLocator.getInstance().getServiceReferences(CloudService.class, null);\n         for (ServiceReference<CloudService> cloudServiceReference : cloudServiceReferences) {\n             String cloudServicePid = (String) cloudServiceReference.getProperty(KURA_SERVICE_PID);\n             if (cloudServicePid.endsWith(connectionId)) {\n-                String dataServiceRef = (String) cloudServiceReference\n-                        .getProperty(DATA_SERVICE_REFERENCE_NAME + ComponentConstants.REFERENCE_TARGET_SUFFIX);\n-                Collection<ServiceReference<DataService>> dataServiceReferences = ServiceLocator.getInstance()\n-                        .getServiceReferences(DataService.class, dataServiceRef);\n-\n+                String dataServiceRef = (String) cloudServiceReference.getProperty(DATA_SERVICE_REFERENCE_NAME + ComponentConstants.REFERENCE_TARGET_SUFFIX);\n+                Collection<ServiceReference<DataService>> dataServiceReferences = ServiceLocator.getInstance().getServiceReferences(DataService.class, dataServiceRef);\n                 for (ServiceReference<DataService> dataServiceReference : dataServiceReferences) {\n                     DataService dataService = ServiceLocator.getInstance().getService(dataServiceReference);\n                     if (dataService != null) {\n@@ -646,20 +539,15 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n             ServiceLocator.getInstance().ungetService(cloudServiceReference);\n         }\n \n-        Collection<ServiceReference<CloudConnectionManager>> cloudConnectionManagerReferences = ServiceLocator\n-                .getInstance().getServiceReferences(CloudConnectionManager.class, null);\n-\n+        Collection<ServiceReference<CloudConnectionManager>> cloudConnectionManagerReferences = ServiceLocator.getInstance().getServiceReferences(CloudConnectionManager.class, null);\n         for (ServiceReference<CloudConnectionManager> cloudConnectionManagerReference : cloudConnectionManagerReferences) {\n             String cloudConnectionManagerPid = (String) cloudConnectionManagerReference.getProperty(KURA_SERVICE_PID);\n             if (cloudConnectionManagerPid.endsWith(connectionId)) {\n-                CloudConnectionManager cloudConnectionManager = ServiceLocator.getInstance()\n-                        .getService(cloudConnectionManagerReference);\n-\n+                CloudConnectionManager cloudConnectionManager = ServiceLocator.getInstance().getService(cloudConnectionManagerReference);\n                 isConnected = cloudConnectionManager.isConnected();\n             }\n             ServiceLocator.getInstance().ungetService(cloudConnectionManagerReference);\n         }\n-\n         return isConnected;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 181
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 213).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}