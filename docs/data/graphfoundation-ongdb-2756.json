{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2756",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "77",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "405",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "405",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "419",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "419",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "429",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "429",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "442",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "442",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "458",
                    "column": "65",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "458",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "476",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "476",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "489",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "489",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "505",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "505",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2756/GraphDatabaseService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2756/GraphDatabaseService.java\nindex 2e67a6132ce..e5c56235240 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2756/GraphDatabaseService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2756/GraphDatabaseService.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphdb;\n \n import java.util.Map;\n@@ -48,488 +49,488 @@ import org.neo4j.graphdb.traversal.TraversalDescription;\n  */\n public interface GraphDatabaseService\n {\n-    /**\n-     * Creates a new node.\n-     *\n-     * @return the created node.\n-     */\n-    Node createNode();\n-\n-    /**\n-     * Creates a new node and returns it id.\n-     * Please note: Neo4j reuses its internal ids when\n-     * nodes and relationships are deleted, which means it's bad practice to\n-     * refer to them this way. Instead, use application generated ids.\n-     *\n-     * @return the created nodes id.\n-     * @deprecated This method will be removed in a future major release.\n-     */\n-    @Deprecated\n-    Long createNodeId();\n-\n-    /**\n-     * Creates a new node and adds the provided labels to it.\n-     *\n-     * @param labels {@link Label labels} to add to the created node.\n-     * @return the created node.\n-     */\n-    Node createNode( Label... labels );\n-\n-    /**\n-     * Looks up a node by id. Please note: Neo4j reuses its internal ids when\n-     * nodes and relationships are deleted, which means it's bad practice to\n-     * refer to them this way. Instead, use application generated ids.\n-     *\n-     * @param id the id of the node\n-     * @return the node with id <code>id</code> if found\n-     * @throws NotFoundException if not found\n-     */\n-    Node getNodeById( long id );\n-\n-    /**\n-     * Looks up a relationship by id. Please note: Neo4j reuses its internal ids\n-     * when nodes and relationships are deleted, which means it's bad practice\n-     * to refer to them this way. Instead, use application generated ids.\n-     *\n-     * @param id the id of the relationship\n-     * @return the relationship with id <code>id</code> if found\n-     * @throws NotFoundException if not found\n-     */\n-    Relationship getRelationshipById( long id );\n-\n-    /**\n-     * Returns all nodes in the graph.\n-     *\n-     * @return all nodes in the graph.\n-     */\n-    ResourceIterable<Node> getAllNodes();\n-\n-    /**\n-     * Returns all relationships in the graph.\n-     *\n-     * @return all relationships in the graph.\n-     */\n-    ResourceIterable<Relationship> getAllRelationships();\n-\n-    /**\n-     * Returns all nodes having the label, and the wanted property value.\n-     * If an online index is found, it will be used to look up the requested\n-     * nodes.\n-     * <p>\n-     * If no indexes exist for the label/property combination, the database will\n-     * scan all labeled nodes looking for the property value.\n-     * <p>\n-     * Note that equality for values do not follow the rules of Java. This means that the number 42 is equals to all\n-     * other 42 numbers, regardless of whether they are encoded as Integer, Long, Float, Short, Byte or Double.\n-     * <p>\n-     * Same rules follow Character and String - the Character 'A' is equal to the String 'A'.\n-     * <p>\n-     * Finally - arrays also follow these rules. An int[] {1,2,3} is equal to a double[] {1.0, 2.0, 3.0}\n-     * <p>\n-     * Please ensure that the returned {@link ResourceIterator} is closed correctly and as soon as possible\n-     * inside your transaction to avoid potential blocking of write operations.\n-     *\n-     * @param label consider nodes with this label\n-     * @param key   required property key\n-     * @param value required property value\n-     * @return an iterator containing all matching nodes. See {@link ResourceIterator} for responsibilities.\n-     */\n-    ResourceIterator<Node> findNodes( Label label, String key, Object value );\n-\n-    /**\n-     * Returns all nodes having the label, and the wanted property values.\n-     * If an online index is found, it will be used to look up the requested\n-     * nodes.\n-     * <p>\n-     * If no indexes exist for the label with all provided properties, the database will\n-     * scan all labeled nodes looking for matching nodes.\n-     * <p>\n-     * Note that equality for values do not follow the rules of Java. This means that the number 42 is equals to all\n-     * other 42 numbers, regardless of whether they are encoded as Integer, Long, Float, Short, Byte or Double.\n-     * <p>\n-     * Same rules follow Character and String - the Character 'A' is equal to the String 'A'.\n-     * <p>\n-     * Finally - arrays also follow these rules. An int[] {1,2,3} is equal to a double[] {1.0, 2.0, 3.0}\n-     * <p>\n-     * Please ensure that the returned {@link ResourceIterator} is closed correctly and as soon as possible\n-     * inside your transaction to avoid potential blocking of write operations.\n-     *\n-     * @param label  consider nodes with this label\n-     * @param key1   required property key1\n-     * @param value1 required property value of key1\n-     * @param key2   required property key2\n-     * @param value2 required property value of key2\n-     * @return an iterator containing all matching nodes. See {@link ResourceIterator} for responsibilities.\n-     */\n-    default ResourceIterator<Node> findNodes( Label label, String key1, Object value1, String key2, Object value2 )\n-    {\n-        throw new UnsupportedOperationException( \"findNodes by multiple property names and values is not supported.\" );\n-    }\n-\n-    /**\n-     * Returns all nodes having the label, and the wanted property values.\n-     * If an online index is found, it will be used to look up the requested\n-     * nodes.\n-     * <p>\n-     * If no indexes exist for the label with all provided properties, the database will\n-     * scan all labeled nodes looking for matching nodes.\n-     * <p>\n-     * Note that equality for values do not follow the rules of Java. This means that the number 42 is equals to all\n-     * other 42 numbers, regardless of whether they are encoded as Integer, Long, Float, Short, Byte or Double.\n-     * <p>\n-     * Same rules follow Character and String - the Character 'A' is equal to the String 'A'.\n-     * <p>\n-     * Finally - arrays also follow these rules. An int[] {1,2,3} is equal to a double[] {1.0, 2.0, 3.0}\n-     * <p>\n-     * Please ensure that the returned {@link ResourceIterator} is closed correctly and as soon as possible\n-     * inside your transaction to avoid potential blocking of write operations.\n-     *\n-     * @param label  consider nodes with this label\n-     * @param key1   required property key1\n-     * @param value1 required property value of key1\n-     * @param key2   required property key2\n-     * @param value2 required property value of key2\n-     * @param key3   required property key3\n-     * @param value3 required property value of key3\n-     * @return an iterator containing all matching nodes. See {@link ResourceIterator} for responsibilities.\n-     */\n-    default ResourceIterator<Node> findNodes( Label label,\n-                                      String key1, Object value1,\n-                                      String key2, Object value2,\n-                                      String key3, Object value3 )\n-    {\n-        throw new UnsupportedOperationException( \"findNodes by multiple property names and values is not supported.\" );\n-    }\n-\n-    /**\n-     * Returns all nodes having the label, and the wanted property values.\n-     * If an online index is found, it will be used to look up the requested\n-     * nodes.\n-     * <p>\n-     * If no indexes exist for the label with all provided properties, the database will\n-     * scan all labeled nodes looking for matching nodes.\n-     * <p>\n-     * Note that equality for values do not follow the rules of Java. This means that the number 42 is equals to all\n-     * other 42 numbers, regardless of whether they are encoded as Integer, Long, Float, Short, Byte or Double.\n-     * <p>\n-     * Same rules follow Character and String - the Character 'A' is equal to the String 'A'.\n-     * <p>\n-     * Finally - arrays also follow these rules. An int[] {1,2,3} is equal to a double[] {1.0, 2.0, 3.0}\n-     * <p>\n-     * Please ensure that the returned {@link ResourceIterator} is closed correctly and as soon as possible\n-     * inside your transaction to avoid potential blocking of write operations.\n-     *\n-     * @param label          consider nodes with this label\n-     * @param propertyValues required property key-value combinations\n-     * @return an iterator containing all matching nodes. See {@link ResourceIterator} for responsibilities.\n-     */\n-    default ResourceIterator<Node> findNodes( Label label, Map<String, Object> propertyValues )\n-    {\n-        throw new UnsupportedOperationException( \"findNodes by multiple property names and values is not supported.\" );\n-    }\n-\n-    /**\n-     * Returns all nodes having a given label, and a property value of type String or Character matching the\n-     * given value template and search mode.\n-     * <p>\n-     * If an online index is found, it will be used to look up the requested nodes.\n-     * If no indexes exist for the label/property combination, the database will\n-     * scan all labeled nodes looking for matching property values.\n-     * <p>\n-     * The search mode and value template are used to select nodes of interest. The search mode can\n-     * be one of\n-     * <ul>\n-     *   <li>EXACT: The value has to match the template exactly. This is the same behavior as {@link GraphDatabaseService#findNode(Label, String, Object)}.</li>\n-     *   <li>PREFIX: The value must have a prefix matching the template.</li>\n-     *   <li>SUFFIX: The value must have a suffix matching the template.</li>\n-     *   <li>CONTAINS: The value must contain the template. Only exact matches are supported.</li>\n-     * </ul>\n-     * Note that in Neo4j the Character 'A' will be treated the same way as the String 'A'.\n-     * <p>\n-     * Please ensure that the returned {@link ResourceIterator} is closed correctly and as soon as possible\n-     * inside your transaction to avoid potential blocking of write operations.\n-     *\n-     * @param label      consider nodes with this label\n-     * @param key        required property key\n-     * @param template   required property value template\n-     * @param searchMode required property value template\n-     * @return an iterator containing all matching nodes. See {@link ResourceIterator} for responsibilities.\n-     */\n-    default ResourceIterator<Node> findNodes( Label label, String key, String template, StringSearchMode searchMode )\n-    {\n-        throw new UnsupportedOperationException( \"Specialized string queries are not supported\" );\n-    }\n-\n-    /**\n-     * Equivalent to {@link #findNodes(Label, String, Object)}, however it must find no more than one\n-     * {@link Node node} or it will throw an exception.\n-     *\n-     * @param label consider nodes with this label\n-     * @param key   required property key\n-     * @param value required property value\n-     * @return the matching node or <code>null</code> if none could be found\n-     * @throws MultipleFoundException if more than one matching {@link Node node} is found\n-     */\n-    Node findNode( Label label, String key, Object value );\n-\n-    /**\n-     * Returns all {@link Node nodes} with a specific {@link Label label}.\n-     *\n-     * Please take care that the returned {@link ResourceIterator} is closed correctly and as soon as possible\n-     * inside your transaction to avoid potential blocking of write operations.\n-     *\n-     * @param label the {@link Label} to return nodes for.\n-     * @return an iterator containing all nodes matching the label. See {@link ResourceIterator} for responsibilities.\n-     */\n-    ResourceIterator<Node> findNodes( Label label );\n-\n-    /**\n-     * Returns all labels currently in the underlying store. Labels are added to the store the first time\n-     * they are used. This method guarantees that it will return all labels currently in use.\n-     *\n-     * Please take care that the returned {@link ResourceIterable} is closed correctly and as soon as possible\n-     * inside your transaction to avoid potential blocking of write operations.\n-     *\n-     * @return all labels in the underlying store.\n-     */\n-    ResourceIterable<Label> getAllLabelsInUse();\n-\n-    /**\n-     * Returns all relationship types currently in the underlying store.\n-     * Relationship types are added to the underlying store the first time they\n-     * are used in a successfully committed {@link Node#createRelationshipTo\n-     * node.createRelationshipTo(...)}. This method guarantees that it will\n-     * return all relationship types currently in use.\n-     *\n-     * @return all relationship types in the underlying store\n-     */\n-    ResourceIterable<RelationshipType> getAllRelationshipTypesInUse();\n-\n-    /**\n-     * Returns all labels currently in the underlying store. Labels are added to the store the first time\n-     * they are used. This method guarantees that it will return all labels currently in use. However,\n-     * it may also return <i>more</i> than that (e.g. it can return \"historic\" labels that are no longer used).\n-     *\n-     * Please take care that the returned {@link ResourceIterable} is closed correctly and as soon as possible\n-     * inside your transaction to avoid potential blocking of write operations.\n-     *\n-     * @return all labels in the underlying store.\n-     */\n-    ResourceIterable<Label> getAllLabels();\n-\n-    /**\n-     * Returns all relationship types currently in the underlying store.\n-     * Relationship types are added to the underlying store the first time they\n-     * are used in a successfully committed {@link Node#createRelationshipTo\n-     * node.createRelationshipTo(...)}. Note that this method is guaranteed to\n-     * return all known relationship types, but it does not guarantee that it\n-     * won't return <i>more</i> than that (e.g. it can return \"historic\"\n-     * relationship types that no longer have any relationships in the node\n-     * space).\n-     *\n-     * @return all relationship types in the underlying store\n-     */\n-    ResourceIterable<RelationshipType> getAllRelationshipTypes();\n-\n-    /**\n-     * Returns all property keys currently in the underlying store. This method guarantees that it will return all\n-     * property keys currently in use. However, it may also return <i>more</i> than that (e.g. it can return \"historic\"\n-     * labels that are no longer used).\n-     *\n-     * Please take care that the returned {@link ResourceIterable} is closed correctly and as soon as possible\n-     * inside your transaction to avoid potential blocking of write operations.\n-     *\n-     * @return all property keys in the underlying store.\n-     */\n-    ResourceIterable<String> getAllPropertyKeys();\n-\n-    /**\n-     * Use this method to check if the database is currently in a usable state.\n-     *\n-     * @param timeout timeout (in milliseconds) to wait for the database to become available.\n-     *   If the database has been shut down {@code false} is returned immediately.\n-     * @return the state of the database: {@code true} if it is available, otherwise {@code false}\n-     */\n-    boolean isAvailable( long timeout );\n-\n-    /**\n-     * Shuts down Neo4j. After this method has been invoked, it's invalid to\n-     * invoke any methods in the Neo4j API and all references to this instance\n-     * of GraphDatabaseService should be discarded.\n-     */\n-    void shutdown();\n-\n-    /**\n-     * Starts a new {@link Transaction transaction} and associates it with the current thread.\n-     * <p>\n-     * <em>All database operations must be wrapped in a transaction.</em>\n-     * <p>\n-     * If you attempt to access the graph outside of a transaction, those operations will throw\n-     * {@link NotInTransactionException}.\n-     * <p>\n-     * Please ensure that any returned {@link ResourceIterable} is closed correctly and as soon as possible\n-     * inside your transaction to avoid potential blocking of write operations.\n-     *\n-     * @return a new transaction instance\n-     */\n-    Transaction beginTx();\n-\n-    /**\n-     * Starts a new {@link Transaction transaction} with custom timeout and associates it with the current thread.\n-     * Timeout will be taken into account <b>only</b> when execution guard is enabled.\n-     * <p>\n-     * <em>All database operations must be wrapped in a transaction.</em>\n-     * <p>\n-     * If you attempt to access the graph outside of a transaction, those operations will throw\n-     * {@link NotInTransactionException}.\n-     * <p>\n-     * Please ensure that any returned {@link ResourceIterable} is closed correctly and as soon as possible\n-     * inside your transaction to avoid potential blocking of write operations.\n-     *\n-     * @param timeout transaction timeout\n-     * @param unit time unit of timeout argument\n-     * @return a new transaction instance\n-     */\n-    Transaction beginTx( long timeout, TimeUnit unit );\n-\n-    /**\n-     * Executes a query and returns an iterable that contains the result set.\n-     *\n-     * This method is the same as {@link #execute(String, java.util.Map)} with an empty parameters-map.\n-     *\n-     * @param query The query to execute\n-     * @return A {@link org.neo4j.graphdb.Result} that contains the result set.\n-     * @throws QueryExecutionException If the Query contains errors\n-     */\n-    Result execute( String query ) throws QueryExecutionException;\n-\n-    /**\n-     * Executes a query and returns an iterable that contains the result set.\n-     * If query will not gonna be able to complete within specified timeout time interval it will be terminated.\n-     *\n-     * This method is the same as {@link #execute(String, java.util.Map)} with an empty parameters-map.\n-     *\n-     * @param query The query to execute\n-     * @param timeout The maximum time interval within which query should be completed.\n-     * @param unit time unit of timeout argument\n-     * @return A {@link org.neo4j.graphdb.Result} that contains the result set.\n-     * @throws QueryExecutionException If the Query contains errors\n-     */\n-    Result execute( String query, long timeout, TimeUnit unit ) throws QueryExecutionException;\n-\n-    /**\n-     * Executes a query and returns an iterable that contains the result set.\n-     *\n-     * @param query      The query to execute\n-     * @param parameters Parameters for the query\n-     * @return A {@link org.neo4j.graphdb.Result} that contains the result set\n-     * @throws QueryExecutionException If the Query contains errors\n-     */\n-    Result execute( String query, Map<String,Object> parameters ) throws QueryExecutionException;\n-\n-    /**\n-     * Executes a query and returns an iterable that contains the result set.\n-     * If query will not gonna be able to complete within specified timeout time interval it will be terminated.\n-     *\n-     * @param query      The query to execute\n-     * @param parameters Parameters for the query\n-     * @param timeout The maximum time interval within which query should be completed.\n-     * @param unit time unit of timeout argument\n-     * @return A {@link org.neo4j.graphdb.Result} that contains the result set\n-     * @throws QueryExecutionException If the Query contains errors\n-     */\n-    Result execute( String query, Map<String,Object> parameters, long timeout, TimeUnit unit ) throws QueryExecutionException;\n-\n-    /**\n-     * Registers {@code handler} as a handler for transaction events which\n-     * are generated from different places in the lifecycle of each\n-     * transaction. To guarantee that the handler gets all events properly\n-     * it shouldn't be registered when the application is running (i.e. in the\n-     * middle of one or more transactions). If the specified handler instance\n-     * has already been registered this method will do nothing.\n-     *\n-     * @param <T>     the type of state object used in the handler, see more\n-     *                documentation about it at {@link TransactionEventHandler}.\n-     * @param handler the handler to receive events about different states\n-     *                in transaction lifecycles.\n-     * @return the handler passed in as the argument.\n-     */\n-    <T> TransactionEventHandler<T> registerTransactionEventHandler( TransactionEventHandler<T> handler );\n-\n-    /**\n-     * Unregisters {@code handler} from the list of transaction event handlers.\n-     * If {@code handler} hasn't been registered with\n-     * {@link #registerTransactionEventHandler(TransactionEventHandler)} prior\n-     * to calling this method an {@link IllegalStateException} will be thrown.\n-     * After a successful call to this method the {@code handler} will no\n-     * longer receive any transaction events.\n-     *\n-     * @param <T>     the type of state object used in the handler, see more\n-     *                documentation about it at {@link TransactionEventHandler}.\n-     * @param handler the handler to receive events about different states\n-     *                in transaction lifecycles.\n-     * @return the handler passed in as the argument.\n-     * @throws IllegalStateException if {@code handler} wasn't registered prior\n-     *                               to calling this method.\n-     */\n-    <T> TransactionEventHandler<T> unregisterTransactionEventHandler( TransactionEventHandler<T> handler );\n-\n-    /**\n-     * Registers {@code handler} as a handler for kernel events which\n-     * are generated from different places in the lifecycle of the kernel.\n-     * To guarantee proper behavior the handler should be registered right\n-     * after the graph database has been started. If the specified handler\n-     * instance has already been registered this method will do nothing.\n-     *\n-     * @param handler the handler to receive events about different states\n-     *                in the kernel lifecycle.\n-     * @return the handler passed in as the argument.\n-     */\n-    KernelEventHandler registerKernelEventHandler( KernelEventHandler handler );\n-\n-    /**\n-     * Unregisters {@code handler} from the list of kernel event handlers.\n-     * If {@code handler} hasn't been registered with\n-     * {@link #registerKernelEventHandler(KernelEventHandler)} prior to calling\n-     * this method an {@link IllegalStateException} will be thrown.\n-     * After a successful call to this method the {@code handler} will no\n-     * longer receive any kernel events.\n-     *\n-     * @param handler the handler to receive events about different states\n-     *                in the kernel lifecycle.\n-     * @return the handler passed in as the argument.\n-     * @throws IllegalStateException if {@code handler} wasn't registered prior\n-     *                               to calling this method.\n-     */\n-    KernelEventHandler unregisterKernelEventHandler( KernelEventHandler handler );\n-\n-    /**\n-     * Returns the {@link Schema schema manager} where all things related to schema,\n-     * for example constraints and indexing on {@link Label labels}.\n-     *\n-     * @return the {@link Schema schema manager} for this database.\n-     */\n-    Schema schema();\n-\n-    /**\n-     * Returns the {@link IndexManager} paired with this graph database service\n-     * and is the entry point for managing indexes coupled with this database.\n-     *\n-     * @return the {@link IndexManager} for this database.\n-     */\n-    IndexManager index();\n-\n-    /**\n-     * Factory method for unidirectional traversal descriptions.\n-     *\n-     * @return a new {@link TraversalDescription}\n-     */\n-    TraversalDescription traversalDescription();\n-\n-    /**\n-     * Factory method for bidirectional traversal descriptions.\n-     *\n-     * @return a new {@link BidirectionalTraversalDescription}\n-     */\n-    BidirectionalTraversalDescription bidirectionalTraversalDescription();\n+  /**\n+   * Creates a new node.\n+   *\n+   * @return the created node.\n+   */\n+  Node createNode();\n+\n+  /**\n+   * Creates a new node and returns it id.\n+   * Please note: Neo4j reuses its internal ids when\n+   * nodes and relationships are deleted, which means it's bad practice to\n+   * refer to them this way. Instead, use application generated ids.\n+   *\n+   * @return the created nodes id.\n+   * @deprecated This method will be removed in a future major release.\n+   */\n+  @Deprecated\n+  Long createNodeId();\n+\n+  /**\n+   * Creates a new node and adds the provided labels to it.\n+   *\n+   * @param labels {@link Label labels} to add to the created node.\n+   * @return the created node.\n+   */\n+  Node createNode(Label... labels);\n+\n+  /**\n+   * Looks up a node by id. Please note: Neo4j reuses its internal ids when\n+   * nodes and relationships are deleted, which means it's bad practice to\n+   * refer to them this way. Instead, use application generated ids.\n+   *\n+   * @param id the id of the node\n+   * @return the node with id <code>id</code> if found\n+   * @throws NotFoundException if not found\n+   */\n+  Node getNodeById(long id);\n+\n+  /**\n+   * Looks up a relationship by id. Please note: Neo4j reuses its internal ids\n+   * when nodes and relationships are deleted, which means it's bad practice\n+   * to refer to them this way. Instead, use application generated ids.\n+   *\n+   * @param id the id of the relationship\n+   * @return the relationship with id <code>id</code> if found\n+   * @throws NotFoundException if not found\n+   */\n+  Relationship getRelationshipById(long id);\n+\n+  /**\n+   * Returns all nodes in the graph.\n+   *\n+   * @return all nodes in the graph.\n+   */\n+  ResourceIterable<Node> getAllNodes();\n+\n+  /**\n+   * Returns all relationships in the graph.\n+   *\n+   * @return all relationships in the graph.\n+   */\n+  ResourceIterable<Relationship> getAllRelationships();\n+\n+  /**\n+   * Returns all nodes having the label, and the wanted property value.\n+   * If an online index is found, it will be used to look up the requested\n+   * nodes.\n+   * <p>\n+   * If no indexes exist for the label/property combination, the database will\n+   * scan all labeled nodes looking for the property value.\n+   * <p>\n+   * Note that equality for values do not follow the rules of Java. This means that the number 42 is equals to all\n+   * other 42 numbers, regardless of whether they are encoded as Integer, Long, Float, Short, Byte or Double.\n+   * <p>\n+   * Same rules follow Character and String - the Character 'A' is equal to the String 'A'.\n+   * <p>\n+   * Finally - arrays also follow these rules. An int[] {1,2,3} is equal to a double[] {1.0, 2.0, 3.0}\n+   * <p>\n+   * Please ensure that the returned {@link ResourceIterator} is closed correctly and as soon as possible\n+   * inside your transaction to avoid potential blocking of write operations.\n+   *\n+   * @param label consider nodes with this label\n+   * @param key   required property key\n+   * @param value required property value\n+   * @return an iterator containing all matching nodes. See {@link ResourceIterator} for responsibilities.\n+   */\n+  ResourceIterator<Node> findNodes(Label label, String key, Object value);\n+\n+  /**\n+   * Returns all nodes having the label, and the wanted property values.\n+   * If an online index is found, it will be used to look up the requested\n+   * nodes.\n+   * <p>\n+   * If no indexes exist for the label with all provided properties, the database will\n+   * scan all labeled nodes looking for matching nodes.\n+   * <p>\n+   * Note that equality for values do not follow the rules of Java. This means that the number 42 is equals to all\n+   * other 42 numbers, regardless of whether they are encoded as Integer, Long, Float, Short, Byte or Double.\n+   * <p>\n+   * Same rules follow Character and String - the Character 'A' is equal to the String 'A'.\n+   * <p>\n+   * Finally - arrays also follow these rules. An int[] {1,2,3} is equal to a double[] {1.0, 2.0, 3.0}\n+   * <p>\n+   * Please ensure that the returned {@link ResourceIterator} is closed correctly and as soon as possible\n+   * inside your transaction to avoid potential blocking of write operations.\n+   *\n+   * @param label  consider nodes with this label\n+   * @param key1   required property key1\n+   * @param value1 required property value of key1\n+   * @param key2   required property key2\n+   * @param value2 required property value of key2\n+   * @return an iterator containing all matching nodes. See {@link ResourceIterator} for responsibilities.\n+   */\n+  default ResourceIterator<Node> findNodes(Label label, String key1, Object value1, String key2, Object value2)\n+  {\n+    throw new UnsupportedOperationException(\"findNodes by multiple property names and values is not supported.\");\n+  }\n+\n+  /**\n+   * Returns all nodes having the label, and the wanted property values.\n+   * If an online index is found, it will be used to look up the requested\n+   * nodes.\n+   * <p>\n+   * If no indexes exist for the label with all provided properties, the database will\n+   * scan all labeled nodes looking for matching nodes.\n+   * <p>\n+   * Note that equality for values do not follow the rules of Java. This means that the number 42 is equals to all\n+   * other 42 numbers, regardless of whether they are encoded as Integer, Long, Float, Short, Byte or Double.\n+   * <p>\n+   * Same rules follow Character and String - the Character 'A' is equal to the String 'A'.\n+   * <p>\n+   * Finally - arrays also follow these rules. An int[] {1,2,3} is equal to a double[] {1.0, 2.0, 3.0}\n+   * <p>\n+   * Please ensure that the returned {@link ResourceIterator} is closed correctly and as soon as possible\n+   * inside your transaction to avoid potential blocking of write operations.\n+   *\n+   * @param label  consider nodes with this label\n+   * @param key1   required property key1\n+   * @param value1 required property value of key1\n+   * @param key2   required property key2\n+   * @param value2 required property value of key2\n+   * @param key3   required property key3\n+   * @param value3 required property value of key3\n+   * @return an iterator containing all matching nodes. See {@link ResourceIterator} for responsibilities.\n+   */\n+  default ResourceIterator<Node> findNodes(Label label,\n+                                           String key1, Object value1,\n+                                           String key2, Object value2,\n+                                           String key3, Object value3)\n+  {\n+    throw new UnsupportedOperationException(\"findNodes by multiple property names and values is not supported.\");\n+  }\n+\n+  /**\n+   * Returns all nodes having the label, and the wanted property values.\n+   * If an online index is found, it will be used to look up the requested\n+   * nodes.\n+   * <p>\n+   * If no indexes exist for the label with all provided properties, the database will\n+   * scan all labeled nodes looking for matching nodes.\n+   * <p>\n+   * Note that equality for values do not follow the rules of Java. This means that the number 42 is equals to all\n+   * other 42 numbers, regardless of whether they are encoded as Integer, Long, Float, Short, Byte or Double.\n+   * <p>\n+   * Same rules follow Character and String - the Character 'A' is equal to the String 'A'.\n+   * <p>\n+   * Finally - arrays also follow these rules. An int[] {1,2,3} is equal to a double[] {1.0, 2.0, 3.0}\n+   * <p>\n+   * Please ensure that the returned {@link ResourceIterator} is closed correctly and as soon as possible\n+   * inside your transaction to avoid potential blocking of write operations.\n+   *\n+   * @param label          consider nodes with this label\n+   * @param propertyValues required property key-value combinations\n+   * @return an iterator containing all matching nodes. See {@link ResourceIterator} for responsibilities.\n+   */\n+  default ResourceIterator<Node> findNodes(Label label, Map<String, Object> propertyValues)\n+  {\n+    throw new UnsupportedOperationException(\"findNodes by multiple property names and values is not supported.\");\n+  }\n+\n+  /**\n+   * Returns all nodes having a given label, and a property value of type String or Character matching the\n+   * given value template and search mode.\n+   * <p>\n+   * If an online index is found, it will be used to look up the requested nodes.\n+   * If no indexes exist for the label/property combination, the database will\n+   * scan all labeled nodes looking for matching property values.\n+   * <p>\n+   * The search mode and value template are used to select nodes of interest. The search mode can\n+   * be one of\n+   * <ul>\n+   *   <li>EXACT: The value has to match the template exactly. This is the same behavior as {@link GraphDatabaseService#findNode(Label, String, Object)}.</li>\n+   *   <li>PREFIX: The value must have a prefix matching the template.</li>\n+   *   <li>SUFFIX: The value must have a suffix matching the template.</li>\n+   *   <li>CONTAINS: The value must contain the template. Only exact matches are supported.</li>\n+   * </ul>\n+   * Note that in Neo4j the Character 'A' will be treated the same way as the String 'A'.\n+   * <p>\n+   * Please ensure that the returned {@link ResourceIterator} is closed correctly and as soon as possible\n+   * inside your transaction to avoid potential blocking of write operations.\n+   *\n+   * @param label      consider nodes with this label\n+   * @param key        required property key\n+   * @param template   required property value template\n+   * @param searchMode required property value template\n+   * @return an iterator containing all matching nodes. See {@link ResourceIterator} for responsibilities.\n+   */\n+  default ResourceIterator<Node> findNodes(Label label, String key, String template, StringSearchMode searchMode)\n+  {\n+    throw new UnsupportedOperationException(\"Specialized string queries are not supported\");\n+  }\n+\n+  /**\n+   * Equivalent to {@link #findNodes(Label, String, Object)}, however it must find no more than one\n+   * {@link Node node} or it will throw an exception.\n+   *\n+   * @param label consider nodes with this label\n+   * @param key   required property key\n+   * @param value required property value\n+   * @return the matching node or <code>null</code> if none could be found\n+   * @throws MultipleFoundException if more than one matching {@link Node node} is found\n+   */\n+  Node findNode(Label label, String key, Object value);\n+\n+  /**\n+   * Returns all {@link Node nodes} with a specific {@link Label label}.\n+   * <p>\n+   * Please take care that the returned {@link ResourceIterator} is closed correctly and as soon as possible\n+   * inside your transaction to avoid potential blocking of write operations.\n+   *\n+   * @param label the {@link Label} to return nodes for.\n+   * @return an iterator containing all nodes matching the label. See {@link ResourceIterator} for responsibilities.\n+   */\n+  ResourceIterator<Node> findNodes(Label label);\n+\n+  /**\n+   * Returns all labels currently in the underlying store. Labels are added to the store the first time\n+   * they are used. This method guarantees that it will return all labels currently in use.\n+   * <p>\n+   * Please take care that the returned {@link ResourceIterable} is closed correctly and as soon as possible\n+   * inside your transaction to avoid potential blocking of write operations.\n+   *\n+   * @return all labels in the underlying store.\n+   */\n+  ResourceIterable<Label> getAllLabelsInUse();\n+\n+  /**\n+   * Returns all relationship types currently in the underlying store.\n+   * Relationship types are added to the underlying store the first time they\n+   * are used in a successfully committed {@link Node#createRelationshipTo\n+   * node.createRelationshipTo(...)}. This method guarantees that it will\n+   * return all relationship types currently in use.\n+   *\n+   * @return all relationship types in the underlying store\n+   */\n+  ResourceIterable<RelationshipType> getAllRelationshipTypesInUse();\n+\n+  /**\n+   * Returns all labels currently in the underlying store. Labels are added to the store the first time\n+   * they are used. This method guarantees that it will return all labels currently in use. However,\n+   * it may also return <i>more</i> than that (e.g. it can return \"historic\" labels that are no longer used).\n+   * <p>\n+   * Please take care that the returned {@link ResourceIterable} is closed correctly and as soon as possible\n+   * inside your transaction to avoid potential blocking of write operations.\n+   *\n+   * @return all labels in the underlying store.\n+   */\n+  ResourceIterable<Label> getAllLabels();\n+\n+  /**\n+   * Returns all relationship types currently in the underlying store.\n+   * Relationship types are added to the underlying store the first time they\n+   * are used in a successfully committed {@link Node#createRelationshipTo\n+   * node.createRelationshipTo(...)}. Note that this method is guaranteed to\n+   * return all known relationship types, but it does not guarantee that it\n+   * won't return <i>more</i> than that (e.g. it can return \"historic\"\n+   * relationship types that no longer have any relationships in the node\n+   * space).\n+   *\n+   * @return all relationship types in the underlying store\n+   */\n+  ResourceIterable<RelationshipType> getAllRelationshipTypes();\n+\n+  /**\n+   * Returns all property keys currently in the underlying store. This method guarantees that it will return all\n+   * property keys currently in use. However, it may also return <i>more</i> than that (e.g. it can return \"historic\"\n+   * labels that are no longer used).\n+   * <p>\n+   * Please take care that the returned {@link ResourceIterable} is closed correctly and as soon as possible\n+   * inside your transaction to avoid potential blocking of write operations.\n+   *\n+   * @return all property keys in the underlying store.\n+   */\n+  ResourceIterable<String> getAllPropertyKeys();\n+\n+  /**\n+   * Use this method to check if the database is currently in a usable state.\n+   *\n+   * @param timeout timeout (in milliseconds) to wait for the database to become available.\n+   *                If the database has been shut down {@code false} is returned immediately.\n+   * @return the state of the database: {@code true} if it is available, otherwise {@code false}\n+   */\n+  boolean isAvailable(long timeout);\n+\n+  /**\n+   * Shuts down Neo4j. After this method has been invoked, it's invalid to\n+   * invoke any methods in the Neo4j API and all references to this instance\n+   * of GraphDatabaseService should be discarded.\n+   */\n+  void shutdown();\n+\n+  /**\n+   * Starts a new {@link Transaction transaction} and associates it with the current thread.\n+   * <p>\n+   * <em>All database operations must be wrapped in a transaction.</em>\n+   * <p>\n+   * If you attempt to access the graph outside of a transaction, those operations will throw\n+   * {@link NotInTransactionException}.\n+   * <p>\n+   * Please ensure that any returned {@link ResourceIterable} is closed correctly and as soon as possible\n+   * inside your transaction to avoid potential blocking of write operations.\n+   *\n+   * @return a new transaction instance\n+   */\n+  Transaction beginTx();\n+\n+  /**\n+   * Starts a new {@link Transaction transaction} with custom timeout and associates it with the current thread.\n+   * Timeout will be taken into account <b>only</b> when execution guard is enabled.\n+   * <p>\n+   * <em>All database operations must be wrapped in a transaction.</em>\n+   * <p>\n+   * If you attempt to access the graph outside of a transaction, those operations will throw\n+   * {@link NotInTransactionException}.\n+   * <p>\n+   * Please ensure that any returned {@link ResourceIterable} is closed correctly and as soon as possible\n+   * inside your transaction to avoid potential blocking of write operations.\n+   *\n+   * @param timeout transaction timeout\n+   * @param unit    time unit of timeout argument\n+   * @return a new transaction instance\n+   */\n+  Transaction beginTx(long timeout, TimeUnit unit);\n+\n+  /**\n+   * Executes a query and returns an iterable that contains the result set.\n+   * <p>\n+   * This method is the same as {@link #execute(String, java.util.Map)} with an empty parameters-map.\n+   *\n+   * @param query The query to execute\n+   * @return A {@link org.neo4j.graphdb.Result} that contains the result set.\n+   * @throws QueryExecutionException If the Query contains errors\n+   */\n+  Result execute(String query) throws QueryExecutionException;\n+\n+  /**\n+   * Executes a query and returns an iterable that contains the result set.\n+   * If query will not gonna be able to complete within specified timeout time interval it will be terminated.\n+   * <p>\n+   * This method is the same as {@link #execute(String, java.util.Map)} with an empty parameters-map.\n+   *\n+   * @param query   The query to execute\n+   * @param timeout The maximum time interval within which query should be completed.\n+   * @param unit    time unit of timeout argument\n+   * @return A {@link org.neo4j.graphdb.Result} that contains the result set.\n+   * @throws QueryExecutionException If the Query contains errors\n+   */\n+  Result execute(String query, long timeout, TimeUnit unit) throws QueryExecutionException;\n+\n+  /**\n+   * Executes a query and returns an iterable that contains the result set.\n+   *\n+   * @param query      The query to execute\n+   * @param parameters Parameters for the query\n+   * @return A {@link org.neo4j.graphdb.Result} that contains the result set\n+   * @throws QueryExecutionException If the Query contains errors\n+   */\n+  Result execute(String query, Map<String, Object> parameters) throws QueryExecutionException;\n+\n+  /**\n+   * Executes a query and returns an iterable that contains the result set.\n+   * If query will not gonna be able to complete within specified timeout time interval it will be terminated.\n+   *\n+   * @param query      The query to execute\n+   * @param parameters Parameters for the query\n+   * @param timeout    The maximum time interval within which query should be completed.\n+   * @param unit       time unit of timeout argument\n+   * @return A {@link org.neo4j.graphdb.Result} that contains the result set\n+   * @throws QueryExecutionException If the Query contains errors\n+   */\n+  Result execute(String query, Map<String, Object> parameters, long timeout, TimeUnit unit) throws QueryExecutionException;\n+\n+  /**\n+   * Registers {@code handler} as a handler for transaction events which\n+   * are generated from different places in the lifecycle of each\n+   * transaction. To guarantee that the handler gets all events properly\n+   * it shouldn't be registered when the application is running (i.e. in the\n+   * middle of one or more transactions). If the specified handler instance\n+   * has already been registered this method will do nothing.\n+   *\n+   * @param <T>     the type of state object used in the handler, see more\n+   *                documentation about it at {@link TransactionEventHandler}.\n+   * @param handler the handler to receive events about different states\n+   *                in transaction lifecycles.\n+   * @return the handler passed in as the argument.\n+   */\n+  <T> TransactionEventHandler<T> registerTransactionEventHandler(TransactionEventHandler<T> handler);\n+\n+  /**\n+   * Unregisters {@code handler} from the list of transaction event handlers.\n+   * If {@code handler} hasn't been registered with\n+   * {@link #registerTransactionEventHandler(TransactionEventHandler)} prior\n+   * to calling this method an {@link IllegalStateException} will be thrown.\n+   * After a successful call to this method the {@code handler} will no\n+   * longer receive any transaction events.\n+   *\n+   * @param <T>     the type of state object used in the handler, see more\n+   *                documentation about it at {@link TransactionEventHandler}.\n+   * @param handler the handler to receive events about different states\n+   *                in transaction lifecycles.\n+   * @return the handler passed in as the argument.\n+   * @throws IllegalStateException if {@code handler} wasn't registered prior\n+   *                               to calling this method.\n+   */\n+  <T> TransactionEventHandler<T> unregisterTransactionEventHandler(TransactionEventHandler<T> handler);\n+\n+  /**\n+   * Registers {@code handler} as a handler for kernel events which\n+   * are generated from different places in the lifecycle of the kernel.\n+   * To guarantee proper behavior the handler should be registered right\n+   * after the graph database has been started. If the specified handler\n+   * instance has already been registered this method will do nothing.\n+   *\n+   * @param handler the handler to receive events about different states\n+   *                in the kernel lifecycle.\n+   * @return the handler passed in as the argument.\n+   */\n+  KernelEventHandler registerKernelEventHandler(KernelEventHandler handler);\n+\n+  /**\n+   * Unregisters {@code handler} from the list of kernel event handlers.\n+   * If {@code handler} hasn't been registered with\n+   * {@link #registerKernelEventHandler(KernelEventHandler)} prior to calling\n+   * this method an {@link IllegalStateException} will be thrown.\n+   * After a successful call to this method the {@code handler} will no\n+   * longer receive any kernel events.\n+   *\n+   * @param handler the handler to receive events about different states\n+   *                in the kernel lifecycle.\n+   * @return the handler passed in as the argument.\n+   * @throws IllegalStateException if {@code handler} wasn't registered prior\n+   *                               to calling this method.\n+   */\n+  KernelEventHandler unregisterKernelEventHandler(KernelEventHandler handler);\n+\n+  /**\n+   * Returns the {@link Schema schema manager} where all things related to schema,\n+   * for example constraints and indexing on {@link Label labels}.\n+   *\n+   * @return the {@link Schema schema manager} for this database.\n+   */\n+  Schema schema();\n+\n+  /**\n+   * Returns the {@link IndexManager} paired with this graph database service\n+   * and is the entry point for managing indexes coupled with this database.\n+   *\n+   * @return the {@link IndexManager} for this database.\n+   */\n+  IndexManager index();\n+\n+  /**\n+   * Factory method for unidirectional traversal descriptions.\n+   *\n+   * @return a new {@link TraversalDescription}\n+   */\n+  TraversalDescription traversalDescription();\n+\n+  /**\n+   * Factory method for bidirectional traversal descriptions.\n+   *\n+   * @return a new {@link BidirectionalTraversalDescription}\n+   */\n+  BidirectionalTraversalDescription bidirectionalTraversalDescription();\n }\n",
            "diff_size": 485
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2756/GraphDatabaseService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2756/GraphDatabaseService.java\nindex 2e67a6132ce..dff5d676599 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2756/GraphDatabaseService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2756/GraphDatabaseService.java\n@@ -193,11 +193,10 @@ public interface GraphDatabaseService\n      * @param value3 required property value of key3\n      * @return an iterator containing all matching nodes. See {@link ResourceIterator} for responsibilities.\n      */\n-    default ResourceIterator<Node> findNodes( Label label,\n-                                      String key1, Object value1,\n+    default ResourceIterator<Node> findNodes( Label label, String key1, Object value1,\n                                       String key2, Object value2,\n                                       String key3, Object value3 )\n-    {\n+{\n         throw new UnsupportedOperationException( \"findNodes by multiple property names and values is not supported.\" );\n     }\n \n@@ -223,7 +222,7 @@ public interface GraphDatabaseService\n      * @param propertyValues required property key-value combinations\n      * @return an iterator containing all matching nodes. See {@link ResourceIterator} for responsibilities.\n      */\n-    default ResourceIterator<Node> findNodes( Label label, Map<String, Object> propertyValues )\n+    default ResourceIterator<Node> findNodes( Label label, Map<String,Object> propertyValues )\n     {\n         throw new UnsupportedOperationException( \"findNodes by multiple property names and values is not supported.\" );\n     }\n@@ -532,4 +531,4 @@ public interface GraphDatabaseService\n      * @return a new {@link BidirectionalTraversalDescription}\n      */\n     BidirectionalTraversalDescription bidirectionalTraversalDescription();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}