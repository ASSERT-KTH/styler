{
    "project_name": "neo4j-neo4j",
    "error_id": "2601",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "69",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2601/IOLimiter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2601/IOLimiter.java\nindex b5ef894bde0..3aa70df4760 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2601/IOLimiter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2601/IOLimiter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.io.pagecache;\n \n import java.io.Flushable;\n@@ -58,14 +59,14 @@ public interface IOLimiter\n      * {@link InterruptedException}, however. Those should be dealt with by catching them and re-interrupting the\n      * current thread, or by wrapping them in {@link IOException}s.\n      *\n-     * @param previousStamp The stamp from the previous call to this method, or {@link #INITIAL_STAMP} if this is the\n-     * first call to this method for the given flush.\n+     * @param previousStamp        The stamp from the previous call to this method, or {@link #INITIAL_STAMP} if this is the\n+     *                             first call to this method for the given flush.\n      * @param recentlyCompletedIOs The number of IOs completed since the last call to this method.\n-     * @param flushable A {@link Flushable} instance that can flush any relevant dirty system buffers, to help smooth\n-     * out the IO load on the storage device.\n+     * @param flushable            A {@link Flushable} instance that can flush any relevant dirty system buffers, to help smooth\n+     *                             out the IO load on the storage device.\n      * @return A new stamp to pass into the next call to this method.\n      */\n-    long maybeLimitIO( long previousStamp, int recentlyCompletedIOs, Flushable flushable );\n+    long maybeLimitIO(long previousStamp, int recentlyCompletedIOs, Flushable flushable);\n \n     /**\n      * Temporarily disable the IOLimiter, to allow IO to proceed at full speed.\n@@ -73,7 +74,7 @@ public interface IOLimiter\n      * This method is thread-safe and reentrant. Multiple concurrent calls will \"stack\", and IO limitations will be\n      * enabled again once the last overlapping limit-disabling period ends with the \"last\" call to\n      * {@link #enableLimit()}. This is conceptually similar to how a reentrant read-lock works.\n-     *\n+     * <p>\n      * Thus, the typical usage pattern is with a {@code try-finally} clause, like this:\n      *\n      * <pre><code>\n@@ -107,7 +108,7 @@ public interface IOLimiter\n      * An IOPSLimiter implementation that does not restrict the rate of IO. Use this implementation if you want the\n      * flush to go as fast as possible.\n      */\n-    IOLimiter UNLIMITED = ( previousStamp, recentlyCompletedIOs, flushable ) -> previousStamp;\n+    IOLimiter UNLIMITED = (previousStamp, recentlyCompletedIOs, flushable) -> previousStamp;\n \n     /**\n      * @return {@code true} if IO is currently limited\n",
            "diff_size": 8
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2601/IOLimiter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/2601/IOLimiter.java\nindex b5ef894bde0..a9f23908a00 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2601/IOLimiter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/2601/IOLimiter.java\n@@ -116,4 +116,4 @@ public interface IOLimiter\n     {\n         return false;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}