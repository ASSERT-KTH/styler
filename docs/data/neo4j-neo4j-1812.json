{
    "project_name": "neo4j-neo4j",
    "error_id": "1812",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "50",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "75",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "121",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "65",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "130",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1812/DelegatingTokenHolder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1812/DelegatingTokenHolder.java\nindex 0c6e3062f35..172125c68fa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1812/DelegatingTokenHolder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1812/DelegatingTokenHolder.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.token;\n \n import org.eclipse.collections.api.set.primitive.IntSet;\n@@ -46,9 +47,9 @@ public class DelegatingTokenHolder extends AbstractTokenHolderBase\n {\n     private final TokenCreator tokenCreator;\n \n-    public DelegatingTokenHolder( TokenCreator tokenCreator, String tokenType )\n+    public DelegatingTokenHolder(TokenCreator tokenCreator, String tokenType)\n     {\n-        super( new TokenRegistry( tokenType ) );\n+        super(new TokenRegistry(tokenType));\n         this.tokenCreator = tokenCreator;\n     }\n \n@@ -59,77 +60,76 @@ public class DelegatingTokenHolder extends AbstractTokenHolderBase\n      * @return newly created token id\n      */\n     @Override\n-    protected synchronized int createToken( String name, boolean internal ) throws KernelException\n+    protected synchronized int createToken(String name, boolean internal) throws KernelException\n     {\n-        Integer id = internal ? tokenRegistry.getIdInternal( name ) : tokenRegistry.getId( name );\n-        if ( id != null )\n+        Integer id = internal ? tokenRegistry.getIdInternal(name) : tokenRegistry.getId(name);\n+        if (id != null)\n         {\n             return id;\n         }\n \n-        id = tokenCreator.createToken( name, internal );\n+        id = tokenCreator.createToken(name, internal);\n         try\n         {\n-            tokenRegistry.put( new NamedToken( name, id, internal ) );\n-        }\n-        catch ( NonUniqueTokenException e )\n+            tokenRegistry.put(new NamedToken(name, id, internal));\n+        } catch (NonUniqueTokenException e)\n         {\n-            throw new UnspecifiedKernelException( Status.General.UnknownError, e, \"Newly created token should be unique.\" );\n+            throw new UnspecifiedKernelException(Status.General.UnknownError, e, \"Newly created token should be unique.\");\n         }\n         return id;\n     }\n \n     @Override\n-    public void getOrCreateIds( String[] names, int[] ids ) throws KernelException\n+    public void getOrCreateIds(String[] names, int[] ids) throws KernelException\n     {\n-        innerBatchGetOrCreate( names, ids, false );\n+        innerBatchGetOrCreate(names, ids, false);\n     }\n \n     @Override\n-    public void getOrCreateInternalIds( String[] names, int[] ids ) throws KernelException\n+    public void getOrCreateInternalIds(String[] names, int[] ids) throws KernelException\n     {\n-        innerBatchGetOrCreate( names, ids, true );\n+        innerBatchGetOrCreate(names, ids, true);\n     }\n \n-    private void innerBatchGetOrCreate( String[] names, int[] ids, boolean internal ) throws KernelException\n+    private void innerBatchGetOrCreate(String[] names, int[] ids, boolean internal) throws KernelException\n     {\n-        assertSameArrayLength( names, ids );\n+        assertSameArrayLength(names, ids);\n         // Assume all tokens exist and try to resolve them. Break out on the first missing token.\n-        boolean hasUnresolvedTokens = resolveIds( names, ids, internal, ALWAYS_TRUE_INT );\n+        boolean hasUnresolvedTokens = resolveIds(names, ids, internal, ALWAYS_TRUE_INT);\n \n-        if ( hasUnresolvedTokens )\n+        if (hasUnresolvedTokens)\n         {\n-            createMissingTokens( names, ids, internal );\n+            createMissingTokens(names, ids, internal);\n         }\n     }\n \n-    private static void assertSameArrayLength( String[] names, int[] ids )\n+    private static void assertSameArrayLength(String[] names, int[] ids)\n     {\n-        if ( names.length != ids.length )\n+        if (names.length != ids.length)\n         {\n-            throw new IllegalArgumentException( \"Name and id arrays must have the same length.\" );\n+            throw new IllegalArgumentException(\"Name and id arrays must have the same length.\");\n         }\n     }\n \n-    private synchronized void createMissingTokens( String[] names, int[] ids, boolean internal ) throws KernelException\n+    private synchronized void createMissingTokens(String[] names, int[] ids, boolean internal) throws KernelException\n     {\n         // We redo the resolving under the lock, to make sure that these ids are really missing, and won't be\n         // created concurrently with us.\n         MutableIntSet unresolvedIndexes = new IntHashSet();\n-        resolveIds( names, ids, internal, i -> !unresolvedIndexes.add( i ) );\n-        if ( !unresolvedIndexes.isEmpty() )\n+        resolveIds(names, ids, internal, i -> !unresolvedIndexes.add(i));\n+        if (!unresolvedIndexes.isEmpty())\n         {\n             // We still have unresolved ids to create.\n-            ObjectIntHashMap<String> createdTokens = createUnresolvedTokens( unresolvedIndexes, names, ids, internal );\n-            List<NamedToken> createdTokensList = new ArrayList<>( createdTokens.size() );\n-            createdTokens.forEachKeyValue( ( name, index ) ->\n-                    createdTokensList.add( new NamedToken( name, ids[index], internal ) ) );\n+            ObjectIntHashMap<String> createdTokens = createUnresolvedTokens(unresolvedIndexes, names, ids, internal);\n+            List<NamedToken> createdTokensList = new ArrayList<>(createdTokens.size());\n+            createdTokens.forEachKeyValue((name, index) ->\n+              createdTokensList.add(new NamedToken(name, ids[index], internal)));\n \n-            tokenRegistry.putAll( createdTokensList );\n+            tokenRegistry.putAll(createdTokensList);\n         }\n     }\n \n-    private ObjectIntHashMap<String> createUnresolvedTokens( IntSet unresolvedIndexes, String[] names, int[] ids, boolean internal ) throws KernelException\n+    private ObjectIntHashMap<String> createUnresolvedTokens(IntSet unresolvedIndexes, String[] names, int[] ids, boolean internal) throws KernelException\n     {\n         // First, we need to filter out all of the tokens that are already resolved, so we only create tokens for\n         // indexes that are in the unresolvedIndexes set.\n@@ -148,17 +148,17 @@ public class DelegatingTokenHolder extends AbstractTokenHolderBase\n         IntIntHashMap remappingIndexes = new IntIntHashMap();\n         IntPredicate tokenCreateFilter = index ->\n         {\n-            boolean needsCreate = unresolvedIndexes.contains( index );\n-            if ( needsCreate )\n+            boolean needsCreate = unresolvedIndexes.contains(index);\n+            if (needsCreate)\n             {\n                 // The name at this index is unresolved.\n                 String name = names[index];\n-                int creatingIndex = createdTokens.getIfAbsentPut( name, index );\n-                if ( creatingIndex != index )\n+                int creatingIndex = createdTokens.getIfAbsentPut(name, index);\n+                if (creatingIndex != index)\n                 {\n                     // This entry has a duplicate name, so we need to remap this entry instead of creating a token\n                     // for it.\n-                    remappingIndexes.put( index, creatingIndex );\n+                    remappingIndexes.put(index, creatingIndex);\n                     needsCreate = false;\n                 }\n             }\n@@ -166,12 +166,12 @@ public class DelegatingTokenHolder extends AbstractTokenHolderBase\n         };\n \n         // Create tokens for all the indexes that we don't filter out.\n-        tokenCreator.createTokens( names, ids, internal, tokenCreateFilter );\n+        tokenCreator.createTokens(names, ids, internal, tokenCreateFilter);\n \n         // Remap duplicate tokens to the token id we created for the first instance of any duplicate token name.\n-        if ( remappingIndexes.notEmpty() )\n+        if (remappingIndexes.notEmpty())\n         {\n-            remappingIndexes.forEachKeyValue( ( index, creatingIndex ) -> ids[index] = ids[creatingIndex] );\n+            remappingIndexes.forEachKeyValue((index, creatingIndex) -> ids[index] = ids[creatingIndex]);\n         }\n \n         return createdTokens;\n",
            "diff_size": 40
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}