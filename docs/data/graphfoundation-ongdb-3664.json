{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3664",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "77",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "120",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "120",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "72",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "83",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "15",
                    "severity": "error",
                    "message": "'}' at column 15 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "314",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "115",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "356",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "356",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "358",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "358",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "365",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "365",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "369",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "369",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "371",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "371",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "373",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "373",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "383",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "383",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "384",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "384",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "384",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "398",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "398",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "400",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "400",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "414",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "414",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "416",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "416",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "432",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "432",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "434",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "434",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "441",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "441",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "444",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "444",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "459",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "459",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "461",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "461",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "463",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "463",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "468",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "468",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "468",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "470",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "470",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "477",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "477",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "479",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "479",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "481",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "481",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "498",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "498",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "500",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "500",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "514",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "514",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "516",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "516",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "530",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "530",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "532",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "532",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "539",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "539",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "565",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "566",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "568",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "568",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "569",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "569",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "574",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "578",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "578",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "583",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "583",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "590",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "590",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "595",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "595",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "595",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "597",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "597",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "610",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "610",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "612",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "612",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "614",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "614",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "618",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "618",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "618",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "620",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "620",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "624",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "624",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "632",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "632",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "634",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "634",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "636",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "636",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "662",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "662",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "664",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "664",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "670",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "670",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "672",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "673",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "676",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "676",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "679",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "679",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "681",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "682",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "689",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "689",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "691",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "691",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "697",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "697",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "699",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "700",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "703",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "703",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "707",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "707",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "727",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "727",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "731",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "731",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "738",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "738",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "743",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "743",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "747",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "747",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "749",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "749",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "755",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "755",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "755",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "757",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "757",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "797",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "797",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "817",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "817",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "819",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "819",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "826",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "826",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "828",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "828",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "832",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "832",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "834",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "834",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "836",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "836",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "842",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "842",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "842",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "844",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "844",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "854",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "854",
                    "column": "15",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "863",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "863",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "867",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "867",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "874",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "874",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "891",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "898",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "898",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "903",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "903",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3664/MetaDataStore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3664/MetaDataStore.java\nindex 6136b419e85..09e12459930 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3664/MetaDataStore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3664/MetaDataStore.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store;\n \n import java.io.File;\n@@ -58,854 +59,848 @@ import static org.neo4j.kernel.impl.store.format.standard.MetaDataRecordFormat.R\n import static org.neo4j.kernel.impl.store.record.RecordLoad.FORCE;\n import static org.neo4j.kernel.impl.store.record.RecordLoad.NORMAL;\n \n-public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHeader>\n-        implements TransactionIdStore, LogVersionRepository\n+public class MetaDataStore extends CommonAbstractStore<MetaDataRecord, NoStoreHeader>\n+    implements TransactionIdStore, LogVersionRepository\n {\n-    public static final String TYPE_DESCRIPTOR = \"NeoStore\";\n-    // This value means the field has not been refreshed from the store. Normally, this should happen only once\n-    public static final long FIELD_NOT_INITIALIZED = Long.MIN_VALUE;\n-    /*\n-     *  9 longs in header (long + in use), time | random | version | txid | store version | graph next prop | latest\n-     *  constraint tx | upgrade time | upgrade id\n-     */\n-    public static final String DEFAULT_NAME = \"neostore\";\n-    // Positions of meta-data records\n-\n-    public enum Position\n-    {\n-        TIME( 0, \"Creation time\" ),\n-        RANDOM_NUMBER( 1, \"Random number for store id\" ),\n-        LOG_VERSION( 2, \"Current log version\" ),\n-        LAST_TRANSACTION_ID( 3, \"Last committed transaction\" ),\n-        STORE_VERSION( 4, \"Store format version\" ),\n-        FIRST_GRAPH_PROPERTY( 5, \"First property record containing graph properties\" ),\n-        LAST_CONSTRAINT_TRANSACTION( 6, \"Last committed transaction containing constraint changes\" ),\n-        UPGRADE_TRANSACTION_ID( 7, \"Transaction id most recent upgrade was performed at\" ),\n-        UPGRADE_TIME( 8, \"Time of last upgrade\" ),\n-        LAST_TRANSACTION_CHECKSUM( 9, \"Checksum of last committed transaction\" ),\n-        UPGRADE_TRANSACTION_CHECKSUM( 10, \"Checksum of transaction id the most recent upgrade was performed at\" ),\n-        LAST_CLOSED_TRANSACTION_LOG_VERSION( 11, \"Log version where the last transaction commit entry has been written into\" ),\n-        LAST_CLOSED_TRANSACTION_LOG_BYTE_OFFSET( 12, \"Byte offset in the log file where the last transaction commit entry \" +\n-                                                     \"has been written into\" ),\n-        LAST_TRANSACTION_COMMIT_TIMESTAMP( 13, \"Commit time timestamp for last committed transaction\" ),\n-        UPGRADE_TRANSACTION_COMMIT_TIMESTAMP( 14, \"Commit timestamp of transaction the most recent upgrade was performed at\" );\n-\n-        private final int id;\n-        private final String description;\n-\n-        Position( int id, String description )\n-        {\n-            this.id = id;\n-            this.description = description;\n-        }\n-\n-        public int id()\n-        {\n-            return id;\n-        }\n-\n-        public String description()\n-        {\n-            return description;\n-        }\n-    }\n-\n-    // Fields the neostore keeps cached and must be initialized on startup\n-    private volatile long creationTimeField = FIELD_NOT_INITIALIZED;\n-    private volatile long randomNumberField = FIELD_NOT_INITIALIZED;\n-    private volatile long versionField = FIELD_NOT_INITIALIZED;\n-    // This is an atomic long since we, when incrementing last tx id, won't set the record in the page,\n-    // we do that when flushing, which performs better and fine from a recovery POV.\n-    private final AtomicLong lastCommittingTxField = new AtomicLong( FIELD_NOT_INITIALIZED );\n-    private volatile long storeVersionField = FIELD_NOT_INITIALIZED;\n-    private volatile long graphNextPropField = FIELD_NOT_INITIALIZED;\n-    private volatile long latestConstraintIntroducingTxField = FIELD_NOT_INITIALIZED;\n-    private volatile long upgradeTxIdField = FIELD_NOT_INITIALIZED;\n-    private volatile long upgradeTxChecksumField = FIELD_NOT_INITIALIZED;\n-    private volatile long upgradeTimeField = FIELD_NOT_INITIALIZED;\n-    private volatile long upgradeCommitTimestampField = FIELD_NOT_INITIALIZED;\n-\n-    private volatile TransactionId upgradeTransaction = new TransactionId( FIELD_NOT_INITIALIZED,\n-            FIELD_NOT_INITIALIZED, FIELD_NOT_INITIALIZED );\n-\n-    // This is not a field in the store, but something keeping track of which is the currently highest\n-    // committed transaction id, together with its checksum.\n-    private final HighestTransactionId highestCommittedTransaction =\n-            new HighestTransactionId( FIELD_NOT_INITIALIZED, FIELD_NOT_INITIALIZED, FIELD_NOT_INITIALIZED );\n-\n-    // This is not a field in the store, but something keeping track of which of the committed\n-    // transactions have been closed. Useful in rotation and shutdown.\n-    private final OutOfOrderSequence lastClosedTx = new ArrayQueueOutOfOrderSequence( -1, 200, new long[2] );\n-\n-    // We use these objects and their monitors as \"entity\" locks on the records, because page write locks are not\n-    // exclusive. Therefor, these locks are only used when *writing* records, not when reading them.\n-    private final Object upgradeTimeLock = new Object();\n-    private final Object creationTimeLock  = new Object();\n-    private final Object randomNumberLock = new Object();\n-    private final Object upgradeTransactionLock = new Object();\n-    private final Object logVersionLock = new Object();\n-    private final Object storeVersionLock = new Object();\n-    private final Object graphNextPropLock = new Object();\n-    private final Object lastConstraintIntroducingTxLock = new Object();\n-    private final Object transactionCommittedLock = new Object();\n-    private final Object transactionClosedLock = new Object();\n-\n-    private final CappedLogger transactionCloseWaitLogger;\n-\n-    MetaDataStore( File fileName, Config conf,\n-            IdGeneratorFactory idGeneratorFactory,\n-            PageCache pageCache, LogProvider logProvider, RecordFormat<MetaDataRecord> recordFormat,\n-            String storeVersion,\n-            OpenOption... openOptions )\n-    {\n-        super( fileName, conf, IdType.NEOSTORE_BLOCK, idGeneratorFactory, pageCache, logProvider,\n-                TYPE_DESCRIPTOR, recordFormat, NoStoreHeaderFormat.NO_STORE_HEADER_FORMAT, storeVersion, openOptions );\n-        this.transactionCloseWaitLogger = new CappedLogger( logProvider.getLog( MetaDataStore.class ) );\n-        transactionCloseWaitLogger.setTimeLimit( 30, SECONDS, Clocks.systemClock() );\n-    }\n-\n-    @Override\n-    protected void initialiseNewStoreFile( PagedFile file ) throws IOException\n-    {\n-        super.initialiseNewStoreFile( file );\n-\n-        long storeVersionAsLong = MetaDataStore.versionStringToLong( storeVersion );\n-        StoreId storeId = new StoreId( storeVersionAsLong );\n-\n-        storeFile = file;\n-        setCreationTime( storeId.getCreationTime() );\n-        setRandomNumber( storeId.getRandomId() );\n-        // If metaDataStore.creationTime == metaDataStore.upgradeTime && metaDataStore.upgradeTransactionId == BASE_TX_ID\n-        // then store has never been upgraded\n-        setUpgradeTime( storeId.getCreationTime() );\n-        setUpgradeTransaction( BASE_TX_ID, BASE_TX_CHECKSUM, BASE_TX_COMMIT_TIMESTAMP );\n-        setCurrentLogVersion( 0 );\n-        setLastCommittedAndClosedTransactionId(\n-                BASE_TX_ID, BASE_TX_CHECKSUM, BASE_TX_COMMIT_TIMESTAMP, BASE_TX_LOG_BYTE_OFFSET, BASE_TX_LOG_VERSION );\n-        setStoreVersion( storeVersionAsLong );\n-        setGraphNextProp( -1 );\n-        setLatestConstraintIntroducingTx( 0 );\n-\n-        flush();\n-        storeFile = null;\n-    }\n-\n-    @Override\n-    protected void checkAndLoadStorage( boolean createIfNotExists )\n-    {\n-        super.checkAndLoadStorage( createIfNotExists );\n-        initHighId();\n-    }\n-\n-    // Only for initialization and recovery, so we don't need to lock the records\n-\n-    @Override\n-    public void setLastCommittedAndClosedTransactionId(\n-            long transactionId, long checksum, long commitTimestamp, long byteOffset, long logVersion )\n-    {\n-        assertNotClosed();\n-        setRecord( Position.LAST_TRANSACTION_ID, transactionId );\n-        setRecord( Position.LAST_TRANSACTION_CHECKSUM, checksum );\n-        setRecord( Position.LAST_CLOSED_TRANSACTION_LOG_VERSION, logVersion );\n-        setRecord( Position.LAST_CLOSED_TRANSACTION_LOG_BYTE_OFFSET, byteOffset );\n-        setRecord( Position.LAST_TRANSACTION_COMMIT_TIMESTAMP, commitTimestamp );\n-        checkInitialized( lastCommittingTxField.get() );\n-        lastCommittingTxField.set( transactionId );\n-        lastClosedTx.set( transactionId, new long[]{logVersion, byteOffset} );\n-        highestCommittedTransaction.set( transactionId, checksum, commitTimestamp );\n-    }\n-    /**\n-     * Writes a record in a neostore file.\n-     * This method only works for neostore files of the current version.\n-     *\n-     * @param pageCache {@link PageCache} the {@code neostore} file lives in.\n-     * @param neoStore {@link File} pointing to the neostore.\n-     * @param position record {@link Position}.\n-     * @param value value to write in that record.\n-     * @return the previous value before writing.\n-     * @throws IOException if any I/O related error occurs.\n-     */\n-    public static long setRecord( PageCache pageCache, File neoStore, Position position, long value ) throws IOException\n-    {\n-        long previousValue = FIELD_NOT_INITIALIZED;\n-        int pageSize = getPageSize( pageCache );\n-        try ( PagedFile pagedFile = pageCache.map( neoStore, pageSize ) )\n-        {\n-            int offset = offset( position );\n-            try ( PageCursor cursor = pagedFile.io( 0, PagedFile.PF_SHARED_WRITE_LOCK ) )\n-            {\n-                if ( cursor.next() )\n-                {\n-                    // We're overwriting a record, get the previous value\n-                    cursor.setOffset( offset );\n-                    byte inUse = cursor.getByte();\n-                    long record = cursor.getLong();\n-\n-                    if ( inUse == Record.IN_USE.byteValue() )\n-                    {\n-                        previousValue = record;\n-                    }\n-\n-                    // Write the value\n-                    cursor.setOffset( offset );\n-                    cursor.putByte( Record.IN_USE.byteValue() );\n-                    cursor.putLong( value );\n-                    if ( cursor.checkAndClearBoundsFlag() )\n-                    {\n-                        MetaDataRecord neoStoreRecord = new MetaDataRecord();\n-                        neoStoreRecord.setId( position.id );\n-                        throw new UnderlyingStorageException( buildOutOfBoundsExceptionMessage(\n-                                neoStoreRecord, 0, offset, RECORD_SIZE, pageSize, neoStore.getAbsolutePath() ) );\n-                    }\n-                }\n-            }\n-        }\n-        return previousValue;\n-    }\n-\n-    private void initHighId()\n-    {\n-        Position[] values = Position.values();\n-        long highestPossibleId = values[values.length - 1].id;\n-        setHighestPossibleIdInUse( highestPossibleId );\n-    }\n-\n-    private static int offset( Position position )\n-    {\n-        return RECORD_SIZE * position.id;\n-    }\n-\n-    /**\n-     * Reads a record from a neostore file.\n-     *\n-     * @param pageCache {@link PageCache} the {@code neostore} file lives in.\n-     * @param neoStore {@link File} pointing to the neostore.\n-     * @param position record {@link Position}.\n-     * @return the read record value specified by {@link Position}.\n-     */\n-    public static long getRecord( PageCache pageCache, File neoStore, Position position ) throws IOException\n-    {\n-        MetaDataRecordFormat format = new MetaDataRecordFormat();\n-        int pageSize = getPageSize( pageCache );\n-        long value = FIELD_NOT_PRESENT;\n-        try ( PagedFile pagedFile = pageCache.map( neoStore, pageSize ) )\n-        {\n-            if ( pagedFile.getLastPageId() >= 0 )\n+  public static final String TYPE_DESCRIPTOR = \"NeoStore\";\n+  // This value means the field has not been refreshed from the store. Normally, this should happen only once\n+  public static final long FIELD_NOT_INITIALIZED = Long.MIN_VALUE;\n+  /*\n+   *  9 longs in header (long + in use), time | random | version | txid | store version | graph next prop | latest\n+   *  constraint tx | upgrade time | upgrade id\n+   */\n+  public static final String DEFAULT_NAME = \"neostore\";\n+  // Positions of meta-data records\n+\n+  public enum Position\n+  {\n+    TIME(0, \"Creation time\"),\n+    RANDOM_NUMBER(1, \"Random number for store id\"),\n+    LOG_VERSION(2, \"Current log version\"),\n+    LAST_TRANSACTION_ID(3, \"Last committed transaction\"),\n+    STORE_VERSION(4, \"Store format version\"),\n+    FIRST_GRAPH_PROPERTY(5, \"First property record containing graph properties\"),\n+    LAST_CONSTRAINT_TRANSACTION(6, \"Last committed transaction containing constraint changes\"),\n+    UPGRADE_TRANSACTION_ID(7, \"Transaction id most recent upgrade was performed at\"),\n+    UPGRADE_TIME(8, \"Time of last upgrade\"),\n+    LAST_TRANSACTION_CHECKSUM(9, \"Checksum of last committed transaction\"),\n+    UPGRADE_TRANSACTION_CHECKSUM(10, \"Checksum of transaction id the most recent upgrade was performed at\"),\n+    LAST_CLOSED_TRANSACTION_LOG_VERSION(11, \"Log version where the last transaction commit entry has been written into\"),\n+    LAST_CLOSED_TRANSACTION_LOG_BYTE_OFFSET(12, \"Byte offset in the log file where the last transaction commit entry \" +\n+        \"has been written into\"),\n+    LAST_TRANSACTION_COMMIT_TIMESTAMP(13, \"Commit time timestamp for last committed transaction\"),\n+    UPGRADE_TRANSACTION_COMMIT_TIMESTAMP(14, \"Commit timestamp of transaction the most recent upgrade was performed at\");\n+\n+    private final int id;\n+    private final String description;\n+\n+    Position(int id, String description)\n+    {\n+      this.id = id;\n+      this.description = description;\n+    }\n+\n+    public int id()\n+    {\n+      return id;\n+    }\n+\n+    public String description()\n+    {\n+      return description;\n+    }\n+  }\n+\n+  // Fields the neostore keeps cached and must be initialized on startup\n+  private volatile long creationTimeField = FIELD_NOT_INITIALIZED;\n+  private volatile long randomNumberField = FIELD_NOT_INITIALIZED;\n+  private volatile long versionField = FIELD_NOT_INITIALIZED;\n+  // This is an atomic long since we, when incrementing last tx id, won't set the record in the page,\n+  // we do that when flushing, which performs better and fine from a recovery POV.\n+  private final AtomicLong lastCommittingTxField = new AtomicLong(FIELD_NOT_INITIALIZED);\n+  private volatile long storeVersionField = FIELD_NOT_INITIALIZED;\n+  private volatile long graphNextPropField = FIELD_NOT_INITIALIZED;\n+  private volatile long latestConstraintIntroducingTxField = FIELD_NOT_INITIALIZED;\n+  private volatile long upgradeTxIdField = FIELD_NOT_INITIALIZED;\n+  private volatile long upgradeTxChecksumField = FIELD_NOT_INITIALIZED;\n+  private volatile long upgradeTimeField = FIELD_NOT_INITIALIZED;\n+  private volatile long upgradeCommitTimestampField = FIELD_NOT_INITIALIZED;\n+\n+  private volatile TransactionId upgradeTransaction = new TransactionId(FIELD_NOT_INITIALIZED,\n+      FIELD_NOT_INITIALIZED, FIELD_NOT_INITIALIZED);\n+\n+  // This is not a field in the store, but something keeping track of which is the currently highest\n+  // committed transaction id, together with its checksum.\n+  private final HighestTransactionId highestCommittedTransaction =\n+      new HighestTransactionId(FIELD_NOT_INITIALIZED, FIELD_NOT_INITIALIZED, FIELD_NOT_INITIALIZED);\n+\n+  // This is not a field in the store, but something keeping track of which of the committed\n+  // transactions have been closed. Useful in rotation and shutdown.\n+  private final OutOfOrderSequence lastClosedTx = new ArrayQueueOutOfOrderSequence(-1, 200, new long[2]);\n+\n+  // We use these objects and their monitors as \"entity\" locks on the records, because page write locks are not\n+  // exclusive. Therefor, these locks are only used when *writing* records, not when reading them.\n+  private final Object upgradeTimeLock = new Object();\n+  private final Object creationTimeLock = new Object();\n+  private final Object randomNumberLock = new Object();\n+  private final Object upgradeTransactionLock = new Object();\n+  private final Object logVersionLock = new Object();\n+  private final Object storeVersionLock = new Object();\n+  private final Object graphNextPropLock = new Object();\n+  private final Object lastConstraintIntroducingTxLock = new Object();\n+  private final Object transactionCommittedLock = new Object();\n+  private final Object transactionClosedLock = new Object();\n+\n+  private final CappedLogger transactionCloseWaitLogger;\n+\n+  MetaDataStore(File fileName, Config conf,\n+                IdGeneratorFactory idGeneratorFactory,\n+                PageCache pageCache, LogProvider logProvider, RecordFormat<MetaDataRecord> recordFormat,\n+                String storeVersion,\n+                OpenOption... openOptions)\n+  {\n+    super(fileName, conf, IdType.NEOSTORE_BLOCK, idGeneratorFactory, pageCache, logProvider,\n+        TYPE_DESCRIPTOR, recordFormat, NoStoreHeaderFormat.NO_STORE_HEADER_FORMAT, storeVersion, openOptions);\n+    this.transactionCloseWaitLogger = new CappedLogger(logProvider.getLog(MetaDataStore.class));\n+    transactionCloseWaitLogger.setTimeLimit(30, SECONDS, Clocks.systemClock());\n+  }\n+\n+  @Override\n+  protected void initialiseNewStoreFile(PagedFile file) throws IOException\n+  {\n+    super.initialiseNewStoreFile(file);\n+\n+    long storeVersionAsLong = MetaDataStore.versionStringToLong(storeVersion);\n+    StoreId storeId = new StoreId(storeVersionAsLong);\n+\n+    storeFile = file;\n+    setCreationTime(storeId.getCreationTime());\n+    setRandomNumber(storeId.getRandomId());\n+    // If metaDataStore.creationTime == metaDataStore.upgradeTime && metaDataStore.upgradeTransactionId == BASE_TX_ID\n+    // then store has never been upgraded\n+    setUpgradeTime(storeId.getCreationTime());\n+    setUpgradeTransaction(BASE_TX_ID, BASE_TX_CHECKSUM, BASE_TX_COMMIT_TIMESTAMP);\n+    setCurrentLogVersion(0);\n+    setLastCommittedAndClosedTransactionId(\n+        BASE_TX_ID, BASE_TX_CHECKSUM, BASE_TX_COMMIT_TIMESTAMP, BASE_TX_LOG_BYTE_OFFSET, BASE_TX_LOG_VERSION);\n+    setStoreVersion(storeVersionAsLong);\n+    setGraphNextProp(-1);\n+    setLatestConstraintIntroducingTx(0);\n+\n+    flush();\n+    storeFile = null;\n+  }\n+\n+  @Override\n+  protected void checkAndLoadStorage(boolean createIfNotExists)\n+  {\n+    super.checkAndLoadStorage(createIfNotExists);\n+    initHighId();\n+  }\n+\n+  // Only for initialization and recovery, so we don't need to lock the records\n+\n+  @Override\n+  public void setLastCommittedAndClosedTransactionId(\n+      long transactionId, long checksum, long commitTimestamp, long byteOffset, long logVersion)\n+  {\n+    assertNotClosed();\n+    setRecord(Position.LAST_TRANSACTION_ID, transactionId);\n+    setRecord(Position.LAST_TRANSACTION_CHECKSUM, checksum);\n+    setRecord(Position.LAST_CLOSED_TRANSACTION_LOG_VERSION, logVersion);\n+    setRecord(Position.LAST_CLOSED_TRANSACTION_LOG_BYTE_OFFSET, byteOffset);\n+    setRecord(Position.LAST_TRANSACTION_COMMIT_TIMESTAMP, commitTimestamp);\n+    checkInitialized(lastCommittingTxField.get());\n+    lastCommittingTxField.set(transactionId);\n+    lastClosedTx.set(transactionId, new long[] {logVersion, byteOffset});\n+    highestCommittedTransaction.set(transactionId, checksum, commitTimestamp);\n+  }\n+\n+  /**\n+   * Writes a record in a neostore file.\n+   * This method only works for neostore files of the current version.\n+   *\n+   * @param pageCache {@link PageCache} the {@code neostore} file lives in.\n+   * @param neoStore  {@link File} pointing to the neostore.\n+   * @param position  record {@link Position}.\n+   * @param value     value to write in that record.\n+   * @return the previous value before writing.\n+   * @throws IOException if any I/O related error occurs.\n+   */\n+  public static long setRecord(PageCache pageCache, File neoStore, Position position, long value) throws IOException\n+  {\n+    long previousValue = FIELD_NOT_INITIALIZED;\n+    int pageSize = getPageSize(pageCache);\n+    try (PagedFile pagedFile = pageCache.map(neoStore, pageSize))\n+    {\n+      int offset = offset(position);\n+      try (PageCursor cursor = pagedFile.io(0, PagedFile.PF_SHARED_WRITE_LOCK))\n+      {\n+        if (cursor.next())\n+        {\n+          // We're overwriting a record, get the previous value\n+          cursor.setOffset(offset);\n+          byte inUse = cursor.getByte();\n+          long record = cursor.getLong();\n+\n+          if (inUse == Record.IN_USE.byteValue())\n+          {\n+            previousValue = record;\n+          }\n+\n+          // Write the value\n+          cursor.setOffset(offset);\n+          cursor.putByte(Record.IN_USE.byteValue());\n+          cursor.putLong(value);\n+          if (cursor.checkAndClearBoundsFlag())\n+          {\n+            MetaDataRecord neoStoreRecord = new MetaDataRecord();\n+            neoStoreRecord.setId(position.id);\n+            throw new UnderlyingStorageException(buildOutOfBoundsExceptionMessage(\n+                neoStoreRecord, 0, offset, RECORD_SIZE, pageSize, neoStore.getAbsolutePath()));\n+          }\n+        }\n+      }\n+    }\n+    return previousValue;\n+  }\n+\n+  private void initHighId()\n+  {\n+    Position[] values = Position.values();\n+    long highestPossibleId = values[values.length - 1].id;\n+    setHighestPossibleIdInUse(highestPossibleId);\n+  }\n+\n+  private static int offset(Position position)\n+  {\n+    return RECORD_SIZE * position.id;\n+  }\n+\n+  /**\n+   * Reads a record from a neostore file.\n+   *\n+   * @param pageCache {@link PageCache} the {@code neostore} file lives in.\n+   * @param neoStore  {@link File} pointing to the neostore.\n+   * @param position  record {@link Position}.\n+   * @return the read record value specified by {@link Position}.\n+   */\n+  public static long getRecord(PageCache pageCache, File neoStore, Position position) throws IOException\n+  {\n+    MetaDataRecordFormat format = new MetaDataRecordFormat();\n+    int pageSize = getPageSize(pageCache);\n+    long value = FIELD_NOT_PRESENT;\n+    try (PagedFile pagedFile = pageCache.map(neoStore, pageSize))\n+    {\n+      if (pagedFile.getLastPageId() >= 0)\n+      {\n+        try (PageCursor cursor = pagedFile.io(0, PF_SHARED_READ_LOCK))\n+        {\n+          if (cursor.next())\n+          {\n+            MetaDataRecord record = new MetaDataRecord();\n+            record.setId(position.id);\n+            do\n             {\n-                try ( PageCursor cursor = pagedFile.io( 0, PF_SHARED_READ_LOCK ) )\n-                {\n-                    if ( cursor.next() )\n-                    {\n-                        MetaDataRecord record = new MetaDataRecord();\n-                        record.setId( position.id );\n-                        do\n-                        {\n-                            format.read( record, cursor, RecordLoad.CHECK, RECORD_SIZE );\n-                            if ( record.inUse() )\n-                            {\n-                                value = record.getValue();\n-                            }\n-                            else\n-                            {\n-                                value = FIELD_NOT_PRESENT;\n-                            }\n-                        }\n-                        while ( cursor.shouldRetry() );\n-                        if ( cursor.checkAndClearBoundsFlag() )\n-                        {\n-                            int offset = offset( position );\n-                            throw new UnderlyingStorageException( buildOutOfBoundsExceptionMessage(\n-                                    record, 0, offset, RECORD_SIZE, pageSize, neoStore.getAbsolutePath() ) );\n-                        }\n-                    }\n-                }\n+              format.read(record, cursor, RecordLoad.CHECK, RECORD_SIZE);\n+              if (record.inUse())\n+              {\n+                value = record.getValue();\n+              } else\n+              {\n+                value = FIELD_NOT_PRESENT;\n+              }\n             }\n-        }\n-        return value;\n-    }\n-\n-    static int getPageSize( PageCache pageCache )\n-    {\n-        return pageCache.pageSize() - pageCache.pageSize() % RECORD_SIZE;\n-    }\n-\n-    public StoreId getStoreId()\n-    {\n-        return new StoreId( getCreationTime(), getRandomNumber(), getStoreVersion(), getUpgradeTime(), upgradeTxIdField );\n-    }\n-\n-    public static StoreId getStoreId( PageCache pageCache, File neoStore ) throws IOException\n-    {\n-        return new StoreId(\n-                getRecord( pageCache, neoStore, Position.TIME ),\n-                getRecord( pageCache, neoStore, Position.RANDOM_NUMBER ),\n-                getRecord( pageCache, neoStore, Position.STORE_VERSION ),\n-                getRecord( pageCache, neoStore, Position.UPGRADE_TIME ),\n-                getRecord( pageCache, neoStore, Position.UPGRADE_TRANSACTION_ID )\n-        );\n-    }\n-\n-    public long getUpgradeTime()\n-    {\n-        assertNotClosed();\n-        checkInitialized( upgradeTimeField );\n-        return upgradeTimeField;\n-    }\n-\n-    public void setUpgradeTime( long time )\n-    {\n-        synchronized ( upgradeTimeLock )\n-        {\n-            setRecord( Position.UPGRADE_TIME, time );\n-            upgradeTimeField = time;\n-        }\n-    }\n-\n-    public void setUpgradeTransaction( long id, long checksum, long timestamp )\n-    {\n-        long pageId = pageIdForRecord( Position.UPGRADE_TRANSACTION_ID.id );\n-        assert pageId == pageIdForRecord( Position.UPGRADE_TRANSACTION_CHECKSUM.id );\n-        synchronized ( upgradeTransactionLock )\n-        {\n-            try ( PageCursor cursor = storeFile.io( pageId, PF_SHARED_WRITE_LOCK ) )\n-            {\n-                if ( !cursor.next() )\n-                {\n-                    throw new UnderlyingStorageException( \"Could not access MetaDataStore page \" + pageId );\n-                }\n-                setRecord( cursor, Position.UPGRADE_TRANSACTION_ID, id );\n-                setRecord( cursor, Position.UPGRADE_TRANSACTION_CHECKSUM, checksum );\n-                setRecord( cursor, Position.UPGRADE_TRANSACTION_COMMIT_TIMESTAMP, timestamp );\n-                upgradeTxIdField = id;\n-                upgradeTxChecksumField = checksum;\n-                upgradeCommitTimestampField = timestamp;\n-                upgradeTransaction = new TransactionId( id, checksum, timestamp );\n-            }\n-            catch ( IOException e )\n-            {\n-                throw new UnderlyingStorageException( e );\n-            }\n-        }\n-    }\n-\n-    public long getCreationTime()\n-    {\n-        assertNotClosed();\n-        checkInitialized( creationTimeField );\n-        return creationTimeField;\n-    }\n-\n-    public void setCreationTime( long time )\n-    {\n-        synchronized ( creationTimeLock )\n-        {\n-            setRecord( Position.TIME, time );\n-            creationTimeField = time;\n-        }\n-    }\n-\n-    public long getRandomNumber()\n-    {\n-        assertNotClosed();\n-        checkInitialized( randomNumberField );\n-        return randomNumberField;\n-    }\n-\n-    public void setRandomNumber( long nr )\n-    {\n-        synchronized ( randomNumberLock )\n-        {\n-            setRecord( Position.RANDOM_NUMBER, nr );\n-            randomNumberField = nr;\n-        }\n-    }\n-\n-    @Override\n-    public long getCurrentLogVersion()\n-    {\n-        assertNotClosed();\n-        checkInitialized( versionField );\n-        return versionField;\n-    }\n-\n-    @Override\n-    public void setCurrentLogVersion( long version )\n-    {\n-        synchronized ( logVersionLock )\n-        {\n-            setRecord( Position.LOG_VERSION, version );\n-            versionField = version;\n-        }\n-    }\n-\n-    public void setLastTransactionCommitTimestamp( long timestamp )\n-    {\n-        // Preventing race with transactionCommitted() and assure record is consistent with highestCommittedTransaction\n-        synchronized ( transactionCommittedLock )\n-        {\n-            setRecord( Position.LAST_TRANSACTION_COMMIT_TIMESTAMP, timestamp );\n-            TransactionId transactionId = highestCommittedTransaction.get();\n-            highestCommittedTransaction.set( transactionId.transactionId(), transactionId.checksum(), timestamp );\n-        }\n-    }\n-\n-    @Override\n-    public long incrementAndGetVersion()\n-    {\n-        // This method can expect synchronisation at a higher level,\n-        // and be effectively single-threaded.\n-        long pageId = pageIdForRecord( Position.LOG_VERSION.id );\n-        long version;\n-        synchronized ( logVersionLock )\n-        {\n-            try ( PageCursor cursor = storeFile.io( pageId, PF_SHARED_WRITE_LOCK ) )\n+            while (cursor.shouldRetry());\n+            if (cursor.checkAndClearBoundsFlag())\n             {\n-                if ( cursor.next() )\n-                {\n-                    incrementVersion( cursor );\n-                }\n-                version = versionField;\n+              int offset = offset(position);\n+              throw new UnderlyingStorageException(buildOutOfBoundsExceptionMessage(\n+                  record, 0, offset, RECORD_SIZE, pageSize, neoStore.getAbsolutePath()));\n             }\n-            catch ( IOException e )\n+          }\n+        }\n+      }\n+    }\n+    return value;\n+  }\n+\n+  static int getPageSize(PageCache pageCache)\n+  {\n+    return pageCache.pageSize() - pageCache.pageSize() % RECORD_SIZE;\n+  }\n+\n+  public StoreId getStoreId()\n+  {\n+    return new StoreId(getCreationTime(), getRandomNumber(), getStoreVersion(), getUpgradeTime(), upgradeTxIdField);\n+  }\n+\n+  public static StoreId getStoreId(PageCache pageCache, File neoStore) throws IOException\n+  {\n+    return new StoreId(\n+        getRecord(pageCache, neoStore, Position.TIME),\n+        getRecord(pageCache, neoStore, Position.RANDOM_NUMBER),\n+        getRecord(pageCache, neoStore, Position.STORE_VERSION),\n+        getRecord(pageCache, neoStore, Position.UPGRADE_TIME),\n+        getRecord(pageCache, neoStore, Position.UPGRADE_TRANSACTION_ID)\n+    );\n+  }\n+\n+  public long getUpgradeTime()\n+  {\n+    assertNotClosed();\n+    checkInitialized(upgradeTimeField);\n+    return upgradeTimeField;\n+  }\n+\n+  public void setUpgradeTime(long time)\n+  {\n+    synchronized (upgradeTimeLock)\n+    {\n+      setRecord(Position.UPGRADE_TIME, time);\n+      upgradeTimeField = time;\n+    }\n+  }\n+\n+  public void setUpgradeTransaction(long id, long checksum, long timestamp)\n+  {\n+    long pageId = pageIdForRecord(Position.UPGRADE_TRANSACTION_ID.id);\n+    assert pageId == pageIdForRecord(Position.UPGRADE_TRANSACTION_CHECKSUM.id);\n+    synchronized (upgradeTransactionLock)\n+    {\n+      try (PageCursor cursor = storeFile.io(pageId, PF_SHARED_WRITE_LOCK))\n+      {\n+        if (!cursor.next())\n+        {\n+          throw new UnderlyingStorageException(\"Could not access MetaDataStore page \" + pageId);\n+        }\n+        setRecord(cursor, Position.UPGRADE_TRANSACTION_ID, id);\n+        setRecord(cursor, Position.UPGRADE_TRANSACTION_CHECKSUM, checksum);\n+        setRecord(cursor, Position.UPGRADE_TRANSACTION_COMMIT_TIMESTAMP, timestamp);\n+        upgradeTxIdField = id;\n+        upgradeTxChecksumField = checksum;\n+        upgradeCommitTimestampField = timestamp;\n+        upgradeTransaction = new TransactionId(id, checksum, timestamp);\n+      } catch (IOException e)\n+      {\n+        throw new UnderlyingStorageException(e);\n+      }\n+    }\n+  }\n+\n+  public long getCreationTime()\n+  {\n+    assertNotClosed();\n+    checkInitialized(creationTimeField);\n+    return creationTimeField;\n+  }\n+\n+  public void setCreationTime(long time)\n+  {\n+    synchronized (creationTimeLock)\n+    {\n+      setRecord(Position.TIME, time);\n+      creationTimeField = time;\n+    }\n+  }\n+\n+  public long getRandomNumber()\n+  {\n+    assertNotClosed();\n+    checkInitialized(randomNumberField);\n+    return randomNumberField;\n+  }\n+\n+  public void setRandomNumber(long nr)\n+  {\n+    synchronized (randomNumberLock)\n+    {\n+      setRecord(Position.RANDOM_NUMBER, nr);\n+      randomNumberField = nr;\n+    }\n+  }\n+\n+  @Override\n+  public long getCurrentLogVersion()\n+  {\n+    assertNotClosed();\n+    checkInitialized(versionField);\n+    return versionField;\n+  }\n+\n+  @Override\n+  public void setCurrentLogVersion(long version)\n+  {\n+    synchronized (logVersionLock)\n+    {\n+      setRecord(Position.LOG_VERSION, version);\n+      versionField = version;\n+    }\n+  }\n+\n+  public void setLastTransactionCommitTimestamp(long timestamp)\n+  {\n+    // Preventing race with transactionCommitted() and assure record is consistent with highestCommittedTransaction\n+    synchronized (transactionCommittedLock)\n+    {\n+      setRecord(Position.LAST_TRANSACTION_COMMIT_TIMESTAMP, timestamp);\n+      TransactionId transactionId = highestCommittedTransaction.get();\n+      highestCommittedTransaction.set(transactionId.transactionId(), transactionId.checksum(), timestamp);\n+    }\n+  }\n+\n+  @Override\n+  public long incrementAndGetVersion()\n+  {\n+    // This method can expect synchronisation at a higher level,\n+    // and be effectively single-threaded.\n+    long pageId = pageIdForRecord(Position.LOG_VERSION.id);\n+    long version;\n+    synchronized (logVersionLock)\n+    {\n+      try (PageCursor cursor = storeFile.io(pageId, PF_SHARED_WRITE_LOCK))\n+      {\n+        if (cursor.next())\n+        {\n+          incrementVersion(cursor);\n+        }\n+        version = versionField;\n+      } catch (IOException e)\n+      {\n+        throw new UnderlyingStorageException(e);\n+      }\n+    }\n+    flush(); // make sure the new version value is persisted\n+    return version;\n+  }\n+\n+  private void incrementVersion(PageCursor cursor)\n+  {\n+    if (!cursor.isWriteLocked())\n+    {\n+      throw new IllegalArgumentException(\"Cannot increment log version on page cursor that is not write-locked\");\n+    }\n+    // offsets plus one to skip the inUse byte\n+    int offset = (Position.LOG_VERSION.id * getRecordSize()) + 1;\n+    long value = cursor.getLong(offset) + 1;\n+    cursor.putLong(offset, value);\n+    checkForDecodingErrors(cursor, Position.LOG_VERSION.id, NORMAL);\n+    versionField = value;\n+  }\n+\n+  public long getStoreVersion()\n+  {\n+    assertNotClosed();\n+    checkInitialized(storeVersionField);\n+    return storeVersionField;\n+  }\n+\n+  public void setStoreVersion(long version)\n+  {\n+    synchronized (storeVersionLock)\n+    {\n+      setRecord(Position.STORE_VERSION, version);\n+      storeVersionField = version;\n+    }\n+  }\n+\n+  public long getGraphNextProp()\n+  {\n+    assertNotClosed();\n+    checkInitialized(graphNextPropField);\n+    return graphNextPropField;\n+  }\n+\n+  public void setGraphNextProp(long propId)\n+  {\n+    synchronized (graphNextPropLock)\n+    {\n+      setRecord(Position.FIRST_GRAPH_PROPERTY, propId);\n+      graphNextPropField = propId;\n+    }\n+  }\n+\n+  public long getLatestConstraintIntroducingTx()\n+  {\n+    assertNotClosed();\n+    checkInitialized(latestConstraintIntroducingTxField);\n+    return latestConstraintIntroducingTxField;\n+  }\n+\n+  public void setLatestConstraintIntroducingTx(long latestConstraintIntroducingTx)\n+  {\n+    synchronized (lastConstraintIntroducingTxLock)\n+    {\n+      setRecord(Position.LAST_CONSTRAINT_TRANSACTION, latestConstraintIntroducingTx);\n+      latestConstraintIntroducingTxField = latestConstraintIntroducingTx;\n+    }\n+  }\n+\n+  private void readAllFields(PageCursor cursor) throws IOException\n+  {\n+    do\n+    {\n+      creationTimeField = getRecordValue(cursor, Position.TIME);\n+      randomNumberField = getRecordValue(cursor, Position.RANDOM_NUMBER);\n+      versionField = getRecordValue(cursor, Position.LOG_VERSION);\n+      long lastCommittedTxId = getRecordValue(cursor, Position.LAST_TRANSACTION_ID);\n+      lastCommittingTxField.set(lastCommittedTxId);\n+      storeVersionField = getRecordValue(cursor, Position.STORE_VERSION);\n+      graphNextPropField = getRecordValue(cursor, Position.FIRST_GRAPH_PROPERTY);\n+      latestConstraintIntroducingTxField = getRecordValue(cursor, Position.LAST_CONSTRAINT_TRANSACTION);\n+      upgradeTxIdField = getRecordValue(cursor, Position.UPGRADE_TRANSACTION_ID);\n+      upgradeTxChecksumField = getRecordValue(cursor, Position.UPGRADE_TRANSACTION_CHECKSUM);\n+      upgradeTimeField = getRecordValue(cursor, Position.UPGRADE_TIME);\n+      long lastClosedTransactionLogVersion = getRecordValue(cursor, Position.LAST_CLOSED_TRANSACTION_LOG_VERSION);\n+      long lastClosedTransactionLogByteOffset = getRecordValue(cursor, Position.LAST_CLOSED_TRANSACTION_LOG_BYTE_OFFSET);\n+      lastClosedTx.set(lastCommittedTxId,\n+          new long[] {lastClosedTransactionLogVersion, lastClosedTransactionLogByteOffset});\n+      highestCommittedTransaction.set(lastCommittedTxId,\n+          getRecordValue(cursor, Position.LAST_TRANSACTION_CHECKSUM),\n+          getRecordValue(cursor, Position.LAST_TRANSACTION_COMMIT_TIMESTAMP, UNKNOWN_TX_COMMIT_TIMESTAMP\n+          ));\n+      upgradeCommitTimestampField = getRecordValue(cursor, Position.UPGRADE_TRANSACTION_COMMIT_TIMESTAMP,\n+          BASE_TX_COMMIT_TIMESTAMP);\n+\n+      upgradeTransaction = new TransactionId(upgradeTxIdField, upgradeTxChecksumField,\n+          upgradeCommitTimestampField);\n+    }\n+    while (cursor.shouldRetry());\n+    if (cursor.checkAndClearBoundsFlag())\n+    {\n+      throw new UnderlyingStorageException(\n+          \"Out of page bounds when reading all meta-data fields. The page in question is page \" +\n+              cursor.getCurrentPageId() + \" of file \" + storageFileName.getAbsolutePath() + \", which is \" +\n+              cursor.getCurrentPageSize() + \" bytes in size\");\n+    }\n+  }\n+\n+  long getRecordValue(PageCursor cursor, Position position)\n+  {\n+    return getRecordValue(cursor, position, FIELD_NOT_PRESENT);\n+  }\n+\n+  private long getRecordValue(PageCursor cursor, Position position, long defaultValue)\n+  {\n+    MetaDataRecord record = newRecord();\n+    try\n+    {\n+      record.setId(position.id);\n+      recordFormat.read(record, cursor, FORCE, RECORD_SIZE);\n+      if (record.inUse())\n+      {\n+        return record.getValue();\n+      }\n+      return defaultValue;\n+    } catch (IOException e)\n+    {\n+      throw new UnderlyingStorageException(e);\n+    }\n+  }\n+\n+  private void refreshFields()\n+  {\n+    scanAllFields(PF_SHARED_READ_LOCK, element ->\n+    {\n+      readAllFields(element);\n+      return false;\n+    });\n+  }\n+\n+  private void scanAllFields(int pf_flags, Visitor<PageCursor, IOException> visitor)\n+  {\n+    try (PageCursor cursor = storeFile.io(0, pf_flags))\n+    {\n+      if (cursor.next())\n+      {\n+        visitor.visit(cursor);\n+      }\n+    } catch (IOException e)\n+    {\n+      throw new UnderlyingStorageException(e);\n+    }\n+  }\n+\n+  private void setRecord(Position position, long value)\n+  {\n+    MetaDataRecord record = new MetaDataRecord();\n+    record.initialize(true, value);\n+    record.setId(position.id);\n+    updateRecord(record);\n+  }\n+\n+  private void setRecord(PageCursor cursor, Position position, long value)\n+  {\n+    if (!cursor.isWriteLocked())\n+    {\n+      throw new IllegalArgumentException(\"Cannot write record without a page cursor that is write-locked\");\n+    }\n+    int offset = offsetForId(position.id);\n+    cursor.setOffset(offset);\n+    cursor.putByte(Record.IN_USE.byteValue());\n+    cursor.putLong(value);\n+    checkForDecodingErrors(cursor, position.id, NORMAL);\n+  }\n+\n+  public NeoStoreRecord graphPropertyRecord()\n+  {\n+    NeoStoreRecord result = new NeoStoreRecord();\n+    result.setNextProp(getGraphNextProp());\n+    return result;\n+  }\n+\n+  /*\n+   * The following two methods encode and decode a string that is presumably\n+   * the store version into a long via Latin1 encoding. This leaves room for\n+   * 7 characters and 1 byte for the length. Current string is\n+   * 0.A.0 which is 5 chars, so we have room for expansion. When that\n+   * becomes a problem we will be in a yacht, sipping alcoholic\n+   * beverages of our choice. Or taking turns crashing golden\n+   * helicopters. Anyway, it should suffice for some time and by then\n+   * it should have become SEP.\n+   */\n+  public static long versionStringToLong(String storeVersion)\n+  {\n+    if (CommonAbstractStore.UNKNOWN_VERSION.equals(storeVersion))\n+    {\n+      return -1;\n+    }\n+    Bits bits = Bits.bits(8);\n+    int length = storeVersion.length();\n+    if (length == 0 || length > 7)\n+    {\n+      throw new IllegalArgumentException(format(\n+          \"The given string %s is not of proper size for a store version string\", storeVersion));\n+    }\n+    bits.put(length, 8);\n+    for (int i = 0; i < length; i++)\n+    {\n+      char c = storeVersion.charAt(i);\n+      if (c >= 256)\n+      {\n+        throw new IllegalArgumentException(format(\n+            \"Store version strings should be encode-able as Latin1 - %s is not\", storeVersion));\n+      }\n+      bits.put(c, 8); // Just the lower byte\n+    }\n+    return bits.getLong();\n+  }\n+\n+  public static String versionLongToString(long storeVersion)\n+  {\n+    if (storeVersion == -1)\n+    {\n+      return CommonAbstractStore.UNKNOWN_VERSION;\n+    }\n+    Bits bits = Bits.bitsFromLongs(new long[] {storeVersion});\n+    int length = bits.getShort(8);\n+    if (length == 0 || length > 7)\n+    {\n+      throw new IllegalArgumentException(format(\"The read version string length %d is not proper.\",\n+          length));\n+    }\n+    char[] result = new char[length];\n+    for (int i = 0; i < length; i++)\n+    {\n+      result[i] = (char) bits.getShort(8);\n+    }\n+    return new String(result);\n+  }\n+\n+  @Override\n+  public long nextCommittingTransactionId()\n+  {\n+    assertNotClosed();\n+    checkInitialized(lastCommittingTxField.get());\n+    return lastCommittingTxField.incrementAndGet();\n+  }\n+\n+  @Override\n+  public long committingTransactionId()\n+  {\n+    assertNotClosed();\n+    checkInitialized(lastCommittingTxField.get());\n+    return lastCommittingTxField.get();\n+  }\n+\n+  @Override\n+  public void transactionCommitted(long transactionId, long checksum, long commitTimestamp)\n+  {\n+    assertNotClosed();\n+    checkInitialized(lastCommittingTxField.get());\n+    if (highestCommittedTransaction.offer(transactionId, checksum, commitTimestamp))\n+    {\n+      // We need to synchronize here in order to guarantee that the three fields are written consistently\n+      // together. Note that having a write lock on the page is not enough for 3 reasons:\n+      // 1. page write locks are not exclusive\n+      // 2. the records might be in different pages\n+      // 3. some other thread might kick in while we have been written only one record\n+      synchronized (transactionCommittedLock)\n+      {\n+        // Double-check with highest tx id under the lock, so that there haven't been\n+        // another higher transaction committed between our id being accepted and\n+        // acquiring this monitor.\n+        if (highestCommittedTransaction.get().transactionId() == transactionId)\n+        {\n+          long pageId = pageIdForRecord(Position.LAST_TRANSACTION_ID.id);\n+          assert pageId == pageIdForRecord(Position.LAST_TRANSACTION_CHECKSUM.id);\n+          try (PageCursor cursor = storeFile.io(pageId, PF_SHARED_WRITE_LOCK))\n+          {\n+            if (cursor.next())\n             {\n-                throw new UnderlyingStorageException( e );\n+              setRecord(cursor, Position.LAST_TRANSACTION_ID, transactionId);\n+              setRecord(cursor, Position.LAST_TRANSACTION_CHECKSUM, checksum);\n+              setRecord(Position.LAST_TRANSACTION_COMMIT_TIMESTAMP, commitTimestamp);\n             }\n-        }\n-        flush(); // make sure the new version value is persisted\n-        return version;\n-    }\n-\n-    private void incrementVersion( PageCursor cursor )\n-    {\n-        if ( !cursor.isWriteLocked() )\n-        {\n-            throw new IllegalArgumentException( \"Cannot increment log version on page cursor that is not write-locked\" );\n-        }\n-        // offsets plus one to skip the inUse byte\n-        int offset = (Position.LOG_VERSION.id * getRecordSize()) + 1;\n-        long value = cursor.getLong( offset ) + 1;\n-        cursor.putLong( offset, value );\n-        checkForDecodingErrors( cursor, Position.LOG_VERSION.id, NORMAL );\n-        versionField = value;\n-    }\n-\n-    public long getStoreVersion()\n-    {\n-        assertNotClosed();\n-        checkInitialized( storeVersionField );\n-        return storeVersionField;\n-    }\n-\n-    public void setStoreVersion( long version )\n-    {\n-        synchronized ( storeVersionLock )\n-        {\n-            setRecord( Position.STORE_VERSION, version );\n-            storeVersionField = version;\n-        }\n-    }\n-\n-    public long getGraphNextProp()\n-    {\n-        assertNotClosed();\n-        checkInitialized( graphNextPropField );\n-        return graphNextPropField;\n-    }\n-\n-    public void setGraphNextProp( long propId )\n-    {\n-        synchronized ( graphNextPropLock )\n-        {\n-            setRecord( Position.FIRST_GRAPH_PROPERTY, propId );\n-            graphNextPropField = propId;\n-        }\n-    }\n-\n-    public long getLatestConstraintIntroducingTx()\n-    {\n-        assertNotClosed();\n-        checkInitialized( latestConstraintIntroducingTxField );\n-        return latestConstraintIntroducingTxField;\n-    }\n-\n-    public void setLatestConstraintIntroducingTx( long latestConstraintIntroducingTx )\n-    {\n-        synchronized ( lastConstraintIntroducingTxLock )\n-        {\n-            setRecord( Position.LAST_CONSTRAINT_TRANSACTION, latestConstraintIntroducingTx );\n-            latestConstraintIntroducingTxField = latestConstraintIntroducingTx;\n-        }\n-    }\n-\n-    private void readAllFields( PageCursor cursor ) throws IOException\n-    {\n+          } catch (IOException e)\n+          {\n+            throw new UnderlyingStorageException(e);\n+          }\n+        }\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public long getLastCommittedTransactionId()\n+  {\n+    assertNotClosed();\n+    checkInitialized(lastCommittingTxField.get());\n+    return highestCommittedTransaction.get().transactionId();\n+  }\n+\n+  @Override\n+  public TransactionId getLastCommittedTransaction()\n+  {\n+    assertNotClosed();\n+    checkInitialized(lastCommittingTxField.get());\n+    return highestCommittedTransaction.get();\n+  }\n+\n+  @Override\n+  public TransactionId getUpgradeTransaction()\n+  {\n+    assertNotClosed();\n+    checkInitialized(upgradeTxIdField);\n+    return upgradeTransaction;\n+  }\n+\n+  @Override\n+  public long getLastClosedTransactionId()\n+  {\n+    assertNotClosed();\n+    checkInitialized(lastCommittingTxField.get());\n+    return lastClosedTx.getHighestGapFreeNumber();\n+  }\n+\n+  @Override\n+  public void awaitClosedTransactionId(long txId, long timeoutMillis) throws TimeoutException, InterruptedException\n+  {\n+    assertNotClosed();\n+    checkInitialized(lastCommittingTxField.get());\n+    lastClosedTx.await(txId, timeoutMillis);\n+  }\n+\n+  @Override\n+  public long[] getLastClosedTransaction()\n+  {\n+    assertNotClosed();\n+    checkInitialized(lastCommittingTxField.get());\n+    return lastClosedTx.get();\n+  }\n+\n+  /**\n+   * Ensures that all fields are read from the store, by checking the initial value of the field in question\n+   *\n+   * @param field the value\n+   */\n+  private void checkInitialized(long field)\n+  {\n+    if (field == FIELD_NOT_INITIALIZED)\n+    {\n+      refreshFields();\n+    }\n+  }\n+\n+  @Override\n+  public void transactionClosed(long transactionId, long logVersion, long byteOffset)\n+  {\n+    if (lastClosedTx.offer(transactionId, new long[] {logVersion, byteOffset}))\n+    {\n+      long pageId = pageIdForRecord(Position.LAST_CLOSED_TRANSACTION_LOG_VERSION.id);\n+      assert pageId == pageIdForRecord(Position.LAST_CLOSED_TRANSACTION_LOG_BYTE_OFFSET.id);\n+      synchronized (transactionClosedLock)\n+      {\n+        try (PageCursor cursor = storeFile.io(pageId, PF_SHARED_WRITE_LOCK))\n+        {\n+          if (cursor.next())\n+          {\n+            long[] lastClosedTransactionData = lastClosedTx.get();\n+            setRecord(cursor, Position.LAST_CLOSED_TRANSACTION_LOG_VERSION, lastClosedTransactionData[1]);\n+            setRecord(cursor, Position.LAST_CLOSED_TRANSACTION_LOG_BYTE_OFFSET, lastClosedTransactionData[2]);\n+          }\n+        } catch (IOException e)\n+        {\n+          throw new UnderlyingStorageException(e);\n+        }\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public boolean closedTransactionIdIsOnParWithOpenedTransactionId()\n+  {\n+    boolean onPar = lastClosedTx.getHighestGapFreeNumber() == lastCommittingTxField.get();\n+    if (!onPar)\n+    {   // Trigger some logging here, max logged every 30 secs or so\n+      transactionCloseWaitLogger.info(format(\n+          \"Waiting for all transactions to close...%n committed:  %s%n  committing: %s%n  closed:     %s\",\n+          highestCommittedTransaction.get(), lastCommittingTxField, lastClosedTx));\n+    }\n+    return onPar;\n+  }\n+\n+  public void logRecords(final Logger msgLog)\n+  {\n+    scanAllFields(PF_SHARED_READ_LOCK, cursor ->\n+    {\n+      for (Position position : Position.values())\n+      {\n+        long value;\n         do\n         {\n-            creationTimeField = getRecordValue( cursor, Position.TIME );\n-            randomNumberField = getRecordValue( cursor, Position.RANDOM_NUMBER );\n-            versionField = getRecordValue( cursor, Position.LOG_VERSION );\n-            long lastCommittedTxId = getRecordValue( cursor, Position.LAST_TRANSACTION_ID );\n-            lastCommittingTxField.set( lastCommittedTxId );\n-            storeVersionField = getRecordValue( cursor, Position.STORE_VERSION );\n-            graphNextPropField = getRecordValue( cursor, Position.FIRST_GRAPH_PROPERTY );\n-            latestConstraintIntroducingTxField = getRecordValue( cursor, Position.LAST_CONSTRAINT_TRANSACTION );\n-            upgradeTxIdField = getRecordValue( cursor, Position.UPGRADE_TRANSACTION_ID );\n-            upgradeTxChecksumField = getRecordValue( cursor, Position.UPGRADE_TRANSACTION_CHECKSUM );\n-            upgradeTimeField = getRecordValue( cursor, Position.UPGRADE_TIME );\n-            long lastClosedTransactionLogVersion = getRecordValue( cursor, Position.LAST_CLOSED_TRANSACTION_LOG_VERSION );\n-            long lastClosedTransactionLogByteOffset = getRecordValue( cursor, Position.LAST_CLOSED_TRANSACTION_LOG_BYTE_OFFSET );\n-            lastClosedTx.set( lastCommittedTxId,\n-                    new long[]{lastClosedTransactionLogVersion, lastClosedTransactionLogByteOffset} );\n-            highestCommittedTransaction.set( lastCommittedTxId,\n-                    getRecordValue( cursor, Position.LAST_TRANSACTION_CHECKSUM ),\n-                    getRecordValue( cursor, Position.LAST_TRANSACTION_COMMIT_TIMESTAMP, UNKNOWN_TX_COMMIT_TIMESTAMP\n-                    ) );\n-            upgradeCommitTimestampField = getRecordValue( cursor, Position.UPGRADE_TRANSACTION_COMMIT_TIMESTAMP,\n-                    BASE_TX_COMMIT_TIMESTAMP );\n-\n-            upgradeTransaction = new TransactionId( upgradeTxIdField, upgradeTxChecksumField,\n-                    upgradeCommitTimestampField );\n-        }\n-        while ( cursor.shouldRetry() );\n-        if ( cursor.checkAndClearBoundsFlag() )\n-        {\n-            throw new UnderlyingStorageException(\n-                    \"Out of page bounds when reading all meta-data fields. The page in question is page \" +\n-                    cursor.getCurrentPageId() + \" of file \" + storageFileName.getAbsolutePath() + \", which is \" +\n-                    cursor.getCurrentPageSize() + \" bytes in size\" );\n-        }\n-    }\n-\n-    long getRecordValue( PageCursor cursor, Position position )\n-    {\n-        return getRecordValue( cursor, position, FIELD_NOT_PRESENT );\n-    }\n-\n-    private long getRecordValue( PageCursor cursor, Position position, long defaultValue )\n-    {\n-        MetaDataRecord record = newRecord();\n-        try\n-        {\n-            record.setId( position.id );\n-            recordFormat.read( record, cursor, FORCE, RECORD_SIZE );\n-            if ( record.inUse() )\n-            {\n-                return record.getValue();\n-            }\n-            return defaultValue;\n-        }\n-        catch ( IOException e )\n-        {\n-            throw new UnderlyingStorageException( e );\n-        }\n-    }\n-\n-    private void refreshFields()\n-    {\n-        scanAllFields( PF_SHARED_READ_LOCK, element ->\n-        {\n-            readAllFields( element );\n-            return false;\n-        } );\n-    }\n-\n-    private void scanAllFields( int pf_flags, Visitor<PageCursor,IOException> visitor )\n-    {\n-        try ( PageCursor cursor = storeFile.io( 0, pf_flags ) )\n-        {\n-            if ( cursor.next() )\n-            {\n-                visitor.visit( cursor );\n-            }\n-        }\n-        catch ( IOException e )\n-        {\n-            throw new UnderlyingStorageException( e );\n-        }\n-    }\n-\n-    private void setRecord( Position position, long value )\n-    {\n-        MetaDataRecord record = new MetaDataRecord();\n-        record.initialize( true, value );\n-        record.setId( position.id );\n-        updateRecord( record );\n-    }\n-\n-    private void setRecord( PageCursor cursor, Position position, long value )\n-    {\n-        if ( !cursor.isWriteLocked() )\n-        {\n-            throw new IllegalArgumentException( \"Cannot write record without a page cursor that is write-locked\" );\n-        }\n-        int offset = offsetForId( position.id );\n-        cursor.setOffset( offset );\n-        cursor.putByte( Record.IN_USE.byteValue() );\n-        cursor.putLong( value );\n-        checkForDecodingErrors( cursor, position.id, NORMAL );\n-    }\n-\n-    public NeoStoreRecord graphPropertyRecord()\n-    {\n-        NeoStoreRecord result = new NeoStoreRecord();\n-        result.setNextProp( getGraphNextProp() );\n-        return result;\n-    }\n-\n-    /*\n-     * The following two methods encode and decode a string that is presumably\n-     * the store version into a long via Latin1 encoding. This leaves room for\n-     * 7 characters and 1 byte for the length. Current string is\n-     * 0.A.0 which is 5 chars, so we have room for expansion. When that\n-     * becomes a problem we will be in a yacht, sipping alcoholic\n-     * beverages of our choice. Or taking turns crashing golden\n-     * helicopters. Anyway, it should suffice for some time and by then\n-     * it should have become SEP.\n-     */\n-    public static long versionStringToLong( String storeVersion )\n-    {\n-        if ( CommonAbstractStore.UNKNOWN_VERSION.equals( storeVersion ) )\n-        {\n-            return -1;\n-        }\n-        Bits bits = Bits.bits( 8 );\n-        int length = storeVersion.length();\n-        if ( length == 0 || length > 7 )\n-        {\n-            throw new IllegalArgumentException( format(\n-                    \"The given string %s is not of proper size for a store version string\", storeVersion ) );\n-        }\n-        bits.put( length, 8 );\n-        for ( int i = 0; i < length; i++ )\n-        {\n-            char c = storeVersion.charAt( i );\n-            if ( c >= 256 )\n-            {\n-                throw new IllegalArgumentException( format(\n-                        \"Store version strings should be encode-able as Latin1 - %s is not\", storeVersion ) );\n-            }\n-            bits.put( c, 8 ); // Just the lower byte\n-        }\n-        return bits.getLong();\n-    }\n-\n-    public static String versionLongToString( long storeVersion )\n-    {\n-        if ( storeVersion == -1 )\n-        {\n-            return CommonAbstractStore.UNKNOWN_VERSION;\n-        }\n-        Bits bits = Bits.bitsFromLongs( new long[]{storeVersion} );\n-        int length = bits.getShort( 8 );\n-        if ( length == 0 || length > 7 )\n-        {\n-            throw new IllegalArgumentException( format( \"The read version string length %d is not proper.\",\n-                    length ) );\n-        }\n-        char[] result = new char[length];\n-        for ( int i = 0; i < length; i++ )\n-        {\n-            result[i] = (char) bits.getShort( 8 );\n-        }\n-        return new String( result );\n-    }\n-\n-    @Override\n-    public long nextCommittingTransactionId()\n-    {\n-        assertNotClosed();\n-        checkInitialized( lastCommittingTxField.get() );\n-        return lastCommittingTxField.incrementAndGet();\n-    }\n-\n-    @Override\n-    public long committingTransactionId()\n-    {\n-        assertNotClosed();\n-        checkInitialized( lastCommittingTxField.get() );\n-        return lastCommittingTxField.get();\n-    }\n-\n-    @Override\n-    public void transactionCommitted( long transactionId, long checksum, long commitTimestamp )\n-    {\n-        assertNotClosed();\n-        checkInitialized( lastCommittingTxField.get() );\n-        if ( highestCommittedTransaction.offer( transactionId, checksum, commitTimestamp ) )\n-        {\n-            // We need to synchronize here in order to guarantee that the three fields are written consistently\n-            // together. Note that having a write lock on the page is not enough for 3 reasons:\n-            // 1. page write locks are not exclusive\n-            // 2. the records might be in different pages\n-            // 3. some other thread might kick in while we have been written only one record\n-            synchronized ( transactionCommittedLock )\n-            {\n-                // Double-check with highest tx id under the lock, so that there haven't been\n-                // another higher transaction committed between our id being accepted and\n-                // acquiring this monitor.\n-                if ( highestCommittedTransaction.get().transactionId() == transactionId )\n-                {\n-                    long pageId = pageIdForRecord( Position.LAST_TRANSACTION_ID.id );\n-                    assert pageId == pageIdForRecord( Position.LAST_TRANSACTION_CHECKSUM.id );\n-                    try ( PageCursor cursor = storeFile.io( pageId, PF_SHARED_WRITE_LOCK ) )\n-                    {\n-                        if ( cursor.next() )\n-                        {\n-                            setRecord( cursor, Position.LAST_TRANSACTION_ID, transactionId );\n-                            setRecord( cursor, Position.LAST_TRANSACTION_CHECKSUM, checksum );\n-                            setRecord( Position.LAST_TRANSACTION_COMMIT_TIMESTAMP, commitTimestamp );\n-                        }\n-                    }\n-                    catch ( IOException e )\n-                    {\n-                        throw new UnderlyingStorageException( e );\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public long getLastCommittedTransactionId()\n-    {\n-        assertNotClosed();\n-        checkInitialized( lastCommittingTxField.get() );\n-        return highestCommittedTransaction.get().transactionId();\n-    }\n-\n-    @Override\n-    public TransactionId getLastCommittedTransaction()\n-    {\n-        assertNotClosed();\n-        checkInitialized( lastCommittingTxField.get() );\n-        return highestCommittedTransaction.get();\n-    }\n-\n-    @Override\n-    public TransactionId getUpgradeTransaction()\n-    {\n-        assertNotClosed();\n-        checkInitialized( upgradeTxIdField  );\n-        return upgradeTransaction;\n-    }\n-\n-    @Override\n-    public long getLastClosedTransactionId()\n-    {\n-        assertNotClosed();\n-        checkInitialized( lastCommittingTxField.get() );\n-        return lastClosedTx.getHighestGapFreeNumber();\n-    }\n-\n-    @Override\n-    public void awaitClosedTransactionId( long txId, long timeoutMillis ) throws TimeoutException, InterruptedException\n-    {\n-        assertNotClosed();\n-        checkInitialized( lastCommittingTxField.get() );\n-        lastClosedTx.await( txId, timeoutMillis );\n-    }\n-\n-    @Override\n-    public long[] getLastClosedTransaction()\n-    {\n-        assertNotClosed();\n-        checkInitialized( lastCommittingTxField.get() );\n-        return lastClosedTx.get();\n-    }\n-\n-    /**\n-     * Ensures that all fields are read from the store, by checking the initial value of the field in question\n-     *\n-     * @param field the value\n-     */\n-    private void checkInitialized( long field )\n-    {\n-        if ( field == FIELD_NOT_INITIALIZED )\n-        {\n-            refreshFields();\n-        }\n-    }\n-\n-    @Override\n-    public void transactionClosed( long transactionId, long logVersion, long byteOffset )\n-    {\n-        if ( lastClosedTx.offer( transactionId, new long[]{logVersion, byteOffset} ) )\n-        {\n-            long pageId = pageIdForRecord( Position.LAST_CLOSED_TRANSACTION_LOG_VERSION.id );\n-            assert pageId == pageIdForRecord( Position.LAST_CLOSED_TRANSACTION_LOG_BYTE_OFFSET.id );\n-            synchronized ( transactionClosedLock )\n-            {\n-                try ( PageCursor cursor = storeFile.io( pageId, PF_SHARED_WRITE_LOCK ) )\n-                {\n-                    if ( cursor.next() )\n-                    {\n-                        long[] lastClosedTransactionData = lastClosedTx.get();\n-                        setRecord( cursor, Position.LAST_CLOSED_TRANSACTION_LOG_VERSION, lastClosedTransactionData[1] );\n-                        setRecord( cursor, Position.LAST_CLOSED_TRANSACTION_LOG_BYTE_OFFSET, lastClosedTransactionData[2] );\n-                    }\n-                }\n-                catch ( IOException e )\n-                {\n-                    throw new UnderlyingStorageException( e );\n-                }\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public boolean closedTransactionIdIsOnParWithOpenedTransactionId()\n-    {\n-        boolean onPar = lastClosedTx.getHighestGapFreeNumber() == lastCommittingTxField.get();\n-        if ( !onPar )\n-        {   // Trigger some logging here, max logged every 30 secs or so\n-            transactionCloseWaitLogger.info( format(\n-                    \"Waiting for all transactions to close...%n committed:  %s%n  committing: %s%n  closed:     %s\",\n-                    highestCommittedTransaction.get(), lastCommittingTxField, lastClosedTx ) );\n-        }\n-        return onPar;\n-    }\n-\n-    public void logRecords( final Logger msgLog )\n-    {\n-        scanAllFields( PF_SHARED_READ_LOCK, cursor ->\n-        {\n-            for ( Position position : Position.values() )\n-            {\n-                long value;\n-                do\n-                {\n-                    value = getRecordValue( cursor, position );\n-                }\n-                while ( cursor.shouldRetry() );\n-                boolean bounds = cursor.checkAndClearBoundsFlag();\n-                msgLog.log( position.name() + \" (\" + position.description() + \"): \" + value +\n-                            (bounds ? \" (out-of-bounds detected; value cannot be trusted)\" : \"\"));\n-            }\n-            return false;\n-        } );\n-    }\n-\n-    @Override\n-    public MetaDataRecord newRecord()\n-    {\n-        return new MetaDataRecord();\n-    }\n-\n-    @Override\n-    public <FAILURE extends Exception> void accept(\n-            org.neo4j.kernel.impl.store.RecordStore.Processor<FAILURE> processor, MetaDataRecord record )\n-                    throws FAILURE\n-    {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    @Override\n-    public void prepareForCommit( MetaDataRecord record )\n-    {   // No need to do anything with these records before commit\n-    }\n-\n-    @Override\n-    public void prepareForCommit( MetaDataRecord record, IdSequence idSequence )\n-    {   // No need to do anything with these records before commit\n-    }\n+          value = getRecordValue(cursor, position);\n+        }\n+        while (cursor.shouldRetry());\n+        boolean bounds = cursor.checkAndClearBoundsFlag();\n+        msgLog.log(position.name() + \" (\" + position.description() + \"): \" + value +\n+            (bounds ? \" (out-of-bounds detected; value cannot be trusted)\" : \"\"));\n+      }\n+      return false;\n+    });\n+  }\n+\n+  @Override\n+  public MetaDataRecord newRecord()\n+  {\n+    return new MetaDataRecord();\n+  }\n+\n+  @Override\n+  public <FAILURE extends Exception> void accept(\n+      org.neo4j.kernel.impl.store.RecordStore.Processor<FAILURE> processor, MetaDataRecord record)\n+      throws FAILURE\n+  {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public void prepareForCommit(MetaDataRecord record)\n+  {   // No need to do anything with these records before commit\n+  }\n+\n+  @Override\n+  public void prepareForCommit(MetaDataRecord record, IdSequence idSequence)\n+  {   // No need to do anything with these records before commit\n+  }\n }\n",
            "diff_size": 1327
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 1,190).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "116",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "236",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "295",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "316",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 318).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "533",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 182).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "542",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 281).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "851",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3664/MetaDataStore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3664/MetaDataStore.java\nindex 6136b419e85..24ff3d80b65 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3664/MetaDataStore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3664/MetaDataStore.java\n@@ -58,8 +58,7 @@ import static org.neo4j.kernel.impl.store.format.standard.MetaDataRecordFormat.R\n import static org.neo4j.kernel.impl.store.record.RecordLoad.FORCE;\n import static org.neo4j.kernel.impl.store.record.RecordLoad.NORMAL;\n \n-public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHeader>\n-        implements TransactionIdStore, LogVersionRepository\n+public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHeader> implements TransactionIdStore, LogVersionRepository\n {\n     public static final String TYPE_DESCRIPTOR = \"NeoStore\";\n     // This value means the field has not been refreshed from the store. Normally, this should happen only once\n@@ -73,22 +72,7 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n \n     public enum Position\n     {\n-        TIME( 0, \"Creation time\" ),\n-        RANDOM_NUMBER( 1, \"Random number for store id\" ),\n-        LOG_VERSION( 2, \"Current log version\" ),\n-        LAST_TRANSACTION_ID( 3, \"Last committed transaction\" ),\n-        STORE_VERSION( 4, \"Store format version\" ),\n-        FIRST_GRAPH_PROPERTY( 5, \"First property record containing graph properties\" ),\n-        LAST_CONSTRAINT_TRANSACTION( 6, \"Last committed transaction containing constraint changes\" ),\n-        UPGRADE_TRANSACTION_ID( 7, \"Transaction id most recent upgrade was performed at\" ),\n-        UPGRADE_TIME( 8, \"Time of last upgrade\" ),\n-        LAST_TRANSACTION_CHECKSUM( 9, \"Checksum of last committed transaction\" ),\n-        UPGRADE_TRANSACTION_CHECKSUM( 10, \"Checksum of transaction id the most recent upgrade was performed at\" ),\n-        LAST_CLOSED_TRANSACTION_LOG_VERSION( 11, \"Log version where the last transaction commit entry has been written into\" ),\n-        LAST_CLOSED_TRANSACTION_LOG_BYTE_OFFSET( 12, \"Byte offset in the log file where the last transaction commit entry \" +\n-                                                     \"has been written into\" ),\n-        LAST_TRANSACTION_COMMIT_TIMESTAMP( 13, \"Commit time timestamp for last committed transaction\" ),\n-        UPGRADE_TRANSACTION_COMMIT_TIMESTAMP( 14, \"Commit timestamp of transaction the most recent upgrade was performed at\" );\n+        TIME( 0, \"Creation time\" ), RANDOM_NUMBER( 1, \"Random number for store id\" ), LOG_VERSION( 2, \"Current log version\" ), LAST_TRANSACTION_ID( 3, \"Last committed transaction\" ), STORE_VERSION( 4, \"Store format version\" ), FIRST_GRAPH_PROPERTY( 5, \"First property record containing graph properties\" ), LAST_CONSTRAINT_TRANSACTION( 6, \"Last committed transaction containing constraint changes\" ), UPGRADE_TRANSACTION_ID( 7, \"Transaction id most recent upgrade was performed at\" ), UPGRADE_TIME( 8, \"Time of last upgrade\" ), LAST_TRANSACTION_CHECKSUM( 9, \"Checksum of last committed transaction\" ), UPGRADE_TRANSACTION_CHECKSUM( 10, \"Checksum of transaction id the most recent upgrade was performed at\" ), LAST_CLOSED_TRANSACTION_LOG_VERSION( 11, \"Log version where the last transaction commit entry has been written into\" ), LAST_CLOSED_TRANSACTION_LOG_BYTE_OFFSET( 12, \"Byte offset in the log file where the last transaction commit entry \" + \"has been written into\" ), LAST_TRANSACTION_COMMIT_TIMESTAMP( 13, \"Commit time timestamp for last committed transaction\" ), UPGRADE_TRANSACTION_COMMIT_TIMESTAMP( 14, \"Commit timestamp of transaction the most recent upgrade was performed at\" );\n \n         private final int id;\n         private final String description;\n@@ -127,12 +111,9 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n \n     private volatile TransactionId upgradeTransaction = new TransactionId( FIELD_NOT_INITIALIZED,\n             FIELD_NOT_INITIALIZED, FIELD_NOT_INITIALIZED );\n-\n     // This is not a field in the store, but something keeping track of which is the currently highest\n     // committed transaction id, together with its checksum.\n-    private final HighestTransactionId highestCommittedTransaction =\n-            new HighestTransactionId( FIELD_NOT_INITIALIZED, FIELD_NOT_INITIALIZED, FIELD_NOT_INITIALIZED );\n-\n+    private final HighestTransactionId highestCommittedTransaction = new HighestTransactionId( FIELD_NOT_INITIALIZED, FIELD_NOT_INITIALIZED, FIELD_NOT_INITIALIZED );\n     // This is not a field in the store, but something keeping track of which of the committed\n     // transactions have been closed. Useful in rotation and shutdown.\n     private final OutOfOrderSequence lastClosedTx = new ArrayQueueOutOfOrderSequence( -1, 200, new long[2] );\n@@ -140,7 +121,7 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n     // We use these objects and their monitors as \"entity\" locks on the records, because page write locks are not\n     // exclusive. Therefor, these locks are only used when *writing* records, not when reading them.\n     private final Object upgradeTimeLock = new Object();\n-    private final Object creationTimeLock  = new Object();\n+    private final Object creationTimeLock = new Object();\n     private final Object randomNumberLock = new Object();\n     private final Object upgradeTransactionLock = new Object();\n     private final Object logVersionLock = new Object();\n@@ -160,7 +141,7 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n     {\n         super( fileName, conf, IdType.NEOSTORE_BLOCK, idGeneratorFactory, pageCache, logProvider,\n                 TYPE_DESCRIPTOR, recordFormat, NoStoreHeaderFormat.NO_STORE_HEADER_FORMAT, storeVersion, openOptions );\n-        this.transactionCloseWaitLogger = new CappedLogger( logProvider.getLog( MetaDataStore.class ) );\n+this.transactionCloseWaitLogger = new CappedLogger( logProvider.getLog( MetaDataStore.class ) );\n         transactionCloseWaitLogger.setTimeLimit( 30, SECONDS, Clocks.systemClock() );\n     }\n \n@@ -171,18 +152,17 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n \n         long storeVersionAsLong = MetaDataStore.versionStringToLong( storeVersion );\n         StoreId storeId = new StoreId( storeVersionAsLong );\n+storeFile = file;\n \n-        storeFile = file;\n-        setCreationTime( storeId.getCreationTime() );\n+setCreationTime( storeId.getCreationTime() );\n         setRandomNumber( storeId.getRandomId() );\n         // If metaDataStore.creationTime == metaDataStore.upgradeTime && metaDataStore.upgradeTransactionId == BASE_TX_ID\n         // then store has never been upgraded\n         setUpgradeTime( storeId.getCreationTime() );\n         setUpgradeTransaction( BASE_TX_ID, BASE_TX_CHECKSUM, BASE_TX_COMMIT_TIMESTAMP );\n         setCurrentLogVersion( 0 );\n-        setLastCommittedAndClosedTransactionId(\n-                BASE_TX_ID, BASE_TX_CHECKSUM, BASE_TX_COMMIT_TIMESTAMP, BASE_TX_LOG_BYTE_OFFSET, BASE_TX_LOG_VERSION );\n-        setStoreVersion( storeVersionAsLong );\n+        setLastCommittedAndClosedTransactionId( BASE_TX_ID, BASE_TX_CHECKSUM, BASE_TX_COMMIT_TIMESTAMP, BASE_TX_LOG_BYTE_OFFSET, BASE_TX_LOG_VERSION );\n+setStoreVersion( storeVersionAsLong );\n         setGraphNextProp( -1 );\n         setLatestConstraintIntroducingTx( 0 );\n \n@@ -200,8 +180,7 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n     // Only for initialization and recovery, so we don't need to lock the records\n \n     @Override\n-    public void setLastCommittedAndClosedTransactionId(\n-            long transactionId, long checksum, long commitTimestamp, long byteOffset, long logVersion )\n+    public void setLastCommittedAndClosedTransactionId( long transactionId, long checksum, long commitTimestamp, long byteOffset, long logVersion )\n     {\n         assertNotClosed();\n         setRecord( Position.LAST_TRANSACTION_ID, transactionId );\n@@ -214,7 +193,8 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n         lastClosedTx.set( transactionId, new long[]{logVersion, byteOffset} );\n         highestCommittedTransaction.set( transactionId, checksum, commitTimestamp );\n     }\n-    /**\n+\n+/**\n      * Writes a record in a neostore file.\n      * This method only works for neostore files of the current version.\n      *\n@@ -240,8 +220,7 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n                     cursor.setOffset( offset );\n                     byte inUse = cursor.getByte();\n                     long record = cursor.getLong();\n-\n-                    if ( inUse == Record.IN_USE.byteValue() )\n+if ( inUse == Record.IN_USE.byteValue() )\n                     {\n                         previousValue = record;\n                     }\n@@ -254,9 +233,8 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n                     {\n                         MetaDataRecord neoStoreRecord = new MetaDataRecord();\n                         neoStoreRecord.setId( position.id );\n-                        throw new UnderlyingStorageException( buildOutOfBoundsExceptionMessage(\n-                                neoStoreRecord, 0, offset, RECORD_SIZE, pageSize, neoStore.getAbsolutePath() ) );\n-                    }\n+                        throw new UnderlyingStorageException( buildOutOfBoundsExceptionMessage( neoStoreRecord, 0, offset, RECORD_SIZE, pageSize, neoStore.getAbsolutePath() ) );\n+    }\n                 }\n             }\n         }\n@@ -314,9 +292,8 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n                         if ( cursor.checkAndClearBoundsFlag() )\n                         {\n                             int offset = offset( position );\n-                            throw new UnderlyingStorageException( buildOutOfBoundsExceptionMessage(\n-                                    record, 0, offset, RECORD_SIZE, pageSize, neoStore.getAbsolutePath() ) );\n-                        }\n+                            throw new UnderlyingStorageException( buildOutOfBoundsExceptionMessage( record, 0, offset, RECORD_SIZE, pageSize, neoStore.getAbsolutePath() ) );\n+    }\n                     }\n                 }\n             }\n@@ -336,13 +313,7 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n \n     public static StoreId getStoreId( PageCache pageCache, File neoStore ) throws IOException\n     {\n-        return new StoreId(\n-                getRecord( pageCache, neoStore, Position.TIME ),\n-                getRecord( pageCache, neoStore, Position.RANDOM_NUMBER ),\n-                getRecord( pageCache, neoStore, Position.STORE_VERSION ),\n-                getRecord( pageCache, neoStore, Position.UPGRADE_TIME ),\n-                getRecord( pageCache, neoStore, Position.UPGRADE_TRANSACTION_ID )\n-        );\n+        return new StoreId( getRecord( pageCache, neoStore, Position.TIME ), getRecord( pageCache, neoStore, Position.RANDOM_NUMBER ), getRecord( pageCache, neoStore, Position.STORE_VERSION ), getRecord( pageCache, neoStore, Position.UPGRADE_TIME ), getRecord( pageCache, neoStore, Position.UPGRADE_TRANSACTION_ID ) );\n     }\n \n     public long getUpgradeTime()\n@@ -373,7 +344,8 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n                 {\n                     throw new UnderlyingStorageException( \"Could not access MetaDataStore page \" + pageId );\n                 }\n-                setRecord( cursor, Position.UPGRADE_TRANSACTION_ID, id );\n+\n+setRecord( cursor, Position.UPGRADE_TRANSACTION_ID, id );\n                 setRecord( cursor, Position.UPGRADE_TRANSACTION_CHECKSUM, checksum );\n                 setRecord( cursor, Position.UPGRADE_TRANSACTION_COMMIT_TIMESTAMP, timestamp );\n                 upgradeTxIdField = id;\n@@ -464,14 +436,16 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n                 {\n                     incrementVersion( cursor );\n                 }\n-                version = versionField;\n+\n+version = versionField;\n             }\n             catch ( IOException e )\n             {\n                 throw new UnderlyingStorageException( e );\n             }\n         }\n-        flush(); // make sure the new version value is persisted\n+\n+flush(); // make sure the new version value is persisted\n         return version;\n     }\n \n@@ -554,26 +528,19 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n             upgradeTimeField = getRecordValue( cursor, Position.UPGRADE_TIME );\n             long lastClosedTransactionLogVersion = getRecordValue( cursor, Position.LAST_CLOSED_TRANSACTION_LOG_VERSION );\n             long lastClosedTransactionLogByteOffset = getRecordValue( cursor, Position.LAST_CLOSED_TRANSACTION_LOG_BYTE_OFFSET );\n-            lastClosedTx.set( lastCommittedTxId,\n-                    new long[]{lastClosedTransactionLogVersion, lastClosedTransactionLogByteOffset} );\n-            highestCommittedTransaction.set( lastCommittedTxId,\n-                    getRecordValue( cursor, Position.LAST_TRANSACTION_CHECKSUM ),\n-                    getRecordValue( cursor, Position.LAST_TRANSACTION_COMMIT_TIMESTAMP, UNKNOWN_TX_COMMIT_TIMESTAMP\n-                    ) );\n-            upgradeCommitTimestampField = getRecordValue( cursor, Position.UPGRADE_TRANSACTION_COMMIT_TIMESTAMP,\n+            lastClosedTx.set( lastCommittedTxId, new long[]{lastClosedTransactionLogVersion, lastClosedTransactionLogByteOffset} );\n+highestCommittedTransaction.set( lastCommittedTxId,\n+                    getRecordValue( cursor, Position.LAST_TRANSACTION_CHECKSUM ), getRecordValue( cursor, Position.LAST_TRANSACTION_COMMIT_TIMESTAMP, UNKNOWN_TX_COMMIT_TIMESTAMP ) );\n+upgradeCommitTimestampField = getRecordValue( cursor, Position.UPGRADE_TRANSACTION_COMMIT_TIMESTAMP,\n                     BASE_TX_COMMIT_TIMESTAMP );\n-\n-            upgradeTransaction = new TransactionId( upgradeTxIdField, upgradeTxChecksumField,\n+upgradeTransaction = new TransactionId( upgradeTxIdField, upgradeTxChecksumField,\n                     upgradeCommitTimestampField );\n         }\n         while ( cursor.shouldRetry() );\n         if ( cursor.checkAndClearBoundsFlag() )\n         {\n-            throw new UnderlyingStorageException(\n-                    \"Out of page bounds when reading all meta-data fields. The page in question is page \" +\n-                    cursor.getCurrentPageId() + \" of file \" + storageFileName.getAbsolutePath() + \", which is \" +\n-                    cursor.getCurrentPageSize() + \" bytes in size\" );\n-        }\n+            throw new UnderlyingStorageException( \"Out of page bounds when reading all meta-data fields. The page in question is page \" + cursor.getCurrentPageId() + \" of file \" + storageFileName.getAbsolutePath() + \", which is \" + cursor.getCurrentPageSize() + \" bytes in size\" );\n+    }\n     }\n \n     long getRecordValue( PageCursor cursor, Position position )\n@@ -592,7 +559,8 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n             {\n                 return record.getValue();\n             }\n-            return defaultValue;\n+\n+return defaultValue;\n         }\n         catch ( IOException e )\n         {\n@@ -668,12 +636,12 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n         {\n             return -1;\n         }\n-        Bits bits = Bits.bits( 8 );\n+\n+Bits bits = Bits.bits( 8 );\n         int length = storeVersion.length();\n         if ( length == 0 || length > 7 )\n         {\n-            throw new IllegalArgumentException( format(\n-                    \"The given string %s is not of proper size for a store version string\", storeVersion ) );\n+            throw new IllegalArgumentException( format( \"The given string %s is not of proper size for a store version string\", storeVersion ) );\n         }\n         bits.put( length, 8 );\n         for ( int i = 0; i < length; i++ )\n@@ -681,12 +649,12 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n             char c = storeVersion.charAt( i );\n             if ( c >= 256 )\n             {\n-                throw new IllegalArgumentException( format(\n-                        \"Store version strings should be encode-able as Latin1 - %s is not\", storeVersion ) );\n+                throw new IllegalArgumentException( format( \"Store version strings should be encode-able as Latin1 - %s is not\", storeVersion ) );\n             }\n             bits.put( c, 8 ); // Just the lower byte\n         }\n-        return bits.getLong();\n+\n+return bits.getLong();\n     }\n \n     public static String versionLongToString( long storeVersion )\n@@ -695,7 +663,8 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n         {\n             return CommonAbstractStore.UNKNOWN_VERSION;\n         }\n-        Bits bits = Bits.bitsFromLongs( new long[]{storeVersion} );\n+\n+Bits bits = Bits.bitsFromLongs( new long[]{storeVersion} );\n         int length = bits.getShort( 8 );\n         if ( length == 0 || length > 7 )\n         {\n@@ -785,7 +754,7 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n     public TransactionId getUpgradeTransaction()\n     {\n         assertNotClosed();\n-        checkInitialized( upgradeTxIdField  );\n+        checkInitialized( upgradeTxIdField );\n         return upgradeTransaction;\n     }\n \n@@ -857,12 +826,13 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n     {\n         boolean onPar = lastClosedTx.getHighestGapFreeNumber() == lastCommittingTxField.get();\n         if ( !onPar )\n-        {   // Trigger some logging here, max logged every 30 secs or so\n-            transactionCloseWaitLogger.info( format(\n-                    \"Waiting for all transactions to close...%n committed:  %s%n  committing: %s%n  closed:     %s\",\n+        {\n+    // Trigger some logging here, max logged every 30 secs or so\n+            transactionCloseWaitLogger.info( format( \"Waiting for all transactions to close...%n committed:  %s%n  committing: %s%n  closed:     %s\",\n                     highestCommittedTransaction.get(), lastCommittingTxField, lastClosedTx ) );\n         }\n-        return onPar;\n+\n+return onPar;\n     }\n \n     public void logRecords( final Logger msgLog )\n@@ -878,9 +848,8 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n                 }\n                 while ( cursor.shouldRetry() );\n                 boolean bounds = cursor.checkAndClearBoundsFlag();\n-                msgLog.log( position.name() + \" (\" + position.description() + \"): \" + value +\n-                            (bounds ? \" (out-of-bounds detected; value cannot be trusted)\" : \"\"));\n-            }\n+                msgLog.log( position.name() + \" (\" + position.description() + \"): \" + value + ( bounds ? \" (out-of-bounds detected; value cannot be trusted)\" : \"\" ));\n+    }\n             return false;\n         } );\n     }\n@@ -892,20 +861,20 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n     }\n \n     @Override\n-    public <FAILURE extends Exception> void accept(\n-            org.neo4j.kernel.impl.store.RecordStore.Processor<FAILURE> processor, MetaDataRecord record )\n-                    throws FAILURE\n-    {\n+    public <FAILURE extends Exception> void accept( org.neo4j.kernel.impl.store.RecordStore.Processor<FAILURE> processor, MetaDataRecord record ) throws FAILURE\n+{\n         throw new UnsupportedOperationException();\n     }\n \n     @Override\n     public void prepareForCommit( MetaDataRecord record )\n-    {   // No need to do anything with these records before commit\n+    {\n+    // No need to do anything with these records before commit\n     }\n \n     @Override\n     public void prepareForCommit( MetaDataRecord record, IdSequence idSequence )\n-    {   // No need to do anything with these records before commit\n+    {\n+    // No need to do anything with these records before commit\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 99
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 1,187).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "124",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "144",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 223).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "146",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 201).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "213",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "257",
                    "column": "27",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "275",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "25",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "304",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "316",
                    "column": "59",
                    "severity": "error",
                    "message": "'%' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "326",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 318).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "338",
                    "column": "9",
                    "severity": "error",
                    "message": "'synchronized' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "338",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "9",
                    "severity": "error",
                    "message": "'synchronized' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "349",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "383",
                    "column": "9",
                    "severity": "error",
                    "message": "'synchronized' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "383",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "399",
                    "column": "9",
                    "severity": "error",
                    "message": "'synchronized' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "399",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "417",
                    "column": "9",
                    "severity": "error",
                    "message": "'synchronized' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "417",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "427",
                    "column": "9",
                    "severity": "error",
                    "message": "'synchronized' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "427",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "442",
                    "column": "9",
                    "severity": "error",
                    "message": "'synchronized' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "442",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "445",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "472",
                    "column": "47",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "488",
                    "column": "9",
                    "severity": "error",
                    "message": "'synchronized' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "488",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "504",
                    "column": "9",
                    "severity": "error",
                    "message": "'synchronized' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "504",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "520",
                    "column": "9",
                    "severity": "error",
                    "message": "'synchronized' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "520",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "545",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 226).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "550",
                    "column": "1",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "554",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 281).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "595",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "657",
                    "column": "25",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "686",
                    "column": "25",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "728",
                    "column": "13",
                    "severity": "error",
                    "message": "'synchronized' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "728",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "738",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "825",
                    "column": "13",
                    "severity": "error",
                    "message": "'synchronized' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "825",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "828",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "851",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 225).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "861",
                    "column": "49",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "870",
                    "column": "53",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "873",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 202).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3664/MetaDataStore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/3664/MetaDataStore.java\nindex 6136b419e85..98f0d84aaab 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3664/MetaDataStore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/3664/MetaDataStore.java\n@@ -24,7 +24,6 @@ import java.io.IOException;\n import java.nio.file.OpenOption;\n import java.util.concurrent.TimeoutException;\n import java.util.concurrent.atomic.AtomicLong;\n-\n import org.neo4j.helpers.collection.Visitor;\n import org.neo4j.io.pagecache.PageCache;\n import org.neo4j.io.pagecache.PageCursor;\n@@ -48,69 +47,63 @@ import org.neo4j.kernel.impl.util.OutOfOrderSequence;\n import org.neo4j.logging.LogProvider;\n import org.neo4j.logging.Logger;\n import org.neo4j.time.Clocks;\n-\n import static java.lang.String.format;\n+\n import static java.util.concurrent.TimeUnit.SECONDS;\n+\n import static org.neo4j.io.pagecache.PagedFile.PF_SHARED_READ_LOCK;\n+\n import static org.neo4j.io.pagecache.PagedFile.PF_SHARED_WRITE_LOCK;\n+\n import static org.neo4j.kernel.impl.store.format.standard.MetaDataRecordFormat.FIELD_NOT_PRESENT;\n+\n import static org.neo4j.kernel.impl.store.format.standard.MetaDataRecordFormat.RECORD_SIZE;\n+\n import static org.neo4j.kernel.impl.store.record.RecordLoad.FORCE;\n+\n import static org.neo4j.kernel.impl.store.record.RecordLoad.NORMAL;\n \n public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHeader>\n-        implements TransactionIdStore, LogVersionRepository\n+implements TransactionIdStore, LogVersionRepository\n {\n     public static final String TYPE_DESCRIPTOR = \"NeoStore\";\n     // This value means the field has not been refreshed from the store. Normally, this should happen only once\n+\n     public static final long FIELD_NOT_INITIALIZED = Long.MIN_VALUE;\n     /*\n      *  9 longs in header (long + in use), time | random | version | txid | store version | graph next prop | latest\n      *  constraint tx | upgrade time | upgrade id\n      */\n+\n     public static final String DEFAULT_NAME = \"neostore\";\n     // Positions of meta-data records\n \n     public enum Position\n-    {\n-        TIME( 0, \"Creation time\" ),\n-        RANDOM_NUMBER( 1, \"Random number for store id\" ),\n-        LOG_VERSION( 2, \"Current log version\" ),\n-        LAST_TRANSACTION_ID( 3, \"Last committed transaction\" ),\n-        STORE_VERSION( 4, \"Store format version\" ),\n-        FIRST_GRAPH_PROPERTY( 5, \"First property record containing graph properties\" ),\n-        LAST_CONSTRAINT_TRANSACTION( 6, \"Last committed transaction containing constraint changes\" ),\n-        UPGRADE_TRANSACTION_ID( 7, \"Transaction id most recent upgrade was performed at\" ),\n-        UPGRADE_TIME( 8, \"Time of last upgrade\" ),\n-        LAST_TRANSACTION_CHECKSUM( 9, \"Checksum of last committed transaction\" ),\n-        UPGRADE_TRANSACTION_CHECKSUM( 10, \"Checksum of transaction id the most recent upgrade was performed at\" ),\n-        LAST_CLOSED_TRANSACTION_LOG_VERSION( 11, \"Log version where the last transaction commit entry has been written into\" ),\n-        LAST_CLOSED_TRANSACTION_LOG_BYTE_OFFSET( 12, \"Byte offset in the log file where the last transaction commit entry \" +\n-                                                     \"has been written into\" ),\n-        LAST_TRANSACTION_COMMIT_TIMESTAMP( 13, \"Commit time timestamp for last committed transaction\" ),\n-        UPGRADE_TRANSACTION_COMMIT_TIMESTAMP( 14, \"Commit timestamp of transaction the most recent upgrade was performed at\" );\n-\n-        private final int id;\n-        private final String description;\n-\n-        Position( int id, String description )\n-        {\n-            this.id = id;\n-            this.description = description;\n-        }\n+    { TIME( 0, \"Creation time\" ), RANDOM_NUMBER( 1, \"Random number for store id\" ), LOG_VERSION( 2, \"Current log version\" ), LAST_TRANSACTION_ID( 3, \"Last committed transaction\" ), STORE_VERSION( 4, \"Store format version\" ), FIRST_GRAPH_PROPERTY( 5, \"First property record containing graph properties\" ), LAST_CONSTRAINT_TRANSACTION( 6, \"Last committed transaction containing constraint changes\" ), UPGRADE_TRANSACTION_ID( 7, \"Transaction id most recent upgrade was performed at\" ), UPGRADE_TIME( 8, \"Time of last upgrade\" ), LAST_TRANSACTION_CHECKSUM( 9, \"Checksum of last committed transaction\" ), UPGRADE_TRANSACTION_CHECKSUM( 10, \"Checksum of transaction id the most recent upgrade was performed at\" ), LAST_CLOSED_TRANSACTION_LOG_VERSION( 11, \"Log version where the last transaction commit entry has been written into\" ), LAST_CLOSED_TRANSACTION_LOG_BYTE_OFFSET( 12, \"Byte offset in the log file where the last transaction commit entry \" + \"has been written into\" ), LAST_TRANSACTION_COMMIT_TIMESTAMP( 13, \"Commit time timestamp for last committed transaction\" ), UPGRADE_TRANSACTION_COMMIT_TIMESTAMP( 14, \"Commit timestamp of transaction the most recent upgrade was performed at\" )\n+        ;\n+            private final int id;\n+            private final String description;\n \n-        public int id()\n-        {\n-            return id;\n-        }\n+            Position( int id, String description )\n+            {\n+                this.id = id;\n+                this.description = description;\n+            }\n+\n+            public int id()\n+            {\n+                return id;\n+            }\n+\n+            public String description()\n+            {\n+                return description;\n+            }\n \n-        public String description()\n-        {\n-            return description;\n-        }\n     }\n \n     // Fields the neostore keeps cached and must be initialized on startup\n+\n     private volatile long creationTimeField = FIELD_NOT_INITIALIZED;\n     private volatile long randomNumberField = FIELD_NOT_INITIALIZED;\n     private volatile long versionField = FIELD_NOT_INITIALIZED;\n@@ -124,23 +117,20 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n     private volatile long upgradeTxChecksumField = FIELD_NOT_INITIALIZED;\n     private volatile long upgradeTimeField = FIELD_NOT_INITIALIZED;\n     private volatile long upgradeCommitTimestampField = FIELD_NOT_INITIALIZED;\n-\n-    private volatile TransactionId upgradeTransaction = new TransactionId( FIELD_NOT_INITIALIZED,\n-            FIELD_NOT_INITIALIZED, FIELD_NOT_INITIALIZED );\n+    private volatile TransactionId upgradeTransaction = new TransactionId( FIELD_NOT_INITIALIZED, FIELD_NOT_INITIALIZED, FIELD_NOT_INITIALIZED );\n \n     // This is not a field in the store, but something keeping track of which is the currently highest\n     // committed transaction id, together with its checksum.\n-    private final HighestTransactionId highestCommittedTransaction =\n-            new HighestTransactionId( FIELD_NOT_INITIALIZED, FIELD_NOT_INITIALIZED, FIELD_NOT_INITIALIZED );\n+    private final HighestTransactionId highestCommittedTransaction = new HighestTransactionId( FIELD_NOT_INITIALIZED, FIELD_NOT_INITIALIZED, FIELD_NOT_INITIALIZED );\n \n     // This is not a field in the store, but something keeping track of which of the committed\n     // transactions have been closed. Useful in rotation and shutdown.\n-    private final OutOfOrderSequence lastClosedTx = new ArrayQueueOutOfOrderSequence( -1, 200, new long[2] );\n+    private final OutOfOrderSequence lastClosedTx = new ArrayQueueOutOfOrderSequence( - 1, 200, new long[2] );\n \n     // We use these objects and their monitors as \"entity\" locks on the records, because page write locks are not\n     // exclusive. Therefor, these locks are only used when *writing* records, not when reading them.\n     private final Object upgradeTimeLock = new Object();\n-    private final Object creationTimeLock  = new Object();\n+    private final Object creationTimeLock = new Object();\n     private final Object randomNumberLock = new Object();\n     private final Object upgradeTransactionLock = new Object();\n     private final Object logVersionLock = new Object();\n@@ -149,17 +139,11 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n     private final Object lastConstraintIntroducingTxLock = new Object();\n     private final Object transactionCommittedLock = new Object();\n     private final Object transactionClosedLock = new Object();\n-\n     private final CappedLogger transactionCloseWaitLogger;\n \n-    MetaDataStore( File fileName, Config conf,\n-            IdGeneratorFactory idGeneratorFactory,\n-            PageCache pageCache, LogProvider logProvider, RecordFormat<MetaDataRecord> recordFormat,\n-            String storeVersion,\n-            OpenOption... openOptions )\n+    MetaDataStore( File fileName, Config conf, IdGeneratorFactory idGeneratorFactory, PageCache pageCache, LogProvider logProvider, RecordFormat<MetaDataRecord> recordFormat, String storeVersion, OpenOption... openOptions )\n     {\n-        super( fileName, conf, IdType.NEOSTORE_BLOCK, idGeneratorFactory, pageCache, logProvider,\n-                TYPE_DESCRIPTOR, recordFormat, NoStoreHeaderFormat.NO_STORE_HEADER_FORMAT, storeVersion, openOptions );\n+        super( fileName, conf, IdType.NEOSTORE_BLOCK, idGeneratorFactory, pageCache, logProvider, TYPE_DESCRIPTOR, recordFormat, NoStoreHeaderFormat.NO_STORE_HEADER_FORMAT, storeVersion, openOptions );\n         this.transactionCloseWaitLogger = new CappedLogger( logProvider.getLog( MetaDataStore.class ) );\n         transactionCloseWaitLogger.setTimeLimit( 30, SECONDS, Clocks.systemClock() );\n     }\n@@ -168,10 +152,8 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n     protected void initialiseNewStoreFile( PagedFile file ) throws IOException\n     {\n         super.initialiseNewStoreFile( file );\n-\n         long storeVersionAsLong = MetaDataStore.versionStringToLong( storeVersion );\n         StoreId storeId = new StoreId( storeVersionAsLong );\n-\n         storeFile = file;\n         setCreationTime( storeId.getCreationTime() );\n         setRandomNumber( storeId.getRandomId() );\n@@ -180,12 +162,10 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n         setUpgradeTime( storeId.getCreationTime() );\n         setUpgradeTransaction( BASE_TX_ID, BASE_TX_CHECKSUM, BASE_TX_COMMIT_TIMESTAMP );\n         setCurrentLogVersion( 0 );\n-        setLastCommittedAndClosedTransactionId(\n-                BASE_TX_ID, BASE_TX_CHECKSUM, BASE_TX_COMMIT_TIMESTAMP, BASE_TX_LOG_BYTE_OFFSET, BASE_TX_LOG_VERSION );\n+        setLastCommittedAndClosedTransactionId( BASE_TX_ID, BASE_TX_CHECKSUM, BASE_TX_COMMIT_TIMESTAMP, BASE_TX_LOG_BYTE_OFFSET, BASE_TX_LOG_VERSION );\n         setStoreVersion( storeVersionAsLong );\n-        setGraphNextProp( -1 );\n+        setGraphNextProp( - 1 );\n         setLatestConstraintIntroducingTx( 0 );\n-\n         flush();\n         storeFile = null;\n     }\n@@ -200,8 +180,7 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n     // Only for initialization and recovery, so we don't need to lock the records\n \n     @Override\n-    public void setLastCommittedAndClosedTransactionId(\n-            long transactionId, long checksum, long commitTimestamp, long byteOffset, long logVersion )\n+    public void setLastCommittedAndClosedTransactionId( long transactionId, long checksum, long commitTimestamp, long byteOffset, long logVersion )\n     {\n         assertNotClosed();\n         setRecord( Position.LAST_TRANSACTION_ID, transactionId );\n@@ -211,7 +190,7 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n         setRecord( Position.LAST_TRANSACTION_COMMIT_TIMESTAMP, commitTimestamp );\n         checkInitialized( lastCommittingTxField.get() );\n         lastCommittingTxField.set( transactionId );\n-        lastClosedTx.set( transactionId, new long[]{logVersion, byteOffset} );\n+        lastClosedTx.set( transactionId, new long[] { logVersion, byteOffset } );\n         highestCommittedTransaction.set( transactionId, checksum, commitTimestamp );\n     }\n     /**\n@@ -225,14 +204,17 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n      * @return the previous value before writing.\n      * @throws IOException if any I/O related error occurs.\n      */\n+\n     public static long setRecord( PageCache pageCache, File neoStore, Position position, long value ) throws IOException\n     {\n         long previousValue = FIELD_NOT_INITIALIZED;\n         int pageSize = getPageSize( pageCache );\n-        try ( PagedFile pagedFile = pageCache.map( neoStore, pageSize ) )\n+        try\n+        ( PagedFile pagedFile = pageCache.map( neoStore, pageSize ))\n         {\n             int offset = offset( position );\n-            try ( PageCursor cursor = pagedFile.io( 0, PagedFile.PF_SHARED_WRITE_LOCK ) )\n+            try\n+            ( PageCursor cursor = pagedFile.io( 0, PagedFile.PF_SHARED_WRITE_LOCK ))\n             {\n                 if ( cursor.next() )\n                 {\n@@ -240,13 +222,13 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n                     cursor.setOffset( offset );\n                     byte inUse = cursor.getByte();\n                     long record = cursor.getLong();\n-\n                     if ( inUse == Record.IN_USE.byteValue() )\n                     {\n                         previousValue = record;\n                     }\n \n                     // Write the value\n+\n                     cursor.setOffset( offset );\n                     cursor.putByte( Record.IN_USE.byteValue() );\n                     cursor.putLong( value );\n@@ -254,25 +236,25 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n                     {\n                         MetaDataRecord neoStoreRecord = new MetaDataRecord();\n                         neoStoreRecord.setId( position.id );\n-                        throw new UnderlyingStorageException( buildOutOfBoundsExceptionMessage(\n-                                neoStoreRecord, 0, offset, RECORD_SIZE, pageSize, neoStore.getAbsolutePath() ) );\n+                        throw new UnderlyingStorageException( buildOutOfBoundsExceptionMessage( neoStoreRecord, 0, offset, RECORD_SIZE, pageSize, neoStore.getAbsolutePath() ) );\n                     }\n                 }\n             }\n         }\n+\n         return previousValue;\n     }\n \n     private void initHighId()\n     {\n         Position[] values = Position.values();\n-        long highestPossibleId = values[values.length - 1].id;\n+        long highestPossibleId = values[ values.length - 1].id;\n         setHighestPossibleIdInUse( highestPossibleId );\n     }\n \n     private static int offset( Position position )\n     {\n-        return RECORD_SIZE * position.id;\n+        return RECORD_SIZE* position.id;\n     }\n \n     /**\n@@ -283,16 +265,19 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n      * @param position record {@link Position}.\n      * @return the read record value specified by {@link Position}.\n      */\n+\n     public static long getRecord( PageCache pageCache, File neoStore, Position position ) throws IOException\n     {\n         MetaDataRecordFormat format = new MetaDataRecordFormat();\n         int pageSize = getPageSize( pageCache );\n         long value = FIELD_NOT_PRESENT;\n-        try ( PagedFile pagedFile = pageCache.map( neoStore, pageSize ) )\n+        try\n+        ( PagedFile pagedFile = pageCache.map( neoStore, pageSize ))\n         {\n             if ( pagedFile.getLastPageId() >= 0 )\n             {\n-                try ( PageCursor cursor = pagedFile.io( 0, PF_SHARED_READ_LOCK ) )\n+                try\n+                    ( PageCursor cursor = pagedFile.io( 0, PF_SHARED_READ_LOCK ))\n                 {\n                     if ( cursor.next() )\n                     {\n@@ -310,23 +295,25 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n                                 value = FIELD_NOT_PRESENT;\n                             }\n                         }\n-                        while ( cursor.shouldRetry() );\n+\n+                        while( cursor.shouldRetry()\n+                        );\n                         if ( cursor.checkAndClearBoundsFlag() )\n                         {\n                             int offset = offset( position );\n-                            throw new UnderlyingStorageException( buildOutOfBoundsExceptionMessage(\n-                                    record, 0, offset, RECORD_SIZE, pageSize, neoStore.getAbsolutePath() ) );\n+                            throw new UnderlyingStorageException( buildOutOfBoundsExceptionMessage( record, 0, offset, RECORD_SIZE, pageSize, neoStore.getAbsolutePath() ) );\n                         }\n                     }\n                 }\n             }\n         }\n+\n         return value;\n     }\n \n     static int getPageSize( PageCache pageCache )\n     {\n-        return pageCache.pageSize() - pageCache.pageSize() % RECORD_SIZE;\n+        return pageCache.pageSize() - pageCache.pageSize()% RECORD_SIZE;\n     }\n \n     public StoreId getStoreId()\n@@ -336,13 +323,7 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n \n     public static StoreId getStoreId( PageCache pageCache, File neoStore ) throws IOException\n     {\n-        return new StoreId(\n-                getRecord( pageCache, neoStore, Position.TIME ),\n-                getRecord( pageCache, neoStore, Position.RANDOM_NUMBER ),\n-                getRecord( pageCache, neoStore, Position.STORE_VERSION ),\n-                getRecord( pageCache, neoStore, Position.UPGRADE_TIME ),\n-                getRecord( pageCache, neoStore, Position.UPGRADE_TRANSACTION_ID )\n-        );\n+        return new StoreId( getRecord( pageCache, neoStore, Position.TIME ), getRecord( pageCache, neoStore, Position.RANDOM_NUMBER ), getRecord( pageCache, neoStore, Position.STORE_VERSION ), getRecord( pageCache, neoStore, Position.UPGRADE_TIME ), getRecord( pageCache, neoStore, Position.UPGRADE_TRANSACTION_ID ) );\n     }\n \n     public long getUpgradeTime()\n@@ -354,7 +335,7 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n \n     public void setUpgradeTime( long time )\n     {\n-        synchronized ( upgradeTimeLock )\n+        synchronized( upgradeTimeLock)\n         {\n             setRecord( Position.UPGRADE_TIME, time );\n             upgradeTimeField = time;\n@@ -365,14 +346,16 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n     {\n         long pageId = pageIdForRecord( Position.UPGRADE_TRANSACTION_ID.id );\n         assert pageId == pageIdForRecord( Position.UPGRADE_TRANSACTION_CHECKSUM.id );\n-        synchronized ( upgradeTransactionLock )\n+        synchronized( upgradeTransactionLock)\n         {\n-            try ( PageCursor cursor = storeFile.io( pageId, PF_SHARED_WRITE_LOCK ) )\n+            try\n+                ( PageCursor cursor = storeFile.io( pageId, PF_SHARED_WRITE_LOCK ))\n             {\n-                if ( !cursor.next() )\n+                if ( ! cursor.next() )\n                 {\n                     throw new UnderlyingStorageException( \"Could not access MetaDataStore page \" + pageId );\n                 }\n+\n                 setRecord( cursor, Position.UPGRADE_TRANSACTION_ID, id );\n                 setRecord( cursor, Position.UPGRADE_TRANSACTION_CHECKSUM, checksum );\n                 setRecord( cursor, Position.UPGRADE_TRANSACTION_COMMIT_TIMESTAMP, timestamp );\n@@ -381,10 +364,10 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n                 upgradeCommitTimestampField = timestamp;\n                 upgradeTransaction = new TransactionId( id, checksum, timestamp );\n             }\n-            catch ( IOException e )\n-            {\n-                throw new UnderlyingStorageException( e );\n-            }\n+                catch ( IOException e )\n+                {\n+                    throw new UnderlyingStorageException( e );\n+                }\n         }\n     }\n \n@@ -397,7 +380,7 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n \n     public void setCreationTime( long time )\n     {\n-        synchronized ( creationTimeLock )\n+        synchronized( creationTimeLock)\n         {\n             setRecord( Position.TIME, time );\n             creationTimeField = time;\n@@ -413,7 +396,7 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n \n     public void setRandomNumber( long nr )\n     {\n-        synchronized ( randomNumberLock )\n+        synchronized( randomNumberLock)\n         {\n             setRecord( Position.RANDOM_NUMBER, nr );\n             randomNumberField = nr;\n@@ -431,7 +414,7 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n     @Override\n     public void setCurrentLogVersion( long version )\n     {\n-        synchronized ( logVersionLock )\n+        synchronized( logVersionLock)\n         {\n             setRecord( Position.LOG_VERSION, version );\n             versionField = version;\n@@ -441,7 +424,7 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n     public void setLastTransactionCommitTimestamp( long timestamp )\n     {\n         // Preventing race with transactionCommitted() and assure record is consistent with highestCommittedTransaction\n-        synchronized ( transactionCommittedLock )\n+        synchronized( transactionCommittedLock)\n         {\n             setRecord( Position.LAST_TRANSACTION_COMMIT_TIMESTAMP, timestamp );\n             TransactionId transactionId = highestCommittedTransaction.get();\n@@ -456,33 +439,37 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n         // and be effectively single-threaded.\n         long pageId = pageIdForRecord( Position.LOG_VERSION.id );\n         long version;\n-        synchronized ( logVersionLock )\n+        synchronized( logVersionLock)\n         {\n-            try ( PageCursor cursor = storeFile.io( pageId, PF_SHARED_WRITE_LOCK ) )\n+            try\n+                ( PageCursor cursor = storeFile.io( pageId, PF_SHARED_WRITE_LOCK ))\n             {\n                 if ( cursor.next() )\n                 {\n                     incrementVersion( cursor );\n                 }\n+\n                 version = versionField;\n             }\n-            catch ( IOException e )\n-            {\n-                throw new UnderlyingStorageException( e );\n-            }\n+                catch ( IOException e )\n+                {\n+                    throw new UnderlyingStorageException( e );\n+                }\n         }\n+\n         flush(); // make sure the new version value is persisted\n         return version;\n     }\n \n     private void incrementVersion( PageCursor cursor )\n     {\n-        if ( !cursor.isWriteLocked() )\n+        if ( ! cursor.isWriteLocked() )\n         {\n             throw new IllegalArgumentException( \"Cannot increment log version on page cursor that is not write-locked\" );\n         }\n         // offsets plus one to skip the inUse byte\n-        int offset = (Position.LOG_VERSION.id * getRecordSize()) + 1;\n+\n+        int offset = ( Position.LOG_VERSION.id* getRecordSize()) + 1;\n         long value = cursor.getLong( offset ) + 1;\n         cursor.putLong( offset, value );\n         checkForDecodingErrors( cursor, Position.LOG_VERSION.id, NORMAL );\n@@ -498,7 +485,7 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n \n     public void setStoreVersion( long version )\n     {\n-        synchronized ( storeVersionLock )\n+        synchronized( storeVersionLock)\n         {\n             setRecord( Position.STORE_VERSION, version );\n             storeVersionField = version;\n@@ -514,7 +501,7 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n \n     public void setGraphNextProp( long propId )\n     {\n-        synchronized ( graphNextPropLock )\n+        synchronized( graphNextPropLock)\n         {\n             setRecord( Position.FIRST_GRAPH_PROPERTY, propId );\n             graphNextPropField = propId;\n@@ -530,7 +517,7 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n \n     public void setLatestConstraintIntroducingTx( long latestConstraintIntroducingTx )\n     {\n-        synchronized ( lastConstraintIntroducingTxLock )\n+        synchronized( lastConstraintIntroducingTxLock)\n         {\n             setRecord( Position.LAST_CONSTRAINT_TRANSACTION, latestConstraintIntroducingTx );\n             latestConstraintIntroducingTxField = latestConstraintIntroducingTx;\n@@ -554,25 +541,17 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n             upgradeTimeField = getRecordValue( cursor, Position.UPGRADE_TIME );\n             long lastClosedTransactionLogVersion = getRecordValue( cursor, Position.LAST_CLOSED_TRANSACTION_LOG_VERSION );\n             long lastClosedTransactionLogByteOffset = getRecordValue( cursor, Position.LAST_CLOSED_TRANSACTION_LOG_BYTE_OFFSET );\n-            lastClosedTx.set( lastCommittedTxId,\n-                    new long[]{lastClosedTransactionLogVersion, lastClosedTransactionLogByteOffset} );\n-            highestCommittedTransaction.set( lastCommittedTxId,\n-                    getRecordValue( cursor, Position.LAST_TRANSACTION_CHECKSUM ),\n-                    getRecordValue( cursor, Position.LAST_TRANSACTION_COMMIT_TIMESTAMP, UNKNOWN_TX_COMMIT_TIMESTAMP\n-                    ) );\n-            upgradeCommitTimestampField = getRecordValue( cursor, Position.UPGRADE_TRANSACTION_COMMIT_TIMESTAMP,\n-                    BASE_TX_COMMIT_TIMESTAMP );\n-\n-            upgradeTransaction = new TransactionId( upgradeTxIdField, upgradeTxChecksumField,\n-                    upgradeCommitTimestampField );\n+            lastClosedTx.set( lastCommittedTxId, new long[] { lastClosedTransactionLogVersion, lastClosedTransactionLogByteOffset } );\n+            highestCommittedTransaction.set( lastCommittedTxId, getRecordValue( cursor, Position.LAST_TRANSACTION_CHECKSUM ), getRecordValue( cursor, Position.LAST_TRANSACTION_COMMIT_TIMESTAMP, UNKNOWN_TX_COMMIT_TIMESTAMP ) );\n+            upgradeCommitTimestampField = getRecordValue( cursor, Position.UPGRADE_TRANSACTION_COMMIT_TIMESTAMP, BASE_TX_COMMIT_TIMESTAMP );\n+            upgradeTransaction = new TransactionId( upgradeTxIdField, upgradeTxChecksumField, upgradeCommitTimestampField );\n         }\n-        while ( cursor.shouldRetry() );\n+\n+while( cursor.shouldRetry()\n+);\n         if ( cursor.checkAndClearBoundsFlag() )\n         {\n-            throw new UnderlyingStorageException(\n-                    \"Out of page bounds when reading all meta-data fields. The page in question is page \" +\n-                    cursor.getCurrentPageId() + \" of file \" + storageFileName.getAbsolutePath() + \", which is \" +\n-                    cursor.getCurrentPageSize() + \" bytes in size\" );\n+            throw new UnderlyingStorageException( \"Out of page bounds when reading all meta-data fields. The page in question is page \" + cursor.getCurrentPageId() + \" of file \" + storageFileName.getAbsolutePath() + \", which is \" + cursor.getCurrentPageSize() + \" bytes in size\" );\n         }\n     }\n \n@@ -592,6 +571,7 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n             {\n                 return record.getValue();\n             }\n+\n             return defaultValue;\n         }\n         catch ( IOException e )\n@@ -603,25 +583,26 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n     private void refreshFields()\n     {\n         scanAllFields( PF_SHARED_READ_LOCK, element ->\n-        {\n-            readAllFields( element );\n-            return false;\n-        } );\n+                                            {\n+                                                readAllFields( element );\n+                                                return false;\n+                                            } );\n     }\n \n     private void scanAllFields( int pf_flags, Visitor<PageCursor,IOException> visitor )\n     {\n-        try ( PageCursor cursor = storeFile.io( 0, pf_flags ) )\n+        try\n+            ( PageCursor cursor = storeFile.io( 0, pf_flags ))\n         {\n             if ( cursor.next() )\n             {\n                 visitor.visit( cursor );\n             }\n         }\n-        catch ( IOException e )\n-        {\n-            throw new UnderlyingStorageException( e );\n-        }\n+            catch ( IOException e )\n+            {\n+                throw new UnderlyingStorageException( e );\n+            }\n     }\n \n     private void setRecord( Position position, long value )\n@@ -634,10 +615,11 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n \n     private void setRecord( PageCursor cursor, Position position, long value )\n     {\n-        if ( !cursor.isWriteLocked() )\n+        if ( ! cursor.isWriteLocked() )\n         {\n             throw new IllegalArgumentException( \"Cannot write record without a page cursor that is write-locked\" );\n         }\n+\n         int offset = offsetForId( position.id );\n         cursor.setOffset( offset );\n         cursor.putByte( Record.IN_USE.byteValue() );\n@@ -662,51 +644,56 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n      * helicopters. Anyway, it should suffice for some time and by then\n      * it should have become SEP.\n      */\n+\n     public static long versionStringToLong( String storeVersion )\n     {\n         if ( CommonAbstractStore.UNKNOWN_VERSION.equals( storeVersion ) )\n         {\n-            return -1;\n+            return - 1;\n         }\n+\n         Bits bits = Bits.bits( 8 );\n         int length = storeVersion.length();\n-        if ( length == 0 || length > 7 )\n+        if ( length == 0|| length > 7 )\n         {\n-            throw new IllegalArgumentException( format(\n-                    \"The given string %s is not of proper size for a store version string\", storeVersion ) );\n+            throw new IllegalArgumentException( format( \"The given string %s is not of proper size for a store version string\", storeVersion ) );\n         }\n+\n         bits.put( length, 8 );\n         for ( int i = 0; i < length; i++ )\n         {\n             char c = storeVersion.charAt( i );\n             if ( c >= 256 )\n             {\n-                throw new IllegalArgumentException( format(\n-                        \"Store version strings should be encode-able as Latin1 - %s is not\", storeVersion ) );\n+                throw new IllegalArgumentException( format( \"Store version strings should be encode-able as Latin1 - %s is not\", storeVersion ) );\n             }\n+\n             bits.put( c, 8 ); // Just the lower byte\n         }\n+\n         return bits.getLong();\n     }\n \n     public static String versionLongToString( long storeVersion )\n     {\n-        if ( storeVersion == -1 )\n+        if ( storeVersion == - 1 )\n         {\n             return CommonAbstractStore.UNKNOWN_VERSION;\n         }\n+\n         Bits bits = Bits.bitsFromLongs( new long[]{storeVersion} );\n         int length = bits.getShort( 8 );\n-        if ( length == 0 || length > 7 )\n+        if ( length == 0|| length > 7 )\n         {\n-            throw new IllegalArgumentException( format( \"The read version string length %d is not proper.\",\n-                    length ) );\n+            throw new IllegalArgumentException( format( \"The read version string length %d is not proper.\", length ) );\n         }\n+\n         char[] result = new char[length];\n         for ( int i = 0; i < length; i++ )\n         {\n             result[i] = (char) bits.getShort( 8 );\n         }\n+\n         return new String( result );\n     }\n \n@@ -738,7 +725,7 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n             // 1. page write locks are not exclusive\n             // 2. the records might be in different pages\n             // 3. some other thread might kick in while we have been written only one record\n-            synchronized ( transactionCommittedLock )\n+            synchronized( transactionCommittedLock)\n             {\n                 // Double-check with highest tx id under the lock, so that there haven't been\n                 // another higher transaction committed between our id being accepted and\n@@ -747,7 +734,8 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n                 {\n                     long pageId = pageIdForRecord( Position.LAST_TRANSACTION_ID.id );\n                     assert pageId == pageIdForRecord( Position.LAST_TRANSACTION_CHECKSUM.id );\n-                    try ( PageCursor cursor = storeFile.io( pageId, PF_SHARED_WRITE_LOCK ) )\n+                    try\n+                    ( PageCursor cursor = storeFile.io( pageId, PF_SHARED_WRITE_LOCK ))\n                     {\n                         if ( cursor.next() )\n                         {\n@@ -785,7 +773,7 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n     public TransactionId getUpgradeTransaction()\n     {\n         assertNotClosed();\n-        checkInitialized( upgradeTxIdField  );\n+        checkInitialized( upgradeTxIdField );\n         return upgradeTransaction;\n     }\n \n@@ -818,6 +806,7 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n      *\n      * @param field the value\n      */\n+\n     private void checkInitialized( long field )\n     {\n         if ( field == FIELD_NOT_INITIALIZED )\n@@ -829,25 +818,26 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n     @Override\n     public void transactionClosed( long transactionId, long logVersion, long byteOffset )\n     {\n-        if ( lastClosedTx.offer( transactionId, new long[]{logVersion, byteOffset} ) )\n+        if ( lastClosedTx.offer( transactionId, new long[] { logVersion, byteOffset } ) )\n         {\n             long pageId = pageIdForRecord( Position.LAST_CLOSED_TRANSACTION_LOG_VERSION.id );\n             assert pageId == pageIdForRecord( Position.LAST_CLOSED_TRANSACTION_LOG_BYTE_OFFSET.id );\n-            synchronized ( transactionClosedLock )\n+            synchronized( transactionClosedLock)\n             {\n-                try ( PageCursor cursor = storeFile.io( pageId, PF_SHARED_WRITE_LOCK ) )\n+                try\n+                    ( PageCursor cursor = storeFile.io( pageId, PF_SHARED_WRITE_LOCK ))\n                 {\n                     if ( cursor.next() )\n                     {\n                         long[] lastClosedTransactionData = lastClosedTx.get();\n-                        setRecord( cursor, Position.LAST_CLOSED_TRANSACTION_LOG_VERSION, lastClosedTransactionData[1] );\n-                        setRecord( cursor, Position.LAST_CLOSED_TRANSACTION_LOG_BYTE_OFFSET, lastClosedTransactionData[2] );\n+                        setRecord( cursor, Position.LAST_CLOSED_TRANSACTION_LOG_VERSION, lastClosedTransactionData[ 1] );\n+                        setRecord( cursor, Position.LAST_CLOSED_TRANSACTION_LOG_BYTE_OFFSET, lastClosedTransactionData[ 2] );\n                     }\n                 }\n-                catch ( IOException e )\n-                {\n-                    throw new UnderlyingStorageException( e );\n-                }\n+                    catch ( IOException e )\n+                    {\n+                        throw new UnderlyingStorageException( e );\n+                    }\n             }\n         }\n     }\n@@ -856,33 +846,35 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n     public boolean closedTransactionIdIsOnParWithOpenedTransactionId()\n     {\n         boolean onPar = lastClosedTx.getHighestGapFreeNumber() == lastCommittingTxField.get();\n-        if ( !onPar )\n+        if ( ! onPar )\n         {   // Trigger some logging here, max logged every 30 secs or so\n-            transactionCloseWaitLogger.info( format(\n-                    \"Waiting for all transactions to close...%n committed:  %s%n  committing: %s%n  closed:     %s\",\n-                    highestCommittedTransaction.get(), lastCommittingTxField, lastClosedTx ) );\n+            transactionCloseWaitLogger.info( format( \"Waiting for all transactions to close...%n committed:  %s%n  committing: %s%n  closed:     %s\", highestCommittedTransaction.get(), lastCommittingTxField, lastClosedTx ) );\n         }\n+\n         return onPar;\n     }\n \n     public void logRecords( final Logger msgLog )\n     {\n         scanAllFields( PF_SHARED_READ_LOCK, cursor ->\n-        {\n-            for ( Position position : Position.values() )\n-            {\n-                long value;\n-                do\n-                {\n-                    value = getRecordValue( cursor, position );\n-                }\n-                while ( cursor.shouldRetry() );\n-                boolean bounds = cursor.checkAndClearBoundsFlag();\n-                msgLog.log( position.name() + \" (\" + position.description() + \"): \" + value +\n-                            (bounds ? \" (out-of-bounds detected; value cannot be trusted)\" : \"\"));\n-            }\n-            return false;\n-        } );\n+                                            {\n+                                                for( Position position : Position.values()\n+                                                )\n+                                                {\n+                                                    long value;\n+                                                    do\n+                                                    {\n+                                                        value = getRecordValue( cursor, position );\n+                                                    }\n+\n+                                                    while( cursor.shouldRetry()\n+                                                    );\n+                                                    boolean bounds = cursor.checkAndClearBoundsFlag();\n+                                                    msgLog.log( position.name() + \" (\" + position.description() + \"): \" + value + ( bounds ? \" (out-of-bounds detected; value cannot be trusted)\" : \"\") );\n+                                                }\n+\n+                                                return false;\n+                                            } );\n     }\n \n     @Override\n@@ -892,9 +884,7 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n     }\n \n     @Override\n-    public <FAILURE extends Exception> void accept(\n-            org.neo4j.kernel.impl.store.RecordStore.Processor<FAILURE> processor, MetaDataRecord record )\n-                    throws FAILURE\n+    public <FAILURE extends Exception> void accept( org.neo4j.kernel.impl.store.RecordStore.Processor<FAILURE> processor, MetaDataRecord record ) throws FAILURE\n     {\n         throw new UnsupportedOperationException();\n     }\n@@ -908,4 +898,4 @@ public class MetaDataStore extends CommonAbstractStore<MetaDataRecord,NoStoreHea\n     public void prepareForCommit( MetaDataRecord record, IdSequence idSequence )\n     {   // No need to do anything with these records before commit\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 233
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}