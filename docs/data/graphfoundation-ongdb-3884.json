{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3884",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "88",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "124",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "140",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "197",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "197",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "239",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "334",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "334",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "344",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "344",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3884/FreeIdKeeper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3884/FreeIdKeeper.java\nindex ecebd1f5a9d..6fb4c25a1ad 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3884/FreeIdKeeper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3884/FreeIdKeeper.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.id;\n \n import java.io.Closeable;\n@@ -47,306 +48,301 @@ import static org.neo4j.kernel.impl.store.id.IdContainer.NO_RESULT;\n  */\n public class FreeIdKeeper implements Closeable\n {\n-    private static final int ID_ENTRY_SIZE = Long.BYTES;\n-\n-    private final PrimitiveLongArrayQueue freeIds = new PrimitiveLongArrayQueue();\n-    private final PrimitiveLongArrayQueue readFromDisk = new PrimitiveLongArrayQueue();\n-    private final StoreChannel channel;\n-    private final int batchSize;\n-    private final boolean aggressiveMode;\n-\n-    private long freeIdCount;\n-\n-    /**\n-     * Keeps the position where batches of IDs will be flushed out to.\n-     * This can be viewed as being put on top of a stack.\n-     */\n-    private long stackPosition;\n-\n-    /**\n-     * The position before we started this run.\n-     * <p>\n-     * Useful to keep track of the gap that will form in non-aggressive mode\n-     * when IDs from old runs get reused and newly freed IDs are put on top\n-     * of the stack. During a clean shutdown the gap will be compacted away.\n-     * <p>\n-     * During an aggressive run a gap is never formed since batches of free\n-     * IDs are flushed on top of the stack (end of file) and also read in\n-     * from the top of the stack.\n-     */\n-    private long initialPosition;\n-\n-    /**\n-     * A keeper of freed IDs.\n-     *\n-     * @param channel a channel to the free ID file.\n-     * @param batchSize the number of IDs which are read/written to disk in one go.\n-     * @param aggressiveMode whether to reuse freed IDs during this lifecycle.\n-     * @throws IOException if an I/O error occurs.\n-     */\n-    FreeIdKeeper( StoreChannel channel, int batchSize, boolean aggressiveMode ) throws IOException\n-    {\n-        this.channel = channel;\n-        this.batchSize = batchSize;\n-        this.aggressiveMode = aggressiveMode;\n+  private static final int ID_ENTRY_SIZE = Long.BYTES;\n \n-        this.initialPosition = channel.size();\n-        this.stackPosition = initialPosition;\n-        this.freeIdCount = stackPosition / ID_ENTRY_SIZE;\n-    }\n+  private final PrimitiveLongArrayQueue freeIds = new PrimitiveLongArrayQueue();\n+  private final PrimitiveLongArrayQueue readFromDisk = new PrimitiveLongArrayQueue();\n+  private final StoreChannel channel;\n+  private final int batchSize;\n+  private final boolean aggressiveMode;\n+\n+  private long freeIdCount;\n+\n+  /**\n+   * Keeps the position where batches of IDs will be flushed out to.\n+   * This can be viewed as being put on top of a stack.\n+   */\n+  private long stackPosition;\n+\n+  /**\n+   * The position before we started this run.\n+   * <p>\n+   * Useful to keep track of the gap that will form in non-aggressive mode\n+   * when IDs from old runs get reused and newly freed IDs are put on top\n+   * of the stack. During a clean shutdown the gap will be compacted away.\n+   * <p>\n+   * During an aggressive run a gap is never formed since batches of free\n+   * IDs are flushed on top of the stack (end of file) and also read in\n+   * from the top of the stack.\n+   */\n+  private long initialPosition;\n+\n+  /**\n+   * A keeper of freed IDs.\n+   *\n+   * @param channel        a channel to the free ID file.\n+   * @param batchSize      the number of IDs which are read/written to disk in one go.\n+   * @param aggressiveMode whether to reuse freed IDs during this lifecycle.\n+   * @throws IOException if an I/O error occurs.\n+   */\n+  FreeIdKeeper(StoreChannel channel, int batchSize, boolean aggressiveMode) throws IOException\n+  {\n+    this.channel = channel;\n+    this.batchSize = batchSize;\n+    this.aggressiveMode = aggressiveMode;\n+\n+    this.initialPosition = channel.size();\n+    this.stackPosition = initialPosition;\n+    this.freeIdCount = stackPosition / ID_ENTRY_SIZE;\n+  }\n+\n+  static long countFreeIds(StoreChannel channel) throws IOException\n+  {\n+    return channel.size() / ID_ENTRY_SIZE;\n+  }\n \n-    static long countFreeIds( StoreChannel channel ) throws IOException\n+  public void freeId(long id)\n+  {\n+    freeIds.enqueue(id);\n+    freeIdCount++;\n+\n+    if (freeIds.size() >= batchSize)\n     {\n-        return channel.size() / ID_ENTRY_SIZE;\n+      long endPosition = flushFreeIds(ByteBuffer.allocate(batchSize * ID_ENTRY_SIZE));\n+      if (aggressiveMode)\n+      {\n+        stackPosition = endPosition;\n+      }\n     }\n+  }\n \n-    public void freeId( long id )\n+  private void truncate(long position)\n+  {\n+    try\n+    {\n+      channel.truncate(position);\n+    } catch (IOException e)\n     {\n-        freeIds.enqueue( id );\n-        freeIdCount++;\n-\n-        if ( freeIds.size() >= batchSize )\n-        {\n-            long endPosition = flushFreeIds( ByteBuffer.allocate( batchSize * ID_ENTRY_SIZE ) );\n-            if ( aggressiveMode )\n-            {\n-                stackPosition = endPosition;\n-            }\n-        }\n+      throw new UnderlyingStorageException(\"Failed to truncate\", e);\n     }\n+  }\n \n-    private void truncate( long position )\n+  public long getId()\n+  {\n+    long result;\n+    if (freeIds.size() > 0 && aggressiveMode)\n+    {\n+      result = freeIds.dequeue();\n+      freeIdCount--;\n+    } else\n     {\n-        try\n-        {\n-            channel.truncate( position );\n-        }\n-        catch ( IOException e )\n-        {\n-            throw new UnderlyingStorageException( \"Failed to truncate\", e );\n-        }\n+      result = getIdFromDisk();\n+      if (result != NO_RESULT)\n+      {\n+        freeIdCount--;\n+      }\n     }\n+    return result;\n+  }\n \n-    public long getId()\n+  public long[] getIds(int numberOfIds)\n+  {\n+    if (freeIdCount == 0)\n     {\n-        long result;\n-        if ( freeIds.size() > 0 && aggressiveMode )\n-        {\n-            result = freeIds.dequeue();\n-            freeIdCount--;\n-        }\n-        else\n-        {\n-            result = getIdFromDisk();\n-            if ( result != NO_RESULT )\n-            {\n-                freeIdCount--;\n-            }\n-        }\n-        return result;\n+      return PrimitiveLongCollections.EMPTY_LONG_ARRAY;\n     }\n-\n-    public long[] getIds( int numberOfIds )\n+    int reusableIds = (int) min(numberOfIds, freeIdCount);\n+    long[] ids = new long[reusableIds];\n+    int cursor = 0;\n+    while ((cursor < reusableIds) && !freeIds.isEmpty())\n     {\n-        if ( freeIdCount == 0 )\n-        {\n-            return PrimitiveLongCollections.EMPTY_LONG_ARRAY;\n-        }\n-        int reusableIds = (int) min( numberOfIds, freeIdCount );\n-        long[] ids = new long[reusableIds];\n-        int cursor = 0;\n-        while ( (cursor < reusableIds) && !freeIds.isEmpty() )\n-        {\n-            ids[cursor++] = freeIds.dequeue();\n-        }\n-        while ( cursor < reusableIds )\n-        {\n-            ids[cursor++] = getIdFromDisk();\n-        }\n-        freeIdCount -= reusableIds;\n-        return ids;\n+      ids[cursor++] = freeIds.dequeue();\n     }\n+    while (cursor < reusableIds)\n+    {\n+      ids[cursor++] = getIdFromDisk();\n+    }\n+    freeIdCount -= reusableIds;\n+    return ids;\n+  }\n \n-    private long getIdFromDisk()\n+  private long getIdFromDisk()\n+  {\n+    if (readFromDisk.isEmpty())\n+    {\n+      readIdBatch();\n+    }\n+    if (!readFromDisk.isEmpty())\n+    {\n+      return readFromDisk.dequeue();\n+    } else\n     {\n-        if ( readFromDisk.isEmpty() )\n-        {\n-            readIdBatch();\n-        }\n-        if ( !readFromDisk.isEmpty() )\n-        {\n-            return readFromDisk.dequeue();\n-        }\n-        else\n-        {\n-            return NO_RESULT;\n-        }\n+      return NO_RESULT;\n     }\n+  }\n \n-    public long getCount()\n+  public long getCount()\n+  {\n+    return freeIdCount;\n+  }\n+\n+  /*\n+   * After this method returns, if there were any entries found, they are placed in the readFromDisk list.\n+   */\n+  private void readIdBatch()\n+  {\n+    try\n+    {\n+      readIdBatch0();\n+    } catch (IOException e)\n     {\n-        return freeIdCount;\n+      throw new UnderlyingStorageException(\"Failed reading free id batch\", e);\n     }\n+  }\n \n-    /*\n-     * After this method returns, if there were any entries found, they are placed in the readFromDisk list.\n-     */\n-    private void readIdBatch()\n+  private void readIdBatch0() throws IOException\n+  {\n+    if (stackPosition == 0)\n     {\n-        try\n-        {\n-            readIdBatch0();\n-        }\n-        catch ( IOException e )\n-        {\n-            throw new UnderlyingStorageException( \"Failed reading free id batch\", e );\n-        }\n+      return;\n     }\n \n-    private void readIdBatch0() throws IOException\n+    long startPosition = max(stackPosition - batchSize * ID_ENTRY_SIZE, 0);\n+    int bytesToRead = toIntExact(stackPosition - startPosition);\n+    ByteBuffer readBuffer = ByteBuffer.allocate(bytesToRead);\n+\n+    channel.position(startPosition);\n+    channel.readAll(readBuffer);\n+    stackPosition = startPosition;\n+\n+    readBuffer.flip();\n+    int idsRead = bytesToRead / ID_ENTRY_SIZE;\n+    for (int i = 0; i < idsRead; i++)\n     {\n-        if ( stackPosition == 0 )\n-        {\n-            return;\n-        }\n-\n-        long startPosition = max( stackPosition - batchSize * ID_ENTRY_SIZE, 0 );\n-        int bytesToRead = toIntExact( stackPosition - startPosition );\n-        ByteBuffer readBuffer = ByteBuffer.allocate( bytesToRead );\n-\n-        channel.position( startPosition );\n-        channel.readAll( readBuffer );\n-        stackPosition = startPosition;\n-\n-        readBuffer.flip();\n-        int idsRead = bytesToRead / ID_ENTRY_SIZE;\n-        for ( int i = 0; i < idsRead; i++ )\n-        {\n-            long id = readBuffer.getLong();\n-            readFromDisk.enqueue( id );\n-        }\n-        if ( aggressiveMode )\n-        {\n-            truncate( startPosition );\n-        }\n+      long id = readBuffer.getLong();\n+      readFromDisk.enqueue(id);\n     }\n+    if (aggressiveMode)\n+    {\n+      truncate(startPosition);\n+    }\n+  }\n \n-    /**\n-     * Flushes the currently collected in-memory freed IDs to the storage.\n-     */\n-    private long flushFreeIds( ByteBuffer writeBuffer )\n+  /**\n+   * Flushes the currently collected in-memory freed IDs to the storage.\n+   */\n+  private long flushFreeIds(ByteBuffer writeBuffer)\n+  {\n+    try\n+    {\n+      return flushFreeIds0(writeBuffer);\n+    } catch (IOException e)\n     {\n-        try\n-        {\n-            return flushFreeIds0( writeBuffer );\n-        }\n-        catch ( IOException e )\n-        {\n-            throw new UnderlyingStorageException( \"Unable to write free id batch\", e );\n-        }\n+      throw new UnderlyingStorageException(\"Unable to write free id batch\", e);\n     }\n+  }\n \n-    private long flushFreeIds0( ByteBuffer writeBuffer ) throws IOException\n+  private long flushFreeIds0(ByteBuffer writeBuffer) throws IOException\n+  {\n+    channel.position(channel.size());\n+    writeBuffer.clear();\n+    while (!freeIds.isEmpty())\n     {\n-        channel.position( channel.size() );\n-        writeBuffer.clear();\n-        while ( !freeIds.isEmpty() )\n-        {\n-            long id = freeIds.dequeue();\n-            if ( id == NO_RESULT )\n-            {\n-                continue;\n-            }\n-            writeBuffer.putLong( id );\n-            if ( writeBuffer.position() == writeBuffer.capacity() )\n-            {\n-                writeBuffer.flip();\n-                channel.writeAll( writeBuffer );\n-                writeBuffer.clear();\n-            }\n-        }\n+      long id = freeIds.dequeue();\n+      if (id == NO_RESULT)\n+      {\n+        continue;\n+      }\n+      writeBuffer.putLong(id);\n+      if (writeBuffer.position() == writeBuffer.capacity())\n+      {\n         writeBuffer.flip();\n-        if ( writeBuffer.hasRemaining() )\n-        {\n-            channel.writeAll( writeBuffer );\n-        }\n-        return channel.position();\n+        channel.writeAll(writeBuffer);\n+        writeBuffer.clear();\n+      }\n     }\n+    writeBuffer.flip();\n+    if (writeBuffer.hasRemaining())\n+    {\n+      channel.writeAll(writeBuffer);\n+    }\n+    return channel.position();\n+  }\n \n-    /*\n-     * Writes both freeIds and readFromDisk lists to disk and truncates the channel to size.\n-     * It forces but does not close the channel.\n-     */\n-    @Override\n-    public void close() throws IOException\n+  /*\n+   * Writes both freeIds and readFromDisk lists to disk and truncates the channel to size.\n+   * It forces but does not close the channel.\n+   */\n+  @Override\n+  public void close() throws IOException\n+  {\n+    ByteBuffer writeBuffer = ByteBuffer.allocate(batchSize * ID_ENTRY_SIZE);\n+    flushFreeIds(writeBuffer);\n+    freeIds.addAll(readFromDisk);\n+    flushFreeIds(writeBuffer);\n+    if (!aggressiveMode)\n     {\n-        ByteBuffer writeBuffer = ByteBuffer.allocate( batchSize * ID_ENTRY_SIZE );\n-        flushFreeIds( writeBuffer );\n-        freeIds.addAll( readFromDisk );\n-        flushFreeIds( writeBuffer );\n-        if ( !aggressiveMode )\n-        {\n-            compact( writeBuffer );\n-        }\n-        channel.force( false );\n+      compact(writeBuffer);\n     }\n+    channel.force(false);\n+  }\n \n-    /**\n-     * Compacts away the gap which will form in non-aggressive (regular) mode\n-     * when batches are read in from disk.\n-     * <p>\n-     * The gap will contain already used IDs so it is important to remove it\n-     * on a clean shutdown. The freed IDs will not be reused after an\n-     * unclean shutdown, as guaranteed by the external user.\n-     * <pre>\n-     * Below diagram tries to explain the situation\n-     *\n-     *   S = old IDs which are still free (on the Stack)\n-     *   G = the Gap which has formed, due to consuming old IDs\n-     *   N = the New IDs which have been freed during this run (will be compacted to the left)\n-     *\n-     *     stackPosition\n-     *          v\n-     * [ S S S S G G G N N N N N N N N ]\n-     *                ^\n-     *          initialPosition\n-     * </pre>\n-     * After compaction the state will be:\n-     * <pre>\n-     * [ S S S S N N N N N N N N ]\n-     * </pre>\n-     * and the last part of the file is truncated.\n-     */\n-    private void compact( ByteBuffer writeBuffer ) throws IOException\n+  /**\n+   * Compacts away the gap which will form in non-aggressive (regular) mode\n+   * when batches are read in from disk.\n+   * <p>\n+   * The gap will contain already used IDs so it is important to remove it\n+   * on a clean shutdown. The freed IDs will not be reused after an\n+   * unclean shutdown, as guaranteed by the external user.\n+   * <pre>\n+   * Below diagram tries to explain the situation\n+   *\n+   *   S = old IDs which are still free (on the Stack)\n+   *   G = the Gap which has formed, due to consuming old IDs\n+   *   N = the New IDs which have been freed during this run (will be compacted to the left)\n+   *\n+   *     stackPosition\n+   *          v\n+   * [ S S S S G G G N N N N N N N N ]\n+   *                ^\n+   *          initialPosition\n+   * </pre>\n+   * After compaction the state will be:\n+   * <pre>\n+   * [ S S S S N N N N N N N N ]\n+   * </pre>\n+   * and the last part of the file is truncated.\n+   */\n+  private void compact(ByteBuffer writeBuffer) throws IOException\n+  {\n+    assert stackPosition <= initialPosition; // the stack can only be consumed in regular mode\n+    if (initialPosition == stackPosition)\n     {\n-        assert stackPosition <= initialPosition; // the stack can only be consumed in regular mode\n-        if ( initialPosition == stackPosition )\n-        {\n-            // there is no compaction to be done\n-            return;\n-        }\n-\n-        long writePosition = stackPosition;\n-        long readPosition = initialPosition; // readPosition to end of file contain new free IDs, to be compacted\n-        int nBytes;\n-        do\n-        {\n-            writeBuffer.clear();\n-            channel.position( readPosition );\n-            nBytes = channel.read( writeBuffer );\n-\n-            if ( nBytes > 0 )\n-            {\n-                readPosition += nBytes;\n-\n-                writeBuffer.flip();\n-                channel.position( writePosition );\n-                channel.writeAll( writeBuffer );\n-                writePosition += nBytes;\n-            }\n-        }\n-        while ( nBytes > 0 );\n-\n-        channel.truncate( writePosition );\n+      // there is no compaction to be done\n+      return;\n     }\n+\n+    long writePosition = stackPosition;\n+    long readPosition = initialPosition; // readPosition to end of file contain new free IDs, to be compacted\n+    int nBytes;\n+    do\n+    {\n+      writeBuffer.clear();\n+      channel.position(readPosition);\n+      nBytes = channel.read(writeBuffer);\n+\n+      if (nBytes > 0)\n+      {\n+        readPosition += nBytes;\n+\n+        writeBuffer.flip();\n+        channel.position(writePosition);\n+        channel.writeAll(writeBuffer);\n+        writePosition += nBytes;\n+      }\n+    }\n+    while (nBytes > 0);\n+\n+    channel.truncate(writePosition);\n+  }\n }\n",
            "diff_size": 436
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}