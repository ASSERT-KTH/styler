{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1473",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "67",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1473/Representation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1473/Representation.java\nindex ba60a77a2bc..588c4aa88fd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1473/Representation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1473/Representation.java\n@@ -17,103 +17,104 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.server.rest.repr;\n \n import java.net.URI;\n \n public abstract class Representation\n {\n-    // non-inlineable constants\n-    public static final String GRAPHDB = RepresentationType.GRAPHDB.valueName;\n-    public static final String INDEX = RepresentationType.INDEX.valueName;\n-    public static final String NODE_INDEXES = RepresentationType.NODE_INDEX_ROOT.valueName;\n-    public static final String RELATIONSHIP_INDEXES = RepresentationType.RELATIONSHIP_INDEX_ROOT.valueName;\n-    public static final String NODE = RepresentationType.NODE.valueName;\n-    public static final String NODE_LIST = RepresentationType.NODE.listName;\n-    public static final String RELATIONSHIP = RepresentationType.RELATIONSHIP.valueName;\n-    public static final String RELATIONSHIP_LIST = RepresentationType.RELATIONSHIP.listName;\n-    public static final String PATH = RepresentationType.PATH.valueName;\n-    public static final String PATH_LIST = RepresentationType.PATH.listName;\n-    public static final String RELATIONSHIP_TYPE = RepresentationType.RELATIONSHIP_TYPE.valueName;\n-    public static final String PROPERTIES_MAP = RepresentationType.PROPERTIES.valueName;\n-    public static final String EXTENSIONS_MAP = RepresentationType.PLUGINS.valueName;\n-    public static final String EXTENSION = RepresentationType.PLUGIN.valueName;\n-    public static final String URI = RepresentationType.URI.valueName;\n-    public static final String URI_TEMPLATE = RepresentationType.TEMPLATE.valueName;\n-    public static final String STRING = RepresentationType.STRING.valueName;\n-    public static final String STRING_LIST = RepresentationType.STRING.listName;\n-    public static final String BYTE = RepresentationType.BYTE.valueName;\n-    public static final String BYTE_LIST = RepresentationType.BYTE.listName;\n-    public static final String CHARACTER = RepresentationType.CHAR.valueName;\n-    public static final String CHARACTER_LIST = RepresentationType.CHAR.listName;\n-    public static final String SHORT = RepresentationType.SHORT.valueName;\n-    public static final String SHORT_LIST = RepresentationType.SHORT.listName;\n-    public static final String INTEGER = RepresentationType.INTEGER.valueName;\n-    public static final String INTEGER_LIST = RepresentationType.INTEGER.listName;\n-    public static final String LONG = RepresentationType.LONG.valueName;\n-    public static final String LONG_LIST = RepresentationType.LONG.listName;\n-    public static final String FLOAT = RepresentationType.FLOAT.valueName;\n-    public static final String FLOAT_LIST = RepresentationType.FLOAT.listName;\n-    public static final String DOUBLE = RepresentationType.DOUBLE.valueName;\n-    public static final String DOUBLE_LIST = RepresentationType.DOUBLE.listName;\n-    public static final String BOOLEAN = RepresentationType.BOOLEAN.valueName;\n-    public static final String BOOLEAN_LIST = RepresentationType.BOOLEAN.listName;\n-    public static final String EXCEPTION = RepresentationType.EXCEPTION.valueName;\n-    public static final String MAP = RepresentationType.MAP.valueName;\n+  // non-inlineable constants\n+  public static final String GRAPHDB = RepresentationType.GRAPHDB.valueName;\n+  public static final String INDEX = RepresentationType.INDEX.valueName;\n+  public static final String NODE_INDEXES = RepresentationType.NODE_INDEX_ROOT.valueName;\n+  public static final String RELATIONSHIP_INDEXES = RepresentationType.RELATIONSHIP_INDEX_ROOT.valueName;\n+  public static final String NODE = RepresentationType.NODE.valueName;\n+  public static final String NODE_LIST = RepresentationType.NODE.listName;\n+  public static final String RELATIONSHIP = RepresentationType.RELATIONSHIP.valueName;\n+  public static final String RELATIONSHIP_LIST = RepresentationType.RELATIONSHIP.listName;\n+  public static final String PATH = RepresentationType.PATH.valueName;\n+  public static final String PATH_LIST = RepresentationType.PATH.listName;\n+  public static final String RELATIONSHIP_TYPE = RepresentationType.RELATIONSHIP_TYPE.valueName;\n+  public static final String PROPERTIES_MAP = RepresentationType.PROPERTIES.valueName;\n+  public static final String EXTENSIONS_MAP = RepresentationType.PLUGINS.valueName;\n+  public static final String EXTENSION = RepresentationType.PLUGIN.valueName;\n+  public static final String URI = RepresentationType.URI.valueName;\n+  public static final String URI_TEMPLATE = RepresentationType.TEMPLATE.valueName;\n+  public static final String STRING = RepresentationType.STRING.valueName;\n+  public static final String STRING_LIST = RepresentationType.STRING.listName;\n+  public static final String BYTE = RepresentationType.BYTE.valueName;\n+  public static final String BYTE_LIST = RepresentationType.BYTE.listName;\n+  public static final String CHARACTER = RepresentationType.CHAR.valueName;\n+  public static final String CHARACTER_LIST = RepresentationType.CHAR.listName;\n+  public static final String SHORT = RepresentationType.SHORT.valueName;\n+  public static final String SHORT_LIST = RepresentationType.SHORT.listName;\n+  public static final String INTEGER = RepresentationType.INTEGER.valueName;\n+  public static final String INTEGER_LIST = RepresentationType.INTEGER.listName;\n+  public static final String LONG = RepresentationType.LONG.valueName;\n+  public static final String LONG_LIST = RepresentationType.LONG.listName;\n+  public static final String FLOAT = RepresentationType.FLOAT.valueName;\n+  public static final String FLOAT_LIST = RepresentationType.FLOAT.listName;\n+  public static final String DOUBLE = RepresentationType.DOUBLE.valueName;\n+  public static final String DOUBLE_LIST = RepresentationType.DOUBLE.listName;\n+  public static final String BOOLEAN = RepresentationType.BOOLEAN.valueName;\n+  public static final String BOOLEAN_LIST = RepresentationType.BOOLEAN.listName;\n+  public static final String EXCEPTION = RepresentationType.EXCEPTION.valueName;\n+  public static final String MAP = RepresentationType.MAP.valueName;\n \n-    final RepresentationType type;\n+  final RepresentationType type;\n \n-    Representation( RepresentationType type )\n-    {\n-        this.type = type;\n-    }\n+  Representation(RepresentationType type)\n+  {\n+    this.type = type;\n+  }\n \n-    Representation( String type )\n-    {\n-        this.type = new RepresentationType( type );\n-    }\n+  Representation(String type)\n+  {\n+    this.type = new RepresentationType(type);\n+  }\n \n-    public RepresentationType getRepresentationType()\n-    {\n-        return this.type;\n-    }\n+  public RepresentationType getRepresentationType()\n+  {\n+    return this.type;\n+  }\n \n-    abstract String serialize( RepresentationFormat format, URI baseUri, ExtensionInjector extensions );\n+  abstract String serialize(RepresentationFormat format, URI baseUri, ExtensionInjector extensions);\n \n-    abstract void addTo( ListSerializer serializer );\n+  abstract void addTo(ListSerializer serializer);\n \n-    abstract void putTo( MappingSerializer serializer, String key );\n+  abstract void putTo(MappingSerializer serializer, String key);\n \n-    boolean isEmpty()\n-    {\n-        return false;\n-    }\n+  boolean isEmpty()\n+  {\n+    return false;\n+  }\n \n-    public static Representation emptyRepresentation()\n+  public static Representation emptyRepresentation()\n+  {\n+    return new Representation((RepresentationType) null)\n     {\n-        return new Representation( (RepresentationType) null )\n-        {\n-            @Override\n-            boolean isEmpty()\n-            {\n-                return true;\n-            }\n+      @Override\n+      boolean isEmpty()\n+      {\n+        return true;\n+      }\n \n-            @Override\n-            String serialize( RepresentationFormat format, URI baseUri, ExtensionInjector extensions )\n-            {\n-                return \"\";\n-            }\n+      @Override\n+      String serialize(RepresentationFormat format, URI baseUri, ExtensionInjector extensions)\n+      {\n+        return \"\";\n+      }\n \n-            @Override\n-            void putTo( MappingSerializer serializer, String key )\n-            {\n-            }\n+      @Override\n+      void putTo(MappingSerializer serializer, String key)\n+      {\n+      }\n \n-            @Override\n-            void addTo( ListSerializer serializer )\n-            {\n-            }\n-        };\n-    }\n+      @Override\n+      void addTo(ListSerializer serializer)\n+      {\n+      }\n+    };\n+  }\n }\n",
            "diff_size": 83
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1473/Representation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1473/Representation.java\nindex ba60a77a2bc..c8f17447755 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1473/Representation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1473/Representation.java\n@@ -25,41 +25,76 @@ public abstract class Representation\n {\n     // non-inlineable constants\n     public static final String GRAPHDB = RepresentationType.GRAPHDB.valueName;\n-    public static final String INDEX = RepresentationType.INDEX.valueName;\n-    public static final String NODE_INDEXES = RepresentationType.NODE_INDEX_ROOT.valueName;\n-    public static final String RELATIONSHIP_INDEXES = RepresentationType.RELATIONSHIP_INDEX_ROOT.valueName;\n-    public static final String NODE = RepresentationType.NODE.valueName;\n-    public static final String NODE_LIST = RepresentationType.NODE.listName;\n-    public static final String RELATIONSHIP = RepresentationType.RELATIONSHIP.valueName;\n-    public static final String RELATIONSHIP_LIST = RepresentationType.RELATIONSHIP.listName;\n-    public static final String PATH = RepresentationType.PATH.valueName;\n-    public static final String PATH_LIST = RepresentationType.PATH.listName;\n-    public static final String RELATIONSHIP_TYPE = RepresentationType.RELATIONSHIP_TYPE.valueName;\n-    public static final String PROPERTIES_MAP = RepresentationType.PROPERTIES.valueName;\n-    public static final String EXTENSIONS_MAP = RepresentationType.PLUGINS.valueName;\n-    public static final String EXTENSION = RepresentationType.PLUGIN.valueName;\n-    public static final String URI = RepresentationType.URI.valueName;\n-    public static final String URI_TEMPLATE = RepresentationType.TEMPLATE.valueName;\n-    public static final String STRING = RepresentationType.STRING.valueName;\n-    public static final String STRING_LIST = RepresentationType.STRING.listName;\n-    public static final String BYTE = RepresentationType.BYTE.valueName;\n-    public static final String BYTE_LIST = RepresentationType.BYTE.listName;\n-    public static final String CHARACTER = RepresentationType.CHAR.valueName;\n-    public static final String CHARACTER_LIST = RepresentationType.CHAR.listName;\n-    public static final String SHORT = RepresentationType.SHORT.valueName;\n-    public static final String SHORT_LIST = RepresentationType.SHORT.listName;\n-    public static final String INTEGER = RepresentationType.INTEGER.valueName;\n-    public static final String INTEGER_LIST = RepresentationType.INTEGER.listName;\n-    public static final String LONG = RepresentationType.LONG.valueName;\n-    public static final String LONG_LIST = RepresentationType.LONG.listName;\n-    public static final String FLOAT = RepresentationType.FLOAT.valueName;\n-    public static final String FLOAT_LIST = RepresentationType.FLOAT.listName;\n-    public static final String DOUBLE = RepresentationType.DOUBLE.valueName;\n-    public static final String DOUBLE_LIST = RepresentationType.DOUBLE.listName;\n-    public static final String BOOLEAN = RepresentationType.BOOLEAN.valueName;\n-    public static final String BOOLEAN_LIST = RepresentationType.BOOLEAN.listName;\n-    public static final String EXCEPTION = RepresentationType.EXCEPTION.valueName;\n-    public static final String MAP = RepresentationType.MAP.valueName;\n+\n+public static final String INDEX = RepresentationType.INDEX.valueName;\n+\n+public static final String NODE_INDEXES = RepresentationType.NODE_INDEX_ROOT.valueName;\n+\n+public static final String RELATIONSHIP_INDEXES = RepresentationType.RELATIONSHIP_INDEX_ROOT.valueName;\n+\n+public static final String NODE = RepresentationType.NODE.valueName;\n+\n+public static final String NODE_LIST = RepresentationType.NODE.listName;\n+\n+public static final String RELATIONSHIP = RepresentationType.RELATIONSHIP.valueName;\n+\n+public static final String RELATIONSHIP_LIST = RepresentationType.RELATIONSHIP.listName;\n+\n+public static final String PATH = RepresentationType.PATH.valueName;\n+\n+public static final String PATH_LIST = RepresentationType.PATH.listName;\n+\n+public static final String RELATIONSHIP_TYPE = RepresentationType.RELATIONSHIP_TYPE.valueName;\n+\n+public static final String PROPERTIES_MAP = RepresentationType.PROPERTIES.valueName;\n+\n+public static final String EXTENSIONS_MAP = RepresentationType.PLUGINS.valueName;\n+\n+public static final String EXTENSION = RepresentationType.PLUGIN.valueName;\n+\n+public static final String URI = RepresentationType.URI.valueName;\n+\n+public static final String URI_TEMPLATE = RepresentationType.TEMPLATE.valueName;\n+\n+public static final String STRING = RepresentationType.STRING.valueName;\n+\n+public static final String STRING_LIST = RepresentationType.STRING.listName;\n+\n+public static final String BYTE = RepresentationType.BYTE.valueName;\n+\n+public static final String BYTE_LIST = RepresentationType.BYTE.listName;\n+\n+public static final String CHARACTER = RepresentationType.CHAR.valueName;\n+\n+public static final String CHARACTER_LIST = RepresentationType.CHAR.listName;\n+\n+public static final String SHORT = RepresentationType.SHORT.valueName;\n+\n+public static final String SHORT_LIST = RepresentationType.SHORT.listName;\n+\n+public static final String INTEGER = RepresentationType.INTEGER.valueName;\n+\n+public static final String INTEGER_LIST = RepresentationType.INTEGER.listName;\n+\n+public static final String LONG = RepresentationType.LONG.valueName;\n+\n+public static final String LONG_LIST = RepresentationType.LONG.listName;\n+\n+public static final String FLOAT = RepresentationType.FLOAT.valueName;\n+\n+public static final String FLOAT_LIST = RepresentationType.FLOAT.listName;\n+\n+public static final String DOUBLE = RepresentationType.DOUBLE.valueName;\n+\n+public static final String DOUBLE_LIST = RepresentationType.DOUBLE.listName;\n+\n+public static final String BOOLEAN = RepresentationType.BOOLEAN.valueName;\n+\n+public static final String BOOLEAN_LIST = RepresentationType.BOOLEAN.listName;\n+\n+public static final String EXCEPTION = RepresentationType.EXCEPTION.valueName;\n+\n+public static final String MAP = RepresentationType.MAP.valueName;\n \n     final RepresentationType type;\n \n@@ -116,4 +151,4 @@ public abstract class Representation\n             }\n         };\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 71
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}