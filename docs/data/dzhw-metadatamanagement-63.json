{
    "project_name": "dzhw-metadatamanagement",
    "error_id": "63",
    "information": {
        "errors": [
            {
                "line": "47",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n  @Override\n  public Optional<Question> findPredecessorOfShadowCopy(Question shadowCopy, String previousVersion) {\n    String shadowCopyId = shadowCopy + \"-\" + previousVersion;\n    return questionRepository.findById(shadowCopyId);\n  }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/63/QuestionShadowCopyDataSource.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/intellij/63/QuestionShadowCopyDataSource.java\nindex cbd6970010c..904c0c2b294 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/63/QuestionShadowCopyDataSource.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/intellij/63/QuestionShadowCopyDataSource.java\n@@ -44,7 +44,8 @@ public class QuestionShadowCopyDataSource implements ShadowCopyDataSource<Questi\n   }\n \n   @Override\n-  public Optional<Question> findPredecessorOfShadowCopy(Question shadowCopy, String previousVersion) {\n+  public Optional<Question> findPredecessorOfShadowCopy(Question shadowCopy,\n+                                                        String previousVersion) {\n     String shadowCopyId = shadowCopy + \"-\" + previousVersion;\n     return questionRepository.findById(shadowCopyId);\n   }\n@@ -61,7 +62,7 @@ public class QuestionShadowCopyDataSource implements ShadowCopyDataSource<Questi\n \n   @Override\n   public Stream<Question> findShadowCopiesWithDeletedMasters(String projectId,\n-      String lastVersion) {\n+                                                             String lastVersion) {\n     String oldProjectId = projectId + \"-\" + lastVersion;\n     return questionRepository\n         .streamByDataAcquisitionProjectIdAndSuccessorIdIsNullAndShadowIsTrue(oldProjectId)\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/63/QuestionShadowCopyDataSource.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/naturalize/63/QuestionShadowCopyDataSource.java\nindex cbd6970010c..9109d7f3396 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/63/QuestionShadowCopyDataSource.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/naturalize/63/QuestionShadowCopyDataSource.java\n@@ -72,4 +72,4 @@ public class QuestionShadowCopyDataSource implements ShadowCopyDataSource<Questi\n     return successorIds.stream().map(successorId -> successorId + \"-\" + version)\n         .collect(Collectors.toList());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "35",
                    "severity": "error",
                    "message": "'String' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "50",
                    "severity": "error",
                    "message": "'String' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "70",
                    "severity": "error",
                    "message": "'String' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 191).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "76",
                    "severity": "error",
                    "message": "'String' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/63/QuestionShadowCopyDataSource.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/codebuff/63/QuestionShadowCopyDataSource.java\nindex cbd6970010c..9abeeddd2a8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/63/QuestionShadowCopyDataSource.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/codebuff/63/QuestionShadowCopyDataSource.java\n@@ -4,10 +4,8 @@ import java.util.List;\n import java.util.Optional;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n-\n import org.springframework.beans.BeanUtils;\n import org.springframework.stereotype.Service;\n-\n import eu.dzhw.fdz.metadatamanagement.common.service.ShadowCopyDataSource;\n import eu.dzhw.fdz.metadatamanagement.questionmanagement.domain.Question;\n import eu.dzhw.fdz.metadatamanagement.questionmanagement.repository.QuestionRepository;\n@@ -15,23 +13,26 @@ import eu.dzhw.fdz.metadatamanagement.questionmanagement.repository.QuestionRepo\n /**\n  * Provides data for creating shadow copies of {@link Question}.\n  */\n+\n+\n @Service\n public class QuestionShadowCopyDataSource implements ShadowCopyDataSource<Question> {\n-\n   private QuestionRepository questionRepository;\n \n   public QuestionShadowCopyDataSource(QuestionRepository questionRepository) {\n     this.questionRepository = questionRepository;\n   }\n \n+\n   @Override\n   public Stream<Question> getMasters(String dataAcquisitionProjectId) {\n-    return questionRepository\n-        .streamByDataAcquisitionProjectIdAndShadowIsFalse(dataAcquisitionProjectId);\n+    return questionRepository.streamByDataAcquisitionProjectIdAndShadowIsFalse(dataAcquisitionProjectId);\n   }\n \n+\n   @Override\n-  public Question createShadowCopy(Question source, String version) {\n+  public Question createShadowCopy(Question source,\n+    String version) {\n     String derivedId = source.getId() + \"-\" + version;\n     Question copy = questionRepository.findById(derivedId).orElseGet(Question::new);\n     BeanUtils.copyProperties(source, copy, \"version\");\n@@ -43,33 +44,37 @@ public class QuestionShadowCopyDataSource implements ShadowCopyDataSource<Questi\n     return copy;\n   }\n \n+\n   @Override\n-  public Optional<Question> findPredecessorOfShadowCopy(Question shadowCopy, String previousVersion) {\n+  public Optional<Question> findPredecessorOfShadowCopy(Question shadowCopy,\n+    String previousVersion) {\n     String shadowCopyId = shadowCopy + \"-\" + previousVersion;\n     return questionRepository.findById(shadowCopyId);\n   }\n \n+\n   @Override\n   public void updatePredecessor(Question predecessor) {\n     questionRepository.save(predecessor);\n   }\n \n+\n   @Override\n   public void saveShadowCopy(Question shadowCopy) {\n     questionRepository.save(shadowCopy);\n   }\n \n+\n   @Override\n   public Stream<Question> findShadowCopiesWithDeletedMasters(String projectId,\n-      String lastVersion) {\n+    String lastVersion) {\n     String oldProjectId = projectId + \"-\" + lastVersion;\n-    return questionRepository\n-        .streamByDataAcquisitionProjectIdAndSuccessorIdIsNullAndShadowIsTrue(oldProjectId)\n-        .filter(shadowCopy -> !questionRepository.existsById(shadowCopy.getMasterId()));\n+    return questionRepository.streamByDataAcquisitionProjectIdAndSuccessorIdIsNullAndShadowIsTrue(oldProjectId).filter(shadowCopy -> !questionRepository.existsById(shadowCopy.getMasterId()));\n   }\n \n-  private List<String> createDerivedSuccessorIds(List<String> successorIds, String version) {\n+  private List<String> createDerivedSuccessorIds(List<String> successorIds,\n+    String version) {\n     return successorIds.stream().map(successorId -> successorId + \"-\" + version)\n-        .collect(Collectors.toList());\n+                                .collect(Collectors.toList());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}