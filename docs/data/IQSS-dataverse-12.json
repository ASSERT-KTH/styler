{
    "project_name": "IQSS-dataverse",
    "error_id": "12",
    "information": {
        "errors": [
            {
                "line": "235",
                "column": "12",
                "severity": "error",
                "message": "'{' at column 12 should have line break after.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
            }
        ]
    },
    "source_code": "        // (looks like we need to sleep for a few milliseconds here, to make sure \n        // it has already been updated with the \"inprogress\" setting)\n        try{Thread.sleep(500L);}catch(Exception e){}\n        \n        \n        configuredHarvestingClients = harvestingClientService.getAllHarvestingClients();",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/12/HarvestingClientsPage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/12/HarvestingClientsPage.java\nindex bc83c15dcd7..2d53188dd7a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/12/HarvestingClientsPage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/12/HarvestingClientsPage.java\n@@ -232,7 +232,8 @@ public class HarvestingClientsPage implements java.io.Serializable {\n         // for it:\n         // (looks like we need to sleep for a few milliseconds here, to make sure \n         // it has already been updated with the \"inprogress\" setting)\n-        try{Thread.sleep(500L);}catch(Exception e){}\n+        try {\n+        Thread.sleep(500L);}catch(Exception e){}\n         \n         \n         configuredHarvestingClients = harvestingClientService.getAllHarvestingClients();\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/12/HarvestingClientsPage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/12/HarvestingClientsPage.java\nindex bc83c15dcd7..2264916b8ae 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/12/HarvestingClientsPage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/12/HarvestingClientsPage.java\n@@ -3,6 +3,7 @@\n  * To change this template file, choose Tools | Templates\n  * and open the template in the editor.\n  */\n+\n package edu.harvard.iq.dataverse;\n \n import edu.harvard.iq.dataverse.authorization.AuthenticationServiceBean;\n@@ -43,1073 +44,1091 @@ import javax.servlet.http.HttpServletRequest;\n import org.apache.commons.lang3.StringUtils;\n \n /**\n- *\n  * @author Leonid Andreev\n  */\n @ViewScoped\n @Named\n public class HarvestingClientsPage implements java.io.Serializable {\n \n-    private static final Logger logger = Logger.getLogger(HarvestingClientsPage.class.getCanonicalName());\n-\n-    @Inject\n-    DataverseSession session;\n-    @EJB\n-    AuthenticationServiceBean authSvc;\n-    @EJB\n-    DataverseServiceBean dataverseService;\n-    @EJB\n-    HarvestingClientServiceBean harvestingClientService; \n-    @EJB\n-    HarvesterServiceBean harvesterService;\n-    @EJB\n-    DatasetServiceBean datasetService;\n-    @EJB\n-    IndexServiceBean indexService;\n-    @EJB\n-    EjbDataverseEngine engineService;\n-    @EJB\n-    DataverseTimerServiceBean dataverseTimerService;\n-    @Inject\n-    DataverseRequestServiceBean dvRequestService;\n-    @Inject\n-    NavigationWrapper navigationWrapper;\n- \n-    private List<HarvestingClient> configuredHarvestingClients;\n-    private Dataverse dataverse;\n-    private Long dataverseId = null;\n-    private HarvestingClient selectedClient;\n-    private boolean setListTruncated = false; \n-    \n-    //private static final String solrDocIdentifierDataset = \"dataset_\";\n-    \n-    public enum PageMode {\n-\n-        VIEW, CREATE, EDIT, DELETE\n-    }  \n-    private PageMode pageMode = PageMode.VIEW; \n-    \n-    public enum CreateStep {\n-        ONE, TWO, THREE, FOUR\n-    }\n-    \n-    private CreateStep createStep = CreateStep.ONE;\n-    \n-    private Dataverse selectedDestinationDataverse;\n+  private static final Logger logger = Logger.getLogger(HarvestingClientsPage.class.getCanonicalName());\n \n-    public void setSelectedDestinationDataverse(Dataverse dv) {\n-        this.selectedDestinationDataverse = dv;\n-    }\n+  @Inject\n+  DataverseSession session;\n+  @EJB\n+  AuthenticationServiceBean authSvc;\n+  @EJB\n+  DataverseServiceBean dataverseService;\n+  @EJB\n+  HarvestingClientServiceBean harvestingClientService;\n+  @EJB\n+  HarvesterServiceBean harvesterService;\n+  @EJB\n+  DatasetServiceBean datasetService;\n+  @EJB\n+  IndexServiceBean indexService;\n+  @EJB\n+  EjbDataverseEngine engineService;\n+  @EJB\n+  DataverseTimerServiceBean dataverseTimerService;\n+  @Inject\n+  DataverseRequestServiceBean dvRequestService;\n+  @Inject\n+  NavigationWrapper navigationWrapper;\n \n-    public Dataverse getSelectedDestinationDataverse() {\n-        return this.selectedDestinationDataverse;\n-    }\n-    \n-    public List<Dataverse> completeSelectedDataverse(String query) {\n-        return dataverseService.filterByAliasQuery(query);\n-    }\n-    \n-    public String init() {\n-        if (!isSessionUserAuthenticated()) {\n-            return \"/loginpage.xhtml\" + navigationWrapper.getRedirectPage();\n-        } else if (!isSuperUser()) {\n-            return navigationWrapper.notAuthorized(); \n-        }\n-        \n-        if (dataverseId != null) {\n-            setDataverse(dataverseService.find(getDataverseId()));\n-            if (getDataverse() == null) {\n-                return navigationWrapper.notFound();\n-            }\n-        } else {\n-            setDataverse(dataverseService.findRootDataverse());\n-        }\n-        \n-        configuredHarvestingClients = harvestingClientService.getAllHarvestingClients();\n-        \n-        pageMode = PageMode.VIEW;\n-        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, BundleUtil.getStringFromBundle(\"harvestclients.title\"), BundleUtil.getStringFromBundle(\"harvestclients.toptip\")));\n-        return null; \n-    }\n-    \n-    public List<HarvestingClient> getConfiguredHarvestingClients() {\n-        return configuredHarvestingClients; \n-    }\n-    \n-    public void setConfiguredHarvestingClients(List<HarvestingClient> configuredClients) {\n-        configuredHarvestingClients = configuredClients; \n-    }\n-    \n-    public Dataverse getDataverse() {\n-        return dataverse;\n-    }\n+  private List<HarvestingClient> configuredHarvestingClients;\n+  private Dataverse dataverse;\n+  private Long dataverseId = null;\n+  private HarvestingClient selectedClient;\n+  private boolean setListTruncated = false;\n \n-    public void setDataverse(Dataverse dataverse) {\n-        this.dataverse = dataverse;\n-    }\n+  //private static final String solrDocIdentifierDataset = \"dataset_\";\n \n-    public Long getDataverseId() {\n-        return dataverseId;\n-    }\n+  public enum PageMode {\n \n-    public void setDataverseId(Long dataverseId) {\n-        this.dataverseId = dataverseId;\n-    }\n-    \n-    public void setSelectedClient(HarvestingClient harvestingClient) {\n-        selectedClient = harvestingClient; \n-    }\n-    \n-    public void setClientForDelete(HarvestingClient harvestingClient) {\n-        selectedClient = harvestingClient;\n-        this.pageMode = PageMode.DELETE;\n-    }\n-    \n-    public HarvestingClient getSelectedClient() {\n-        return selectedClient; \n-    }\n-    \n-    public PageMode getPageMode() {\n-        return this.pageMode;\n-    } \n-    \n-    public void setPageMode(PageMode pageMode) {\n-        this.pageMode = pageMode;\n-    }\n-    \n-    public boolean isCreateMode() {\n-        return PageMode.CREATE == this.pageMode;\n-    }\n-    \n-    public boolean isEditMode() {\n-        return PageMode.EDIT == this.pageMode;\n-    }\n-    \n-    public boolean isViewMode() {\n-        return PageMode.VIEW == this.pageMode;\n+    VIEW, CREATE, EDIT, DELETE\n+  }\n+\n+  private PageMode pageMode = PageMode.VIEW;\n+\n+  public enum CreateStep {\n+    ONE, TWO, THREE, FOUR\n+  }\n+\n+  private CreateStep createStep = CreateStep.ONE;\n+\n+  private Dataverse selectedDestinationDataverse;\n+\n+  public void setSelectedDestinationDataverse(Dataverse dv) {\n+    this.selectedDestinationDataverse = dv;\n+  }\n+\n+  public Dataverse getSelectedDestinationDataverse() {\n+    return this.selectedDestinationDataverse;\n+  }\n+\n+  public List<Dataverse> completeSelectedDataverse(String query) {\n+    return dataverseService.filterByAliasQuery(query);\n+  }\n+\n+  public String init() {\n+    if (!isSessionUserAuthenticated()) {\n+      return \"/loginpage.xhtml\" + navigationWrapper.getRedirectPage();\n+    } else if (!isSuperUser()) {\n+      return navigationWrapper.notAuthorized();\n     }\n-    \n-    public boolean isDeleteMode() {\n-        return PageMode.DELETE == this.pageMode;\n+\n+    if (dataverseId != null) {\n+      setDataverse(dataverseService.find(getDataverseId()));\n+      if (getDataverse() == null) {\n+        return navigationWrapper.notFound();\n+      }\n+    } else {\n+      setDataverse(dataverseService.findRootDataverse());\n     }\n-    \n-    public boolean isCreateStepOne() {\n-        return CreateStep.ONE == this.createStep;\n+\n+    configuredHarvestingClients = harvestingClientService.getAllHarvestingClients();\n+\n+    pageMode = PageMode.VIEW;\n+    FacesContext.getCurrentInstance().addMessage(null,\n+      new FacesMessage(FacesMessage.SEVERITY_INFO, BundleUtil.getStringFromBundle(\"harvestclients.title\"),\n+        BundleUtil.getStringFromBundle(\"harvestclients.toptip\")));\n+    return null;\n+  }\n+\n+  public List<HarvestingClient> getConfiguredHarvestingClients() {\n+    return configuredHarvestingClients;\n+  }\n+\n+  public void setConfiguredHarvestingClients(List<HarvestingClient> configuredClients) {\n+    configuredHarvestingClients = configuredClients;\n+  }\n+\n+  public Dataverse getDataverse() {\n+    return dataverse;\n+  }\n+\n+  public void setDataverse(Dataverse dataverse) {\n+    this.dataverse = dataverse;\n+  }\n+\n+  public Long getDataverseId() {\n+    return dataverseId;\n+  }\n+\n+  public void setDataverseId(Long dataverseId) {\n+    this.dataverseId = dataverseId;\n+  }\n+\n+  public void setSelectedClient(HarvestingClient harvestingClient) {\n+    selectedClient = harvestingClient;\n+  }\n+\n+  public void setClientForDelete(HarvestingClient harvestingClient) {\n+    selectedClient = harvestingClient;\n+    this.pageMode = PageMode.DELETE;\n+  }\n+\n+  public HarvestingClient getSelectedClient() {\n+    return selectedClient;\n+  }\n+\n+  public PageMode getPageMode() {\n+    return this.pageMode;\n+  }\n+\n+  public void setPageMode(PageMode pageMode) {\n+    this.pageMode = pageMode;\n+  }\n+\n+  public boolean isCreateMode() {\n+    return PageMode.CREATE == this.pageMode;\n+  }\n+\n+  public boolean isEditMode() {\n+    return PageMode.EDIT == this.pageMode;\n+  }\n+\n+  public boolean isViewMode() {\n+    return PageMode.VIEW == this.pageMode;\n+  }\n+\n+  public boolean isDeleteMode() {\n+    return PageMode.DELETE == this.pageMode;\n+  }\n+\n+  public boolean isCreateStepOne() {\n+    return CreateStep.ONE == this.createStep;\n+  }\n+\n+  public boolean isCreateStepTwo() {\n+    return CreateStep.TWO == this.createStep;\n+  }\n+\n+  public boolean isCreateStepThree() {\n+    return CreateStep.THREE == this.createStep;\n+  }\n+\n+  public boolean isCreateStepFour() {\n+    return CreateStep.FOUR == this.createStep;\n+  }\n+\n+  public boolean isSetListTruncated() {\n+    return setListTruncated;\n+  }\n+\n+  public void runHarvest(HarvestingClient harvestingClient) {\n+    try {\n+      DataverseRequest dataverseRequest = new DataverseRequest(session.getUser(), (HttpServletRequest) null);\n+      harvesterService.doAsyncHarvest(dataverseRequest, harvestingClient);\n+    } catch (Exception ex) {\n+      String failMessage = BundleUtil.getStringFromBundle(\"harvest.start.error\");\n+      JH.addMessage(FacesMessage.SEVERITY_FATAL, failMessage);\n+      return;\n     }\n-    \n-    public boolean isCreateStepTwo() {\n-        return CreateStep.TWO == this.createStep;\n+\n+    String successMessage = BundleUtil.getStringFromBundle(\"harvestclients.actions.runharvest.success\");\n+    successMessage = successMessage.replace(\"{0}\", harvestingClient.getName());\n+    JsfHelper.addSuccessMessage(successMessage);\n+\n+    // refresh the harvesting clients list - we want this one to be showing\n+    // \"inprogress\"; and we want to be able to disable all the actions buttons\n+    // for it:\n+    // (looks like we need to sleep for a few milliseconds here, to make sure\n+    // it has already been updated with the \"inprogress\" setting)\n+    try {\n+      Thread.sleep(500L);\n+    } catch (Exception e) {\n     }\n-    \n-    public boolean isCreateStepThree() {\n-        return CreateStep.THREE == this.createStep;\n+\n+\n+    configuredHarvestingClients = harvestingClientService.getAllHarvestingClients();\n+\n+\n+  }\n+\n+  public void editClient(HarvestingClient harvestingClient) {\n+    setSelectedClient(harvestingClient);\n+\n+    this.newNickname = harvestingClient.getName();\n+    this.newHarvestingUrl = harvestingClient.getHarvestingUrl();\n+    this.initialSettingsValidated = false;\n+\n+    // TODO: do we want to try and contact the server, again, to make\n+    // sure the metadataformat and/or set are still supported?\n+    // and if not, what do we do?\n+    // alternatively, should we make these 2 fields not editable at all?\n+\n+    this.newOaiSet =\n+      !StringUtils.isEmpty(harvestingClient.getHarvestingSet()) ? harvestingClient.getHarvestingSet() : \"\";\n+    this.newMetadataFormat = harvestingClient.getMetadataPrefix();\n+    this.newHarvestingStyle = harvestingClient.getHarvestStyle();\n+\n+    this.harvestTypeRadio = harvestTypeRadioOAI;\n+\n+    if (harvestingClient.isScheduled()) {\n+      if (HarvestingClient.SCHEDULE_PERIOD_DAILY.equals(harvestingClient.getSchedulePeriod())) {\n+        this.harvestingScheduleRadio = harvestingScheduleRadioDaily;\n+        setHourOfDayAMPMfromInteger(harvestingClient.getScheduleHourOfDay());\n+\n+      } else if (HarvestingClient.SCHEDULE_PERIOD_WEEKLY.equals(harvestingClient.getSchedulePeriod())) {\n+        this.harvestingScheduleRadio = harvestingScheduleRadioWeekly;\n+        setHourOfDayAMPMfromInteger(harvestingClient.getScheduleHourOfDay());\n+        setWeekdayFromInteger(harvestingClient.getScheduleDayOfWeek());\n+\n+      } else {\n+        // ok, the client is marked as \"scheduled\" - but the actual\n+        // schedule type is not specified.\n+        // so we'll show it as unscheduled on the edit form:\n+        this.harvestingScheduleRadio = harvestingScheduleRadioNone;\n+        this.newHarvestingScheduleDayOfWeek = \"Sunday\";\n+        this.newHarvestingScheduleTimeOfDay = \"12\";\n+        this.harvestingScheduleRadioAMPM = harvestingScheduleRadioAM;\n+      }\n+    } else {\n+      this.harvestingScheduleRadio = harvestingScheduleRadioNone;\n+      // unscheduled; but we populate this values to act as the defaults\n+      // if they decide to schedule it and toggle the form to show the\n+      // time and/or day pulldowns:\n+      this.newHarvestingScheduleDayOfWeek = \"Sunday\";\n+      this.newHarvestingScheduleTimeOfDay = \"12\";\n+      this.harvestingScheduleRadioAMPM = harvestingScheduleRadioAM;\n     }\n-    \n-    public boolean isCreateStepFour() {\n-        return CreateStep.FOUR == this.createStep;\n+\n+    this.createStep = CreateStep.ONE;\n+    this.pageMode = PageMode.EDIT;\n+\n+  }\n+\n+\n+  public void deleteClient() {\n+    if (selectedClient != null) {\n+\n+      //configuredHarvestingClients.remove(selectedClient);\n+\n+      logger.info(\"proceeding to delete harvesting client \" + selectedClient.getName());\n+      try {\n+        harvestingClientService.setDeleteInProgress(selectedClient.getId());\n+\n+        //engineService.submit(new DeleteHarvestingClientCommand(dvRequestService.getDataverseRequest(), selectedClient));\n+        harvestingClientService.deleteClient(selectedClient.getId());\n+        JsfHelper.addInfoMessage(BundleUtil.getStringFromBundle(\"harvestclients.tab.header.action.delete.infomessage\"));\n+\n+        //} catch (CommandException ex) {\n+        //    String failMessage = \"Selected harvesting client cannot be deleted.\";\n+        //    JH.addMessage(FacesMessage.SEVERITY_FATAL, failMessage);\n+      } catch (Exception ex) {\n+        String failMessage = BundleUtil.getStringFromBundle(\"harvest.delete.error\") + ex.getMessage();\n+        JH.addMessage(FacesMessage.SEVERITY_FATAL, failMessage);\n+      }\n+    } else {\n+      logger.warning(\"Delete called, with a null selected harvesting client\");\n     }\n-    \n-    public boolean isSetListTruncated() {\n-        return setListTruncated;\n+\n+    selectedClient = null;\n+    configuredHarvestingClients = harvestingClientService.getAllHarvestingClients();\n+    this.pageMode = PageMode.VIEW;\n+\n+  }\n+\n+  public void createClient(ActionEvent ae) {\n+\n+    HarvestingClient newHarvestingClient = new HarvestingClient(); // will be set as type OAI by default\n+\n+    newHarvestingClient.setName(newNickname);\n+\n+    if (getSelectedDestinationDataverse() == null) {\n+      JsfHelper.JH.addMessage(FacesMessage.SEVERITY_ERROR, BundleUtil.getStringFromBundle(\"harvest.create.error\"));\n     }\n-    \n-    public void runHarvest(HarvestingClient harvestingClient) {\n-        try {\n-            DataverseRequest dataverseRequest = new DataverseRequest(session.getUser(), (HttpServletRequest)null);\n-            harvesterService.doAsyncHarvest(dataverseRequest, harvestingClient);        \n-        } catch (Exception ex) {\n-            String failMessage = BundleUtil.getStringFromBundle(\"harvest.start.error\");\n-            JH.addMessage(FacesMessage.SEVERITY_FATAL, failMessage);\n-            return;\n-        } \n-                \n-        String successMessage = BundleUtil.getStringFromBundle(\"harvestclients.actions.runharvest.success\");\n-        successMessage = successMessage.replace(\"{0}\", harvestingClient.getName());\n-        JsfHelper.addSuccessMessage(successMessage);\n-        \n-        // refresh the harvesting clients list - we want this one to be showing\n-        // \"inprogress\"; and we want to be able to disable all the actions buttons\n-        // for it:\n-        // (looks like we need to sleep for a few milliseconds here, to make sure \n-        // it has already been updated with the \"inprogress\" setting)\n-        try{Thread.sleep(500L);}catch(Exception e){}\n-        \n-        \n-        configuredHarvestingClients = harvestingClientService.getAllHarvestingClients();\n-        \n-        \n+\n+    newHarvestingClient.setDataverse(getSelectedDestinationDataverse());\n+    if (getSelectedDestinationDataverse().getHarvestingClientConfigs() == null) {\n+      getSelectedDestinationDataverse().setHarvestingClientConfigs(new ArrayList<>());\n     }\n-    \n-    public void editClient(HarvestingClient harvestingClient) {\n-        setSelectedClient(harvestingClient);\n-        \n-        this.newNickname = harvestingClient.getName();\n-        this.newHarvestingUrl = harvestingClient.getHarvestingUrl();\n-        this.initialSettingsValidated = false;\n-        \n-        // TODO: do we want to try and contact the server, again, to make \n-        // sure the metadataformat and/or set are still supported? \n-        // and if not, what do we do? \n-        // alternatively, should we make these 2 fields not editable at all?\n-        \n-        this.newOaiSet = !StringUtils.isEmpty(harvestingClient.getHarvestingSet()) ? harvestingClient.getHarvestingSet() : \"\";\n-        this.newMetadataFormat = harvestingClient.getMetadataPrefix();\n-        this.newHarvestingStyle = harvestingClient.getHarvestStyle();\n-        \n-        this.harvestTypeRadio = harvestTypeRadioOAI;\n-        \n-        if (harvestingClient.isScheduled()) {\n-            if (HarvestingClient.SCHEDULE_PERIOD_DAILY.equals(harvestingClient.getSchedulePeriod())) {\n-                this.harvestingScheduleRadio = harvestingScheduleRadioDaily;                \n-                setHourOfDayAMPMfromInteger(harvestingClient.getScheduleHourOfDay());\n-                \n-            } else if (HarvestingClient.SCHEDULE_PERIOD_WEEKLY.equals(harvestingClient.getSchedulePeriod())) {\n-                this.harvestingScheduleRadio = harvestingScheduleRadioWeekly;\n-                setHourOfDayAMPMfromInteger(harvestingClient.getScheduleHourOfDay());\n-                setWeekdayFromInteger(harvestingClient.getScheduleDayOfWeek());\n-                \n-            } else {\n-                // ok, the client is marked as \"scheduled\" - but the actual\n-                // schedule type is not specified. \n-                // so we'll show it as unscheduled on the edit form:\n-                this.harvestingScheduleRadio = harvestingScheduleRadioNone;\n-                this.newHarvestingScheduleDayOfWeek = \"Sunday\";\n-                this.newHarvestingScheduleTimeOfDay = \"12\";\n-                this.harvestingScheduleRadioAMPM = harvestingScheduleRadioAM;\n-            }\n-        } else {\n-            this.harvestingScheduleRadio = harvestingScheduleRadioNone;\n-            // unscheduled; but we populate this values to act as the defaults \n-            // if they decide to schedule it and toggle the form to show the \n-            // time and/or day pulldowns:\n-            this.newHarvestingScheduleDayOfWeek = \"Sunday\";\n-            this.newHarvestingScheduleTimeOfDay = \"12\";\n-            this.harvestingScheduleRadioAMPM = harvestingScheduleRadioAM;\n-        }        \n-        \n-        this.createStep = CreateStep.ONE;\n-        this.pageMode = PageMode.EDIT;\n-        \n+    getSelectedDestinationDataverse().getHarvestingClientConfigs().add(newHarvestingClient);\n+\n+    newHarvestingClient.setHarvestingUrl(newHarvestingUrl);\n+    if (!StringUtils.isEmpty(newOaiSet)) {\n+      newHarvestingClient.setHarvestingSet(newOaiSet);\n     }\n-    \n-    \n-    public void deleteClient() {\n-        if (selectedClient != null) {\n-            \n-            //configuredHarvestingClients.remove(selectedClient);\n-            \n-            logger.info(\"proceeding to delete harvesting client \"+selectedClient.getName());\n-            try {\n-                harvestingClientService.setDeleteInProgress(selectedClient.getId());\n-                \n-                //engineService.submit(new DeleteHarvestingClientCommand(dvRequestService.getDataverseRequest(), selectedClient));\n-                harvestingClientService.deleteClient(selectedClient.getId());\n-                JsfHelper.addInfoMessage(BundleUtil.getStringFromBundle(\"harvestclients.tab.header.action.delete.infomessage\"));\n-                \n-            //} catch (CommandException ex) {\n-            //    String failMessage = \"Selected harvesting client cannot be deleted.\";\n-            //    JH.addMessage(FacesMessage.SEVERITY_FATAL, failMessage);\n-            } catch (Exception ex) {\n-                String failMessage = BundleUtil.getStringFromBundle(\"harvest.delete.error\")+ex.getMessage();\n-                JH.addMessage(FacesMessage.SEVERITY_FATAL, failMessage);\n-            }\n-        } else {\n-            logger.warning(\"Delete called, with a null selected harvesting client\");\n+    newHarvestingClient.setMetadataPrefix(newMetadataFormat);\n+    newHarvestingClient.setHarvestStyle(newHarvestingStyle);\n+\n+    if (isNewHarvestingScheduled()) {\n+      newHarvestingClient.setScheduled(true);\n+\n+      if (isNewHarvestingScheduledWeekly()) {\n+        newHarvestingClient.setSchedulePeriod(HarvestingClient.SCHEDULE_PERIOD_WEEKLY);\n+        if (getWeekDayNumber() == null) {\n+          // create a \"week day is required...\" error message, etc.\n+          // but we may be better off not even giving them an opportunity\n+          // to leave the field blank - ?\n         }\n-        \n-        selectedClient = null; \n-        configuredHarvestingClients = harvestingClientService.getAllHarvestingClients();\n-        this.pageMode = PageMode.VIEW;\n-        \n+        newHarvestingClient.setScheduleDayOfWeek(getWeekDayNumber());\n+      } else {\n+        newHarvestingClient.setSchedulePeriod(HarvestingClient.SCHEDULE_PERIOD_DAILY);\n+      }\n+\n+      if (getHourOfDay() == null) {\n+        // see the comment above, about the day of week. same here.\n+      }\n+      newHarvestingClient.setScheduleHourOfDay(getHourOfDay());\n     }\n-    \n-    public void createClient(ActionEvent ae) {\n-        \n-        HarvestingClient newHarvestingClient = new HarvestingClient(); // will be set as type OAI by default\n-        \n-        newHarvestingClient.setName(newNickname);\n-        \n-        if (getSelectedDestinationDataverse() == null) {\n-            JsfHelper.JH.addMessage(FacesMessage.SEVERITY_ERROR,BundleUtil.getStringFromBundle(\"harvest.create.error\"));\n-        }\n-        \n-        newHarvestingClient.setDataverse(getSelectedDestinationDataverse());\n-        if (getSelectedDestinationDataverse().getHarvestingClientConfigs() == null) {\n-            getSelectedDestinationDataverse().setHarvestingClientConfigs(new ArrayList<>());\n-        }\n-        getSelectedDestinationDataverse().getHarvestingClientConfigs().add(newHarvestingClient);\n-        \n-        newHarvestingClient.setHarvestingUrl(newHarvestingUrl);\n-        if (!StringUtils.isEmpty(newOaiSet)) {\n-            newHarvestingClient.setHarvestingSet(newOaiSet);\n-        }\n-        newHarvestingClient.setMetadataPrefix(newMetadataFormat);\n-        newHarvestingClient.setHarvestStyle(newHarvestingStyle);\n-        \n-        if (isNewHarvestingScheduled()) {\n-            newHarvestingClient.setScheduled(true);\n-            \n-            if (isNewHarvestingScheduledWeekly()) {\n-                newHarvestingClient.setSchedulePeriod(HarvestingClient.SCHEDULE_PERIOD_WEEKLY);\n-                if (getWeekDayNumber() == null) {\n-                    // create a \"week day is required...\" error message, etc. \n-                    // but we may be better off not even giving them an opportunity \n-                    // to leave the field blank - ?\n-                }\n-                newHarvestingClient.setScheduleDayOfWeek(getWeekDayNumber());\n-            } else {\n-                newHarvestingClient.setSchedulePeriod(HarvestingClient.SCHEDULE_PERIOD_DAILY);\n-            }\n-            \n-            if (getHourOfDay() == null) {\n-                // see the comment above, about the day of week. same here.\n-            }\n-            newHarvestingClient.setScheduleHourOfDay(getHourOfDay());\n-        }\n-        \n-        // make default archive url (used to generate links pointing back to the \n-        // archival sources, when harvested datasets are displayed in search results),\n-        // from the harvesting url:\n-        newHarvestingClient.setArchiveUrl(makeDefaultArchiveUrl());\n-        // set default description - they can customize it as they see fit:\n-        newHarvestingClient.setArchiveDescription(BundleUtil.getStringFromBundle(\"harvestclients.viewEditDialog.archiveDescription.default.generic\"));\n-        \n-        \n-        // will try to save it now:\n-        \n-        try {\n-            newHarvestingClient = engineService.submit( new CreateHarvestingClientCommand(dvRequestService.getDataverseRequest(), newHarvestingClient));\n-            \n-            configuredHarvestingClients = harvestingClientService.getAllHarvestingClients();\n-            \n-            // NO, we no longer create timers here. It is the job of the Mother Timer!\n-            //dataverseTimerService.createHarvestTimer(newHarvestingClient);\n-            \n-            String successMessage = BundleUtil.getStringFromBundle(\"harvestclients.newClientDialog.success\");\n-            successMessage = successMessage.replace(\"{0}\", newHarvestingClient.getName());\n-            JsfHelper.addSuccessMessage(successMessage);\n-\n-        } /* TODO: (?) add a dedicated \"NameAlreadyExists\" exception for the \n+\n+    // make default archive url (used to generate links pointing back to the\n+    // archival sources, when harvested datasets are displayed in search results),\n+    // from the harvesting url:\n+    newHarvestingClient.setArchiveUrl(makeDefaultArchiveUrl());\n+    // set default description - they can customize it as they see fit:\n+    newHarvestingClient.setArchiveDescription(\n+      BundleUtil.getStringFromBundle(\"harvestclients.viewEditDialog.archiveDescription.default.generic\"));\n+\n+\n+    // will try to save it now:\n+\n+    try {\n+      newHarvestingClient = engineService\n+        .submit(new CreateHarvestingClientCommand(dvRequestService.getDataverseRequest(), newHarvestingClient));\n+\n+      configuredHarvestingClients = harvestingClientService.getAllHarvestingClients();\n+\n+      // NO, we no longer create timers here. It is the job of the Mother Timer!\n+      //dataverseTimerService.createHarvestTimer(newHarvestingClient);\n+\n+      String successMessage = BundleUtil.getStringFromBundle(\"harvestclients.newClientDialog.success\");\n+      successMessage = successMessage.replace(\"{0}\", newHarvestingClient.getName());\n+      JsfHelper.addSuccessMessage(successMessage);\n+\n+    } /* TODO: (?) add a dedicated \"NameAlreadyExists\" exception for the\n              create client command? \n           catch ( CreateHarvestingClientCommand.NicknameAlreadyExistsException naee ) {\n             FacesContext.getCurrentInstance().addMessage(newHarvestingClient.getName(),\n                            new FacesMessage( FacesMessage.SEVERITY_ERROR, naee.getMessage(), null));\n \n         }*/ catch (CommandException ex) {\n-            logger.log(Level.WARNING, \"Harvesting client creation command failed\", ex);\n-            JsfHelper.JH.addMessage(FacesMessage.SEVERITY_ERROR,\n-                    BundleUtil.getStringFromBundle(\"harvest.createCommand.error\"),\n-                                    ex.getMessage());\n-        } catch (Exception ex) {\n-            JH.addMessage(FacesMessage.SEVERITY_FATAL, BundleUtil.getStringFromBundle(\"harvest.create.fail\"));\n-            logger.log(Level.SEVERE, \"Harvesting client creation failed (reason unknown).\" + ex.getMessage(), ex);\n-        }\n-        setPageMode(PageMode.VIEW);\n+      logger.log(Level.WARNING, \"Harvesting client creation command failed\", ex);\n+      JsfHelper.JH.addMessage(FacesMessage.SEVERITY_ERROR,\n+        BundleUtil.getStringFromBundle(\"harvest.createCommand.error\"),\n+        ex.getMessage());\n+    } catch (Exception ex) {\n+      JH.addMessage(FacesMessage.SEVERITY_FATAL, BundleUtil.getStringFromBundle(\"harvest.create.fail\"));\n+      logger.log(Level.SEVERE, \"Harvesting client creation failed (reason unknown).\" + ex.getMessage(), ex);\n+    }\n+    setPageMode(PageMode.VIEW);\n+\n+\n+  }\n+\n+  // this saves an existing client that the user has edited:\n+\n+  public void saveClient(ActionEvent ae) {\n \n-        \n+    HarvestingClient harvestingClient = getSelectedClient();\n+\n+    if (harvestingClient == null) {\n+      // TODO:\n+      // tell the user somehow that the client cannot be saved, and advise\n+      // them to save the settings they have entered.\n+      // as of now - we will show an error message, but only after the\n+      // edit form has been closed.\n     }\n-    \n-    // this saves an existing client that the user has edited: \n-    \n-    public void saveClient(ActionEvent ae) {\n-        \n-        HarvestingClient harvestingClient = getSelectedClient(); \n-        \n-        if (harvestingClient == null) {\n-            // TODO: \n-            // tell the user somehow that the client cannot be saved, and advise\n-            // them to save the settings they have entered. \n-            // as of now - we will show an error message, but only after the \n-            // edit form has been closed.        \n-        }\n-        \n-        // nickname is not editable for existing clients:\n-        //harvestingClient.setName(newNickname);\n-        harvestingClient.setHarvestingUrl(newHarvestingUrl);\n-        harvestingClient.setHarvestingSet(newOaiSet);\n-        harvestingClient.setMetadataPrefix(newMetadataFormat);\n-        harvestingClient.setHarvestStyle(newHarvestingStyle);\n-        \n-        if (isNewHarvestingScheduled()) {\n-            harvestingClient.setScheduled(true);\n-            \n-            if (isNewHarvestingScheduledWeekly()) {\n-                harvestingClient.setSchedulePeriod(HarvestingClient.SCHEDULE_PERIOD_WEEKLY);\n-                if (getWeekDayNumber() == null) {\n-                    // create a \"week day is required...\" error message, etc. \n-                    // but we may be better off not even giving them an opportunity \n-                    // to leave the field blank - ?\n-                }\n-                harvestingClient.setScheduleDayOfWeek(getWeekDayNumber());\n-            } else {\n-                harvestingClient.setSchedulePeriod(HarvestingClient.SCHEDULE_PERIOD_DAILY);\n-            }\n-            \n-            if (getHourOfDay() == null) {\n-                // see the comment above, about the day of week. same here.\n-            }\n-            harvestingClient.setScheduleHourOfDay(getHourOfDay());\n-        } else {\n-            harvestingClient.setScheduled(false);\n-        }\n-        \n-        // will try to save it now:\n-        \n-        try {\n-            harvestingClient = engineService.submit( new UpdateHarvestingClientCommand(dvRequestService.getDataverseRequest(), harvestingClient));\n-            \n-            configuredHarvestingClients = harvestingClientService.getAllHarvestingClients();\n-            \n-            if (!harvestingClient.isScheduled()) {\n-                dataverseTimerService.removeHarvestTimer(harvestingClient);\n-            }\n-            JsfHelper.addSuccessMessage(BundleUtil.getStringFromBundle(\"harvest.update.success\") + harvestingClient.getName());\n \n-        } catch (CommandException ex) {\n-            logger.log(Level.WARNING, \"Failed to save harvesting client\", ex);\n-            JsfHelper.JH.addMessage(FacesMessage.SEVERITY_ERROR,\n-                    BundleUtil.getStringFromBundle(\"harvest.save.failure1\"),\n-                                    ex.getMessage());\n-        } catch (Exception ex) {\n-            JH.addMessage(FacesMessage.SEVERITY_FATAL, BundleUtil.getStringFromBundle(\"harvest.save.failure2\"));\n-             logger.log(Level.SEVERE, \"Failed to save harvesting client (reason unknown).\" + ex.getMessage(), ex);\n+    // nickname is not editable for existing clients:\n+    //harvestingClient.setName(newNickname);\n+    harvestingClient.setHarvestingUrl(newHarvestingUrl);\n+    harvestingClient.setHarvestingSet(newOaiSet);\n+    harvestingClient.setMetadataPrefix(newMetadataFormat);\n+    harvestingClient.setHarvestStyle(newHarvestingStyle);\n+\n+    if (isNewHarvestingScheduled()) {\n+      harvestingClient.setScheduled(true);\n+\n+      if (isNewHarvestingScheduledWeekly()) {\n+        harvestingClient.setSchedulePeriod(HarvestingClient.SCHEDULE_PERIOD_WEEKLY);\n+        if (getWeekDayNumber() == null) {\n+          // create a \"week day is required...\" error message, etc.\n+          // but we may be better off not even giving them an opportunity\n+          // to leave the field blank - ?\n         }\n-        setPageMode(PageMode.VIEW);\n+        harvestingClient.setScheduleDayOfWeek(getWeekDayNumber());\n+      } else {\n+        harvestingClient.setSchedulePeriod(HarvestingClient.SCHEDULE_PERIOD_DAILY);\n+      }\n \n-        \n+      if (getHourOfDay() == null) {\n+        // see the comment above, about the day of week. same here.\n+      }\n+      harvestingClient.setScheduleHourOfDay(getHourOfDay());\n+    } else {\n+      harvestingClient.setScheduled(false);\n     }\n-    \n-    public void validateMetadataFormat(FacesContext context, UIComponent toValidate, Object rawValue) {\n-        String value = (String) rawValue;\n-        UIInput input = (UIInput) toValidate;\n-        input.setValid(true); // Optimistic approach\n-\n-        // metadataFormats are selected from a pulldown that's populated with \n-        // the values returned by the remote OAI server. \n-        // the only validation we want is to make sure the select one from the \n-        // menu. \n-        if (context.getExternalContext().getRequestParameterMap().get(\"DO_VALIDATION\") != null\n-                && StringUtils.isEmpty(value)) {\n-\n-            input.setValid(false);\n-            context.addMessage(toValidate.getClientId(),\n-                    new FacesMessage(FacesMessage.SEVERITY_ERROR, \"\", BundleUtil.getStringFromBundle(\"harvestclients.newClientDialog.oaiMetadataFormat.required\")));\n \n-        }\n+    // will try to save it now:\n+\n+    try {\n+      harvestingClient = engineService\n+        .submit(new UpdateHarvestingClientCommand(dvRequestService.getDataverseRequest(), harvestingClient));\n+\n+      configuredHarvestingClients = harvestingClientService.getAllHarvestingClients();\n+\n+      if (!harvestingClient.isScheduled()) {\n+        dataverseTimerService.removeHarvestTimer(harvestingClient);\n+      }\n+      JsfHelper\n+        .addSuccessMessage(BundleUtil.getStringFromBundle(\"harvest.update.success\") + harvestingClient.getName());\n+\n+    } catch (CommandException ex) {\n+      logger.log(Level.WARNING, \"Failed to save harvesting client\", ex);\n+      JsfHelper.JH.addMessage(FacesMessage.SEVERITY_ERROR,\n+        BundleUtil.getStringFromBundle(\"harvest.save.failure1\"),\n+        ex.getMessage());\n+    } catch (Exception ex) {\n+      JH.addMessage(FacesMessage.SEVERITY_FATAL, BundleUtil.getStringFromBundle(\"harvest.save.failure2\"));\n+      logger.log(Level.SEVERE, \"Failed to save harvesting client (reason unknown).\" + ex.getMessage(), ex);\n+    }\n+    setPageMode(PageMode.VIEW);\n+\n+\n+  }\n+\n+  public void validateMetadataFormat(FacesContext context, UIComponent toValidate, Object rawValue) {\n+    String value = (String) rawValue;\n+    UIInput input = (UIInput) toValidate;\n+    input.setValid(true); // Optimistic approach\n+\n+    // metadataFormats are selected from a pulldown that's populated with\n+    // the values returned by the remote OAI server.\n+    // the only validation we want is to make sure the select one from the\n+    // menu.\n+    if (context.getExternalContext().getRequestParameterMap().get(\"DO_VALIDATION\") != null\n+      && StringUtils.isEmpty(value)) {\n+\n+      input.setValid(false);\n+      context.addMessage(toValidate.getClientId(),\n+        new FacesMessage(FacesMessage.SEVERITY_ERROR, \"\",\n+          BundleUtil.getStringFromBundle(\"harvestclients.newClientDialog.oaiMetadataFormat.required\")));\n+\n     }\n-    \n-    public void validateRemoteArchiveStyle(FacesContext context, UIComponent toValidate, Object rawValue) {\n-        String value = (String) rawValue;\n-        UIInput input = (UIInput) toValidate;\n-        input.setValid(true); // Optimistic approach\n-        \n-        // the only validation we want is to make sure the select one of the \n-        // values from the menu. \n-        if (context.getExternalContext().getRequestParameterMap().get(\"DO_VALIDATION\") != null\n-                && StringUtils.isEmpty(value)) {\n-\n-            input.setValid(false);\n-            context.addMessage(toValidate.getClientId(),\n-                    new FacesMessage(FacesMessage.SEVERITY_ERROR, \"\", BundleUtil.getStringFromBundle(\"harvestclients.newClientDialog.harvestingStyle.required\")));\n+  }\n+\n+  public void validateRemoteArchiveStyle(FacesContext context, UIComponent toValidate, Object rawValue) {\n+    String value = (String) rawValue;\n+    UIInput input = (UIInput) toValidate;\n+    input.setValid(true); // Optimistic approach\n+\n+    // the only validation we want is to make sure the select one of the\n+    // values from the menu.\n+    if (context.getExternalContext().getRequestParameterMap().get(\"DO_VALIDATION\") != null\n+      && StringUtils.isEmpty(value)) {\n+\n+      input.setValid(false);\n+      context.addMessage(toValidate.getClientId(),\n+        new FacesMessage(FacesMessage.SEVERITY_ERROR, \"\",\n+          BundleUtil.getStringFromBundle(\"harvestclients.newClientDialog.harvestingStyle.required\")));\n \n-        }\n     }\n-    \n-    public boolean validateNickname() {\n-\n-        if ( !StringUtils.isEmpty(getNewNickname()) ) {\n-\n-            if (getNewNickname().length() > 30 || (!Pattern.matches(\"^[a-zA-Z0-9\\\\_\\\\-]+$\", getNewNickname())) ) {\n-                //input.setValid(false);\n-                FacesContext.getCurrentInstance().addMessage(getNewClientNicknameInputField().getClientId(),\n-                    new FacesMessage(FacesMessage.SEVERITY_ERROR, \"\", BundleUtil.getStringFromBundle(\"harvestclients.newClientDialog.nickname.invalid\")));\n-                return false;\n-\n-                // If it passes the regex test, check \n-            } else if ( harvestingClientService.findByNickname(getNewNickname()) != null ) {\n-                //input.setValid(false);\n-                FacesContext.getCurrentInstance().addMessage(getNewClientNicknameInputField().getClientId(),\n-                    new FacesMessage(FacesMessage.SEVERITY_ERROR, \"\", BundleUtil.getStringFromBundle(\"harvestclients.newClientDialog.nickname.alreadyused\")));\n-                return false;\n-            }\n-            return true;\n-        } \n-        \n-        // Nickname field is empty:\n+  }\n+\n+  public boolean validateNickname() {\n+\n+    if (!StringUtils.isEmpty(getNewNickname())) {\n+\n+      if (getNewNickname().length() > 30 || (!Pattern.matches(\"^[a-zA-Z0-9\\\\_\\\\-]+$\", getNewNickname()))) {\n+        //input.setValid(false);\n+        FacesContext.getCurrentInstance().addMessage(getNewClientNicknameInputField().getClientId(),\n+          new FacesMessage(FacesMessage.SEVERITY_ERROR, \"\",\n+            BundleUtil.getStringFromBundle(\"harvestclients.newClientDialog.nickname.invalid\")));\n+        return false;\n+\n+        // If it passes the regex test, check\n+      } else if (harvestingClientService.findByNickname(getNewNickname()) != null) {\n+        //input.setValid(false);\n         FacesContext.getCurrentInstance().addMessage(getNewClientNicknameInputField().getClientId(),\n-                    new FacesMessage(FacesMessage.SEVERITY_ERROR, \"\", BundleUtil.getStringFromBundle(\"harvestclients.newClientDialog.nickname.required\")));\n+          new FacesMessage(FacesMessage.SEVERITY_ERROR, \"\",\n+            BundleUtil.getStringFromBundle(\"harvestclients.newClientDialog.nickname.alreadyused\")));\n         return false;\n+      }\n+      return true;\n     }\n-    \n-    public boolean validateSelectedDataverse() {\n-        if (selectedDestinationDataverse == null) {\n-            FacesContext.getCurrentInstance().addMessage(getSelectedDataverseMenu().getClientId(),\n-                    new FacesMessage(FacesMessage.SEVERITY_ERROR, \"\", BundleUtil.getStringFromBundle(\"harvestclients.newClientDialog.dataverse.required\")));\n-            return false;\n+\n+    // Nickname field is empty:\n+    FacesContext.getCurrentInstance().addMessage(getNewClientNicknameInputField().getClientId(),\n+      new FacesMessage(FacesMessage.SEVERITY_ERROR, \"\",\n+        BundleUtil.getStringFromBundle(\"harvestclients.newClientDialog.nickname.required\")));\n+    return false;\n+  }\n+\n+  public boolean validateSelectedDataverse() {\n+    if (selectedDestinationDataverse == null) {\n+      FacesContext.getCurrentInstance().addMessage(getSelectedDataverseMenu().getClientId(),\n+        new FacesMessage(FacesMessage.SEVERITY_ERROR, \"\",\n+          BundleUtil.getStringFromBundle(\"harvestclients.newClientDialog.dataverse.required\")));\n+      return false;\n+    }\n+    return true;\n+  }\n+\n+  public boolean validateServerUrlOAI() {\n+    if (!StringUtils.isEmpty(getNewHarvestingUrl())) {\n+\n+      OaiHandler oaiHandler = new OaiHandler(getNewHarvestingUrl());\n+      boolean success = true;\n+      String message = null;\n+\n+      // First, we'll try to obtain the list of supported metadata formats:\n+      try {\n+        List<String> formats = oaiHandler.runListMetadataFormats();\n+        if (formats != null && formats.size() > 0) {\n+          createOaiMetadataFormatSelectItems(formats);\n+        } else {\n+          success = false;\n+          message = \"received empty list from ListMetadataFormats\";\n         }\n-        return true;\n-    }\n-    \n-    public boolean validateServerUrlOAI() {\n-        if (!StringUtils.isEmpty(getNewHarvestingUrl())) {\n-\n-            OaiHandler oaiHandler = new OaiHandler(getNewHarvestingUrl());\n-            boolean success = true;\n-            String message = null;\n-\n-            // First, we'll try to obtain the list of supported metadata formats:\n-            try {\n-                List<String> formats = oaiHandler.runListMetadataFormats();\n-                if (formats != null && formats.size() > 0) {\n-                    createOaiMetadataFormatSelectItems(formats);\n-                } else {\n-                    success = false;\n-                    message = \"received empty list from ListMetadataFormats\";\n-                }\n-\n-                // TODO: differentiate between different exceptions/failure scenarios } catch (OaiHandlerException ohee) {\n-            } catch (Exception ex) {\n-                success = false;\n-                message = \"Failed to execute listmetadataformats; \" + ex.getMessage();\n \n-            }\n+        // TODO: differentiate between different exceptions/failure scenarios } catch (OaiHandlerException ohee) {\n+      } catch (Exception ex) {\n+        success = false;\n+        message = \"Failed to execute listmetadataformats; \" + ex.getMessage();\n \n-            if (success) {\n-                logger.info(\"metadataformats: success\");\n-                logger.info(getOaiMetadataFormatSelectItems().size() + \" metadata formats total.\");\n-            } else {\n-                logger.info(\"metadataformats: failed;\"+message);\n-            }\n-            // And if that worked, the list of sets provided:\n-\n-            ArrayList<String> sets = null;\n-            \n-            // reset the sets menu:\n-            setOaiSetsSelectItems(null);\n-            setListTruncated = false;\n-            \n-            if (success) {\n-                try {\n-                    sets = oaiHandler.runListSets();\n-                } catch (Exception ex) {\n-                    //success = false; \n-                    // ok - we'll try and live without sets for now... \n-                    // (since listMetadataFormats has succeeded earlier, may \n-                    // be safe to assume that this OAI server is at least \n-                    // somewhat functioning...)\n-                    // (XOAI ListSets buggy as well?)\n-                    message = \"Failed to execute ListSets; \" + ex.getMessage();\n-                    logger.warning(message);\n-                }\n-            }\n+      }\n \n-            if (success) {\n-                if (sets != null) {\n-                    if (oaiHandler.isSetListTruncated()) {\n-                        // If it was taking too long to retrieve the full list \n-                        // of sets (oai.datacite.org/oai - looking at you! -\n-                        // and we had to truncate it:\n-                        setListTruncated = true;\n-\n-                        // And if we are re-configuring an existing client, with \n-                        // a specific set in place - let's make sure it's on the pull down \n-                        // menu list; even if we have failed to retrieve it from the server. \n-                        if (StringUtil.nonEmpty(this.newOaiSet)) {\n-                            if (!sets.contains(this.newOaiSet)) {\n-                                sets.add(0, this.newOaiSet);\n-                            }\n-                        }\n-                    }\n-                    createOaiSetsSelectItems(sets);\n-                }\n-                return true;\n-            }\n+      if (success) {\n+        logger.info(\"metadataformats: success\");\n+        logger.info(getOaiMetadataFormatSelectItems().size() + \" metadata formats total.\");\n+      } else {\n+        logger.info(\"metadataformats: failed;\" + message);\n+      }\n+      // And if that worked, the list of sets provided:\n+\n+      ArrayList<String> sets = null;\n \n-            FacesContext.getCurrentInstance().addMessage(getNewClientUrlInputField().getClientId(),\n-                    new FacesMessage(FacesMessage.SEVERITY_ERROR, \"\", getNewHarvestingUrl() + \": \" + BundleUtil.getStringFromBundle(\"harvestclients.newClientDialog.url.invalid\")));\n-            return false;\n+      // reset the sets menu:\n+      setOaiSetsSelectItems(null);\n+      setListTruncated = false;\n \n+      if (success) {\n+        try {\n+          sets = oaiHandler.runListSets();\n+        } catch (Exception ex) {\n+          //success = false;\n+          // ok - we'll try and live without sets for now...\n+          // (since listMetadataFormats has succeeded earlier, may\n+          // be safe to assume that this OAI server is at least\n+          // somewhat functioning...)\n+          // (XOAI ListSets buggy as well?)\n+          message = \"Failed to execute ListSets; \" + ex.getMessage();\n+          logger.warning(message);\n         }\n-        FacesContext.getCurrentInstance().addMessage(getNewClientUrlInputField().getClientId(),\n-                new FacesMessage(FacesMessage.SEVERITY_ERROR, \"\", getNewHarvestingUrl() + \": \" + BundleUtil.getStringFromBundle(\"harvestclients.newClientDialog.url.required\")));\n-        return false;\n-    }\n-    \n-    public void validateInitialSettings() {\n-        if (isHarvestTypeOAI()) {\n-            boolean nicknameValidated = true; \n-            boolean destinationDataverseValidated = true;\n-            if (isCreateMode()) {\n-                nicknameValidated = validateNickname();\n-                destinationDataverseValidated = validateSelectedDataverse();\n-            }\n-            boolean urlValidated = validateServerUrlOAI();\n-            \n-            if (nicknameValidated && destinationDataverseValidated && urlValidated) {\n-                // In Create mode we want to run all 3 validation tests; this is why \n-                // we are not doing \"if ((validateNickname() && validateServerUrlOAI())\"\n-                // in the line above. -- L.A. 4.4 May 2016.\n-                \n-                setInitialSettingsValidated(true);\n-                this.createStep = CreateStep.TWO;\n+      }\n+\n+      if (success) {\n+        if (sets != null) {\n+          if (oaiHandler.isSetListTruncated()) {\n+            // If it was taking too long to retrieve the full list\n+            // of sets (oai.datacite.org/oai - looking at you! -\n+            // and we had to truncate it:\n+            setListTruncated = true;\n+\n+            // And if we are re-configuring an existing client, with\n+            // a specific set in place - let's make sure it's on the pull down\n+            // menu list; even if we have failed to retrieve it from the server.\n+            if (StringUtil.nonEmpty(this.newOaiSet)) {\n+              if (!sets.contains(this.newOaiSet)) {\n+                sets.add(0, this.newOaiSet);\n+              }\n             }\n-            // (and if not - it stays set to false)\n+          }\n+          createOaiSetsSelectItems(sets);\n         }\n+        return true;\n+      }\n+\n+      FacesContext.getCurrentInstance().addMessage(getNewClientUrlInputField().getClientId(),\n+        new FacesMessage(FacesMessage.SEVERITY_ERROR, \"\",\n+          getNewHarvestingUrl() + \": \" + BundleUtil.getStringFromBundle(\"harvestclients.newClientDialog.url.invalid\")));\n+      return false;\n+\n     }\n-    \n-    public void backToStepOne() {\n-        this.initialSettingsValidated = false;\n-        this.createStep = CreateStep.ONE;\n-    }\n-    \n-    public void goToStepThree() {\n-        this.createStep = CreateStep.THREE;\n-    }\n-    \n-    public void backToStepTwo() {\n+    FacesContext.getCurrentInstance().addMessage(getNewClientUrlInputField().getClientId(),\n+      new FacesMessage(FacesMessage.SEVERITY_ERROR, \"\",\n+        getNewHarvestingUrl() + \": \" + BundleUtil.getStringFromBundle(\"harvestclients.newClientDialog.url.required\")));\n+    return false;\n+  }\n+\n+  public void validateInitialSettings() {\n+    if (isHarvestTypeOAI()) {\n+      boolean nicknameValidated = true;\n+      boolean destinationDataverseValidated = true;\n+      if (isCreateMode()) {\n+        nicknameValidated = validateNickname();\n+        destinationDataverseValidated = validateSelectedDataverse();\n+      }\n+      boolean urlValidated = validateServerUrlOAI();\n+\n+      if (nicknameValidated && destinationDataverseValidated && urlValidated) {\n+        // In Create mode we want to run all 3 validation tests; this is why\n+        // we are not doing \"if ((validateNickname() && validateServerUrlOAI())\"\n+        // in the line above. -- L.A. 4.4 May 2016.\n+\n+        setInitialSettingsValidated(true);\n         this.createStep = CreateStep.TWO;\n+      }\n+      // (and if not - it stays set to false)\n     }\n-    \n-    public void goToStepFour() {\n-        this.createStep = CreateStep.FOUR;\n-    }\n-    \n-    public void backToStepThree() {\n-        this.createStep = CreateStep.THREE;\n-    }\n-    \n-    /*\n-     * Variables and methods for creating a new harvesting client: \n-    */\n-    \n-    private int harvestTypeRadio; // 1 = OAI; 2 = Nesstar\n-    private static int harvestTypeRadioOAI = 1;\n-    private static int harvestTypeRadioNesstar = 2; \n-    \n-    UIInput newClientNicknameInputField;\n-    UIInput newClientUrlInputField;\n-    UIInput hiddenInputField; \n-    /*UISelectOne*/ UIInput metadataFormatMenu;\n-    UIInput remoteArchiveStyleMenu;\n-    UIInput selectedDataverseMenu;\n-    \n-    private String newNickname = \"\";\n-    private String newHarvestingUrl = \"\";\n-    private boolean initialSettingsValidated = false;\n-    private String newOaiSet = \"\";\n-    private String newMetadataFormat = \"\"; \n-    private String newHarvestingStyle = \"\";\n-    \n-    private int harvestingScheduleRadio; \n-    \n-    private static final int harvestingScheduleRadioNone = 0;\n-    private static final int harvestingScheduleRadioDaily = 1;\n-    private static final int harvestingScheduleRadioWeekly = 2; \n-    \n-    private String newHarvestingScheduleDayOfWeek = \"Sunday\";\n-    private String newHarvestingScheduleTimeOfDay = \"12\";\n-    \n-    private int harvestingScheduleRadioAMPM;\n-    private static final int harvestingScheduleRadioAM = 0;\n-    private static final int harvestingScheduleRadioPM = 1; \n-    \n-    \n-    public void initNewClient(ActionEvent ae) {\n-        //this.selectedClient = new HarvestingClient();\n-        this.newNickname = \"\";\n-        this.newHarvestingUrl = \"\";\n-        this.initialSettingsValidated = false;\n-        this.newOaiSet = \"\";\n-        this.newMetadataFormat = \"\";\n-        this.newHarvestingStyle = \"\";\n-        \n-        this.harvestTypeRadio = harvestTypeRadioOAI;\n-        this.harvestingScheduleRadio = harvestingScheduleRadioNone; \n-        \n-        this.newHarvestingScheduleDayOfWeek = \"Sunday\";\n-        this.newHarvestingScheduleTimeOfDay = \"12\";\n-        \n-        this.harvestingScheduleRadioAMPM = harvestingScheduleRadioAM;\n-        \n-        this.pageMode = PageMode.CREATE;\n-        this.createStep = CreateStep.ONE;\n-        this.selectedDestinationDataverse = null;\n-        \n-    }\n-        \n-    public boolean isInitialSettingsValidated() {\n-        return this.initialSettingsValidated;\n-    }\n-    \n-    public void setInitialSettingsValidated(boolean validated) {\n-        this.initialSettingsValidated = validated;\n-    }\n-    \n-    \n-    public String getNewNickname() {\n-        return newNickname;\n-    }\n-    \n-    public void setNewNickname(String newNickname) {\n-        this.newNickname = newNickname;\n-    }\n-    \n-    public String getNewHarvestingUrl() {\n-        return newHarvestingUrl;\n-    }\n-    \n-    public void setNewHarvestingUrl(String newHarvestingUrl) {\n-        this.newHarvestingUrl = newHarvestingUrl;\n-    }\n-    \n-    public int getHarvestTypeRadio() {\n-        return this.harvestTypeRadio;\n-    }\n-    \n-    public void setHarvestTypeRadio(int harvestTypeRadio) {\n-        this.harvestTypeRadio = harvestTypeRadio;\n-    }\n-    \n-    public boolean isHarvestTypeOAI() {\n-        return harvestTypeRadioOAI == harvestTypeRadio;\n-    }\n-    \n-    public boolean isHarvestTypeNesstar() {\n-        return harvestTypeRadioNesstar == harvestTypeRadio;\n-    }\n-    \n-    public String getNewOaiSet() {\n-        return newOaiSet;\n-    }\n-    \n-    public void setNewOaiSet(String newOaiSet) {\n-        this.newOaiSet = newOaiSet;\n-    }\n-    \n-    public String getNewMetadataFormat() {\n-        return newMetadataFormat;\n-    }\n-    \n-    public void setNewMetadataFormat(String newMetadataFormat) {\n-        this.newMetadataFormat = newMetadataFormat;\n-    }\n-    \n-    public String getNewHarvestingStyle() {\n-        return newHarvestingStyle;\n-    }\n-    \n-    public void setNewHarvestingStyle(String newHarvestingStyle) {\n-        this.newHarvestingStyle = newHarvestingStyle;\n-    }\n-    \n-    public int getHarvestingScheduleRadio() {\n-        return this.harvestingScheduleRadio;\n-    }\n-    \n-    public void setHarvestingScheduleRadio(int harvestingScheduleRadio) {\n-        this.harvestingScheduleRadio = harvestingScheduleRadio;\n-    }\n-    \n-    public boolean isNewHarvestingScheduled() {\n-        return this.harvestingScheduleRadio != harvestingScheduleRadioNone;\n-    }\n-    \n-    public boolean isNewHarvestingScheduledWeekly() {\n-        return this.harvestingScheduleRadio == harvestingScheduleRadioWeekly;\n-    }\n-    \n-    public boolean isNewHarvestingScheduledDaily() {\n-        return this.harvestingScheduleRadio == harvestingScheduleRadioDaily;\n-    }\n-    \n-    public String getNewHarvestingScheduleDayOfWeek() {\n-        return newHarvestingScheduleDayOfWeek;\n-    }\n-    \n-    public void setNewHarvestingScheduleDayOfWeek(String newHarvestingScheduleDayOfWeek) {\n-        this.newHarvestingScheduleDayOfWeek = newHarvestingScheduleDayOfWeek;\n-    }\n-    \n-    public String getNewHarvestingScheduleTimeOfDay() {\n-        return newHarvestingScheduleTimeOfDay;\n-    }\n-    \n-    public void setNewHarvestingScheduleTimeOfDay(String newHarvestingScheduleTimeOfDay) {\n-        this.newHarvestingScheduleTimeOfDay = newHarvestingScheduleTimeOfDay;\n-    }\n-    \n-    public int getHarvestingScheduleRadioAMPM() {\n-        return this.harvestingScheduleRadioAMPM;\n-    }\n-    \n-    public void setHarvestingScheduleRadioAMPM(int harvestingScheduleRadioAMPM) {\n-        this.harvestingScheduleRadioAMPM = harvestingScheduleRadioAMPM;\n-    }\n-    \n-    public boolean isHarvestingScheduleTimeOfDayPM() {\n-        return getHarvestingScheduleRadioAMPM() == harvestingScheduleRadioPM;\n-    }\n-    \n-    public void toggleNewClientSchedule() {\n-        \n-    }\n+  }\n \n-    \n-    public UIInput getNewClientNicknameInputField() {\n-        return newClientNicknameInputField;\n-    }\n+  public void backToStepOne() {\n+    this.initialSettingsValidated = false;\n+    this.createStep = CreateStep.ONE;\n+  }\n \n-    public void setNewClientNicknameInputField(UIInput newClientInputField) {\n-        this.newClientNicknameInputField = newClientInputField;\n-    }\n+  public void goToStepThree() {\n+    this.createStep = CreateStep.THREE;\n+  }\n \n-    public UIInput getNewClientUrlInputField() {\n-        return newClientUrlInputField;\n-    }\n+  public void backToStepTwo() {\n+    this.createStep = CreateStep.TWO;\n+  }\n \n-    public void setNewClientUrlInputField(UIInput newClientInputField) {\n-        this.newClientUrlInputField = newClientInputField;\n-    }\n-    \n-    public UIInput getHiddenInputField() {\n-        return hiddenInputField;\n-    }\n+  public void goToStepFour() {\n+    this.createStep = CreateStep.FOUR;\n+  }\n \n-    public void setHiddenInputField(UIInput hiddenInputField) {\n-        this.hiddenInputField = hiddenInputField;\n-    }\n-    \n-    public UIInput getMetadataFormatMenu() {\n-        return metadataFormatMenu;\n-    }\n+  public void backToStepThree() {\n+    this.createStep = CreateStep.THREE;\n+  }\n \n-    public void setMetadataFormatMenu(UIInput metadataFormatMenu) {\n-        this.metadataFormatMenu = metadataFormatMenu;\n-    }\n-    \n-    public UIInput getRemoteArchiveStyleMenu() {\n-        return remoteArchiveStyleMenu;\n-    }\n+  /*\n+   * Variables and methods for creating a new harvesting client:\n+   */\n \n-    public void setRemoteArchiveStyleMenu(UIInput remoteArchiveStyleMenu) {\n-        this.remoteArchiveStyleMenu = remoteArchiveStyleMenu;\n-    }\n-    \n-    public UIInput getSelectedDataverseMenu() {\n-        return selectedDataverseMenu;\n-    }\n+  private int harvestTypeRadio; // 1 = OAI; 2 = Nesstar\n+  private static int harvestTypeRadioOAI = 1;\n+  private static int harvestTypeRadioNesstar = 2;\n \n-    public void setSelectedDataverseMenu(UIInput selectedDataverseMenu) {\n-        this.selectedDataverseMenu = selectedDataverseMenu;\n-    }\n-    \n-    private List<SelectItem> oaiSetsSelectItems;\n+  UIInput newClientNicknameInputField;\n+  UIInput newClientUrlInputField;\n+  UIInput hiddenInputField;\n+  /*UISelectOne*/ UIInput metadataFormatMenu;\n+  UIInput remoteArchiveStyleMenu;\n+  UIInput selectedDataverseMenu;\n \n-    public List<SelectItem> getOaiSetsSelectItems() {\n-        return oaiSetsSelectItems;\n-    }\n+  private String newNickname = \"\";\n+  private String newHarvestingUrl = \"\";\n+  private boolean initialSettingsValidated = false;\n+  private String newOaiSet = \"\";\n+  private String newMetadataFormat = \"\";\n+  private String newHarvestingStyle = \"\";\n \n-    public void setOaiSetsSelectItems(List<SelectItem> oaiSetsSelectItems) {\n-        this.oaiSetsSelectItems = oaiSetsSelectItems;\n-    }\n-    \n-    private void createOaiSetsSelectItems(List<String> setNames) {\n-        setOaiSetsSelectItems(new ArrayList<>());\n-        if (setNames != null) {\n-            \n-            // Let's sort the list - otherwise, if the list is long enough, \n-            // using this pulldown menu may be very difficult:\n-            \n-            Collections.sort(setNames, String.CASE_INSENSITIVE_ORDER);\n-            \n-            for (String set: setNames) {\n-                if (!StringUtils.isEmpty(set)) {\n-                    getOaiSetsSelectItems().add(new SelectItem(set, set));\n-                }\n-            }\n-        }\n-    }\n-    \n-    private List<SelectItem> oaiMetadataFormatSelectItems;\n+  private int harvestingScheduleRadio;\n \n-    public List<SelectItem> getOaiMetadataFormatSelectItems() {\n-        return oaiMetadataFormatSelectItems;\n-    }\n+  private static final int harvestingScheduleRadioNone = 0;\n+  private static final int harvestingScheduleRadioDaily = 1;\n+  private static final int harvestingScheduleRadioWeekly = 2;\n \n-    public void setOaiMetadataFormatSelectItems(List<SelectItem> oaiMetadataFormatSelectItems) {\n-        this.oaiMetadataFormatSelectItems = oaiMetadataFormatSelectItems;\n-    }\n-    \n-    private void createOaiMetadataFormatSelectItems(List<String> formats) {\n-        setOaiMetadataFormatSelectItems(new ArrayList<>());\n-        if (formats != null) {\n-            for (String f: formats) {\n-                if (!StringUtils.isEmpty(f)) {\n-                    getOaiMetadataFormatSelectItems().add(new SelectItem(f, f));\n-                }\n-            }\n+  private String newHarvestingScheduleDayOfWeek = \"Sunday\";\n+  private String newHarvestingScheduleTimeOfDay = \"12\";\n+\n+  private int harvestingScheduleRadioAMPM;\n+  private static final int harvestingScheduleRadioAM = 0;\n+  private static final int harvestingScheduleRadioPM = 1;\n+\n+\n+  public void initNewClient(ActionEvent ae) {\n+    //this.selectedClient = new HarvestingClient();\n+    this.newNickname = \"\";\n+    this.newHarvestingUrl = \"\";\n+    this.initialSettingsValidated = false;\n+    this.newOaiSet = \"\";\n+    this.newMetadataFormat = \"\";\n+    this.newHarvestingStyle = \"\";\n+\n+    this.harvestTypeRadio = harvestTypeRadioOAI;\n+    this.harvestingScheduleRadio = harvestingScheduleRadioNone;\n+\n+    this.newHarvestingScheduleDayOfWeek = \"Sunday\";\n+    this.newHarvestingScheduleTimeOfDay = \"12\";\n+\n+    this.harvestingScheduleRadioAMPM = harvestingScheduleRadioAM;\n+\n+    this.pageMode = PageMode.CREATE;\n+    this.createStep = CreateStep.ONE;\n+    this.selectedDestinationDataverse = null;\n+\n+  }\n+\n+  public boolean isInitialSettingsValidated() {\n+    return this.initialSettingsValidated;\n+  }\n+\n+  public void setInitialSettingsValidated(boolean validated) {\n+    this.initialSettingsValidated = validated;\n+  }\n+\n+\n+  public String getNewNickname() {\n+    return newNickname;\n+  }\n+\n+  public void setNewNickname(String newNickname) {\n+    this.newNickname = newNickname;\n+  }\n+\n+  public String getNewHarvestingUrl() {\n+    return newHarvestingUrl;\n+  }\n+\n+  public void setNewHarvestingUrl(String newHarvestingUrl) {\n+    this.newHarvestingUrl = newHarvestingUrl;\n+  }\n+\n+  public int getHarvestTypeRadio() {\n+    return this.harvestTypeRadio;\n+  }\n+\n+  public void setHarvestTypeRadio(int harvestTypeRadio) {\n+    this.harvestTypeRadio = harvestTypeRadio;\n+  }\n+\n+  public boolean isHarvestTypeOAI() {\n+    return harvestTypeRadioOAI == harvestTypeRadio;\n+  }\n+\n+  public boolean isHarvestTypeNesstar() {\n+    return harvestTypeRadioNesstar == harvestTypeRadio;\n+  }\n+\n+  public String getNewOaiSet() {\n+    return newOaiSet;\n+  }\n+\n+  public void setNewOaiSet(String newOaiSet) {\n+    this.newOaiSet = newOaiSet;\n+  }\n+\n+  public String getNewMetadataFormat() {\n+    return newMetadataFormat;\n+  }\n+\n+  public void setNewMetadataFormat(String newMetadataFormat) {\n+    this.newMetadataFormat = newMetadataFormat;\n+  }\n+\n+  public String getNewHarvestingStyle() {\n+    return newHarvestingStyle;\n+  }\n+\n+  public void setNewHarvestingStyle(String newHarvestingStyle) {\n+    this.newHarvestingStyle = newHarvestingStyle;\n+  }\n+\n+  public int getHarvestingScheduleRadio() {\n+    return this.harvestingScheduleRadio;\n+  }\n+\n+  public void setHarvestingScheduleRadio(int harvestingScheduleRadio) {\n+    this.harvestingScheduleRadio = harvestingScheduleRadio;\n+  }\n+\n+  public boolean isNewHarvestingScheduled() {\n+    return this.harvestingScheduleRadio != harvestingScheduleRadioNone;\n+  }\n+\n+  public boolean isNewHarvestingScheduledWeekly() {\n+    return this.harvestingScheduleRadio == harvestingScheduleRadioWeekly;\n+  }\n+\n+  public boolean isNewHarvestingScheduledDaily() {\n+    return this.harvestingScheduleRadio == harvestingScheduleRadioDaily;\n+  }\n+\n+  public String getNewHarvestingScheduleDayOfWeek() {\n+    return newHarvestingScheduleDayOfWeek;\n+  }\n+\n+  public void setNewHarvestingScheduleDayOfWeek(String newHarvestingScheduleDayOfWeek) {\n+    this.newHarvestingScheduleDayOfWeek = newHarvestingScheduleDayOfWeek;\n+  }\n+\n+  public String getNewHarvestingScheduleTimeOfDay() {\n+    return newHarvestingScheduleTimeOfDay;\n+  }\n+\n+  public void setNewHarvestingScheduleTimeOfDay(String newHarvestingScheduleTimeOfDay) {\n+    this.newHarvestingScheduleTimeOfDay = newHarvestingScheduleTimeOfDay;\n+  }\n+\n+  public int getHarvestingScheduleRadioAMPM() {\n+    return this.harvestingScheduleRadioAMPM;\n+  }\n+\n+  public void setHarvestingScheduleRadioAMPM(int harvestingScheduleRadioAMPM) {\n+    this.harvestingScheduleRadioAMPM = harvestingScheduleRadioAMPM;\n+  }\n+\n+  public boolean isHarvestingScheduleTimeOfDayPM() {\n+    return getHarvestingScheduleRadioAMPM() == harvestingScheduleRadioPM;\n+  }\n+\n+  public void toggleNewClientSchedule() {\n+\n+  }\n+\n+\n+  public UIInput getNewClientNicknameInputField() {\n+    return newClientNicknameInputField;\n+  }\n+\n+  public void setNewClientNicknameInputField(UIInput newClientInputField) {\n+    this.newClientNicknameInputField = newClientInputField;\n+  }\n+\n+  public UIInput getNewClientUrlInputField() {\n+    return newClientUrlInputField;\n+  }\n+\n+  public void setNewClientUrlInputField(UIInput newClientInputField) {\n+    this.newClientUrlInputField = newClientInputField;\n+  }\n+\n+  public UIInput getHiddenInputField() {\n+    return hiddenInputField;\n+  }\n+\n+  public void setHiddenInputField(UIInput hiddenInputField) {\n+    this.hiddenInputField = hiddenInputField;\n+  }\n+\n+  public UIInput getMetadataFormatMenu() {\n+    return metadataFormatMenu;\n+  }\n+\n+  public void setMetadataFormatMenu(UIInput metadataFormatMenu) {\n+    this.metadataFormatMenu = metadataFormatMenu;\n+  }\n+\n+  public UIInput getRemoteArchiveStyleMenu() {\n+    return remoteArchiveStyleMenu;\n+  }\n+\n+  public void setRemoteArchiveStyleMenu(UIInput remoteArchiveStyleMenu) {\n+    this.remoteArchiveStyleMenu = remoteArchiveStyleMenu;\n+  }\n+\n+  public UIInput getSelectedDataverseMenu() {\n+    return selectedDataverseMenu;\n+  }\n+\n+  public void setSelectedDataverseMenu(UIInput selectedDataverseMenu) {\n+    this.selectedDataverseMenu = selectedDataverseMenu;\n+  }\n+\n+  private List<SelectItem> oaiSetsSelectItems;\n+\n+  public List<SelectItem> getOaiSetsSelectItems() {\n+    return oaiSetsSelectItems;\n+  }\n+\n+  public void setOaiSetsSelectItems(List<SelectItem> oaiSetsSelectItems) {\n+    this.oaiSetsSelectItems = oaiSetsSelectItems;\n+  }\n+\n+  private void createOaiSetsSelectItems(List<String> setNames) {\n+    setOaiSetsSelectItems(new ArrayList<>());\n+    if (setNames != null) {\n+\n+      // Let's sort the list - otherwise, if the list is long enough,\n+      // using this pulldown menu may be very difficult:\n+\n+      Collections.sort(setNames, String.CASE_INSENSITIVE_ORDER);\n+\n+      for (String set : setNames) {\n+        if (!StringUtils.isEmpty(set)) {\n+          getOaiSetsSelectItems().add(new SelectItem(set, set));\n         }\n+      }\n     }\n-    \n-    \n-    private List<SelectItem> harvestingStylesSelectItems = null; \n-    \n-    public List<SelectItem> getHarvestingStylesSelectItems() {\n-        if (this.harvestingStylesSelectItems == null) {\n-            this.harvestingStylesSelectItems = new ArrayList<>(); \n-            for (int i = 0; i < HarvestingClient.HARVEST_STYLE_LIST.size(); i++) {\n-                String style = HarvestingClient.HARVEST_STYLE_LIST.get(i);\n-                this.harvestingStylesSelectItems.add(new SelectItem(\n-                    style,\n-                    HarvestingClient.HARVEST_STYLE_INFOMAP.get(style)));\n-            }\n+  }\n+\n+  private List<SelectItem> oaiMetadataFormatSelectItems;\n+\n+  public List<SelectItem> getOaiMetadataFormatSelectItems() {\n+    return oaiMetadataFormatSelectItems;\n+  }\n+\n+  public void setOaiMetadataFormatSelectItems(List<SelectItem> oaiMetadataFormatSelectItems) {\n+    this.oaiMetadataFormatSelectItems = oaiMetadataFormatSelectItems;\n+  }\n+\n+  private void createOaiMetadataFormatSelectItems(List<String> formats) {\n+    setOaiMetadataFormatSelectItems(new ArrayList<>());\n+    if (formats != null) {\n+      for (String f : formats) {\n+        if (!StringUtils.isEmpty(f)) {\n+          getOaiMetadataFormatSelectItems().add(new SelectItem(f, f));\n         }\n-        return this.harvestingStylesSelectItems;\n-    }\n-    \n-    public void setHarvestingStylesSelectItems(List<SelectItem> harvestingStylesSelectItems) {\n-        this.harvestingStylesSelectItems = harvestingStylesSelectItems;\n+      }\n     }\n-    \n-    private List<String> weekDays = null; \n-    private List<SelectItem> daysOfWeekSelectItems = null;\n-    \n-    public List<SelectItem> getDaysOfWeekSelectItems() {\n-        if (this.daysOfWeekSelectItems == null) {\n-            List<String> weekDays = getWeekDays();\n-            this.daysOfWeekSelectItems = new ArrayList<>();\n-            for (int i = 0; i < weekDays.size(); i++) {\n-                this.daysOfWeekSelectItems.add(new SelectItem(weekDays.get(i), weekDays.get(i)));\n-            }\n-        }\n-        \n-        return this.daysOfWeekSelectItems;\n+  }\n+\n+\n+  private List<SelectItem> harvestingStylesSelectItems = null;\n+\n+  public List<SelectItem> getHarvestingStylesSelectItems() {\n+    if (this.harvestingStylesSelectItems == null) {\n+      this.harvestingStylesSelectItems = new ArrayList<>();\n+      for (int i = 0; i < HarvestingClient.HARVEST_STYLE_LIST.size(); i++) {\n+        String style = HarvestingClient.HARVEST_STYLE_LIST.get(i);\n+        this.harvestingStylesSelectItems.add(new SelectItem(\n+          style,\n+          HarvestingClient.HARVEST_STYLE_INFOMAP.get(style)));\n+      }\n+    }\n+    return this.harvestingStylesSelectItems;\n+  }\n+\n+  public void setHarvestingStylesSelectItems(List<SelectItem> harvestingStylesSelectItems) {\n+    this.harvestingStylesSelectItems = harvestingStylesSelectItems;\n+  }\n+\n+  private List<String> weekDays = null;\n+  private List<SelectItem> daysOfWeekSelectItems = null;\n+\n+  public List<SelectItem> getDaysOfWeekSelectItems() {\n+    if (this.daysOfWeekSelectItems == null) {\n+      List<String> weekDays = getWeekDays();\n+      this.daysOfWeekSelectItems = new ArrayList<>();\n+      for (int i = 0; i < weekDays.size(); i++) {\n+        this.daysOfWeekSelectItems.add(new SelectItem(weekDays.get(i), weekDays.get(i)));\n+      }\n     }\n-    \n-    private List<String> getWeekDays() {\n-        if (weekDays == null) {\n-            weekDays = Arrays.asList(\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\");\n-        }\n-        return weekDays;\n+\n+    return this.daysOfWeekSelectItems;\n+  }\n+\n+  private List<String> getWeekDays() {\n+    if (weekDays == null) {\n+      weekDays = Arrays.asList(\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\");\n     }\n-    \n-    private Integer getWeekDayNumber (String weekDayName) {\n-        List<String> weekDays = getWeekDays();\n-        int i = 0;\n-        for (String weekDayString: weekDays) {\n-            if (weekDayString.equals(weekDayName)) {\n-                return new Integer(i);\n-            }\n-            i++;\n-        }\n-        return null; \n+    return weekDays;\n+  }\n+\n+  private Integer getWeekDayNumber(String weekDayName) {\n+    List<String> weekDays = getWeekDays();\n+    int i = 0;\n+    for (String weekDayString : weekDays) {\n+      if (weekDayString.equals(weekDayName)) {\n+        return new Integer(i);\n+      }\n+      i++;\n+    }\n+    return null;\n+  }\n+\n+  private Integer getWeekDayNumber() {\n+    return getWeekDayNumber(getNewHarvestingScheduleDayOfWeek());\n+  }\n+\n+  private void setWeekdayFromInteger(Integer weekday) {\n+    if (weekday == null || weekday < 1 || weekday > 7) {\n+      weekday = 0;  //set default to Sunday\n     }\n-     \n-    private Integer getWeekDayNumber() {\n-        return getWeekDayNumber(getNewHarvestingScheduleDayOfWeek());\n+    this.newHarvestingScheduleDayOfWeek = getWeekDays().get(weekday);\n+  }\n+\n+  private Integer getHourOfDay() {\n+    Integer hour = null;\n+    if (getNewHarvestingScheduleTimeOfDay() != null) {\n+      try {\n+        hour = new Integer(getNewHarvestingScheduleTimeOfDay());\n+      } catch (Exception ex) {\n+        hour = null;\n+      }\n     }\n-    \n-    private void setWeekdayFromInteger(Integer weekday) {\n-        if (weekday == null || weekday < 1 || weekday > 7) {\n-            weekday = 0;  //set default to Sunday\n-        }\n-        this.newHarvestingScheduleDayOfWeek = getWeekDays().get(weekday);\n+\n+    if (hour != null) {\n+      if (hour.intValue() == 12) {\n+        hour = 0;\n+      }\n+      if (isHarvestingScheduleTimeOfDayPM()) {\n+        hour = hour + 12;\n+      }\n     }\n-    \n-    private Integer getHourOfDay() {\n-        Integer hour = null; \n-        if (getNewHarvestingScheduleTimeOfDay() != null) {\n-            try {\n-                hour = new Integer(getNewHarvestingScheduleTimeOfDay());\n-            } catch (Exception ex) {\n-                hour = null; \n-            }\n-        }\n-        \n-        if (hour != null) {\n-            if (hour.intValue() == 12) {\n-                hour = 0; \n-            }\n-            if (isHarvestingScheduleTimeOfDayPM()) {\n-                hour = hour + 12;\n-            }\n-        }\n-        \n-        return hour;\n+\n+    return hour;\n+  }\n+\n+  private void setHourOfDayAMPMfromInteger(Integer hour24) {\n+    if (hour24 == null || hour24.intValue() > 23) {\n+      hour24 = 0;\n     }\n-    \n-    private void setHourOfDayAMPMfromInteger(Integer hour24) {\n-        if (hour24 == null || hour24.intValue() > 23) {\n-            hour24 = 0;\n-        }\n-        \n-        if (hour24.intValue() > 11) {\n-            hour24 = hour24.intValue() - 12;\n-            this.harvestingScheduleRadioAMPM = harvestingScheduleRadioPM;\n-        } else {\n-            this.harvestingScheduleRadioAMPM = harvestingScheduleRadioAM;\n-        }\n-        \n-        if (hour24.intValue() == 0) {\n-            this.newHarvestingScheduleTimeOfDay = \"12\";        \n-        } else {\n-            this.newHarvestingScheduleTimeOfDay = hour24.toString();\n-        }\n+\n+    if (hour24.intValue() > 11) {\n+      hour24 = hour24.intValue() - 12;\n+      this.harvestingScheduleRadioAMPM = harvestingScheduleRadioPM;\n+    } else {\n+      this.harvestingScheduleRadioAMPM = harvestingScheduleRadioAM;\n     }\n-    \n-    private String makeDefaultArchiveUrl() {\n-        String archiveUrl = null; \n-        \n-        if (getNewHarvestingUrl() != null) {\n-            int k = getNewHarvestingUrl().indexOf('/', 8);\n-            if (k > -1) {\n-                archiveUrl = getNewHarvestingUrl().substring(0, k);\n-            }\n-        }\n-        \n-        return archiveUrl; \n+\n+    if (hour24.intValue() == 0) {\n+      this.newHarvestingScheduleTimeOfDay = \"12\";\n+    } else {\n+      this.newHarvestingScheduleTimeOfDay = hour24.toString();\n     }\n-    \n-    public void setDaysOfWeekSelectItems(List<SelectItem> daysOfWeekSelectItems) {\n-        this.daysOfWeekSelectItems = daysOfWeekSelectItems;\n+  }\n+\n+  private String makeDefaultArchiveUrl() {\n+    String archiveUrl = null;\n+\n+    if (getNewHarvestingUrl() != null) {\n+      int k = getNewHarvestingUrl().indexOf('/', 8);\n+      if (k > -1) {\n+        archiveUrl = getNewHarvestingUrl().substring(0, k);\n+      }\n     }\n-    \n-    private List<SelectItem> hoursOfDaySelectItems = null;\n-    \n-    public List<SelectItem> getHoursOfDaySelectItems() {\n-        if (this.hoursOfDaySelectItems == null) {\n-            this.hoursOfDaySelectItems = new ArrayList<>();\n-            this.hoursOfDaySelectItems.add(new SelectItem( 12+\"\", \"12:00\"));\n-            for (int i = 1; i < 12; i++) {\n-                this.hoursOfDaySelectItems.add(new SelectItem(i+\"\", i+\":00\"));\n-            }\n-        }\n-        \n-        return this.hoursOfDaySelectItems;\n+\n+    return archiveUrl;\n+  }\n+\n+  public void setDaysOfWeekSelectItems(List<SelectItem> daysOfWeekSelectItems) {\n+    this.daysOfWeekSelectItems = daysOfWeekSelectItems;\n+  }\n+\n+  private List<SelectItem> hoursOfDaySelectItems = null;\n+\n+  public List<SelectItem> getHoursOfDaySelectItems() {\n+    if (this.hoursOfDaySelectItems == null) {\n+      this.hoursOfDaySelectItems = new ArrayList<>();\n+      this.hoursOfDaySelectItems.add(new SelectItem(12 + \"\", \"12:00\"));\n+      for (int i = 1; i < 12; i++) {\n+        this.hoursOfDaySelectItems.add(new SelectItem(i + \"\", i + \":00\"));\n+      }\n     }\n-    \n-    public void setHoursOfDaySelectItems(List<SelectItem> hoursOfDaySelectItems) {\n-        this.hoursOfDaySelectItems = hoursOfDaySelectItems;\n+\n+    return this.hoursOfDaySelectItems;\n+  }\n+\n+  public void setHoursOfDaySelectItems(List<SelectItem> hoursOfDaySelectItems) {\n+    this.hoursOfDaySelectItems = hoursOfDaySelectItems;\n+  }\n+\n+  public boolean isSessionUserAuthenticated() {\n+\n+    if (session == null) {\n+      return false;\n     }\n-    \n-    public boolean isSessionUserAuthenticated() {\n-        \n-        if (session == null) {\n-            return false;\n-        }\n-        \n-        if (session.getUser() == null) {\n-            return false;\n-        }\n-        \n-        if (session.getUser().isAuthenticated()) {\n-            return true;\n-        }\n-        \n-        return false;\n+\n+    if (session.getUser() == null) {\n+      return false;\n     }\n-    \n-    public boolean isSuperUser() {\n-        return session.getUser().isSuperuser();\n+\n+    if (session.getUser().isAuthenticated()) {\n+      return true;\n     }\n+\n+    return false;\n+  }\n+\n+  public boolean isSuperUser() {\n+    return session.getUser().isSuperuser();\n+  }\n }\n",
            "diff_size": 1637
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/12/HarvestingClientsPage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/12/HarvestingClientsPage.java\nindex bc83c15dcd7..2d53188dd7a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/12/HarvestingClientsPage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/12/HarvestingClientsPage.java\n@@ -232,7 +232,8 @@ public class HarvestingClientsPage implements java.io.Serializable {\n         // for it:\n         // (looks like we need to sleep for a few milliseconds here, to make sure \n         // it has already been updated with the \"inprogress\" setting)\n-        try{Thread.sleep(500L);}catch(Exception e){}\n+        try {\n+        Thread.sleep(500L);}catch(Exception e){}\n         \n         \n         configuredHarvestingClients = harvestingClientService.getAllHarvestingClients();\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/12/HarvestingClientsPage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/12/HarvestingClientsPage.java\nindex bc83c15dcd7..418ba8ea871 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/12/HarvestingClientsPage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/12/HarvestingClientsPage.java\n@@ -232,7 +232,8 @@ public class HarvestingClientsPage implements java.io.Serializable {\n         // for it:\n         // (looks like we need to sleep for a few milliseconds here, to make sure \n         // it has already been updated with the \"inprogress\" setting)\n-        try{Thread.sleep(500L);}catch(Exception e){}\n+        try {\n+            Thread.sleep(500L);}catch(Exception e){}\n         \n         \n         configuredHarvestingClients = harvestingClientService.getAllHarvestingClients();\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}