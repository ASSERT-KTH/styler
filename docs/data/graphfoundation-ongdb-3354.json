{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3354",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "39",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "68",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "215",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3354/UnsafeTable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3354/UnsafeTable.java\nindex c74ce8d017c..52a3cb9c1cf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3354/UnsafeTable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3354/UnsafeTable.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.collection.primitive.hopscotch;\n \n import org.neo4j.memory.MemoryAllocationTracker;\n@@ -24,206 +25,204 @@ import org.neo4j.unsafe.impl.internal.dragons.UnsafeUtil;\n \n public abstract class UnsafeTable<VALUE> extends PowerOfTwoQuantizedTable<VALUE>\n {\n-    private final int bytesPerKey;\n-    private final int bytesPerEntry;\n-    private final long dataSize;\n-    private final long allocatedBytes;\n-    // address which should be free when closing\n-    private final long allocatedAddress;\n-    // address which should be used to access the table, the address where the table actually starts at\n-    private final long address;\n-    protected final VALUE valueMarker;\n-    protected final MemoryAllocationTracker allocationTracker;\n-\n-    protected UnsafeTable( int capacity, int bytesPerKey, VALUE valueMarker, MemoryAllocationTracker allocationTracker )\n-    {\n-        super( capacity, 32 );\n-        UnsafeUtil.assertHasUnsafe();\n-        this.allocationTracker = allocationTracker;\n-        this.bytesPerKey = bytesPerKey;\n-        this.bytesPerEntry = 4 + bytesPerKey;\n-        this.valueMarker = valueMarker;\n-        this.dataSize = (long) this.capacity * bytesPerEntry;\n-\n-        // Below is a piece of code which ensures that allocated memory is aligned to 4-byte boundary\n-        // if memory system requires aligned memory access. The reason we pick 4-byte boundary is that\n-        // it's the lowest common denominator and the size of our hop-bits field for every entry.\n-        // So even for a table which would only deal with, say longs (8-byte), it would still need to\n-        // read and write 4-byte hop-bits fields. Therefore this table can, if required to, read anything\n-        // bigger than 4-byte fields as multiple 4-byte fields. This way it can play well with aligned\n-        // memory access requirements.\n-\n-        assert bytesPerEntry % Integer.BYTES == 0 : \"Bytes per entry needs to be divisible by 4, this constraint \" +\n-                \"is checked because on memory systems requiring aligned memory access this would otherwise break.\";\n-\n-        if ( UnsafeUtil.allowUnalignedMemoryAccess )\n-        {\n-            allocatedBytes = dataSize;\n-            this.allocatedAddress = this.address = UnsafeUtil.allocateMemory( allocatedBytes, this.allocationTracker );\n-        }\n-        else\n-        {\n-            // There's an assertion above also verifying this, but it's only an actual problem if our memory system\n-            // requires aligned access, which seems to be the case right here and now.\n-            if ( (bytesPerEntry % Integer.BYTES) != 0 )\n-            {\n-                throw new IllegalArgumentException( \"Memory system requires aligned memory access and \" +\n-                        getClass().getSimpleName() + \" was designed to cope with this requirement by \" +\n-                        \"being able to accessing data in 4-byte chunks, if needed to. \" +\n-                        \"Although this table tried to be constructed with bytesPerKey:\" + bytesPerKey +\n-                        \" yielding a bytesPerEntry:\" + bytesPerEntry + \", which isn't 4-byte aligned.\" );\n-            }\n-\n-            allocatedBytes = dataSize + Integer.BYTES - 1;\n-            this.allocatedAddress = UnsafeUtil.allocateMemory( allocatedBytes, this.allocationTracker );\n-            this.address = UnsafeUtil.alignedMemory( allocatedAddress, Integer.BYTES );\n-        }\n-\n-        clearMemory();\n-    }\n-\n-    @Override\n-    public void clear()\n-    {\n-        if ( !isEmpty() )\n-        {\n-            clearMemory();\n-        }\n-        super.clear();\n-    }\n-\n-    private void clearMemory()\n-    {\n-        UnsafeUtil.setMemory( address, dataSize, (byte)-1 );\n-    }\n-\n-    @Override\n-    public long key( int index )\n-    {\n-        return internalKey( keyAddress( index ) );\n-    }\n-\n-    protected abstract long internalKey( long keyAddress );\n-\n-    @Override\n-    public VALUE value( int index )\n-    {\n-        return valueMarker;\n-    }\n-\n-    @Override\n-    public void put( int index, long key, VALUE value )\n-    {\n-        internalPut( keyAddress( index ), key, value );\n-        size++;\n-    }\n-\n-    protected abstract void internalPut( long keyAddress, long key, VALUE value );\n-\n-    @Override\n-    public VALUE putValue( int index, VALUE value )\n-    {\n-        return value;\n-    }\n-\n-    @Override\n-    public long move( int fromIndex, int toIndex )\n-    {\n-        long adr = keyAddress( fromIndex );\n-        long key = internalKey( adr );\n-        VALUE value = internalRemove( adr );\n-        internalPut( keyAddress( toIndex ), key, value );\n-        return key;\n-    }\n-\n-    @Override\n-    public VALUE remove( int index )\n-    {\n-        VALUE value = internalRemove( keyAddress( index ) );\n-        size--;\n-        return value;\n-    }\n-\n-    protected VALUE internalRemove( long keyAddress )\n-    {\n-        UnsafeUtil.setMemory( keyAddress, bytesPerKey, (byte)-1 );\n-        return valueMarker;\n-    }\n-\n-    @Override\n-    public long hopBits( int index )\n-    {\n-        return ~(UnsafeUtil.getInt( hopBitsAddress( index ) ) | 0xFFFFFFFF00000000L);\n-    }\n-\n-    @Override\n-    public void putHopBit( int index, int hd )\n-    {\n-        long adr = hopBitsAddress( index );\n-        int hopBits = UnsafeUtil.getInt( adr );\n-        hopBits &= ~(1 << hd);\n-        UnsafeUtil.putInt( adr, hopBits );\n-    }\n-\n-    @Override\n-    public void moveHopBit( int index, int hd, int delta )\n-    {\n-        long adr = hopBitsAddress( index );\n-        int hopBits = UnsafeUtil.getInt( adr );\n-        hopBits ^= (1 << hd) | (1 << (hd + delta));\n-        UnsafeUtil.putInt( adr, hopBits );\n-    }\n-\n-    protected long keyAddress( int index )\n-    {\n-        return address + (index * ((long) bytesPerEntry)) + 4;\n-    }\n-\n-    protected long hopBitsAddress( int index )\n-    {\n-        return address + (index * ((long) bytesPerEntry));\n-    }\n-\n-    @Override\n-    public void removeHopBit( int index, int hd )\n-    {\n-        long adr = hopBitsAddress( index );\n-        int hopBits = UnsafeUtil.getInt( adr );\n-        hopBits |= 1 << hd;\n-        UnsafeUtil.putInt( adr, hopBits );\n-    }\n-\n-    @Override\n-    public void close()\n-    {\n-        UnsafeUtil.free( allocatedAddress, allocatedBytes, allocationTracker );\n-    }\n-\n-    protected static void alignmentSafePutLongAsTwoInts( long address, long value )\n-    {\n-        if ( UnsafeUtil.allowUnalignedMemoryAccess )\n-        {\n-            UnsafeUtil.putLong( address, value );\n-        }\n-        else\n-        {\n-            // See javadoc in constructor as to why we do this\n-            UnsafeUtil.putInt( address, (int) value );\n-            UnsafeUtil.putInt( address + Integer.BYTES, (int) (value >>> Integer.SIZE) );\n-        }\n-    }\n-\n-    protected static long alignmentSafeGetLongAsTwoInts( long address )\n-    {\n-        if ( UnsafeUtil.allowUnalignedMemoryAccess )\n-        {\n-            return UnsafeUtil.getLong( address );\n-        }\n-\n-        // See javadoc in constructor as to why we do this\n-        long lsb = UnsafeUtil.getInt( address ) & 0xFFFFFFFFL;\n-        long msb = UnsafeUtil.getInt( address + Integer.BYTES ) & 0xFFFFFFFFL;\n-        return lsb | (msb << Integer.SIZE);\n-    }\n+  private final int bytesPerKey;\n+  private final int bytesPerEntry;\n+  private final long dataSize;\n+  private final long allocatedBytes;\n+  // address which should be free when closing\n+  private final long allocatedAddress;\n+  // address which should be used to access the table, the address where the table actually starts at\n+  private final long address;\n+  protected final VALUE valueMarker;\n+  protected final MemoryAllocationTracker allocationTracker;\n+\n+  protected UnsafeTable(int capacity, int bytesPerKey, VALUE valueMarker, MemoryAllocationTracker allocationTracker)\n+  {\n+    super(capacity, 32);\n+    UnsafeUtil.assertHasUnsafe();\n+    this.allocationTracker = allocationTracker;\n+    this.bytesPerKey = bytesPerKey;\n+    this.bytesPerEntry = 4 + bytesPerKey;\n+    this.valueMarker = valueMarker;\n+    this.dataSize = (long) this.capacity * bytesPerEntry;\n+\n+    // Below is a piece of code which ensures that allocated memory is aligned to 4-byte boundary\n+    // if memory system requires aligned memory access. The reason we pick 4-byte boundary is that\n+    // it's the lowest common denominator and the size of our hop-bits field for every entry.\n+    // So even for a table which would only deal with, say longs (8-byte), it would still need to\n+    // read and write 4-byte hop-bits fields. Therefore this table can, if required to, read anything\n+    // bigger than 4-byte fields as multiple 4-byte fields. This way it can play well with aligned\n+    // memory access requirements.\n+\n+    assert bytesPerEntry % Integer.BYTES == 0 : \"Bytes per entry needs to be divisible by 4, this constraint \" +\n+        \"is checked because on memory systems requiring aligned memory access this would otherwise break.\";\n+\n+    if (UnsafeUtil.allowUnalignedMemoryAccess)\n+    {\n+      allocatedBytes = dataSize;\n+      this.allocatedAddress = this.address = UnsafeUtil.allocateMemory(allocatedBytes, this.allocationTracker);\n+    } else\n+    {\n+      // There's an assertion above also verifying this, but it's only an actual problem if our memory system\n+      // requires aligned access, which seems to be the case right here and now.\n+      if ((bytesPerEntry % Integer.BYTES) != 0)\n+      {\n+        throw new IllegalArgumentException(\"Memory system requires aligned memory access and \" +\n+            getClass().getSimpleName() + \" was designed to cope with this requirement by \" +\n+            \"being able to accessing data in 4-byte chunks, if needed to. \" +\n+            \"Although this table tried to be constructed with bytesPerKey:\" + bytesPerKey +\n+            \" yielding a bytesPerEntry:\" + bytesPerEntry + \", which isn't 4-byte aligned.\");\n+      }\n+\n+      allocatedBytes = dataSize + Integer.BYTES - 1;\n+      this.allocatedAddress = UnsafeUtil.allocateMemory(allocatedBytes, this.allocationTracker);\n+      this.address = UnsafeUtil.alignedMemory(allocatedAddress, Integer.BYTES);\n+    }\n+\n+    clearMemory();\n+  }\n+\n+  @Override\n+  public void clear()\n+  {\n+    if (!isEmpty())\n+    {\n+      clearMemory();\n+    }\n+    super.clear();\n+  }\n+\n+  private void clearMemory()\n+  {\n+    UnsafeUtil.setMemory(address, dataSize, (byte) -1);\n+  }\n+\n+  @Override\n+  public long key(int index)\n+  {\n+    return internalKey(keyAddress(index));\n+  }\n+\n+  protected abstract long internalKey(long keyAddress);\n+\n+  @Override\n+  public VALUE value(int index)\n+  {\n+    return valueMarker;\n+  }\n+\n+  @Override\n+  public void put(int index, long key, VALUE value)\n+  {\n+    internalPut(keyAddress(index), key, value);\n+    size++;\n+  }\n+\n+  protected abstract void internalPut(long keyAddress, long key, VALUE value);\n+\n+  @Override\n+  public VALUE putValue(int index, VALUE value)\n+  {\n+    return value;\n+  }\n+\n+  @Override\n+  public long move(int fromIndex, int toIndex)\n+  {\n+    long adr = keyAddress(fromIndex);\n+    long key = internalKey(adr);\n+    VALUE value = internalRemove(adr);\n+    internalPut(keyAddress(toIndex), key, value);\n+    return key;\n+  }\n+\n+  @Override\n+  public VALUE remove(int index)\n+  {\n+    VALUE value = internalRemove(keyAddress(index));\n+    size--;\n+    return value;\n+  }\n+\n+  protected VALUE internalRemove(long keyAddress)\n+  {\n+    UnsafeUtil.setMemory(keyAddress, bytesPerKey, (byte) -1);\n+    return valueMarker;\n+  }\n+\n+  @Override\n+  public long hopBits(int index)\n+  {\n+    return ~(UnsafeUtil.getInt(hopBitsAddress(index)) | 0xFFFFFFFF00000000L);\n+  }\n+\n+  @Override\n+  public void putHopBit(int index, int hd)\n+  {\n+    long adr = hopBitsAddress(index);\n+    int hopBits = UnsafeUtil.getInt(adr);\n+    hopBits &= ~(1 << hd);\n+    UnsafeUtil.putInt(adr, hopBits);\n+  }\n+\n+  @Override\n+  public void moveHopBit(int index, int hd, int delta)\n+  {\n+    long adr = hopBitsAddress(index);\n+    int hopBits = UnsafeUtil.getInt(adr);\n+    hopBits ^= (1 << hd) | (1 << (hd + delta));\n+    UnsafeUtil.putInt(adr, hopBits);\n+  }\n+\n+  protected long keyAddress(int index)\n+  {\n+    return address + (index * ((long) bytesPerEntry)) + 4;\n+  }\n+\n+  protected long hopBitsAddress(int index)\n+  {\n+    return address + (index * ((long) bytesPerEntry));\n+  }\n+\n+  @Override\n+  public void removeHopBit(int index, int hd)\n+  {\n+    long adr = hopBitsAddress(index);\n+    int hopBits = UnsafeUtil.getInt(adr);\n+    hopBits |= 1 << hd;\n+    UnsafeUtil.putInt(adr, hopBits);\n+  }\n+\n+  @Override\n+  public void close()\n+  {\n+    UnsafeUtil.free(allocatedAddress, allocatedBytes, allocationTracker);\n+  }\n+\n+  protected static void alignmentSafePutLongAsTwoInts(long address, long value)\n+  {\n+    if (UnsafeUtil.allowUnalignedMemoryAccess)\n+    {\n+      UnsafeUtil.putLong(address, value);\n+    } else\n+    {\n+      // See javadoc in constructor as to why we do this\n+      UnsafeUtil.putInt(address, (int) value);\n+      UnsafeUtil.putInt(address + Integer.BYTES, (int) (value >>> Integer.SIZE));\n+    }\n+  }\n+\n+  protected static long alignmentSafeGetLongAsTwoInts(long address)\n+  {\n+    if (UnsafeUtil.allowUnalignedMemoryAccess)\n+    {\n+      return UnsafeUtil.getLong(address);\n+    }\n+\n+    // See javadoc in constructor as to why we do this\n+    long lsb = UnsafeUtil.getInt(address) & 0xFFFFFFFFL;\n+    long msb = UnsafeUtil.getInt(address + Integer.BYTES) & 0xFFFFFFFFL;\n+    return lsb | (msb << Integer.SIZE);\n+  }\n \n }\n",
            "diff_size": 202
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 216).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 414).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "205",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3354/UnsafeTable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3354/UnsafeTable.java\nindex c74ce8d017c..c59be662fa6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3354/UnsafeTable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3354/UnsafeTable.java\n@@ -53,10 +53,8 @@ public abstract class UnsafeTable<VALUE> extends PowerOfTwoQuantizedTable<VALUE>\n         // bigger than 4-byte fields as multiple 4-byte fields. This way it can play well with aligned\n         // memory access requirements.\n \n-        assert bytesPerEntry % Integer.BYTES == 0 : \"Bytes per entry needs to be divisible by 4, this constraint \" +\n-                \"is checked because on memory systems requiring aligned memory access this would otherwise break.\";\n-\n-        if ( UnsafeUtil.allowUnalignedMemoryAccess )\n+        assert bytesPerEntry % Integer.BYTES == 0 : \"Bytes per entry needs to be divisible by 4, this constraint \" + \"is checked because on memory systems requiring aligned memory access this would otherwise break.\";\n+if ( UnsafeUtil.allowUnalignedMemoryAccess )\n         {\n             allocatedBytes = dataSize;\n             this.allocatedAddress = this.address = UnsafeUtil.allocateMemory( allocatedBytes, this.allocationTracker );\n@@ -65,13 +63,9 @@ public abstract class UnsafeTable<VALUE> extends PowerOfTwoQuantizedTable<VALUE>\n         {\n             // There's an assertion above also verifying this, but it's only an actual problem if our memory system\n             // requires aligned access, which seems to be the case right here and now.\n-            if ( (bytesPerEntry % Integer.BYTES) != 0 )\n+            if ( ( bytesPerEntry % Integer.BYTES) != 0 )\n             {\n-                throw new IllegalArgumentException( \"Memory system requires aligned memory access and \" +\n-                        getClass().getSimpleName() + \" was designed to cope with this requirement by \" +\n-                        \"being able to accessing data in 4-byte chunks, if needed to. \" +\n-                        \"Although this table tried to be constructed with bytesPerKey:\" + bytesPerKey +\n-                        \" yielding a bytesPerEntry:\" + bytesPerEntry + \", which isn't 4-byte aligned.\" );\n+                throw new IllegalArgumentException( \"Memory system requires aligned memory access and \" + getClass().getSimpleName() + \" was designed to cope with this requirement by \" + \"being able to accessing data in 4-byte chunks, if needed to. \" + \"Although this table tried to be constructed with bytesPerKey:\" + bytesPerKey + \" yielding a bytesPerEntry:\" + bytesPerEntry + \", which isn't 4-byte aligned.\" );\n             }\n \n             allocatedBytes = dataSize + Integer.BYTES - 1;\n@@ -153,7 +147,7 @@ public abstract class UnsafeTable<VALUE> extends PowerOfTwoQuantizedTable<VALUE>\n     @Override\n     public long hopBits( int index )\n     {\n-        return ~(UnsafeUtil.getInt( hopBitsAddress( index ) ) | 0xFFFFFFFF00000000L);\n+        return ~(UnsafeUtil.getInt( hopBitsAddress( index ) ) | 0xFFFFFFFF00000000L );\n     }\n \n     @Override\n@@ -161,7 +155,7 @@ public abstract class UnsafeTable<VALUE> extends PowerOfTwoQuantizedTable<VALUE>\n     {\n         long adr = hopBitsAddress( index );\n         int hopBits = UnsafeUtil.getInt( adr );\n-        hopBits &= ~(1 << hd);\n+        hopBits &= ~( 1 << hd);\n         UnsafeUtil.putInt( adr, hopBits );\n     }\n \n@@ -170,18 +164,18 @@ public abstract class UnsafeTable<VALUE> extends PowerOfTwoQuantizedTable<VALUE>\n     {\n         long adr = hopBitsAddress( index );\n         int hopBits = UnsafeUtil.getInt( adr );\n-        hopBits ^= (1 << hd) | (1 << (hd + delta));\n+        hopBits ^= ( 1 << hd) | ( 1 << (hd + delta));\n         UnsafeUtil.putInt( adr, hopBits );\n     }\n \n     protected long keyAddress( int index )\n     {\n-        return address + (index * ((long) bytesPerEntry)) + 4;\n+        return address + ( index * ((long) bytesPerEntry)) + 4;\n     }\n \n     protected long hopBitsAddress( int index )\n     {\n-        return address + (index * ((long) bytesPerEntry));\n+        return address + ( index * ((long) bytesPerEntry));\n     }\n \n     @Override\n@@ -208,8 +202,8 @@ public abstract class UnsafeTable<VALUE> extends PowerOfTwoQuantizedTable<VALUE>\n         else\n         {\n             // See javadoc in constructor as to why we do this\n-            UnsafeUtil.putInt( address, (int) value );\n-            UnsafeUtil.putInt( address + Integer.BYTES, (int) (value >>> Integer.SIZE) );\n+            UnsafeUtil.putInt( address, ( int) value );\n+            UnsafeUtil.putInt( address + Integer.BYTES, ( int) ( value >>> Integer.SIZE) );\n         }\n     }\n \n@@ -223,7 +217,6 @@ public abstract class UnsafeTable<VALUE> extends PowerOfTwoQuantizedTable<VALUE>\n         // See javadoc in constructor as to why we do this\n         long lsb = UnsafeUtil.getInt( address ) & 0xFFFFFFFFL;\n         long msb = UnsafeUtil.getInt( address + Integer.BYTES ) & 0xFFFFFFFFL;\n-        return lsb | (msb << Integer.SIZE);\n+        return lsb | ( msb << Integer.SIZE);\n     }\n-\n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}