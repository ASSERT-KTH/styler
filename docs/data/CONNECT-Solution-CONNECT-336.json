{
    "project_name": "CONNECT-Solution-CONNECT",
    "error_id": "336",
    "information": {
        "errors": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.adapter.deferred.queue;\n\nimport gov.hhs.fha.nhinc.adapter.deferred.queue.service.AdapterPatientDiscoveryDeferredReqQueueProcessServicePortDescriptor;\nimport gov.hhs.fha.nhinc.adapterpatientdiscoveryreqqueueprocess.AdapterPatientDiscoveryDeferredReqQueueProcessPortType;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/336/PatientDiscoveryDeferredReqQueueClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/336/PatientDiscoveryDeferredReqQueueClient.java\nindex 3309bf9986b..3541ea519ba 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/336/PatientDiscoveryDeferredReqQueueClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/336/PatientDiscoveryDeferredReqQueueClient.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.adapter.deferred.queue;\n \n import gov.hhs.fha.nhinc.adapter.deferred.queue.service.AdapterPatientDiscoveryDeferredReqQueueProcessServicePortDescriptor;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/336/PatientDiscoveryDeferredReqQueueClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/336/PatientDiscoveryDeferredReqQueueClient.java\nindex 3309bf9986b..62c3b575419 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/336/PatientDiscoveryDeferredReqQueueClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/336/PatientDiscoveryDeferredReqQueueClient.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.adapter.deferred.queue;\n \n import gov.hhs.fha.nhinc.adapter.deferred.queue.service.AdapterPatientDiscoveryDeferredReqQueueProcessServicePortDescriptor;\n@@ -42,80 +43,80 @@ import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n /**\n- *\n  * @author richard.ettema\n  */\n public class PatientDiscoveryDeferredReqQueueClient {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(PatientDiscoveryDeferredReqQueueClient.class);\n-    private static final String SERVICE_NAME =\n-            NhincConstants.PATIENT_DISCOVERY_ADAPTER_ASYNC_REQ_QUEUE_PROCESS_SERVICE_NAME;\n+  private static final Logger LOG = LoggerFactory.getLogger(PatientDiscoveryDeferredReqQueueClient.class);\n+  private static final String SERVICE_NAME =\n+      NhincConstants.PATIENT_DISCOVERY_ADAPTER_ASYNC_REQ_QUEUE_PROCESS_SERVICE_NAME;\n \n-    private final WebServiceProxyHelper proxyHelper;\n+  private final WebServiceProxyHelper proxyHelper;\n \n-    /**\n-     * Default constructor.\n-     */\n-    public PatientDiscoveryDeferredReqQueueClient() {\n-        proxyHelper = new WebServiceProxyHelper();\n-    }\n+  /**\n+   * Default constructor.\n+   */\n+  public PatientDiscoveryDeferredReqQueueClient() {\n+    proxyHelper = new WebServiceProxyHelper();\n+  }\n \n-    /**\n-     * Send queue process request for a deferred patient discovery queue record.\n-     *\n-     * @param messageId takes in MessageID\n-     * @return queue process response\n-     */\n-    public PatientDiscoveryDeferredReqQueueProcessResponseType\n-            processPatientDiscoveryDeferredReqQueue(String messageId) {\n-        String msgText;\n+  /**\n+   * Send queue process request for a deferred patient discovery queue record.\n+   *\n+   * @param messageId takes in MessageID\n+   * @return queue process response\n+   */\n+  public PatientDiscoveryDeferredReqQueueProcessResponseType\n+  processPatientDiscoveryDeferredReqQueue(String messageId) {\n+    String msgText;\n \n-        PatientDiscoveryDeferredReqQueueProcessResponseType response =\n-                new PatientDiscoveryDeferredReqQueueProcessResponseType();\n-        SuccessOrFailType sof = new SuccessOrFailType();\n-        sof.setSuccess(Boolean.FALSE);\n-        response.setSuccessOrFail(sof);\n+    PatientDiscoveryDeferredReqQueueProcessResponseType response =\n+        new PatientDiscoveryDeferredReqQueueProcessResponseType();\n+    SuccessOrFailType sof = new SuccessOrFailType();\n+    sof.setSuccess(Boolean.FALSE);\n+    response.setSuccessOrFail(sof);\n \n-        try {\n+    try {\n \n-            String endpointURL = getUrl(SERVICE_NAME);\n+      String endpointURL = getUrl(SERVICE_NAME);\n \n-            if (NullChecker.isNotNullish(endpointURL)) {\n-                ServicePortDescriptor<AdapterPatientDiscoveryDeferredReqQueueProcessPortType> portDescriptor =\n-                        new AdapterPatientDiscoveryDeferredReqQueueProcessServicePortDescriptor();\n-                CONNECTClient<AdapterPatientDiscoveryDeferredReqQueueProcessPortType> client =\n-                        CONNECTClientFactory.getInstance().getCONNECTClientUnsecured(portDescriptor, endpointURL, null);\n+      if (NullChecker.isNotNullish(endpointURL)) {\n+        ServicePortDescriptor<AdapterPatientDiscoveryDeferredReqQueueProcessPortType> portDescriptor =\n+            new AdapterPatientDiscoveryDeferredReqQueueProcessServicePortDescriptor();\n+        CONNECTClient<AdapterPatientDiscoveryDeferredReqQueueProcessPortType> client =\n+            CONNECTClientFactory.getInstance().getCONNECTClientUnsecured(portDescriptor, endpointURL, null);\n \n-                PatientDiscoveryDeferredReqQueueProcessRequestType request =\n-                        new PatientDiscoveryDeferredReqQueueProcessRequestType();\n-                request.setMessageId(messageId);\n-                response =\n-                        (PatientDiscoveryDeferredReqQueueProcessResponseType) client.invokePort(\n-                                AdapterPatientDiscoveryDeferredReqQueueProcessPortType.class,\n-                                \"processPatientDiscoveryDeferredReqQueue\", request);\n-            } else {\n-                msgText =\n-                        \"Endpoint URL not found for local home community service name [\"\n-                                + NhincConstants.PATIENT_DISCOVERY_ADAPTER_ASYNC_REQ_QUEUE_PROCESS_SERVICE_NAME + \"]\";\n-                LOG.error(msgText);\n-                response.setResponse(msgText);\n-            }\n-        } catch (Exception ex) {\n-            msgText = \"Exception occurred during deferred patient discovery queue processing\";\n-            LOG.error(msgText, ex);\n-            response.setResponse(msgText);\n-        }\n-        return response;\n+        PatientDiscoveryDeferredReqQueueProcessRequestType request =\n+            new PatientDiscoveryDeferredReqQueueProcessRequestType();\n+        request.setMessageId(messageId);\n+        response =\n+            (PatientDiscoveryDeferredReqQueueProcessResponseType) client.invokePort(\n+                AdapterPatientDiscoveryDeferredReqQueueProcessPortType.class,\n+                \"processPatientDiscoveryDeferredReqQueue\", request);\n+      } else {\n+        msgText =\n+            \"Endpoint URL not found for local home community service name [\"\n+                + NhincConstants.PATIENT_DISCOVERY_ADAPTER_ASYNC_REQ_QUEUE_PROCESS_SERVICE_NAME + \"]\";\n+        LOG.error(msgText);\n+        response.setResponse(msgText);\n+      }\n+    } catch (Exception ex) {\n+      msgText = \"Exception occurred during deferred patient discovery queue processing\";\n+      LOG.error(msgText, ex);\n+      response.setResponse(msgText);\n     }\n+    return response;\n+  }\n \n-    /**\n-     * Get's the URL.\n-     * @param serviceName String servicename\n-     * @return the URL\n-     * @throws ConnectionManagerException an error\n-     */\n-    protected String getUrl(String serviceName) throws ConnectionManagerException {\n-        return proxyHelper.getAdapterEndPointFromConnectionManager(serviceName);\n-    }\n+  /**\n+   * Get's the URL.\n+   *\n+   * @param serviceName String servicename\n+   * @return the URL\n+   * @throws ConnectionManagerException an error\n+   */\n+  protected String getUrl(String serviceName) throws ConnectionManagerException {\n+    return proxyHelper.getAdapterEndPointFromConnectionManager(serviceName);\n+  }\n \n }\n",
            "diff_size": 65
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 185).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "80",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 175).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "84",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 213).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/336/PatientDiscoveryDeferredReqQueueClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/336/PatientDiscoveryDeferredReqQueueClient.java\nindex 3309bf9986b..f07dd9aa824 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/336/PatientDiscoveryDeferredReqQueueClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/336/PatientDiscoveryDeferredReqQueueClient.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.adapter.deferred.queue;\n \n import gov.hhs.fha.nhinc.adapter.deferred.queue.service.AdapterPatientDiscoveryDeferredReqQueueProcessServicePortDescriptor;\n@@ -48,10 +49,8 @@ import org.slf4j.LoggerFactory;\n public class PatientDiscoveryDeferredReqQueueClient {\n \n     private static final Logger LOG = LoggerFactory.getLogger(PatientDiscoveryDeferredReqQueueClient.class);\n-    private static final String SERVICE_NAME =\n-            NhincConstants.PATIENT_DISCOVERY_ADAPTER_ASYNC_REQ_QUEUE_PROCESS_SERVICE_NAME;\n-\n-    private final WebServiceProxyHelper proxyHelper;\n+    private static final String SERVICE_NAME = NhincConstants.PATIENT_DISCOVERY_ADAPTER_ASYNC_REQ_QUEUE_PROCESS_SERVICE_NAME;\n+private final WebServiceProxyHelper proxyHelper;\n \n     /**\n      * Default constructor.\n@@ -66,45 +65,34 @@ public class PatientDiscoveryDeferredReqQueueClient {\n      * @param messageId takes in MessageID\n      * @return queue process response\n      */\n-    public PatientDiscoveryDeferredReqQueueProcessResponseType\n-            processPatientDiscoveryDeferredReqQueue(String messageId) {\n+    public PatientDiscoveryDeferredReqQueueProcessResponseType processPatientDiscoveryDeferredReqQueue(String messageId) {\n         String msgText;\n \n-        PatientDiscoveryDeferredReqQueueProcessResponseType response =\n-                new PatientDiscoveryDeferredReqQueueProcessResponseType();\n-        SuccessOrFailType sof = new SuccessOrFailType();\n+        PatientDiscoveryDeferredReqQueueProcessResponseType response = new PatientDiscoveryDeferredReqQueueProcessResponseType();\n+\n+SuccessOrFailType sof = new SuccessOrFailType();\n         sof.setSuccess(Boolean.FALSE);\n         response.setSuccessOrFail(sof);\n+try {\n+    String endpointURL = getUrl(SERVICE_NAME);\n+if (NullChecker.isNotNullish(endpointURL)) {\n+                ServicePortDescriptor<AdapterPatientDiscoveryDeferredReqQueueProcessPortType> portDescriptor = new AdapterPatientDiscoveryDeferredReqQueueProcessServicePortDescriptor();\n+CONNECTClient<AdapterPatientDiscoveryDeferredReqQueueProcessPortType> client = CONNECTClientFactory.getInstance().getCONNECTClientUnsecured(portDescriptor, endpointURL, null);\n \n-        try {\n-\n-            String endpointURL = getUrl(SERVICE_NAME);\n-\n-            if (NullChecker.isNotNullish(endpointURL)) {\n-                ServicePortDescriptor<AdapterPatientDiscoveryDeferredReqQueueProcessPortType> portDescriptor =\n-                        new AdapterPatientDiscoveryDeferredReqQueueProcessServicePortDescriptor();\n-                CONNECTClient<AdapterPatientDiscoveryDeferredReqQueueProcessPortType> client =\n-                        CONNECTClientFactory.getInstance().getCONNECTClientUnsecured(portDescriptor, endpointURL, null);\n-\n-                PatientDiscoveryDeferredReqQueueProcessRequestType request =\n-                        new PatientDiscoveryDeferredReqQueueProcessRequestType();\n-                request.setMessageId(messageId);\n-                response =\n-                        (PatientDiscoveryDeferredReqQueueProcessResponseType) client.invokePort(\n-                                AdapterPatientDiscoveryDeferredReqQueueProcessPortType.class,\n-                                \"processPatientDiscoveryDeferredReqQueue\", request);\n-            } else {\n-                msgText =\n-                        \"Endpoint URL not found for local home community service name [\"\n-                                + NhincConstants.PATIENT_DISCOVERY_ADAPTER_ASYNC_REQ_QUEUE_PROCESS_SERVICE_NAME + \"]\";\n-                LOG.error(msgText);\n+PatientDiscoveryDeferredReqQueueProcessRequestType request = new PatientDiscoveryDeferredReqQueueProcessRequestType();\n+request.setMessageId(messageId);\n+                response = (PatientDiscoveryDeferredReqQueueProcessResponseType) client.invokePort(AdapterPatientDiscoveryDeferredReqQueueProcessPortType.class, \"processPatientDiscoveryDeferredReqQueue\", request);\n+    } else {\n+                msgText = \"Endpoint URL not found for local home community service name [\" + NhincConstants.PATIENT_DISCOVERY_ADAPTER_ASYNC_REQ_QUEUE_PROCESS_SERVICE_NAME + \"]\";\n+LOG.error(msgText);\n                 response.setResponse(msgText);\n             }\n         } catch (Exception ex) {\n             msgText = \"Exception occurred during deferred patient discovery queue processing\";\n             LOG.error(msgText, ex);\n             response.setResponse(msgText);\n-        }\n+\n+    }\n         return response;\n     }\n \n@@ -118,4 +106,4 @@ public class PatientDiscoveryDeferredReqQueueClient {\n         return proxyHelper.getAdapterEndPointFromConnectionManager(serviceName);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 40
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "74",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "80",
                    "column": "15",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "81",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 185).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 191).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "87",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "91",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/336/PatientDiscoveryDeferredReqQueueClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/336/PatientDiscoveryDeferredReqQueueClient.java\nindex 3309bf9986b..797a7c9715b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/336/PatientDiscoveryDeferredReqQueueClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/336/PatientDiscoveryDeferredReqQueueClient.java\n@@ -45,17 +45,18 @@ import org.slf4j.LoggerFactory;\n  *\n  * @author richard.ettema\n  */\n+\n+\n public class PatientDiscoveryDeferredReqQueueClient {\n \n     private static final Logger LOG = LoggerFactory.getLogger(PatientDiscoveryDeferredReqQueueClient.class);\n-    private static final String SERVICE_NAME =\n-            NhincConstants.PATIENT_DISCOVERY_ADAPTER_ASYNC_REQ_QUEUE_PROCESS_SERVICE_NAME;\n-\n+    private static final String SERVICE_NAME = NhincConstants.PATIENT_DISCOVERY_ADAPTER_ASYNC_REQ_QUEUE_PROCESS_SERVICE_NAME;\n     private final WebServiceProxyHelper proxyHelper;\n \n     /**\n      * Default constructor.\n      */\n+\n     public PatientDiscoveryDeferredReqQueueClient() {\n         proxyHelper = new WebServiceProxyHelper();\n     }\n@@ -66,37 +67,28 @@ public class PatientDiscoveryDeferredReqQueueClient {\n      * @param messageId takes in MessageID\n      * @return queue process response\n      */\n-    public PatientDiscoveryDeferredReqQueueProcessResponseType\n-            processPatientDiscoveryDeferredReqQueue(String messageId) {\n-        String msgText;\n \n-        PatientDiscoveryDeferredReqQueueProcessResponseType response =\n-                new PatientDiscoveryDeferredReqQueueProcessResponseType();\n+\n+    public PatientDiscoveryDeferredReqQueueProcessResponseType processPatientDiscoveryDeferredReqQueue(String messageId) {\n+        String msgText;\n+        PatientDiscoveryDeferredReqQueueProcessResponseType response = new PatientDiscoveryDeferredReqQueueProcessResponseType();\n         SuccessOrFailType sof = new SuccessOrFailType();\n         sof.setSuccess(Boolean.FALSE);\n         response.setSuccessOrFail(sof);\n-\n         try {\n-\n             String endpointURL = getUrl(SERVICE_NAME);\n+            if(NullChecker.isNotNullish(endpointURL)) {\n+                ServicePortDescriptor<AdapterPatientDiscoveryDeferredReqQueueProcessPortType> portDescriptor = new AdapterPatientDiscoveryDeferredReqQueueProcessServicePortDescriptor();\n+                CONNECTClient<AdapterPatientDiscoveryDeferredReqQueueProcessPortType> client = CONNECTClientFactory.getInstance().getCONNECTClientUnsecured(portDescriptor, endpointURL, null);\n+                PatientDiscoveryDeferredReqQueueProcessRequestType request = new PatientDiscoveryDeferredReqQueueProcessRequestType();\n+                request.setMessageId(messageId);\n+                response = (PatientDiscoveryDeferredReqQueueProcessResponseType)\n+                               client.invokePort(AdapterPatientDiscoveryDeferredReqQueueProcessPortType.class, \"processPatientDiscoveryDeferredReqQueue\", request);\n+            }\n \n-            if (NullChecker.isNotNullish(endpointURL)) {\n-                ServicePortDescriptor<AdapterPatientDiscoveryDeferredReqQueueProcessPortType> portDescriptor =\n-                        new AdapterPatientDiscoveryDeferredReqQueueProcessServicePortDescriptor();\n-                CONNECTClient<AdapterPatientDiscoveryDeferredReqQueueProcessPortType> client =\n-                        CONNECTClientFactory.getInstance().getCONNECTClientUnsecured(portDescriptor, endpointURL, null);\n \n-                PatientDiscoveryDeferredReqQueueProcessRequestType request =\n-                        new PatientDiscoveryDeferredReqQueueProcessRequestType();\n-                request.setMessageId(messageId);\n-                response =\n-                        (PatientDiscoveryDeferredReqQueueProcessResponseType) client.invokePort(\n-                                AdapterPatientDiscoveryDeferredReqQueueProcessPortType.class,\n-                                \"processPatientDiscoveryDeferredReqQueue\", request);\n-            } else {\n-                msgText =\n-                        \"Endpoint URL not found for local home community service name [\"\n-                                + NhincConstants.PATIENT_DISCOVERY_ADAPTER_ASYNC_REQ_QUEUE_PROCESS_SERVICE_NAME + \"]\";\n+else {\n+                msgText = \"Endpoint URL not found for local home community service name [\" + NhincConstants.PATIENT_DISCOVERY_ADAPTER_ASYNC_REQ_QUEUE_PROCESS_SERVICE_NAME + \"]\";\n                 LOG.error(msgText);\n                 response.setResponse(msgText);\n             }\n@@ -114,8 +106,10 @@ public class PatientDiscoveryDeferredReqQueueClient {\n      * @return the URL\n      * @throws ConnectionManagerException an error\n      */\n+\n+\n     protected String getUrl(String serviceName) throws ConnectionManagerException {\n         return proxyHelper.getAdapterEndPointFromConnectionManager(serviceName);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 42
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "28",
                    "severity": "error",
                    "message": "'import' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/336/PatientDiscoveryDeferredReqQueueClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_random/336/PatientDiscoveryDeferredReqQueueClient.java\nindex 3309bf9986b..38e6a204e1f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/336/PatientDiscoveryDeferredReqQueueClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_random/336/PatientDiscoveryDeferredReqQueueClient.java\n@@ -25,7 +25,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n package gov.hhs.fha.nhinc.adapter.deferred.queue;\n-\n import gov.hhs.fha.nhinc.adapter.deferred.queue.service.AdapterPatientDiscoveryDeferredReqQueueProcessServicePortDescriptor;\n import gov.hhs.fha.nhinc.adapterpatientdiscoveryreqqueueprocess.AdapterPatientDiscoveryDeferredReqQueueProcessPortType;\n import gov.hhs.fha.nhinc.connectmgr.ConnectionManagerException;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/336/PatientDiscoveryDeferredReqQueueClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/336/PatientDiscoveryDeferredReqQueueClient.java\nindex 3309bf9986b..3541ea519ba 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/336/PatientDiscoveryDeferredReqQueueClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/336/PatientDiscoveryDeferredReqQueueClient.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.adapter.deferred.queue;\n \n import gov.hhs.fha.nhinc.adapter.deferred.queue.service.AdapterPatientDiscoveryDeferredReqQueueProcessServicePortDescriptor;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}