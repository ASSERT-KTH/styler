{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1930",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "75",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "100",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "136",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "163",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "190",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "210",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "233",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "252",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "267",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "310",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "310",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "320",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "337",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "398",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "399",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "405",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "405",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "412",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "412",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "418",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "418",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "423",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "423",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "423",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "441",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "442",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "450",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "450",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "450",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "453",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "453",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "453",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "460",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "460",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "466",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "466",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "480",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "480",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "486",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "486",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "492",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "492",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "500",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "500",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "500",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "503",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "503",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "503",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "510",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "510",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "518",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "518",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "518",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "521",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "521",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "521",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "538",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "538",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "544",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "544",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "550",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "550",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "557",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "558",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "565",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "565",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "572",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "572",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "588",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "588",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "594",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "594",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "596",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "596",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "605",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "605",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "612",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "612",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "619",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "619",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "626",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "626",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "633",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "633",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "638",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "638",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "641",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "641",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "645",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "645",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "648",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "648",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "654",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "654",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "657",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "657",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "661",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "661",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "664",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "664",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "669",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "669",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "672",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "672",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "676",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "676",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "679",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "679",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "683",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "683",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "686",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "686",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "693",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "693",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "693",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "700",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "700",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "705",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "705",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "707",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "707",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "715",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "715",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "719",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "719",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "721",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "721",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "723",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "723",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "725",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "725",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "727",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "727",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "730",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "730",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "736",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "736",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "739",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "739",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "742",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "753",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "753",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "753",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "755",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "755",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "783",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "783",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "791",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "791",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "797",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "797",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "799",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "799",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "802",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "803",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "806",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "806",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "812",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "812",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "819",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "819",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "821",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "821",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "828",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "828",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "830",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "830",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "839",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "839",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "842",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "849",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "849",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "851",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "851",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "854",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "863",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "863",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "884",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "884",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "886",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "886",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "888",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "888",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "892",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "892",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "896",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "896",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "904",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "904",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "906",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "906",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "910",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "910",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "912",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "912",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "946",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "946",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1930/BoltStateMachine.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1930/BoltStateMachine.java\nindex 1c82e80de8a..345c101e4d9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1930/BoltStateMachine.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1930/BoltStateMachine.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.bolt.v1.runtime;\n \n import org.apache.commons.lang3.exception.ExceptionUtils;\n@@ -61,911 +62,891 @@ import static org.neo4j.values.storable.Values.stringArray;\n  */\n public class BoltStateMachine implements AutoCloseable, ManagedBoltStateMachine\n {\n-    private final String id;\n-    private final BoltChannel boltChannel;\n-    private final Clock clock;\n-    private final Log log;\n-\n-    State state = State.CONNECTED;\n-\n-    final SPI spi;\n-    final MutableConnectionState ctx;\n-\n-    public BoltStateMachine( SPI spi, BoltChannel boltChannel, Clock clock, LogService logService )\n-    {\n-        this.id = boltChannel.id();\n-        this.spi = spi;\n-        this.ctx = new MutableConnectionState( spi, clock );\n-        this.boltChannel = boltChannel;\n-        this.clock = clock;\n-        this.log = logService.getInternalLog( getClass() );\n-    }\n-\n-    public State state()\n-    {\n-        return state;\n-    }\n-\n-    public StatementProcessor statementProcessor()\n-    {\n-        return ctx.statementProcessor;\n-    }\n-\n-    private void before( BoltResponseHandler handler ) throws BoltConnectionFatality\n-    {\n-        if ( ctx.isTerminated.get() )\n-        {\n-            close();\n-        }\n-        else if ( ctx.interruptCounter.get() > 0 )\n-        {\n-            state = state.interrupt( this );\n-        }\n-        ctx.responseHandler = handler;\n-    }\n-\n-    private void after()\n-    {\n-        if ( ctx.responseHandler != null )\n+  private final String id;\n+  private final BoltChannel boltChannel;\n+  private final Clock clock;\n+  private final Log log;\n+\n+  State state = State.CONNECTED;\n+\n+  final SPI spi;\n+  final MutableConnectionState ctx;\n+\n+  public BoltStateMachine(SPI spi, BoltChannel boltChannel, Clock clock, LogService logService)\n+  {\n+    this.id = boltChannel.id();\n+    this.spi = spi;\n+    this.ctx = new MutableConnectionState(spi, clock);\n+    this.boltChannel = boltChannel;\n+    this.clock = clock;\n+    this.log = logService.getInternalLog(getClass());\n+  }\n+\n+  public State state()\n+  {\n+    return state;\n+  }\n+\n+  public StatementProcessor statementProcessor()\n+  {\n+    return ctx.statementProcessor;\n+  }\n+\n+  private void before(BoltResponseHandler handler) throws BoltConnectionFatality\n+  {\n+    if (ctx.isTerminated.get())\n+    {\n+      close();\n+    } else if (ctx.interruptCounter.get() > 0)\n+    {\n+      state = state.interrupt(this);\n+    }\n+    ctx.responseHandler = handler;\n+  }\n+\n+  private void after()\n+  {\n+    if (ctx.responseHandler != null)\n+    {\n+      try\n+      {\n+        Neo4jError pendingError = ctx.pendingError;\n+        if (pendingError != null)\n+        {\n+          ctx.markFailed(pendingError);\n+        }\n+\n+        if (ctx.pendingIgnore)\n+        {\n+          ctx.markIgnored();\n+        }\n+\n+        ctx.resetPendingFailedAndIgnored();\n+        ctx.responseHandler.onFinish();\n+      } finally\n+      {\n+        ctx.responseHandler = null;\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Initialize the session.\n+   */\n+  public void init(String userAgent, Map<String, Object> authToken,\n+                   BoltResponseHandler handler) throws BoltConnectionFatality\n+  {\n+    before(handler);\n+    try\n+    {\n+      if (ctx.canProcessMessage())\n+      {\n+        state = state.init(this, userAgent, authToken);\n+      }\n+    } finally\n+    {\n+      after();\n+    }\n+  }\n+\n+  /**\n+   * Clear any outstanding error condition. This differs from {@link #reset(BoltResponseHandler)} in two\n+   * important ways:\n+   * <p>\n+   * 1) If there was an explicitly created transaction, the session will move back\n+   * to IN_TRANSACTION, rather than IDLE. This allows a more natural flow for client\n+   * side drivers, where explicitly opened transactions always are ended with COMMIT or ROLLBACK,\n+   * even if an error occurs. In all other cases, the session will move to the IDLE state.\n+   * <p>\n+   * 2) It will not interrupt any ahead-in-line messages.\n+   */\n+  public void ackFailure(BoltResponseHandler handler) throws BoltConnectionFatality\n+  {\n+    before(handler);\n+    try\n+    {\n+      // it should always be fine to ACK_FAILURE thus no canProcessMessage check\n+      state = state.ackFailure(this);\n+    } finally\n+    {\n+      after();\n+    }\n+  }\n+\n+  /**\n+   * Reset the session to an IDLE state. This clears any outstanding failure condition, disposes\n+   * of any outstanding result records and rolls back the current transaction (if any).\n+   * <p>\n+   * This differs from {@link #ackFailure(BoltResponseHandler)} in that it is more \"radical\" - it does not\n+   * matter what the state of the session is, as long as it is open, reset will move it back to IDLE.\n+   * <p>\n+   * This is designed to cater to two use cases:\n+   * <p>\n+   * 1) Rather than create new sessions over and over, drivers can maintain a pool of sessions,\n+   * and reset them before each re-use. Since establishing sessions can be high overhead,\n+   * this is quite helpful.\n+   * 2) Kill any stuck or long running operation\n+   */\n+  public void reset(BoltResponseHandler handler) throws BoltConnectionFatality\n+  {\n+    before(handler);\n+    try\n+    {\n+      // it should always be fine to RESET thus no canProcessMessage check\n+      state = state.reset(this);\n+    } finally\n+    {\n+      after();\n+    }\n+  }\n+\n+  /**\n+   * Run a statement, yielding a result stream which can be retrieved through pulling it in a subsequent call.\n+   * <p/>\n+   * If there is a statement running already, all remaining items in its stream must be\n+   * {@link #pullAll(BoltResponseHandler) pulled} or {@link #discardAll(BoltResponseHandler)\n+   * discarded}.\n+   */\n+  public void run(String statement, MapValue params, BoltResponseHandler handler)\n+      throws BoltConnectionFatality\n+  {\n+    long start = clock.millis();\n+    before(handler);\n+    try\n+    {\n+      if (ctx.canProcessMessage())\n+      {\n+        state = state.run(this, statement, params);\n+        handler.onMetadata(\"result_available_after\", Values.longValue(clock.millis() - start));\n+      }\n+    } finally\n+    {\n+      after();\n+    }\n+  }\n+\n+  /**\n+   * Discard all the remaining entries in the current result stream. This has the same semantic behavior as\n+   * {@link #pullAll(BoltResponseHandler)}, but without actually retrieving the stream.\n+   * This is useful for completing the run of a statement when you don't care about the data result.\n+   */\n+  public void discardAll(BoltResponseHandler handler) throws BoltConnectionFatality\n+  {\n+    before(handler);\n+    try\n+    {\n+      if (ctx.canProcessMessage())\n+      {\n+        state = state.discardAll(this);\n+      }\n+    } finally\n+    {\n+      after();\n+    }\n+  }\n+\n+  /**\n+   * Retrieve all remaining entries in the current result. This is a distinct operation from 'run' in order to\n+   * enable pulling the output stream in chunks controlled by the user\n+   */\n+  public void pullAll(BoltResponseHandler handler) throws BoltConnectionFatality\n+  {\n+    before(handler);\n+    try\n+    {\n+      if (ctx.canProcessMessage())\n+      {\n+        state = state.pullAll(this);\n+      }\n+    } finally\n+    {\n+      after();\n+    }\n+  }\n+\n+  public void markFailed(Neo4jError error)\n+  {\n+    fail(this, error);\n+    state = State.FAILED;\n+  }\n+\n+  /**\n+   * A session id that is unique for this database instance\n+   */\n+  public String key()\n+  {\n+    return id;\n+  }\n+\n+  /**\n+   * When this is invoked, the machine will make attempts\n+   * at interrupting any currently running action,\n+   * and will then ignore all inbound messages until a {@link #reset(BoltResponseHandler) reset}\n+   * message is received. If this is called multiple times, an equivalent number\n+   * of reset messages must be received before the SSM goes back to a good state.\n+   * <p>\n+   * You can imagine this is as a \"call ahead\" mechanism used by RESET to\n+   * cancel any statements ahead of it in line, without compromising the single-\n+   * threaded processing of messages that the state machine does.\n+   * <p>\n+   * This can be used to cancel a long-running statement or transaction.\n+   */\n+  public void interrupt()\n+  {\n+    ctx.interruptCounter.incrementAndGet();\n+    ctx.statementProcessor.markCurrentTransactionForTermination();\n+  }\n+\n+  /**\n+   * When this is invoked, the machine will check whether the related transaction is\n+   * marked for termination and will reset the TransactionStateMachine to AUTO_COMMIT mode\n+   * while releasing the related transactional resources.\n+   */\n+  public void validateTransaction() throws KernelException\n+  {\n+    ctx.statementProcessor.validateTransaction();\n+  }\n+\n+  public void externalError(Neo4jError error, BoltResponseHandler handler) throws BoltConnectionFatality\n+  {\n+    before(handler);\n+    try\n+    {\n+      if (ctx.canProcessMessage())\n+      {\n+        fail(this, error);\n+        this.state = State.FAILED;\n+      }\n+    } finally\n+    {\n+      after();\n+    }\n+  }\n+\n+  public boolean isClosed()\n+  {\n+    return ctx.closed;\n+  }\n+\n+  @Override\n+  public void close()\n+  {\n+    try\n+    {\n+      boltChannel.close();\n+    } finally\n+    {\n+      spi.onTerminate(this);\n+      ctx.closed = true;\n+      //However a new transaction may have been created\n+      //so we must always to reset\n+      reset();\n+    }\n+  }\n+\n+  @Override\n+  public String owner()\n+  {\n+    return ctx.owner;\n+  }\n+\n+  @Override\n+  public void terminate()\n+  {\n+    /*\n+     * This is a side-channel call and we should not close anything directly.\n+     * Just mark the transaction and set isTerminated to true and then the session\n+     * thread will close down the connection eventually.\n+     */\n+    ctx.isTerminated.set(true);\n+    ctx.statementProcessor.markCurrentTransactionForTermination();\n+    spi.onTerminate(this);\n+  }\n+\n+  @Override\n+  public boolean willTerminate()\n+  {\n+    return ctx.isTerminated.get();\n+  }\n+\n+  public boolean shouldStickOnThread()\n+  {\n+    // Currently, we're doing our best to keep things together\n+    // We should not switch threads when there's an active statement (executing/streaming)\n+    // Also, we're currently sticking to the thread when there's an open transaction due to\n+    // cursor errors we receive when a transaction is picked up by another thread linearly.\n+    return statementProcessor().hasTransaction() || statementProcessor().hasOpenStatement();\n+  }\n+\n+  public boolean hasOpenStatement()\n+  {\n+    return statementProcessor().hasOpenStatement();\n+  }\n+\n+  public enum State\n+  {\n+    /**\n+     * Following the socket connection and a small handshake exchange to\n+     * establish protocol version, the machine begins in the CONNECTED\n+     * state. The <em>only</em> valid transition from here is through a\n+     * correctly authorised INIT into the READY state. Any other action\n+     * results in disconnection.\n+     */\n+    CONNECTED\n         {\n+          @Override\n+          public State init(BoltStateMachine machine, String userAgent,\n+                            Map<String, Object> authToken) throws BoltConnectionFatality\n+          {\n             try\n             {\n-                Neo4jError pendingError = ctx.pendingError;\n-                if ( pendingError != null )\n-                {\n-                    ctx.markFailed( pendingError );\n-                }\n-\n-                if ( ctx.pendingIgnore )\n-                {\n-                    ctx.markIgnored();\n-                }\n-\n-                ctx.resetPendingFailedAndIgnored();\n-                ctx.responseHandler.onFinish();\n-            }\n-            finally\n+              AuthenticationResult authResult = machine.spi.authenticate(authToken);\n+              machine.ctx.init(authResult);\n+              if (authResult.credentialsExpired())\n+              {\n+                machine.ctx.onMetadata(\"credentials_expired\", Values.TRUE);\n+              }\n+              machine.ctx.onMetadata(\"server\", Values.stringValue(machine.spi.version()));\n+\n+              machine.spi.udcRegisterClient(userAgent);\n+              if (authToken.containsKey(PRINCIPAL))\n+              {\n+                machine.ctx.owner = authToken.get(PRINCIPAL).toString();\n+              }\n+              machine.ctx.setQuerySourceFromClientNameAndPrincipal(\n+                  userAgent, machine.ctx.owner, machine.spi.connectionDescriptor());\n+              if (machine.ctx.owner != null)\n+              {\n+                machine.spi.register(machine, machine.ctx.owner);\n+              }\n+              return READY;\n+            } catch (Throwable t)\n             {\n-                ctx.responseHandler = null;\n+              return handleFailure(machine, t, true);\n             }\n-        }\n-    }\n+          }\n+        },\n \n     /**\n-     * Initialize the session.\n+     * The READY state indicates that the connection is ready to accept a\n+     * new RUN request. This is the \"normal\" state for a connection and\n+     * becomes available after successful authorisation and when not\n+     * executing another statement. It is this that ensures that statements\n+     * must be executed in series and each must wait for the previous\n+     * statement to complete.\n      */\n-    public void init( String userAgent, Map<String,Object> authToken,\n-            BoltResponseHandler handler ) throws BoltConnectionFatality\n-    {\n-        before( handler );\n-        try\n+    READY\n         {\n-            if ( ctx.canProcessMessage() )\n+          @Override\n+          public State run(BoltStateMachine machine, String statement,\n+                           MapValue params) throws BoltConnectionFatality\n+          {\n+            try\n+            {\n+              StatementMetadata statementMetadata =\n+                  machine.ctx.statementProcessor.run(statement, params);\n+              machine.ctx.onMetadata(\"fields\", stringArray(statementMetadata.fieldNames()));\n+              return STREAMING;\n+            } catch (AuthorizationExpiredException e)\n             {\n-                state = state.init( this, userAgent, authToken );\n+              return handleFailure(machine, e, true);\n+            } catch (Throwable t)\n+            {\n+              return handleFailure(machine, t);\n             }\n-        }\n-        finally\n-        {\n-            after();\n-        }\n-    }\n+          }\n \n-    /**\n-     * Clear any outstanding error condition. This differs from {@link #reset(BoltResponseHandler)} in two\n-     * important ways:\n-     * <p>\n-     * 1) If there was an explicitly created transaction, the session will move back\n-     * to IN_TRANSACTION, rather than IDLE. This allows a more natural flow for client\n-     * side drivers, where explicitly opened transactions always are ended with COMMIT or ROLLBACK,\n-     * even if an error occurs. In all other cases, the session will move to the IDLE state.\n-     * <p>\n-     * 2) It will not interrupt any ahead-in-line messages.\n-     */\n-    public void ackFailure( BoltResponseHandler handler ) throws BoltConnectionFatality\n-    {\n-        before( handler );\n-        try\n-        {\n-            // it should always be fine to ACK_FAILURE thus no canProcessMessage check\n-            state = state.ackFailure( this );\n-        }\n-        finally\n-        {\n-            after();\n-        }\n-    }\n+          @Override\n+          public State interrupt(BoltStateMachine machine)\n+          {\n+            return INTERRUPTED;\n+          }\n \n-    /**\n-     * Reset the session to an IDLE state. This clears any outstanding failure condition, disposes\n-     * of any outstanding result records and rolls back the current transaction (if any).\n-     * <p>\n-     * This differs from {@link #ackFailure(BoltResponseHandler)} in that it is more \"radical\" - it does not\n-     * matter what the state of the session is, as long as it is open, reset will move it back to IDLE.\n-     * <p>\n-     * This is designed to cater to two use cases:\n-     * <p>\n-     * 1) Rather than create new sessions over and over, drivers can maintain a pool of sessions,\n-     * and reset them before each re-use. Since establishing sessions can be high overhead,\n-     * this is quite helpful.\n-     * 2) Kill any stuck or long running operation\n-     */\n-    public void reset( BoltResponseHandler handler ) throws BoltConnectionFatality\n-    {\n-        before( handler );\n-        try\n-        {\n-            // it should always be fine to RESET thus no canProcessMessage check\n-            state = state.reset( this );\n-        }\n-        finally\n-        {\n-            after();\n-        }\n-    }\n+          @Override\n+          public State reset(BoltStateMachine machine) throws BoltConnectionFatality\n+          {\n+            return resetMachine(machine);\n+          }\n+        },\n \n     /**\n-     * Run a statement, yielding a result stream which can be retrieved through pulling it in a subsequent call.\n-     * <p/>\n-     * If there is a statement running already, all remaining items in its stream must be\n-     * {@link #pullAll(BoltResponseHandler) pulled} or {@link #discardAll(BoltResponseHandler)\n-     * discarded}.\n+     * When STREAMING, a result is available as a stream of records.\n+     * These must be PULLed or DISCARDed before any further statements\n+     * can be executed.\n      */\n-    public void run( String statement, MapValue params, BoltResponseHandler handler )\n-            throws BoltConnectionFatality\n-    {\n-        long start = clock.millis();\n-        before( handler );\n-        try\n-        {\n-            if ( ctx.canProcessMessage() )\n+    STREAMING\n+        {\n+          @Override\n+          public State interrupt(BoltStateMachine machine)\n+          {\n+            return INTERRUPTED;\n+          }\n+\n+          @Override\n+          public State reset(BoltStateMachine machine) throws BoltConnectionFatality\n+          {\n+            return resetMachine(machine);\n+          }\n+\n+          @Override\n+          public State pullAll(BoltStateMachine machine) throws BoltConnectionFatality\n+          {\n+            try\n+            {\n+              machine.ctx.statementProcessor.streamResult(recordStream ->\n+                  machine.ctx.responseHandler.onRecords(recordStream, true));\n+\n+              return READY;\n+            } catch (AuthorizationExpiredException e)\n+            {\n+              return handleFailure(machine, e, true);\n+            } catch (Throwable e)\n             {\n-                state = state.run( this, statement, params );\n-                handler.onMetadata( \"result_available_after\", Values.longValue( clock.millis() - start ) );\n+              return handleFailure(machine, e);\n             }\n-        }\n-        finally\n-        {\n-            after();\n-        }\n-    }\n+          }\n \n-    /**\n-     * Discard all the remaining entries in the current result stream. This has the same semantic behavior as\n-     * {@link #pullAll(BoltResponseHandler)}, but without actually retrieving the stream.\n-     * This is useful for completing the run of a statement when you don't care about the data result.\n-     */\n-    public void discardAll( BoltResponseHandler handler ) throws BoltConnectionFatality\n-    {\n-        before( handler );\n-        try\n-        {\n-            if ( ctx.canProcessMessage() )\n+          @Override\n+          public State discardAll(BoltStateMachine machine) throws BoltConnectionFatality\n+          {\n+            try\n+            {\n+              machine.ctx.statementProcessor.streamResult(recordStream ->\n+                  machine.ctx.responseHandler.onRecords(recordStream, false));\n+\n+              return READY;\n+            } catch (AuthorizationExpiredException e)\n+            {\n+              return handleFailure(machine, e, true);\n+            } catch (Throwable t)\n             {\n-                state = state.discardAll( this );\n+              return handleFailure(machine, t);\n             }\n-        }\n-        finally\n-        {\n-            after();\n-        }\n-    }\n+          }\n+        },\n \n     /**\n-     * Retrieve all remaining entries in the current result. This is a distinct operation from 'run' in order to\n-     * enable pulling the output stream in chunks controlled by the user\n+     * The FAILED state occurs when a recoverable error is encountered.\n+     * This might be something like a Cypher SyntaxError or\n+     * ConstraintViolation. To exit the FAILED state, either a RESET\n+     * or and ACK_FAILURE must be issued. All stream will be IGNORED\n+     * until this is done.\n      */\n-    public void pullAll( BoltResponseHandler handler ) throws BoltConnectionFatality\n-    {\n-        before( handler );\n-        try\n-        {\n-            if ( ctx.canProcessMessage() )\n+    FAILED\n+        {\n+          @Override\n+          public State interrupt(BoltStateMachine machine)\n+          {\n+            return INTERRUPTED;\n+          }\n+\n+          @Override\n+          public State reset(BoltStateMachine machine) throws BoltConnectionFatality\n+          {\n+            return resetMachine(machine);\n+          }\n+\n+          @Override\n+          public State ackFailure(BoltStateMachine machine)\n+          {\n+            machine.ctx.resetPendingFailedAndIgnored();\n+            return READY;\n+          }\n+\n+          @Override\n+          public State run(BoltStateMachine machine, String statement,\n+                           MapValue params)\n+          {\n+            machine.ctx.markIgnored();\n+            return FAILED;\n+          }\n+\n+          @Override\n+          public State pullAll(BoltStateMachine machine)\n+          {\n+            machine.ctx.markIgnored();\n+            return FAILED;\n+          }\n+\n+          @Override\n+          public State discardAll(BoltStateMachine machine)\n+          {\n+            machine.ctx.markIgnored();\n+            return FAILED;\n+          }\n+        },\n+\n+    /**\n+     * If the state machine has been INTERRUPTED then a RESET message\n+     * has entered the queue and is waiting to be processed. The initial\n+     * interrupt forces the current statement to stop and all subsequent\n+     * requests to be IGNORED until the RESET itself is processed.\n+     */\n+    INTERRUPTED\n+        {\n+          @Override\n+          public State interrupt(BoltStateMachine machine)\n+          {\n+            return INTERRUPTED;\n+          }\n+\n+          @Override\n+          public State reset(BoltStateMachine machine) throws BoltConnectionFatality\n+          {\n+            if (machine.ctx.interruptCounter.decrementAndGet() > 0)\n             {\n-                state = state.pullAll( this );\n+              machine.ctx.markIgnored();\n+              return INTERRUPTED;\n             }\n-        }\n-        finally\n-        {\n-            after();\n-        }\n-    }\n+            return resetMachine(machine);\n+          }\n \n-    public void markFailed( Neo4jError error )\n+          @Override\n+          public State ackFailure(BoltStateMachine machine)\n+          {\n+            machine.ctx.markIgnored();\n+            return INTERRUPTED;\n+          }\n+\n+          @Override\n+          public State run(BoltStateMachine machine, String statement, MapValue params)\n+          {\n+            machine.ctx.markIgnored();\n+            return INTERRUPTED;\n+          }\n+\n+          @Override\n+          public State pullAll(BoltStateMachine machine)\n+          {\n+            machine.ctx.markIgnored();\n+            return INTERRUPTED;\n+          }\n+\n+          @Override\n+          public State discardAll(BoltStateMachine machine)\n+          {\n+            machine.ctx.markIgnored();\n+            return INTERRUPTED;\n+          }\n+        };\n+\n+    public State init(BoltStateMachine machine, String userAgent, Map<String, Object> authToken)\n+        throws BoltConnectionFatality\n     {\n-        fail( this, error );\n-        state = State.FAILED;\n+      String msg = \"INIT cannot be handled by a session in the \" + name() + \" state.\";\n+      fail(machine, Neo4jError.fatalFrom(Status.Request.Invalid, msg));\n+      throw new BoltProtocolBreachFatality(msg);\n     }\n \n-    /** A session id that is unique for this database instance */\n-    public String key()\n+    public State ackFailure(BoltStateMachine machine) throws BoltConnectionFatality\n     {\n-        return id;\n+      String msg = \"ACK_FAILURE cannot be handled by a session in the \" + name() + \" state.\";\n+      fail(machine, Neo4jError.fatalFrom(Status.Request.Invalid, msg));\n+      throw new BoltProtocolBreachFatality(msg);\n     }\n \n-    /**\n-     * When this is invoked, the machine will make attempts\n-     * at interrupting any currently running action,\n-     * and will then ignore all inbound messages until a {@link #reset(BoltResponseHandler) reset}\n-     * message is received. If this is called multiple times, an equivalent number\n-     * of reset messages must be received before the SSM goes back to a good state.\n-     * <p>\n-     * You can imagine this is as a \"call ahead\" mechanism used by RESET to\n-     * cancel any statements ahead of it in line, without compromising the single-\n-     * threaded processing of messages that the state machine does.\n-     * <p>\n-     * This can be used to cancel a long-running statement or transaction.\n-     */\n-    public void interrupt()\n+    public State interrupt(BoltStateMachine machine) throws BoltConnectionFatality\n     {\n-        ctx.interruptCounter.incrementAndGet();\n-        ctx.statementProcessor.markCurrentTransactionForTermination();\n+      // The message below is correct, not a copy-paste error. Interrupts are triggered by\n+      // a RESET message.\n+      String msg = \"RESET cannot be handled by a session in the \" + name() + \" state.\";\n+      fail(machine, Neo4jError.fatalFrom(Status.Request.Invalid, msg));\n+      throw new BoltProtocolBreachFatality(msg);\n     }\n \n-    /**\n-     * When this is invoked, the machine will check whether the related transaction is\n-     * marked for termination and will reset the TransactionStateMachine to AUTO_COMMIT mode\n-     * while releasing the related transactional resources.\n-     */\n-    public void validateTransaction() throws KernelException\n+    public State reset(BoltStateMachine machine) throws BoltConnectionFatality\n     {\n-        ctx.statementProcessor.validateTransaction();\n+      String msg = \"RESET cannot be handled by a session in the \" + name() + \" state.\";\n+      fail(machine, Neo4jError.fatalFrom(Status.Request.Invalid, msg));\n+      throw new BoltProtocolBreachFatality(msg);\n     }\n \n-    public void externalError( Neo4jError error, BoltResponseHandler handler ) throws BoltConnectionFatality\n+    public State run(BoltStateMachine machine, String statement, MapValue params) throws\n+        BoltConnectionFatality\n     {\n-        before( handler );\n-        try\n-        {\n-            if ( ctx.canProcessMessage() )\n-            {\n-                fail( this, error );\n-                this.state = State.FAILED;\n-            }\n-        }\n-        finally\n-        {\n-            after();\n-        }\n+      String msg = \"RUN cannot be handled by a session in the \" + name() + \" state.\";\n+      fail(machine, Neo4jError.fatalFrom(Status.Request.Invalid, msg));\n+      throw new BoltProtocolBreachFatality(msg);\n     }\n \n-    public boolean isClosed()\n+    public State discardAll(BoltStateMachine machine) throws BoltConnectionFatality\n     {\n-        return ctx.closed;\n+      String msg = \"DISCARD_ALL cannot be handled by a session in the \" + name() + \" state.\";\n+      fail(machine, Neo4jError.fatalFrom(Status.Request.Invalid, msg));\n+      throw new BoltProtocolBreachFatality(msg);\n     }\n \n-    @Override\n-    public void close()\n+    public State pullAll(BoltStateMachine machine) throws BoltConnectionFatality\n     {\n-        try\n-        {\n-            boltChannel.close();\n-        }\n-        finally\n-        {\n-            spi.onTerminate( this );\n-            ctx.closed = true;\n-            //However a new transaction may have been created\n-            //so we must always to reset\n-            reset();\n-        }\n+      String msg = \"PULL_ALL cannot be handled by a session in the \" + name() + \" state.\";\n+      fail(machine, Neo4jError.fatalFrom(Status.Request.Invalid, msg));\n+      throw new BoltProtocolBreachFatality(msg);\n     }\n \n-    @Override\n-    public String owner()\n+    State resetMachine(BoltStateMachine machine) throws BoltConnectionFatality\n     {\n-        return ctx.owner;\n+      try\n+      {\n+        machine.ctx.resetPendingFailedAndIgnored();\n+        machine.ctx.statementProcessor.reset();\n+        return READY;\n+      } catch (Throwable t)\n+      {\n+        return handleFailure(machine, t, true);\n+      }\n     }\n+  }\n \n-    @Override\n-    public void terminate()\n+  private static State handleFailure(BoltStateMachine machine, Throwable t) throws BoltConnectionFatality\n+  {\n+    return handleFailure(machine, t, false);\n+  }\n+\n+  private static State handleFailure(BoltStateMachine machine, Throwable t, boolean fatal) throws BoltConnectionFatality\n+  {\n+    if (ExceptionUtils.indexOfType(t, BoltConnectionFatality.class) != -1)\n     {\n-        /*\n-         * This is a side-channel call and we should not close anything directly.\n-         * Just mark the transaction and set isTerminated to true and then the session\n-         * thread will close down the connection eventually.\n-            */\n-        ctx.isTerminated.set( true );\n-        ctx.statementProcessor.markCurrentTransactionForTermination();\n-        spi.onTerminate( this );\n+      fatal = true;\n     }\n \n-    @Override\n-    public boolean willTerminate()\n+    return handleFailure(machine, t, fatal ? Neo4jError.fatalFrom(t) : Neo4jError.from(t));\n+  }\n+\n+  private static State handleFailure(BoltStateMachine machine, Throwable t, Neo4jError error) throws BoltConnectionFatality\n+  {\n+    fail(machine, error);\n+\n+    if (error.isFatal())\n     {\n-        return ctx.isTerminated.get();\n+      if (ExceptionUtils.indexOfType(t, AuthorizationExpiredException.class) != -1)\n+      {\n+        throw new BoltConnectionAuthFatality(\"Failed to process a bolt message\", t);\n+      }\n+      if (t instanceof AuthenticationException)\n+      {\n+        throw new BoltConnectionAuthFatality((AuthenticationException) t);\n+      }\n+\n+      throw new BoltConnectionFatality(\"Failed to process a bolt message\", t);\n     }\n \n-    public boolean shouldStickOnThread()\n+    return State.FAILED;\n+  }\n+\n+  private static void fail(BoltStateMachine machine, Neo4jError neo4jError)\n+  {\n+    machine.spi.reportError(neo4jError);\n+    if (machine.state == State.FAILED)\n+    {\n+      machine.ctx.markIgnored();\n+    } else\n     {\n-        // Currently, we're doing our best to keep things together\n-        // We should not switch threads when there's an active statement (executing/streaming)\n-        // Also, we're currently sticking to the thread when there's an open transaction due to\n-        // cursor errors we receive when a transaction is picked up by another thread linearly.\n-        return statementProcessor().hasTransaction() || statementProcessor().hasOpenStatement();\n+      machine.ctx.markFailed(neo4jError);\n     }\n+  }\n \n-    public boolean hasOpenStatement()\n+  private void reset()\n+  {\n+    try\n     {\n-        return statementProcessor().hasOpenStatement();\n-    }\n-\n-    public enum State\n-    {\n-        /**\n-         * Following the socket connection and a small handshake exchange to\n-         * establish protocol version, the machine begins in the CONNECTED\n-         * state. The <em>only</em> valid transition from here is through a\n-         * correctly authorised INIT into the READY state. Any other action\n-         * results in disconnection.\n-         */\n-        CONNECTED\n-                {\n-                    @Override\n-                    public State init( BoltStateMachine machine, String userAgent,\n-                            Map<String,Object> authToken ) throws BoltConnectionFatality\n-                    {\n-                        try\n-                        {\n-                            AuthenticationResult authResult = machine.spi.authenticate( authToken );\n-                            machine.ctx.init( authResult );\n-                            if ( authResult.credentialsExpired() )\n-                            {\n-                                machine.ctx.onMetadata( \"credentials_expired\", Values.TRUE );\n-                            }\n-                            machine.ctx.onMetadata( \"server\", Values.stringValue( machine.spi.version() ) );\n-\n-                            machine.spi.udcRegisterClient( userAgent );\n-                            if ( authToken.containsKey( PRINCIPAL ) )\n-                            {\n-                                machine.ctx.owner = authToken.get( PRINCIPAL ).toString();\n-                            }\n-                            machine.ctx.setQuerySourceFromClientNameAndPrincipal(\n-                                    userAgent, machine.ctx.owner, machine.spi.connectionDescriptor() );\n-                            if ( machine.ctx.owner != null )\n-                            {\n-                                machine.spi.register( machine, machine.ctx.owner );\n-                            }\n-                            return READY;\n-                        }\n-                        catch ( Throwable t )\n-                        {\n-                            return handleFailure( machine, t, true );\n-                        }\n-                    }\n-                },\n-\n-        /**\n-         * The READY state indicates that the connection is ready to accept a\n-         * new RUN request. This is the \"normal\" state for a connection and\n-         * becomes available after successful authorisation and when not\n-         * executing another statement. It is this that ensures that statements\n-         * must be executed in series and each must wait for the previous\n-         * statement to complete.\n-         */\n-        READY\n-                {\n-                    @Override\n-                    public State run( BoltStateMachine machine, String statement,\n-                            MapValue params ) throws BoltConnectionFatality\n-                    {\n-                        try\n-                        {\n-                            StatementMetadata statementMetadata =\n-                                    machine.ctx.statementProcessor.run( statement, params );\n-                            machine.ctx.onMetadata( \"fields\", stringArray( statementMetadata.fieldNames() ) );\n-                            return STREAMING;\n-                        }\n-                        catch ( AuthorizationExpiredException e )\n-                        {\n-                            return handleFailure( machine, e, true );\n-                        }\n-                        catch ( Throwable t )\n-                        {\n-                            return handleFailure( machine, t );\n-                        }\n-                    }\n-\n-                    @Override\n-                    public State interrupt( BoltStateMachine machine )\n-                    {\n-                        return INTERRUPTED;\n-                    }\n-\n-                    @Override\n-                    public State reset( BoltStateMachine machine ) throws BoltConnectionFatality\n-                    {\n-                        return resetMachine( machine );\n-                    }\n-                },\n-\n-        /**\n-         * When STREAMING, a result is available as a stream of records.\n-         * These must be PULLed or DISCARDed before any further statements\n-         * can be executed.\n-         */\n-        STREAMING\n-                {\n-                    @Override\n-                    public State interrupt( BoltStateMachine machine )\n-                    {\n-                        return INTERRUPTED;\n-                    }\n-\n-                    @Override\n-                    public State reset( BoltStateMachine machine ) throws BoltConnectionFatality\n-                    {\n-                        return resetMachine( machine );\n-                    }\n-\n-                    @Override\n-                    public State pullAll( BoltStateMachine machine ) throws BoltConnectionFatality\n-                    {\n-                        try\n-                        {\n-                            machine.ctx.statementProcessor.streamResult( recordStream ->\n-                                    machine.ctx.responseHandler.onRecords( recordStream, true ) );\n-\n-                            return READY;\n-                        }\n-                        catch ( AuthorizationExpiredException e )\n-                        {\n-                            return handleFailure( machine, e, true );\n-                        }\n-                        catch ( Throwable e )\n-                        {\n-                            return handleFailure( machine, e );\n-                        }\n-                    }\n-\n-                    @Override\n-                    public State discardAll( BoltStateMachine machine ) throws BoltConnectionFatality\n-                    {\n-                        try\n-                        {\n-                            machine.ctx.statementProcessor.streamResult( recordStream ->\n-                                    machine.ctx.responseHandler.onRecords( recordStream, false ) );\n-\n-                            return READY;\n-                        }\n-                        catch ( AuthorizationExpiredException e )\n-                        {\n-                            return handleFailure( machine, e, true );\n-                        }\n-                        catch ( Throwable t )\n-                        {\n-                            return handleFailure( machine, t );\n-                        }\n-                    }\n-                },\n-\n-        /**\n-         * The FAILED state occurs when a recoverable error is encountered.\n-         * This might be something like a Cypher SyntaxError or\n-         * ConstraintViolation. To exit the FAILED state, either a RESET\n-         * or and ACK_FAILURE must be issued. All stream will be IGNORED\n-         * until this is done.\n-         */\n-        FAILED\n-                {\n-                    @Override\n-                    public State interrupt( BoltStateMachine machine )\n-                    {\n-                        return INTERRUPTED;\n-                    }\n-\n-                    @Override\n-                    public State reset( BoltStateMachine machine ) throws BoltConnectionFatality\n-                    {\n-                        return resetMachine( machine );\n-                    }\n-\n-                    @Override\n-                    public State ackFailure( BoltStateMachine machine )\n-                    {\n-                        machine.ctx.resetPendingFailedAndIgnored();\n-                        return READY;\n-                    }\n-\n-                    @Override\n-                    public State run( BoltStateMachine machine, String statement,\n-                            MapValue params )\n-                    {\n-                        machine.ctx.markIgnored();\n-                        return FAILED;\n-                    }\n-\n-                    @Override\n-                    public State pullAll( BoltStateMachine machine )\n-                    {\n-                        machine.ctx.markIgnored();\n-                        return FAILED;\n-                    }\n-\n-                    @Override\n-                    public State discardAll( BoltStateMachine machine )\n-                    {\n-                        machine.ctx.markIgnored();\n-                        return FAILED;\n-                    }\n-                },\n-\n-        /**\n-         * If the state machine has been INTERRUPTED then a RESET message\n-         * has entered the queue and is waiting to be processed. The initial\n-         * interrupt forces the current statement to stop and all subsequent\n-         * requests to be IGNORED until the RESET itself is processed.\n-         */\n-        INTERRUPTED\n-                {\n-                    @Override\n-                    public State interrupt( BoltStateMachine machine )\n-                    {\n-                        return INTERRUPTED;\n-                    }\n-\n-                    @Override\n-                    public State reset( BoltStateMachine machine ) throws BoltConnectionFatality\n-                    {\n-                        if ( machine.ctx.interruptCounter.decrementAndGet() > 0 )\n-                        {\n-                            machine.ctx.markIgnored();\n-                            return INTERRUPTED;\n-                        }\n-                        return resetMachine( machine );\n-                    }\n-\n-                    @Override\n-                    public State ackFailure( BoltStateMachine machine )\n-                    {\n-                        machine.ctx.markIgnored();\n-                        return INTERRUPTED;\n-                    }\n-\n-                    @Override\n-                    public State run( BoltStateMachine machine, String statement, MapValue params )\n-                    {\n-                        machine.ctx.markIgnored();\n-                        return INTERRUPTED;\n-                    }\n-\n-                    @Override\n-                    public State pullAll( BoltStateMachine machine )\n-                    {\n-                        machine.ctx.markIgnored();\n-                        return INTERRUPTED;\n-                    }\n-\n-                    @Override\n-                    public State discardAll( BoltStateMachine machine )\n-                    {\n-                        machine.ctx.markIgnored();\n-                        return INTERRUPTED;\n-                    }\n-                };\n-\n-        public State init( BoltStateMachine machine, String userAgent, Map<String,Object> authToken )\n-                throws BoltConnectionFatality\n-        {\n-            String msg = \"INIT cannot be handled by a session in the \" + name() + \" state.\";\n-            fail( machine, Neo4jError.fatalFrom( Status.Request.Invalid, msg ) );\n-            throw new BoltProtocolBreachFatality( msg );\n-        }\n+      ctx.statementProcessor.reset();\n+    } catch (TransactionFailureException e)\n+    {\n+      throw new RuntimeException(e);\n+    }\n+  }\n \n-        public State ackFailure( BoltStateMachine machine ) throws BoltConnectionFatality\n-        {\n-            String msg = \"ACK_FAILURE cannot be handled by a session in the \" + name() + \" state.\";\n-            fail( machine, Neo4jError.fatalFrom( Status.Request.Invalid, msg ) );\n-            throw new BoltProtocolBreachFatality( msg );\n-        }\n+  static class MutableConnectionState implements BoltResponseHandler\n+  {\n+    private static final NullStatementProcessor NULL_STATEMENT_PROCESSOR = new NullStatementProcessor();\n+    private final SPI spi;\n+    private final Clock clock;\n \n-        public State interrupt( BoltStateMachine machine ) throws BoltConnectionFatality\n-        {\n-            // The message below is correct, not a copy-paste error. Interrupts are triggered by\n-            // a RESET message.\n-            String msg = \"RESET cannot be handled by a session in the \" + name() + \" state.\";\n-            fail( machine, Neo4jError.fatalFrom( Status.Request.Invalid, msg ) );\n-            throw new BoltProtocolBreachFatality( msg );\n-        }\n+    /**\n+     * Callback poised to receive the next response\n+     */\n+    BoltResponseHandler responseHandler;\n \n-        public State reset( BoltStateMachine machine ) throws BoltConnectionFatality\n-        {\n-            String msg = \"RESET cannot be handled by a session in the \" + name() + \" state.\";\n-            fail( machine, Neo4jError.fatalFrom( Status.Request.Invalid, msg ) );\n-            throw new BoltProtocolBreachFatality( msg );\n-        }\n+    Neo4jError pendingError;\n \n-        public State run( BoltStateMachine machine, String statement, MapValue params ) throws\n-                BoltConnectionFatality\n-        {\n-            String msg = \"RUN cannot be handled by a session in the \" + name() + \" state.\";\n-            fail( machine, Neo4jError.fatalFrom( Status.Request.Invalid, msg ) );\n-            throw new BoltProtocolBreachFatality( msg );\n-        }\n+    boolean pendingIgnore;\n \n-        public State discardAll( BoltStateMachine machine ) throws BoltConnectionFatality\n-        {\n-            String msg = \"DISCARD_ALL cannot be handled by a session in the \" + name() + \" state.\";\n-            fail( machine, Neo4jError.fatalFrom( Status.Request.Invalid, msg ) );\n-            throw new BoltProtocolBreachFatality( msg );\n-        }\n+    /**\n+     * This is incremented each time {@link #interrupt()} is called,\n+     * and decremented each time a {@link BoltStateMachine#reset(BoltResponseHandler)} message\n+     * arrives. When this is above 0, all messages will be ignored.\n+     * This way, when a reset message arrives on the network, interrupt\n+     * can be called to \"purge\" all the messages ahead of the reset message.\n+     */\n+    final AtomicInteger interruptCounter = new AtomicInteger();\n \n-        public State pullAll( BoltStateMachine machine ) throws BoltConnectionFatality\n-        {\n-            String msg = \"PULL_ALL cannot be handled by a session in the \" + name() + \" state.\";\n-            fail( machine, Neo4jError.fatalFrom( Status.Request.Invalid, msg ) );\n-            throw new BoltProtocolBreachFatality( msg );\n-        }\n+    final AtomicBoolean isTerminated = new AtomicBoolean(false);\n \n-        State resetMachine( BoltStateMachine machine ) throws BoltConnectionFatality\n-        {\n-            try\n-            {\n-                machine.ctx.resetPendingFailedAndIgnored();\n-                machine.ctx.statementProcessor.reset();\n-                return READY;\n-            }\n-            catch ( Throwable t )\n-            {\n-                return handleFailure( machine, t, true );\n-            }\n-        }\n-    }\n+    StatementProcessor statementProcessor = NULL_STATEMENT_PROCESSOR;\n+\n+    String owner;\n \n-    private static State handleFailure( BoltStateMachine machine, Throwable t ) throws BoltConnectionFatality\n+    boolean closed;\n+\n+    MutableConnectionState(SPI spi, Clock clock)\n     {\n-        return handleFailure( machine, t, false );\n+      this.spi = spi;\n+      this.clock = clock;\n     }\n \n-    private static State handleFailure( BoltStateMachine machine, Throwable t, boolean fatal ) throws BoltConnectionFatality\n+    private void init(AuthenticationResult authenticationResult)\n     {\n-        if ( ExceptionUtils.indexOfType( t, BoltConnectionFatality.class ) != -1 )\n-        {\n-            fatal = true;\n-        }\n-\n-        return handleFailure( machine, t, fatal ? Neo4jError.fatalFrom( t ) : Neo4jError.from( t ) );\n+      this.statementProcessor = new TransactionStateMachine(spi.transactionSpi(), authenticationResult, clock);\n     }\n \n-    private static State handleFailure( BoltStateMachine machine, Throwable t, Neo4jError error ) throws BoltConnectionFatality\n+    private void setQuerySourceFromClientNameAndPrincipal(String clientName, String principal,\n+                                                          BoltConnectionDescriptor connectionDescriptor)\n     {\n-        fail( machine, error );\n-\n-        if ( error.isFatal() )\n-        {\n-            if ( ExceptionUtils.indexOfType( t, AuthorizationExpiredException.class ) != -1 )\n-            {\n-                throw new BoltConnectionAuthFatality( \"Failed to process a bolt message\", t );\n-            }\n-            if ( t instanceof AuthenticationException )\n-            {\n-                throw new BoltConnectionAuthFatality( (AuthenticationException) t );\n-            }\n-\n-            throw new BoltConnectionFatality( \"Failed to process a bolt message\", t );\n-        }\n-\n-        return State.FAILED;\n+      String principalName = principal == null ? \"null\" : principal;\n+      statementProcessor.setQuerySource(new BoltQuerySource(principalName, clientName, connectionDescriptor));\n     }\n \n-    private static void fail( BoltStateMachine machine, Neo4jError neo4jError )\n+    @Override\n+    public void onStart()\n     {\n-        machine.spi.reportError( neo4jError );\n-        if ( machine.state == State.FAILED )\n-        {\n-            machine.ctx.markIgnored();\n-        }\n-        else\n-        {\n-            machine.ctx.markFailed( neo4jError );\n-        }\n+      if (responseHandler != null)\n+      {\n+        responseHandler.onStart();\n+      }\n     }\n \n-    private void reset()\n+    @Override\n+    public void onRecords(BoltResult result, boolean pull) throws Exception\n     {\n-        try\n-        {\n-            ctx.statementProcessor.reset();\n-        }\n-        catch ( TransactionFailureException e )\n-        {\n-            throw new RuntimeException( e );\n-        }\n+      if (responseHandler != null)\n+      {\n+        responseHandler.onRecords(result, pull);\n+      }\n     }\n \n-    static class MutableConnectionState implements BoltResponseHandler\n+    @Override\n+    public void onMetadata(String key, AnyValue value)\n     {\n-        private static final NullStatementProcessor NULL_STATEMENT_PROCESSOR = new NullStatementProcessor();\n-        private final SPI spi;\n-        private final Clock clock;\n+      if (responseHandler != null)\n+      {\n+        responseHandler.onMetadata(key, value);\n+      }\n+    }\n \n-        /**\n-         * Callback poised to receive the next response\n-         */\n-        BoltResponseHandler responseHandler;\n+    @Override\n+    public void markIgnored()\n+    {\n+      if (responseHandler != null)\n+      {\n+        responseHandler.markIgnored();\n+      } else\n+      {\n+        pendingIgnore = true;\n+      }\n+    }\n \n-        Neo4jError pendingError;\n+    @Override\n+    public void markFailed(Neo4jError error)\n+    {\n+      if (responseHandler != null)\n+      {\n+        responseHandler.markFailed(error);\n+      } else\n+      {\n+        pendingError = error;\n+      }\n+    }\n \n-        boolean pendingIgnore;\n+    @Override\n+    public void onFinish()\n+    {\n+      if (responseHandler != null)\n+      {\n+        responseHandler.onFinish();\n+      }\n+    }\n \n-        /**\n-         * This is incremented each time {@link #interrupt()} is called,\n-         * and decremented each time a {@link BoltStateMachine#reset(BoltResponseHandler)} message\n-         * arrives. When this is above 0, all messages will be ignored.\n-         * This way, when a reset message arrives on the network, interrupt\n-         * can be called to \"purge\" all the messages ahead of the reset message.\n-         */\n-        final AtomicInteger interruptCounter = new AtomicInteger();\n+    private boolean canProcessMessage()\n+    {\n+      return !closed && pendingError == null && !pendingIgnore;\n+    }\n \n-        final AtomicBoolean isTerminated = new AtomicBoolean( false );\n+    private void resetPendingFailedAndIgnored()\n+    {\n+      pendingError = null;\n+      pendingIgnore = false;\n+    }\n \n-        StatementProcessor statementProcessor = NULL_STATEMENT_PROCESSOR;\n+  }\n \n-        String owner;\n+  public interface SPI\n+  {\n+    void reportError(Neo4jError err);\n \n-        boolean closed;\n+    AuthenticationResult authenticate(Map<String, Object> authToken) throws AuthenticationException;\n \n-        MutableConnectionState( SPI spi, Clock clock )\n-        {\n-            this.spi = spi;\n-            this.clock = clock;\n-        }\n+    void udcRegisterClient(String clientName);\n \n-        private void init( AuthenticationResult authenticationResult )\n-        {\n-            this.statementProcessor = new TransactionStateMachine( spi.transactionSpi(), authenticationResult, clock );\n-        }\n+    BoltConnectionDescriptor connectionDescriptor();\n \n-        private void setQuerySourceFromClientNameAndPrincipal( String clientName, String principal,\n-                BoltConnectionDescriptor connectionDescriptor )\n-        {\n-            String principalName = principal == null ? \"null\" : principal;\n-            statementProcessor.setQuerySource( new BoltQuerySource( principalName, clientName, connectionDescriptor ) );\n-        }\n+    void register(BoltStateMachine machine, String owner);\n \n-        @Override\n-        public void onStart()\n-        {\n-            if ( responseHandler != null )\n-            {\n-                responseHandler.onStart();\n-            }\n-        }\n+    TransactionStateMachine.SPI transactionSpi();\n \n-        @Override\n-        public void onRecords( BoltResult result, boolean pull ) throws Exception\n-        {\n-            if ( responseHandler != null )\n-            {\n-                responseHandler.onRecords( result, pull );\n-            }\n-        }\n+    void onTerminate(BoltStateMachine machine);\n \n-        @Override\n-        public void onMetadata( String key, AnyValue value )\n-        {\n-            if ( responseHandler != null )\n-            {\n-                responseHandler.onMetadata( key, value );\n-            }\n-        }\n-\n-        @Override\n-        public void markIgnored()\n-        {\n-            if ( responseHandler != null )\n-            {\n-                responseHandler.markIgnored();\n-            }\n-            else\n-            {\n-                pendingIgnore = true;\n-            }\n-        }\n-\n-        @Override\n-        public void markFailed( Neo4jError error )\n-        {\n-            if ( responseHandler != null )\n-            {\n-                responseHandler.markFailed( error );\n-            }\n-            else\n-            {\n-                pendingError = error;\n-            }\n-        }\n-\n-        @Override\n-        public void onFinish()\n-        {\n-            if ( responseHandler != null )\n-            {\n-                responseHandler.onFinish();\n-            }\n-        }\n-\n-        private boolean canProcessMessage()\n-        {\n-            return !closed && pendingError == null && !pendingIgnore;\n-        }\n-\n-        private void resetPendingFailedAndIgnored()\n-        {\n-            pendingError = null;\n-            pendingIgnore = false;\n-        }\n+    String version();\n+  }\n \n+  private static class NullStatementProcessor implements StatementProcessor\n+  {\n+    @Override\n+    public StatementMetadata run(String statement, MapValue params)\n+    {\n+      throw new UnsupportedOperationException(\"Unable to run any statements.\");\n     }\n \n-    public interface SPI\n+    @Override\n+    public void streamResult(ThrowingConsumer<BoltResult, Exception> resultConsumer)\n     {\n-        void reportError( Neo4jError err );\n-\n-        AuthenticationResult authenticate( Map<String,Object> authToken ) throws AuthenticationException;\n-\n-        void udcRegisterClient( String clientName );\n-\n-        BoltConnectionDescriptor connectionDescriptor();\n-\n-        void register( BoltStateMachine machine, String owner );\n-\n-        TransactionStateMachine.SPI transactionSpi();\n-\n-        void onTerminate( BoltStateMachine machine );\n-\n-        String version();\n+      throw new UnsupportedOperationException(\"Unable to stream any results.\");\n     }\n \n-    private static class NullStatementProcessor implements StatementProcessor\n+    @Override\n+    public void reset()\n     {\n-        @Override\n-        public StatementMetadata run( String statement, MapValue params )\n-        {\n-            throw new UnsupportedOperationException( \"Unable to run any statements.\" );\n-        }\n-\n-        @Override\n-        public void streamResult( ThrowingConsumer<BoltResult,Exception> resultConsumer )\n-        {\n-            throw new UnsupportedOperationException( \"Unable to stream any results.\" );\n-        }\n-\n-        @Override\n-        public void reset()\n-        {\n-            // nothing to reset\n-        }\n+      // nothing to reset\n+    }\n \n-        @Override\n-        public void markCurrentTransactionForTermination()\n-        {\n-            // nothing to mark\n-        }\n+    @Override\n+    public void markCurrentTransactionForTermination()\n+    {\n+      // nothing to mark\n+    }\n \n-        @Override\n-        public void validateTransaction()\n-        {\n-            // nothing to validate\n-        }\n+    @Override\n+    public void validateTransaction()\n+    {\n+      // nothing to validate\n+    }\n \n-        @Override\n-        public boolean hasTransaction()\n-        {\n-            return false;\n-        }\n+    @Override\n+    public boolean hasTransaction()\n+    {\n+      return false;\n+    }\n \n-        @Override\n-        public boolean hasOpenStatement()\n-        {\n-            return false;\n-        }\n+    @Override\n+    public boolean hasOpenStatement()\n+    {\n+      return false;\n+    }\n \n-        @Override\n-        public void setQuerySource( BoltQuerySource querySource )\n-        {\n-            // nothing to do\n-        }\n+    @Override\n+    public void setQuerySource(BoltQuerySource querySource)\n+    {\n+      // nothing to do\n     }\n+  }\n \n }\n",
            "diff_size": 1322
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1930/BoltStateMachine.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1930/BoltStateMachine.java\nindex 1c82e80de8a..0796f946d8c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1930/BoltStateMachine.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1930/BoltStateMachine.java\n@@ -136,7 +136,7 @@ public class BoltStateMachine implements AutoCloseable, ManagedBoltStateMachine\n      */\n     public void init( String userAgent, Map<String,Object> authToken,\n             BoltResponseHandler handler ) throws BoltConnectionFatality\n-    {\n+{\n         before( handler );\n         try\n         {\n@@ -211,9 +211,8 @@ public class BoltStateMachine implements AutoCloseable, ManagedBoltStateMachine\n      * {@link #pullAll(BoltResponseHandler) pulled} or {@link #discardAll(BoltResponseHandler)\n      * discarded}.\n      */\n-    public void run( String statement, MapValue params, BoltResponseHandler handler )\n-            throws BoltConnectionFatality\n-    {\n+    public void run( String statement, MapValue params, BoltResponseHandler handler ) throws BoltConnectionFatality\n+{\n         long start = clock.millis();\n         before( handler );\n         try\n@@ -400,11 +399,10 @@ public class BoltStateMachine implements AutoCloseable, ManagedBoltStateMachine\n          * results in disconnection.\n          */\n         CONNECTED\n-                {\n+{\n                     @Override\n-                    public State init( BoltStateMachine machine, String userAgent,\n-                            Map<String,Object> authToken ) throws BoltConnectionFatality\n-                    {\n+                    public State init( BoltStateMachine machine, String userAgent, Map<String,Object> authToken ) throws BoltConnectionFatality\n+{\n                         try\n                         {\n                             AuthenticationResult authResult = machine.spi.authenticate( authToken );\n@@ -414,19 +412,18 @@ public class BoltStateMachine implements AutoCloseable, ManagedBoltStateMachine\n                                 machine.ctx.onMetadata( \"credentials_expired\", Values.TRUE );\n                             }\n                             machine.ctx.onMetadata( \"server\", Values.stringValue( machine.spi.version() ) );\n-\n-                            machine.spi.udcRegisterClient( userAgent );\n+machine.spi.udcRegisterClient( userAgent );\n                             if ( authToken.containsKey( PRINCIPAL ) )\n                             {\n                                 machine.ctx.owner = authToken.get( PRINCIPAL ).toString();\n                             }\n-                            machine.ctx.setQuerySourceFromClientNameAndPrincipal(\n-                                    userAgent, machine.ctx.owner, machine.spi.connectionDescriptor() );\n-                            if ( machine.ctx.owner != null )\n+                            machine.ctx.setQuerySourceFromClientNameAndPrincipal( userAgent, machine.ctx.owner, machine.spi.connectionDescriptor() );\n+if ( machine.ctx.owner != null )\n                             {\n                                 machine.spi.register( machine, machine.ctx.owner );\n                             }\n-                            return READY;\n+\n+return READY;\n                         }\n                         catch ( Throwable t )\n                         {\n@@ -435,7 +432,7 @@ public class BoltStateMachine implements AutoCloseable, ManagedBoltStateMachine\n                     }\n                 },\n \n-        /**\n+/**\n          * The READY state indicates that the connection is ready to accept a\n          * new RUN request. This is the \"normal\" state for a connection and\n          * becomes available after successful authorisation and when not\n@@ -444,16 +441,15 @@ public class BoltStateMachine implements AutoCloseable, ManagedBoltStateMachine\n          * statement to complete.\n          */\n         READY\n-                {\n+{\n                     @Override\n                     public State run( BoltStateMachine machine, String statement,\n                             MapValue params ) throws BoltConnectionFatality\n-                    {\n+{\n                         try\n                         {\n-                            StatementMetadata statementMetadata =\n-                                    machine.ctx.statementProcessor.run( statement, params );\n-                            machine.ctx.onMetadata( \"fields\", stringArray( statementMetadata.fieldNames() ) );\n+                            StatementMetadata statementMetadata = machine.ctx.statementProcessor.run( statement, params );\n+machine.ctx.onMetadata( \"fields\", stringArray( statementMetadata.fieldNames() ) );\n                             return STREAMING;\n                         }\n                         catch ( AuthorizationExpiredException e )\n@@ -479,13 +475,13 @@ public class BoltStateMachine implements AutoCloseable, ManagedBoltStateMachine\n                     }\n                 },\n \n-        /**\n+/**\n          * When STREAMING, a result is available as a stream of records.\n          * These must be PULLed or DISCARDed before any further statements\n          * can be executed.\n          */\n         STREAMING\n-                {\n+{\n                     @Override\n                     public State interrupt( BoltStateMachine machine )\n                     {\n@@ -503,10 +499,8 @@ public class BoltStateMachine implements AutoCloseable, ManagedBoltStateMachine\n                     {\n                         try\n                         {\n-                            machine.ctx.statementProcessor.streamResult( recordStream ->\n-                                    machine.ctx.responseHandler.onRecords( recordStream, true ) );\n-\n-                            return READY;\n+                            machine.ctx.statementProcessor.streamResult( recordStream -> machine.ctx.responseHandler.onRecords( recordStream, true ) );\n+return READY;\n                         }\n                         catch ( AuthorizationExpiredException e )\n                         {\n@@ -523,10 +517,8 @@ public class BoltStateMachine implements AutoCloseable, ManagedBoltStateMachine\n                     {\n                         try\n                         {\n-                            machine.ctx.statementProcessor.streamResult( recordStream ->\n-                                    machine.ctx.responseHandler.onRecords( recordStream, false ) );\n-\n-                            return READY;\n+                            machine.ctx.statementProcessor.streamResult( recordStream -> machine.ctx.responseHandler.onRecords( recordStream, false ) );\n+return READY;\n                         }\n                         catch ( AuthorizationExpiredException e )\n                         {\n@@ -539,7 +531,7 @@ public class BoltStateMachine implements AutoCloseable, ManagedBoltStateMachine\n                     }\n                 },\n \n-        /**\n+/**\n          * The FAILED state occurs when a recoverable error is encountered.\n          * This might be something like a Cypher SyntaxError or\n          * ConstraintViolation. To exit the FAILED state, either a RESET\n@@ -547,7 +539,7 @@ public class BoltStateMachine implements AutoCloseable, ManagedBoltStateMachine\n          * until this is done.\n          */\n         FAILED\n-                {\n+{\n                     @Override\n                     public State interrupt( BoltStateMachine machine )\n                     {\n@@ -590,14 +582,14 @@ public class BoltStateMachine implements AutoCloseable, ManagedBoltStateMachine\n                     }\n                 },\n \n-        /**\n+/**\n          * If the state machine has been INTERRUPTED then a RESET message\n          * has entered the queue and is waiting to be processed. The initial\n          * interrupt forces the current statement to stop and all subsequent\n          * requests to be IGNORED until the RESET itself is processed.\n          */\n         INTERRUPTED\n-                {\n+{\n                     @Override\n                     public State interrupt( BoltStateMachine machine )\n                     {\n@@ -612,7 +604,8 @@ public class BoltStateMachine implements AutoCloseable, ManagedBoltStateMachine\n                             machine.ctx.markIgnored();\n                             return INTERRUPTED;\n                         }\n-                        return resetMachine( machine );\n+\n+return resetMachine( machine );\n                     }\n \n                     @Override\n@@ -644,9 +637,8 @@ public class BoltStateMachine implements AutoCloseable, ManagedBoltStateMachine\n                     }\n                 };\n \n-        public State init( BoltStateMachine machine, String userAgent, Map<String,Object> authToken )\n-                throws BoltConnectionFatality\n-        {\n+public State init( BoltStateMachine machine, String userAgent, Map<String,Object> authToken ) throws BoltConnectionFatality\n+{\n             String msg = \"INIT cannot be handled by a session in the \" + name() + \" state.\";\n             fail( machine, Neo4jError.fatalFrom( Status.Request.Invalid, msg ) );\n             throw new BoltProtocolBreachFatality( msg );\n@@ -675,9 +667,8 @@ public class BoltStateMachine implements AutoCloseable, ManagedBoltStateMachine\n             throw new BoltProtocolBreachFatality( msg );\n         }\n \n-        public State run( BoltStateMachine machine, String statement, MapValue params ) throws\n-                BoltConnectionFatality\n-        {\n+        public State run( BoltStateMachine machine, String statement, MapValue params ) throws BoltConnectionFatality\n+{\n             String msg = \"RUN cannot be handled by a session in the \" + name() + \" state.\";\n             fail( machine, Neo4jError.fatalFrom( Status.Request.Invalid, msg ) );\n             throw new BoltProtocolBreachFatality( msg );\n@@ -730,14 +721,14 @@ public class BoltStateMachine implements AutoCloseable, ManagedBoltStateMachine\n     private static State handleFailure( BoltStateMachine machine, Throwable t, Neo4jError error ) throws BoltConnectionFatality\n     {\n         fail( machine, error );\n-\n-        if ( error.isFatal() )\n+if ( error.isFatal() )\n         {\n             if ( ExceptionUtils.indexOfType( t, AuthorizationExpiredException.class ) != -1 )\n             {\n                 throw new BoltConnectionAuthFatality( \"Failed to process a bolt message\", t );\n             }\n-            if ( t instanceof AuthenticationException )\n+\n+if ( t instanceof AuthenticationException )\n             {\n                 throw new BoltConnectionAuthFatality( (AuthenticationException) t );\n             }\n@@ -798,8 +789,7 @@ public class BoltStateMachine implements AutoCloseable, ManagedBoltStateMachine\n         final AtomicInteger interruptCounter = new AtomicInteger();\n \n         final AtomicBoolean isTerminated = new AtomicBoolean( false );\n-\n-        StatementProcessor statementProcessor = NULL_STATEMENT_PROCESSOR;\n+StatementProcessor statementProcessor = NULL_STATEMENT_PROCESSOR;\n \n         String owner;\n \n@@ -895,26 +885,21 @@ public class BoltStateMachine implements AutoCloseable, ManagedBoltStateMachine\n             pendingError = null;\n             pendingIgnore = false;\n         }\n-\n     }\n \n     public interface SPI\n     {\n         void reportError( Neo4jError err );\n-\n-        AuthenticationResult authenticate( Map<String,Object> authToken ) throws AuthenticationException;\n+AuthenticationResult authenticate( Map<String,Object> authToken ) throws AuthenticationException;\n \n         void udcRegisterClient( String clientName );\n-\n-        BoltConnectionDescriptor connectionDescriptor();\n+BoltConnectionDescriptor connectionDescriptor();\n \n         void register( BoltStateMachine machine, String owner );\n-\n-        TransactionStateMachine.SPI transactionSpi();\n+TransactionStateMachine.SPI transactionSpi();\n \n         void onTerminate( BoltStateMachine machine );\n-\n-        String version();\n+String version();\n     }\n \n     private static class NullStatementProcessor implements StatementProcessor\n@@ -967,5 +952,4 @@ public class BoltStateMachine implements AutoCloseable, ManagedBoltStateMachine\n             // nothing to do\n         }\n     }\n-\n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 60
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}