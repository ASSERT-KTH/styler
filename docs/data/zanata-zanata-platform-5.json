{
    "project_name": "zanata-zanata-platform",
    "error_id": "5",
    "information": {
        "errors": [
            {
                "line": "306",
                "column": "58",
                "severity": "error",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "        try {\n            Properties props = new Properties();\n            Context context = new InitialContext(props); // From jndi.properties\n            if (namespace != null) {\n                context = (Context) context.lookup(namespace);\n            }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/5/ZanataInit.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler/5/ZanataInit.java\nindex c076091774d..f399fd481c4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/5/ZanataInit.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler/5/ZanataInit.java\n@@ -303,8 +303,9 @@ public class ZanataInit {\n         StringBuffer buffer = new StringBuffer(4096);\n         try {\n             Properties props = new Properties();\n-            Context context = new InitialContext(props); // From jndi.properties\n-            if (namespace != null) {\n+            Context context = new InitialContext(props);\n+            // From jndi.properties\n+             if (namespace != null) {\n                 context = (Context) context.lookup(namespace);\n             }\n             buffer.append(\"Namespace: \").append(namespace).append(\"\\n\");\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "309",
                    "column": "52",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/5/ZanataInit.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/intellij/5/ZanataInit.java\nindex c076091774d..a231ee576d2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/5/ZanataInit.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/intellij/5/ZanataInit.java\n@@ -18,6 +18,7 @@\n  * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA, or see the FSF\n  * site: http://www.fsf.org.\n  */\n+\n package org.zanata;\n \n import java.io.File;\n@@ -80,372 +81,374 @@ import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n  *\n  * @author Christian Bauer\n  * @author Sean Flanigan\n- *         <a href=\"mailto:sflaniga@redhat.com\">sflaniga@redhat.com</a>\n+ * <a href=\"mailto:sflaniga@redhat.com\">sflaniga@redhat.com</a>\n  */\n @Named(\"zanataInit\")\n @ApplicationScoped\n public class ZanataInit {\n-    private static final org.slf4j.Logger log =\n-            org.slf4j.LoggerFactory.getLogger(ZanataInit.class);\n+  private static final org.slf4j.Logger log =\n+    org.slf4j.LoggerFactory.getLogger(ZanataInit.class);\n \n-    private static final DefaultArtifactVersion MIN_EAP_VERSION =\n-            new DefaultArtifactVersion(\"7.0.1.GA\");\n-    private static final DefaultArtifactVersion MIN_WILDFLY_VERSION =\n-            new DefaultArtifactVersion(\"10.1.0.Final\");\n-    static {\n-        // Prevent JBoss/WildFly from warning about gwt-servlet's\n-        // org.hibernate.validator.ValidationMessages\n-        Logger.getLogger(\"org.jboss.modules\").setLevel(Level.SEVERE);\n-        // Disable \"RP discovery / realm validation disabled;\"\n-        Logger.getLogger(\"org.openid4java.server.RealmVerifier\")\n-                .setLevel(Level.SEVERE);\n-        // Disable \"Queue with name '.*' has already been registered\"\n-        Logger.getLogger(\"org.richfaces.log.Components\").setLevel(Level.SEVERE);\n-    }\n-    @Inject\n-    private ApplicationConfiguration applicationConfiguration;\n-    @Inject\n-    private Event<ServerStarted> startupEvent;\n+  private static final DefaultArtifactVersion MIN_EAP_VERSION =\n+    new DefaultArtifactVersion(\"7.0.1.GA\");\n+  private static final DefaultArtifactVersion MIN_WILDFLY_VERSION =\n+    new DefaultArtifactVersion(\"10.1.0.Final\");\n \n-    @Inject\n-    @MTServiceURL\n-    private URI mtServiceURL;\n-    @Inject\n-    @MTServiceUser\n-    private String mtServiceUser;\n-    @Inject\n-    @MTServiceToken\n-    private String mtServiceToken;\n+  static {\n+    // Prevent JBoss/WildFly from warning about gwt-servlet's\n+    // org.hibernate.validator.ValidationMessages\n+    Logger.getLogger(\"org.jboss.modules\").setLevel(Level.SEVERE);\n+    // Disable \"RP discovery / realm validation disabled;\"\n+    Logger.getLogger(\"org.openid4java.server.RealmVerifier\")\n+      .setLevel(Level.SEVERE);\n+    // Disable \"Queue with name '.*' has already been registered\"\n+    Logger.getLogger(\"org.richfaces.log.Components\").setLevel(Level.SEVERE);\n+  }\n \n-    @WithRequestScope\n-    public void onCreate(@Observes @Initialized ServletContext context)\n-            throws Exception {\n-        initZanata(context);\n-    }\n+  @Inject\n+  private ApplicationConfiguration applicationConfiguration;\n+  @Inject\n+  private Event<ServerStarted> startupEvent;\n \n-    public void initZanata(ServletContext context) throws Exception {\n-        checkAppServerVersion();\n-        String appServerHome = context.getRealPath(\"/\");\n-        File manifestFile = new File(appServerHome, \"META-INF/MANIFEST.MF\");\n-        VersionInfo zanataVersion;\n-        Attributes atts = null;\n-        if (manifestFile.canRead()) {\n-            Manifest mf = new Manifest();\n-            try (FileInputStream fis = new FileInputStream(manifestFile)) {\n-                mf.read(fis);\n-            }\n-            atts = mf.getMainAttributes();\n-        }\n-        zanataVersion = VersionUtility.getVersionInfo(atts, ZanataInit.class);\n-        this.applicationConfiguration.setVersion(zanataVersion.getVersionNo());\n-        this.applicationConfiguration\n-                .setBuildTimestamp(zanataVersion.getBuildTimeStamp());\n-        this.applicationConfiguration\n-                .setScmDescribe(zanataVersion.getScmDescribe());\n-        this.applicationConfiguration.applyLoggingConfiguration();\n-        logBanner(zanataVersion);\n-        if (applicationConfiguration.isInternalAuth()) {\n-            log.info(\"Internal authentication: enabled\");\n-        }\n-        if (applicationConfiguration.isOpenIdAuth()) {\n-            log.info(\"OpenID authentication: enabled\");\n-        }\n-        if (applicationConfiguration.isJaasAuth()) {\n-            log.info(\"JAAS authentication: enabled\");\n-        }\n-        if (applicationConfiguration.isKerberosAuth()) {\n-            log.info(\"SPNEGO/Kerberos authentication: enabled\");\n-        }\n-        if (applicationConfiguration.isSaml2Auth()) {\n-            log.info(\"SAML2 authentication: enabled\");\n-        }\n-        if (mtServiceURL != null) {\n-            log.info(\"Machine translation service is enabled: {}\", mtServiceURL);\n-        }\n-        log.info(\"Configured authentications: {}\", applicationConfiguration.getAuthTypes());\n-        log.info(\"Enable copyTrans: {}\",\n-                this.applicationConfiguration.isCopyTransEnabled());\n-        String javamelodyDir =\n-                System.getProperty(\"javamelody.storage-directory\");\n-        log.info(\"JavaMelody stats directory: {}\", javamelodyDir);\n-        String indexBase =\n-                applicationConfiguration.getHibernateSearchIndexBase();\n-        log.info(\"Lucene index directory: {}\", indexBase);\n-        if (indexBase != null) {\n-            checkLuceneLocks(new File(indexBase));\n-        }\n-        // Email server information\n-        log.info(\"Mail Session (JNDI): {}\", EmailBuilder.MAIL_SESSION_JNDI);\n-        startupEvent.fire(new ServerStarted());\n-        log.info(\"Started Zanata...\");\n+  @Inject\n+  @MTServiceURL\n+  private URI mtServiceURL;\n+  @Inject\n+  @MTServiceUser\n+  private String mtServiceUser;\n+  @Inject\n+  @MTServiceToken\n+  private String mtServiceToken;\n+\n+  @WithRequestScope\n+  public void onCreate(@Observes @Initialized ServletContext context)\n+    throws Exception {\n+    initZanata(context);\n+  }\n+\n+  public void initZanata(ServletContext context) throws Exception {\n+    checkAppServerVersion();\n+    String appServerHome = context.getRealPath(\"/\");\n+    File manifestFile = new File(appServerHome, \"META-INF/MANIFEST.MF\");\n+    VersionInfo zanataVersion;\n+    Attributes atts = null;\n+    if (manifestFile.canRead()) {\n+      Manifest mf = new Manifest();\n+      try (FileInputStream fis = new FileInputStream(manifestFile)) {\n+        mf.read(fis);\n+      }\n+      atts = mf.getMainAttributes();\n+    }\n+    zanataVersion = VersionUtility.getVersionInfo(atts, ZanataInit.class);\n+    this.applicationConfiguration.setVersion(zanataVersion.getVersionNo());\n+    this.applicationConfiguration\n+      .setBuildTimestamp(zanataVersion.getBuildTimeStamp());\n+    this.applicationConfiguration\n+      .setScmDescribe(zanataVersion.getScmDescribe());\n+    this.applicationConfiguration.applyLoggingConfiguration();\n+    logBanner(zanataVersion);\n+    if (applicationConfiguration.isInternalAuth()) {\n+      log.info(\"Internal authentication: enabled\");\n+    }\n+    if (applicationConfiguration.isOpenIdAuth()) {\n+      log.info(\"OpenID authentication: enabled\");\n+    }\n+    if (applicationConfiguration.isJaasAuth()) {\n+      log.info(\"JAAS authentication: enabled\");\n+    }\n+    if (applicationConfiguration.isKerberosAuth()) {\n+      log.info(\"SPNEGO/Kerberos authentication: enabled\");\n+    }\n+    if (applicationConfiguration.isSaml2Auth()) {\n+      log.info(\"SAML2 authentication: enabled\");\n     }\n+    if (mtServiceURL != null) {\n+      log.info(\"Machine translation service is enabled: {}\", mtServiceURL);\n+    }\n+    log.info(\"Configured authentications: {}\", applicationConfiguration.getAuthTypes());\n+    log.info(\"Enable copyTrans: {}\",\n+      this.applicationConfiguration.isCopyTransEnabled());\n+    String javamelodyDir =\n+      System.getProperty(\"javamelody.storage-directory\");\n+    log.info(\"JavaMelody stats directory: {}\", javamelodyDir);\n+    String indexBase =\n+      applicationConfiguration.getHibernateSearchIndexBase();\n+    log.info(\"Lucene index directory: {}\", indexBase);\n+    if (indexBase != null) {\n+      checkLuceneLocks(new File(indexBase));\n+    }\n+    // Email server information\n+    log.info(\"Mail Session (JNDI): {}\", EmailBuilder.MAIL_SESSION_JNDI);\n+    startupEvent.fire(new ServerStarted());\n+    log.info(\"Started Zanata...\");\n+  }\n \n-    private void checkAppServerVersion()\n-            throws MalformedObjectNameException, AttributeNotFoundException,\n-            MBeanException, ReflectionException, InstanceNotFoundException {\n-        MBeanServer jmx = ManagementFactory.getPlatformMBeanServer();\n-        ObjectName server = new ObjectName(\"jboss.as:management-root=server\");\n-        String releaseCodename =\n-                (String) jmx.getAttribute(server, \"releaseCodename\");\n-        String releaseVersion =\n-                (String) jmx.getAttribute(server, \"releaseVersion\");\n-        String productName = (String) jmx.getAttribute(server, \"productName\");\n-        String productVersion =\n-                (String) jmx.getAttribute(server, \"productVersion\");\n-        log.info(\"App server release codename: {}\", releaseCodename);\n-        log.info(\"App server release version: {}\", releaseVersion);\n-        switch ((productName == null) ? \"\" : productName) {\n-        case \"JBoss EAP\":\n+  private void checkAppServerVersion()\n+    throws MalformedObjectNameException, AttributeNotFoundException,\n+    MBeanException, ReflectionException, InstanceNotFoundException {\n+    MBeanServer jmx = ManagementFactory.getPlatformMBeanServer();\n+    ObjectName server = new ObjectName(\"jboss.as:management-root=server\");\n+    String releaseCodename =\n+      (String) jmx.getAttribute(server, \"releaseCodename\");\n+    String releaseVersion =\n+      (String) jmx.getAttribute(server, \"releaseVersion\");\n+    String productName = (String) jmx.getAttribute(server, \"productName\");\n+    String productVersion =\n+      (String) jmx.getAttribute(server, \"productVersion\");\n+    log.info(\"App server release codename: {}\", releaseCodename);\n+    log.info(\"App server release version: {}\", releaseVersion);\n+    switch ((productName == null) ? \"\" : productName) {\n+    case \"JBoss EAP\":\n \n-        case \"EAP\":\n-            checkEAPVersion(productVersion);\n-            break;\n+    case \"EAP\":\n+      checkEAPVersion(productVersion);\n+      break;\n \n-        case \"WildFly Full\":\n-            checkWildFlyVersion(productVersion);\n-            break;\n+    case \"WildFly Full\":\n+      checkWildFlyVersion(productVersion);\n+      break;\n \n-        default:\n-            log.warn(\n-                    \"Unknown app server.  This application requires EAP >= {} or WildFly Full >= {}\",\n-                    MIN_EAP_VERSION, MIN_WILDFLY_VERSION);\n-            break;\n+    default:\n+      log.warn(\n+        \"Unknown app server.  This application requires EAP >= {} or WildFly Full >= {}\",\n+        MIN_EAP_VERSION, MIN_WILDFLY_VERSION);\n+      break;\n \n-        }\n     }\n+  }\n \n-    private void checkEAPVersion(String productVersion) {\n-        if (productVersion != null) {\n-            DefaultArtifactVersion pv =\n-                    new DefaultArtifactVersion(productVersion);\n-            if (pv.compareTo(MIN_EAP_VERSION) < 0) {\n-                log.warn(\"EAP version is {}.  Please upgrade to {} or later.\",\n-                        productVersion, MIN_EAP_VERSION);\n-            } else {\n-                log.info(\"EAP version: {}\", productVersion);\n-            }\n-        } else {\n-            log.warn(\"EAP version is unknown\");\n-        }\n+  private void checkEAPVersion(String productVersion) {\n+    if (productVersion != null) {\n+      DefaultArtifactVersion pv =\n+        new DefaultArtifactVersion(productVersion);\n+      if (pv.compareTo(MIN_EAP_VERSION) < 0) {\n+        log.warn(\"EAP version is {}.  Please upgrade to {} or later.\",\n+          productVersion, MIN_EAP_VERSION);\n+      } else {\n+        log.info(\"EAP version: {}\", productVersion);\n+      }\n+    } else {\n+      log.warn(\"EAP version is unknown\");\n     }\n+  }\n \n-    private void checkWildFlyVersion(String productVersion) {\n-        if (productVersion != null) {\n-            DefaultArtifactVersion pv =\n-                    new DefaultArtifactVersion(productVersion);\n-            if (pv.compareTo(MIN_WILDFLY_VERSION) < 0) {\n-                log.warn(\n-                        \"WildFly Full version is {}.  Please upgrade to {} or later.\",\n-                        productVersion, MIN_WILDFLY_VERSION);\n-            } else {\n-                log.info(\"WildFly Full version: {}\", productVersion);\n-            }\n-        } else {\n-            log.warn(\"WildFly Full version is unknown\");\n-        }\n+  private void checkWildFlyVersion(String productVersion) {\n+    if (productVersion != null) {\n+      DefaultArtifactVersion pv =\n+        new DefaultArtifactVersion(productVersion);\n+      if (pv.compareTo(MIN_WILDFLY_VERSION) < 0) {\n+        log.warn(\n+          \"WildFly Full version is {}.  Please upgrade to {} or later.\",\n+          productVersion, MIN_WILDFLY_VERSION);\n+      } else {\n+        log.info(\"WildFly Full version: {}\", productVersion);\n+      }\n+    } else {\n+      log.warn(\"WildFly Full version is unknown\");\n     }\n+  }\n \n-    private void checkLuceneLocks(File indexDir)\n-            throws IOException, ZanataInitializationException {\n-        if (!indexDir.exists()) {\n-            if (indexDir.mkdirs()) {\n-                log.info(\"Created lucene index directory.\");\n-            } else {\n-                log.warn(\"Could not create lucene index directory\");\n-            }\n-        }\n-        boolean mightUseNFS = mightUseNFS(indexDir);\n-        if (mightUseNFS) {\n-            // we don't trust Lucene's NativeFSLockFactory for NFS locks\n-            String docURL =\n-                    \"http://docs.jboss.org/hibernate/search/4.4/reference/en-US/html/search-configuration.html#search-configuration-directory-lockfactories\";\n-            log.info(\"The Hibernate Search index dir \\\"{}\\\" might be NFS. \" +\n-                    \"Native locks may not be reliable. See {}\",\n-                    indexDir, docURL);\n-            Collection<File> lockFiles =\n-                    FileUtils.listFiles(indexDir, new String[] { \"lock\" }, true);\n-            if (!lockFiles.isEmpty()) {\n-                log.warn(\"Lucene lock files found. Lucene will attempt to \" +\n-                        \"determine if the locks are stale, but this is not \" +\n-                        \"fully reliable on NFS, so please make sure only one \" +\n-                        \"copy of Zanata is running.\");\n-            }\n-        }\n+  private void checkLuceneLocks(File indexDir)\n+    throws IOException, ZanataInitializationException {\n+    if (!indexDir.exists()) {\n+      if (indexDir.mkdirs()) {\n+        log.info(\"Created lucene index directory.\");\n+      } else {\n+        log.warn(\"Could not create lucene index directory\");\n+      }\n+    }\n+    boolean mightUseNFS = mightUseNFS(indexDir);\n+    if (mightUseNFS) {\n+      // we don't trust Lucene's NativeFSLockFactory for NFS locks\n+      String docURL =\n+        \"http://docs.jboss.org/hibernate/search/4.4/reference/en-US/html/search-configuration.html#search-configuration-directory-lockfactories\";\n+      log.info(\"The Hibernate Search index dir \\\"{}\\\" might be NFS. \" +\n+          \"Native locks may not be reliable. See {}\",\n+        indexDir, docURL);\n+      Collection<File> lockFiles =\n+        FileUtils.listFiles(indexDir, new String[] {\"lock\"}, true);\n+      if (!lockFiles.isEmpty()) {\n+        log.warn(\"Lucene lock files found. Lucene will attempt to \" +\n+          \"determine if the locks are stale, but this is not \" +\n+          \"fully reliable on NFS, so please make sure only one \" +\n+          \"copy of Zanata is running.\");\n+      }\n     }\n+  }\n \n-    /**\n-     * Returns true if any of the files appear to be stored in NFS (or we can't\n-     * tell).\n-     */\n-    @SuppressFBWarnings({\"SLF4J_FORMAT_SHOULD_BE_CONST\"})\n-    private boolean mightUseNFS(File... files) {\n-        try {\n-            FileSystem fileSystem = FileSystems.getDefault();\n-            for (File file : files) {\n-                Path path = fileSystem.getPath(file.getAbsolutePath());\n-                String fileStoreType = Files.getFileStore(path).type();\n-                if (fileStoreType.toLowerCase().contains(\"nfs\")) {\n-                    return true;\n-                }\n-            }\n-            return false;\n-        } catch (IOException e) {\n-            log.warn(e.toString(), e);\n-            // assume the worst case\n-            return true;\n+  /**\n+   * Returns true if any of the files appear to be stored in NFS (or we can't\n+   * tell).\n+   */\n+  @SuppressFBWarnings({\"SLF4J_FORMAT_SHOULD_BE_CONST\"})\n+  private boolean mightUseNFS(File... files) {\n+    try {\n+      FileSystem fileSystem = FileSystems.getDefault();\n+      for (File file : files) {\n+        Path path = fileSystem.getPath(file.getAbsolutePath());\n+        String fileStoreType = Files.getFileStore(path).type();\n+        if (fileStoreType.toLowerCase().contains(\"nfs\")) {\n+          return true;\n         }\n+      }\n+      return false;\n+    } catch (IOException e) {\n+      log.warn(e.toString(), e);\n+      // assume the worst case\n+      return true;\n     }\n+  }\n \n-    /**\n-     * Utility to debug JBoss JNDI problems\n-     */\n-    public static String listJNDITree(String namespace) {\n-        StringBuffer buffer = new StringBuffer(4096);\n-        try {\n-            Properties props = new Properties();\n-            Context context = new InitialContext(props); // From jndi.properties\n-            if (namespace != null) {\n-                context = (Context) context.lookup(namespace);\n-            }\n-            buffer.append(\"Namespace: \").append(namespace).append(\"\\n\");\n-            buffer.append(\"#####################################\\n\");\n-            list(context, \" \", buffer, true);\n-            buffer.append(\"#####################################\\n\");\n-        } catch (NamingException e) {\n-            buffer.append(\"Failed to get InitialContext, \")\n-                    .append(e.toString(true));\n-        }\n-        return buffer.toString();\n+  /**\n+   * Utility to debug JBoss JNDI problems\n+   */\n+  public static String listJNDITree(String namespace) {\n+    StringBuffer buffer = new StringBuffer(4096);\n+    try {\n+      Properties props = new Properties();\n+      Context context = new InitialContext(props); // From jndi.properties\n+      if (namespace != null) {\n+        context = (Context) context.lookup(namespace);\n+      }\n+      buffer.append(\"Namespace: \").append(namespace).append(\"\\n\");\n+      buffer.append(\"#####################################\\n\");\n+      list(context, \" \", buffer, true);\n+      buffer.append(\"#####################################\\n\");\n+    } catch (NamingException e) {\n+      buffer.append(\"Failed to get InitialContext, \")\n+        .append(e.toString(true));\n     }\n+    return buffer.toString();\n+  }\n \n-    private static void list(Context ctx, String indent, StringBuffer buffer,\n-            boolean verbose) {\n-        ClassLoader loader = Thread.currentThread().getContextClassLoader();\n+  private static void list(Context ctx, String indent, StringBuffer buffer,\n+                           boolean verbose) {\n+    ClassLoader loader = Thread.currentThread().getContextClassLoader();\n+    try {\n+      NamingEnumeration<NameClassPair> ne = ctx.list(\"\");\n+      while (ne.hasMore()) {\n+        NameClassPair pair = ne.next();\n+        String name = pair.getName();\n+        String className = pair.getClassName();\n+        boolean recursive = false;\n+        boolean isLinkRef = false;\n+        boolean isProxy = false;\n+        Class<?> c = null;\n         try {\n-            NamingEnumeration<NameClassPair> ne = ctx.list(\"\");\n-            while (ne.hasMore()) {\n-                NameClassPair pair = ne.next();\n-                String name = pair.getName();\n-                String className = pair.getClassName();\n-                boolean recursive = false;\n-                boolean isLinkRef = false;\n-                boolean isProxy = false;\n-                Class<?> c = null;\n-                try {\n-                    c = loader.loadClass(className);\n-                    if (Context.class.isAssignableFrom(c)) {\n-                        recursive = true;\n-                    }\n-                    if (LinkRef.class.isAssignableFrom(c)) {\n-                        isLinkRef = true;\n-                    }\n-                    isProxy = Proxy.isProxyClass(c);\n-                } catch (ClassNotFoundException cnfe) {\n-                    // If this is a $Proxy* class its a proxy\n-                    if (className.startsWith(\"$Proxy\")) {\n-                        isProxy = true;\n-                        // We have to get the class from the binding\n-                        try {\n-                            Object p = ctx.lookup(name);\n-                            c = p.getClass();\n-                        } catch (NamingException e) {\n-                            Throwable t = e.getRootCause();\n-                            if (t instanceof ClassNotFoundException) {\n-                                // Get the class name from the exception msg\n-                                String msg = t.getMessage();\n-                                if (msg != null) {\n-                                    // Reset the class name to the CNFE class\n-                                    className = msg;\n-                                }\n-                            }\n-                        }\n-                    }\n-                }\n-                buffer.append(indent).append(\" +- \").append(name);\n-                // Display reference targets\n-                if (isLinkRef) {\n-                    // Get the\n-                    try {\n-                        Object obj = ctx.lookupLink(name);\n-                        LinkRef link = (LinkRef) obj;\n-                        buffer.append(\"[link -> \");\n-                        buffer.append(link.getLinkName());\n-                        buffer.append(']');\n-                    } catch (Throwable t) {\n-                        buffer.append(\"invalid]\");\n-                    }\n-                }\n-                // Display proxy interfaces\n-                if (isProxy) {\n-                    buffer.append(\" (proxy: \").append(pair.getClassName());\n-                    if (c != null) {\n-                        Class<?>[] ifaces = c.getInterfaces();\n-                        buffer.append(\" implements \");\n-                        for (Class<?> iface : ifaces) {\n-                            buffer.append(iface);\n-                            buffer.append(',');\n-                        }\n-                        buffer.setCharAt(buffer.length() - 1, ')');\n-                    } else {\n-                        buffer.append(\" implements \").append(className)\n-                                .append(\")\");\n-                    }\n-                } else if (verbose) {\n-                    buffer.append(\" (class: \").append(pair.getClassName())\n-                            .append(\")\");\n-                }\n-                buffer.append('\\n');\n-                if (recursive) {\n-                    try {\n-                        Object value = ctx.lookup(name);\n-                        if (value instanceof Context) {\n-                            Context subctx = (Context) value;\n-                            list(subctx, indent + \" |  \", buffer, verbose);\n-                        } else {\n-                            buffer.append(indent).append(\" |   NonContext: \")\n-                                    .append(value);\n-                            buffer.append('\\n');\n-                        }\n-                    } catch (Throwable t) {\n-                        buffer.append(\"Failed to lookup: \").append(name)\n-                                .append(\", errmsg=\").append(t.getMessage());\n-                        buffer.append('\\n');\n-                    }\n+          c = loader.loadClass(className);\n+          if (Context.class.isAssignableFrom(c)) {\n+            recursive = true;\n+          }\n+          if (LinkRef.class.isAssignableFrom(c)) {\n+            isLinkRef = true;\n+          }\n+          isProxy = Proxy.isProxyClass(c);\n+        } catch (ClassNotFoundException cnfe) {\n+          // If this is a $Proxy* class its a proxy\n+          if (className.startsWith(\"$Proxy\")) {\n+            isProxy = true;\n+            // We have to get the class from the binding\n+            try {\n+              Object p = ctx.lookup(name);\n+              c = p.getClass();\n+            } catch (NamingException e) {\n+              Throwable t = e.getRootCause();\n+              if (t instanceof ClassNotFoundException) {\n+                // Get the class name from the exception msg\n+                String msg = t.getMessage();\n+                if (msg != null) {\n+                  // Reset the class name to the CNFE class\n+                  className = msg;\n                 }\n+              }\n+            }\n+          }\n+        }\n+        buffer.append(indent).append(\" +- \").append(name);\n+        // Display reference targets\n+        if (isLinkRef) {\n+          // Get the\n+          try {\n+            Object obj = ctx.lookupLink(name);\n+            LinkRef link = (LinkRef) obj;\n+            buffer.append(\"[link -> \");\n+            buffer.append(link.getLinkName());\n+            buffer.append(']');\n+          } catch (Throwable t) {\n+            buffer.append(\"invalid]\");\n+          }\n+        }\n+        // Display proxy interfaces\n+        if (isProxy) {\n+          buffer.append(\" (proxy: \").append(pair.getClassName());\n+          if (c != null) {\n+            Class<?>[] ifaces = c.getInterfaces();\n+            buffer.append(\" implements \");\n+            for (Class<?> iface : ifaces) {\n+              buffer.append(iface);\n+              buffer.append(',');\n+            }\n+            buffer.setCharAt(buffer.length() - 1, ')');\n+          } else {\n+            buffer.append(\" implements \").append(className)\n+              .append(\")\");\n+          }\n+        } else if (verbose) {\n+          buffer.append(\" (class: \").append(pair.getClassName())\n+            .append(\")\");\n+        }\n+        buffer.append('\\n');\n+        if (recursive) {\n+          try {\n+            Object value = ctx.lookup(name);\n+            if (value instanceof Context) {\n+              Context subctx = (Context) value;\n+              list(subctx, indent + \" |  \", buffer, verbose);\n+            } else {\n+              buffer.append(indent).append(\" |   NonContext: \")\n+                .append(value);\n+              buffer.append('\\n');\n             }\n-            ne.close();\n-        } catch (NamingException ne) {\n-            buffer.append(\"error while listing context \").append(ctx.toString())\n-                    .append(\": \").append(ne.toString(true));\n+          } catch (Throwable t) {\n+            buffer.append(\"Failed to lookup: \").append(name)\n+              .append(\", errmsg=\").append(t.getMessage());\n+            buffer.append('\\n');\n+          }\n         }\n+      }\n+      ne.close();\n+    } catch (NamingException ne) {\n+      buffer.append(\"error while listing context \").append(ctx.toString())\n+        .append(\": \").append(ne.toString(true));\n     }\n+  }\n \n-    private void logBanner(VersionInfo ver) {\n-        log.info(\"============================================\");\n-        log.info(\"        &(                             \");\n-        log.info(\"       (((((& (((((((((((              \");\n-        log.info(\"     ((((((((((((((((((((((((          \");\n-        log.info(\"   #((((((((((((((         (((((       \");\n-        log.info(\"  (((((((((((((((((((        #((((     \");\n-        log.info(\" ((((((((((((((((((((((#       ((((    \");\n-        log.info(\"   (((((((((((((((((((((((#      (((   \");\n-        log.info(\"  (((&   #(((((((((((((((((((    &(((  \");\n-        log.info(\"  (((         ((((((((((((((      (((  \");\n-        log.info(\"  ((#          (((((((((((        (((  \");\n-        log.info(\"  ((#        ((((((((((((         (((  \");\n-        log.info(\"  (((       ((((((((((((          (((  \");\n-        log.info(\"  (((      (((((((((((&           (((  \");\n-        log.info(\"   (((      ((((((((((((         (((   \");\n-        log.info(\"    (((         ((((((((((      (((    \");\n-        log.info(\"     ((((          #((((((((  ((((     \");\n-        log.info(\"       (((((           (((((((((       \");\n-        log.info(\"         &(((((((%   %((((((((((       \");\n-        log.info(\"             #(((((((((((#     ((#     \");\n-        log.info(\"\");\n-        log.info(\"  Zanata version: {}\", ver.getVersionNo());\n-        log.info(\"  SCM: {}\", ver.getScmDescribe());\n-        log.info(\"  Red Hat Inc 2008-{}\",\n-                Calendar.getInstance().get(Calendar.YEAR));\n-        log.info(\"============================================\");\n-    }\n+  private void logBanner(VersionInfo ver) {\n+    log.info(\"============================================\");\n+    log.info(\"        &(                             \");\n+    log.info(\"       (((((& (((((((((((              \");\n+    log.info(\"     ((((((((((((((((((((((((          \");\n+    log.info(\"   #((((((((((((((         (((((       \");\n+    log.info(\"  (((((((((((((((((((        #((((     \");\n+    log.info(\" ((((((((((((((((((((((#       ((((    \");\n+    log.info(\"   (((((((((((((((((((((((#      (((   \");\n+    log.info(\"  (((&   #(((((((((((((((((((    &(((  \");\n+    log.info(\"  (((         ((((((((((((((      (((  \");\n+    log.info(\"  ((#          (((((((((((        (((  \");\n+    log.info(\"  ((#        ((((((((((((         (((  \");\n+    log.info(\"  (((       ((((((((((((          (((  \");\n+    log.info(\"  (((      (((((((((((&           (((  \");\n+    log.info(\"   (((      ((((((((((((         (((   \");\n+    log.info(\"    (((         ((((((((((      (((    \");\n+    log.info(\"     ((((          #((((((((  ((((     \");\n+    log.info(\"       (((((           (((((((((       \");\n+    log.info(\"         &(((((((%   %((((((((((       \");\n+    log.info(\"             #(((((((((((#     ((#     \");\n+    log.info(\"\");\n+    log.info(\"  Zanata version: {}\", ver.getVersionNo());\n+    log.info(\"  SCM: {}\", ver.getScmDescribe());\n+    log.info(\"  Red Hat Inc 2008-{}\",\n+      Calendar.getInstance().get(Calendar.YEAR));\n+    log.info(\"============================================\");\n+  }\n }\n",
            "diff_size": 435
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "275",
                    "column": "58",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/5/ZanataInit.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/codebuff/5/ZanataInit.java\nindex c076091774d..ed3ae01843b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/5/ZanataInit.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/codebuff/5/ZanataInit.java\n@@ -58,7 +58,6 @@ import org.apache.deltaspike.core.api.lifecycle.Initialized;\n import org.apache.maven.artifact.versioning.DefaultArtifactVersion;\n import javax.inject.Inject;\n import javax.inject.Named;\n-\n import org.zanata.config.MTServiceToken;\n import org.zanata.config.MTServiceURL;\n import org.zanata.config.MTServiceUser;\n@@ -67,7 +66,6 @@ import org.zanata.events.ServerStarted;\n import org.zanata.exception.ZanataInitializationException;\n import org.zanata.rest.dto.VersionInfo;\n import javax.enterprise.event.Event;\n-\n import org.zanata.util.VersionUtility;\n import org.zanata.util.WithRequestScope;\n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n@@ -82,31 +80,29 @@ import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n  * @author Sean Flanigan\n  *         <a href=\"mailto:sflaniga@redhat.com\">sflaniga@redhat.com</a>\n  */\n+\n+\n @Named(\"zanataInit\")\n @ApplicationScoped\n public class ZanataInit {\n-    private static final org.slf4j.Logger log =\n-            org.slf4j.LoggerFactory.getLogger(ZanataInit.class);\n+    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(ZanataInit.class);\n+    private static final DefaultArtifactVersion MIN_EAP_VERSION = new DefaultArtifactVersion(\"7.0.1.GA\");\n+    private static final DefaultArtifactVersion MIN_WILDFLY_VERSION = new DefaultArtifactVersion(\"10.1.0.Final\");\n \n-    private static final DefaultArtifactVersion MIN_EAP_VERSION =\n-            new DefaultArtifactVersion(\"7.0.1.GA\");\n-    private static final DefaultArtifactVersion MIN_WILDFLY_VERSION =\n-            new DefaultArtifactVersion(\"10.1.0.Final\");\n     static {\n         // Prevent JBoss/WildFly from warning about gwt-servlet's\n         // org.hibernate.validator.ValidationMessages\n         Logger.getLogger(\"org.jboss.modules\").setLevel(Level.SEVERE);\n         // Disable \"RP discovery / realm validation disabled;\"\n-        Logger.getLogger(\"org.openid4java.server.RealmVerifier\")\n-                .setLevel(Level.SEVERE);\n+        Logger.getLogger(\"org.openid4java.server.RealmVerifier\").setLevel(Level.SEVERE);\n         // Disable \"Queue with name '.*' has already been registered\"\n         Logger.getLogger(\"org.richfaces.log.Components\").setLevel(Level.SEVERE);\n     }\n+\n     @Inject\n     private ApplicationConfiguration applicationConfiguration;\n     @Inject\n     private Event<ServerStarted> startupEvent;\n-\n     @Inject\n     @MTServiceURL\n     private URI mtServiceURL;\n@@ -116,10 +112,8 @@ public class ZanataInit {\n     @Inject\n     @MTServiceToken\n     private String mtServiceToken;\n-\n     @WithRequestScope\n-    public void onCreate(@Observes @Initialized ServletContext context)\n-            throws Exception {\n+    public void onCreate(@Observes @Initialized ServletContext context) throws Exception {\n         initZanata(context);\n     }\n \n@@ -138,10 +132,8 @@ public class ZanataInit {\n         }\n         zanataVersion = VersionUtility.getVersionInfo(atts, ZanataInit.class);\n         this.applicationConfiguration.setVersion(zanataVersion.getVersionNo());\n-        this.applicationConfiguration\n-                .setBuildTimestamp(zanataVersion.getBuildTimeStamp());\n-        this.applicationConfiguration\n-                .setScmDescribe(zanataVersion.getScmDescribe());\n+        this.applicationConfiguration.setBuildTimestamp(zanataVersion.getBuildTimeStamp());\n+        this.applicationConfiguration.setScmDescribe(zanataVersion.getScmDescribe());\n         this.applicationConfiguration.applyLoggingConfiguration();\n         logBanner(zanataVersion);\n         if (applicationConfiguration.isInternalAuth()) {\n@@ -165,11 +157,9 @@ public class ZanataInit {\n         log.info(\"Configured authentications: {}\", applicationConfiguration.getAuthTypes());\n         log.info(\"Enable copyTrans: {}\",\n                 this.applicationConfiguration.isCopyTransEnabled());\n-        String javamelodyDir =\n-                System.getProperty(\"javamelody.storage-directory\");\n+        String javamelodyDir = System.getProperty(\"javamelody.storage-directory\");\n         log.info(\"JavaMelody stats directory: {}\", javamelodyDir);\n-        String indexBase =\n-                applicationConfiguration.getHibernateSearchIndexBase();\n+        String indexBase = applicationConfiguration.getHibernateSearchIndexBase();\n         log.info(\"Lucene index directory: {}\", indexBase);\n         if (indexBase != null) {\n             checkLuceneLocks(new File(indexBase));\n@@ -180,47 +170,34 @@ public class ZanataInit {\n         log.info(\"Started Zanata...\");\n     }\n \n-    private void checkAppServerVersion()\n-            throws MalformedObjectNameException, AttributeNotFoundException,\n-            MBeanException, ReflectionException, InstanceNotFoundException {\n+    private void checkAppServerVersion() throws MalformedObjectNameException, AttributeNotFoundException, MBeanException, ReflectionException, InstanceNotFoundException {\n         MBeanServer jmx = ManagementFactory.getPlatformMBeanServer();\n         ObjectName server = new ObjectName(\"jboss.as:management-root=server\");\n-        String releaseCodename =\n-                (String) jmx.getAttribute(server, \"releaseCodename\");\n-        String releaseVersion =\n-                (String) jmx.getAttribute(server, \"releaseVersion\");\n+        String releaseCodename = (String) jmx.getAttribute(server, \"releaseCodename\");\n+        String releaseVersion = (String) jmx.getAttribute(server, \"releaseVersion\");\n         String productName = (String) jmx.getAttribute(server, \"productName\");\n-        String productVersion =\n-                (String) jmx.getAttribute(server, \"productVersion\");\n+        String productVersion = (String) jmx.getAttribute(server, \"productVersion\");\n         log.info(\"App server release codename: {}\", releaseCodename);\n         log.info(\"App server release version: {}\", releaseVersion);\n         switch ((productName == null) ? \"\" : productName) {\n-        case \"JBoss EAP\":\n-\n-        case \"EAP\":\n-            checkEAPVersion(productVersion);\n-            break;\n-\n-        case \"WildFly Full\":\n-            checkWildFlyVersion(productVersion);\n-            break;\n-\n-        default:\n-            log.warn(\n-                    \"Unknown app server.  This application requires EAP >= {} or WildFly Full >= {}\",\n-                    MIN_EAP_VERSION, MIN_WILDFLY_VERSION);\n-            break;\n-\n-        }\n+            case \"JBoss EAP\":\n+            case \"EAP\":\n+                checkEAPVersion(productVersion);\n+                break;\n+            case \"WildFly Full\":\n+                checkWildFlyVersion(productVersion);\n+                break;\n+            default:\n+                log.warn(\"Unknown app server.  This application requires EAP >= {} or WildFly Full >= {}\", MIN_EAP_VERSION, MIN_WILDFLY_VERSION);\n+                break;\n+            }\n     }\n \n     private void checkEAPVersion(String productVersion) {\n         if (productVersion != null) {\n-            DefaultArtifactVersion pv =\n-                    new DefaultArtifactVersion(productVersion);\n+            DefaultArtifactVersion pv = new DefaultArtifactVersion(productVersion);\n             if (pv.compareTo(MIN_EAP_VERSION) < 0) {\n-                log.warn(\"EAP version is {}.  Please upgrade to {} or later.\",\n-                        productVersion, MIN_EAP_VERSION);\n+                log.warn(\"EAP version is {}.  Please upgrade to {} or later.\", productVersion, MIN_EAP_VERSION);\n             } else {\n                 log.info(\"EAP version: {}\", productVersion);\n             }\n@@ -231,12 +208,9 @@ public class ZanataInit {\n \n     private void checkWildFlyVersion(String productVersion) {\n         if (productVersion != null) {\n-            DefaultArtifactVersion pv =\n-                    new DefaultArtifactVersion(productVersion);\n+            DefaultArtifactVersion pv = new DefaultArtifactVersion(productVersion);\n             if (pv.compareTo(MIN_WILDFLY_VERSION) < 0) {\n-                log.warn(\n-                        \"WildFly Full version is {}.  Please upgrade to {} or later.\",\n-                        productVersion, MIN_WILDFLY_VERSION);\n+                log.warn(\"WildFly Full version is {}.  Please upgrade to {} or later.\", productVersion, MIN_WILDFLY_VERSION);\n             } else {\n                 log.info(\"WildFly Full version: {}\", productVersion);\n             }\n@@ -245,8 +219,7 @@ public class ZanataInit {\n         }\n     }\n \n-    private void checkLuceneLocks(File indexDir)\n-            throws IOException, ZanataInitializationException {\n+    private void checkLuceneLocks(File indexDir) throws IOException, ZanataInitializationException {\n         if (!indexDir.exists()) {\n             if (indexDir.mkdirs()) {\n                 log.info(\"Created lucene index directory.\");\n@@ -254,21 +227,15 @@ public class ZanataInit {\n                 log.warn(\"Could not create lucene index directory\");\n             }\n         }\n+\n         boolean mightUseNFS = mightUseNFS(indexDir);\n         if (mightUseNFS) {\n             // we don't trust Lucene's NativeFSLockFactory for NFS locks\n-            String docURL =\n-                    \"http://docs.jboss.org/hibernate/search/4.4/reference/en-US/html/search-configuration.html#search-configuration-directory-lockfactories\";\n-            log.info(\"The Hibernate Search index dir \\\"{}\\\" might be NFS. \" +\n-                    \"Native locks may not be reliable. See {}\",\n-                    indexDir, docURL);\n-            Collection<File> lockFiles =\n-                    FileUtils.listFiles(indexDir, new String[] { \"lock\" }, true);\n+            String docURL = \"http://docs.jboss.org/hibernate/search/4.4/reference/en-US/html/search-configuration.html#search-configuration-directory-lockfactories\";\n+            log.info(\"The Hibernate Search index dir \\\"{}\\\" might be NFS. \" + \"Native locks may not be reliable. See {}\", indexDir, docURL);\n+            Collection<File> lockFiles = FileUtils.listFiles(indexDir, new String[] { \"lock\" }, true);\n             if (!lockFiles.isEmpty()) {\n-                log.warn(\"Lucene lock files found. Lucene will attempt to \" +\n-                        \"determine if the locks are stale, but this is not \" +\n-                        \"fully reliable on NFS, so please make sure only one \" +\n-                        \"copy of Zanata is running.\");\n+                log.warn(\"Lucene lock files found. Lucene will attempt to \" + \"determine if the locks are stale, but this is not \" + \"fully reliable on NFS, so please make sure only one \" + \"copy of Zanata is running.\");\n             }\n         }\n     }\n@@ -277,7 +244,8 @@ public class ZanataInit {\n      * Returns true if any of the files appear to be stored in NFS (or we can't\n      * tell).\n      */\n-    @SuppressFBWarnings({\"SLF4J_FORMAT_SHOULD_BE_CONST\"})\n+\n+    @SuppressFBWarnings({ \"SLF4J_FORMAT_SHOULD_BE_CONST\" })\n     private boolean mightUseNFS(File... files) {\n         try {\n             FileSystem fileSystem = FileSystems.getDefault();\n@@ -299,27 +267,27 @@ public class ZanataInit {\n     /**\n      * Utility to debug JBoss JNDI problems\n      */\n+\n     public static String listJNDITree(String namespace) {\n         StringBuffer buffer = new StringBuffer(4096);\n         try {\n             Properties props = new Properties();\n             Context context = new InitialContext(props); // From jndi.properties\n             if (namespace != null) {\n-                context = (Context) context.lookup(namespace);\n+                context =\n+                    (Context) context.lookup(namespace);\n             }\n             buffer.append(\"Namespace: \").append(namespace).append(\"\\n\");\n             buffer.append(\"#####################################\\n\");\n             list(context, \" \", buffer, true);\n             buffer.append(\"#####################################\\n\");\n         } catch (NamingException e) {\n-            buffer.append(\"Failed to get InitialContext, \")\n-                    .append(e.toString(true));\n+            buffer.append(\"Failed to get InitialContext, \").append(e.toString(true));\n         }\n         return buffer.toString();\n     }\n \n-    private static void list(Context ctx, String indent, StringBuffer buffer,\n-            boolean verbose) {\n+    private static void list(Context ctx, String indent, StringBuffer buffer, boolean verbose) {\n         ClassLoader loader = Thread.currentThread().getContextClassLoader();\n         try {\n             NamingEnumeration<NameClassPair> ne = ctx.list(\"\");\n@@ -387,12 +355,10 @@ public class ZanataInit {\n                         }\n                         buffer.setCharAt(buffer.length() - 1, ')');\n                     } else {\n-                        buffer.append(\" implements \").append(className)\n-                                .append(\")\");\n+                        buffer.append(\" implements \").append(className).append(\")\");\n                     }\n                 } else if (verbose) {\n-                    buffer.append(\" (class: \").append(pair.getClassName())\n-                            .append(\")\");\n+                    buffer.append(\" (class: \").append(pair.getClassName()).append(\")\");\n                 }\n                 buffer.append('\\n');\n                 if (recursive) {\n@@ -402,21 +368,18 @@ public class ZanataInit {\n                             Context subctx = (Context) value;\n                             list(subctx, indent + \" |  \", buffer, verbose);\n                         } else {\n-                            buffer.append(indent).append(\" |   NonContext: \")\n-                                    .append(value);\n+                            buffer.append(indent).append(\" |   NonContext: \").append(value);\n                             buffer.append('\\n');\n                         }\n                     } catch (Throwable t) {\n-                        buffer.append(\"Failed to lookup: \").append(name)\n-                                .append(\", errmsg=\").append(t.getMessage());\n+                        buffer.append(\"Failed to lookup: \").append(name).append(\", errmsg=\").append(t.getMessage());\n                         buffer.append('\\n');\n                     }\n                 }\n             }\n             ne.close();\n         } catch (NamingException ne) {\n-            buffer.append(\"error while listing context \").append(ctx.toString())\n-                    .append(\": \").append(ne.toString(true));\n+            buffer.append(\"error while listing context \").append(ctx.toString()).append(\": \").append(ne.toString(true));\n         }\n     }\n \n@@ -444,8 +407,7 @@ public class ZanataInit {\n         log.info(\"\");\n         log.info(\"  Zanata version: {}\", ver.getVersionNo());\n         log.info(\"  SCM: {}\", ver.getScmDescribe());\n-        log.info(\"  Red Hat Inc 2008-{}\",\n-                Calendar.getInstance().get(Calendar.YEAR));\n+        log.info(\"  Red Hat Inc 2008-{}\", Calendar.getInstance().get(Calendar.YEAR));\n         log.info(\"============================================\");\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 97
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "306",
                    "column": "58",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/5/ZanataInit.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_three_grams/5/ZanataInit.java\nindex c076091774d..f399fd481c4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/5/ZanataInit.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_three_grams/5/ZanataInit.java\n@@ -303,8 +303,9 @@ public class ZanataInit {\n         StringBuffer buffer = new StringBuffer(4096);\n         try {\n             Properties props = new Properties();\n-            Context context = new InitialContext(props); // From jndi.properties\n-            if (namespace != null) {\n+            Context context = new InitialContext(props);\n+            // From jndi.properties\n+             if (namespace != null) {\n                 context = (Context) context.lookup(namespace);\n             }\n             buffer.append(\"Namespace: \").append(namespace).append(\"\\n\");\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}