{
    "project_name": "graphfoundation-ongdb",
    "error_id": "738",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "66",
                    "column": "70",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "140",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "65",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/738/LuceneSchemaIndex.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/738/LuceneSchemaIndex.java\nindex 4d7b5c29da3..f5282cbef52 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/738/LuceneSchemaIndex.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/738/LuceneSchemaIndex.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.impl.schema;\n \n import org.apache.lucene.index.DirectoryReader;\n@@ -55,170 +56,169 @@ import static java.util.Collections.singletonMap;\n  */\n class LuceneSchemaIndex extends AbstractLuceneIndex\n {\n-    private static final String KEY_STATUS = \"status\";\n-    private static final String ONLINE = \"online\";\n-    private static final Map<String,String> ONLINE_COMMIT_USER_DATA = singletonMap( KEY_STATUS, ONLINE );\n-\n-    private final SchemaIndexDescriptor descriptor;\n-    private final IndexSamplingConfig samplingConfig;\n-\n-    private final TaskCoordinator taskCoordinator = new TaskCoordinator( 10, TimeUnit.MILLISECONDS );\n-\n-    LuceneSchemaIndex( PartitionedIndexStorage indexStorage, SchemaIndexDescriptor descriptor,\n-            IndexSamplingConfig samplingConfig, IndexPartitionFactory partitionFactory )\n-    {\n-        super( indexStorage, partitionFactory );\n-        this.descriptor = descriptor;\n-        this.samplingConfig = samplingConfig;\n-    }\n-\n-    public LuceneIndexWriter getIndexWriter( WritableDatabaseSchemaIndex writableLuceneSchemaIndex )\n-    {\n-        ensureOpen();\n-        return new PartitionedIndexWriter( writableLuceneSchemaIndex );\n-    }\n-\n-    public IndexReader getIndexReader() throws IOException\n-    {\n-        ensureOpen();\n-        List<AbstractIndexPartition> partitions = getPartitions();\n-        return hasSinglePartition( partitions ) ? createSimpleReader( partitions )\n-                                                : createPartitionedReader( partitions );\n-    }\n-\n-    public SchemaIndexDescriptor getDescriptor()\n-    {\n-        return descriptor;\n-    }\n-\n-    /**\n-     * Verifies uniqueness of property values present in this index.\n-     *\n-     * @param accessor the accessor to retrieve actual property values from the store.\n-     * @param propertyKeyIds the ids of the properties to verify.\n-     * @throws IndexEntryConflictException if there are duplicates.\n-     * @throws IOException\n-     * @see UniquenessVerifier#verify(PropertyAccessor, int[])\n-     */\n-    public void verifyUniqueness( PropertyAccessor accessor, int[] propertyKeyIds )\n-            throws IOException, IndexEntryConflictException\n-    {\n-        flush( true );\n-        try ( UniquenessVerifier verifier = createUniquenessVerifier() )\n-        {\n-            verifier.verify( accessor, propertyKeyIds );\n-        }\n-    }\n-\n-    /**\n-     * Verifies uniqueness of updated property values.\n-     *\n-     * @param accessor the accessor to retrieve actual property values from the store.\n-     * @param propertyKeyIds the ids of the properties to verify.\n-     * @param updatedValueTuples the values to check uniqueness for.\n-     * @throws IndexEntryConflictException if there are duplicates.\n-     * @throws IOException\n-     * @see UniquenessVerifier#verify(PropertyAccessor, int[], List)\n-     */\n-    public void verifyUniqueness( PropertyAccessor accessor, int[] propertyKeyIds, List<Value[]> updatedValueTuples )\n-            throws IOException, IndexEntryConflictException\n+  private static final String KEY_STATUS = \"status\";\n+  private static final String ONLINE = \"online\";\n+  private static final Map<String, String> ONLINE_COMMIT_USER_DATA = singletonMap(KEY_STATUS, ONLINE);\n+\n+  private final SchemaIndexDescriptor descriptor;\n+  private final IndexSamplingConfig samplingConfig;\n+\n+  private final TaskCoordinator taskCoordinator = new TaskCoordinator(10, TimeUnit.MILLISECONDS);\n+\n+  LuceneSchemaIndex(PartitionedIndexStorage indexStorage, SchemaIndexDescriptor descriptor,\n+                    IndexSamplingConfig samplingConfig, IndexPartitionFactory partitionFactory)\n+  {\n+    super(indexStorage, partitionFactory);\n+    this.descriptor = descriptor;\n+    this.samplingConfig = samplingConfig;\n+  }\n+\n+  public LuceneIndexWriter getIndexWriter(WritableDatabaseSchemaIndex writableLuceneSchemaIndex)\n+  {\n+    ensureOpen();\n+    return new PartitionedIndexWriter(writableLuceneSchemaIndex);\n+  }\n+\n+  public IndexReader getIndexReader() throws IOException\n+  {\n+    ensureOpen();\n+    List<AbstractIndexPartition> partitions = getPartitions();\n+    return hasSinglePartition(partitions) ? createSimpleReader(partitions)\n+        : createPartitionedReader(partitions);\n+  }\n+\n+  public SchemaIndexDescriptor getDescriptor()\n+  {\n+    return descriptor;\n+  }\n+\n+  /**\n+   * Verifies uniqueness of property values present in this index.\n+   *\n+   * @param accessor       the accessor to retrieve actual property values from the store.\n+   * @param propertyKeyIds the ids of the properties to verify.\n+   * @throws IndexEntryConflictException if there are duplicates.\n+   * @throws IOException\n+   * @see UniquenessVerifier#verify(PropertyAccessor, int[])\n+   */\n+  public void verifyUniqueness(PropertyAccessor accessor, int[] propertyKeyIds)\n+      throws IOException, IndexEntryConflictException\n+  {\n+    flush(true);\n+    try (UniquenessVerifier verifier = createUniquenessVerifier())\n     {\n-        try ( UniquenessVerifier verifier = createUniquenessVerifier() )\n-        {\n-            verifier.verify( accessor, propertyKeyIds, updatedValueTuples );\n-        }\n+      verifier.verify(accessor, propertyKeyIds);\n     }\n-\n-    @Override\n-    public void drop() throws IOException\n-    {\n-        taskCoordinator.cancel();\n-        try\n-        {\n-            taskCoordinator.awaitCompletion();\n-        }\n-        catch ( InterruptedException e )\n-        {\n-            throw new IOException( \"Interrupted while waiting for concurrent tasks to complete.\", e );\n-        }\n-        super.drop();\n-    }\n-\n-    /**\n-     * Check if this index is marked as online.\n-     *\n-     * @return <code>true</code> if index is online, <code>false</code> otherwise\n-     * @throws IOException\n-     */\n-    public boolean isOnline() throws IOException\n-    {\n-        ensureOpen();\n-        AbstractIndexPartition partition = getFirstPartition( getPartitions() );\n-        Directory directory = partition.getDirectory();\n-        try ( DirectoryReader reader = DirectoryReader.open( directory ) )\n-        {\n-            Map<String,String> userData = reader.getIndexCommit().getUserData();\n-            return ONLINE.equals( userData.get( KEY_STATUS ) );\n-        }\n-    }\n-\n-    /**\n-     * Marks index as online by including \"status\" -> \"online\" map into commit metadata of the first partition.\n-     *\n-     * @throws IOException\n-     */\n-    public void markAsOnline() throws IOException\n+  }\n+\n+  /**\n+   * Verifies uniqueness of updated property values.\n+   *\n+   * @param accessor           the accessor to retrieve actual property values from the store.\n+   * @param propertyKeyIds     the ids of the properties to verify.\n+   * @param updatedValueTuples the values to check uniqueness for.\n+   * @throws IndexEntryConflictException if there are duplicates.\n+   * @throws IOException\n+   * @see UniquenessVerifier#verify(PropertyAccessor, int[], List)\n+   */\n+  public void verifyUniqueness(PropertyAccessor accessor, int[] propertyKeyIds, List<Value[]> updatedValueTuples)\n+      throws IOException, IndexEntryConflictException\n+  {\n+    try (UniquenessVerifier verifier = createUniquenessVerifier())\n     {\n-        ensureOpen();\n-        AbstractIndexPartition partition = getFirstPartition( getPartitions() );\n-        IndexWriter indexWriter = partition.getIndexWriter();\n-        indexWriter.setCommitData( ONLINE_COMMIT_USER_DATA );\n-        flush( false );\n+      verifier.verify(accessor, propertyKeyIds, updatedValueTuples);\n     }\n+  }\n \n-    /**\n-     * Writes the given failure message to the failure storage.\n-     *\n-     * @param failure the failure message.\n-     * @throws IOException\n-     */\n-    public void markAsFailed( String failure ) throws IOException\n+  @Override\n+  public void drop() throws IOException\n+  {\n+    taskCoordinator.cancel();\n+    try\n     {\n-        indexStorage.storeIndexFailure( failure );\n-    }\n-\n-    private UniquenessVerifier createUniquenessVerifier() throws IOException\n+      taskCoordinator.awaitCompletion();\n+    } catch (InterruptedException e)\n     {\n-        ensureOpen();\n-        maybeRefreshBlocking();\n-        List<AbstractIndexPartition> partitions = getPartitions();\n-        return hasSinglePartition( partitions ) ? createSimpleUniquenessVerifier( partitions )\n-                                                : createPartitionedUniquenessVerifier( partitions );\n+      throw new IOException(\"Interrupted while waiting for concurrent tasks to complete.\", e);\n     }\n-\n-    private SimpleIndexReader createSimpleReader( List<AbstractIndexPartition> partitions ) throws IOException\n-    {\n-        AbstractIndexPartition singlePartition = getFirstPartition( partitions );\n-        return new SimpleIndexReader( singlePartition.acquireSearcher(), descriptor, samplingConfig, taskCoordinator );\n-    }\n-\n-    private UniquenessVerifier createSimpleUniquenessVerifier( List<AbstractIndexPartition> partitions ) throws IOException\n-    {\n-        AbstractIndexPartition singlePartition = getFirstPartition( partitions );\n-        PartitionSearcher partitionSearcher = singlePartition.acquireSearcher();\n-        return new SimpleUniquenessVerifier( partitionSearcher );\n-    }\n-\n-    private PartitionedIndexReader createPartitionedReader( List<AbstractIndexPartition> partitions ) throws IOException\n-    {\n-        List<PartitionSearcher> searchers = acquireSearchers( partitions );\n-        return new PartitionedIndexReader( searchers, descriptor, samplingConfig, taskCoordinator );\n-    }\n-\n-    private UniquenessVerifier createPartitionedUniquenessVerifier( List<AbstractIndexPartition> partitions ) throws IOException\n+    super.drop();\n+  }\n+\n+  /**\n+   * Check if this index is marked as online.\n+   *\n+   * @return <code>true</code> if index is online, <code>false</code> otherwise\n+   * @throws IOException\n+   */\n+  public boolean isOnline() throws IOException\n+  {\n+    ensureOpen();\n+    AbstractIndexPartition partition = getFirstPartition(getPartitions());\n+    Directory directory = partition.getDirectory();\n+    try (DirectoryReader reader = DirectoryReader.open(directory))\n     {\n-        List<PartitionSearcher> searchers = acquireSearchers( partitions );\n-        return new PartitionedUniquenessVerifier( searchers );\n+      Map<String, String> userData = reader.getIndexCommit().getUserData();\n+      return ONLINE.equals(userData.get(KEY_STATUS));\n     }\n+  }\n+\n+  /**\n+   * Marks index as online by including \"status\" -> \"online\" map into commit metadata of the first partition.\n+   *\n+   * @throws IOException\n+   */\n+  public void markAsOnline() throws IOException\n+  {\n+    ensureOpen();\n+    AbstractIndexPartition partition = getFirstPartition(getPartitions());\n+    IndexWriter indexWriter = partition.getIndexWriter();\n+    indexWriter.setCommitData(ONLINE_COMMIT_USER_DATA);\n+    flush(false);\n+  }\n+\n+  /**\n+   * Writes the given failure message to the failure storage.\n+   *\n+   * @param failure the failure message.\n+   * @throws IOException\n+   */\n+  public void markAsFailed(String failure) throws IOException\n+  {\n+    indexStorage.storeIndexFailure(failure);\n+  }\n+\n+  private UniquenessVerifier createUniquenessVerifier() throws IOException\n+  {\n+    ensureOpen();\n+    maybeRefreshBlocking();\n+    List<AbstractIndexPartition> partitions = getPartitions();\n+    return hasSinglePartition(partitions) ? createSimpleUniquenessVerifier(partitions)\n+        : createPartitionedUniquenessVerifier(partitions);\n+  }\n+\n+  private SimpleIndexReader createSimpleReader(List<AbstractIndexPartition> partitions) throws IOException\n+  {\n+    AbstractIndexPartition singlePartition = getFirstPartition(partitions);\n+    return new SimpleIndexReader(singlePartition.acquireSearcher(), descriptor, samplingConfig, taskCoordinator);\n+  }\n+\n+  private UniquenessVerifier createSimpleUniquenessVerifier(List<AbstractIndexPartition> partitions) throws IOException\n+  {\n+    AbstractIndexPartition singlePartition = getFirstPartition(partitions);\n+    PartitionSearcher partitionSearcher = singlePartition.acquireSearcher();\n+    return new SimpleUniquenessVerifier(partitionSearcher);\n+  }\n+\n+  private PartitionedIndexReader createPartitionedReader(List<AbstractIndexPartition> partitions) throws IOException\n+  {\n+    List<PartitionSearcher> searchers = acquireSearchers(partitions);\n+    return new PartitionedIndexReader(searchers, descriptor, samplingConfig, taskCoordinator);\n+  }\n+\n+  private UniquenessVerifier createPartitionedUniquenessVerifier(List<AbstractIndexPartition> partitions) throws IOException\n+  {\n+    List<PartitionSearcher> searchers = acquireSearchers(partitions);\n+    return new PartitionedUniquenessVerifier(searchers);\n+  }\n \n }\n",
            "diff_size": 217
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "121",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/738/LuceneSchemaIndex.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/738/LuceneSchemaIndex.java\nindex 4d7b5c29da3..4473857c3d0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/738/LuceneSchemaIndex.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/738/LuceneSchemaIndex.java\n@@ -82,8 +82,7 @@ class LuceneSchemaIndex extends AbstractLuceneIndex\n     {\n         ensureOpen();\n         List<AbstractIndexPartition> partitions = getPartitions();\n-        return hasSinglePartition( partitions ) ? createSimpleReader( partitions )\n-                                                : createPartitionedReader( partitions );\n+        return hasSinglePartition( partitions ) ? createSimpleReader( partitions ) : createPartitionedReader( partitions );\n     }\n \n     public SchemaIndexDescriptor getDescriptor()\n@@ -100,9 +99,8 @@ class LuceneSchemaIndex extends AbstractLuceneIndex\n      * @throws IOException\n      * @see UniquenessVerifier#verify(PropertyAccessor, int[])\n      */\n-    public void verifyUniqueness( PropertyAccessor accessor, int[] propertyKeyIds )\n-            throws IOException, IndexEntryConflictException\n-    {\n+    public void verifyUniqueness( PropertyAccessor accessor, int[] propertyKeyIds ) throws IOException, IndexEntryConflictException\n+{\n         flush( true );\n         try ( UniquenessVerifier verifier = createUniquenessVerifier() )\n         {\n@@ -120,9 +118,8 @@ class LuceneSchemaIndex extends AbstractLuceneIndex\n      * @throws IOException\n      * @see UniquenessVerifier#verify(PropertyAccessor, int[], List)\n      */\n-    public void verifyUniqueness( PropertyAccessor accessor, int[] propertyKeyIds, List<Value[]> updatedValueTuples )\n-            throws IOException, IndexEntryConflictException\n-    {\n+    public void verifyUniqueness( PropertyAccessor accessor, int[] propertyKeyIds, List<Value[]> updatedValueTuples ) throws IOException, IndexEntryConflictException\n+{\n         try ( UniquenessVerifier verifier = createUniquenessVerifier() )\n         {\n             verifier.verify( accessor, propertyKeyIds, updatedValueTuples );\n@@ -192,8 +189,7 @@ class LuceneSchemaIndex extends AbstractLuceneIndex\n         ensureOpen();\n         maybeRefreshBlocking();\n         List<AbstractIndexPartition> partitions = getPartitions();\n-        return hasSinglePartition( partitions ) ? createSimpleUniquenessVerifier( partitions )\n-                                                : createPartitionedUniquenessVerifier( partitions );\n+        return hasSinglePartition( partitions ) ? createSimpleUniquenessVerifier( partitions ) : createPartitionedUniquenessVerifier( partitions );\n     }\n \n     private SimpleIndexReader createSimpleReader( List<AbstractIndexPartition> partitions ) throws IOException\n@@ -220,5 +216,4 @@ class LuceneSchemaIndex extends AbstractLuceneIndex\n         List<PartitionSearcher> searchers = acquireSearchers( partitions );\n         return new PartitionedUniquenessVerifier( searchers );\n     }\n-\n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}