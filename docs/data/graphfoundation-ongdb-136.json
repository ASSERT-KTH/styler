{
    "project_name": "graphfoundation-ongdb",
    "error_id": "136",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "68",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "133",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "146",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "169",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "130",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "198",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "280",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "323",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "323",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "344",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "344",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "391",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "391",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "414",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "414",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "448",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "448",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "450",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "450",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/136/DiagnosticsReportCommand.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/136/DiagnosticsReportCommand.java\nindex 212cde38d68..22e7d6a776e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/136/DiagnosticsReportCommand.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/136/DiagnosticsReportCommand.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.commandline.dbms;\n \n import org.jutils.jprocesses.JProcesses;\n@@ -63,395 +64,390 @@ import static org.neo4j.graphdb.factory.GraphDatabaseSettings.database_path;\n \n public class DiagnosticsReportCommand implements AdminCommand\n {\n-    private static final OptionalNamedArg destinationArgument =\n-            new OptionalCanonicalPath( \"to\", System.getProperty( \"java.io.tmpdir\" ), \"reports\" + File.separator,\n-                    \"Destination directory for reports\" );\n-    public static final String PID_KEY = \"pid\";\n-    private static final long NO_PID = 0;\n-    private static final Arguments arguments = new Arguments()\n-            .withArgument( new OptionalListArgument() )\n-            .withArgument( destinationArgument )\n-            .withArgument( new OptionalVerboseArgument() )\n-            .withArgument( new OptionalForceArgument() )\n-            .withArgument( new OptionalNamedArg( PID_KEY, \"1234\", \"\", \"Specify process id of running neo4j instance\" ) )\n-            .withPositionalArgument( new ClassifierFiltersArgument() );\n-\n-    private final Path homeDir;\n-    private final Path configDir;\n-    static final String[] DEFAULT_CLASSIFIERS = new String[]{\"logs\", \"config\", \"plugins\", \"tree\", \"metrics\", \"threads\", \"env\", \"sysprop\", \"ps\"};\n-\n-    private JMXDumper jmxDumper;\n-    private boolean verbose;\n-    private final PrintStream out;\n-    private final FileSystemAbstraction fs;\n-    private final PrintStream err;\n-    private static final DateTimeFormatter filenameDateTimeFormatter =\n-            new DateTimeFormatterBuilder().appendPattern( \"yyyy-MM-dd_HHmmss\" ).toFormatter();\n-    private long pid;\n-\n-    DiagnosticsReportCommand( Path homeDir, Path configDir, OutsideWorld outsideWorld )\n+  private static final OptionalNamedArg destinationArgument =\n+      new OptionalCanonicalPath(\"to\", System.getProperty(\"java.io.tmpdir\"), \"reports\" + File.separator,\n+          \"Destination directory for reports\");\n+  public static final String PID_KEY = \"pid\";\n+  private static final long NO_PID = 0;\n+  private static final Arguments arguments = new Arguments()\n+      .withArgument(new OptionalListArgument())\n+      .withArgument(destinationArgument)\n+      .withArgument(new OptionalVerboseArgument())\n+      .withArgument(new OptionalForceArgument())\n+      .withArgument(new OptionalNamedArg(PID_KEY, \"1234\", \"\", \"Specify process id of running neo4j instance\"))\n+      .withPositionalArgument(new ClassifierFiltersArgument());\n+\n+  private final Path homeDir;\n+  private final Path configDir;\n+  static final String[] DEFAULT_CLASSIFIERS = new String[] {\"logs\", \"config\", \"plugins\", \"tree\", \"metrics\", \"threads\", \"env\", \"sysprop\", \"ps\"};\n+\n+  private JMXDumper jmxDumper;\n+  private boolean verbose;\n+  private final PrintStream out;\n+  private final FileSystemAbstraction fs;\n+  private final PrintStream err;\n+  private static final DateTimeFormatter filenameDateTimeFormatter =\n+      new DateTimeFormatterBuilder().appendPattern(\"yyyy-MM-dd_HHmmss\").toFormatter();\n+  private long pid;\n+\n+  DiagnosticsReportCommand(Path homeDir, Path configDir, OutsideWorld outsideWorld)\n+  {\n+    this.homeDir = homeDir;\n+    this.configDir = configDir;\n+    this.fs = outsideWorld.fileSystem();\n+    this.out = outsideWorld.outStream();\n+    err = outsideWorld.errorStream();\n+  }\n+\n+  public static Arguments allArguments()\n+  {\n+    return arguments;\n+  }\n+\n+  @Override\n+  public void execute(String[] stringArgs) throws IncorrectUsage, CommandFailed\n+  {\n+    Args args = Args.withFlags(\"list\", \"to\", \"verbose\", \"force\", PID_KEY).parse(stringArgs);\n+    verbose = args.has(\"verbose\");\n+    jmxDumper = new JMXDumper(homeDir, fs, out, err, verbose);\n+    pid = parsePid(args);\n+    boolean force = args.has(\"force\");\n+\n+    DiagnosticsReporter reporter = createAndRegisterSources();\n+\n+    Optional<Set<String>> classifiers = parseAndValidateArguments(args, reporter);\n+    if (!classifiers.isPresent())\n     {\n-        this.homeDir = homeDir;\n-        this.configDir = configDir;\n-        this.fs = outsideWorld.fileSystem();\n-        this.out = outsideWorld.outStream();\n-        err = outsideWorld.errorStream();\n+      return;\n     }\n \n-    public static Arguments allArguments()\n-    {\n-        return arguments;\n-    }\n+    DiagnosticsReporterProgress progress = buildProgress();\n \n-    @Override\n-    public void execute( String[] stringArgs ) throws IncorrectUsage, CommandFailed\n+    // Start dumping\n+    Path destinationDir = new File(destinationArgument.parse(args)).toPath();\n+    try\n+    {\n+      Path reportFile = destinationDir.resolve(getDefaultFilename());\n+      out.println(\"Writing report to \" + reportFile.toAbsolutePath().toString());\n+      reporter.dump(classifiers.get(), reportFile, progress, force);\n+    } catch (IOException e)\n     {\n-        Args args = Args.withFlags( \"list\", \"to\", \"verbose\", \"force\", PID_KEY ).parse( stringArgs );\n-        verbose = args.has( \"verbose\" );\n-        jmxDumper = new JMXDumper( homeDir, fs, out, err, verbose );\n-        pid = parsePid( args );\n-        boolean force = args.has( \"force\" );\n-\n-        DiagnosticsReporter reporter = createAndRegisterSources();\n-\n-        Optional<Set<String>> classifiers = parseAndValidateArguments( args, reporter );\n-        if ( !classifiers.isPresent() )\n-        {\n-            return;\n-        }\n-\n-        DiagnosticsReporterProgress progress = buildProgress();\n-\n-        // Start dumping\n-        Path destinationDir = new File( destinationArgument.parse( args ) ).toPath();\n-        try\n-        {\n-            Path reportFile = destinationDir.resolve( getDefaultFilename() );\n-            out.println( \"Writing report to \" + reportFile.toAbsolutePath().toString() );\n-            reporter.dump( classifiers.get(), reportFile, progress, force );\n-        }\n-        catch ( IOException e )\n-        {\n-            throw new CommandFailed( \"Creating archive failed\", e );\n-        }\n+      throw new CommandFailed(\"Creating archive failed\", e);\n     }\n+  }\n \n-    private static long parsePid( Args args ) throws CommandFailed\n+  private static long parsePid(Args args) throws CommandFailed\n+  {\n+    if (args.has(PID_KEY))\n     {\n-        if ( args.has( PID_KEY ) )\n-        {\n-            try\n-            {\n-                return Long.parseLong( args.get( PID_KEY, \"\" ) );\n-            }\n-            catch ( NumberFormatException e )\n-            {\n-                throw new CommandFailed( \"Unable to parse --\" + PID_KEY, e );\n-            }\n-        }\n-        return NO_PID;\n+      try\n+      {\n+        return Long.parseLong(args.get(PID_KEY, \"\"));\n+      } catch (NumberFormatException e)\n+      {\n+        throw new CommandFailed(\"Unable to parse --\" + PID_KEY, e);\n+      }\n     }\n-\n-    private String getDefaultFilename() throws UnknownHostException\n+    return NO_PID;\n+  }\n+\n+  private String getDefaultFilename() throws UnknownHostException\n+  {\n+    String hostName = InetAddress.getLocalHost().getHostName();\n+    String safeFilename = hostName.replaceAll(\"[^a-zA-Z0-9._]+\", \"_\");\n+    return safeFilename + \"-\" + LocalDateTime.now().format(filenameDateTimeFormatter) + \".zip\";\n+  }\n+\n+  private DiagnosticsReporterProgress buildProgress()\n+  {\n+    DiagnosticsReporterProgress progress;\n+    if (System.console() != null)\n+    {\n+      progress = new InteractiveProgress(out, verbose);\n+    } else\n     {\n-        String hostName = InetAddress.getLocalHost().getHostName();\n-        String safeFilename = hostName.replaceAll( \"[^a-zA-Z0-9._]+\", \"_\" );\n-        return safeFilename + \"-\" + LocalDateTime.now().format( filenameDateTimeFormatter ) + \".zip\";\n+      progress = new NonInteractiveProgress(out, verbose);\n     }\n+    return progress;\n+  }\n+\n+  private Optional<Set<String>> parseAndValidateArguments(Args args, DiagnosticsReporter reporter) throws IncorrectUsage\n+  {\n+    Set<String> availableClassifiers = reporter.getAvailableClassifiers();\n \n-    private DiagnosticsReporterProgress buildProgress()\n+    // Passing '--list' should print list and end execution\n+    if (args.has(\"list\"))\n     {\n-        DiagnosticsReporterProgress progress;\n-        if ( System.console() != null )\n-        {\n-            progress = new InteractiveProgress( out, verbose );\n-        }\n-        else\n-        {\n-            progress = new NonInteractiveProgress( out, verbose );\n-        }\n-        return progress;\n+      listClassifiers(availableClassifiers);\n+      return Optional.empty();\n     }\n \n-    private Optional<Set<String>> parseAndValidateArguments( Args args, DiagnosticsReporter reporter ) throws IncorrectUsage\n+    // Make sure 'all' is the only classifier if specified\n+    Set<String> classifiers = new TreeSet<>(args.orphans());\n+    if (classifiers.contains(\"all\"))\n     {\n-        Set<String> availableClassifiers = reporter.getAvailableClassifiers();\n-\n-        // Passing '--list' should print list and end execution\n-        if ( args.has( \"list\" ) )\n-        {\n-            listClassifiers( availableClassifiers );\n-            return Optional.empty();\n-        }\n-\n-        // Make sure 'all' is the only classifier if specified\n-        Set<String> classifiers = new TreeSet<>( args.orphans() );\n-        if ( classifiers.contains( \"all\" ) )\n-        {\n-            if ( classifiers.size() != 1 )\n-            {\n-                classifiers.remove( \"all\" );\n-                throw new IncorrectUsage(\n-                        \"If you specify 'all' this has to be the only classifier. Found ['\" + String.join( \"','\", classifiers ) + \"'] as well.\" );\n-            }\n-        }\n-        else\n-        {\n-            // Add default classifiers that are available\n-            if ( classifiers.isEmpty() )\n-            {\n-                addDefaultClassifiers( availableClassifiers, classifiers );\n-            }\n-\n-            validateClassifiers( availableClassifiers, classifiers );\n-        }\n-        return Optional.of( classifiers );\n+      if (classifiers.size() != 1)\n+      {\n+        classifiers.remove(\"all\");\n+        throw new IncorrectUsage(\n+            \"If you specify 'all' this has to be the only classifier. Found ['\" + String.join(\"','\", classifiers) + \"'] as well.\");\n+      }\n+    } else\n+    {\n+      // Add default classifiers that are available\n+      if (classifiers.isEmpty())\n+      {\n+        addDefaultClassifiers(availableClassifiers, classifiers);\n+      }\n+\n+      validateClassifiers(availableClassifiers, classifiers);\n     }\n+    return Optional.of(classifiers);\n+  }\n \n-    private void validateClassifiers( Set<String> availableClassifiers, Set<String> orphans ) throws IncorrectUsage\n+  private void validateClassifiers(Set<String> availableClassifiers, Set<String> orphans) throws IncorrectUsage\n+  {\n+    for (String classifier : orphans)\n     {\n-        for ( String classifier : orphans )\n-        {\n-            if ( !availableClassifiers.contains( classifier ) )\n-            {\n-                throw new IncorrectUsage( \"Unknown classifier: \" + classifier );\n-            }\n-        }\n+      if (!availableClassifiers.contains(classifier))\n+      {\n+        throw new IncorrectUsage(\"Unknown classifier: \" + classifier);\n+      }\n     }\n+  }\n \n-    private void addDefaultClassifiers( Set<String> availableClassifiers, Set<String> orphans )\n+  private void addDefaultClassifiers(Set<String> availableClassifiers, Set<String> orphans)\n+  {\n+    for (String classifier : DEFAULT_CLASSIFIERS)\n     {\n-        for ( String classifier : DEFAULT_CLASSIFIERS )\n-        {\n-            if ( availableClassifiers.contains( classifier ) )\n-            {\n-                orphans.add( classifier );\n-            }\n-        }\n+      if (availableClassifiers.contains(classifier))\n+      {\n+        orphans.add(classifier);\n+      }\n     }\n+  }\n \n-    private void listClassifiers( Set<String> availableClassifiers )\n+  private void listClassifiers(Set<String> availableClassifiers)\n+  {\n+    out.println(\"All available classifiers:\");\n+    for (String classifier : availableClassifiers)\n     {\n-        out.println( \"All available classifiers:\" );\n-        for ( String classifier : availableClassifiers )\n-        {\n-            out.printf( \"  %-10s %s%n\", classifier, describeClassifier( classifier ) );\n-        }\n+      out.printf(\"  %-10s %s%n\", classifier, describeClassifier(classifier));\n     }\n+  }\n \n-    private DiagnosticsReporter createAndRegisterSources() throws CommandFailed\n-    {\n-        DiagnosticsReporter reporter = new DiagnosticsReporter();\n-        File configFile = configDir.resolve( Config.DEFAULT_CONFIG_FILE_NAME ).toFile();\n-        Config config = getConfig( configFile );\n+  private DiagnosticsReporter createAndRegisterSources() throws CommandFailed\n+  {\n+    DiagnosticsReporter reporter = new DiagnosticsReporter();\n+    File configFile = configDir.resolve(Config.DEFAULT_CONFIG_FILE_NAME).toFile();\n+    Config config = getConfig(configFile);\n+\n+    File storeDirectory = config.get(database_path);\n+\n+    reporter.registerAllOfflineProviders(config, storeDirectory, this.fs);\n+\n+    // Register sources provided by this tool\n+    reporter.registerSource(\"config\",\n+        DiagnosticsReportSources.newDiagnosticsFile(\"neo4j.conf\", fs, configFile));\n+\n+    reporter.registerSource(\"ps\", runningProcesses());\n \n-        File storeDirectory = config.get( database_path );\n+    // Online connection\n+    registerJMXSources(reporter);\n+    return reporter;\n+  }\n \n-        reporter.registerAllOfflineProviders( config, storeDirectory, this.fs );\n+  private void registerJMXSources(DiagnosticsReporter reporter)\n+  {\n+    Optional<JmxDump> jmxDump;\n+    if (pid == NO_PID)\n+    {\n+      jmxDump = jmxDumper.getJMXDump();\n+    } else\n+    {\n+      jmxDump = jmxDumper.getJMXDump(pid);\n+    }\n+    jmxDump.ifPresent(jmx ->\n+    {\n+      reporter.registerSource(\"threads\", jmx.threadDump());\n+      reporter.registerSource(\"heap\", jmx.heapDump());\n+      reporter.registerSource(\"sysprop\", jmx.systemProperties());\n+      reporter.registerSource(\"env\", jmx.environmentVariables());\n+      reporter.registerSource(\"activetxs\", jmx.listTransactions());\n+    });\n+  }\n+\n+  private Config getConfig(File configFile) throws CommandFailed\n+  {\n+    if (!fs.fileExists(configFile))\n+    {\n+      throw new CommandFailed(\"Unable to find config file, tried: \" + configFile.getAbsolutePath());\n+    }\n+    return Config.fromFile(configFile).withHome(homeDir).withConnectorsDisabled().build();\n+  }\n \n-        // Register sources provided by this tool\n-        reporter.registerSource( \"config\",\n-                DiagnosticsReportSources.newDiagnosticsFile( \"neo4j.conf\", fs, configFile ) );\n+  static String describeClassifier(String classifier)\n+  {\n+    switch (classifier)\n+    {\n+      case \"logs\":\n+        return \"include log files\";\n+      case \"config\":\n+        return \"include configuration file\";\n+      case \"plugins\":\n+        return \"include a view of the plugin directory\";\n+      case \"tree\":\n+        return \"include a view of the tree structure of the data directory\";\n+      case \"tx\":\n+        return \"include transaction logs\";\n+      case \"metrics\":\n+        return \"include metrics\";\n+      case \"threads\":\n+        return \"include a thread dump of the running instance\";\n+      case \"heap\":\n+        return \"include a heap dump\";\n+      case \"env\":\n+        return \"include a list of all environment variables\";\n+      case \"sysprop\":\n+        return \"include a list of java system properties\";\n+      case \"raft\":\n+        return \"include the raft log\";\n+      case \"ccstate\":\n+        return \"include the current cluster state\";\n+      case \"activetxs\":\n+        return \"include the output of dbms.listTransactions()\";\n+      case \"ps\":\n+        return \"include a list of running processes\";\n+      default:\n+    }\n+    throw new IllegalArgumentException(\"Unknown classifier: \" + classifier);\n+  }\n \n-        reporter.registerSource( \"ps\", runningProcesses() );\n+  private static DiagnosticsReportSource runningProcesses()\n+  {\n+    return DiagnosticsReportSources.newDiagnosticsString(\"ps.csv\", () ->\n+    {\n+      List<ProcessInfo> processesList = JProcesses.getProcessList();\n+\n+      StringBuilder sb = new StringBuilder();\n+      sb.append(escapeCsv(\"Process PID\")).append(',')\n+          .append(escapeCsv(\"Process Name\")).append(',')\n+          .append(escapeCsv(\"Process Time\")).append(',')\n+          .append(escapeCsv(\"User\")).append(',')\n+          .append(escapeCsv(\"Virtual Memory\")).append(',')\n+          .append(escapeCsv(\"Physical Memory\")).append(',')\n+          .append(escapeCsv(\"CPU usage\")).append(',')\n+          .append(escapeCsv(\"Start Time\")).append(',')\n+          .append(escapeCsv(\"Priority\")).append(',')\n+          .append(escapeCsv(\"Full command\")).append('\\n');\n+\n+      for (final ProcessInfo processInfo : processesList)\n+      {\n+        sb.append(processInfo.getPid()).append(',')\n+            .append(escapeCsv(processInfo.getName())).append(',')\n+            .append(processInfo.getTime()).append(',')\n+            .append(escapeCsv(processInfo.getUser())).append(',')\n+            .append(processInfo.getVirtualMemory()).append(',')\n+            .append(processInfo.getPhysicalMemory()).append(',')\n+            .append(processInfo.getCpuUsage()).append(',')\n+            .append(processInfo.getStartTime()).append(',')\n+            .append(processInfo.getStartTime()).append(',')\n+            .append(escapeCsv(processInfo.getCommand())).append('\\n');\n+      }\n+      return sb.toString();\n+    });\n+  }\n+\n+  /**\n+   * Helper class to format output of {@link Usage}. Parsing is done manually in this command module.\n+   */\n+  public static class OptionalListArgument extends MandatoryNamedArg\n+  {\n+    OptionalListArgument()\n+    {\n+      super(\"list\", \"\", \"List all available classifiers\");\n+    }\n \n-        // Online connection\n-        registerJMXSources( reporter );\n-        return reporter;\n+    @Override\n+    public String optionsListing()\n+    {\n+      return \"--list\";\n     }\n \n-    private void registerJMXSources( DiagnosticsReporter reporter )\n+    @Override\n+    public String usage()\n+    {\n+      return \"[--list]\";\n+    }\n+  }\n+\n+  /**\n+   * Helper class to format output of {@link Usage}. Parsing is done manually in this command module.\n+   */\n+  public static class OptionalVerboseArgument extends MandatoryNamedArg\n+  {\n+    OptionalVerboseArgument()\n     {\n-        Optional<JmxDump> jmxDump;\n-        if ( pid == NO_PID )\n-        {\n-            jmxDump = jmxDumper.getJMXDump();\n-        }\n-        else\n-        {\n-            jmxDump = jmxDumper.getJMXDump( pid );\n-        }\n-        jmxDump.ifPresent( jmx ->\n-        {\n-            reporter.registerSource( \"threads\", jmx.threadDump() );\n-            reporter.registerSource( \"heap\", jmx.heapDump() );\n-            reporter.registerSource( \"sysprop\", jmx.systemProperties() );\n-            reporter.registerSource( \"env\", jmx.environmentVariables() );\n-            reporter.registerSource( \"activetxs\", jmx.listTransactions() );\n-        } );\n+      super(\"verbose\", \"\", \"More verbose error messages\");\n     }\n \n-    private Config getConfig( File configFile ) throws CommandFailed\n+    @Override\n+    public String optionsListing()\n     {\n-        if ( !fs.fileExists( configFile ) )\n-        {\n-            throw new CommandFailed( \"Unable to find config file, tried: \" + configFile.getAbsolutePath() );\n-        }\n-        return Config.fromFile( configFile ).withHome( homeDir ).withConnectorsDisabled().build();\n+      return \"--verbose\";\n     }\n \n-    static String describeClassifier( String classifier )\n+    @Override\n+    public String usage()\n+    {\n+      return \"[--verbose]\";\n+    }\n+  }\n+\n+  /**\n+   * Helper class to format output of {@link Usage}. Parsing is done manually in this command module.\n+   */\n+  public static class OptionalForceArgument extends MandatoryNamedArg\n+  {\n+    OptionalForceArgument()\n     {\n-        switch ( classifier )\n-        {\n-        case \"logs\":\n-            return \"include log files\";\n-        case \"config\":\n-            return \"include configuration file\";\n-        case \"plugins\":\n-            return \"include a view of the plugin directory\";\n-        case \"tree\":\n-            return \"include a view of the tree structure of the data directory\";\n-        case \"tx\":\n-            return \"include transaction logs\";\n-        case \"metrics\":\n-            return \"include metrics\";\n-        case \"threads\":\n-            return \"include a thread dump of the running instance\";\n-        case \"heap\":\n-            return \"include a heap dump\";\n-        case \"env\":\n-            return \"include a list of all environment variables\";\n-        case \"sysprop\":\n-            return \"include a list of java system properties\";\n-        case \"raft\":\n-            return \"include the raft log\";\n-        case \"ccstate\":\n-            return \"include the current cluster state\";\n-        case \"activetxs\":\n-            return \"include the output of dbms.listTransactions()\";\n-        case \"ps\":\n-            return \"include a list of running processes\";\n-        default:\n-        }\n-        throw new IllegalArgumentException( \"Unknown classifier: \" + classifier );\n+      super(\"force\", \"\", \"Ignore disk full warning\");\n     }\n \n-    private static DiagnosticsReportSource runningProcesses()\n+    @Override\n+    public String optionsListing()\n     {\n-        return DiagnosticsReportSources.newDiagnosticsString( \"ps.csv\", () ->\n-        {\n-            List<ProcessInfo> processesList = JProcesses.getProcessList();\n-\n-            StringBuilder sb = new StringBuilder();\n-            sb.append( escapeCsv( \"Process PID\" ) ).append( ',' )\n-                    .append( escapeCsv( \"Process Name\" ) ).append( ',' )\n-                    .append( escapeCsv( \"Process Time\" ) ).append( ',' )\n-                    .append( escapeCsv( \"User\" ) ).append( ',' )\n-                    .append( escapeCsv( \"Virtual Memory\" ) ).append( ',' )\n-                    .append( escapeCsv( \"Physical Memory\" ) ).append( ',' )\n-                    .append( escapeCsv( \"CPU usage\" ) ).append( ',' )\n-                    .append( escapeCsv( \"Start Time\" ) ).append( ',' )\n-                    .append( escapeCsv( \"Priority\" ) ).append( ',' )\n-                    .append( escapeCsv( \"Full command\" ) ).append( '\\n' );\n-\n-            for ( final ProcessInfo processInfo : processesList )\n-            {\n-                sb.append( processInfo.getPid() ).append( ',' )\n-                        .append( escapeCsv( processInfo.getName() ) ).append( ',' )\n-                        .append( processInfo.getTime() ).append( ',' )\n-                        .append( escapeCsv( processInfo.getUser() ) ).append( ',' )\n-                        .append( processInfo.getVirtualMemory() ).append( ',' )\n-                        .append( processInfo.getPhysicalMemory() ).append( ',' )\n-                        .append( processInfo.getCpuUsage() ).append( ',' )\n-                        .append( processInfo.getStartTime() ).append( ',' )\n-                        .append( processInfo.getStartTime() ).append( ',' )\n-                        .append( escapeCsv( processInfo.getCommand() ) ).append( '\\n' );\n-            }\n-            return sb.toString();\n-        } );\n+      return \"--force\";\n     }\n \n-    /**\n-     * Helper class to format output of {@link Usage}. Parsing is done manually in this command module.\n-     */\n-    public static class OptionalListArgument extends MandatoryNamedArg\n+    @Override\n+    public String usage()\n     {\n-        OptionalListArgument()\n-        {\n-            super( \"list\", \"\", \"List all available classifiers\" );\n-        }\n-\n-        @Override\n-        public String optionsListing()\n-        {\n-            return \"--list\";\n-        }\n-\n-        @Override\n-        public String usage()\n-        {\n-            return \"[--list]\";\n-        }\n+      return \"[--force]\";\n     }\n+  }\n \n-    /**\n-     * Helper class to format output of {@link Usage}. Parsing is done manually in this command module.\n-     */\n-    public static class OptionalVerboseArgument extends MandatoryNamedArg\n+  /**\n+   * Helper class to format output of {@link Usage}. Parsing is done manually in this command module.\n+   */\n+  public static class ClassifierFiltersArgument implements PositionalArgument\n+  {\n+    @Override\n+    public int position()\n     {\n-        OptionalVerboseArgument()\n-        {\n-            super( \"verbose\", \"\", \"More verbose error messages\" );\n-        }\n-\n-        @Override\n-        public String optionsListing()\n-        {\n-            return \"--verbose\";\n-        }\n-\n-        @Override\n-        public String usage()\n-        {\n-            return \"[--verbose]\";\n-        }\n+      return 1;\n     }\n \n-    /**\n-     * Helper class to format output of {@link Usage}. Parsing is done manually in this command module.\n-     */\n-    public static class OptionalForceArgument extends MandatoryNamedArg\n+    @Override\n+    public String usage()\n     {\n-        OptionalForceArgument()\n-        {\n-            super( \"force\", \"\", \"Ignore disk full warning\" );\n-        }\n-\n-        @Override\n-        public String optionsListing()\n-        {\n-            return \"--force\";\n-        }\n-\n-        @Override\n-        public String usage()\n-        {\n-            return \"[--force]\";\n-        }\n+      return \"[all] [<classifier1> <classifier2> ...]\";\n     }\n \n-    /**\n-     * Helper class to format output of {@link Usage}. Parsing is done manually in this command module.\n-     */\n-    public static class ClassifierFiltersArgument implements PositionalArgument\n+    @Override\n+    public String parse(Args parsedArgs)\n     {\n-        @Override\n-        public int position()\n-        {\n-            return 1;\n-        }\n-\n-        @Override\n-        public String usage()\n-        {\n-            return \"[all] [<classifier1> <classifier2> ...]\";\n-        }\n-\n-        @Override\n-        public String parse( Args parsedArgs )\n-        {\n-            throw new UnsupportedOperationException( \"no parser exists\" );\n-        }\n+      throw new UnsupportedOperationException(\"no parser exists\");\n     }\n+  }\n }\n",
            "diff_size": 554
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "66",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 203).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 269).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "186",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "326",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 523).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "329",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 554).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/136/DiagnosticsReportCommand.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/136/DiagnosticsReportCommand.java\nindex 212cde38d68..31114ca14fb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/136/DiagnosticsReportCommand.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/136/DiagnosticsReportCommand.java\n@@ -63,20 +63,13 @@ import static org.neo4j.graphdb.factory.GraphDatabaseSettings.database_path;\n \n public class DiagnosticsReportCommand implements AdminCommand\n {\n-    private static final OptionalNamedArg destinationArgument =\n-            new OptionalCanonicalPath( \"to\", System.getProperty( \"java.io.tmpdir\" ), \"reports\" + File.separator,\n-                    \"Destination directory for reports\" );\n-    public static final String PID_KEY = \"pid\";\n+    private static final OptionalNamedArg destinationArgument = new OptionalCanonicalPath( \"to\", System.getProperty( \"java.io.tmpdir\" ), \"reports\" + File.separator, \"Destination directory for reports\" );\n+\n+public static final String PID_KEY = \"pid\";\n     private static final long NO_PID = 0;\n-    private static final Arguments arguments = new Arguments()\n-            .withArgument( new OptionalListArgument() )\n-            .withArgument( destinationArgument )\n-            .withArgument( new OptionalVerboseArgument() )\n-            .withArgument( new OptionalForceArgument() )\n-            .withArgument( new OptionalNamedArg( PID_KEY, \"1234\", \"\", \"Specify process id of running neo4j instance\" ) )\n-            .withPositionalArgument( new ClassifierFiltersArgument() );\n-\n-    private final Path homeDir;\n+    private static final Arguments arguments = new Arguments().withArgument( new OptionalListArgument() ).withArgument( destinationArgument )\n+            .withArgument( new OptionalVerboseArgument() ).withArgument( new OptionalForceArgument() ).withArgument( new OptionalNamedArg( PID_KEY, \"1234\", \"\", \"Specify process id of running neo4j instance\" ) ).withPositionalArgument( new ClassifierFiltersArgument() );\n+private final Path homeDir;\n     private final Path configDir;\n     static final String[] DEFAULT_CLASSIFIERS = new String[]{\"logs\", \"config\", \"plugins\", \"tree\", \"metrics\", \"threads\", \"env\", \"sysprop\", \"ps\"};\n \n@@ -85,9 +78,8 @@ public class DiagnosticsReportCommand implements AdminCommand\n     private final PrintStream out;\n     private final FileSystemAbstraction fs;\n     private final PrintStream err;\n-    private static final DateTimeFormatter filenameDateTimeFormatter =\n-            new DateTimeFormatterBuilder().appendPattern( \"yyyy-MM-dd_HHmmss\" ).toFormatter();\n-    private long pid;\n+    private static final DateTimeFormatter filenameDateTimeFormatter = new DateTimeFormatterBuilder().appendPattern( \"yyyy-MM-dd_HHmmss\" ).toFormatter();\n+private long pid;\n \n     DiagnosticsReportCommand( Path homeDir, Path configDir, OutsideWorld outsideWorld )\n     {\n@@ -111,8 +103,7 @@ public class DiagnosticsReportCommand implements AdminCommand\n         jmxDumper = new JMXDumper( homeDir, fs, out, err, verbose );\n         pid = parsePid( args );\n         boolean force = args.has( \"force\" );\n-\n-        DiagnosticsReporter reporter = createAndRegisterSources();\n+DiagnosticsReporter reporter = createAndRegisterSources();\n \n         Optional<Set<String>> classifiers = parseAndValidateArguments( args, reporter );\n         if ( !classifiers.isPresent() )\n@@ -170,7 +161,8 @@ public class DiagnosticsReportCommand implements AdminCommand\n         {\n             progress = new NonInteractiveProgress( out, verbose );\n         }\n-        return progress;\n+\n+return progress;\n     }\n \n     private Optional<Set<String>> parseAndValidateArguments( Args args, DiagnosticsReporter reporter ) throws IncorrectUsage\n@@ -191,9 +183,8 @@ public class DiagnosticsReportCommand implements AdminCommand\n             if ( classifiers.size() != 1 )\n             {\n                 classifiers.remove( \"all\" );\n-                throw new IncorrectUsage(\n-                        \"If you specify 'all' this has to be the only classifier. Found ['\" + String.join( \"','\", classifiers ) + \"'] as well.\" );\n-            }\n+                throw new IncorrectUsage( \"If you specify 'all' this has to be the only classifier. Found ['\" + String.join( \"','\", classifiers ) + \"'] as well.\" );\n+    }\n         }\n         else\n         {\n@@ -205,7 +196,8 @@ public class DiagnosticsReportCommand implements AdminCommand\n \n             validateClassifiers( availableClassifiers, classifiers );\n         }\n-        return Optional.of( classifiers );\n+\n+return Optional.of( classifiers );\n     }\n \n     private void validateClassifiers( Set<String> availableClassifiers, Set<String> orphans ) throws IncorrectUsage\n@@ -244,16 +236,13 @@ public class DiagnosticsReportCommand implements AdminCommand\n         DiagnosticsReporter reporter = new DiagnosticsReporter();\n         File configFile = configDir.resolve( Config.DEFAULT_CONFIG_FILE_NAME ).toFile();\n         Config config = getConfig( configFile );\n-\n-        File storeDirectory = config.get( database_path );\n-\n-        reporter.registerAllOfflineProviders( config, storeDirectory, this.fs );\n+File storeDirectory = config.get( database_path );\n+reporter.registerAllOfflineProviders( config, storeDirectory, this.fs );\n \n         // Register sources provided by this tool\n         reporter.registerSource( \"config\",\n                 DiagnosticsReportSources.newDiagnosticsFile( \"neo4j.conf\", fs, configFile ) );\n-\n-        reporter.registerSource( \"ps\", runningProcesses() );\n+reporter.registerSource( \"ps\", runningProcesses() );\n \n         // Online connection\n         registerJMXSources( reporter );\n@@ -287,7 +276,8 @@ public class DiagnosticsReportCommand implements AdminCommand\n         {\n             throw new CommandFailed( \"Unable to find config file, tried: \" + configFile.getAbsolutePath() );\n         }\n-        return Config.fromFile( configFile ).withHome( homeDir ).withConnectorsDisabled().build();\n+\n+return Config.fromFile( configFile ).withHome( homeDir ).withConnectorsDisabled().build();\n     }\n \n     static String describeClassifier( String classifier )\n@@ -332,33 +322,14 @@ public class DiagnosticsReportCommand implements AdminCommand\n         return DiagnosticsReportSources.newDiagnosticsString( \"ps.csv\", () ->\n         {\n             List<ProcessInfo> processesList = JProcesses.getProcessList();\n-\n-            StringBuilder sb = new StringBuilder();\n-            sb.append( escapeCsv( \"Process PID\" ) ).append( ',' )\n-                    .append( escapeCsv( \"Process Name\" ) ).append( ',' )\n-                    .append( escapeCsv( \"Process Time\" ) ).append( ',' )\n-                    .append( escapeCsv( \"User\" ) ).append( ',' )\n-                    .append( escapeCsv( \"Virtual Memory\" ) ).append( ',' )\n-                    .append( escapeCsv( \"Physical Memory\" ) ).append( ',' )\n-                    .append( escapeCsv( \"CPU usage\" ) ).append( ',' )\n-                    .append( escapeCsv( \"Start Time\" ) ).append( ',' )\n-                    .append( escapeCsv( \"Priority\" ) ).append( ',' )\n-                    .append( escapeCsv( \"Full command\" ) ).append( '\\n' );\n-\n-            for ( final ProcessInfo processInfo : processesList )\n+StringBuilder sb = new StringBuilder();\n+            sb.append( escapeCsv( \"Process PID\" ) ).append( ',' ).append( escapeCsv( \"Process Name\" ) ).append( ',' ).append( escapeCsv( \"Process Time\" ) ).append( ',' ).append( escapeCsv( \"User\" ) ).append( ',' ).append( escapeCsv( \"Virtual Memory\" ) ).append( ',' ).append( escapeCsv( \"Physical Memory\" ) ).append( ',' ).append( escapeCsv( \"CPU usage\" ) ).append( ',' ).append( escapeCsv( \"Start Time\" ) ).append( ',' ).append( escapeCsv( \"Priority\" ) ).append( ',' ).append( escapeCsv( \"Full command\" ) ).append( '\\n' );\n+for ( final ProcessInfo processInfo : processesList )\n             {\n-                sb.append( processInfo.getPid() ).append( ',' )\n-                        .append( escapeCsv( processInfo.getName() ) ).append( ',' )\n-                        .append( processInfo.getTime() ).append( ',' )\n-                        .append( escapeCsv( processInfo.getUser() ) ).append( ',' )\n-                        .append( processInfo.getVirtualMemory() ).append( ',' )\n-                        .append( processInfo.getPhysicalMemory() ).append( ',' )\n-                        .append( processInfo.getCpuUsage() ).append( ',' )\n-                        .append( processInfo.getStartTime() ).append( ',' )\n-                        .append( processInfo.getStartTime() ).append( ',' )\n-                        .append( escapeCsv( processInfo.getCommand() ) ).append( '\\n' );\n+                sb.append( processInfo.getPid() ).append( ',' ).append( escapeCsv( processInfo.getName() ) ).append( ',' ).append( processInfo.getTime() ).append( ',' ).append( escapeCsv( processInfo.getUser() ) ).append( ',' ).append( processInfo.getVirtualMemory() ).append( ',' ).append( processInfo.getPhysicalMemory() ).append( ',' ).append( processInfo.getCpuUsage() ).append( ',' ).append( processInfo.getStartTime() ).append( ',' ).append( processInfo.getStartTime() ).append( ',' ).append( escapeCsv( processInfo.getCommand() ) ).append( '\\n' );\n             }\n-            return sb.toString();\n+\n+return sb.toString();\n         } );\n     }\n \n@@ -454,4 +425,4 @@ public class DiagnosticsReportCommand implements AdminCommand\n             throw new UnsupportedOperationException( \"no parser exists\" );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 60
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}