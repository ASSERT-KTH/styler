{
    "project_name": "DaGeRe-peass",
    "error_id": "30",
    "information": {
        "errors": [
            {
                "line": "123",
                "severity": "error",
                "message": "Line is longer than 200 characters (found 206).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\t\t\t\t\tif (newFileIterator.hasNext()) {\n\t\t\t\t\t\tfinal File newFile = newFileIterator.next();\n\t\t\t\t\t\tfinal Iterator<File> oldFileIterator = FileUtils.listFiles(folders.getLastSources(), new WildcardFileFilter(onlyClassName + \".java\"), TrueFileFilter.INSTANCE)\n\t\t\t\t\t\t\t\t.iterator();\n\t\t\t\t\t\tif (oldFileIterator.hasNext()) {\n\t\t\t\t\t\t\tfinal File oldFile = oldFileIterator.next();",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "123",
                    "column": "68",
                    "severity": "error",
                    "message": "'>' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "123",
                    "column": "115",
                    "severity": "error",
                    "message": "'.' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                },
                {
                    "line": "123",
                    "column": "132",
                    "severity": "error",
                    "message": "'(' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                },
                {
                    "line": "123",
                    "column": "173",
                    "severity": "error",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/30/ChangeManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler/30/ChangeManager.java\nindex d95afe33957..cb72e130f71 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/30/ChangeManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler/30/ChangeManager.java\n@@ -120,8 +120,9 @@ public class ChangeManager {\n \t\t\t\t\tfinal Iterator<File> newFileIterator = FileUtils.listFiles(src, new WildcardFileFilter(onlyClassName + \".java\"), TrueFileFilter.INSTANCE).iterator();\n \t\t\t\t\tif (newFileIterator.hasNext()) {\n \t\t\t\t\t\tfinal File newFile = newFileIterator.next();\n-\t\t\t\t\t\tfinal Iterator<File> oldFileIterator = FileUtils.listFiles(folders.getLastSources(), new WildcardFileFilter(onlyClassName + \".java\"), TrueFileFilter.INSTANCE)\n-\t\t\t\t\t\t\t\t.iterator();\n+\t\t\t\t\t\tfinalIterator<File > oldFileIterator = FileUtils.listFiles(folders. getLastSources (), new WildcardFileFilter(onlyClassName +\".java\"),\n+\t\t\t\t\t\t\t\tTrueFileFilter.INSTANCE)\n+\t\t\t\t\t\t\t\t\t.iteratoriterator();\n \t\t\t\t\t\tif (oldFileIterator.hasNext()) {\n \t\t\t\t\t\t\tfinal File oldFile = oldFileIterator.next();\n \t\t\t\t\t\t\tLOG.info(\"Vergleiche {}\", newFile, oldFile);\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "105",
                    "column": "110",
                    "severity": "error",
                    "message": "';' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyForIteratorPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/30/ChangeManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/intellij/30/ChangeManager.java\nindex d95afe33957..e0ad6348c38 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/30/ChangeManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/intellij/30/ChangeManager.java\n@@ -29,137 +29,136 @@ import de.peran.vcs.VersionControlSystem;\n \n /**\n  * Determines whether a file has a change, and whether this change is class-wide or only affecting a method.\n- * \n- * @author reichelt\n  *\n+ * @author reichelt\n  */\n public class ChangeManager {\n \n-\tprivate static final Logger LOG = LogManager.getLogger(ChangeManager.class);\n+  private static final Logger LOG = LogManager.getLogger(ChangeManager.class);\n \n-\tprivate final PeASSFolders folders;\n-//\tprivate final File lastSourcesFolder;\n-\tprivate final VersionControlSystem vcs;\n+  private final PeASSFolders folders;\n+  //\tprivate final File lastSourcesFolder;\n+  private final VersionControlSystem vcs;\n \n-\tpublic ChangeManager(final File projectFolder, final File moduleFolder) {\n-\t\tthis.folders = new PeASSFolders(projectFolder);\n-\t\t// this.moduleFolder = moduleFolder;\n+  public ChangeManager(final File projectFolder, final File moduleFolder) {\n+    this.folders = new PeASSFolders(projectFolder);\n+    // this.moduleFolder = moduleFolder;\n //\t\tPeASSFolders.setProjectFolder(projectFolder);\n-\t\tvcs = VersionControlSystem.getVersionControlSystem(projectFolder);\n-\t}\n+    vcs = VersionControlSystem.getVersionControlSystem(projectFolder);\n+  }\n \n-\tpublic ChangeManager(final File projectFolder) {\n-\t   this.folders = new PeASSFolders(projectFolder);\n-\t\t// this.moduleFolder = projectFolder;\n+  public ChangeManager(final File projectFolder) {\n+    this.folders = new PeASSFolders(projectFolder);\n+    // this.moduleFolder = projectFolder;\n //\t\tPeASSFolders.setProjectFolder(projectFolder);\n-\t\tvcs = VersionControlSystem.getVersionControlSystem(projectFolder);\n+    vcs = VersionControlSystem.getVersionControlSystem(projectFolder);\n //\t\tlastSourcesFolder = PeASSFolders.getLastSources();\n-\t}\n-\n-\t/**\n-\t * Returns a set of the full qualified names of all classes that have been changed in the current revision.\n-\t * \n-\t * @return full qualified names of all classes that have been changed in the current revision.\n-\t */\n-\tprivate List<ChangedEntity> getChangedClasses() {\n-\t\tfinal VersionDiff diff;\n-\t\tif (vcs.equals(VersionControlSystem.SVN)) {\n-\t\t\tdiff = new SVNDiffLoader().getChangedClasses(folders.getProjectFolder());\n-\t\t} else if (vcs.equals(VersionControlSystem.GIT)) {\n-\t\t\tdiff = GitUtils.getChangedClasses(folders.getProjectFolder());\n-\t\t} else {\n-\t\t\tthrow new RuntimeException(\".git or .svn not there - Can only happen if .git or .svn is deleted between constructor and method call \");\n-\t\t}\n-\n-\t\tLOG.info(\"Changed classes: \" + diff.getChangedClasses().size());\n-\t\treturn diff.getChangedClasses();\n-\t}\n-\n-\tpublic void saveOldClasses() {\n-\t\ttry {\n-\t\t\tif (folders.getLastSources().exists()) {\n-\t\t\t\tFileUtils.deleteDirectory(folders.getLastSources());\n-\t\t\t}\n-\t\t\tfolders.getLastSources().mkdir();\n-\t\t\tfor (final File module : MavenPomUtil.getModules(new File(folders.getProjectFolder(), \"pom.xml\"))) {\n-\t\t\t\tfinal String moduleName = module.getName();\n-\t\t\t\tFileUtils.copyDirectory(new File(module, \"src\"), new File(folders.getLastSources(), moduleName + File.separator + \"main\"));\n-\t\t\t}\n-\t\t} catch (final IOException e) {\n-\t\t\te.printStackTrace();\n-\t\t} catch (final XmlPullParserException e) {\n-\t\t\te.printStackTrace();\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Returns all changed classes with the corresponding changed methods. If the set of a class is empty, the whole class was changed and all tests using any method of the class need to be\n-\t * re-evaluated.\n-\t * \n-\t * @return\n-\t */\n-\tpublic Map<ChangedEntity, Set<String>> getChanges() {\n-\t\tfinal Map<ChangedEntity, Set<String>> changedClassesMethods = new TreeMap<>();\n-\t\tfinal List<ChangedEntity> changedClasses = getChangedClasses();\n-\t\tLOG.debug(\"Before Cleaning: {}\", changedClasses);\n-\t\tif (folders.getLastSources().exists()) {\n-\t\t\tfor (final Iterator<ChangedEntity> clazzIterator = changedClasses.iterator(); clazzIterator.hasNext();) {\n-\t\t\t\tfinal ChangedEntity clazz = clazzIterator.next();\n-\t\t\t\tfinal String onlyClassName = clazz.getJavaClazzName().substring(clazz.getJavaClazzName().lastIndexOf(\".\") + 1);\n-\t\t\t\tfinal File src;\n-\t\t\t\tif (clazz.getModule().length() > 0) {\n-\t\t\t\t\tfinal File moduleFolder = new File(folders.getProjectFolder(), clazz.getModule());\n-\t\t\t\t\tLOG.debug(\"Module: {}\", clazz.getModule());\n-\t\t\t\t\tsrc = new File(moduleFolder, \"src\");\n-\t\t\t\t} else {\n-\t\t\t\t\tsrc = new File(folders.getProjectFolder(), \"src\");\n-\t\t\t\t}\n-\n-\t\t\t\tLOG.debug(\"Suche nach {} in {}\", clazz.getJavaClazzName(), src);\n-\t\t\t\ttry {\n-\t\t\t\t\tfinal Iterator<File> newFileIterator = FileUtils.listFiles(src, new WildcardFileFilter(onlyClassName + \".java\"), TrueFileFilter.INSTANCE).iterator();\n-\t\t\t\t\tif (newFileIterator.hasNext()) {\n-\t\t\t\t\t\tfinal File newFile = newFileIterator.next();\n-\t\t\t\t\t\tfinal Iterator<File> oldFileIterator = FileUtils.listFiles(folders.getLastSources(), new WildcardFileFilter(onlyClassName + \".java\"), TrueFileFilter.INSTANCE)\n-\t\t\t\t\t\t\t\t.iterator();\n-\t\t\t\t\t\tif (oldFileIterator.hasNext()) {\n-\t\t\t\t\t\t\tfinal File oldFile = oldFileIterator.next();\n-\t\t\t\t\t\t\tLOG.info(\"Vergleiche {}\", newFile, oldFile);\n-\t\t\t\t\t\t\tif (newFile.exists()) {\n-\t\t\t\t\t\t\t\tfinal ClazzChangeData changeData = FileComparisonUtil.getChangedMethods(newFile, oldFile);\n-\t\t\t\t\t\t\t\tif (!changeData.isChange()) {\n-\t\t\t\t\t\t\t\t\tclazzIterator.remove();\n-\t\t\t\t\t\t\t\t\tLOG.debug(\"Dateien gleich: {}\", clazz);\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tif (changeData.isOnlyMethodChange()) {\n-\t\t\t\t\t\t\t\t\t\tchangedClassesMethods.put(clazz, changeData.getChangedMethods());\n-\t\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\t\tchangedClassesMethods.put(clazz, new HashSet<>());\n-\t\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\tLOG.info(\"Class did not exist before: {}\", clazz);\n-\t\t\t\t\t\t\tchangedClassesMethods.put(clazz, new HashSet<>());\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\n-\t\t\t\t} catch (final ParseException pe) {\n-\t\t\t\t\tLOG.info(\"Class is unparsable for java parser, so to be sure it is added to the changed classes: {}\", clazz);\n-\t\t\t\t\tchangedClassesMethods.put(clazz, new HashSet<>());\n-\t\t\t\t\tpe.printStackTrace();\n-\t\t\t\t} catch (final IOException e) {\n-\t\t\t\t\tLOG.info(\"Class is unparsable for java parser, so to be sure it is added to the changed classes: {}\", clazz);\n-\t\t\t\t\tchangedClassesMethods.put(clazz, new HashSet<>());\n-\t\t\t\t\te.printStackTrace();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {\n-\t\t\tLOG.info(\"Kein Ordner f\u00fcr alte Dateien vorhanden\");\n-\t\t}\n-\t\tLOG.debug(\"Nach dem Bereinigen: {}\", changedClassesMethods);\n-\n-\t\treturn changedClassesMethods;\n-\t}\n+  }\n+\n+  /**\n+   * Returns a set of the full qualified names of all classes that have been changed in the current revision.\n+   *\n+   * @return full qualified names of all classes that have been changed in the current revision.\n+   */\n+  private List<ChangedEntity> getChangedClasses() {\n+    final VersionDiff diff;\n+    if (vcs.equals(VersionControlSystem.SVN)) {\n+      diff = new SVNDiffLoader().getChangedClasses(folders.getProjectFolder());\n+    } else if (vcs.equals(VersionControlSystem.GIT)) {\n+      diff = GitUtils.getChangedClasses(folders.getProjectFolder());\n+    } else {\n+      throw new RuntimeException(\".git or .svn not there - Can only happen if .git or .svn is deleted between constructor and method call \");\n+    }\n+\n+    LOG.info(\"Changed classes: \" + diff.getChangedClasses().size());\n+    return diff.getChangedClasses();\n+  }\n+\n+  public void saveOldClasses() {\n+    try {\n+      if (folders.getLastSources().exists()) {\n+        FileUtils.deleteDirectory(folders.getLastSources());\n+      }\n+      folders.getLastSources().mkdir();\n+      for (final File module : MavenPomUtil.getModules(new File(folders.getProjectFolder(), \"pom.xml\"))) {\n+        final String moduleName = module.getName();\n+        FileUtils.copyDirectory(new File(module, \"src\"), new File(folders.getLastSources(), moduleName + File.separator + \"main\"));\n+      }\n+    } catch (final IOException e) {\n+      e.printStackTrace();\n+    } catch (final XmlPullParserException e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Returns all changed classes with the corresponding changed methods. If the set of a class is empty, the whole class was changed and all tests using any method of the class need to be\n+   * re-evaluated.\n+   *\n+   * @return\n+   */\n+  public Map<ChangedEntity, Set<String>> getChanges() {\n+    final Map<ChangedEntity, Set<String>> changedClassesMethods = new TreeMap<>();\n+    final List<ChangedEntity> changedClasses = getChangedClasses();\n+    LOG.debug(\"Before Cleaning: {}\", changedClasses);\n+    if (folders.getLastSources().exists()) {\n+      for (final Iterator<ChangedEntity> clazzIterator = changedClasses.iterator(); clazzIterator.hasNext(); ) {\n+        final ChangedEntity clazz = clazzIterator.next();\n+        final String onlyClassName = clazz.getJavaClazzName().substring(clazz.getJavaClazzName().lastIndexOf(\".\") + 1);\n+        final File src;\n+        if (clazz.getModule().length() > 0) {\n+          final File moduleFolder = new File(folders.getProjectFolder(), clazz.getModule());\n+          LOG.debug(\"Module: {}\", clazz.getModule());\n+          src = new File(moduleFolder, \"src\");\n+        } else {\n+          src = new File(folders.getProjectFolder(), \"src\");\n+        }\n+\n+        LOG.debug(\"Suche nach {} in {}\", clazz.getJavaClazzName(), src);\n+        try {\n+          final Iterator<File> newFileIterator = FileUtils.listFiles(src, new WildcardFileFilter(onlyClassName + \".java\"), TrueFileFilter.INSTANCE).iterator();\n+          if (newFileIterator.hasNext()) {\n+            final File newFile = newFileIterator.next();\n+            final Iterator<File> oldFileIterator = FileUtils.listFiles(folders.getLastSources(), new WildcardFileFilter(onlyClassName + \".java\"), TrueFileFilter.INSTANCE)\n+                .iterator();\n+            if (oldFileIterator.hasNext()) {\n+              final File oldFile = oldFileIterator.next();\n+              LOG.info(\"Vergleiche {}\", newFile, oldFile);\n+              if (newFile.exists()) {\n+                final ClazzChangeData changeData = FileComparisonUtil.getChangedMethods(newFile, oldFile);\n+                if (!changeData.isChange()) {\n+                  clazzIterator.remove();\n+                  LOG.debug(\"Dateien gleich: {}\", clazz);\n+                } else {\n+                  if (changeData.isOnlyMethodChange()) {\n+                    changedClassesMethods.put(clazz, changeData.getChangedMethods());\n+                  } else {\n+                    changedClassesMethods.put(clazz, new HashSet<>());\n+                  }\n+                }\n+              }\n+            } else {\n+              LOG.info(\"Class did not exist before: {}\", clazz);\n+              changedClassesMethods.put(clazz, new HashSet<>());\n+            }\n+          }\n+\n+        } catch (final ParseException pe) {\n+          LOG.info(\"Class is unparsable for java parser, so to be sure it is added to the changed classes: {}\", clazz);\n+          changedClassesMethods.put(clazz, new HashSet<>());\n+          pe.printStackTrace();\n+        } catch (final IOException e) {\n+          LOG.info(\"Class is unparsable for java parser, so to be sure it is added to the changed classes: {}\", clazz);\n+          changedClassesMethods.put(clazz, new HashSet<>());\n+          e.printStackTrace();\n+        }\n+      }\n+    } else {\n+      LOG.info(\"Kein Ordner f\u00fcr alte Dateien vorhanden\");\n+    }\n+    LOG.debug(\"Nach dem Bereinigen: {}\", changedClassesMethods);\n+\n+    return changedClassesMethods;\n+  }\n \n }\n",
            "diff_size": 123
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/30/ChangeManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/codebuff/30/ChangeManager.java\nindex d95afe33957..eaba7e33d5b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/30/ChangeManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/codebuff/30/ChangeManager.java\n@@ -8,16 +8,13 @@ import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import java.util.TreeMap;\n-\n import org.apache.commons.io.FileUtils;\n import org.apache.commons.io.filefilter.TrueFileFilter;\n import org.apache.commons.io.filefilter.WildcardFileFilter;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.codehaus.plexus.util.xml.pull.XmlPullParserException;\n-\n import com.github.javaparser.ParseException;\n-\n import de.peran.dependency.analysis.FileComparisonUtil;\n import de.peran.dependency.analysis.data.ChangedEntity;\n import de.peran.dependency.analysis.data.ClazzChangeData;\n@@ -33,133 +30,129 @@ import de.peran.vcs.VersionControlSystem;\n  * @author reichelt\n  *\n  */\n-public class ChangeManager {\n-\n-\tprivate static final Logger LOG = LogManager.getLogger(ChangeManager.class);\n-\n-\tprivate final PeASSFolders folders;\n-//\tprivate final File lastSourcesFolder;\n-\tprivate final VersionControlSystem vcs;\n-\n-\tpublic ChangeManager(final File projectFolder, final File moduleFolder) {\n-\t\tthis.folders = new PeASSFolders(projectFolder);\n-\t\t// this.moduleFolder = moduleFolder;\n-//\t\tPeASSFolders.setProjectFolder(projectFolder);\n-\t\tvcs = VersionControlSystem.getVersionControlSystem(projectFolder);\n-\t}\n-\n-\tpublic ChangeManager(final File projectFolder) {\n-\t   this.folders = new PeASSFolders(projectFolder);\n-\t\t// this.moduleFolder = projectFolder;\n-//\t\tPeASSFolders.setProjectFolder(projectFolder);\n-\t\tvcs = VersionControlSystem.getVersionControlSystem(projectFolder);\n-//\t\tlastSourcesFolder = PeASSFolders.getLastSources();\n-\t}\n \n-\t/**\n-\t * Returns a set of the full qualified names of all classes that have been changed in the current revision.\n-\t * \n-\t * @return full qualified names of all classes that have been changed in the current revision.\n-\t */\n-\tprivate List<ChangedEntity> getChangedClasses() {\n-\t\tfinal VersionDiff diff;\n-\t\tif (vcs.equals(VersionControlSystem.SVN)) {\n-\t\t\tdiff = new SVNDiffLoader().getChangedClasses(folders.getProjectFolder());\n-\t\t} else if (vcs.equals(VersionControlSystem.GIT)) {\n-\t\t\tdiff = GitUtils.getChangedClasses(folders.getProjectFolder());\n-\t\t} else {\n-\t\t\tthrow new RuntimeException(\".git or .svn not there - Can only happen if .git or .svn is deleted between constructor and method call \");\n-\t\t}\n \n-\t\tLOG.info(\"Changed classes: \" + diff.getChangedClasses().size());\n-\t\treturn diff.getChangedClasses();\n-\t}\n-\n-\tpublic void saveOldClasses() {\n-\t\ttry {\n-\t\t\tif (folders.getLastSources().exists()) {\n-\t\t\t\tFileUtils.deleteDirectory(folders.getLastSources());\n-\t\t\t}\n-\t\t\tfolders.getLastSources().mkdir();\n-\t\t\tfor (final File module : MavenPomUtil.getModules(new File(folders.getProjectFolder(), \"pom.xml\"))) {\n-\t\t\t\tfinal String moduleName = module.getName();\n-\t\t\t\tFileUtils.copyDirectory(new File(module, \"src\"), new File(folders.getLastSources(), moduleName + File.separator + \"main\"));\n-\t\t\t}\n-\t\t} catch (final IOException e) {\n-\t\t\te.printStackTrace();\n-\t\t} catch (final XmlPullParserException e) {\n-\t\t\te.printStackTrace();\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Returns all changed classes with the corresponding changed methods. If the set of a class is empty, the whole class was changed and all tests using any method of the class need to be\n-\t * re-evaluated.\n-\t * \n-\t * @return\n-\t */\n-\tpublic Map<ChangedEntity, Set<String>> getChanges() {\n-\t\tfinal Map<ChangedEntity, Set<String>> changedClassesMethods = new TreeMap<>();\n-\t\tfinal List<ChangedEntity> changedClasses = getChangedClasses();\n-\t\tLOG.debug(\"Before Cleaning: {}\", changedClasses);\n-\t\tif (folders.getLastSources().exists()) {\n-\t\t\tfor (final Iterator<ChangedEntity> clazzIterator = changedClasses.iterator(); clazzIterator.hasNext();) {\n-\t\t\t\tfinal ChangedEntity clazz = clazzIterator.next();\n-\t\t\t\tfinal String onlyClassName = clazz.getJavaClazzName().substring(clazz.getJavaClazzName().lastIndexOf(\".\") + 1);\n-\t\t\t\tfinal File src;\n-\t\t\t\tif (clazz.getModule().length() > 0) {\n-\t\t\t\t\tfinal File moduleFolder = new File(folders.getProjectFolder(), clazz.getModule());\n-\t\t\t\t\tLOG.debug(\"Module: {}\", clazz.getModule());\n-\t\t\t\t\tsrc = new File(moduleFolder, \"src\");\n-\t\t\t\t} else {\n-\t\t\t\t\tsrc = new File(folders.getProjectFolder(), \"src\");\n-\t\t\t\t}\n-\n-\t\t\t\tLOG.debug(\"Suche nach {} in {}\", clazz.getJavaClazzName(), src);\n-\t\t\t\ttry {\n-\t\t\t\t\tfinal Iterator<File> newFileIterator = FileUtils.listFiles(src, new WildcardFileFilter(onlyClassName + \".java\"), TrueFileFilter.INSTANCE).iterator();\n-\t\t\t\t\tif (newFileIterator.hasNext()) {\n-\t\t\t\t\t\tfinal File newFile = newFileIterator.next();\n-\t\t\t\t\t\tfinal Iterator<File> oldFileIterator = FileUtils.listFiles(folders.getLastSources(), new WildcardFileFilter(onlyClassName + \".java\"), TrueFileFilter.INSTANCE)\n-\t\t\t\t\t\t\t\t.iterator();\n-\t\t\t\t\t\tif (oldFileIterator.hasNext()) {\n-\t\t\t\t\t\t\tfinal File oldFile = oldFileIterator.next();\n-\t\t\t\t\t\t\tLOG.info(\"Vergleiche {}\", newFile, oldFile);\n-\t\t\t\t\t\t\tif (newFile.exists()) {\n-\t\t\t\t\t\t\t\tfinal ClazzChangeData changeData = FileComparisonUtil.getChangedMethods(newFile, oldFile);\n-\t\t\t\t\t\t\t\tif (!changeData.isChange()) {\n-\t\t\t\t\t\t\t\t\tclazzIterator.remove();\n-\t\t\t\t\t\t\t\t\tLOG.debug(\"Dateien gleich: {}\", clazz);\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tif (changeData.isOnlyMethodChange()) {\n-\t\t\t\t\t\t\t\t\t\tchangedClassesMethods.put(clazz, changeData.getChangedMethods());\n-\t\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\t\tchangedClassesMethods.put(clazz, new HashSet<>());\n-\t\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\tLOG.info(\"Class did not exist before: {}\", clazz);\n-\t\t\t\t\t\t\tchangedClassesMethods.put(clazz, new HashSet<>());\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\n-\t\t\t\t} catch (final ParseException pe) {\n-\t\t\t\t\tLOG.info(\"Class is unparsable for java parser, so to be sure it is added to the changed classes: {}\", clazz);\n-\t\t\t\t\tchangedClassesMethods.put(clazz, new HashSet<>());\n-\t\t\t\t\tpe.printStackTrace();\n-\t\t\t\t} catch (final IOException e) {\n-\t\t\t\t\tLOG.info(\"Class is unparsable for java parser, so to be sure it is added to the changed classes: {}\", clazz);\n-\t\t\t\t\tchangedClassesMethods.put(clazz, new HashSet<>());\n-\t\t\t\t\te.printStackTrace();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {\n-\t\t\tLOG.info(\"Kein Ordner f\u00fcr alte Dateien vorhanden\");\n-\t\t}\n-\t\tLOG.debug(\"Nach dem Bereinigen: {}\", changedClassesMethods);\n-\n-\t\treturn changedClassesMethods;\n-\t}\n-\n-}\n+public class ChangeManager {\n+ private static final Logger LOG = LogManager.getLogger(ChangeManager.class);\n+ private final PeASSFolders folders;\n+// private final File lastSourcesFolder;\n+ private final VersionControlSystem vcs;\n+\n+ public ChangeManager(final File projectFolder, final File moduleFolder) {\n+  this.folders = new PeASSFolders(projectFolder);\n+  // this.moduleFolder = moduleFolder;\n+//  PeASSFolders.setProjectFolder(projectFolder);\n+  vcs = VersionControlSystem.getVersionControlSystem(projectFolder);\n+ }\n+\n+ public ChangeManager(final File projectFolder) {\n+  this.folders = new PeASSFolders(projectFolder);\n+  // this.moduleFolder = projectFolder;\n+//  PeASSFolders.setProjectFolder(projectFolder);\n+  vcs = VersionControlSystem.getVersionControlSystem(projectFolder);\n+//  lastSourcesFolder = PeASSFolders.getLastSources();\n+ }\n+\n+ /**\n+  * Returns a set of the full qualified names of all classes that have been changed in the current revision.\n+  * \n+  * @return full qualified names of all classes that have been changed in the current revision.\n+  */\n+\n+ private List<ChangedEntity> getChangedClasses() {\n+  final VersionDiff diff;\n+  if (vcs.equals(VersionControlSystem.SVN)) {\n+   diff = new SVNDiffLoader().getChangedClasses(folders.getProjectFolder());\n+  } else if (vcs.equals(VersionControlSystem.GIT)) {\n+          diff = GitUtils.getChangedClasses(folders.getProjectFolder());\n+  } else {\n+          throw new RuntimeException(\".git or .svn not there - Can only happen if .git or .svn is deleted between constructor and method call \");\n+  }\n+  LOG.info(\"Changed classes: \" + diff.getChangedClasses().size());\n+  return diff.getChangedClasses();\n+ }\n+\n+ public void saveOldClasses() {\n+  try {\n+   if (folders.getLastSources().exists()) {\n+    FileUtils.deleteDirectory(folders.getLastSources());\n+   }\n+   folders.getLastSources().mkdir();\n+   for (final File module : MavenPomUtil.getModules(new File(folders.getProjectFolder(), \"pom.xml\"))) {\n+    final String moduleName = module.getName();\n+    FileUtils.copyDirectory(new File(module, \"src\"), new File(folders.getLastSources(), moduleName + File.separator + \"main\"));\n+   }\n+  } catch (final IOException e) {\n+   e.printStackTrace();\n+  } catch (final XmlPullParserException e) {\n+   e.printStackTrace();\n+  }\n+ }\n+\n+ /**\n+  * Returns all changed classes with the corresponding changed methods. If the set of a class is empty, the whole class was changed and all tests using any method of the class need to be\n+  * re-evaluated.\n+  * \n+  * @return\n+  */\n+\n+ public Map<ChangedEntity, Set<String>> getChanges() {\n+  final Map<ChangedEntity, Set<String>> changedClassesMethods = new TreeMap<>();\n+  final List<ChangedEntity> changedClasses = getChangedClasses();\n+  LOG.debug(\"Before Cleaning: {}\", changedClasses);\n+  if (folders.getLastSources().exists()) {\n+   for (final Iterator<ChangedEntity> clazzIterator = changedClasses.iterator(); clazzIterator.hasNext();) {\n+    final ChangedEntity clazz = clazzIterator.next();\n+    final String onlyClassName = clazz.getJavaClazzName().substring(clazz.getJavaClazzName().lastIndexOf(\".\") + 1);\n+    final File src;\n+    if (clazz.getModule().length() > 0) {\n+     final File moduleFolder = new File(folders.getProjectFolder(), clazz.getModule());\n+     LOG.debug(\"Module: {}\", clazz.getModule());\n+     src = new File(moduleFolder, \"src\");\n+    } else {\n+     src = new File(folders.getProjectFolder(), \"src\");\n+    }\n+    LOG.debug(\"Suche nach {} in {}\", clazz.getJavaClazzName(), src);\n+    try {\n+     final Iterator<File> newFileIterator = FileUtils.listFiles(src, new WildcardFileFilter(onlyClassName + \".java\"), TrueFileFilter.INSTANCE).iterator();\n+     if (newFileIterator.hasNext()) {\n+      final File newFile = newFileIterator.next();\n+      final Iterator<File> oldFileIterator = FileUtils.listFiles(folders.getLastSources(), new WildcardFileFilter(onlyClassName + \".java\"), TrueFileFilter.INSTANCE).iterator();\n+      if (oldFileIterator.hasNext()) {\n+       final File oldFile = oldFileIterator.next();\n+       LOG.info(\"Vergleiche {}\", newFile, oldFile);\n+       if (newFile.exists()) {\n+        final ClazzChangeData changeData = FileComparisonUtil.getChangedMethods(newFile, oldFile);\n+        if (!changeData.isChange()) {\n+         clazzIterator.remove();\n+         LOG.debug(\"Dateien gleich: {}\", clazz);\n+        } else {\n+         if (changeData.isOnlyMethodChange()) {\n+          changedClassesMethods.put(clazz, changeData.getChangedMethods());\n+         } else {\n+          changedClassesMethods.put(clazz, new HashSet<>());\n+         }\n+        }\n+       }\n+      } else {\n+       LOG.info(\"Class did not exist before: {}\", clazz);\n+       changedClassesMethods.put(clazz, new HashSet<>());\n+      }\n+     }\n+    } catch (final ParseException pe) {\n+     LOG.info(\"Class is unparsable for java parser, so to be sure it is added to the changed classes: {}\", clazz);\n+     changedClassesMethods.put(clazz, new HashSet<>());\n+     pe.printStackTrace();\n+    } catch (final IOException e) {\n+     LOG.info(\"Class is unparsable for java parser, so to be sure it is added to the changed classes: {}\", clazz);\n+     changedClassesMethods.put(clazz, new HashSet<>());\n+     e.printStackTrace();\n+    }\n+   }\n+  } else {\n+   LOG.info(\"Kein Ordner f\u00fcr alte Dateien vorhanden\");\n+  }\n+  LOG.debug(\"Nach dem Bereinigen: {}\", changedClassesMethods);\n+  return changedClassesMethods;\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 163
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "123",
                    "severity": "error",
                    "message": "Line is longer than 200 characters (found 223).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "123",
                    "column": "68",
                    "severity": "error",
                    "message": "'>' is followed by an illegal character.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "123",
                    "column": "84",
                    "severity": "error",
                    "message": "'=' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "123",
                    "column": "96",
                    "severity": "error",
                    "message": "'.' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                },
                {
                    "line": "123",
                    "column": "108",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "108",
                    "severity": "error",
                    "message": "'(' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                },
                {
                    "line": "123",
                    "column": "118",
                    "severity": "error",
                    "message": "'.' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                },
                {
                    "line": "123",
                    "column": "135",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "135",
                    "severity": "error",
                    "message": "'(' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                },
                {
                    "line": "123",
                    "column": "137",
                    "severity": "error",
                    "message": "')' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "139",
                    "severity": "error",
                    "message": "',' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "123",
                    "column": "164",
                    "severity": "error",
                    "message": "'(' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                },
                {
                    "line": "123",
                    "column": "178",
                    "severity": "error",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "123",
                    "column": "178",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "123",
                    "column": "187",
                    "severity": "error",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/30/ChangeManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_random/30/ChangeManager.java\nindex d95afe33957..759c5952b52 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/30/ChangeManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_random/30/ChangeManager.java\n@@ -120,8 +120,7 @@ public class ChangeManager {\n \t\t\t\t\tfinal Iterator<File> newFileIterator = FileUtils.listFiles(src, new WildcardFileFilter(onlyClassName + \".java\"), TrueFileFilter.INSTANCE).iterator();\n \t\t\t\t\tif (newFileIterator.hasNext()) {\n \t\t\t\t\t\tfinal File newFile = newFileIterator.next();\n-\t\t\t\t\t\tfinal Iterator<File> oldFileIterator = FileUtils.listFiles(folders.getLastSources(), new WildcardFileFilter(onlyClassName + \".java\"), TrueFileFilter.INSTANCE)\n-\t\t\t\t\t\t\t\t.iterator();\n+\t\t\t\t\t\tfinal Iterator<File>oldFileIterator= FileUtils . listFiles ( folders . getLastSources ( ) , new WildcardFileFilter (onlyClassName+\".java\"),TrueFileFilter.INSTANCE).iterator();\n \t\t\t\t\t\tif (oldFileIterator.hasNext()) {\n \t\t\t\t\t\t\tfinal File oldFile = oldFileIterator.next();\n \t\t\t\t\t\t\tLOG.info(\"Vergleiche {}\", newFile, oldFile);\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "123",
                    "column": "68",
                    "severity": "error",
                    "message": "'>' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "123",
                    "column": "115",
                    "severity": "error",
                    "message": "'.' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                },
                {
                    "line": "123",
                    "column": "132",
                    "severity": "error",
                    "message": "'(' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                },
                {
                    "line": "123",
                    "column": "173",
                    "severity": "error",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/30/ChangeManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_three_grams/30/ChangeManager.java\nindex d95afe33957..cb72e130f71 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/30/ChangeManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_three_grams/30/ChangeManager.java\n@@ -120,8 +120,9 @@ public class ChangeManager {\n \t\t\t\t\tfinal Iterator<File> newFileIterator = FileUtils.listFiles(src, new WildcardFileFilter(onlyClassName + \".java\"), TrueFileFilter.INSTANCE).iterator();\n \t\t\t\t\tif (newFileIterator.hasNext()) {\n \t\t\t\t\t\tfinal File newFile = newFileIterator.next();\n-\t\t\t\t\t\tfinal Iterator<File> oldFileIterator = FileUtils.listFiles(folders.getLastSources(), new WildcardFileFilter(onlyClassName + \".java\"), TrueFileFilter.INSTANCE)\n-\t\t\t\t\t\t\t\t.iterator();\n+\t\t\t\t\t\tfinalIterator<File > oldFileIterator = FileUtils.listFiles(folders. getLastSources (), new WildcardFileFilter(onlyClassName +\".java\"),\n+\t\t\t\t\t\t\t\tTrueFileFilter.INSTANCE)\n+\t\t\t\t\t\t\t\t\t.iteratoriterator();\n \t\t\t\t\t\tif (oldFileIterator.hasNext()) {\n \t\t\t\t\t\t\tfinal File oldFile = oldFileIterator.next();\n \t\t\t\t\t\t\tLOG.info(\"Vergleiche {}\", newFile, oldFile);\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}