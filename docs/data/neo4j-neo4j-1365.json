{
    "project_name": "neo4j-neo4j",
    "error_id": "1365",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "115",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "140",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1365/ExecutingQueryFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1365/ExecutingQueryFactory.java\nindex 92829719ec7..be3bf2cdd58 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1365/ExecutingQueryFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1365/ExecutingQueryFactory.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api;\n \n import java.util.Map;\n@@ -39,50 +40,50 @@ public class ExecutingQueryFactory\n     private final AtomicReference<CpuClock> cpuClockRef;\n     private final AtomicBoolean trackQueryAllocations;\n \n-    public ExecutingQueryFactory( SystemNanoClock clock, AtomicReference<CpuClock> cpuClockRef, Config config )\n+    public ExecutingQueryFactory(SystemNanoClock clock, AtomicReference<CpuClock> cpuClockRef, Config config)\n     {\n         this.clock = clock;\n         this.cpuClockRef = cpuClockRef;\n-        this.trackQueryAllocations = new AtomicBoolean( config.get( GraphDatabaseSettings.track_query_allocation ) );\n-        config.addListener( GraphDatabaseSettings.track_query_allocation,\n-                            ( before, after ) -> trackQueryAllocations.set( after ) );\n+        this.trackQueryAllocations = new AtomicBoolean(config.get(GraphDatabaseSettings.track_query_allocation));\n+        config.addListener(GraphDatabaseSettings.track_query_allocation,\n+          (before, after) -> trackQueryAllocations.set(after));\n \n     }\n \n-    public ExecutingQuery createForStatement( KernelStatement statement, String queryText, MapValue queryParameters )\n+    public ExecutingQuery createForStatement(KernelStatement statement, String queryText, MapValue queryParameters)\n     {\n         KernelTransactionImplementation transaction = statement.getTransaction();\n-        ExecutingQuery executingQuery = createUnbound( queryText, queryParameters, transaction.clientInfo(), statement.username(), transaction.getMetaData() );\n-        bindToStatement( executingQuery, statement );\n+        ExecutingQuery executingQuery = createUnbound(queryText, queryParameters, transaction.clientInfo(), statement.username(), transaction.getMetaData());\n+        bindToStatement(executingQuery, statement);\n         return executingQuery;\n     }\n \n-    public ExecutingQuery createUnbound( String queryText, MapValue queryParameters,\n-                                         ClientConnectionInfo clientConnectionInfo, String username, Map<String,Object> transactionMetaData )\n+    public ExecutingQuery createUnbound(String queryText, MapValue queryParameters,\n+                                        ClientConnectionInfo clientConnectionInfo, String username, Map<String, Object> transactionMetaData)\n     {\n         Thread thread = Thread.currentThread();\n         return new ExecutingQuery(\n-                lastQueryId.incrementAndGet(),\n-                clientConnectionInfo,\n-                username,\n-                queryText,\n-                queryParameters,\n-                transactionMetaData,\n-                thread.getId(),\n-                thread.getName(),\n-                clock,\n-                cpuClockRef.get(),\n-                trackQueryAllocations.get() );\n+          lastQueryId.incrementAndGet(),\n+          clientConnectionInfo,\n+          username,\n+          queryText,\n+          queryParameters,\n+          transactionMetaData,\n+          thread.getId(),\n+          thread.getName(),\n+          clock,\n+          cpuClockRef.get(),\n+          trackQueryAllocations.get());\n     }\n \n-    public void bindToStatement( ExecutingQuery executingQuery, KernelStatement statement )\n+    public void bindToStatement(ExecutingQuery executingQuery, KernelStatement statement)\n     {\n-        executingQuery.onTransactionBound( new ExecutingQuery.TransactionBinding(\n-                statement.namedDatabaseId(),\n-                statement::getHits,\n-                statement::getFaults,\n-                () -> statement.locks().activeLockCount()\n-        ) );\n+        executingQuery.onTransactionBound(new ExecutingQuery.TransactionBinding(\n+          statement.namedDatabaseId(),\n+          statement::getHits,\n+          statement::getFaults,\n+          () -> statement.locks().activeLockCount()\n+        ));\n     }\n }\n \n",
            "diff_size": 28
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}