{
    "project_name": "neo4j-neo4j",
    "error_id": "1704",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "49",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "155",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "73",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1704/AdversarialPageCache.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1704/AdversarialPageCache.java\nindex 7eb888a6a30..635f07b7e95 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1704/AdversarialPageCache.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1704/AdversarialPageCache.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.adversaries.pagecache;\n \n import org.eclipse.collections.api.set.ImmutableSet;\n@@ -45,50 +46,49 @@ import static java.nio.file.StandardOpenOption.CREATE;\n  * Depending on the adversary each operation can throw either {@link RuntimeException} like {@link SecurityException}\n  * or {@link IOException} like {@link NoSuchFileException}.\n  */\n-@SuppressWarnings( \"unchecked\" )\n+@SuppressWarnings(\"unchecked\")\n public class AdversarialPageCache implements PageCache\n {\n     private final PageCache delegate;\n     private final Adversary adversary;\n \n-    public AdversarialPageCache( PageCache delegate, Adversary adversary )\n+    public AdversarialPageCache(PageCache delegate, Adversary adversary)\n     {\n-        this.delegate = Objects.requireNonNull( delegate );\n-        this.adversary = Objects.requireNonNull( adversary );\n+        this.delegate = Objects.requireNonNull(delegate);\n+        this.adversary = Objects.requireNonNull(adversary);\n     }\n \n     @Override\n-    public PagedFile map( Path path, VersionContextSupplier versionContextSupplier, int pageSize, ImmutableSet<OpenOption> openOptions, String databaseName )\n-            throws IOException\n+    public PagedFile map(Path path, VersionContextSupplier versionContextSupplier, int pageSize, ImmutableSet<OpenOption> openOptions, String databaseName)\n+      throws IOException\n     {\n-        if ( openOptions.contains( CREATE ) )\n+        if (openOptions.contains(CREATE))\n         {\n-            adversary.injectFailure( IOException.class, SecurityException.class );\n-        }\n-        else\n+            adversary.injectFailure(IOException.class, SecurityException.class);\n+        } else\n         {\n-            adversary.injectFailure( NoSuchFileException.class, IOException.class, SecurityException.class );\n+            adversary.injectFailure(NoSuchFileException.class, IOException.class, SecurityException.class);\n         }\n-        PagedFile pagedFile = delegate.map( path, versionContextSupplier, pageSize, openOptions, databaseName );\n-        return new AdversarialPagedFile( pagedFile, adversary );\n+        PagedFile pagedFile = delegate.map(path, versionContextSupplier, pageSize, openOptions, databaseName);\n+        return new AdversarialPagedFile(pagedFile, adversary);\n     }\n \n     @Override\n-    public Optional<PagedFile> getExistingMapping( Path path ) throws IOException\n+    public Optional<PagedFile> getExistingMapping(Path path) throws IOException\n     {\n-        adversary.injectFailure( IOException.class, SecurityException.class );\n-        final Optional<PagedFile> optional = delegate.getExistingMapping( path );\n-        return optional.map( pagedFile -> new AdversarialPagedFile( pagedFile, adversary ) );\n+        adversary.injectFailure(IOException.class, SecurityException.class);\n+        final Optional<PagedFile> optional = delegate.getExistingMapping(path);\n+        return optional.map(pagedFile -> new AdversarialPagedFile(pagedFile, adversary));\n     }\n \n     @Override\n     public List<PagedFile> listExistingMappings() throws IOException\n     {\n-        adversary.injectFailure( IOException.class, SecurityException.class );\n+        adversary.injectFailure(IOException.class, SecurityException.class);\n         List<PagedFile> list = delegate.listExistingMappings();\n-        for ( int i = 0; i < list.size(); i++ )\n+        for (int i = 0; i < list.size(); i++)\n         {\n-            list.set( i, new AdversarialPagedFile( list.get( i ), adversary ) );\n+            list.set(i, new AdversarialPagedFile(list.get(i), adversary));\n         }\n         return list;\n     }\n@@ -96,21 +96,21 @@ public class AdversarialPageCache implements PageCache\n     @Override\n     public void flushAndForce() throws IOException\n     {\n-        adversary.injectFailure( NoSuchFileException.class, IOException.class, SecurityException.class );\n+        adversary.injectFailure(NoSuchFileException.class, IOException.class, SecurityException.class);\n         delegate.flushAndForce();\n     }\n \n     @Override\n-    public void flushAndForce( IOLimiter limiter ) throws IOException\n+    public void flushAndForce(IOLimiter limiter) throws IOException\n     {\n-        adversary.injectFailure( NoSuchFileException.class, IOException.class, SecurityException.class );\n-        delegate.flushAndForce( limiter );\n+        adversary.injectFailure(NoSuchFileException.class, IOException.class, SecurityException.class);\n+        delegate.flushAndForce(limiter);\n     }\n \n     @Override\n     public void close()\n     {\n-        adversary.injectFailure( IllegalStateException.class );\n+        adversary.injectFailure(IllegalStateException.class);\n         delegate.close();\n     }\n \n",
            "diff_size": 26
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}