{
    "project_name": "graphfoundation-ongdb",
    "error_id": "840",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "81",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "102",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "127",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "76",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "121",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "84",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "125",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "233",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "258",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "270",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/840/SimpleIndexReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/840/SimpleIndexReader.java\nindex 92c9b927bd9..1063b013db9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/840/SimpleIndexReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/840/SimpleIndexReader.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.impl.schema.reader;\n \n import org.apache.lucene.index.Fields;\n@@ -72,213 +73,208 @@ import static org.neo4j.kernel.api.schema.index.SchemaIndexDescriptor.Type.UNIQU\n  */\n public class SimpleIndexReader extends AbstractIndexReader\n {\n-    private final PartitionSearcher partitionSearcher;\n-    private final SchemaIndexDescriptor descriptor;\n-    private final IndexSamplingConfig samplingConfig;\n-    private final TaskCoordinator taskCoordinator;\n+  private final PartitionSearcher partitionSearcher;\n+  private final SchemaIndexDescriptor descriptor;\n+  private final IndexSamplingConfig samplingConfig;\n+  private final TaskCoordinator taskCoordinator;\n \n-    public SimpleIndexReader( PartitionSearcher partitionSearcher,\n-            SchemaIndexDescriptor descriptor,\n-            IndexSamplingConfig samplingConfig,\n-            TaskCoordinator taskCoordinator )\n-    {\n-        super( descriptor );\n-        this.partitionSearcher = partitionSearcher;\n-        this.descriptor = descriptor;\n-        this.samplingConfig = samplingConfig;\n-        this.taskCoordinator = taskCoordinator;\n-    }\n+  public SimpleIndexReader(PartitionSearcher partitionSearcher,\n+                           SchemaIndexDescriptor descriptor,\n+                           IndexSamplingConfig samplingConfig,\n+                           TaskCoordinator taskCoordinator)\n+  {\n+    super(descriptor);\n+    this.partitionSearcher = partitionSearcher;\n+    this.descriptor = descriptor;\n+    this.samplingConfig = samplingConfig;\n+    this.taskCoordinator = taskCoordinator;\n+  }\n \n-    @Override\n-    public IndexSampler createSampler()\n+  @Override\n+  public IndexSampler createSampler()\n+  {\n+    TaskControl taskControl = taskCoordinator.newInstance();\n+    if (descriptor.type() == UNIQUE)\n     {\n-        TaskControl taskControl = taskCoordinator.newInstance();\n-        if ( descriptor.type() == UNIQUE )\n-        {\n-            return new UniqueLuceneIndexSampler( getIndexSearcher(), taskControl );\n-        }\n-        else\n-        {\n-            return new NonUniqueLuceneIndexSampler( getIndexSearcher(), taskControl, samplingConfig );\n-        }\n-    }\n-\n-    @Override\n-    public void query( IndexProgressor.NodeValueClient client, IndexOrder indexOrder, IndexQuery... predicates ) throws IndexNotApplicableKernelException\n+      return new UniqueLuceneIndexSampler(getIndexSearcher(), taskControl);\n+    } else\n     {\n-        Query query = toLuceneQuery( predicates );\n-        client.initialize( descriptor, search( query ).getIndexProgressor( NODE_ID_KEY, client ), predicates );\n+      return new NonUniqueLuceneIndexSampler(getIndexSearcher(), taskControl, samplingConfig);\n     }\n+  }\n \n-    @Override\n-    public PrimitiveLongResourceIterator query( IndexQuery... predicates ) throws IndexNotApplicableKernelException\n+  @Override\n+  public void query(IndexProgressor.NodeValueClient client, IndexOrder indexOrder, IndexQuery... predicates) throws IndexNotApplicableKernelException\n+  {\n+    Query query = toLuceneQuery(predicates);\n+    client.initialize(descriptor, search(query).getIndexProgressor(NODE_ID_KEY, client), predicates);\n+  }\n+\n+  @Override\n+  public PrimitiveLongResourceIterator query(IndexQuery... predicates) throws IndexNotApplicableKernelException\n+  {\n+    Query query = toLuceneQuery(predicates);\n+    return search(query).getValuesIterator(NODE_ID_KEY);\n+  }\n+\n+  private DocValuesCollector search(Query query)\n+  {\n+    try\n+    {\n+      DocValuesCollector docValuesCollector = new DocValuesCollector();\n+      getIndexSearcher().search(query, docValuesCollector);\n+      return docValuesCollector;\n+    } catch (IOException e)\n     {\n-        Query query = toLuceneQuery( predicates );\n-        return search( query ).getValuesIterator( NODE_ID_KEY );\n+      throw new RuntimeException(e);\n     }\n+  }\n \n-    private DocValuesCollector search( Query query )\n+  private Query toLuceneQuery(IndexQuery... predicates) throws IndexNotApplicableKernelException\n+  {\n+    IndexQuery predicate = predicates[0];\n+    switch (predicate.type())\n     {\n-        try\n+      case exact:\n+        Value[] values = new Value[predicates.length];\n+        for (int i = 0; i < predicates.length; i++)\n         {\n-            DocValuesCollector docValuesCollector = new DocValuesCollector();\n-            getIndexSearcher().search( query, docValuesCollector );\n-            return docValuesCollector;\n+          assert predicates[i].type() == exact :\n+              \"Exact followed by another query predicate type is not supported at this moment.\";\n+          values[i] = ((IndexQuery.ExactPredicate) predicates[i]).value();\n         }\n-        catch ( IOException e )\n+        return LuceneDocumentStructure.newSeekQuery(values);\n+      case exists:\n+        for (IndexQuery p : predicates)\n         {\n-            throw new RuntimeException( e );\n+          if (p.type() != IndexQueryType.exists)\n+          {\n+            throw new IndexNotApplicableKernelException(\n+                \"Exists followed by another query predicate type is not supported.\");\n+          }\n         }\n-    }\n-\n-    private Query toLuceneQuery( IndexQuery... predicates ) throws IndexNotApplicableKernelException\n-    {\n-        IndexQuery predicate = predicates[0];\n-        switch ( predicate.type() )\n+        return LuceneDocumentStructure.newScanQuery();\n+      case range:\n+        assertNotComposite(predicates);\n+        switch (predicate.valueGroup())\n         {\n-        case exact:\n-            Value[] values = new Value[predicates.length];\n-            for ( int i = 0; i < predicates.length; i++ )\n-            {\n-                assert predicates[i].type() == exact :\n-                        \"Exact followed by another query predicate type is not supported at this moment.\";\n-                values[i] = ((IndexQuery.ExactPredicate) predicates[i]).value();\n-            }\n-            return LuceneDocumentStructure.newSeekQuery( values );\n-        case exists:\n-            for ( IndexQuery p : predicates )\n-            {\n-                if ( p.type() != IndexQueryType.exists )\n-                {\n-                    throw new IndexNotApplicableKernelException(\n-                            \"Exists followed by another query predicate type is not supported.\" );\n-                }\n-            }\n-            return LuceneDocumentStructure.newScanQuery();\n-        case range:\n-            assertNotComposite( predicates );\n-            switch ( predicate.valueGroup() )\n-            {\n-            case NUMBER:\n-                IndexQuery.NumberRangePredicate np = (IndexQuery.NumberRangePredicate) predicate;\n-                return LuceneDocumentStructure.newInclusiveNumericRangeSeekQuery( np.from(),\n-                                                                                  np.to() );\n-\n-            case TEXT:\n-                IndexQuery.TextRangePredicate sp = (IndexQuery.TextRangePredicate) predicate;\n-                return LuceneDocumentStructure.newRangeSeekByStringQuery( sp.from(), sp.fromInclusive(),\n-                                                                          sp.to(), sp.toInclusive() );\n+          case NUMBER:\n+            IndexQuery.NumberRangePredicate np = (IndexQuery.NumberRangePredicate) predicate;\n+            return LuceneDocumentStructure.newInclusiveNumericRangeSeekQuery(np.from(),\n+                np.to());\n \n-            default:\n-                throw new UnsupportedOperationException(\n-                        format( \"Range scans of value group %s are not supported\", predicate.valueGroup() ) );\n-            }\n+          case TEXT:\n+            IndexQuery.TextRangePredicate sp = (IndexQuery.TextRangePredicate) predicate;\n+            return LuceneDocumentStructure.newRangeSeekByStringQuery(sp.from(), sp.fromInclusive(),\n+                sp.to(), sp.toInclusive());\n \n-        case stringPrefix:\n-            assertNotComposite( predicates );\n-            IndexQuery.StringPrefixPredicate spp = (IndexQuery.StringPrefixPredicate) predicate;\n-            return LuceneDocumentStructure.newRangeSeekByPrefixQuery( spp.prefix() );\n-        case stringContains:\n-            assertNotComposite( predicates );\n-            IndexQuery.StringContainsPredicate scp = (IndexQuery.StringContainsPredicate) predicate;\n-            return LuceneDocumentStructure.newWildCardStringQuery( scp.contains() );\n-        case stringSuffix:\n-            assertNotComposite( predicates );\n-            IndexQuery.StringSuffixPredicate ssp = (IndexQuery.StringSuffixPredicate) predicate;\n-            return LuceneDocumentStructure.newSuffixStringQuery( ssp.suffix() );\n-        default:\n-            // todo figure out a more specific exception\n-            throw new RuntimeException( \"Index query not supported: \" + Arrays.toString( predicates ) );\n+          default:\n+            throw new UnsupportedOperationException(\n+                format(\"Range scans of value group %s are not supported\", predicate.valueGroup()));\n         }\n-    }\n \n-    @Override\n-    public boolean hasFullValuePrecision( IndexQuery... predicates )\n-    {\n-        return false;\n+      case stringPrefix:\n+        assertNotComposite(predicates);\n+        IndexQuery.StringPrefixPredicate spp = (IndexQuery.StringPrefixPredicate) predicate;\n+        return LuceneDocumentStructure.newRangeSeekByPrefixQuery(spp.prefix());\n+      case stringContains:\n+        assertNotComposite(predicates);\n+        IndexQuery.StringContainsPredicate scp = (IndexQuery.StringContainsPredicate) predicate;\n+        return LuceneDocumentStructure.newWildCardStringQuery(scp.contains());\n+      case stringSuffix:\n+        assertNotComposite(predicates);\n+        IndexQuery.StringSuffixPredicate ssp = (IndexQuery.StringSuffixPredicate) predicate;\n+        return LuceneDocumentStructure.newSuffixStringQuery(ssp.suffix());\n+      default:\n+        // todo figure out a more specific exception\n+        throw new RuntimeException(\"Index query not supported: \" + Arrays.toString(predicates));\n     }\n+  }\n \n-    /**\n-     * OBS this implementation can only provide values for properties of type {@link String}.\n-     * Other property types will still be counted as distinct, but {@code client} won't receive {@link Value}\n-     * instances for those.\n-     *\n-     * @param client {@link IndexProgressor.NodeValueClient} to get initialized with this progression.\n-     * @param propertyAccessor {@link PropertyAccessor} for reading property values.\n-     */\n-    @Override\n-    public void distinctValues( IndexProgressor.NodeValueClient client, PropertyAccessor propertyAccessor )\n+  @Override\n+  public boolean hasFullValuePrecision(IndexQuery... predicates)\n+  {\n+    return false;\n+  }\n+\n+  /**\n+   * OBS this implementation can only provide values for properties of type {@link String}.\n+   * Other property types will still be counted as distinct, but {@code client} won't receive {@link Value}\n+   * instances for those.\n+   *\n+   * @param client           {@link IndexProgressor.NodeValueClient} to get initialized with this progression.\n+   * @param propertyAccessor {@link PropertyAccessor} for reading property values.\n+   */\n+  @Override\n+  public void distinctValues(IndexProgressor.NodeValueClient client, PropertyAccessor propertyAccessor)\n+  {\n+    try\n     {\n-        try\n-        {\n-            IndexQuery[] noQueries = new IndexQuery[0];\n-            BridgingIndexProgressor multiProgressor = new BridgingIndexProgressor( client, descriptor.schema().getPropertyIds() );\n-            Fields fields = MultiFields.getFields( getIndexSearcher().getIndexReader() );\n-            for ( ValueEncoding valueEncoding : ValueEncoding.values() )\n-            {\n-                Terms terms = fields.terms( valueEncoding.key() );\n-                if ( terms != null )\n-                {\n-                    Function<BytesRef,Value> valueMaterializer = valueEncoding == ValueEncoding.String && client.needsValues()\n-                                                                 ? term -> Values.stringValue( term.utf8ToString() )\n-                                                                 : term -> null;\n-                    TermsEnum termsIterator = terms.iterator();\n-                    if ( valueEncoding == ValueEncoding.Number )\n-                    {\n-                        termsIterator = NumericUtils.filterPrefixCodedLongs( termsIterator );\n-                    }\n-                    multiProgressor.initialize( descriptor, new LuceneDistinctValuesProgressor( termsIterator, client, valueMaterializer ), noQueries );\n-                }\n-            }\n-            client.initialize( descriptor, multiProgressor, noQueries );\n-        }\n-        catch ( IOException e )\n+      IndexQuery[] noQueries = new IndexQuery[0];\n+      BridgingIndexProgressor multiProgressor = new BridgingIndexProgressor(client, descriptor.schema().getPropertyIds());\n+      Fields fields = MultiFields.getFields(getIndexSearcher().getIndexReader());\n+      for (ValueEncoding valueEncoding : ValueEncoding.values())\n+      {\n+        Terms terms = fields.terms(valueEncoding.key());\n+        if (terms != null)\n         {\n-            throw new UncheckedIOException( e );\n+          Function<BytesRef, Value> valueMaterializer = valueEncoding == ValueEncoding.String && client.needsValues()\n+              ? term -> Values.stringValue(term.utf8ToString())\n+              : term -> null;\n+          TermsEnum termsIterator = terms.iterator();\n+          if (valueEncoding == ValueEncoding.Number)\n+          {\n+            termsIterator = NumericUtils.filterPrefixCodedLongs(termsIterator);\n+          }\n+          multiProgressor.initialize(descriptor, new LuceneDistinctValuesProgressor(termsIterator, client, valueMaterializer), noQueries);\n         }\n-    }\n-\n-    private void assertNotComposite( IndexQuery[] predicates )\n+      }\n+      client.initialize(descriptor, multiProgressor, noQueries);\n+    } catch (IOException e)\n     {\n-        assert predicates.length == 1 : \"composite indexes not yet supported for this operation\";\n+      throw new UncheckedIOException(e);\n     }\n+  }\n \n-    @Override\n-    public long countIndexedNodes( long nodeId, Value... propertyValues )\n-    {\n-        Query nodeIdQuery = new TermQuery( LuceneDocumentStructure.newTermForChangeOrRemove( nodeId ) );\n-        Query valueQuery = LuceneDocumentStructure.newSeekQuery( propertyValues );\n-        BooleanQuery.Builder nodeIdAndValueQuery = new BooleanQuery.Builder().setDisableCoord( true );\n-        nodeIdAndValueQuery.add( nodeIdQuery, BooleanClause.Occur.MUST );\n-        nodeIdAndValueQuery.add( valueQuery, BooleanClause.Occur.MUST );\n-        try\n-        {\n-            TotalHitCountCollector collector = new TotalHitCountCollector();\n-            getIndexSearcher().search( nodeIdAndValueQuery.build(), collector );\n-            // A <label,propertyKeyId,nodeId> tuple should only match at most a single propertyValue\n-            return collector.getTotalHits();\n-        }\n-        catch ( IOException e )\n-        {\n-            throw new RuntimeException( e );\n-        }\n-    }\n+  private void assertNotComposite(IndexQuery[] predicates)\n+  {\n+    assert predicates.length == 1 : \"composite indexes not yet supported for this operation\";\n+  }\n \n-    @Override\n-    public void close()\n+  @Override\n+  public long countIndexedNodes(long nodeId, Value... propertyValues)\n+  {\n+    Query nodeIdQuery = new TermQuery(LuceneDocumentStructure.newTermForChangeOrRemove(nodeId));\n+    Query valueQuery = LuceneDocumentStructure.newSeekQuery(propertyValues);\n+    BooleanQuery.Builder nodeIdAndValueQuery = new BooleanQuery.Builder().setDisableCoord(true);\n+    nodeIdAndValueQuery.add(nodeIdQuery, BooleanClause.Occur.MUST);\n+    nodeIdAndValueQuery.add(valueQuery, BooleanClause.Occur.MUST);\n+    try\n     {\n-        try\n-        {\n-            partitionSearcher.close();\n-        }\n-        catch ( IOException e )\n-        {\n-            throw new IndexReaderCloseException( e );\n-        }\n+      TotalHitCountCollector collector = new TotalHitCountCollector();\n+      getIndexSearcher().search(nodeIdAndValueQuery.build(), collector);\n+      // A <label,propertyKeyId,nodeId> tuple should only match at most a single propertyValue\n+      return collector.getTotalHits();\n+    } catch (IOException e)\n+    {\n+      throw new RuntimeException(e);\n     }\n+  }\n \n-    private IndexSearcher getIndexSearcher()\n+  @Override\n+  public void close()\n+  {\n+    try\n     {\n-        return partitionSearcher.getIndexSearcher();\n+      partitionSearcher.close();\n+    } catch (IOException e)\n+    {\n+      throw new IndexReaderCloseException(e);\n     }\n+  }\n+\n+  private IndexSearcher getIndexSearcher()\n+  {\n+    return partitionSearcher.getIndexSearcher();\n+  }\n }\n",
            "diff_size": 262
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}