{
    "project_name": "codefollower-H2-Research",
    "error_id": "569",
    "information": {
        "errors": [
            {
                "line": "90",
                "column": "46",
                "severity": "warning",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "        session.commit(true);\n        Database db = session.getDatabase();\n        if (db.findRole(userName) != null) { //\u89d2\u8272\u540d\u548c\u7528\u6237\u540d\u4e0d\u80fd\u4e00\u6837\n            throw DbException.get(ErrorCode.ROLE_ALREADY_EXISTS_1, userName);\n        }\n        if (db.findUser(userName) != null) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/569/CreateUser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/569/CreateUser.java\nindex d449beaa8d2..379937a897c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/569/CreateUser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/569/CreateUser.java\n@@ -87,8 +87,9 @@ public class CreateUser extends DefineCommand {\n         session.getUser().checkAdmin();\n         session.commit(true);\n         Database db = session.getDatabase();\n-        if (db.findRole(userName) != null) { //\u89d2\u8272\u540d\u548c\u7528\u6237\u540d\u4e0d\u80fd\u4e00\u6837\n-            throw DbException.get(ErrorCode.ROLE_ALREADY_EXISTS_1, userName);\n+        if (db.findRole(userName) != null) {\n+            //\u89d2\u8272\u540d\u548c\u7528\u6237\u540d\u4e0d\u80fd\u4e00\u6837\n+        throw DbException.get(ErrorCode.ROLE_ALREADY_EXISTS_1, userName);\n         }\n         if (db.findUser(userName) != null) {\n             if (ifNotExists) {\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "91",
                    "column": "42",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/569/CreateUser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/569/CreateUser.java\nindex d449beaa8d2..ef9e1042a6f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/569/CreateUser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/569/CreateUser.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (http://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.command.ddl;\n \n import org.h2.api.ErrorCode;\n@@ -21,115 +22,115 @@ import org.h2.util.StringUtils;\n  */\n public class CreateUser extends DefineCommand {\n \n-    private String userName;\n-    private boolean admin;\n-    private Expression password;\n-    private Expression salt;\n-    private Expression hash;\n-    private boolean ifNotExists;\n-    private String comment;\n-\n-    public CreateUser(Session session) {\n-        super(session);\n-    }\n-\n-    public void setIfNotExists(boolean ifNotExists) {\n-        this.ifNotExists = ifNotExists;\n-    }\n-\n-    public void setUserName(String userName) {\n-        this.userName = userName;\n+  private String userName;\n+  private boolean admin;\n+  private Expression password;\n+  private Expression salt;\n+  private Expression hash;\n+  private boolean ifNotExists;\n+  private String comment;\n+\n+  public CreateUser(Session session) {\n+    super(session);\n+  }\n+\n+  public void setIfNotExists(boolean ifNotExists) {\n+    this.ifNotExists = ifNotExists;\n+  }\n+\n+  public void setUserName(String userName) {\n+    this.userName = userName;\n+  }\n+\n+  public void setPassword(Expression password) {\n+    this.password = password;\n+  }\n+\n+  /**\n+   * Set the salt and hash for the given user.\n+   *\n+   * @param user    the user\n+   * @param session the session\n+   * @param salt    the salt\n+   * @param hash    the hash\n+   */\n+  static void setSaltAndHash(User user, Session session, Expression salt, Expression hash) {\n+    user.setSaltAndHash(getByteArray(session, salt), getByteArray(session, hash));\n+  }\n+\n+  private static byte[] getByteArray(Session session, Expression e) {\n+    String s = e.optimize(session).getValue(session).getString();\n+    return s == null ? new byte[0] : StringUtils.convertHexToBytes(s);\n+  }\n+\n+  /**\n+   * Set the password for the given user.\n+   *\n+   * @param user     the user\n+   * @param session  the session\n+   * @param password the password\n+   */\n+  static void setPassword(User user, Session session, Expression password) {\n+    String pwd = password.optimize(session).getValue(session).getString();\n+    char[] passwordChars = pwd == null ? new char[0] : pwd.toCharArray();\n+    byte[] userPasswordHash;\n+    String userName = user.getName();\n+    if (userName.length() == 0 && passwordChars.length == 0) {\n+      userPasswordHash = new byte[0];\n+    } else {\n+      userPasswordHash = SHA256.getKeyPasswordHash(userName, passwordChars);\n     }\n-\n-    public void setPassword(Expression password) {\n-        this.password = password;\n-    }\n-\n-    /**\n-     * Set the salt and hash for the given user.\n-     *\n-     * @param user the user\n-     * @param session the session\n-     * @param salt the salt\n-     * @param hash the hash\n-     */\n-    static void setSaltAndHash(User user, Session session, Expression salt, Expression hash) {\n-        user.setSaltAndHash(getByteArray(session, salt), getByteArray(session, hash));\n+    user.setUserPasswordHash(userPasswordHash);\n+  }\n+\n+  @Override\n+  public int update() {\n+    session.getUser().checkAdmin();\n+    session.commit(true);\n+    Database db = session.getDatabase();\n+    if (db.findRole(userName) != null) { //\u89d2\u8272\u540d\u548c\u7528\u6237\u540d\u4e0d\u80fd\u4e00\u6837\n+      throw DbException.get(ErrorCode.ROLE_ALREADY_EXISTS_1, userName);\n     }\n-\n-    private static byte[] getByteArray(Session session, Expression e) {\n-        String s = e.optimize(session).getValue(session).getString();\n-        return s == null ? new byte[0] : StringUtils.convertHexToBytes(s);\n-    }\n-\n-    /**\n-     * Set the password for the given user.\n-     *\n-     * @param user the user\n-     * @param session the session\n-     * @param password the password\n-     */\n-    static void setPassword(User user, Session session, Expression password) {\n-        String pwd = password.optimize(session).getValue(session).getString();\n-        char[] passwordChars = pwd == null ? new char[0] : pwd.toCharArray();\n-        byte[] userPasswordHash;\n-        String userName = user.getName();\n-        if (userName.length() == 0 && passwordChars.length == 0) {\n-            userPasswordHash = new byte[0];\n-        } else {\n-            userPasswordHash = SHA256.getKeyPasswordHash(userName, passwordChars);\n-        }\n-        user.setUserPasswordHash(userPasswordHash);\n-    }\n-\n-    @Override\n-    public int update() {\n-        session.getUser().checkAdmin();\n-        session.commit(true);\n-        Database db = session.getDatabase();\n-        if (db.findRole(userName) != null) { //\u89d2\u8272\u540d\u548c\u7528\u6237\u540d\u4e0d\u80fd\u4e00\u6837\n-            throw DbException.get(ErrorCode.ROLE_ALREADY_EXISTS_1, userName);\n-        }\n-        if (db.findUser(userName) != null) {\n-            if (ifNotExists) {\n-                return 0;\n-            }\n-            throw DbException.get(ErrorCode.USER_ALREADY_EXISTS_1, userName);\n-        }\n-        int id = getObjectId();\n-        User user = new User(db, id, userName, false);\n-        user.setAdmin(admin);\n-        user.setComment(comment);\n-        if (hash != null && salt != null) {\n-            setSaltAndHash(user, session, salt, hash);\n-        } else if (password != null) {\n-            setPassword(user, session, password);\n-        } else {\n-            throw DbException.throwInternalError();\n-        }\n-        db.addDatabaseObject(session, user);\n+    if (db.findUser(userName) != null) {\n+      if (ifNotExists) {\n         return 0;\n+      }\n+      throw DbException.get(ErrorCode.USER_ALREADY_EXISTS_1, userName);\n     }\n-\n-    public void setSalt(Expression e) {\n-        salt = e;\n-    }\n-\n-    public void setHash(Expression e) {\n-        hash = e;\n-    }\n-\n-    public void setAdmin(boolean b) {\n-        admin = b;\n-    }\n-\n-    public void setComment(String comment) {\n-        this.comment = comment;\n-    }\n-\n-    @Override\n-    public int getType() {\n-        return CommandInterface.CREATE_USER;\n+    int id = getObjectId();\n+    User user = new User(db, id, userName, false);\n+    user.setAdmin(admin);\n+    user.setComment(comment);\n+    if (hash != null && salt != null) {\n+      setSaltAndHash(user, session, salt, hash);\n+    } else if (password != null) {\n+      setPassword(user, session, password);\n+    } else {\n+      throw DbException.throwInternalError();\n     }\n+    db.addDatabaseObject(session, user);\n+    return 0;\n+  }\n+\n+  public void setSalt(Expression e) {\n+    salt = e;\n+  }\n+\n+  public void setHash(Expression e) {\n+    hash = e;\n+  }\n+\n+  public void setAdmin(boolean b) {\n+    admin = b;\n+  }\n+\n+  public void setComment(String comment) {\n+    this.comment = comment;\n+  }\n+\n+  @Override\n+  public int getType() {\n+    return CommandInterface.CREATE_USER;\n+  }\n \n }\n",
            "diff_size": 171
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/569/CreateUser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/569/CreateUser.java\nindex d449beaa8d2..7db1e81a38f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/569/CreateUser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/569/CreateUser.java\n@@ -87,7 +87,8 @@ public class CreateUser extends DefineCommand {\n         session.getUser().checkAdmin();\n         session.commit(true);\n         Database db = session.getDatabase();\n-        if (db.findRole(userName) != null) { //\u89d2\u8272\u540d\u548c\u7528\u6237\u540d\u4e0d\u80fd\u4e00\u6837\n+        if (db.findRole(userName) != null) {\n+    //\u89d2\u8272\u540d\u548c\u7528\u6237\u540d\u4e0d\u80fd\u4e00\u6837\n             throw DbException.get(ErrorCode.ROLE_ALREADY_EXISTS_1, userName);\n         }\n         if (db.findUser(userName) != null) {\n@@ -132,4 +133,4 @@ public class CreateUser extends DefineCommand {\n         return CommandInterface.CREATE_USER;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "99",
                    "column": "46",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/569/CreateUser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/569/CreateUser.java\nindex d449beaa8d2..abf91414b87 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/569/CreateUser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/569/CreateUser.java\n@@ -19,6 +19,8 @@ import org.h2.util.StringUtils;\n  * This class represents the statement\n  * CREATE USER\n  */\n+\n+\n public class CreateUser extends DefineCommand {\n \n     private String userName;\n@@ -33,14 +35,17 @@ public class CreateUser extends DefineCommand {\n         super(session);\n     }\n \n+\n     public void setIfNotExists(boolean ifNotExists) {\n         this.ifNotExists = ifNotExists;\n     }\n \n+\n     public void setUserName(String userName) {\n         this.userName = userName;\n     }\n \n+\n     public void setPassword(Expression password) {\n         this.password = password;\n     }\n@@ -53,6 +58,8 @@ public class CreateUser extends DefineCommand {\n      * @param salt the salt\n      * @param hash the hash\n      */\n+\n+\n     static void setSaltAndHash(User user, Session session, Expression salt, Expression hash) {\n         user.setSaltAndHash(getByteArray(session, salt), getByteArray(session, hash));\n     }\n@@ -69,6 +76,8 @@ public class CreateUser extends DefineCommand {\n      * @param session the session\n      * @param password the password\n      */\n+\n+\n     static void setPassword(User user, Session session, Expression password) {\n         String pwd = password.optimize(session).getValue(session).getString();\n         char[] passwordChars = pwd == null ? new char[0] : pwd.toCharArray();\n@@ -104,25 +113,29 @@ public class CreateUser extends DefineCommand {\n             setSaltAndHash(user, session, salt, hash);\n         } else if (password != null) {\n             setPassword(user, session, password);\n-        } else {\n+                        } else {\n             throw DbException.throwInternalError();\n         }\n         db.addDatabaseObject(session, user);\n         return 0;\n     }\n \n+\n     public void setSalt(Expression e) {\n         salt = e;\n     }\n \n+\n     public void setHash(Expression e) {\n         hash = e;\n     }\n \n+\n     public void setAdmin(boolean b) {\n         admin = b;\n     }\n \n+\n     public void setComment(String comment) {\n         this.comment = comment;\n     }\n@@ -132,4 +145,4 @@ public class CreateUser extends DefineCommand {\n         return CommandInterface.CREATE_USER;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/569/CreateUser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/569/CreateUser.java\nindex d449beaa8d2..379937a897c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/569/CreateUser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/569/CreateUser.java\n@@ -87,8 +87,9 @@ public class CreateUser extends DefineCommand {\n         session.getUser().checkAdmin();\n         session.commit(true);\n         Database db = session.getDatabase();\n-        if (db.findRole(userName) != null) { //\u89d2\u8272\u540d\u548c\u7528\u6237\u540d\u4e0d\u80fd\u4e00\u6837\n-            throw DbException.get(ErrorCode.ROLE_ALREADY_EXISTS_1, userName);\n+        if (db.findRole(userName) != null) {\n+            //\u89d2\u8272\u540d\u548c\u7528\u6237\u540d\u4e0d\u80fd\u4e00\u6837\n+        throw DbException.get(ErrorCode.ROLE_ALREADY_EXISTS_1, userName);\n         }\n         if (db.findUser(userName) != null) {\n             if (ifNotExists) {\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/569/CreateUser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/569/CreateUser.java\nindex d449beaa8d2..208509397d5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/569/CreateUser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/569/CreateUser.java\n@@ -87,8 +87,9 @@ public class CreateUser extends DefineCommand {\n         session.getUser().checkAdmin();\n         session.commit(true);\n         Database db = session.getDatabase();\n-        if (db.findRole(userName) != null) { //\u89d2\u8272\u540d\u548c\u7528\u6237\u540d\u4e0d\u80fd\u4e00\u6837\n-            throw DbException.get(ErrorCode.ROLE_ALREADY_EXISTS_1, userName);\n+        if (db.findRole(userName) != null) {\n+    //\u89d2\u8272\u540d\u548c\u7528\u6237\u540d\u4e0d\u80fd\u4e00\u6837\n+        throw DbException.get(ErrorCode.ROLE_ALREADY_EXISTS_1, userName);\n         }\n         if (db.findUser(userName) != null) {\n             if (ifNotExists) {\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "codebuff"
    ]
}