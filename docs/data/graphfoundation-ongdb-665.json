{
    "project_name": "graphfoundation-ongdb",
    "error_id": "665",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "50",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "15",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "77",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "100",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "110",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "127",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "152",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "270",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/665/PathProxy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/665/PathProxy.java\nindex ec647985a1b..67f2c35e228 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/665/PathProxy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/665/PathProxy.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.core;\n \n import java.util.Arrays;\n@@ -32,253 +33,243 @@ import static org.neo4j.helpers.collection.Iterators.iteratorsEqual;\n \n public class PathProxy implements Path\n {\n-    private final EmbeddedProxySPI proxySPI;\n-    private final long[] nodes;\n-    private final long[] relationships;\n-    private final int[] directedTypes;\n-\n-    /**\n-     * @param proxySPI\n-     *         the API into the kernel.\n-     * @param nodes\n-     *         the ids of the nodes in the path, in order.\n-     * @param relationships\n-     *         the ids of the relationships in the path, in order.\n-     * @param directedTypes\n-     *         an encoding of the types and directions of the relationships.\n-     *         An entry at position {@code i} of this array should be {@code typeId} if the relationship at {@code i}\n-     *         has its start node at {@code i} and its end node at {@code i + 1}, and should be {@code ~typeId} if the\n-     *         relationship at {@code i} has its start node at {@code i + 1} and its end node at {@code i}.\n-     */\n-    public PathProxy( EmbeddedProxySPI proxySPI, long[] nodes, long[] relationships, int[] directedTypes )\n-    {\n-        assert nodes.length == relationships.length + 1;\n-        assert relationships.length == directedTypes.length;\n-        this.proxySPI = proxySPI;\n-        this.nodes = nodes;\n-        this.relationships = relationships;\n-        this.directedTypes = directedTypes;\n-    }\n+  private final EmbeddedProxySPI proxySPI;\n+  private final long[] nodes;\n+  private final long[] relationships;\n+  private final int[] directedTypes;\n \n-    @Override\n-    public String toString()\n-    {\n-        StringBuilder string = new StringBuilder();\n-        string.append( '(' ).append( nodes[0] ).append( ')' );\n-        boolean inTx = true;\n-        for ( int i = 0; i < relationships.length; i++ )\n-        {\n-            int type = directedTypes[i];\n-            string.append( type < 0 ? \"<-[\" : \"-[\" );\n-            string.append( relationships[i] );\n-            if ( inTx )\n-            {\n-                try\n-                {\n-                    String name = proxySPI.getRelationshipTypeById( type < 0 ? ~type : type ).name();\n-                    string.append( ':' ).append( name );\n-                }\n-                catch ( Exception e )\n-                {\n-                    inTx = false;\n-                }\n-            }\n-            string.append( type < 0 ? \"]-(\" : \"]->(\" ).append( nodes[i + 1] ).append( ')' );\n-        }\n-        return string.toString();\n-    }\n+  /**\n+   * @param proxySPI      the API into the kernel.\n+   * @param nodes         the ids of the nodes in the path, in order.\n+   * @param relationships the ids of the relationships in the path, in order.\n+   * @param directedTypes an encoding of the types and directions of the relationships.\n+   *                      An entry at position {@code i} of this array should be {@code typeId} if the relationship at {@code i}\n+   *                      has its start node at {@code i} and its end node at {@code i + 1}, and should be {@code ~typeId} if the\n+   *                      relationship at {@code i} has its start node at {@code i + 1} and its end node at {@code i}.\n+   */\n+  public PathProxy(EmbeddedProxySPI proxySPI, long[] nodes, long[] relationships, int[] directedTypes)\n+  {\n+    assert nodes.length == relationships.length + 1;\n+    assert relationships.length == directedTypes.length;\n+    this.proxySPI = proxySPI;\n+    this.nodes = nodes;\n+    this.relationships = relationships;\n+    this.directedTypes = directedTypes;\n+  }\n \n-    @Override\n-    public int hashCode()\n+  @Override\n+  public String toString()\n+  {\n+    StringBuilder string = new StringBuilder();\n+    string.append('(').append(nodes[0]).append(')');\n+    boolean inTx = true;\n+    for (int i = 0; i < relationships.length; i++)\n     {\n-        if ( relationships.length == 0 )\n+      int type = directedTypes[i];\n+      string.append(type < 0 ? \"<-[\" : \"-[\");\n+      string.append(relationships[i]);\n+      if (inTx)\n+      {\n+        try\n         {\n-            return Long.hashCode( nodes[0] );\n-        }\n-        else\n+          String name = proxySPI.getRelationshipTypeById(type < 0 ? ~type : type).name();\n+          string.append(':').append(name);\n+        } catch (Exception e)\n         {\n-            return Arrays.hashCode( relationships );\n+          inTx = false;\n         }\n+      }\n+      string.append(type < 0 ? \"]-(\" : \"]->(\").append(nodes[i + 1]).append(')');\n     }\n+    return string.toString();\n+  }\n \n-    @Override\n-    public boolean equals( Object obj )\n+  @Override\n+  public int hashCode()\n+  {\n+    if (relationships.length == 0)\n     {\n-        if ( this == obj )\n-        {\n-            return true;\n-        }\n-        if ( obj instanceof PathProxy )\n-        {\n-            PathProxy that = (PathProxy) obj;\n-            return Arrays.equals( this.nodes, that.nodes ) && Arrays.equals( this.relationships, that.relationships );\n-        }\n-        else if ( obj instanceof Path )\n-        {\n-            Path other = (Path) obj;\n-            if ( nodes[0] != other.startNode().getId() )\n-            {\n-                return false;\n-            }\n-            return iteratorsEqual( this.relationships().iterator(), other.relationships().iterator() );\n-        }\n-        else\n-        {\n-            return false;\n-        }\n-    }\n-\n-    @Override\n-    public Node startNode()\n+      return Long.hashCode(nodes[0]);\n+    } else\n     {\n-        return new NodeProxy( proxySPI, nodes[0] );\n+      return Arrays.hashCode(relationships);\n     }\n+  }\n \n-    @Override\n-    public Node endNode()\n+  @Override\n+  public boolean equals(Object obj)\n+  {\n+    if (this == obj)\n     {\n-        return new NodeProxy( proxySPI, nodes[nodes.length - 1] );\n+      return true;\n     }\n-\n-    @Override\n-    public Relationship lastRelationship()\n+    if (obj instanceof PathProxy)\n+    {\n+      PathProxy that = (PathProxy) obj;\n+      return Arrays.equals(this.nodes, that.nodes) && Arrays.equals(this.relationships, that.relationships);\n+    } else if (obj instanceof Path)\n     {\n-        return relationships.length == 0\n-                ? null\n-                : relationship( relationships.length - 1 );\n+      Path other = (Path) obj;\n+      if (nodes[0] != other.startNode().getId())\n+      {\n+        return false;\n+      }\n+      return iteratorsEqual(this.relationships().iterator(), other.relationships().iterator());\n+    } else\n+    {\n+      return false;\n     }\n+  }\n+\n+  @Override\n+  public Node startNode()\n+  {\n+    return new NodeProxy(proxySPI, nodes[0]);\n+  }\n \n-    private RelationshipProxy relationship( int offset )\n+  @Override\n+  public Node endNode()\n+  {\n+    return new NodeProxy(proxySPI, nodes[nodes.length - 1]);\n+  }\n+\n+  @Override\n+  public Relationship lastRelationship()\n+  {\n+    return relationships.length == 0\n+        ? null\n+        : relationship(relationships.length - 1);\n+  }\n+\n+  private RelationshipProxy relationship(int offset)\n+  {\n+    int type = directedTypes[offset];\n+    if (type >= 0)\n     {\n-        int type = directedTypes[offset];\n-        if ( type >= 0 )\n-        {\n-            return new RelationshipProxy( proxySPI, relationships[offset], nodes[offset], type, nodes[offset + 1] );\n-        }\n-        else\n-        {\n-            return new RelationshipProxy( proxySPI, relationships[offset], nodes[offset + 1], ~type, nodes[offset] );\n-        }\n+      return new RelationshipProxy(proxySPI, relationships[offset], nodes[offset], type, nodes[offset + 1]);\n+    } else\n+    {\n+      return new RelationshipProxy(proxySPI, relationships[offset], nodes[offset + 1], ~type, nodes[offset]);\n     }\n+  }\n \n-    @Override\n-    public Iterable<Relationship> relationships()\n+  @Override\n+  public Iterable<Relationship> relationships()\n+  {\n+    return () -> new Iterator<Relationship>()\n     {\n-        return () -> new Iterator<Relationship>()\n-        {\n-            int i;\n+      int i;\n \n-            @Override\n-            public boolean hasNext()\n-            {\n-                return i < relationships.length;\n-            }\n+      @Override\n+      public boolean hasNext()\n+      {\n+        return i < relationships.length;\n+      }\n \n-            @Override\n-            public Relationship next()\n-            {\n-                return relationship( i++ );\n-            }\n-        };\n-    }\n+      @Override\n+      public Relationship next()\n+      {\n+        return relationship(i++);\n+      }\n+    };\n+  }\n \n-    @Override\n-    public Iterable<Relationship> reverseRelationships()\n+  @Override\n+  public Iterable<Relationship> reverseRelationships()\n+  {\n+    return () -> new Iterator<Relationship>()\n     {\n-        return () -> new Iterator<Relationship>()\n-        {\n-            int i = relationships.length;\n+      int i = relationships.length;\n \n-            @Override\n-            public boolean hasNext()\n-            {\n-                return i > 0;\n-            }\n+      @Override\n+      public boolean hasNext()\n+      {\n+        return i > 0;\n+      }\n \n-            @Override\n-            public Relationship next()\n-            {\n-                return relationship( --i );\n-            }\n-        };\n-    }\n+      @Override\n+      public Relationship next()\n+      {\n+        return relationship(--i);\n+      }\n+    };\n+  }\n \n-    @Override\n-    public Iterable<Node> nodes()\n+  @Override\n+  public Iterable<Node> nodes()\n+  {\n+    return () -> new Iterator<Node>()\n     {\n-        return () -> new Iterator<Node>()\n-        {\n-            int i;\n+      int i;\n \n-            @Override\n-            public boolean hasNext()\n-            {\n-                return i < nodes.length;\n-            }\n+      @Override\n+      public boolean hasNext()\n+      {\n+        return i < nodes.length;\n+      }\n \n-            @Override\n-            public Node next()\n-            {\n-                return new NodeProxy( proxySPI, nodes[i++] );\n-            }\n-        };\n-    }\n+      @Override\n+      public Node next()\n+      {\n+        return new NodeProxy(proxySPI, nodes[i++]);\n+      }\n+    };\n+  }\n \n-    @Override\n-    public Iterable<Node> reverseNodes()\n+  @Override\n+  public Iterable<Node> reverseNodes()\n+  {\n+    return () -> new Iterator<Node>()\n     {\n-        return () -> new Iterator<Node>()\n-        {\n-            int i = nodes.length;\n+      int i = nodes.length;\n \n-            @Override\n-            public boolean hasNext()\n-            {\n-                return i > 0;\n-            }\n+      @Override\n+      public boolean hasNext()\n+      {\n+        return i > 0;\n+      }\n \n-            @Override\n-            public Node next()\n-            {\n-                return new NodeProxy( proxySPI, nodes[--i] );\n-            }\n-        };\n-    }\n+      @Override\n+      public Node next()\n+      {\n+        return new NodeProxy(proxySPI, nodes[--i]);\n+      }\n+    };\n+  }\n \n-    @Override\n-    public int length()\n-    {\n-        return relationships.length;\n-    }\n+  @Override\n+  public int length()\n+  {\n+    return relationships.length;\n+  }\n \n-    @Override\n-    public Iterator<PropertyContainer> iterator()\n+  @Override\n+  public Iterator<PropertyContainer> iterator()\n+  {\n+    return new Iterator<PropertyContainer>()\n     {\n-        return new Iterator<PropertyContainer>()\n-        {\n-            int i;\n-            boolean relationship;\n+      int i;\n+      boolean relationship;\n \n-            @Override\n-            public boolean hasNext()\n-            {\n-                return i < relationships.length || !relationship;\n-            }\n+      @Override\n+      public boolean hasNext()\n+      {\n+        return i < relationships.length || !relationship;\n+      }\n \n-            @Override\n-            public PropertyContainer next()\n-            {\n-                if ( relationship )\n-                {\n-                    relationship = false;\n-                    return relationship( i++ );\n-                }\n-                else\n-                {\n-                    relationship = true;\n-                    return new NodeProxy( proxySPI, nodes[i] );\n-                }\n-            }\n-        };\n-    }\n+      @Override\n+      public PropertyContainer next()\n+      {\n+        if (relationship)\n+        {\n+          relationship = false;\n+          return relationship(i++);\n+        } else\n+        {\n+          relationship = true;\n+          return new NodeProxy(proxySPI, nodes[i]);\n+        }\n+      }\n+    };\n+  }\n }\n",
            "diff_size": 272
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "196",
                    "column": "25",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "238",
                    "column": "25",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/665/PathProxy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/665/PathProxy.java\nindex ec647985a1b..a90fa549cde 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/665/PathProxy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/665/PathProxy.java\n@@ -85,7 +85,8 @@ public class PathProxy implements Path\n             }\n             string.append( type < 0 ? \"]-(\" : \"]->(\" ).append( nodes[i + 1] ).append( ')' );\n         }\n-        return string.toString();\n+\n+return string.toString();\n     }\n \n     @Override\n@@ -108,7 +109,8 @@ public class PathProxy implements Path\n         {\n             return true;\n         }\n-        if ( obj instanceof PathProxy )\n+\n+if ( obj instanceof PathProxy )\n         {\n             PathProxy that = (PathProxy) obj;\n             return Arrays.equals( this.nodes, that.nodes ) && Arrays.equals( this.relationships, that.relationships );\n@@ -120,7 +122,8 @@ public class PathProxy implements Path\n             {\n                 return false;\n             }\n-            return iteratorsEqual( this.relationships().iterator(), other.relationships().iterator() );\n+\n+return iteratorsEqual( this.relationships().iterator(), other.relationships().iterator() );\n         }\n         else\n         {\n@@ -143,9 +146,7 @@ public class PathProxy implements Path\n     @Override\n     public Relationship lastRelationship()\n     {\n-        return relationships.length == 0\n-                ? null\n-                : relationship( relationships.length - 1 );\n+        return relationships.length == 0 ? null : relationship( relationships.length - 1 );\n     }\n \n     private RelationshipProxy relationship( int offset )\n@@ -192,7 +193,7 @@ public class PathProxy implements Path\n             @Override\n             public boolean hasNext()\n             {\n-                return i > 0;\n+                return i> 0;\n             }\n \n             @Override\n@@ -234,7 +235,7 @@ public class PathProxy implements Path\n             @Override\n             public boolean hasNext()\n             {\n-                return i > 0;\n+                return i> 0;\n             }\n \n             @Override\n@@ -281,4 +282,4 @@ public class PathProxy implements Path\n             }\n         };\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}