{
    "project_name": "CONNECT-Solution-CONNECT",
    "error_id": "973",
    "information": {
        "errors": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.auditquerylog;\n\nimport static gov.hhs.fha.nhinc.audit.retrieve.AuditRetrieveEventsUtil.getQueryAuditEventBlobResponse;\nimport static gov.hhs.fha.nhinc.audit.retrieve.AuditRetrieveEventsUtil.getQueryAuditEventResponse;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/973/AuditQueryLogImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/973/AuditQueryLogImpl.java\nindex 923467e84e6..e228ad43778 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/973/AuditQueryLogImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/973/AuditQueryLogImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.auditquerylog;\n \n import static gov.hhs.fha.nhinc.audit.retrieve.AuditRetrieveEventsUtil.getQueryAuditEventBlobResponse;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/973/AuditQueryLogImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/973/AuditQueryLogImpl.java\nindex 923467e84e6..44a96f4f74e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/973/AuditQueryLogImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/973/AuditQueryLogImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.auditquerylog;\n \n import static gov.hhs.fha.nhinc.audit.retrieve.AuditRetrieveEventsUtil.getQueryAuditEventBlobResponse;\n@@ -50,93 +51,86 @@ import org.slf4j.LoggerFactory;\n  */\n public class AuditQueryLogImpl {\n \n-    private AuditRepositoryDAO dao;\n-    private static final Logger LOG = LoggerFactory.getLogger(AuditQueryLogImpl.class);\n+  private AuditRepositoryDAO dao;\n+  private static final Logger LOG = LoggerFactory.getLogger(AuditQueryLogImpl.class);\n \n-    /**\n-     * constructor. initialize AuditRetrieveEventsUtil to build AuditQueryResponse\n-     */\n-    public AuditQueryLogImpl() {\n-    }\n+  /**\n+   * constructor. initialize AuditRetrieveEventsUtil to build AuditQueryResponse\n+   */\n+  public AuditQueryLogImpl() {\n+  }\n \n-    /**\n-     *\n-     * @param request - Audit Search params will be provided by this requestAuditEvents. The Request may have Event\n-     *            startDate, Event EndDate, UserId, Remote Org Id and ServiceName/EventType.These are optional\n-     *            parameters. If none of them is provided all records will be retrieved.\n-     * @return QueryAuditEventsResponseType - The Response will be having EventType or ServiceName, EventStatus- Success\n-     *         or Failure, Event Timestamp, UserId(Human who initiated transaction), Direction (Outbound/Inbound),\n-     *         MessageID -RequestMessageID, RelatesTo (Relates the DeferredRequests and DeferredResponses, Remote\n-     *         Organization Id and Audit Id.\n-     *\n-     */\n-    public QueryAuditEventsResponseType queryAuditEvents(QueryAuditEventsRequestType request) {\n-        return getQueryAuditEventResponse(\n-            getAuditRepositoryDao().queryByAuditOptions(getEventTypes(request.getEventTypeList()),\n-                request.getUserId(), getRemoteHcids(request.getRemoteHcidList()),\n-                getRequestDate(request.getEventBeginDate()), getRequestDate(request.getEventEndDate())));\n+  /**\n+   * @param request - Audit Search params will be provided by this requestAuditEvents. The Request may have Event\n+   *                startDate, Event EndDate, UserId, Remote Org Id and ServiceName/EventType.These are optional\n+   *                parameters. If none of them is provided all records will be retrieved.\n+   * @return QueryAuditEventsResponseType - The Response will be having EventType or ServiceName, EventStatus- Success\n+   * or Failure, Event Timestamp, UserId(Human who initiated transaction), Direction (Outbound/Inbound),\n+   * MessageID -RequestMessageID, RelatesTo (Relates the DeferredRequests and DeferredResponses, Remote\n+   * Organization Id and Audit Id.\n+   */\n+  public QueryAuditEventsResponseType queryAuditEvents(QueryAuditEventsRequestType request) {\n+    return getQueryAuditEventResponse(\n+        getAuditRepositoryDao().queryByAuditOptions(getEventTypes(request.getEventTypeList()),\n+            request.getUserId(), getRemoteHcids(request.getRemoteHcidList()),\n+            getRequestDate(request.getEventBeginDate()), getRequestDate(request.getEventEndDate())));\n \n-    }\n+  }\n \n-    /**\n-     *\n-     * @param request - Audit search params MessageId and RelatesTo will be provided by Request. These are optional\n-     *            fields in requestAuditEvents\n-     * @return QueryAuditEventsResponseType - The Response will be having EventType or ServiceName, EventStatus- Success\n-     *         or Failure, Event Timestamp, UserId(Human who initiated transaction), Direction (Outbound/Inbound),\n-     *         MessageID -RequestMessageID, RelatesTo (Relates the DeferredRequests and DeferredResponses, Remote\n-     *         Organization Id and Audit Id.\n-     *\n-     */\n-    public QueryAuditEventsResponseType queryAuditEventsByMessageIdAndRelatesTo(\n-        QueryAuditEventsRequestByRequestMessageId request) {\n-        return getQueryAuditEventResponse(\n-            getAuditRepositoryDao().queryAuditRecords(request.getRequestMessageId(), request.getRelatesTo()));\n-    }\n+  /**\n+   * @param request - Audit search params MessageId and RelatesTo will be provided by Request. These are optional\n+   *                fields in requestAuditEvents\n+   * @return QueryAuditEventsResponseType - The Response will be having EventType or ServiceName, EventStatus- Success\n+   * or Failure, Event Timestamp, UserId(Human who initiated transaction), Direction (Outbound/Inbound),\n+   * MessageID -RequestMessageID, RelatesTo (Relates the DeferredRequests and DeferredResponses, Remote\n+   * Organization Id and Audit Id.\n+   */\n+  public QueryAuditEventsResponseType queryAuditEventsByMessageIdAndRelatesTo(\n+      QueryAuditEventsRequestByRequestMessageId request) {\n+    return getQueryAuditEventResponse(\n+        getAuditRepositoryDao().queryAuditRecords(request.getRequestMessageId(), request.getRelatesTo()));\n+  }\n \n-    /**\n-     *\n-     * @param request - Audit search params. Audit Id will be provided by requestAuditEvents.\n-     * @return QueryAuditEventsBlobResponse - Response will be having only Audit Blob message.\n-     *\n-     */\n-    public QueryAuditEventsBlobResponse queryAuditEventsById(QueryAuditEventsBlobRequest request) {\n-        return getQueryAuditEventBlobResponse(getAuditRepositoryDao().queryByAuditId(request.getId()));\n-    }\n+  /**\n+   * @param request - Audit search params. Audit Id will be provided by requestAuditEvents.\n+   * @return QueryAuditEventsBlobResponse - Response will be having only Audit Blob message.\n+   */\n+  public QueryAuditEventsBlobResponse queryAuditEventsById(QueryAuditEventsBlobRequest request) {\n+    return getQueryAuditEventBlobResponse(getAuditRepositoryDao().queryByAuditId(request.getId()));\n+  }\n \n-    /**\n-     *\n-     * @return AuditRepositoryDAO Instance of AuditRepositoryDAO to query audit events.\n-     */\n-    protected AuditRepositoryDAO getAuditRepositoryDao() {\n-        if (dao == null) {\n-            dao = new AuditRepositoryDAO();\n-        }\n-        return dao;\n+  /**\n+   * @return AuditRepositoryDAO Instance of AuditRepositoryDAO to query audit events.\n+   */\n+  protected AuditRepositoryDAO getAuditRepositoryDao() {\n+    if (dao == null) {\n+      dao = new AuditRepositoryDAO();\n     }\n+    return dao;\n+  }\n \n-    private Date getRequestDate(XMLGregorianCalendar dateObj) {\n-        if (dateObj != null) {\n-            LOG.info(\"Converting XMLGregorianCalendar to a date object\");\n-            LOG.info(\"{}-{}-{} {}:{}:{} {}\", dateObj.getMonth(), dateObj.getDay(), dateObj.getYear(), dateObj.getHour(),\n-                dateObj.getMinute(), dateObj.getSecond(), dateObj.getTimezone());\n-            return new Date(dateObj.toGregorianCalendar().getTimeInMillis());\n-        }\n-        return null;\n+  private Date getRequestDate(XMLGregorianCalendar dateObj) {\n+    if (dateObj != null) {\n+      LOG.info(\"Converting XMLGregorianCalendar to a date object\");\n+      LOG.info(\"{}-{}-{} {}:{}:{} {}\", dateObj.getMonth(), dateObj.getDay(), dateObj.getYear(), dateObj.getHour(),\n+          dateObj.getMinute(), dateObj.getSecond(), dateObj.getTimezone());\n+      return new Date(dateObj.toGregorianCalendar().getTimeInMillis());\n     }\n+    return null;\n+  }\n \n-    private List<String> getEventTypes(EventTypeList eventList) {\n-        if (eventList != null) {\n-            return eventList.getEventType();\n-        }\n-        return null;\n+  private List<String> getEventTypes(EventTypeList eventList) {\n+    if (eventList != null) {\n+      return eventList.getEventType();\n     }\n+    return null;\n+  }\n \n-    private List<String> getRemoteHcids(RemoteHcidList remoteHcidList) {\n-        if (remoteHcidList != null) {\n-            return remoteHcidList.getRemoteHcid();\n-        }\n-        return null;\n+  private List<String> getRemoteHcids(RemoteHcidList remoteHcidList) {\n+    if (remoteHcidList != null) {\n+      return remoteHcidList.getRemoteHcid();\n     }\n+    return null;\n+  }\n \n }\n",
            "diff_size": 84
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 284).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "89",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "117",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 186).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/973/AuditQueryLogImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/973/AuditQueryLogImpl.java\nindex 923467e84e6..c22dfab0143 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/973/AuditQueryLogImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/973/AuditQueryLogImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.auditquerylog;\n \n import static gov.hhs.fha.nhinc.audit.retrieve.AuditRetrieveEventsUtil.getQueryAuditEventBlobResponse;\n@@ -71,11 +72,7 @@ public class AuditQueryLogImpl {\n      *\n      */\n     public QueryAuditEventsResponseType queryAuditEvents(QueryAuditEventsRequestType request) {\n-        return getQueryAuditEventResponse(\n-            getAuditRepositoryDao().queryByAuditOptions(getEventTypes(request.getEventTypeList()),\n-                request.getUserId(), getRemoteHcids(request.getRemoteHcidList()),\n-                getRequestDate(request.getEventBeginDate()), getRequestDate(request.getEventEndDate())));\n-\n+        return getQueryAuditEventResponse(getAuditRepositoryDao().queryByAuditOptions(getEventTypes(request.getEventTypeList()), request.getUserId(), getRemoteHcids(request.getRemoteHcidList()), getRequestDate(request.getEventBeginDate()), getRequestDate(request.getEventEndDate())));\n     }\n \n     /**\n@@ -88,10 +85,8 @@ public class AuditQueryLogImpl {\n      *         Organization Id and Audit Id.\n      *\n      */\n-    public QueryAuditEventsResponseType queryAuditEventsByMessageIdAndRelatesTo(\n-        QueryAuditEventsRequestByRequestMessageId request) {\n-        return getQueryAuditEventResponse(\n-            getAuditRepositoryDao().queryAuditRecords(request.getRequestMessageId(), request.getRelatesTo()));\n+    public QueryAuditEventsResponseType queryAuditEventsByMessageIdAndRelatesTo(QueryAuditEventsRequestByRequestMessageId request) {\n+    return getQueryAuditEventResponse(getAuditRepositoryDao().queryAuditRecords(request.getRequestMessageId(), request.getRelatesTo()));\n     }\n \n     /**\n@@ -111,32 +106,36 @@ public class AuditQueryLogImpl {\n     protected AuditRepositoryDAO getAuditRepositoryDao() {\n         if (dao == null) {\n             dao = new AuditRepositoryDAO();\n-        }\n+\n+    }\n         return dao;\n     }\n \n     private Date getRequestDate(XMLGregorianCalendar dateObj) {\n         if (dateObj != null) {\n             LOG.info(\"Converting XMLGregorianCalendar to a date object\");\n-            LOG.info(\"{}-{}-{} {}:{}:{} {}\", dateObj.getMonth(), dateObj.getDay(), dateObj.getYear(), dateObj.getHour(),\n-                dateObj.getMinute(), dateObj.getSecond(), dateObj.getTimezone());\n-            return new Date(dateObj.toGregorianCalendar().getTimeInMillis());\n-        }\n+            LOG.info(\"{}-{}-{} {}:{}:{} {}\", dateObj.getMonth(), dateObj.getDay(), dateObj.getYear(), dateObj.getHour(), dateObj.getMinute(), dateObj.getSecond(), dateObj.getTimezone());\n+\n+return new Date(dateObj.toGregorianCalendar().getTimeInMillis());\n+\n+    }\n         return null;\n     }\n \n     private List<String> getEventTypes(EventTypeList eventList) {\n         if (eventList != null) {\n             return eventList.getEventType();\n-        }\n+\n+    }\n         return null;\n     }\n \n     private List<String> getRemoteHcids(RemoteHcidList remoteHcidList) {\n         if (remoteHcidList != null) {\n             return remoteHcidList.getRemoteHcid();\n-        }\n+\n+    }\n         return null;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 22
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 284).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "94",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "125",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 186).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/973/AuditQueryLogImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/973/AuditQueryLogImpl.java\nindex 923467e84e6..bd88688bc66 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/973/AuditQueryLogImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/973/AuditQueryLogImpl.java\n@@ -28,7 +28,6 @@ package gov.hhs.fha.nhinc.auditquerylog;\n \n import static gov.hhs.fha.nhinc.audit.retrieve.AuditRetrieveEventsUtil.getQueryAuditEventBlobResponse;\n import static gov.hhs.fha.nhinc.audit.retrieve.AuditRetrieveEventsUtil.getQueryAuditEventResponse;\n-\n import gov.hhs.fha.nhinc.auditrepository.hibernate.AuditRepositoryDAO;\n import gov.hhs.fha.nhinc.common.auditquerylog.EventTypeList;\n import gov.hhs.fha.nhinc.common.auditquerylog.QueryAuditEventsBlobRequest;\n@@ -48,6 +47,8 @@ import org.slf4j.LoggerFactory;\n  *\n  * @author tjafri\n  */\n+\n+\n public class AuditQueryLogImpl {\n \n     private AuditRepositoryDAO dao;\n@@ -56,6 +57,7 @@ public class AuditQueryLogImpl {\n     /**\n      * constructor. initialize AuditRetrieveEventsUtil to build AuditQueryResponse\n      */\n+\n     public AuditQueryLogImpl() {\n     }\n \n@@ -70,12 +72,10 @@ public class AuditQueryLogImpl {\n      *         Organization Id and Audit Id.\n      *\n      */\n-    public QueryAuditEventsResponseType queryAuditEvents(QueryAuditEventsRequestType request) {\n-        return getQueryAuditEventResponse(\n-            getAuditRepositoryDao().queryByAuditOptions(getEventTypes(request.getEventTypeList()),\n-                request.getUserId(), getRemoteHcids(request.getRemoteHcidList()),\n-                getRequestDate(request.getEventBeginDate()), getRequestDate(request.getEventEndDate())));\n \n+\n+    public QueryAuditEventsResponseType queryAuditEvents(QueryAuditEventsRequestType request) {\n+        return getQueryAuditEventResponse(getAuditRepositoryDao().queryByAuditOptions(getEventTypes(request.getEventTypeList()), request.getUserId(), getRemoteHcids(request.getRemoteHcidList()), getRequestDate(request.getEventBeginDate()), getRequestDate(request.getEventEndDate())));\n     }\n \n     /**\n@@ -88,10 +88,10 @@ public class AuditQueryLogImpl {\n      *         Organization Id and Audit Id.\n      *\n      */\n-    public QueryAuditEventsResponseType queryAuditEventsByMessageIdAndRelatesTo(\n-        QueryAuditEventsRequestByRequestMessageId request) {\n-        return getQueryAuditEventResponse(\n-            getAuditRepositoryDao().queryAuditRecords(request.getRequestMessageId(), request.getRelatesTo()));\n+\n+\n+    public QueryAuditEventsResponseType queryAuditEventsByMessageIdAndRelatesTo(QueryAuditEventsRequestByRequestMessageId request) {\n+        return getQueryAuditEventResponse(getAuditRepositoryDao().queryAuditRecords(request.getRequestMessageId(), request.getRelatesTo()));\n     }\n \n     /**\n@@ -100,6 +100,8 @@ public class AuditQueryLogImpl {\n      * @return QueryAuditEventsBlobResponse - Response will be having only Audit Blob message.\n      *\n      */\n+\n+\n     public QueryAuditEventsBlobResponse queryAuditEventsById(QueryAuditEventsBlobRequest request) {\n         return getQueryAuditEventBlobResponse(getAuditRepositoryDao().queryByAuditId(request.getId()));\n     }\n@@ -108,6 +110,8 @@ public class AuditQueryLogImpl {\n      *\n      * @return AuditRepositoryDAO Instance of AuditRepositoryDAO to query audit events.\n      */\n+\n+\n     protected AuditRepositoryDAO getAuditRepositoryDao() {\n         if (dao == null) {\n             dao = new AuditRepositoryDAO();\n@@ -118,8 +122,7 @@ public class AuditQueryLogImpl {\n     private Date getRequestDate(XMLGregorianCalendar dateObj) {\n         if (dateObj != null) {\n             LOG.info(\"Converting XMLGregorianCalendar to a date object\");\n-            LOG.info(\"{}-{}-{} {}:{}:{} {}\", dateObj.getMonth(), dateObj.getDay(), dateObj.getYear(), dateObj.getHour(),\n-                dateObj.getMinute(), dateObj.getSecond(), dateObj.getTimezone());\n+            LOG.info(\"{}-{}-{} {}:{}:{} {}\", dateObj.getMonth(), dateObj.getDay(), dateObj.getYear(), dateObj.getHour(), dateObj.getMinute(), dateObj.getSecond(), dateObj.getTimezone());\n             return new Date(dateObj.toGregorianCalendar().getTimeInMillis());\n         }\n         return null;\n@@ -139,4 +142,4 @@ public class AuditQueryLogImpl {\n         return null;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 23
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'import' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "27",
                    "severity": "error",
                    "message": "import statement should not be line-wrapped.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoLineWrapCheck"
                },
                {
                    "line": "27",
                    "column": "41",
                    "severity": "error",
                    "message": "';' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/973/AuditQueryLogImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_random/973/AuditQueryLogImpl.java\nindex 923467e84e6..c955436fedc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/973/AuditQueryLogImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_random/973/AuditQueryLogImpl.java\n@@ -24,9 +24,9 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n-package gov.hhs.fha.nhinc.auditquerylog;\n+package gov.hhs.fha.nhinc.auditquerylog;import\n \n-import static gov.hhs.fha.nhinc.audit.retrieve.AuditRetrieveEventsUtil.getQueryAuditEventBlobResponse;\n+static gov.hhs.fha.nhinc.audit.retrieve.AuditRetrieveEventsUtil.getQueryAuditEventBlobResponse;\n import static gov.hhs.fha.nhinc.audit.retrieve.AuditRetrieveEventsUtil.getQueryAuditEventResponse;\n \n import gov.hhs.fha.nhinc.auditrepository.hibernate.AuditRepositoryDAO;\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/973/AuditQueryLogImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/973/AuditQueryLogImpl.java\nindex 923467e84e6..e228ad43778 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/973/AuditQueryLogImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/973/AuditQueryLogImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.auditquerylog;\n \n import static gov.hhs.fha.nhinc.audit.retrieve.AuditRetrieveEventsUtil.getQueryAuditEventBlobResponse;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}