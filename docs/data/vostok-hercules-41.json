{
    "project_name": "vostok-hercules",
    "error_id": "41",
    "information": {
        "errors": [
            {
                "line": "199",
                "column": "9",
                "severity": "warning",
                "message": "'for' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "    public void writeNullVector(Object[] vector) {\n        writeVectorLength(vector.length);\n        for(int i = 0; i < vector.length; i++) {\n            writeNull();\n        }\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/41/Encoder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler/41/Encoder.java\nindex 36051de05e2..7d4024c41af 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/41/Encoder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler/41/Encoder.java\n@@ -196,7 +196,7 @@ public class Encoder {\n \n     public void writeNullVector(Object[] vector) {\n         writeVectorLength(vector.length);\n-        for(int i = 0; i < vector.length; i++) {\n+        for (int i = 0; i < vector.length; i++) {\n             writeNull();\n         }\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/41/Encoder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/intellij/41/Encoder.java\nindex 36051de05e2..e96bae0a9cc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/41/Encoder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/intellij/41/Encoder.java\n@@ -11,284 +11,284 @@ import java.util.UUID;\n \n public class Encoder {\n \n-    private final DataOutputStream stream;\n+  private final DataOutputStream stream;\n \n-    public Encoder(OutputStream stream) {\n-        this.stream = new DataOutputStream(stream);\n-    }\n-\n-    public void writeByte(byte b) {\n-        try {\n-            stream.writeByte(b);\n-        } catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-    public void writeUnsignedByte(int b) {\n-        try {\n-            stream.write((byte) b);\n-        } catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-    public void writeShort(short s) {\n-        try {\n-            stream.writeShort(s);\n-        } catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-    public void writeUnsignedShort(int s) {\n-        try {\n-            stream.writeShort(s);\n-        } catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-    public void writeInteger(int i) {\n-        try {\n-            stream.writeInt(i);\n-        } catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n+  public Encoder(OutputStream stream) {\n+    this.stream = new DataOutputStream(stream);\n+  }\n \n-    public void writeLong(long l) {\n-        try {\n-            stream.writeLong(l);\n-        } catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n+  public void writeByte(byte b) {\n+    try {\n+      stream.writeByte(b);\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n \n-    public void writeFlag(boolean flag) {\n-        writeByte(flag ? (byte) 1 : (byte) 0);\n+  public void writeUnsignedByte(int b) {\n+    try {\n+      stream.write((byte) b);\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n     }\n+  }\n \n-    public void writeFloat(float f) {\n-        try {\n-            stream.writeFloat(f);\n-        } catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n+  public void writeShort(short s) {\n+    try {\n+      stream.writeShort(s);\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n     }\n+  }\n \n-    public void writeDouble(double d) {\n-        try {\n-            stream.writeDouble(d);\n-        } catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n+  public void writeUnsignedShort(int s) {\n+    try {\n+      stream.writeShort(s);\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n     }\n+  }\n \n-    public void writeString(String s) {\n-        byte[] bytes = s.getBytes(StandardCharsets.UTF_8);\n-        writeBytesAsString(bytes);\n+  public void writeInteger(int i) {\n+    try {\n+      stream.writeInt(i);\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n     }\n+  }\n \n-    public void writeBytesAsString(byte[] bytes) {\n-        try {\n-            writeStringLength(bytes.length);\n-            stream.write(bytes);\n-        } catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n+  public void writeLong(long l) {\n+    try {\n+      stream.writeLong(l);\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n     }\n+  }\n \n-    public void writeUuid(UUID uuid) {\n-        try {\n-            stream.writeLong(uuid.getMostSignificantBits());\n-            stream.writeLong(uuid.getLeastSignificantBits());\n-        } catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n+  public void writeFlag(boolean flag) {\n+    writeByte(flag ? (byte) 1 : (byte) 0);\n+  }\n \n-    public void writeNull() {\n+  public void writeFloat(float f) {\n+    try {\n+      stream.writeFloat(f);\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n     }\n+  }\n \n-    public void writeType(Type type) {\n-        writeUnsignedByte(type.code);\n+  public void writeDouble(double d) {\n+    try {\n+      stream.writeDouble(d);\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n     }\n+  }\n \n-    public void writeByteVector(byte[] vector) {\n-        try {\n-            writeVectorLength(vector.length);\n-            stream.write(vector);\n-        } catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n+  public void writeString(String s) {\n+    byte[] bytes = s.getBytes(StandardCharsets.UTF_8);\n+    writeBytesAsString(bytes);\n+  }\n \n-    public void writeUnsignedByteVector(int[] vector) {\n-        writeVectorLength(vector.length);\n-        for (int ub : vector) {\n-            writeUnsignedByte(ub);\n-        }\n+  public void writeBytesAsString(byte[] bytes) {\n+    try {\n+      writeStringLength(bytes.length);\n+      stream.write(bytes);\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n     }\n+  }\n \n-    public void writeShortVector(short[] vector) {\n-        writeVectorLength(vector.length);\n-        for (short s : vector) {\n-            writeShort(s);\n-        }\n+  public void writeUuid(UUID uuid) {\n+    try {\n+      stream.writeLong(uuid.getMostSignificantBits());\n+      stream.writeLong(uuid.getLeastSignificantBits());\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n     }\n+  }\n \n-    public void writeIntegerVector(int[] vector) {\n-        writeVectorLength(vector.length);\n-        for (int i : vector) {\n-            writeInteger(i);\n-        }\n-    }\n+  public void writeNull() {\n+  }\n \n-    public void writeLongVector(long[] vector) {\n-        writeVectorLength(vector.length);\n-        for (long l : vector) {\n-            writeLong(l);\n-        }\n-    }\n+  public void writeType(Type type) {\n+    writeUnsignedByte(type.code);\n+  }\n \n-    public void writeFlagVector(boolean[] vector) {\n-        writeVectorLength(vector.length);\n-        for (boolean b : vector) {\n-            writeFlag(b);\n-        }\n+  public void writeByteVector(byte[] vector) {\n+    try {\n+      writeVectorLength(vector.length);\n+      stream.write(vector);\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n     }\n+  }\n \n-    public void writeFloatVector(float[] vector) {\n-        writeVectorLength(vector.length);\n-        for (float f : vector) {\n-            writeFloat(f);\n-        }\n+  public void writeUnsignedByteVector(int[] vector) {\n+    writeVectorLength(vector.length);\n+    for (int ub : vector) {\n+      writeUnsignedByte(ub);\n     }\n+  }\n \n-    public void writeDoubleVector(double[] vector) {\n-        writeVectorLength(vector.length);\n-        for (double d : vector) {\n-            writeDouble(d);\n-        }\n+  public void writeShortVector(short[] vector) {\n+    writeVectorLength(vector.length);\n+    for (short s : vector) {\n+      writeShort(s);\n     }\n+  }\n \n-    public void writeStringVector(String[] vector) {\n-        writeVectorLength(vector.length);\n-        for (String s : vector) {\n-            writeString(s);\n-        }\n+  public void writeIntegerVector(int[] vector) {\n+    writeVectorLength(vector.length);\n+    for (int i : vector) {\n+      writeInteger(i);\n     }\n+  }\n \n-    public void writeBytesAsStringVector(byte[][] strings) {\n-        writeVectorLength(strings.length);\n-        for (byte[] string : strings) {\n-            writeBytesAsString(string);\n-        }\n+  public void writeLongVector(long[] vector) {\n+    writeVectorLength(vector.length);\n+    for (long l : vector) {\n+      writeLong(l);\n     }\n+  }\n \n-    public void writeUuidVector(UUID[] vector) {\n-        writeVectorLength(vector.length);\n-        for (UUID uuid : vector) {\n-            writeUuid(uuid);\n-        }\n-    }\n-\n-    public void writeNullVector(Object[] vector) {\n-        writeVectorLength(vector.length);\n-        for(int i = 0; i < vector.length; i++) {\n-            writeNull();\n-        }\n-    }\n-\n-    public void writeRawBytes(byte[] bytes) {\n-        try {\n-            stream.write(bytes);\n-        } catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-    /* --- Utility methods --- */\n-\n-    /**\n-     * Write tiny string, which has 1-byte length\n-     *\n-     * @param s is tiny string\n-     */\n-    public void writeTinyString(String s) {\n-        byte[] bytes = s.getBytes(StandardCharsets.UTF_8);\n-        if (bytes.length > 255) {\n-            throw new IllegalArgumentException(\"Length of tiny string should be less or equal 255 but got \" + bytes.length);\n-        }\n-        writeUnsignedByte(bytes.length);\n-        try {\n-            stream.write(bytes);\n-        } catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-    public void writeVarLen(int value) {\n-        if (value < 0) {\n-            throw new IllegalArgumentException(\"Cannot encode negative value: \" + value);\n-        }\n-\n-        try {\n-            byte lsb1 = (byte) (value & 0x7F);\n-            value = value >> 7;\n-            if (value == 0) {\n-                stream.write(lsb1);\n-                return;\n-            }\n-\n-            byte lsb2 = (byte) (value & 0x7F);\n-            value = value >> 7;\n-            if (value == 0) {\n-                stream.write(lsb2 | 0x80);\n-                stream.write(lsb1);\n-                return;\n-            }\n-\n-            byte lsb3 = (byte) (value & 0x7F);\n-            value = value >> 7;\n-            if (value == 0) {\n-                stream.write(lsb3 | 0x80);\n-                stream.write(lsb2 | 0x80);\n-                stream.write(lsb1);\n-                return;\n-            }\n-\n-            byte lsb4 = (byte) (value & 0x7F);\n-            value = value >> 7;\n-            if (value == 0) {\n-                stream.write(lsb4 | 0x80);\n-                stream.write(lsb3 | 0x80);\n-                stream.write(lsb2 | 0x80);\n-                stream.write(lsb1);\n-                return;\n-            }\n-\n-            byte lsb5 = (byte) (value & 0x7F);\n-            stream.write(lsb5 | 0x80);\n-            stream.write(lsb4 | 0x80);\n-            stream.write(lsb3 | 0x80);\n-            stream.write(lsb2 | 0x80);\n-            stream.write(lsb1);\n-        } catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-    public void writeVectorLength(int length) {\n-        writeInteger(length);\n-    }\n-\n-    public void writeStringLength(int length) {\n-        writeInteger(length);\n-    }\n-\n-    public void writeContainerSize(int size) {\n-        writeUnsignedShort(size);\n-    }\n+  public void writeFlagVector(boolean[] vector) {\n+    writeVectorLength(vector.length);\n+    for (boolean b : vector) {\n+      writeFlag(b);\n+    }\n+  }\n+\n+  public void writeFloatVector(float[] vector) {\n+    writeVectorLength(vector.length);\n+    for (float f : vector) {\n+      writeFloat(f);\n+    }\n+  }\n+\n+  public void writeDoubleVector(double[] vector) {\n+    writeVectorLength(vector.length);\n+    for (double d : vector) {\n+      writeDouble(d);\n+    }\n+  }\n+\n+  public void writeStringVector(String[] vector) {\n+    writeVectorLength(vector.length);\n+    for (String s : vector) {\n+      writeString(s);\n+    }\n+  }\n+\n+  public void writeBytesAsStringVector(byte[][] strings) {\n+    writeVectorLength(strings.length);\n+    for (byte[] string : strings) {\n+      writeBytesAsString(string);\n+    }\n+  }\n+\n+  public void writeUuidVector(UUID[] vector) {\n+    writeVectorLength(vector.length);\n+    for (UUID uuid : vector) {\n+      writeUuid(uuid);\n+    }\n+  }\n+\n+  public void writeNullVector(Object[] vector) {\n+    writeVectorLength(vector.length);\n+    for (int i = 0; i < vector.length; i++) {\n+      writeNull();\n+    }\n+  }\n+\n+  public void writeRawBytes(byte[] bytes) {\n+    try {\n+      stream.write(bytes);\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+\n+  /* --- Utility methods --- */\n+\n+  /**\n+   * Write tiny string, which has 1-byte length\n+   *\n+   * @param s is tiny string\n+   */\n+  public void writeTinyString(String s) {\n+    byte[] bytes = s.getBytes(StandardCharsets.UTF_8);\n+    if (bytes.length > 255) {\n+      throw new IllegalArgumentException(\"Length of tiny string should be less or equal 255 but got \" + bytes.length);\n+    }\n+    writeUnsignedByte(bytes.length);\n+    try {\n+      stream.write(bytes);\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+\n+  public void writeVarLen(int value) {\n+    if (value < 0) {\n+      throw new IllegalArgumentException(\"Cannot encode negative value: \" + value);\n+    }\n+\n+    try {\n+      byte lsb1 = (byte) (value & 0x7F);\n+      value = value >> 7;\n+      if (value == 0) {\n+        stream.write(lsb1);\n+        return;\n+      }\n+\n+      byte lsb2 = (byte) (value & 0x7F);\n+      value = value >> 7;\n+      if (value == 0) {\n+        stream.write(lsb2 | 0x80);\n+        stream.write(lsb1);\n+        return;\n+      }\n+\n+      byte lsb3 = (byte) (value & 0x7F);\n+      value = value >> 7;\n+      if (value == 0) {\n+        stream.write(lsb3 | 0x80);\n+        stream.write(lsb2 | 0x80);\n+        stream.write(lsb1);\n+        return;\n+      }\n+\n+      byte lsb4 = (byte) (value & 0x7F);\n+      value = value >> 7;\n+      if (value == 0) {\n+        stream.write(lsb4 | 0x80);\n+        stream.write(lsb3 | 0x80);\n+        stream.write(lsb2 | 0x80);\n+        stream.write(lsb1);\n+        return;\n+      }\n+\n+      byte lsb5 = (byte) (value & 0x7F);\n+      stream.write(lsb5 | 0x80);\n+      stream.write(lsb4 | 0x80);\n+      stream.write(lsb3 | 0x80);\n+      stream.write(lsb2 | 0x80);\n+      stream.write(lsb1);\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+\n+  public void writeVectorLength(int length) {\n+    writeInteger(length);\n+  }\n+\n+  public void writeStringLength(int length) {\n+    writeInteger(length);\n+  }\n+\n+  public void writeContainerSize(int size) {\n+    writeUnsignedShort(size);\n+  }\n }\n",
            "diff_size": 309
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/41/Encoder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/naturalize/41/Encoder.java\nindex 36051de05e2..d0b45dfc57c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/41/Encoder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/naturalize/41/Encoder.java\n@@ -196,7 +196,7 @@ public class Encoder {\n \n     public void writeNullVector(Object[] vector) {\n         writeVectorLength(vector.length);\n-        for(int i = 0; i < vector.length; i++) {\n+        for (int i = 0; i < vector.length; i++) {\n             writeNull();\n         }\n     }\n@@ -291,4 +291,4 @@ public class Encoder {\n     public void writeContainerSize(int size) {\n         writeUnsignedShort(size);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/41/Encoder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/codebuff/41/Encoder.java\nindex 36051de05e2..1aab460b541 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/41/Encoder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/codebuff/41/Encoder.java\n@@ -1,7 +1,6 @@\n package ru.kontur.vostok.hercules.protocol.encoder;\n \n import ru.kontur.vostok.hercules.protocol.Type;\n-\n import java.io.DataOutputStream;\n import java.io.IOException;\n import java.io.OutputStream;\n@@ -66,7 +65,7 @@ public class Encoder {\n     }\n \n     public void writeFlag(boolean flag) {\n-        writeByte(flag ? (byte) 1 : (byte) 0);\n+        writeByte(flag ? (byte)1 : (byte)0);\n     }\n \n     public void writeFloat(float f) {\n@@ -109,6 +108,7 @@ public class Encoder {\n     }\n \n     public void writeNull() {\n+\n     }\n \n     public void writeType(Type type) {\n@@ -196,7 +196,7 @@ public class Encoder {\n \n     public void writeNullVector(Object[] vector) {\n         writeVectorLength(vector.length);\n-        for(int i = 0; i < vector.length; i++) {\n+        for (int i = 0; i < vector.length; i++) {\n             writeNull();\n         }\n     }\n@@ -216,12 +216,15 @@ public class Encoder {\n      *\n      * @param s is tiny string\n      */\n+\n     public void writeTinyString(String s) {\n         byte[] bytes = s.getBytes(StandardCharsets.UTF_8);\n         if (bytes.length > 255) {\n             throw new IllegalArgumentException(\"Length of tiny string should be less or equal 255 but got \" + bytes.length);\n         }\n+\n         writeUnsignedByte(bytes.length);\n+\n         try {\n             stream.write(bytes);\n         } catch (IOException e) {\n@@ -291,4 +294,4 @@ public class Encoder {\n     public void writeContainerSize(int size) {\n         writeUnsignedShort(size);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/41/Encoder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_random/41/Encoder.java\nindex 36051de05e2..7d4024c41af 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/41/Encoder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_random/41/Encoder.java\n@@ -196,7 +196,7 @@ public class Encoder {\n \n     public void writeNullVector(Object[] vector) {\n         writeVectorLength(vector.length);\n-        for(int i = 0; i < vector.length; i++) {\n+        for (int i = 0; i < vector.length; i++) {\n             writeNull();\n         }\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/41/Encoder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_three_grams/41/Encoder.java\nindex 36051de05e2..7d4024c41af 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/41/Encoder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_three_grams/41/Encoder.java\n@@ -196,7 +196,7 @@ public class Encoder {\n \n     public void writeNullVector(Object[] vector) {\n         writeVectorLength(vector.length);\n-        for(int i = 0; i < vector.length; i++) {\n+        for (int i = 0; i < vector.length; i++) {\n             writeNull();\n         }\n     }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}