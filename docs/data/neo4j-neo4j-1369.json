{
    "project_name": "neo4j-neo4j",
    "error_id": "1369",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "47",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "83",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1369/CombinedPartSeeker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1369/CombinedPartSeeker.java\nindex 4f61bea6d99..1640850f76b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1369/CombinedPartSeeker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1369/CombinedPartSeeker.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema;\n \n import java.io.IOException;\n@@ -31,24 +32,24 @@ import static org.neo4j.io.IOUtils.closeAll;\n /**\n  * Combines multiple {@link GBPTree} seekers into one seeker, keeping the total order among all keys.\n  *\n- * @param <KEY> type of key\n+ * @param <KEY>   type of key\n  * @param <VALUE> type of value\n  */\n-class CombinedPartSeeker<KEY,VALUE> implements Seeker<KEY,VALUE>\n+class CombinedPartSeeker<KEY, VALUE> implements Seeker<KEY, VALUE>\n {\n     private final KEY end;\n-    private final Seeker<KEY,VALUE>[] partCursors;\n+    private final Seeker<KEY, VALUE>[] partCursors;\n     private final Object[] partHeads;\n-    private final Layout<KEY,VALUE> layout;\n+    private final Layout<KEY, VALUE> layout;\n     private KEY nextKey;\n     private VALUE nextValue;\n \n-    CombinedPartSeeker( Layout<KEY,VALUE> layout, List<Seeker<KEY,VALUE>> parts )\n+    CombinedPartSeeker(Layout<KEY, VALUE> layout, List<Seeker<KEY, VALUE>> parts)\n     {\n         this.layout = layout;\n         int length = parts.size();\n         this.end = layout.newKey();\n-        this.partCursors = parts.toArray( new Seeker[0] );\n+        this.partCursors = parts.toArray(new Seeker[0]);\n         this.partHeads = new Object[length];\n     }\n \n@@ -57,32 +58,31 @@ class CombinedPartSeeker<KEY,VALUE> implements Seeker<KEY,VALUE>\n     {\n         // Pick lowest among all candidates\n         int nextKeyIndex = -1;\n-        for ( int i = 0; i < partCursors.length; i++ )\n+        for (int i = 0; i < partCursors.length; i++)\n         {\n             // Get candidate from already seen heads, if any\n             KEY candidate = (KEY) partHeads[i];\n-            if ( candidate == end )\n+            if (candidate == end)\n             {\n                 continue;\n             }\n \n             // Get candidate from seeker, if available\n-            if ( candidate == null )\n+            if (candidate == null)\n             {\n-                if ( partCursors[i].next() )\n+                if (partCursors[i].next())\n                 {\n                     partHeads[i] = candidate = partCursors[i].key();\n-                }\n-                else\n+                } else\n                 {\n                     partHeads[i] = end;\n                 }\n             }\n \n             // Was our candidate lower than lowest we've seen so far this round?\n-            if ( candidate != null )\n+            if (candidate != null)\n             {\n-                if ( nextKeyIndex == -1 || layout.compare( candidate, nextKey ) < 0 )\n+                if (nextKeyIndex == -1 || layout.compare(candidate, nextKey) < 0)\n                 {\n                     nextKey = candidate;\n                     nextKeyIndex = i;\n@@ -90,7 +90,7 @@ class CombinedPartSeeker<KEY,VALUE> implements Seeker<KEY,VALUE>\n             }\n         }\n \n-        if ( nextKeyIndex != -1 )\n+        if (nextKeyIndex != -1)\n         {\n             // We have a next key/value\n             nextValue = partCursors[nextKeyIndex].value();\n@@ -107,7 +107,7 @@ class CombinedPartSeeker<KEY,VALUE> implements Seeker<KEY,VALUE>\n     @Override\n     public void close() throws IOException\n     {\n-        closeAll( partCursors );\n+        closeAll(partCursors);\n     }\n \n     @Override\n",
            "diff_size": 17
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}