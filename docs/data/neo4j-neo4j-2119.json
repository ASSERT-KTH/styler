{
    "project_name": "neo4j-neo4j",
    "error_id": "2119",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "34",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "34",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "89",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2119/ByteCode.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2119/ByteCode.java\nindex 26ccb67a27f..d2bfb89af95 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2119/ByteCode.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2119/ByteCode.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.codegen.bytecode;\n \n import org.neo4j.codegen.CodeGenerationStrategy;\n@@ -30,15 +31,15 @@ public enum ByteCode implements CodeGeneratorOption\n     public static final CodeGenerationStrategy<?> BYTECODE = new CodeGenerationStrategy<Configuration>()\n     {\n         @Override\n-        protected Configuration createConfigurator( ClassLoader loader )\n+        protected Configuration createConfigurator(ClassLoader loader)\n         {\n             return new Configuration();\n         }\n \n         @Override\n-        protected CodeGenerator createCodeGenerator( ClassLoader loader, Configuration configuration )\n+        protected CodeGenerator createCodeGenerator(ClassLoader loader, Configuration configuration)\n         {\n-            return new ByteCodeGenerator( loader, configuration );\n+            return new ByteCodeGenerator(loader, configuration);\n         }\n \n         @Override\n@@ -47,19 +48,19 @@ public enum ByteCode implements CodeGeneratorOption\n             return \"BYTECODE\";\n         }\n     };\n-    public static final CodeGeneratorOption VERIFY_GENERATED_BYTECODE = load( \"Verifier\" );\n+    public static final CodeGeneratorOption VERIFY_GENERATED_BYTECODE = load(\"Verifier\");\n     public static final CodeGeneratorOption PRINT_BYTECODE = new DisassemblyVisitor()\n     {\n         @Override\n-        protected void visitDisassembly( String className, CharSequence disassembly )\n+        protected void visitDisassembly(String className, CharSequence disassembly)\n         {\n-            String[] lines = disassembly.toString().split( \"\\\\n\" );\n-            System.out.println( \"=== Generated class bytecode \" + className + \" ===\\n\" );\n-            for ( int i = 0; i < lines.length; i++ )\n+            String[] lines = disassembly.toString().split(\"\\\\n\");\n+            System.out.println(\"=== Generated class bytecode \" + className + \" ===\\n\");\n+            for (int i = 0; i < lines.length; i++)\n             {\n-                System.out.print( i + 1 );\n-                System.out.print( '\\t' );\n-                System.out.println( lines[i] );\n+                System.out.print(i + 1);\n+                System.out.print('\\t');\n+                System.out.println(lines[i]);\n             }\n         }\n \n@@ -71,22 +72,21 @@ public enum ByteCode implements CodeGeneratorOption\n     };\n \n     @Override\n-    public void applyTo( Object target )\n+    public void applyTo(Object target)\n     {\n-        if ( target instanceof Configuration )\n+        if (target instanceof Configuration)\n         {\n-            ((Configuration) target).withFlag( this );\n+            ((Configuration) target).withFlag(this);\n         }\n     }\n \n-    private static CodeGeneratorOption load( String option )\n+    private static CodeGeneratorOption load(String option)\n     {\n         try\n         {\n-            return (CodeGeneratorOption) Class.forName( ByteCode.class.getName() + option )\n-                                              .getDeclaredMethod( \"load\" + option ).invoke( null );\n-        }\n-        catch ( Throwable e )\n+            return (CodeGeneratorOption) Class.forName(ByteCode.class.getName() + option)\n+              .getDeclaredMethod(\"load\" + option).invoke(null);\n+        } catch (Throwable e)\n         {\n             return BLANK_OPTION;\n         }\n",
            "diff_size": 20
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}