{
    "project_name": "neo4j-neo4j",
    "error_id": "2522",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "109",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2522/GenericIndexKeyValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2522/GenericIndexKeyValidator.java\nindex f47aca4adf6..102c2733caf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2522/GenericIndexKeyValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2522/GenericIndexKeyValidator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema;\n \n import org.neo4j.common.TokenNameLookup;\n@@ -41,11 +42,11 @@ class GenericIndexKeyValidator implements IndexValueValidator\n {\n     private final IndexDescriptor descriptor;\n     private final int maxLength;\n-    private final Layout<GenericKey,NativeIndexValue> layout;\n+    private final Layout<GenericKey, NativeIndexValue> layout;\n     private final TokenNameLookup tokenNameLookup;\n \n-    GenericIndexKeyValidator( int maxLength, IndexDescriptor descriptor, Layout<GenericKey,NativeIndexValue> layout,\n-            TokenNameLookup tokenNameLookup )\n+    GenericIndexKeyValidator(int maxLength, IndexDescriptor descriptor, Layout<GenericKey, NativeIndexValue> layout,\n+                             TokenNameLookup tokenNameLookup)\n     {\n         this.maxLength = maxLength;\n         this.descriptor = descriptor;\n@@ -54,15 +55,15 @@ class GenericIndexKeyValidator implements IndexValueValidator\n     }\n \n     @Override\n-    public void validate( long entityId, Value... values )\n+    public void validate(long entityId, Value... values)\n     {\n-        int worstCaseSize = worstCaseLength( values );\n-        if ( worstCaseSize > maxLength )\n+        int worstCaseSize = worstCaseLength(values);\n+        if (worstCaseSize > maxLength)\n         {\n-            int size = actualLength( values );\n-            if ( size > maxLength )\n+            int size = actualLength(values);\n+            if (size > maxLength)\n             {\n-                IndexValueValidator.throwSizeViolationException( descriptor, tokenNameLookup, entityId, size, values );\n+                IndexValueValidator.throwSizeViolationException(descriptor, tokenNameLookup, entityId, size, values);\n             }\n         }\n     }\n@@ -74,60 +75,59 @@ class GenericIndexKeyValidator implements IndexValueValidator\n      * @param values the value tuple to calculate some exaggerated worst-case size of.\n      * @return the calculated worst-case size of the value tuple.\n      */\n-    private static int worstCaseLength( Value[] values )\n+    private static int worstCaseLength(Value[] values)\n     {\n         int length = Long.BYTES;\n-        for ( Value value : values )\n+        for (Value value : values)\n         {\n             // Add some generic overhead, slightly exaggerated\n             length += Long.BYTES;\n             // Add worst-case length of this value\n-            length += worstCaseLength( value );\n+            length += worstCaseLength(value);\n         }\n         return length;\n     }\n \n-    private static int worstCaseLength( AnyValue value )\n+    private static int worstCaseLength(AnyValue value)\n     {\n-        if ( value.isSequenceValue() )\n+        if (value.isSequenceValue())\n         {\n             SequenceValue sequenceValue = (SequenceValue) value;\n-            if ( sequenceValue instanceof TextArray )\n+            if (sequenceValue instanceof TextArray)\n             {\n                 TextArray textArray = (TextArray) sequenceValue;\n                 int length = 0;\n-                for ( int i = 0; i < textArray.length(); i++ )\n+                for (int i = 0; i < textArray.length(); i++)\n                 {\n-                    length += stringWorstCaseLength( textArray.stringValue( i ).length() );\n+                    length += stringWorstCaseLength(textArray.stringValue(i).length());\n                 }\n                 return length;\n             }\n             return sequenceValue.length() * BIGGEST_STATIC_SIZE;\n-        }\n-        else\n+        } else\n         {\n-            if ( ((Value) value).valueGroup().category() == ValueCategory.TEXT )\n+            if (((Value) value).valueGroup().category() == ValueCategory.TEXT)\n             {\n                 // For text, which is very dynamic in its nature do a worst-case off of number of characters in it\n-                return stringWorstCaseLength( ((TextValue) value).length() );\n+                return stringWorstCaseLength(((TextValue) value).length());\n             }\n             // For all else then use the biggest possible value for a non-dynamic, non-array value a state can occupy\n             return BIGGEST_STATIC_SIZE;\n         }\n     }\n \n-    private static int stringWorstCaseLength( int stringLength )\n+    private static int stringWorstCaseLength(int stringLength)\n     {\n         return GenericKey.SIZE_STRING_LENGTH + stringLength * 4;\n     }\n \n-    private int actualLength( Value[] values )\n+    private int actualLength(Value[] values)\n     {\n         GenericKey key = layout.newKey();\n-        key.initialize( 0 /*doesn't quite matter for size calculations, but an important method to call*/ );\n-        for ( int i = 0; i < values.length; i++ )\n+        key.initialize(0 /*doesn't quite matter for size calculations, but an important method to call*/);\n+        for (int i = 0; i < values.length; i++)\n         {\n-            key.initFromValue( i, values[i], NativeIndexKey.Inclusion.NEUTRAL );\n+            key.initFromValue(i, values[i], NativeIndexKey.Inclusion.NEUTRAL);\n         }\n         return key.size();\n     }\n",
            "diff_size": 27
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}