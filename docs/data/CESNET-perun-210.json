{
    "project_name": "CESNET-perun",
    "error_id": "210",
    "information": {
        "errors": [
            {
                "line": "1041",
                "severity": "error",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "\t *\n\t * \"members\" group is not included!\n\t * \n\t * @param member int <code>id</code> of member\n\t * @param attrNames List<String> if attrNames is null method will return RichGroups containing all attributes\n\t * @return List<RichGroup> RichGroups containing selected attributes",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1041",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/210/GroupsManagerMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/210/GroupsManagerMethod.java\nindex 34ffb195cce..3d05366314c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/210/GroupsManagerMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/210/GroupsManagerMethod.java\n@@ -1,6 +1,7 @@\n package cz.metacentrum.perun.rpc.methods;\n \n import cz.metacentrum.perun.core.api.Attribute;\n+\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n@@ -21,1143 +22,1103 @@ import cz.metacentrum.perun.rpc.deserializer.Deserializer;\n \n public enum GroupsManagerMethod implements ManagerMethod {\n \n-\t/*#\n-\t * Creates a subgroup of a group.\n-\t *\n-\t * @param parentGroup int Parent Group <code>id</code>\n-\t * @param group Group JSON Group class\n-\t * @return Group Newly created group\n-\t */\n-\t/*#\n-\t * Creates a subgroup of a group.\n-\t *\n-\t * @param parentGroup int Parent Group <code>id</code>\n-\t * @param name String name of a group\n-\t * @param description String description of a group\n-\t * @return Group Newly created group\n-\t */\n-\t/*#\n-\t * Creates a new group in the specific VO defined by object vo in parameter.\n-\t * Important: voId in object group is ignored.\n-\t *\n-\t * @param vo int Parent VO <code>id</code>\n-\t * @param group Group JSON Group class\n-\t * @return Group Newly created group\n-\t */\n-\t/*#\n-\t * Creates a new group in the specific VO.\n-\t *\n-\t * @param vo int Parent VO <code>id</code>\n-\t * @param name String name of a group\n-\t * @param description String description of a group\n-\t * @return Group Newly created group\n-\t */\n-\tcreateGroup {\n-\n-\t\t@Override\n-\t\tpublic Group call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tif (parms.contains(\"group\")) {\n-\t\t\t\tif (parms.contains(\"parentGroup\")) {\n-\t\t\t\t\treturn ac.getGroupsManager().createGroup(ac.getSession(),\n-\t\t\t\t\t\t\tac.getGroupById(parms.readInt(\"parentGroup\")),\n-\t\t\t\t\t\t\tparms.read(\"group\", Group.class));\n-\t\t\t\t} else if (parms.contains(\"vo\")) {\n-\t\t\t\t\tGroup group = parms.read(\"group\", Group.class);\n-\t\t\t\t\tif (group.getParentGroupId() == null) {\n-\t\t\t\t\t\treturn ac.getGroupsManager().createGroup(ac.getSession(),\n-\t\t\t\t\t\t\t\tac.getVoById(parms.readInt(\"vo\")),\n-\t\t\t\t\t\t\t\tgroup);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new RpcException(RpcException.Type.WRONG_PARAMETER, \"Top-level groups can't have parentGroupId set!\");\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new RpcException(RpcException.Type.MISSING_VALUE, \"vo or parentGroup\");\n-\t\t\t\t}\n-\t\t\t} else if (parms.contains(\"name\") && parms.contains(\"description\")) {\n-\t\t\t\tif (parms.contains(\"parentGroup\")) {\n-\t\t\t\t\tString name = parms.readString(\"name\");\n-\t\t\t\t\tString description = parms.readString(\"description\");\n-\t\t\t\t\tGroup group = new Group(name, description);\n-\t\t\t\t\treturn ac.getGroupsManager().createGroup(ac.getSession(),\n-\t\t\t\t\t\t\tac.getGroupById(parms.readInt(\"parentGroup\")),\n-\t\t\t\t\t\t\tgroup);\n-\t\t\t\t} else if (parms.contains(\"vo\")) {\n-\t\t\t\t\tString name = parms.readString(\"name\");\n-\t\t\t\t\tString description = parms.readString(\"description\");\n-\t\t\t\t\tGroup group = new Group(name, description);\n-\t\t\t\t\treturn ac.getGroupsManager().createGroup(ac.getSession(),\n-\t\t\t\t\t\t\tac.getVoById(parms.readInt(\"vo\")),\n-\t\t\t\t\t\t\tgroup);\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new RpcException(RpcException.Type.MISSING_VALUE, \"vo or parentGroup\");\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tthrow new RpcException(RpcException.Type.MISSING_VALUE, \"group or (name and description)\");\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Create union of two groups, where \"operandGroup\" is technically set as subgroup of \"resultGroup\".\n-\t * Members from \"operandGroup\" are added to \"resultGroup\" as INDIRECT members. Union is honored also\n-\t * in all group member changing operations.\n-\t *\n-\t * @param resultGroup int <code>id</code> of Group to have included \"operandGroup\"\n-\t * @param operandGroup int <code>id</code> of Group to be included into \"resultGroup\"\n-\t * @return Group Result group\n-\t */\n-\tcreateGroupUnion {\n-\n-\t\t@Override\n-\t\tpublic Group call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\treturn ac.getGroupsManager().createGroupUnion(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"resultGroup\")),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"operandGroup\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Deletes a group. Group is not deleted, if contains members or is assigned to any resource.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t */\n-\t/*#\n-\t * Forcefully deletes a group (remove all group members, remove group from resources).\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @param force boolean If true use force delete.\n-\t */\n-\tdeleteGroup {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tif(parms.contains(\"force\") && parms.readBoolean(\"force\")) {\n-\t\t\t\tac.getGroupsManager().deleteGroup(ac.getSession(),\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")), true);\n-\t\t\t\treturn null;\n-\t\t\t} else {\n-\t\t\t\tac.getGroupsManager().deleteGroup(ac.getSession(),\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")), false);\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Forcefully deletes a list of groups (remove all group members, remove group from resources).\n-\t *\n-\t * @param groups int[] Array of Group IDs\n-\t * @param forceDelete boolean If true use force delete.\n-\t */\n-\tdeleteGroups {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\t//TODO: optimalizovat?\n-\t\t\tint[] ids = parms.readArrayOfInts(\"groups\");\n-\t\t\tList<Group> groups = new ArrayList<>(ids.length);\n-\t\t\tfor (int i : ids) {\n-\t\t\t\tgroups.add(ac.getGroupById(i));\n-\t\t\t}\n-\n-\t\t\tac.getGroupsManager().deleteGroups(ac.getSession(),\n-\t\t\t\t\tgroups,\n-\t\t\t\t\tparms.readBoolean(\"forceDelete\"));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Removes union of two groups, when \"operandGroup\" is technically removed from subgroups of \"resultGroup\".\n-\t * Members from \"operandGroup\" are removed from \"resultGroup\" if they were INDIRECT members sourcing from this group only.\n-\t *\n-\t * @param resultGroup int <code>id</code> of Group to have removed \"operandGroup\" from subgroups\n-\t * @param operandGroup int <code>id</code> of Group to be removed from \"resultGroup\" subgroups\n-\t */\n-\tremoveGroupUnion {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tac.getGroupsManager().removeGroupUnion(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"resultGroup\")),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"operandGroup\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Updates a group.\n-\t *\n-\t * @param group Group JSON Group class\n-\t * @return Group Updated group\n-\t */\n-\tupdateGroup {\n-\n-\t\t@Override\n-\t\tpublic Group call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\treturn ac.getGroupsManager().updateGroup(ac.getSession(),\n-\t\t\t\t\tparms.read(\"group\", Group.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Moves \"movingGroup\" (including subGroups) under \"destinationGroup\" as subGroup within same Vo.\n-\t * In case of null \"destinationGroup\", \"movingGroup\" is moved as top level group.\n-\t * During movement are also processed indirect members.\n-\t *\n-\t * @param destinationGroup int <code>id</code> of Group to have \"movingGroup\" as subGroup\n-\t * @param movingGroup int <code>id</code> of Group to be moved under \"destinationGroup\"\n-\t */\n-\tmoveGroup {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tif(parms.contains(\"destinationGroup\")) {\n-\t\t\t\tac.getGroupsManager().moveGroup(ac.getSession(),\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"destinationGroup\")),\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"movingGroup\")));\n-\t\t\t} else {\n-\t\t\t\tac.getGroupsManager().moveGroup(ac.getSession(),\n-\t\t\t\t\t\tnull,\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"movingGroup\")));\n-\t\t\t}\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns a group by <code>id</code>.\n-\t *\n-\t * @param id int Group <code>id</code>\n-\t * @return Group Found group\n-\t */\n-\tgetGroupById {\n-\n-\t\t@Override\n-\t\tpublic Group call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGroupById(parms.readInt(\"id\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns a group by VO and Group name.\n-\t *\n-\t * IMPORTANT: need to use full name of group (ex. 'toplevel:a:b', not the shortname which is in this example 'b')\n-\t *\n-\t * @param vo int VO <code>id</code>\n-\t * @param name String Group name\n-\t * @return Group Found group\n-\t */\n-\tgetGroupByName {\n-\n-\t\t@Override\n-\t\tpublic Group call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGroupsManager().getGroupByName(ac.getSession(),\n-\t\t\t\t\tac.getVoById(parms.readInt(\"vo\")),\n-\t\t\t\t\tparms.readString(\"name\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Return all operand groups for specified result groups (all INCLUDED groups).\n-\t * If \"reverseDirection\" is TRUE than return all result groups for specified operand group (where group is INCLUDED).\n-\t *\n-\t * @param group int <code>id</code> of Group to get groups in union.\n-\t * @param reverseDirection boolean FALSE (default) return INCLUDED groups / TRUE = return groups where INCLUDED\n-\t * @return List<Group> List of groups in union relation.\n-\t */\n-\tgetGroupUnions {\n-\n-\t\t@Override\n-\t\tpublic List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGroupsManager().getGroupUnions(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")),\n-\t\t\t\t\tparms.readBoolean(\"reverseDirection\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Adds a member to a group.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @param member int Member <code>id</code>\n-\t */\n-\taddMember {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tac.getGroupsManager().addMember(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")),\n-\t\t\t\t\tac.getMemberById(parms.readInt(\"member\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Removes a member from a group.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @param member int Member <code>id</code>\n-\t */\n-\tremoveMember {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tac.getGroupsManager().removeMember(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")),\n-\t\t\t\t\tac.getMemberById(parms.readInt(\"member\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns members of a group.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @return List<Member> Group members\n-\t */\n-\tgetGroupMembers {\n-\n-\t\t@Override\n-\t\tpublic List<Member> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getGroupsManager().getGroupMembers(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")));\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns direct members of a group.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @return List<Member> Group members\n-\t */\n-\tgetGroupDirectMembers {\n-\n-\t\t@Override\n-\t\tpublic List<Member> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getGroupsManager().getGroupDirectMembers(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")));\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns members of a group.\n-\t * RichMember contains User object.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @return List<RichMember> Group members\n-\t */\n-\tgetGroupRichMembers {\n-\n-\t\t@Override\n-\t\tpublic List<RichMember> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGroupsManager().getGroupRichMembers(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns direct members of a group.\n-\t * RichMember contains User object.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @return List<RichMember> Group members\n-\t */\n-\tgetGroupDirectRichMembers {\n-\n-\t\t@Override\n-\t\tpublic List<RichMember> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGroupsManager().getGroupDirectRichMembers(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns members of a group.\n-\t * RichMember contains User object and attributes.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @return List<RichMember> Group members\n-\t */\n-\tgetGroupRichMembersWithAttributes {\n-\n-\t\t@Override\n-\t\tpublic List<RichMember> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGroupsManager().getGroupRichMembersWithAttributes(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Return true if Member is member of the Group\n-\t *\n-\t * @param group int Group ID\n-\t * @param member int Member ID\n-\t * @return boolean True if Member is member of the Group\n-\t *\n-\t * @throw GroupNotExistsException When Group with <code>id</code> doesn't exist.\n-\t */\n-\tisGroupMember {\n-\n-\t\t@Override\n-\t\tpublic Boolean call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGroupsManager().isGroupMember(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")),\n-\t\t\t\t\tac.getMemberById(parms.readInt(\"member\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns count of group members.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @return int Members count\n-\t */\n-\tgetGroupMembersCount {\n-\n-\t\t@Override\n-\t\tpublic Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGroupsManager().getGroupMembersCount(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns all groups in a VO.\n-\t *\n-\t * @param vo int VO <code>id</code>\n-\t * @return List<Group> Groups\n-\t */\n-\tgetAllGroups {\n-\t\t@Override\n-\t\tpublic List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGroupsManager().getAllGroups(ac.getSession(), ac.getVoById(parms.readInt(\"vo\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns all groups in a VO by a hierarchy.\n-\t * Example: [Group => [Group => [Group => []], Group => []]]\n-\t *\n-\t * @param vo int VO <code>id</code>\n-\t * @return List<Object> Groups with subgroups\n-\t */\n-\tgetAllGroupsWithHierarchy {\n-\t\t@Override\n-\t\tpublic List<Object> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tList<Object> convertedGroups = new ArrayList<Object>();\n-\t\t\t// Every list must contain as a first field the group object which represents the group. First list contains null on the first position.\n-\t\t\tconvertedGroups.add(0, null);\n-\n-\t\t\tMap<Group, Object> groups = ac.getGroupsManager().getAllGroupsWithHierarchy(ac.getSession(), ac.getVoById(parms.readInt(\"vo\")));\n-\n-\t\t\tfor (Group group: groups.keySet()) {\n-\t\t\t\tconvertedGroups.add(ac.convertGroupsWithHierarchy(group, (Map<Group, Object>) groups.get(group)));\n-\t\t\t}\n-\t\t\treturn convertedGroups;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns a parent group of a group.\n-\t *\n-\t * @param group int Child group <code>id</code>\n-\t * @return Group Parent group\n-\t */\n-\tgetParentGroup {\n-\t\t@Override\n-\t\tpublic Group call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGroupsManager().getParentGroup(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns subgroups of a group.\n-\t *\n-\t * @param parentGroup int Group id\n-\t * @return List<Group> Child groups\n-\t */\n-\tgetSubGroups {\n-\t\t@Override\n-\t\tpublic List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGroupsManager().getSubGroups(ac.getSession(), ac.getGroupById(parms.readInt(\"parentGroup\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Adds an admin to a group.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @param user int User <code>id</code>\n-\t */\n-\t/*#\n-\t * Adds an group admin to a group.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @param authorizedGroup int Group <code>id</code>\n-\t */\n-\taddAdmin {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tif (parms.contains(\"user\")) {\n-\t\t\t\tac.getGroupsManager().addAdmin(ac.getSession(),\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")),\n-\t\t\t\t\t\tac.getUserById(parms.readInt(\"user\")));\n-\t\t\t} else {\n-\t\t\t\tac.getGroupsManager().addAdmin(ac.getSession(),\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")),\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"authorizedGroup\")));\n-\t\t\t}\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Removes an admin of a group.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @param user int User <code>id</code>\n-\t */\n-\t/*#\n-\t * Removes a group admin of a group.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @param authorizedGroup int Group <code>id</code>\n-\t */\n-\tremoveAdmin {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tif (parms.contains(\"user\")) {\n-\t\t\t\tac.getGroupsManager().removeAdmin(ac.getSession(),\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")),\n-\t\t\t\t\t\tac.getUserById(parms.readInt(\"user\")));\n-\t\t\t} else {\n-\t\t\t\tac.getGroupsManager().removeAdmin(ac.getSession(),\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")),\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"authorizedGroup\")));\n-\t\t\t}\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get list of all group administrators for supported role and specific group.\n-\t *\n-\t * If onlyDirectAdmins is == true, return only direct admins of the group for supported role.\n-\t *\n-\t * Supported roles: GroupAdmin\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @param onlyDirectAdmins int if == true, get only direct user administrators (if == false, get both direct and indirect)\n-\t *\n-\t * @return List<User> list of all group administrators of the given group for supported role\n-\t */\n-\t/*#\n-\t * Returns administrators of a group.\n-\t *\n-\t * @deprecated\n-\t * @param group int Group <code>id</code>\n-\t * @return List<User> Group admins\n-\t */\n-\tgetAdmins {\n-\n-\t\t@Override\n-\t\tpublic List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif(parms.contains(\"onlyDirectAdmins\")) {\n-\t\t\t\treturn ac.getGroupsManager().getAdmins(ac.getSession(),\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")),\n-\t\t\t\t\t\tparms.readBoolean(\"onlyDirectAdmins\"));\n-\t\t\t} else {\n-\t\t\t\treturn ac.getGroupsManager().getAdmins(ac.getSession(),\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")));\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns direct administrators of a group.\n-\t *\n-\t * @deprecated\n-\t * @param group int Group <code>id</code>\n-\t * @return List<User> Group admins\n-\t */\n-\tgetDirectAdmins {\n-\n-\t\t@Override\n-\t\tpublic List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGroupsManager().getDirectAdmins(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns administrator groups of a group.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @return List<Group> admins\n-\t */\n-\tgetAdminGroups {\n-\n-\t\t@Override\n-\t\tpublic List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGroupsManager().getAdminGroups(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get list of all richUser administrators for the group and supported role with specific attributes.\n-\t *\n-\t * Supported roles: GroupAdmin\n-\t *\n-\t * If \"onlyDirectAdmins\" is == true, return only direct admins of the group for supported role with specific attributes.\n-\t * If \"allUserAttributes\" is == true, do not specify attributes through list and return them all in objects richUser. Ignoring list of specific attributes.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @param specificAttributes List<String> list of specified attributes which are needed in object richUser\n-\t * @param allUserAttributes int if == true, get all possible user attributes and ignore list of specificAttributes (if false, get only specific attributes)\n-\t * @param onlyDirectAdmins int if == true, get only direct group administrators (if false, get both direct and indirect)\n-\t *\n-\t * @return List<RichUser> list of RichUser administrators for the group and supported role with attributes\n-\t */\n-\t/*#\n-\t * Get all Group admins as RichUsers\n-\t *\n-\t * @deprecated\n-\t * @param group int Group <code>id</code>\n-\t * @return List<RichUser> admins\n-\t */\n-\tgetRichAdmins {\n-\n-\t\t@Override\n-\t\tpublic List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif(parms.contains(\"onlyDirectAdmins\")) {\n-\t\t\t\treturn ac.getGroupsManager().getRichAdmins(ac.getSession(),\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")),\n-\t\t\t\t\t\tparms.readList(\"specificAttributes\", String.class),\n-\t\t\t\t\t\tparms.readBoolean(\"allUserAttributes\"),\n-\t\t\t\t\t\tparms.readBoolean(\"onlyDirectAdmins\"));\n-\t\t\t} else {\n-\t\t\t\treturn ac.getGroupsManager().getRichAdmins(ac.getSession(),\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")));\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all Group admins as RichUsers with all their non-null user attributes\n-\t *\n-\t * @deprecated\n-\t * @param group int Group <code>id</code>\n-\t * @return List<RichUser> admins with attributes\n-\t */\n-\tgetRichAdminsWithAttributes {\n-\n-\t\t@Override\n-\t\tpublic List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGroupsManager().getRichAdminsWithAttributes(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t **\n-\t * Get list of all richGroups with selected attributes assigned to resource.\n-\t * Allowed namespaces of attributes are group and group-resource.\n-\t *\n-\t * Last step is filtration of attributes:\n-\t * Attributes are filtered by rights of user in session. User get only those selected attributes he has rights to read.\n-\t *\n-\t * @param resource int Resource <code>id</code>\n-\t * @param attrNames List<String> names of attributes\n-\t * @return List<RichGroup> groups with attributes\n-\t *\n-\t */\n-\tgetRichGroupsAssignedToResourceWithAttributesByNames {\n-\n-\t\t@Override\n-\t\tpublic List<RichGroup> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGroupsManager().getRichGroupsAssignedToResourceWithAttributesByNames(ac.getSession(),\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")),\n-\t\t\t\t\tparms.readList(\"attrNames\", String.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all Group admins as RichUsers with specific attributes (from user namespace)\n-\t *\n-\t * @deprecated\n-\t * @param group int Group <code>id</code>\n-\t * @param specificAttributes List<String> list of attributes URNs\n-\t * @return List<RichUser> admins with attributes\n-\t */\n-\tgetRichAdminsWithSpecificAttributes {\n-\n-\t\t@Override\n-\t\tpublic List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getGroupsManager().getRichAdminsWithSpecificAttributes(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")),\n-\t\t\t\t\tparms.readList(\"specificAttributes\", String.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all Group admins, which are assigned directly,\n-\t *  as RichUsers with specific attributes (from user namespace)\n-\t *\n-\t * @deprecated\n-\t * @param group int Group <code>id</code>\n-\t * @param specificAttributes List<String> list of attributes URNs\n-\t * @return List<RichUser> direct admins with attributes\n-\t */\n-\tgetDirectRichAdminsWithSpecificAttributes {\n-\n-\t\t@Override\n-\t\tpublic List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getGroupsManager().getDirectRichAdminsWithSpecificAttributes(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")),\n-\t\t\t\t\tparms.readList(\"specificAttributes\", String.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns direct descendant groups of a VO.\n-\t *\n-\t * @param vo int VO <code>id</code>\n-\t * @return List<Group> Children groups\n-\t */\n-\tgetGroups {\n-\n-\t\t@Override\n-\t\tpublic List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getGroupsManager().getGroups(ac.getSession(), ac.getVoById(parms.readInt(\"vo\")));\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns groups count in a VO.\n-\t *\n-\t * @param vo int VO <code>id</code>\n-\t * @return int Groups count\n-\t */\n-\t/*#\n-\t * Gets count of all groups.\n-\n-\t * @return int groups count\n-\t */\n-\tgetGroupsCount {\n-\n-\t\t@Override\n-\t\tpublic Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif(parms.contains(\"vo\")) {\n-\t\t\t\treturn ac.getGroupsManager().getGroupsCount(ac.getSession(), ac.getVoById(parms.readInt(\"vo\")));\n-\t\t\t} else {\n-\t\t\t\treturn ac.getGroupsManager().getGroupsCount(ac.getSession());\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns subgroups count of a group.\n-\t *\n-\t * @param parentGroup int Parent group <code>id</code>\n-\t * @return int Subgroups count\n-\t */\n-\tgetSubGroupsCount {\n-\n-\t\t@Override\n-\t\tpublic Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGroupsManager().getSubGroupsCount(ac.getSession(), ac.getGroupById(parms.readInt(\"parentGroup\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Delete all groups in a VO.\n-\t *\n-\t * @param vo int VO <code>id</code>\n-\t */\n-\tdeleteAllGroups {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tac.getGroupsManager().deleteAllGroups(ac.getSession(),\n-\t\t\t\t\tac.getVoById(parms.readInt(\"vo\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Forces group synchronization.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t */\n-\tforceGroupSynchronization {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\tac.getGroupsManager().forceGroupSynchronization(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns parent VO of a group.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @return Vo Parent VO\n-\t */\n-\tgetVo {\n-\n-\t\t@Override\n-\t\tpublic Vo call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getGroupsManager().getVo(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns members of a parent group.\n-\t *\n-\t * @param group int Child group <code>id</code>\n-\t * @return List<Member> Parent group members\n-\t */\n-\tgetParentGroupMembers {\n-\n-\t\t@Override\n-\t\tpublic List<Member> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getGroupsManager().getParentGroupMembers(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns members of a parent group.\n-\t * RichMember contains User object.\n-\t *\n-\t * @param group int Child group <code>id</code>\n-\t * @return List<RichMember> Parent group members\n-\t */\n-\tgetParentGroupRichMembers {\n-\n-\t\t@Override\n-\t\tpublic List<RichMember> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getGroupsManager().getParentGroupRichMembers(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns members of a parent group.\n-\t * RichMember contains User object and attributes.\n-\t *\n-\t * @param group int Child group <code>id</code>\n-\t * @return List<RichMember> Parent group members\n-\t */\n-\tgetParentGroupRichMembersWithAttributes {\n-\n-\t\t@Override\n-\t\tpublic List<RichMember> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getGroupsManager().getParentGroupRichMembersWithAttributes(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns groups for a member.\n-\t *\n-\t * @param member int Member <code>id</code>\n-\t * @return List<Group> Groups of the member\n-\t */\n-\tgetMemberGroups {\n-\n-\t\t@Override\n-\t\tpublic List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getGroupsManager().getMemberGroups(ac.getSession(),\n-\t\t\t\t\tac.getMemberById(parms.readInt(\"member\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns groups with specific attribute for a member.\n-\t *\n-\t * @param member int Member <code>id</code>\n-\t * @param attribute Attribute attribute object with value\n-\t * @return List<Group> Groups of the member\n-\t */\n-\tgetMemberGroupsByAttribute {\n-\n-\t\t@Override\n-\t\tpublic List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException{\n-\n-\t\t\treturn ac.getGroupsManager().getMemberGroupsByAttribute(ac.getSession(),\n-\t\t\t\t\tac.getMemberById(parms.readInt(\"member\")),parms.read(\"attribute\", Attribute.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns sub-list of all RichGroups, each containing selected attributes, starting at fromIndex (included)\n-\t * and ending at the size of the original list.\n-\t *\n-\t * Example: [1,2,3,4], fromIndex=1 => [2,3,4]\n-\t *\n-\t * @param vo int <code>id</code> of vo\n-\t * @param fromIndex int begin index of returned subList, included\n-\t * @param attrNames List<String> if attrNames is null method will return RichGroups containing all attributes\n-\t * @return List<RichGroup> RichGroups containing selected attributes\n-\t */\n-\t/*#\n-\t * Returns sub-list of all RichGroups, each containing selected attributes, starting at first index of the original\n-\t * list (included) and ending at the toIndex (included).\n-\t *\n-\t * Example: [1,2,3,4], toIndex=2 => [1,2,3]\n-\t *\n-\t * @param vo int <code>id</code> of vo\n-\t * @param toIndex int end index of returned subList, included\n-\t * @param attrNames List<String> if attrNames is null method will return RichGroups containing all attributes\n-\t * @return List<RichGroup> RichGroups containing selected attributes\n-\t */\n-\t/*#\n-\t * Returns sub-list of all RichGroups, each containing selected attributes, starting at fromIndex (included)\n-\t * and ending at the toIndex (included).\n-\t *\n-\t * Example: [1,2,3,4], fromIndex=1, toIndex=2 => [2,3]\n-\t *\n-\t * @param vo int <code>id</code> of vo\n-\t * @param fromIndex int begin index of returned subList, included\n-\t * @param toIndex int end index of returned subList, included\n-\t * @param attrNames List<String> if attrNames is null method will return RichGroups containing all attributes\n-\t * @return List<RichGroup> RichGroups containing selected attributes\n-\t */\n-\t/*#\n-\t * Returns full list of all RichGroups containing selected attributes.\n-\t *\n-\t * @param vo int <code>id</code> of vo\n-\t * @param attrNames List<String> if attrNames is null method will return RichGroups containing all attributes\n-\t * @return List<RichGroup> RichGroups containing selected attributes\n-\t */\n-\tgetAllRichGroupsWithAttributesByNames {\n-\n-\t\t@Override\n-\t\tpublic List<RichGroup> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\tList<RichGroup> listOfRichGroups = ac.getGroupsManager().getAllRichGroupsWithAttributesByNames(ac.getSession(),\n-\t\t\t\tac.getVoById(parms.readInt(\"vo\")),\n-\t\t\t\tparms.readList(\"attrNames\", String.class));\n-\n-\t\t\tif(listOfRichGroups == null) listOfRichGroups = new ArrayList<>();\n-\n-\t\t\tif (parms.contains(\"fromIndex\") && parms.contains(\"toIndex\")) {\n-\t\t\t\treturn ac.getSublist(listOfRichGroups, parms.readInt(\"fromIndex\"), parms.readInt(\"toIndex\"));\n-\t\t\t} else if (parms.contains(\"fromIndex\")) {\n-\t\t\t\tint toIndex = listOfRichGroups.size();\n-\t\t\t\treturn ac.getSublist(listOfRichGroups, parms.readInt(\"fromIndex\"), toIndex);\n-\t\t\t} else if (parms.contains(\"toIndex\")) {\n-\t\t\t\treturn ac.getSublist(listOfRichGroups, 0, parms.readInt(\"toIndex\"));\n-\t\t\t} else {\n-\t\t\t\treturn listOfRichGroups;\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns sub-list of member's RichGroups, each containing selected attributes, starting at fromIndex (included)\n-\t * and ending at the size of the original list.\n-\t *\n-\t * Example: [1,2,3,4], fromIndex=1 => [2,3,4]\n-\t *\n-\t * \"members\" group is not included!\n-\t *\n-\t * @param member int <code>id</code> of member\n-\t * @param fromIndex int begin index of returned subList, included\n-\t * @param attrNames List<String> if attrNames is null method will return RichGroups containing all attributes\n-\t * @return List<RichGroup> RichGroups containing selected attributes\n-\t */\n-\t/*#\n-\t * Returns sub-list of member's RichGroups, each containing selected attributes, starting at first index of the original\n-\t * list (included) and ending at the toIndex (included).\n-\t *\n-\t * Example: [1,2,3,4], toIndex=2 => [1,2,3]\n-\t *\n-\t * \"members\" group is not included!\n-\t *\n-\t * @param member int <code>id</code> of member\n-\t * @param toIndex int end index of returned subList, included\n-\t * @param attrNames List<String> if attrNames is null method will return RichGroups containing all attributes\n-\t * @return List<RichGroup> RichGroups containing selected attributes\n-\t */\n-\t/*#\n-\t * Returns sub-list of member's RichGroups, each containing selected attributes, starting at fromIndex (included)\n-\t * and ending at the toIndex (included).\n-\t *\n-\t * Example: [1,2,3,4], fromIndex=1, toIndex=2 => [2,3]\n-\t *\n-\t * \"members\" group is not included!\n-\t *\n-\t * @param member int <code>id</code> of member\n-\t * @param fromIndex int begin index of returned subList, included\n-\t * @param toIndex int end index of returned subList, included\n-\t * @param attrNames List<String> if attrNames is null method will return RichGroups containing all attributes\n-\t * @return List<RichGroup> RichGroups containing selected attributes\n-\t */\n-\t/*#\n-\t * Returns full list of member's RichGroups containing selected attributes.\n-\t *\n-\t * \"members\" group is not included!\n-\t * \n-\t * @param member int <code>id</code> of member\n-\t * @param attrNames List<String> if attrNames is null method will return RichGroups containing all attributes\n-\t * @return List<RichGroup> RichGroups containing selected attributes\n-\t */\n-\tgetMemberRichGroupsWithAttributesByNames {\n-\n-\t\t@Override\n-\t\tpublic List<RichGroup> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\tList<RichGroup> listOfRichGroups = ac.getGroupsManager().getMemberRichGroupsWithAttributesByNames(ac.getSession(),\n-\t\t\t\tac.getMemberById(parms.readInt(\"member\")),\n-\t\t\t\tparms.readList(\"attrNames\", String.class));\n-\n-\t\t\tif(listOfRichGroups == null) listOfRichGroups = new ArrayList<>();\n-\n-\t\t\tif (parms.contains(\"fromIndex\") && parms.contains(\"toIndex\")) {\n-\t\t\t\treturn ac.getSublist(listOfRichGroups, parms.readInt(\"fromIndex\"), parms.readInt(\"toIndex\"));\n-\t\t\t} else if (parms.contains(\"fromIndex\")) {\n-\t\t\t\tint toIndex = listOfRichGroups.size();\n-\t\t\t\treturn ac.getSublist(listOfRichGroups, parms.readInt(\"fromIndex\"), toIndex);\n-\t\t\t} else if (parms.contains(\"toIndex\")) {\n-\t\t\t\treturn ac.getSublist(listOfRichGroups, 0, parms.readInt(\"toIndex\"));\n-\t\t\t} else {\n-\t\t\t\treturn listOfRichGroups;\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns RichSubGroups from parent group containing selected attributes (only 1 level sub groups).\n-\t *\n-\t * @param group int <code>id</code> of group\n-\t * @param attrNames List<String> if attrNames is null method will return RichGroups containing all attributes\n-\t * @return List<RichGroup> RichGroups containing selected attributes\n-\t */\n-\tgetRichSubGroupsWithAttributesByNames {\n-\n-\t\t@Override\n-\t\tpublic List<RichGroup> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getGroupsManager().getRichSubGroupsWithAttributesByNames(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")),\n-\t\t\t\t\tparms.readList(\"attrNames\", String.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns all AllRichSubGroups from parent group containing selected attributes (all level subgroups).\n-\t *\n-\t * @param group int <code>id</code> of group\n-\t * @param attrNames List<String> if attrNames is null method will return RichGroups containing all attributes\n-\t * @return List<RichGroup> RichGroups containing selected attributes\n-\t */\n-\tgetAllRichSubGroupsWithAttributesByNames {\n-\n-\t\t@Override\n-\t\tpublic List<RichGroup> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getGroupsManager().getAllRichSubGroupsWithAttributesByNames(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")),\n-\t\t\t\t\tparms.readList(\"attrNames\", String.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns RichGroup selected by id containing selected attributes\n-\t *\n-\t * @param groupId int <code>id</code> of group\n-\t * @param attrNames List<String> if attrNames is null method will return RichGroup containing all attributes\n-\t * @return List<RichGroup> RichGroups containing selected attributes\n-\t */\n-\tgetRichGroupByIdWithAttributesByNames {\n-\n-\t\t@Override\n-\t\tpublic RichGroup call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getGroupsManager().getRichGroupByIdWithAttributesByNames(ac.getSession(),\n-\t\t\t\t\tparms.readInt(\"groupId\"),\n-\t\t\t\t\tparms.readList(\"attrNames\", String.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns all groups of specific member including group \"members\".\n-\t *\n-\t * @param member int <code>id</code> of member\n-\t * @return List<Group> Groups of member\n-\t */\n-\tgetAllMemberGroups {\n-\n-\t\t@Override\n-\t\tpublic List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getGroupsManager().getAllMemberGroups(ac.getSession(),\n-\t\t\t\t\tac.getMemberById(parms.readInt(\"member\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Set membership status of a member in a group. Please note, that resulting Status after change is\n-\t * calculated from all members sub-groups and groups in relation sourcing this member. If in any of them\n-\t * is VALID, resulting status is still VALID.\n-\t *\n-\t * @param member int Member <code>id</code>\n-\t * @param group int Group <code>id</code>\n-\t * @param status String VALID | EXPIRED\n-\t * @exampleParam status \"EXPIRED\"\n-\t * @return Member Member with status after change\n-\t */\n-\tsetGroupsMemberStatus {\n-\t\t@Override\n-\t\tpublic Member call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tMemberGroupStatus status = MemberGroupStatus.valueOf(parms.readString(\"status\"));\n-\t\t\treturn ac.getGroupsManager().setMemberGroupStatus(ac.getSession(),\n-\t\t\t\t\tac.getMemberById(parms.readInt(\"member\")),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")),\n-\t\t\t\t\tstatus);\n-\t\t}\n-\t};\n+    /*#\n+     * Creates a subgroup of a group.\n+     *\n+     * @param parentGroup int Parent Group <code>id</code>\n+     * @param group Group JSON Group class\n+     * @return Group Newly created group\n+     */\n+    /*#\n+     * Creates a subgroup of a group.\n+     *\n+     * @param parentGroup int Parent Group <code>id</code>\n+     * @param name String name of a group\n+     * @param description String description of a group\n+     * @return Group Newly created group\n+     */\n+    /*#\n+     * Creates a new group in the specific VO defined by object vo in parameter.\n+     * Important: voId in object group is ignored.\n+     *\n+     * @param vo int Parent VO <code>id</code>\n+     * @param group Group JSON Group class\n+     * @return Group Newly created group\n+     */\n+    /*#\n+     * Creates a new group in the specific VO.\n+     *\n+     * @param vo int Parent VO <code>id</code>\n+     * @param name String name of a group\n+     * @param description String description of a group\n+     * @return Group Newly created group\n+     */\n+    createGroup {\n+        @Override\n+        public Group call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            if (parms.contains(\"group\")) {\n+                if (parms.contains(\"parentGroup\")) {\n+                    return ac.getGroupsManager().createGroup(ac.getSession(),\n+                            ac.getGroupById(parms.readInt(\"parentGroup\")),\n+                            parms.read(\"group\", Group.class));\n+                } else if (parms.contains(\"vo\")) {\n+                    Group group = parms.read(\"group\", Group.class);\n+                    if (group.getParentGroupId() == null) {\n+                        return ac.getGroupsManager().createGroup(ac.getSession(),\n+                                ac.getVoById(parms.readInt(\"vo\")),\n+                                group);\n+                    } else {\n+                        throw new RpcException(RpcException.Type.WRONG_PARAMETER, \"Top-level groups can't have parentGroupId set!\");\n+                    }\n+                } else {\n+                    throw new RpcException(RpcException.Type.MISSING_VALUE, \"vo or parentGroup\");\n+                }\n+            } else if (parms.contains(\"name\") && parms.contains(\"description\")) {\n+                if (parms.contains(\"parentGroup\")) {\n+                    String name = parms.readString(\"name\");\n+                    String description = parms.readString(\"description\");\n+                    Group group = new Group(name, description);\n+                    return ac.getGroupsManager().createGroup(ac.getSession(),\n+                            ac.getGroupById(parms.readInt(\"parentGroup\")),\n+                            group);\n+                } else if (parms.contains(\"vo\")) {\n+                    String name = parms.readString(\"name\");\n+                    String description = parms.readString(\"description\");\n+                    Group group = new Group(name, description);\n+                    return ac.getGroupsManager().createGroup(ac.getSession(),\n+                            ac.getVoById(parms.readInt(\"vo\")),\n+                            group);\n+                } else {\n+                    throw new RpcException(RpcException.Type.MISSING_VALUE, \"vo or parentGroup\");\n+                }\n+            } else {\n+                throw new RpcException(RpcException.Type.MISSING_VALUE, \"group or (name and description)\");\n+            }\n+        }\n+    },\n+\n+    /*#\n+     * Create union of two groups, where \"operandGroup\" is technically set as subgroup of \"resultGroup\".\n+     * Members from \"operandGroup\" are added to \"resultGroup\" as INDIRECT members. Union is honored also\n+     * in all group member changing operations.\n+     *\n+     * @param resultGroup int <code>id</code> of Group to have included \"operandGroup\"\n+     * @param operandGroup int <code>id</code> of Group to be included into \"resultGroup\"\n+     * @return Group Result group\n+     */\n+    createGroupUnion {\n+        @Override\n+        public Group call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            return ac.getGroupsManager().createGroupUnion(ac.getSession(),\n+                    ac.getGroupById(parms.readInt(\"resultGroup\")),\n+                    ac.getGroupById(parms.readInt(\"operandGroup\")));\n+        }\n+    },\n+\n+    /*#\n+     * Deletes a group. Group is not deleted, if contains members or is assigned to any resource.\n+     *\n+     * @param group int Group <code>id</code>\n+     */\n+    /*#\n+     * Forcefully deletes a group (remove all group members, remove group from resources).\n+     *\n+     * @param group int Group <code>id</code>\n+     * @param force boolean If true use force delete.\n+     */\n+    deleteGroup {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            if (parms.contains(\"force\") && parms.readBoolean(\"force\")) {\n+                ac.getGroupsManager().deleteGroup(ac.getSession(),\n+                        ac.getGroupById(parms.readInt(\"group\")), true);\n+                return null;\n+            } else {\n+                ac.getGroupsManager().deleteGroup(ac.getSession(),\n+                        ac.getGroupById(parms.readInt(\"group\")), false);\n+                return null;\n+            }\n+        }\n+    },\n+\n+    /*#\n+     * Forcefully deletes a list of groups (remove all group members, remove group from resources).\n+     *\n+     * @param groups int[] Array of Group IDs\n+     * @param forceDelete boolean If true use force delete.\n+     */\n+    deleteGroups {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            //TODO: optimalizovat?\n+            int[] ids = parms.readArrayOfInts(\"groups\");\n+            List<Group> groups = new ArrayList<>(ids.length);\n+            for (int i : ids) {\n+                groups.add(ac.getGroupById(i));\n+            }\n+\n+            ac.getGroupsManager().deleteGroups(ac.getSession(),\n+                    groups,\n+                    parms.readBoolean(\"forceDelete\"));\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Removes union of two groups, when \"operandGroup\" is technically removed from subgroups of \"resultGroup\".\n+     * Members from \"operandGroup\" are removed from \"resultGroup\" if they were INDIRECT members sourcing from this group only.\n+     *\n+     * @param resultGroup int <code>id</code> of Group to have removed \"operandGroup\" from subgroups\n+     * @param operandGroup int <code>id</code> of Group to be removed from \"resultGroup\" subgroups\n+     */\n+    removeGroupUnion {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            ac.getGroupsManager().removeGroupUnion(ac.getSession(),\n+                    ac.getGroupById(parms.readInt(\"resultGroup\")),\n+                    ac.getGroupById(parms.readInt(\"operandGroup\")));\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Updates a group.\n+     *\n+     * @param group Group JSON Group class\n+     * @return Group Updated group\n+     */\n+    updateGroup {\n+        @Override\n+        public Group call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            return ac.getGroupsManager().updateGroup(ac.getSession(),\n+                    parms.read(\"group\", Group.class));\n+        }\n+    },\n+\n+    /*#\n+     * Moves \"movingGroup\" (including subGroups) under \"destinationGroup\" as subGroup within same Vo.\n+     * In case of null \"destinationGroup\", \"movingGroup\" is moved as top level group.\n+     * During movement are also processed indirect members.\n+     *\n+     * @param destinationGroup int <code>id</code> of Group to have \"movingGroup\" as subGroup\n+     * @param movingGroup int <code>id</code> of Group to be moved under \"destinationGroup\"\n+     */\n+    moveGroup {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            if (parms.contains(\"destinationGroup\")) {\n+                ac.getGroupsManager().moveGroup(ac.getSession(),\n+                        ac.getGroupById(parms.readInt(\"destinationGroup\")),\n+                        ac.getGroupById(parms.readInt(\"movingGroup\")));\n+            } else {\n+                ac.getGroupsManager().moveGroup(ac.getSession(),\n+                        null,\n+                        ac.getGroupById(parms.readInt(\"movingGroup\")));\n+            }\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Returns a group by <code>id</code>.\n+     *\n+     * @param id int Group <code>id</code>\n+     * @return Group Found group\n+     */\n+    getGroupById {\n+        @Override\n+        public Group call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getGroupById(parms.readInt(\"id\"));\n+        }\n+    },\n+\n+    /*#\n+     * Returns a group by VO and Group name.\n+     *\n+     * IMPORTANT: need to use full name of group (ex. 'toplevel:a:b', not the shortname which is in this example 'b')\n+     *\n+     * @param vo int VO <code>id</code>\n+     * @param name String Group name\n+     * @return Group Found group\n+     */\n+    getGroupByName {\n+        @Override\n+        public Group call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getGroupsManager().getGroupByName(ac.getSession(),\n+                    ac.getVoById(parms.readInt(\"vo\")),\n+                    parms.readString(\"name\"));\n+        }\n+    },\n+\n+    /*#\n+     * Return all operand groups for specified result groups (all INCLUDED groups).\n+     * If \"reverseDirection\" is TRUE than return all result groups for specified operand group (where group is INCLUDED).\n+     *\n+     * @param group int <code>id</code> of Group to get groups in union.\n+     * @param reverseDirection boolean FALSE (default) return INCLUDED groups / TRUE = return groups where INCLUDED\n+     * @return List<Group> List of groups in union relation.\n+     */\n+    getGroupUnions {\n+        @Override\n+        public List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getGroupsManager().getGroupUnions(ac.getSession(),\n+                    ac.getGroupById(parms.readInt(\"group\")),\n+                    parms.readBoolean(\"reverseDirection\"));\n+        }\n+    },\n+\n+    /*#\n+     * Adds a member to a group.\n+     *\n+     * @param group int Group <code>id</code>\n+     * @param member int Member <code>id</code>\n+     */\n+    addMember {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            ac.getGroupsManager().addMember(ac.getSession(),\n+                    ac.getGroupById(parms.readInt(\"group\")),\n+                    ac.getMemberById(parms.readInt(\"member\")));\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Removes a member from a group.\n+     *\n+     * @param group int Group <code>id</code>\n+     * @param member int Member <code>id</code>\n+     */\n+    removeMember {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            ac.getGroupsManager().removeMember(ac.getSession(),\n+                    ac.getGroupById(parms.readInt(\"group\")),\n+                    ac.getMemberById(parms.readInt(\"member\")));\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Returns members of a group.\n+     *\n+     * @param group int Group <code>id</code>\n+     * @return List<Member> Group members\n+     */\n+    getGroupMembers {\n+        @Override\n+        public List<Member> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            return ac.getGroupsManager().getGroupMembers(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")));\n+\n+        }\n+    },\n+\n+    /*#\n+     * Returns direct members of a group.\n+     *\n+     * @param group int Group <code>id</code>\n+     * @return List<Member> Group members\n+     */\n+    getGroupDirectMembers {\n+        @Override\n+        public List<Member> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            return ac.getGroupsManager().getGroupDirectMembers(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")));\n+\n+        }\n+    },\n+\n+    /*#\n+     * Returns members of a group.\n+     * RichMember contains User object.\n+     *\n+     * @param group int Group <code>id</code>\n+     * @return List<RichMember> Group members\n+     */\n+    getGroupRichMembers {\n+        @Override\n+        public List<RichMember> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getGroupsManager().getGroupRichMembers(ac.getSession(),\n+                    ac.getGroupById(parms.readInt(\"group\")));\n+        }\n+    },\n+\n+    /*#\n+     * Returns direct members of a group.\n+     * RichMember contains User object.\n+     *\n+     * @param group int Group <code>id</code>\n+     * @return List<RichMember> Group members\n+     */\n+    getGroupDirectRichMembers {\n+        @Override\n+        public List<RichMember> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getGroupsManager().getGroupDirectRichMembers(ac.getSession(),\n+                    ac.getGroupById(parms.readInt(\"group\")));\n+        }\n+    },\n+\n+    /*#\n+     * Returns members of a group.\n+     * RichMember contains User object and attributes.\n+     *\n+     * @param group int Group <code>id</code>\n+     * @return List<RichMember> Group members\n+     */\n+    getGroupRichMembersWithAttributes {\n+        @Override\n+        public List<RichMember> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getGroupsManager().getGroupRichMembersWithAttributes(ac.getSession(),\n+                    ac.getGroupById(parms.readInt(\"group\")));\n+        }\n+    },\n+\n+    /*#\n+     * Return true if Member is member of the Group\n+     *\n+     * @param group int Group ID\n+     * @param member int Member ID\n+     * @return boolean True if Member is member of the Group\n+     *\n+     * @throw GroupNotExistsException When Group with <code>id</code> doesn't exist.\n+     */\n+    isGroupMember {\n+        @Override\n+        public Boolean call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getGroupsManager().isGroupMember(ac.getSession(),\n+                    ac.getGroupById(parms.readInt(\"group\")),\n+                    ac.getMemberById(parms.readInt(\"member\")));\n+        }\n+    },\n+\n+    /*#\n+     * Returns count of group members.\n+     *\n+     * @param group int Group <code>id</code>\n+     * @return int Members count\n+     */\n+    getGroupMembersCount {\n+        @Override\n+        public Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getGroupsManager().getGroupMembersCount(ac.getSession(),\n+                    ac.getGroupById(parms.readInt(\"group\")));\n+        }\n+    },\n+\n+    /*#\n+     * Returns all groups in a VO.\n+     *\n+     * @param vo int VO <code>id</code>\n+     * @return List<Group> Groups\n+     */\n+    getAllGroups {\n+        @Override\n+        public List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getGroupsManager().getAllGroups(ac.getSession(), ac.getVoById(parms.readInt(\"vo\")));\n+        }\n+    },\n+\n+    /*#\n+     * Returns all groups in a VO by a hierarchy.\n+     * Example: [Group => [Group => [Group => []], Group => []]]\n+     *\n+     * @param vo int VO <code>id</code>\n+     * @return List<Object> Groups with subgroups\n+     */\n+    getAllGroupsWithHierarchy {\n+        @Override\n+        public List<Object> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            List<Object> convertedGroups = new ArrayList<Object>();\n+            // Every list must contain as a first field the group object which represents the group. First list contains null on the first position.\n+            convertedGroups.add(0, null);\n+\n+            Map<Group, Object> groups = ac.getGroupsManager().getAllGroupsWithHierarchy(ac.getSession(), ac.getVoById(parms.readInt(\"vo\")));\n+\n+            for (Group group : groups.keySet()) {\n+                convertedGroups.add(ac.convertGroupsWithHierarchy(group, (Map<Group, Object>) groups.get(group)));\n+            }\n+            return convertedGroups;\n+        }\n+    },\n+\n+    /*#\n+     * Returns a parent group of a group.\n+     *\n+     * @param group int Child group <code>id</code>\n+     * @return Group Parent group\n+     */\n+    getParentGroup {\n+        @Override\n+        public Group call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getGroupsManager().getParentGroup(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")));\n+        }\n+    },\n+\n+    /*#\n+     * Returns subgroups of a group.\n+     *\n+     * @param parentGroup int Group id\n+     * @return List<Group> Child groups\n+     */\n+    getSubGroups {\n+        @Override\n+        public List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getGroupsManager().getSubGroups(ac.getSession(), ac.getGroupById(parms.readInt(\"parentGroup\")));\n+        }\n+    },\n+\n+    /*#\n+     * Adds an admin to a group.\n+     *\n+     * @param group int Group <code>id</code>\n+     * @param user int User <code>id</code>\n+     */\n+    /*#\n+     * Adds an group admin to a group.\n+     *\n+     * @param group int Group <code>id</code>\n+     * @param authorizedGroup int Group <code>id</code>\n+     */\n+    addAdmin {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+            if (parms.contains(\"user\")) {\n+                ac.getGroupsManager().addAdmin(ac.getSession(),\n+                        ac.getGroupById(parms.readInt(\"group\")),\n+                        ac.getUserById(parms.readInt(\"user\")));\n+            } else {\n+                ac.getGroupsManager().addAdmin(ac.getSession(),\n+                        ac.getGroupById(parms.readInt(\"group\")),\n+                        ac.getGroupById(parms.readInt(\"authorizedGroup\")));\n+            }\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Removes an admin of a group.\n+     *\n+     * @param group int Group <code>id</code>\n+     * @param user int User <code>id</code>\n+     */\n+    /*#\n+     * Removes a group admin of a group.\n+     *\n+     * @param group int Group <code>id</code>\n+     * @param authorizedGroup int Group <code>id</code>\n+     */\n+    removeAdmin {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+            if (parms.contains(\"user\")) {\n+                ac.getGroupsManager().removeAdmin(ac.getSession(),\n+                        ac.getGroupById(parms.readInt(\"group\")),\n+                        ac.getUserById(parms.readInt(\"user\")));\n+            } else {\n+                ac.getGroupsManager().removeAdmin(ac.getSession(),\n+                        ac.getGroupById(parms.readInt(\"group\")),\n+                        ac.getGroupById(parms.readInt(\"authorizedGroup\")));\n+            }\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Get list of all group administrators for supported role and specific group.\n+     *\n+     * If onlyDirectAdmins is == true, return only direct admins of the group for supported role.\n+     *\n+     * Supported roles: GroupAdmin\n+     *\n+     * @param group int Group <code>id</code>\n+     * @param onlyDirectAdmins int if == true, get only direct user administrators (if == false, get both direct and indirect)\n+     *\n+     * @return List<User> list of all group administrators of the given group for supported role\n+     */\n+    /*#\n+     * Returns administrators of a group.\n+     *\n+     * @deprecated\n+     * @param group int Group <code>id</code>\n+     * @return List<User> Group admins\n+     */\n+    getAdmins {\n+        @Override\n+        public List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            if (parms.contains(\"onlyDirectAdmins\")) {\n+                return ac.getGroupsManager().getAdmins(ac.getSession(),\n+                        ac.getGroupById(parms.readInt(\"group\")),\n+                        parms.readBoolean(\"onlyDirectAdmins\"));\n+            } else {\n+                return ac.getGroupsManager().getAdmins(ac.getSession(),\n+                        ac.getGroupById(parms.readInt(\"group\")));\n+            }\n+        }\n+    },\n+\n+    /*#\n+     * Returns direct administrators of a group.\n+     *\n+     * @deprecated\n+     * @param group int Group <code>id</code>\n+     * @return List<User> Group admins\n+     */\n+    getDirectAdmins {\n+        @Override\n+        public List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getGroupsManager().getDirectAdmins(ac.getSession(),\n+                    ac.getGroupById(parms.readInt(\"group\")));\n+        }\n+    },\n+\n+    /*#\n+     * Returns administrator groups of a group.\n+     *\n+     * @param group int Group <code>id</code>\n+     * @return List<Group> admins\n+     */\n+    getAdminGroups {\n+        @Override\n+        public List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getGroupsManager().getAdminGroups(ac.getSession(),\n+                    ac.getGroupById(parms.readInt(\"group\")));\n+        }\n+    },\n+\n+    /*#\n+     * Get list of all richUser administrators for the group and supported role with specific attributes.\n+     *\n+     * Supported roles: GroupAdmin\n+     *\n+     * If \"onlyDirectAdmins\" is == true, return only direct admins of the group for supported role with specific attributes.\n+     * If \"allUserAttributes\" is == true, do not specify attributes through list and return them all in objects richUser. Ignoring list of specific attributes.\n+     *\n+     * @param group int Group <code>id</code>\n+     * @param specificAttributes List<String> list of specified attributes which are needed in object richUser\n+     * @param allUserAttributes int if == true, get all possible user attributes and ignore list of specificAttributes (if false, get only specific attributes)\n+     * @param onlyDirectAdmins int if == true, get only direct group administrators (if false, get both direct and indirect)\n+     *\n+     * @return List<RichUser> list of RichUser administrators for the group and supported role with attributes\n+     */\n+    /*#\n+     * Get all Group admins as RichUsers\n+     *\n+     * @deprecated\n+     * @param group int Group <code>id</code>\n+     * @return List<RichUser> admins\n+     */\n+    getRichAdmins {\n+        @Override\n+        public List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            if (parms.contains(\"onlyDirectAdmins\")) {\n+                return ac.getGroupsManager().getRichAdmins(ac.getSession(),\n+                        ac.getGroupById(parms.readInt(\"group\")),\n+                        parms.readList(\"specificAttributes\", String.class),\n+                        parms.readBoolean(\"allUserAttributes\"),\n+                        parms.readBoolean(\"onlyDirectAdmins\"));\n+            } else {\n+                return ac.getGroupsManager().getRichAdmins(ac.getSession(),\n+                        ac.getGroupById(parms.readInt(\"group\")));\n+            }\n+        }\n+    },\n+\n+    /*#\n+     * Get all Group admins as RichUsers with all their non-null user attributes\n+     *\n+     * @deprecated\n+     * @param group int Group <code>id</code>\n+     * @return List<RichUser> admins with attributes\n+     */\n+    getRichAdminsWithAttributes {\n+        @Override\n+        public List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getGroupsManager().getRichAdminsWithAttributes(ac.getSession(),\n+                    ac.getGroupById(parms.readInt(\"group\")));\n+        }\n+    },\n+\n+    /*#\n+     **\n+     * Get list of all richGroups with selected attributes assigned to resource.\n+     * Allowed namespaces of attributes are group and group-resource.\n+     *\n+     * Last step is filtration of attributes:\n+     * Attributes are filtered by rights of user in session. User get only those selected attributes he has rights to read.\n+     *\n+     * @param resource int Resource <code>id</code>\n+     * @param attrNames List<String> names of attributes\n+     * @return List<RichGroup> groups with attributes\n+     *\n+     */\n+    getRichGroupsAssignedToResourceWithAttributesByNames {\n+        @Override\n+        public List<RichGroup> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getGroupsManager().getRichGroupsAssignedToResourceWithAttributesByNames(ac.getSession(),\n+                    ac.getResourceById(parms.readInt(\"resource\")),\n+                    parms.readList(\"attrNames\", String.class));\n+        }\n+    },\n+\n+    /*#\n+     * Get all Group admins as RichUsers with specific attributes (from user namespace)\n+     *\n+     * @deprecated\n+     * @param group int Group <code>id</code>\n+     * @param specificAttributes List<String> list of attributes URNs\n+     * @return List<RichUser> admins with attributes\n+     */\n+    getRichAdminsWithSpecificAttributes {\n+        @Override\n+        public List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            return ac.getGroupsManager().getRichAdminsWithSpecificAttributes(ac.getSession(),\n+                    ac.getGroupById(parms.readInt(\"group\")),\n+                    parms.readList(\"specificAttributes\", String.class));\n+        }\n+    },\n+\n+    /*#\n+     * Get all Group admins, which are assigned directly,\n+     *  as RichUsers with specific attributes (from user namespace)\n+     *\n+     * @deprecated\n+     * @param group int Group <code>id</code>\n+     * @param specificAttributes List<String> list of attributes URNs\n+     * @return List<RichUser> direct admins with attributes\n+     */\n+    getDirectRichAdminsWithSpecificAttributes {\n+        @Override\n+        public List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            return ac.getGroupsManager().getDirectRichAdminsWithSpecificAttributes(ac.getSession(),\n+                    ac.getGroupById(parms.readInt(\"group\")),\n+                    parms.readList(\"specificAttributes\", String.class));\n+        }\n+    },\n+\n+    /*#\n+     * Returns direct descendant groups of a VO.\n+     *\n+     * @param vo int VO <code>id</code>\n+     * @return List<Group> Children groups\n+     */\n+    getGroups {\n+        @Override\n+        public List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            return ac.getGroupsManager().getGroups(ac.getSession(), ac.getVoById(parms.readInt(\"vo\")));\n+\n+        }\n+    },\n+\n+    /*#\n+     * Returns groups count in a VO.\n+     *\n+     * @param vo int VO <code>id</code>\n+     * @return int Groups count\n+     */\n+    /*#\n+     * Gets count of all groups.\n+\n+     * @return int groups count\n+     */\n+    getGroupsCount {\n+        @Override\n+        public Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            if (parms.contains(\"vo\")) {\n+                return ac.getGroupsManager().getGroupsCount(ac.getSession(), ac.getVoById(parms.readInt(\"vo\")));\n+            } else {\n+                return ac.getGroupsManager().getGroupsCount(ac.getSession());\n+            }\n+        }\n+    },\n+\n+    /*#\n+     * Returns subgroups count of a group.\n+     *\n+     * @param parentGroup int Parent group <code>id</code>\n+     * @return int Subgroups count\n+     */\n+    getSubGroupsCount {\n+        @Override\n+        public Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getGroupsManager().getSubGroupsCount(ac.getSession(), ac.getGroupById(parms.readInt(\"parentGroup\")));\n+        }\n+    },\n+\n+    /*#\n+     * Delete all groups in a VO.\n+     *\n+     * @param vo int VO <code>id</code>\n+     */\n+    deleteAllGroups {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            ac.getGroupsManager().deleteAllGroups(ac.getSession(),\n+                    ac.getVoById(parms.readInt(\"vo\")));\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Forces group synchronization.\n+     *\n+     * @param group int Group <code>id</code>\n+     */\n+    forceGroupSynchronization {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            ac.getGroupsManager().forceGroupSynchronization(ac.getSession(),\n+                    ac.getGroupById(parms.readInt(\"group\")));\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Returns parent VO of a group.\n+     *\n+     * @param group int Group <code>id</code>\n+     * @return Vo Parent VO\n+     */\n+    getVo {\n+        @Override\n+        public Vo call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            return ac.getGroupsManager().getVo(ac.getSession(),\n+                    ac.getGroupById(parms.readInt(\"group\")));\n+        }\n+    },\n+\n+    /*#\n+     * Returns members of a parent group.\n+     *\n+     * @param group int Child group <code>id</code>\n+     * @return List<Member> Parent group members\n+     */\n+    getParentGroupMembers {\n+        @Override\n+        public List<Member> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            return ac.getGroupsManager().getParentGroupMembers(ac.getSession(),\n+                    ac.getGroupById(parms.readInt(\"group\")));\n+        }\n+    },\n+\n+    /*#\n+     * Returns members of a parent group.\n+     * RichMember contains User object.\n+     *\n+     * @param group int Child group <code>id</code>\n+     * @return List<RichMember> Parent group members\n+     */\n+    getParentGroupRichMembers {\n+        @Override\n+        public List<RichMember> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            return ac.getGroupsManager().getParentGroupRichMembers(ac.getSession(),\n+                    ac.getGroupById(parms.readInt(\"group\")));\n+        }\n+    },\n+\n+    /*#\n+     * Returns members of a parent group.\n+     * RichMember contains User object and attributes.\n+     *\n+     * @param group int Child group <code>id</code>\n+     * @return List<RichMember> Parent group members\n+     */\n+    getParentGroupRichMembersWithAttributes {\n+        @Override\n+        public List<RichMember> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            return ac.getGroupsManager().getParentGroupRichMembersWithAttributes(ac.getSession(),\n+                    ac.getGroupById(parms.readInt(\"group\")));\n+        }\n+    },\n+\n+    /*#\n+     * Returns groups for a member.\n+     *\n+     * @param member int Member <code>id</code>\n+     * @return List<Group> Groups of the member\n+     */\n+    getMemberGroups {\n+        @Override\n+        public List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            return ac.getGroupsManager().getMemberGroups(ac.getSession(),\n+                    ac.getMemberById(parms.readInt(\"member\")));\n+        }\n+    },\n+\n+    /*#\n+     * Returns groups with specific attribute for a member.\n+     *\n+     * @param member int Member <code>id</code>\n+     * @param attribute Attribute attribute object with value\n+     * @return List<Group> Groups of the member\n+     */\n+    getMemberGroupsByAttribute {\n+        @Override\n+        public List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            return ac.getGroupsManager().getMemberGroupsByAttribute(ac.getSession(),\n+                    ac.getMemberById(parms.readInt(\"member\")), parms.read(\"attribute\", Attribute.class));\n+        }\n+    },\n+\n+    /*#\n+     * Returns sub-list of all RichGroups, each containing selected attributes, starting at fromIndex (included)\n+     * and ending at the size of the original list.\n+     *\n+     * Example: [1,2,3,4], fromIndex=1 => [2,3,4]\n+     *\n+     * @param vo int <code>id</code> of vo\n+     * @param fromIndex int begin index of returned subList, included\n+     * @param attrNames List<String> if attrNames is null method will return RichGroups containing all attributes\n+     * @return List<RichGroup> RichGroups containing selected attributes\n+     */\n+    /*#\n+     * Returns sub-list of all RichGroups, each containing selected attributes, starting at first index of the original\n+     * list (included) and ending at the toIndex (included).\n+     *\n+     * Example: [1,2,3,4], toIndex=2 => [1,2,3]\n+     *\n+     * @param vo int <code>id</code> of vo\n+     * @param toIndex int end index of returned subList, included\n+     * @param attrNames List<String> if attrNames is null method will return RichGroups containing all attributes\n+     * @return List<RichGroup> RichGroups containing selected attributes\n+     */\n+    /*#\n+     * Returns sub-list of all RichGroups, each containing selected attributes, starting at fromIndex (included)\n+     * and ending at the toIndex (included).\n+     *\n+     * Example: [1,2,3,4], fromIndex=1, toIndex=2 => [2,3]\n+     *\n+     * @param vo int <code>id</code> of vo\n+     * @param fromIndex int begin index of returned subList, included\n+     * @param toIndex int end index of returned subList, included\n+     * @param attrNames List<String> if attrNames is null method will return RichGroups containing all attributes\n+     * @return List<RichGroup> RichGroups containing selected attributes\n+     */\n+    /*#\n+     * Returns full list of all RichGroups containing selected attributes.\n+     *\n+     * @param vo int <code>id</code> of vo\n+     * @param attrNames List<String> if attrNames is null method will return RichGroups containing all attributes\n+     * @return List<RichGroup> RichGroups containing selected attributes\n+     */\n+    getAllRichGroupsWithAttributesByNames {\n+        @Override\n+        public List<RichGroup> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            List<RichGroup> listOfRichGroups = ac.getGroupsManager().getAllRichGroupsWithAttributesByNames(ac.getSession(),\n+                    ac.getVoById(parms.readInt(\"vo\")),\n+                    parms.readList(\"attrNames\", String.class));\n+\n+            if (listOfRichGroups == null) {\n+                listOfRichGroups = new ArrayList<>();\n+            }\n+\n+            if (parms.contains(\"fromIndex\") && parms.contains(\"toIndex\")) {\n+                return ac.getSublist(listOfRichGroups, parms.readInt(\"fromIndex\"), parms.readInt(\"toIndex\"));\n+            } else if (parms.contains(\"fromIndex\")) {\n+                int toIndex = listOfRichGroups.size();\n+                return ac.getSublist(listOfRichGroups, parms.readInt(\"fromIndex\"), toIndex);\n+            } else if (parms.contains(\"toIndex\")) {\n+                return ac.getSublist(listOfRichGroups, 0, parms.readInt(\"toIndex\"));\n+            } else {\n+                return listOfRichGroups;\n+            }\n+        }\n+    },\n+\n+    /*#\n+     * Returns sub-list of member's RichGroups, each containing selected attributes, starting at fromIndex (included)\n+     * and ending at the size of the original list.\n+     *\n+     * Example: [1,2,3,4], fromIndex=1 => [2,3,4]\n+     *\n+     * \"members\" group is not included!\n+     *\n+     * @param member int <code>id</code> of member\n+     * @param fromIndex int begin index of returned subList, included\n+     * @param attrNames List<String> if attrNames is null method will return RichGroups containing all attributes\n+     * @return List<RichGroup> RichGroups containing selected attributes\n+     */\n+    /*#\n+     * Returns sub-list of member's RichGroups, each containing selected attributes, starting at first index of the original\n+     * list (included) and ending at the toIndex (included).\n+     *\n+     * Example: [1,2,3,4], toIndex=2 => [1,2,3]\n+     *\n+     * \"members\" group is not included!\n+     *\n+     * @param member int <code>id</code> of member\n+     * @param toIndex int end index of returned subList, included\n+     * @param attrNames List<String> if attrNames is null method will return RichGroups containing all attributes\n+     * @return List<RichGroup> RichGroups containing selected attributes\n+     */\n+    /*#\n+     * Returns sub-list of member's RichGroups, each containing selected attributes, starting at fromIndex (included)\n+     * and ending at the toIndex (included).\n+     *\n+     * Example: [1,2,3,4], fromIndex=1, toIndex=2 => [2,3]\n+     *\n+     * \"members\" group is not included!\n+     *\n+     * @param member int <code>id</code> of member\n+     * @param fromIndex int begin index of returned subList, included\n+     * @param toIndex int end index of returned subList, included\n+     * @param attrNames List<String> if attrNames is null method will return RichGroups containing all attributes\n+     * @return List<RichGroup> RichGroups containing selected attributes\n+     */\n+    /*#\n+     * Returns full list of member's RichGroups containing selected attributes.\n+     *\n+     * \"members\" group is not included!\n+     *\n+     * @param member int <code>id</code> of member\n+     * @param attrNames List<String> if attrNames is null method will return RichGroups containing all attributes\n+     * @return List<RichGroup> RichGroups containing selected attributes\n+     */\n+    getMemberRichGroupsWithAttributesByNames {\n+        @Override\n+        public List<RichGroup> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            List<RichGroup> listOfRichGroups = ac.getGroupsManager().getMemberRichGroupsWithAttributesByNames(ac.getSession(),\n+                    ac.getMemberById(parms.readInt(\"member\")),\n+                    parms.readList(\"attrNames\", String.class));\n+\n+            if (listOfRichGroups == null) {\n+                listOfRichGroups = new ArrayList<>();\n+            }\n+\n+            if (parms.contains(\"fromIndex\") && parms.contains(\"toIndex\")) {\n+                return ac.getSublist(listOfRichGroups, parms.readInt(\"fromIndex\"), parms.readInt(\"toIndex\"));\n+            } else if (parms.contains(\"fromIndex\")) {\n+                int toIndex = listOfRichGroups.size();\n+                return ac.getSublist(listOfRichGroups, parms.readInt(\"fromIndex\"), toIndex);\n+            } else if (parms.contains(\"toIndex\")) {\n+                return ac.getSublist(listOfRichGroups, 0, parms.readInt(\"toIndex\"));\n+            } else {\n+                return listOfRichGroups;\n+            }\n+        }\n+    },\n+\n+    /*#\n+     * Returns RichSubGroups from parent group containing selected attributes (only 1 level sub groups).\n+     *\n+     * @param group int <code>id</code> of group\n+     * @param attrNames List<String> if attrNames is null method will return RichGroups containing all attributes\n+     * @return List<RichGroup> RichGroups containing selected attributes\n+     */\n+    getRichSubGroupsWithAttributesByNames {\n+        @Override\n+        public List<RichGroup> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            return ac.getGroupsManager().getRichSubGroupsWithAttributesByNames(ac.getSession(),\n+                    ac.getGroupById(parms.readInt(\"group\")),\n+                    parms.readList(\"attrNames\", String.class));\n+        }\n+    },\n+\n+    /*#\n+     * Returns all AllRichSubGroups from parent group containing selected attributes (all level subgroups).\n+     *\n+     * @param group int <code>id</code> of group\n+     * @param attrNames List<String> if attrNames is null method will return RichGroups containing all attributes\n+     * @return List<RichGroup> RichGroups containing selected attributes\n+     */\n+    getAllRichSubGroupsWithAttributesByNames {\n+        @Override\n+        public List<RichGroup> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            return ac.getGroupsManager().getAllRichSubGroupsWithAttributesByNames(ac.getSession(),\n+                    ac.getGroupById(parms.readInt(\"group\")),\n+                    parms.readList(\"attrNames\", String.class));\n+        }\n+    },\n+\n+    /*#\n+     * Returns RichGroup selected by id containing selected attributes\n+     *\n+     * @param groupId int <code>id</code> of group\n+     * @param attrNames List<String> if attrNames is null method will return RichGroup containing all attributes\n+     * @return List<RichGroup> RichGroups containing selected attributes\n+     */\n+    getRichGroupByIdWithAttributesByNames {\n+        @Override\n+        public RichGroup call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            return ac.getGroupsManager().getRichGroupByIdWithAttributesByNames(ac.getSession(),\n+                    parms.readInt(\"groupId\"),\n+                    parms.readList(\"attrNames\", String.class));\n+        }\n+    },\n+\n+    /*#\n+     * Returns all groups of specific member including group \"members\".\n+     *\n+     * @param member int <code>id</code> of member\n+     * @return List<Group> Groups of member\n+     */\n+    getAllMemberGroups {\n+        @Override\n+        public List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            return ac.getGroupsManager().getAllMemberGroups(ac.getSession(),\n+                    ac.getMemberById(parms.readInt(\"member\")));\n+        }\n+    },\n+\n+    /*#\n+     * Set membership status of a member in a group. Please note, that resulting Status after change is\n+     * calculated from all members sub-groups and groups in relation sourcing this member. If in any of them\n+     * is VALID, resulting status is still VALID.\n+     *\n+     * @param member int Member <code>id</code>\n+     * @param group int Group <code>id</code>\n+     * @param status String VALID | EXPIRED\n+     * @exampleParam status \"EXPIRED\"\n+     * @return Member Member with status after change\n+     */\n+    setGroupsMemberStatus {\n+        @Override\n+        public Member call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            MemberGroupStatus status = MemberGroupStatus.valueOf(parms.readString(\"status\"));\n+            return ac.getGroupsManager().setMemberGroupStatus(ac.getSession(),\n+                    ac.getMemberById(parms.readInt(\"member\")),\n+                    ac.getGroupById(parms.readInt(\"group\")),\n+                    status);\n+        }\n+    };\n }\n",
            "diff_size": 1140
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1013",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/210/GroupsManagerMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/210/GroupsManagerMethod.java\nindex 34ffb195cce..27d070677ec 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/210/GroupsManagerMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/210/GroupsManagerMethod.java\n@@ -4,7 +4,6 @@ import cz.metacentrum.perun.core.api.Attribute;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n-\n import cz.metacentrum.perun.core.api.Group;\n import cz.metacentrum.perun.core.api.Member;\n import cz.metacentrum.perun.core.api.MemberGroupStatus;\n@@ -19,1145 +18,1108 @@ import cz.metacentrum.perun.rpc.ManagerMethod;\n import cz.metacentrum.perun.core.api.exceptions.RpcException;\n import cz.metacentrum.perun.rpc.deserializer.Deserializer;\n \n+\n public enum GroupsManagerMethod implements ManagerMethod {\n \n-\t/*#\n-\t * Creates a subgroup of a group.\n-\t *\n-\t * @param parentGroup int Parent Group <code>id</code>\n-\t * @param group Group JSON Group class\n-\t * @return Group Newly created group\n-\t */\n-\t/*#\n-\t * Creates a subgroup of a group.\n-\t *\n-\t * @param parentGroup int Parent Group <code>id</code>\n-\t * @param name String name of a group\n-\t * @param description String description of a group\n-\t * @return Group Newly created group\n-\t */\n-\t/*#\n-\t * Creates a new group in the specific VO defined by object vo in parameter.\n-\t * Important: voId in object group is ignored.\n-\t *\n-\t * @param vo int Parent VO <code>id</code>\n-\t * @param group Group JSON Group class\n-\t * @return Group Newly created group\n-\t */\n-\t/*#\n-\t * Creates a new group in the specific VO.\n-\t *\n-\t * @param vo int Parent VO <code>id</code>\n-\t * @param name String name of a group\n-\t * @param description String description of a group\n-\t * @return Group Newly created group\n-\t */\n-\tcreateGroup {\n-\n-\t\t@Override\n-\t\tpublic Group call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tif (parms.contains(\"group\")) {\n-\t\t\t\tif (parms.contains(\"parentGroup\")) {\n-\t\t\t\t\treturn ac.getGroupsManager().createGroup(ac.getSession(),\n-\t\t\t\t\t\t\tac.getGroupById(parms.readInt(\"parentGroup\")),\n-\t\t\t\t\t\t\tparms.read(\"group\", Group.class));\n-\t\t\t\t} else if (parms.contains(\"vo\")) {\n-\t\t\t\t\tGroup group = parms.read(\"group\", Group.class);\n-\t\t\t\t\tif (group.getParentGroupId() == null) {\n-\t\t\t\t\t\treturn ac.getGroupsManager().createGroup(ac.getSession(),\n-\t\t\t\t\t\t\t\tac.getVoById(parms.readInt(\"vo\")),\n-\t\t\t\t\t\t\t\tgroup);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new RpcException(RpcException.Type.WRONG_PARAMETER, \"Top-level groups can't have parentGroupId set!\");\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new RpcException(RpcException.Type.MISSING_VALUE, \"vo or parentGroup\");\n-\t\t\t\t}\n-\t\t\t} else if (parms.contains(\"name\") && parms.contains(\"description\")) {\n-\t\t\t\tif (parms.contains(\"parentGroup\")) {\n-\t\t\t\t\tString name = parms.readString(\"name\");\n-\t\t\t\t\tString description = parms.readString(\"description\");\n-\t\t\t\t\tGroup group = new Group(name, description);\n-\t\t\t\t\treturn ac.getGroupsManager().createGroup(ac.getSession(),\n-\t\t\t\t\t\t\tac.getGroupById(parms.readInt(\"parentGroup\")),\n-\t\t\t\t\t\t\tgroup);\n-\t\t\t\t} else if (parms.contains(\"vo\")) {\n-\t\t\t\t\tString name = parms.readString(\"name\");\n-\t\t\t\t\tString description = parms.readString(\"description\");\n-\t\t\t\t\tGroup group = new Group(name, description);\n-\t\t\t\t\treturn ac.getGroupsManager().createGroup(ac.getSession(),\n-\t\t\t\t\t\t\tac.getVoById(parms.readInt(\"vo\")),\n-\t\t\t\t\t\t\tgroup);\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new RpcException(RpcException.Type.MISSING_VALUE, \"vo or parentGroup\");\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tthrow new RpcException(RpcException.Type.MISSING_VALUE, \"group or (name and description)\");\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Create union of two groups, where \"operandGroup\" is technically set as subgroup of \"resultGroup\".\n-\t * Members from \"operandGroup\" are added to \"resultGroup\" as INDIRECT members. Union is honored also\n-\t * in all group member changing operations.\n-\t *\n-\t * @param resultGroup int <code>id</code> of Group to have included \"operandGroup\"\n-\t * @param operandGroup int <code>id</code> of Group to be included into \"resultGroup\"\n-\t * @return Group Result group\n-\t */\n-\tcreateGroupUnion {\n-\n-\t\t@Override\n-\t\tpublic Group call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\treturn ac.getGroupsManager().createGroupUnion(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"resultGroup\")),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"operandGroup\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Deletes a group. Group is not deleted, if contains members or is assigned to any resource.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t */\n-\t/*#\n-\t * Forcefully deletes a group (remove all group members, remove group from resources).\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @param force boolean If true use force delete.\n-\t */\n-\tdeleteGroup {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tif(parms.contains(\"force\") && parms.readBoolean(\"force\")) {\n-\t\t\t\tac.getGroupsManager().deleteGroup(ac.getSession(),\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")), true);\n-\t\t\t\treturn null;\n-\t\t\t} else {\n-\t\t\t\tac.getGroupsManager().deleteGroup(ac.getSession(),\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")), false);\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Forcefully deletes a list of groups (remove all group members, remove group from resources).\n-\t *\n-\t * @param groups int[] Array of Group IDs\n-\t * @param forceDelete boolean If true use force delete.\n-\t */\n-\tdeleteGroups {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\t//TODO: optimalizovat?\n-\t\t\tint[] ids = parms.readArrayOfInts(\"groups\");\n-\t\t\tList<Group> groups = new ArrayList<>(ids.length);\n-\t\t\tfor (int i : ids) {\n-\t\t\t\tgroups.add(ac.getGroupById(i));\n-\t\t\t}\n-\n-\t\t\tac.getGroupsManager().deleteGroups(ac.getSession(),\n-\t\t\t\t\tgroups,\n-\t\t\t\t\tparms.readBoolean(\"forceDelete\"));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Removes union of two groups, when \"operandGroup\" is technically removed from subgroups of \"resultGroup\".\n-\t * Members from \"operandGroup\" are removed from \"resultGroup\" if they were INDIRECT members sourcing from this group only.\n-\t *\n-\t * @param resultGroup int <code>id</code> of Group to have removed \"operandGroup\" from subgroups\n-\t * @param operandGroup int <code>id</code> of Group to be removed from \"resultGroup\" subgroups\n-\t */\n-\tremoveGroupUnion {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tac.getGroupsManager().removeGroupUnion(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"resultGroup\")),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"operandGroup\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Updates a group.\n-\t *\n-\t * @param group Group JSON Group class\n-\t * @return Group Updated group\n-\t */\n-\tupdateGroup {\n-\n-\t\t@Override\n-\t\tpublic Group call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\treturn ac.getGroupsManager().updateGroup(ac.getSession(),\n-\t\t\t\t\tparms.read(\"group\", Group.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Moves \"movingGroup\" (including subGroups) under \"destinationGroup\" as subGroup within same Vo.\n-\t * In case of null \"destinationGroup\", \"movingGroup\" is moved as top level group.\n-\t * During movement are also processed indirect members.\n-\t *\n-\t * @param destinationGroup int <code>id</code> of Group to have \"movingGroup\" as subGroup\n-\t * @param movingGroup int <code>id</code> of Group to be moved under \"destinationGroup\"\n-\t */\n-\tmoveGroup {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tif(parms.contains(\"destinationGroup\")) {\n-\t\t\t\tac.getGroupsManager().moveGroup(ac.getSession(),\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"destinationGroup\")),\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"movingGroup\")));\n-\t\t\t} else {\n-\t\t\t\tac.getGroupsManager().moveGroup(ac.getSession(),\n-\t\t\t\t\t\tnull,\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"movingGroup\")));\n-\t\t\t}\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns a group by <code>id</code>.\n-\t *\n-\t * @param id int Group <code>id</code>\n-\t * @return Group Found group\n-\t */\n-\tgetGroupById {\n-\n-\t\t@Override\n-\t\tpublic Group call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGroupById(parms.readInt(\"id\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns a group by VO and Group name.\n-\t *\n-\t * IMPORTANT: need to use full name of group (ex. 'toplevel:a:b', not the shortname which is in this example 'b')\n-\t *\n-\t * @param vo int VO <code>id</code>\n-\t * @param name String Group name\n-\t * @return Group Found group\n-\t */\n-\tgetGroupByName {\n-\n-\t\t@Override\n-\t\tpublic Group call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGroupsManager().getGroupByName(ac.getSession(),\n-\t\t\t\t\tac.getVoById(parms.readInt(\"vo\")),\n-\t\t\t\t\tparms.readString(\"name\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Return all operand groups for specified result groups (all INCLUDED groups).\n-\t * If \"reverseDirection\" is TRUE than return all result groups for specified operand group (where group is INCLUDED).\n-\t *\n-\t * @param group int <code>id</code> of Group to get groups in union.\n-\t * @param reverseDirection boolean FALSE (default) return INCLUDED groups / TRUE = return groups where INCLUDED\n-\t * @return List<Group> List of groups in union relation.\n-\t */\n-\tgetGroupUnions {\n-\n-\t\t@Override\n-\t\tpublic List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGroupsManager().getGroupUnions(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")),\n-\t\t\t\t\tparms.readBoolean(\"reverseDirection\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Adds a member to a group.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @param member int Member <code>id</code>\n-\t */\n-\taddMember {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tac.getGroupsManager().addMember(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")),\n-\t\t\t\t\tac.getMemberById(parms.readInt(\"member\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Removes a member from a group.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @param member int Member <code>id</code>\n-\t */\n-\tremoveMember {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tac.getGroupsManager().removeMember(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")),\n-\t\t\t\t\tac.getMemberById(parms.readInt(\"member\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns members of a group.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @return List<Member> Group members\n-\t */\n-\tgetGroupMembers {\n-\n-\t\t@Override\n-\t\tpublic List<Member> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getGroupsManager().getGroupMembers(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")));\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns direct members of a group.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @return List<Member> Group members\n-\t */\n-\tgetGroupDirectMembers {\n-\n-\t\t@Override\n-\t\tpublic List<Member> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getGroupsManager().getGroupDirectMembers(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")));\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns members of a group.\n-\t * RichMember contains User object.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @return List<RichMember> Group members\n-\t */\n-\tgetGroupRichMembers {\n-\n-\t\t@Override\n-\t\tpublic List<RichMember> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGroupsManager().getGroupRichMembers(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns direct members of a group.\n-\t * RichMember contains User object.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @return List<RichMember> Group members\n-\t */\n-\tgetGroupDirectRichMembers {\n-\n-\t\t@Override\n-\t\tpublic List<RichMember> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGroupsManager().getGroupDirectRichMembers(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns members of a group.\n-\t * RichMember contains User object and attributes.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @return List<RichMember> Group members\n-\t */\n-\tgetGroupRichMembersWithAttributes {\n-\n-\t\t@Override\n-\t\tpublic List<RichMember> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGroupsManager().getGroupRichMembersWithAttributes(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Return true if Member is member of the Group\n-\t *\n-\t * @param group int Group ID\n-\t * @param member int Member ID\n-\t * @return boolean True if Member is member of the Group\n-\t *\n-\t * @throw GroupNotExistsException When Group with <code>id</code> doesn't exist.\n-\t */\n-\tisGroupMember {\n-\n-\t\t@Override\n-\t\tpublic Boolean call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGroupsManager().isGroupMember(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")),\n-\t\t\t\t\tac.getMemberById(parms.readInt(\"member\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns count of group members.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @return int Members count\n-\t */\n-\tgetGroupMembersCount {\n-\n-\t\t@Override\n-\t\tpublic Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGroupsManager().getGroupMembersCount(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns all groups in a VO.\n-\t *\n-\t * @param vo int VO <code>id</code>\n-\t * @return List<Group> Groups\n-\t */\n-\tgetAllGroups {\n-\t\t@Override\n-\t\tpublic List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGroupsManager().getAllGroups(ac.getSession(), ac.getVoById(parms.readInt(\"vo\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns all groups in a VO by a hierarchy.\n-\t * Example: [Group => [Group => [Group => []], Group => []]]\n-\t *\n-\t * @param vo int VO <code>id</code>\n-\t * @return List<Object> Groups with subgroups\n-\t */\n-\tgetAllGroupsWithHierarchy {\n-\t\t@Override\n-\t\tpublic List<Object> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tList<Object> convertedGroups = new ArrayList<Object>();\n-\t\t\t// Every list must contain as a first field the group object which represents the group. First list contains null on the first position.\n-\t\t\tconvertedGroups.add(0, null);\n-\n-\t\t\tMap<Group, Object> groups = ac.getGroupsManager().getAllGroupsWithHierarchy(ac.getSession(), ac.getVoById(parms.readInt(\"vo\")));\n-\n-\t\t\tfor (Group group: groups.keySet()) {\n-\t\t\t\tconvertedGroups.add(ac.convertGroupsWithHierarchy(group, (Map<Group, Object>) groups.get(group)));\n-\t\t\t}\n-\t\t\treturn convertedGroups;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns a parent group of a group.\n-\t *\n-\t * @param group int Child group <code>id</code>\n-\t * @return Group Parent group\n-\t */\n-\tgetParentGroup {\n-\t\t@Override\n-\t\tpublic Group call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGroupsManager().getParentGroup(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns subgroups of a group.\n-\t *\n-\t * @param parentGroup int Group id\n-\t * @return List<Group> Child groups\n-\t */\n-\tgetSubGroups {\n-\t\t@Override\n-\t\tpublic List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGroupsManager().getSubGroups(ac.getSession(), ac.getGroupById(parms.readInt(\"parentGroup\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Adds an admin to a group.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @param user int User <code>id</code>\n-\t */\n-\t/*#\n-\t * Adds an group admin to a group.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @param authorizedGroup int Group <code>id</code>\n-\t */\n-\taddAdmin {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tif (parms.contains(\"user\")) {\n-\t\t\t\tac.getGroupsManager().addAdmin(ac.getSession(),\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")),\n-\t\t\t\t\t\tac.getUserById(parms.readInt(\"user\")));\n-\t\t\t} else {\n-\t\t\t\tac.getGroupsManager().addAdmin(ac.getSession(),\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")),\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"authorizedGroup\")));\n-\t\t\t}\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Removes an admin of a group.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @param user int User <code>id</code>\n-\t */\n-\t/*#\n-\t * Removes a group admin of a group.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @param authorizedGroup int Group <code>id</code>\n-\t */\n-\tremoveAdmin {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tif (parms.contains(\"user\")) {\n-\t\t\t\tac.getGroupsManager().removeAdmin(ac.getSession(),\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")),\n-\t\t\t\t\t\tac.getUserById(parms.readInt(\"user\")));\n-\t\t\t} else {\n-\t\t\t\tac.getGroupsManager().removeAdmin(ac.getSession(),\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")),\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"authorizedGroup\")));\n-\t\t\t}\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get list of all group administrators for supported role and specific group.\n-\t *\n-\t * If onlyDirectAdmins is == true, return only direct admins of the group for supported role.\n-\t *\n-\t * Supported roles: GroupAdmin\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @param onlyDirectAdmins int if == true, get only direct user administrators (if == false, get both direct and indirect)\n-\t *\n-\t * @return List<User> list of all group administrators of the given group for supported role\n-\t */\n-\t/*#\n-\t * Returns administrators of a group.\n-\t *\n-\t * @deprecated\n-\t * @param group int Group <code>id</code>\n-\t * @return List<User> Group admins\n-\t */\n-\tgetAdmins {\n-\n-\t\t@Override\n-\t\tpublic List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif(parms.contains(\"onlyDirectAdmins\")) {\n-\t\t\t\treturn ac.getGroupsManager().getAdmins(ac.getSession(),\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")),\n-\t\t\t\t\t\tparms.readBoolean(\"onlyDirectAdmins\"));\n-\t\t\t} else {\n-\t\t\t\treturn ac.getGroupsManager().getAdmins(ac.getSession(),\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")));\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns direct administrators of a group.\n-\t *\n-\t * @deprecated\n-\t * @param group int Group <code>id</code>\n-\t * @return List<User> Group admins\n-\t */\n-\tgetDirectAdmins {\n-\n-\t\t@Override\n-\t\tpublic List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGroupsManager().getDirectAdmins(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns administrator groups of a group.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @return List<Group> admins\n-\t */\n-\tgetAdminGroups {\n-\n-\t\t@Override\n-\t\tpublic List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGroupsManager().getAdminGroups(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get list of all richUser administrators for the group and supported role with specific attributes.\n-\t *\n-\t * Supported roles: GroupAdmin\n-\t *\n-\t * If \"onlyDirectAdmins\" is == true, return only direct admins of the group for supported role with specific attributes.\n-\t * If \"allUserAttributes\" is == true, do not specify attributes through list and return them all in objects richUser. Ignoring list of specific attributes.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @param specificAttributes List<String> list of specified attributes which are needed in object richUser\n-\t * @param allUserAttributes int if == true, get all possible user attributes and ignore list of specificAttributes (if false, get only specific attributes)\n-\t * @param onlyDirectAdmins int if == true, get only direct group administrators (if false, get both direct and indirect)\n-\t *\n-\t * @return List<RichUser> list of RichUser administrators for the group and supported role with attributes\n-\t */\n-\t/*#\n-\t * Get all Group admins as RichUsers\n-\t *\n-\t * @deprecated\n-\t * @param group int Group <code>id</code>\n-\t * @return List<RichUser> admins\n-\t */\n-\tgetRichAdmins {\n-\n-\t\t@Override\n-\t\tpublic List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif(parms.contains(\"onlyDirectAdmins\")) {\n-\t\t\t\treturn ac.getGroupsManager().getRichAdmins(ac.getSession(),\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")),\n-\t\t\t\t\t\tparms.readList(\"specificAttributes\", String.class),\n-\t\t\t\t\t\tparms.readBoolean(\"allUserAttributes\"),\n-\t\t\t\t\t\tparms.readBoolean(\"onlyDirectAdmins\"));\n-\t\t\t} else {\n-\t\t\t\treturn ac.getGroupsManager().getRichAdmins(ac.getSession(),\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")));\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all Group admins as RichUsers with all their non-null user attributes\n-\t *\n-\t * @deprecated\n-\t * @param group int Group <code>id</code>\n-\t * @return List<RichUser> admins with attributes\n-\t */\n-\tgetRichAdminsWithAttributes {\n-\n-\t\t@Override\n-\t\tpublic List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGroupsManager().getRichAdminsWithAttributes(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t **\n-\t * Get list of all richGroups with selected attributes assigned to resource.\n-\t * Allowed namespaces of attributes are group and group-resource.\n-\t *\n-\t * Last step is filtration of attributes:\n-\t * Attributes are filtered by rights of user in session. User get only those selected attributes he has rights to read.\n-\t *\n-\t * @param resource int Resource <code>id</code>\n-\t * @param attrNames List<String> names of attributes\n-\t * @return List<RichGroup> groups with attributes\n-\t *\n-\t */\n-\tgetRichGroupsAssignedToResourceWithAttributesByNames {\n-\n-\t\t@Override\n-\t\tpublic List<RichGroup> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGroupsManager().getRichGroupsAssignedToResourceWithAttributesByNames(ac.getSession(),\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")),\n-\t\t\t\t\tparms.readList(\"attrNames\", String.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all Group admins as RichUsers with specific attributes (from user namespace)\n-\t *\n-\t * @deprecated\n-\t * @param group int Group <code>id</code>\n-\t * @param specificAttributes List<String> list of attributes URNs\n-\t * @return List<RichUser> admins with attributes\n-\t */\n-\tgetRichAdminsWithSpecificAttributes {\n-\n-\t\t@Override\n-\t\tpublic List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getGroupsManager().getRichAdminsWithSpecificAttributes(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")),\n-\t\t\t\t\tparms.readList(\"specificAttributes\", String.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all Group admins, which are assigned directly,\n-\t *  as RichUsers with specific attributes (from user namespace)\n-\t *\n-\t * @deprecated\n-\t * @param group int Group <code>id</code>\n-\t * @param specificAttributes List<String> list of attributes URNs\n-\t * @return List<RichUser> direct admins with attributes\n-\t */\n-\tgetDirectRichAdminsWithSpecificAttributes {\n-\n-\t\t@Override\n-\t\tpublic List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getGroupsManager().getDirectRichAdminsWithSpecificAttributes(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")),\n-\t\t\t\t\tparms.readList(\"specificAttributes\", String.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns direct descendant groups of a VO.\n-\t *\n-\t * @param vo int VO <code>id</code>\n-\t * @return List<Group> Children groups\n-\t */\n-\tgetGroups {\n-\n-\t\t@Override\n-\t\tpublic List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getGroupsManager().getGroups(ac.getSession(), ac.getVoById(parms.readInt(\"vo\")));\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns groups count in a VO.\n-\t *\n-\t * @param vo int VO <code>id</code>\n-\t * @return int Groups count\n-\t */\n-\t/*#\n-\t * Gets count of all groups.\n-\n-\t * @return int groups count\n-\t */\n-\tgetGroupsCount {\n-\n-\t\t@Override\n-\t\tpublic Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif(parms.contains(\"vo\")) {\n-\t\t\t\treturn ac.getGroupsManager().getGroupsCount(ac.getSession(), ac.getVoById(parms.readInt(\"vo\")));\n-\t\t\t} else {\n-\t\t\t\treturn ac.getGroupsManager().getGroupsCount(ac.getSession());\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns subgroups count of a group.\n-\t *\n-\t * @param parentGroup int Parent group <code>id</code>\n-\t * @return int Subgroups count\n-\t */\n-\tgetSubGroupsCount {\n-\n-\t\t@Override\n-\t\tpublic Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGroupsManager().getSubGroupsCount(ac.getSession(), ac.getGroupById(parms.readInt(\"parentGroup\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Delete all groups in a VO.\n-\t *\n-\t * @param vo int VO <code>id</code>\n-\t */\n-\tdeleteAllGroups {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tac.getGroupsManager().deleteAllGroups(ac.getSession(),\n-\t\t\t\t\tac.getVoById(parms.readInt(\"vo\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Forces group synchronization.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t */\n-\tforceGroupSynchronization {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\tac.getGroupsManager().forceGroupSynchronization(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns parent VO of a group.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @return Vo Parent VO\n-\t */\n-\tgetVo {\n-\n-\t\t@Override\n-\t\tpublic Vo call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getGroupsManager().getVo(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns members of a parent group.\n-\t *\n-\t * @param group int Child group <code>id</code>\n-\t * @return List<Member> Parent group members\n-\t */\n-\tgetParentGroupMembers {\n-\n-\t\t@Override\n-\t\tpublic List<Member> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getGroupsManager().getParentGroupMembers(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns members of a parent group.\n-\t * RichMember contains User object.\n-\t *\n-\t * @param group int Child group <code>id</code>\n-\t * @return List<RichMember> Parent group members\n-\t */\n-\tgetParentGroupRichMembers {\n-\n-\t\t@Override\n-\t\tpublic List<RichMember> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getGroupsManager().getParentGroupRichMembers(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns members of a parent group.\n-\t * RichMember contains User object and attributes.\n-\t *\n-\t * @param group int Child group <code>id</code>\n-\t * @return List<RichMember> Parent group members\n-\t */\n-\tgetParentGroupRichMembersWithAttributes {\n-\n-\t\t@Override\n-\t\tpublic List<RichMember> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getGroupsManager().getParentGroupRichMembersWithAttributes(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns groups for a member.\n-\t *\n-\t * @param member int Member <code>id</code>\n-\t * @return List<Group> Groups of the member\n-\t */\n-\tgetMemberGroups {\n-\n-\t\t@Override\n-\t\tpublic List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getGroupsManager().getMemberGroups(ac.getSession(),\n-\t\t\t\t\tac.getMemberById(parms.readInt(\"member\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns groups with specific attribute for a member.\n-\t *\n-\t * @param member int Member <code>id</code>\n-\t * @param attribute Attribute attribute object with value\n-\t * @return List<Group> Groups of the member\n-\t */\n-\tgetMemberGroupsByAttribute {\n-\n-\t\t@Override\n-\t\tpublic List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException{\n-\n-\t\t\treturn ac.getGroupsManager().getMemberGroupsByAttribute(ac.getSession(),\n-\t\t\t\t\tac.getMemberById(parms.readInt(\"member\")),parms.read(\"attribute\", Attribute.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns sub-list of all RichGroups, each containing selected attributes, starting at fromIndex (included)\n-\t * and ending at the size of the original list.\n-\t *\n-\t * Example: [1,2,3,4], fromIndex=1 => [2,3,4]\n-\t *\n-\t * @param vo int <code>id</code> of vo\n-\t * @param fromIndex int begin index of returned subList, included\n-\t * @param attrNames List<String> if attrNames is null method will return RichGroups containing all attributes\n-\t * @return List<RichGroup> RichGroups containing selected attributes\n-\t */\n-\t/*#\n-\t * Returns sub-list of all RichGroups, each containing selected attributes, starting at first index of the original\n-\t * list (included) and ending at the toIndex (included).\n-\t *\n-\t * Example: [1,2,3,4], toIndex=2 => [1,2,3]\n-\t *\n-\t * @param vo int <code>id</code> of vo\n-\t * @param toIndex int end index of returned subList, included\n-\t * @param attrNames List<String> if attrNames is null method will return RichGroups containing all attributes\n-\t * @return List<RichGroup> RichGroups containing selected attributes\n-\t */\n-\t/*#\n-\t * Returns sub-list of all RichGroups, each containing selected attributes, starting at fromIndex (included)\n-\t * and ending at the toIndex (included).\n-\t *\n-\t * Example: [1,2,3,4], fromIndex=1, toIndex=2 => [2,3]\n-\t *\n-\t * @param vo int <code>id</code> of vo\n-\t * @param fromIndex int begin index of returned subList, included\n-\t * @param toIndex int end index of returned subList, included\n-\t * @param attrNames List<String> if attrNames is null method will return RichGroups containing all attributes\n-\t * @return List<RichGroup> RichGroups containing selected attributes\n-\t */\n-\t/*#\n-\t * Returns full list of all RichGroups containing selected attributes.\n-\t *\n-\t * @param vo int <code>id</code> of vo\n-\t * @param attrNames List<String> if attrNames is null method will return RichGroups containing all attributes\n-\t * @return List<RichGroup> RichGroups containing selected attributes\n-\t */\n-\tgetAllRichGroupsWithAttributesByNames {\n-\n-\t\t@Override\n-\t\tpublic List<RichGroup> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\tList<RichGroup> listOfRichGroups = ac.getGroupsManager().getAllRichGroupsWithAttributesByNames(ac.getSession(),\n-\t\t\t\tac.getVoById(parms.readInt(\"vo\")),\n-\t\t\t\tparms.readList(\"attrNames\", String.class));\n-\n-\t\t\tif(listOfRichGroups == null) listOfRichGroups = new ArrayList<>();\n-\n-\t\t\tif (parms.contains(\"fromIndex\") && parms.contains(\"toIndex\")) {\n-\t\t\t\treturn ac.getSublist(listOfRichGroups, parms.readInt(\"fromIndex\"), parms.readInt(\"toIndex\"));\n-\t\t\t} else if (parms.contains(\"fromIndex\")) {\n-\t\t\t\tint toIndex = listOfRichGroups.size();\n-\t\t\t\treturn ac.getSublist(listOfRichGroups, parms.readInt(\"fromIndex\"), toIndex);\n-\t\t\t} else if (parms.contains(\"toIndex\")) {\n-\t\t\t\treturn ac.getSublist(listOfRichGroups, 0, parms.readInt(\"toIndex\"));\n-\t\t\t} else {\n-\t\t\t\treturn listOfRichGroups;\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns sub-list of member's RichGroups, each containing selected attributes, starting at fromIndex (included)\n-\t * and ending at the size of the original list.\n-\t *\n-\t * Example: [1,2,3,4], fromIndex=1 => [2,3,4]\n-\t *\n-\t * \"members\" group is not included!\n-\t *\n-\t * @param member int <code>id</code> of member\n-\t * @param fromIndex int begin index of returned subList, included\n-\t * @param attrNames List<String> if attrNames is null method will return RichGroups containing all attributes\n-\t * @return List<RichGroup> RichGroups containing selected attributes\n-\t */\n-\t/*#\n-\t * Returns sub-list of member's RichGroups, each containing selected attributes, starting at first index of the original\n-\t * list (included) and ending at the toIndex (included).\n-\t *\n-\t * Example: [1,2,3,4], toIndex=2 => [1,2,3]\n-\t *\n-\t * \"members\" group is not included!\n-\t *\n-\t * @param member int <code>id</code> of member\n-\t * @param toIndex int end index of returned subList, included\n-\t * @param attrNames List<String> if attrNames is null method will return RichGroups containing all attributes\n-\t * @return List<RichGroup> RichGroups containing selected attributes\n-\t */\n-\t/*#\n-\t * Returns sub-list of member's RichGroups, each containing selected attributes, starting at fromIndex (included)\n-\t * and ending at the toIndex (included).\n-\t *\n-\t * Example: [1,2,3,4], fromIndex=1, toIndex=2 => [2,3]\n-\t *\n-\t * \"members\" group is not included!\n-\t *\n-\t * @param member int <code>id</code> of member\n-\t * @param fromIndex int begin index of returned subList, included\n-\t * @param toIndex int end index of returned subList, included\n-\t * @param attrNames List<String> if attrNames is null method will return RichGroups containing all attributes\n-\t * @return List<RichGroup> RichGroups containing selected attributes\n-\t */\n-\t/*#\n-\t * Returns full list of member's RichGroups containing selected attributes.\n-\t *\n-\t * \"members\" group is not included!\n-\t * \n-\t * @param member int <code>id</code> of member\n-\t * @param attrNames List<String> if attrNames is null method will return RichGroups containing all attributes\n-\t * @return List<RichGroup> RichGroups containing selected attributes\n-\t */\n-\tgetMemberRichGroupsWithAttributesByNames {\n-\n-\t\t@Override\n-\t\tpublic List<RichGroup> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\tList<RichGroup> listOfRichGroups = ac.getGroupsManager().getMemberRichGroupsWithAttributesByNames(ac.getSession(),\n-\t\t\t\tac.getMemberById(parms.readInt(\"member\")),\n-\t\t\t\tparms.readList(\"attrNames\", String.class));\n-\n-\t\t\tif(listOfRichGroups == null) listOfRichGroups = new ArrayList<>();\n-\n-\t\t\tif (parms.contains(\"fromIndex\") && parms.contains(\"toIndex\")) {\n-\t\t\t\treturn ac.getSublist(listOfRichGroups, parms.readInt(\"fromIndex\"), parms.readInt(\"toIndex\"));\n-\t\t\t} else if (parms.contains(\"fromIndex\")) {\n-\t\t\t\tint toIndex = listOfRichGroups.size();\n-\t\t\t\treturn ac.getSublist(listOfRichGroups, parms.readInt(\"fromIndex\"), toIndex);\n-\t\t\t} else if (parms.contains(\"toIndex\")) {\n-\t\t\t\treturn ac.getSublist(listOfRichGroups, 0, parms.readInt(\"toIndex\"));\n-\t\t\t} else {\n-\t\t\t\treturn listOfRichGroups;\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns RichSubGroups from parent group containing selected attributes (only 1 level sub groups).\n-\t *\n-\t * @param group int <code>id</code> of group\n-\t * @param attrNames List<String> if attrNames is null method will return RichGroups containing all attributes\n-\t * @return List<RichGroup> RichGroups containing selected attributes\n-\t */\n-\tgetRichSubGroupsWithAttributesByNames {\n-\n-\t\t@Override\n-\t\tpublic List<RichGroup> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getGroupsManager().getRichSubGroupsWithAttributesByNames(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")),\n-\t\t\t\t\tparms.readList(\"attrNames\", String.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns all AllRichSubGroups from parent group containing selected attributes (all level subgroups).\n-\t *\n-\t * @param group int <code>id</code> of group\n-\t * @param attrNames List<String> if attrNames is null method will return RichGroups containing all attributes\n-\t * @return List<RichGroup> RichGroups containing selected attributes\n-\t */\n-\tgetAllRichSubGroupsWithAttributesByNames {\n-\n-\t\t@Override\n-\t\tpublic List<RichGroup> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getGroupsManager().getAllRichSubGroupsWithAttributesByNames(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")),\n-\t\t\t\t\tparms.readList(\"attrNames\", String.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns RichGroup selected by id containing selected attributes\n-\t *\n-\t * @param groupId int <code>id</code> of group\n-\t * @param attrNames List<String> if attrNames is null method will return RichGroup containing all attributes\n-\t * @return List<RichGroup> RichGroups containing selected attributes\n-\t */\n-\tgetRichGroupByIdWithAttributesByNames {\n-\n-\t\t@Override\n-\t\tpublic RichGroup call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getGroupsManager().getRichGroupByIdWithAttributesByNames(ac.getSession(),\n-\t\t\t\t\tparms.readInt(\"groupId\"),\n-\t\t\t\t\tparms.readList(\"attrNames\", String.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns all groups of specific member including group \"members\".\n-\t *\n-\t * @param member int <code>id</code> of member\n-\t * @return List<Group> Groups of member\n-\t */\n-\tgetAllMemberGroups {\n-\n-\t\t@Override\n-\t\tpublic List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getGroupsManager().getAllMemberGroups(ac.getSession(),\n-\t\t\t\t\tac.getMemberById(parms.readInt(\"member\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Set membership status of a member in a group. Please note, that resulting Status after change is\n-\t * calculated from all members sub-groups and groups in relation sourcing this member. If in any of them\n-\t * is VALID, resulting status is still VALID.\n-\t *\n-\t * @param member int Member <code>id</code>\n-\t * @param group int Group <code>id</code>\n-\t * @param status String VALID | EXPIRED\n-\t * @exampleParam status \"EXPIRED\"\n-\t * @return Member Member with status after change\n-\t */\n-\tsetGroupsMemberStatus {\n-\t\t@Override\n-\t\tpublic Member call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tMemberGroupStatus status = MemberGroupStatus.valueOf(parms.readString(\"status\"));\n-\t\t\treturn ac.getGroupsManager().setMemberGroupStatus(ac.getSession(),\n-\t\t\t\t\tac.getMemberById(parms.readInt(\"member\")),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")),\n-\t\t\t\t\tstatus);\n-\t\t}\n-\t};\n-}\n+ /*#\n+  * Creates a subgroup of a group.\n+  *\n+  * @param parentGroup int Parent Group <code>id</code>\n+  * @param group Group JSON Group class\n+  * @return Group Newly created group\n+  */\n+ /*#\n+  * Creates a subgroup of a group.\n+  *\n+  * @param parentGroup int Parent Group <code>id</code>\n+  * @param name String name of a group\n+  * @param description String description of a group\n+  * @return Group Newly created group\n+  */\n+ /*#\n+  * Creates a new group in the specific VO defined by object vo in parameter.\n+  * Important: voId in object group is ignored.\n+  *\n+  * @param vo int Parent VO <code>id</code>\n+  * @param group Group JSON Group class\n+  * @return Group Newly created group\n+  */\n+ /*#\n+  * Creates a new group in the specific VO.\n+  *\n+  * @param vo int Parent VO <code>id</code>\n+  * @param name String name of a group\n+  * @param description String description of a group\n+  * @return Group Newly created group\n+  */\n+\n+\n+ createGroup {\n+  @Override\n+  public Group call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   if (parms.contains(\"group\")) {\n+    if (parms.contains(\"parentGroup\")) {\n+     return ac.getGroupsManager().createGroup(ac.getSession(), ac.getGroupById(parms.readInt(\"parentGroup\")), parms.read(\"group\", Group.class));\n+    } else if (parms.contains(\"vo\")) {\n+     Group group = parms.read(\"group\", Group.class);\n+     if (group.getParentGroupId() == null) {\n+      return ac.getGroupsManager().createGroup(ac.getSession(), ac.getVoById(parms.readInt(\"vo\")), group);\n+     } else {\n+      throw new RpcException(RpcException.Type.WRONG_PARAMETER, \"Top-level groups can't have parentGroupId set!\");\n+     }\n+    } else {\n+     throw new RpcException(RpcException.Type.MISSING_VALUE, \"vo or parentGroup\");\n+    }\n+   } else if (parms.contains(\"name\") && parms.contains(\"description\")) {\n+    if (parms.contains(\"parentGroup\")) {\n+     String name = parms.readString(\"name\");\n+     String description = parms.readString(\"description\");\n+     Group group = new Group(name, description);\n+     return ac.getGroupsManager().createGroup(ac.getSession(), ac.getGroupById(parms.readInt(\"parentGroup\")), group);\n+    } else if (parms.contains(\"vo\")) {\n+     String name = parms.readString(\"name\");\n+     String description = parms.readString(\"description\");\n+     Group group = new Group(name, description);\n+     return ac.getGroupsManager().createGroup(ac.getSession(), ac.getVoById(parms.readInt(\"vo\")), group);\n+    } else {\n+     throw new RpcException(RpcException.Type.MISSING_VALUE, \"vo or parentGroup\");\n+    }\n+   } else {\n+    throw new RpcException(RpcException.Type.MISSING_VALUE, \"group or (name and description)\");\n+   }\n+  }\n+ },\n+\n+ /*#\n+  * Create union of two groups, where \"operandGroup\" is technically set as subgroup of \"resultGroup\".\n+  * Members from \"operandGroup\" are added to \"resultGroup\" as INDIRECT members. Union is honored also\n+  * in all group member changing operations.\n+  *\n+  * @param resultGroup int <code>id</code> of Group to have included \"operandGroup\"\n+  * @param operandGroup int <code>id</code> of Group to be included into \"resultGroup\"\n+  * @return Group Result group\n+  */\n+\n+\n+ createGroupUnion {\n+  @Override\n+  public Group call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   return ac.getGroupsManager().createGroupUnion(ac.getSession(),\n+ac.getGroupById(parms.readInt(\"resultGroup\")),\n+ac.getGroupById(parms.readInt(\"operandGroup\")));\n+  }\n+ },\n+\n+ /*#\n+  * Deletes a group. Group is not deleted, if contains members or is assigned to any resource.\n+  *\n+  * @param group int Group <code>id</code>\n+  */\n+ /*#\n+  * Forcefully deletes a group (remove all group members, remove group from resources).\n+  *\n+  * @param group int Group <code>id</code>\n+  * @param force boolean If true use force delete.\n+  */\n+\n+\n+ deleteGroup {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   if (parms.contains(\"force\") && parms.readBoolean(\"force\")) {\n+    ac.getGroupsManager().deleteGroup(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")), true);\n+    return null;\n+   } else {\n+    ac.getGroupsManager().deleteGroup(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")), false);\n+    return null;\n+   }\n+  }\n+ },\n+\n+ /*#\n+  * Forcefully deletes a list of groups (remove all group members, remove group from resources).\n+  *\n+  * @param groups int[] Array of Group IDs\n+  * @param forceDelete boolean If true use force delete.\n+  */\n+\n+\n+ deleteGroups {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+\n+   //TODO: optimalizovat?\n+\n+   int[] ids = parms.readArrayOfInts(\"groups\");\n+   List<Group> groups = new ArrayList<>(ids.length);\n+   for (int i : ids) {\n+    groups.add(ac.getGroupById(i));\n+   }\n+   ac.getGroupsManager().deleteGroups(ac.getSession(), groups, parms.readBoolean(\"forceDelete\"));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Removes union of two groups, when \"operandGroup\" is technically removed from subgroups of \"resultGroup\".\n+  * Members from \"operandGroup\" are removed from \"resultGroup\" if they were INDIRECT members sourcing from this group only.\n+  *\n+  * @param resultGroup int <code>id</code> of Group to have removed \"operandGroup\" from subgroups\n+  * @param operandGroup int <code>id</code> of Group to be removed from \"resultGroup\" subgroups\n+  */\n+\n+\n+ removeGroupUnion {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   ac.getGroupsManager().removeGroupUnion(ac.getSession(),\n+ac.getGroupById(parms.readInt(\"resultGroup\")),\n+ac.getGroupById(parms.readInt(\"operandGroup\")));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Updates a group.\n+  *\n+  * @param group Group JSON Group class\n+  * @return Group Updated group\n+  */\n+\n+\n+ updateGroup {\n+  @Override\n+  public Group call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   return ac.getGroupsManager().updateGroup(ac.getSession(), parms.read(\"group\", Group.class));\n+  }\n+ },\n+\n+ /*#\n+  * Moves \"movingGroup\" (including subGroups) under \"destinationGroup\" as subGroup within same Vo.\n+  * In case of null \"destinationGroup\", \"movingGroup\" is moved as top level group.\n+  * During movement are also processed indirect members.\n+  *\n+  * @param destinationGroup int <code>id</code> of Group to have \"movingGroup\" as subGroup\n+  * @param movingGroup int <code>id</code> of Group to be moved under \"destinationGroup\"\n+  */\n+\n+\n+ moveGroup {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   if (parms.contains(\"destinationGroup\")) {\n+    ac.getGroupsManager().moveGroup(ac.getSession(),\n+ac.getGroupById(parms.readInt(\"destinationGroup\")),\n+ac.getGroupById(parms.readInt(\"movingGroup\")));\n+   } else {\n+    ac.getGroupsManager().moveGroup(ac.getSession(), null, ac.getGroupById(parms.readInt(\"movingGroup\")));\n+   }\n+\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Returns a group by <code>id</code>.\n+  *\n+  * @param id int Group <code>id</code>\n+  * @return Group Found group\n+  */\n+\n+\n+ getGroupById {\n+  @Override\n+  public Group call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getGroupById(parms.readInt(\"id\"));\n+  }\n+ },\n+\n+ /*#\n+  * Returns a group by VO and Group name.\n+  *\n+  * IMPORTANT: need to use full name of group (ex. 'toplevel:a:b', not the shortname which is in this example 'b')\n+  *\n+  * @param vo int VO <code>id</code>\n+  * @param name String Group name\n+  * @return Group Found group\n+  */\n+\n+\n+ getGroupByName {\n+  @Override\n+  public Group call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getGroupsManager().getGroupByName(ac.getSession(), ac.getVoById(parms.readInt(\"vo\")), parms.readString(\"name\"));\n+  }\n+ },\n+\n+ /*#\n+  * Return all operand groups for specified result groups (all INCLUDED groups).\n+  * If \"reverseDirection\" is TRUE than return all result groups for specified operand group (where group is INCLUDED).\n+  *\n+  * @param group int <code>id</code> of Group to get groups in union.\n+  * @param reverseDirection boolean FALSE (default) return INCLUDED groups / TRUE = return groups where INCLUDED\n+  * @return List<Group> List of groups in union relation.\n+  */\n+\n+\n+ getGroupUnions {\n+  @Override\n+  public List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getGroupsManager().getGroupUnions(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")), parms.readBoolean(\"reverseDirection\"));\n+  }\n+ },\n+\n+ /*#\n+  * Adds a member to a group.\n+  *\n+  * @param group int Group <code>id</code>\n+  * @param member int Member <code>id</code>\n+  */\n+\n+\n+ addMember {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   ac.getGroupsManager().addMember(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")), ac.getMemberById(parms.readInt(\"member\")));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Removes a member from a group.\n+  *\n+  * @param group int Group <code>id</code>\n+  * @param member int Member <code>id</code>\n+  */\n+\n+\n+ removeMember {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   ac.getGroupsManager().removeMember(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")), ac.getMemberById(parms.readInt(\"member\")));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Returns members of a group.\n+  *\n+  * @param group int Group <code>id</code>\n+  * @return List<Member> Group members\n+  */\n+\n+\n+ getGroupMembers {\n+  @Override\n+  public List<Member> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getGroupsManager().getGroupMembers(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")));\n+  }\n+ },\n+\n+ /*#\n+  * Returns direct members of a group.\n+  *\n+  * @param group int Group <code>id</code>\n+  * @return List<Member> Group members\n+  */\n+\n+\n+ getGroupDirectMembers {\n+  @Override\n+  public List<Member> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getGroupsManager().getGroupDirectMembers(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")));\n+  }\n+ },\n+\n+ /*#\n+  * Returns members of a group.\n+  * RichMember contains User object.\n+  *\n+  * @param group int Group <code>id</code>\n+  * @return List<RichMember> Group members\n+  */\n+\n+\n+ getGroupRichMembers {\n+  @Override\n+  public List<RichMember> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getGroupsManager().getGroupRichMembers(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")));\n+  }\n+ },\n+\n+ /*#\n+  * Returns direct members of a group.\n+  * RichMember contains User object.\n+  *\n+  * @param group int Group <code>id</code>\n+  * @return List<RichMember> Group members\n+  */\n+\n+\n+ getGroupDirectRichMembers {\n+  @Override\n+  public List<RichMember> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getGroupsManager().getGroupDirectRichMembers(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")));\n+  }\n+ },\n+\n+ /*#\n+  * Returns members of a group.\n+  * RichMember contains User object and attributes.\n+  *\n+  * @param group int Group <code>id</code>\n+  * @return List<RichMember> Group members\n+  */\n+\n+\n+ getGroupRichMembersWithAttributes {\n+  @Override\n+  public List<RichMember> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getGroupsManager().getGroupRichMembersWithAttributes(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")));\n+  }\n+ },\n+\n+ /*#\n+  * Return true if Member is member of the Group\n+  *\n+  * @param group int Group ID\n+  * @param member int Member ID\n+  * @return boolean True if Member is member of the Group\n+  *\n+  * @throw GroupNotExistsException When Group with <code>id</code> doesn't exist.\n+  */\n+\n+\n+ isGroupMember {\n+  @Override\n+  public Boolean call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getGroupsManager().isGroupMember(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")), ac.getMemberById(parms.readInt(\"member\")));\n+  }\n+ },\n+\n+ /*#\n+  * Returns count of group members.\n+  *\n+  * @param group int Group <code>id</code>\n+  * @return int Members count\n+  */\n+\n+\n+ getGroupMembersCount {\n+  @Override\n+  public Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getGroupsManager().getGroupMembersCount(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")));\n+  }\n+ },\n+\n+ /*#\n+  * Returns all groups in a VO.\n+  *\n+  * @param vo int VO <code>id</code>\n+  * @return List<Group> Groups\n+  */\n+\n+\n+ getAllGroups {\n+  @Override\n+  public List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getGroupsManager().getAllGroups(ac.getSession(), ac.getVoById(parms.readInt(\"vo\")));\n+  }\n+ },\n+\n+ /*#\n+  * Returns all groups in a VO by a hierarchy.\n+  * Example: [Group => [Group => [Group => []], Group => []]]\n+  *\n+  * @param vo int VO <code>id</code>\n+  * @return List<Object> Groups with subgroups\n+  */\n+\n+\n+ getAllGroupsWithHierarchy {\n+  @Override\n+  public List<Object> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   List<Object> convertedGroups = new ArrayList<Object>();\n+   // Every list must contain as a first field the group object which represents the group. First list contains null on the first position.\n+   convertedGroups.add(0, null);\n+   Map<Group, Object> groups = ac.getGroupsManager().getAllGroupsWithHierarchy(ac.getSession(), ac.getVoById(parms.readInt(\"vo\")));\n+   for (Group group : groups.keySet()) {\n+    convertedGroups.add(ac.convertGroupsWithHierarchy(group, (Map<Group, Object>) groups.get(group)));\n+   }\n+\n+   return convertedGroups;\n+  }\n+ },\n+\n+ /*#\n+  * Returns a parent group of a group.\n+  *\n+  * @param group int Child group <code>id</code>\n+  * @return Group Parent group\n+  */\n+\n+\n+ getParentGroup {\n+  @Override\n+  public Group call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getGroupsManager().getParentGroup(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")));\n+  }\n+ },\n+\n+ /*#\n+  * Returns subgroups of a group.\n+  *\n+  * @param parentGroup int Group id\n+  * @return List<Group> Child groups\n+  */\n+\n+\n+ getSubGroups {\n+  @Override\n+  public List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getGroupsManager().getSubGroups(ac.getSession(), ac.getGroupById(parms.readInt(\"parentGroup\")));\n+  }\n+ },\n+\n+ /*#\n+  * Adds an admin to a group.\n+  *\n+  * @param group int Group <code>id</code>\n+  * @param user int User <code>id</code>\n+  */\n+ /*#\n+  * Adds an group admin to a group.\n+  *\n+  * @param group int Group <code>id</code>\n+  * @param authorizedGroup int Group <code>id</code>\n+  */\n+\n+\n+ addAdmin {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   if (parms.contains(\"user\")) {\n+    ac.getGroupsManager().addAdmin(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")), ac.getUserById(parms.readInt(\"user\")));\n+   } else {\n+    ac.getGroupsManager().addAdmin(ac.getSession(),\n+ac.getGroupById(parms.readInt(\"group\")),\n+ac.getGroupById(parms.readInt(\"authorizedGroup\")));\n+   }\n+\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Removes an admin of a group.\n+  *\n+  * @param group int Group <code>id</code>\n+  * @param user int User <code>id</code>\n+  */\n+ /*#\n+  * Removes a group admin of a group.\n+  *\n+  * @param group int Group <code>id</code>\n+  * @param authorizedGroup int Group <code>id</code>\n+  */\n+\n+\n+ removeAdmin {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   if (parms.contains(\"user\")) {\n+    ac.getGroupsManager().removeAdmin(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")), ac.getUserById(parms.readInt(\"user\")));\n+   } else {\n+    ac.getGroupsManager().removeAdmin(ac.getSession(),\n+ac.getGroupById(parms.readInt(\"group\")),\n+ac.getGroupById(parms.readInt(\"authorizedGroup\")));\n+   }\n+\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Get list of all group administrators for supported role and specific group.\n+  *\n+  * If onlyDirectAdmins is == true, return only direct admins of the group for supported role.\n+  *\n+  * Supported roles: GroupAdmin\n+  *\n+  * @param group int Group <code>id</code>\n+  * @param onlyDirectAdmins int if == true, get only direct user administrators (if == false, get both direct and indirect)\n+  *\n+  * @return List<User> list of all group administrators of the given group for supported role\n+  */\n+ /*#\n+  * Returns administrators of a group.\n+  *\n+  * @deprecated\n+  * @param group int Group <code>id</code>\n+  * @return List<User> Group admins\n+  */\n+\n+\n+ getAdmins {\n+  @Override\n+  public List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   if (parms.contains(\"onlyDirectAdmins\")) {\n+    return ac.getGroupsManager().getAdmins(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")), parms.readBoolean(\"onlyDirectAdmins\"));\n+   } else {\n+    return ac.getGroupsManager().getAdmins(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")));\n+   }\n+  }\n+ },\n+\n+ /*#\n+  * Returns direct administrators of a group.\n+  *\n+  * @deprecated\n+  * @param group int Group <code>id</code>\n+  * @return List<User> Group admins\n+  */\n+\n+\n+ getDirectAdmins {\n+  @Override\n+  public List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getGroupsManager().getDirectAdmins(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")));\n+  }\n+ },\n+\n+ /*#\n+  * Returns administrator groups of a group.\n+  *\n+  * @param group int Group <code>id</code>\n+  * @return List<Group> admins\n+  */\n+\n+\n+ getAdminGroups {\n+  @Override\n+  public List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getGroupsManager().getAdminGroups(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")));\n+  }\n+ },\n+\n+ /*#\n+  * Get list of all richUser administrators for the group and supported role with specific attributes.\n+  *\n+  * Supported roles: GroupAdmin\n+  *\n+  * If \"onlyDirectAdmins\" is == true, return only direct admins of the group for supported role with specific attributes.\n+  * If \"allUserAttributes\" is == true, do not specify attributes through list and return them all in objects richUser. Ignoring list of specific attributes.\n+  *\n+  * @param group int Group <code>id</code>\n+  * @param specificAttributes List<String> list of specified attributes which are needed in object richUser\n+  * @param allUserAttributes int if == true, get all possible user attributes and ignore list of specificAttributes (if false, get only specific attributes)\n+  * @param onlyDirectAdmins int if == true, get only direct group administrators (if false, get both direct and indirect)\n+  *\n+  * @return List<RichUser> list of RichUser administrators for the group and supported role with attributes\n+  */\n+ /*#\n+  * Get all Group admins as RichUsers\n+  *\n+  * @deprecated\n+  * @param group int Group <code>id</code>\n+  * @return List<RichUser> admins\n+  */\n+\n+\n+ getRichAdmins {\n+  @Override\n+  public List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   if (parms.contains(\"onlyDirectAdmins\")) {\n+    return ac.getGroupsManager().getRichAdmins(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")), parms.readList(\"specificAttributes\", String.class), parms.readBoolean(\"allUserAttributes\"), parms.readBoolean(\"onlyDirectAdmins\"));\n+   } else {\n+    return ac.getGroupsManager().getRichAdmins(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")));\n+   }\n+  }\n+ },\n+\n+ /*#\n+  * Get all Group admins as RichUsers with all their non-null user attributes\n+  *\n+  * @deprecated\n+  * @param group int Group <code>id</code>\n+  * @return List<RichUser> admins with attributes\n+  */\n+\n+\n+ getRichAdminsWithAttributes {\n+  @Override\n+  public List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getGroupsManager().getRichAdminsWithAttributes(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")));\n+  }\n+ },\n+\n+ /*#\n+  **\n+  * Get list of all richGroups with selected attributes assigned to resource.\n+  * Allowed namespaces of attributes are group and group-resource.\n+  *\n+  * Last step is filtration of attributes:\n+  * Attributes are filtered by rights of user in session. User get only those selected attributes he has rights to read.\n+  *\n+  * @param resource int Resource <code>id</code>\n+  * @param attrNames List<String> names of attributes\n+  * @return List<RichGroup> groups with attributes\n+  *\n+  */\n+\n+\n+ getRichGroupsAssignedToResourceWithAttributesByNames {\n+  @Override\n+  public List<RichGroup> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getGroupsManager().getRichGroupsAssignedToResourceWithAttributesByNames(ac.getSession(),\n+ac.getResourceById(parms.readInt(\"resource\")),\n+parms.readList(\"attrNames\", String.class));\n+  }\n+ },\n+\n+ /*#\n+  * Get all Group admins as RichUsers with specific attributes (from user namespace)\n+  *\n+  * @deprecated\n+  * @param group int Group <code>id</code>\n+  * @param specificAttributes List<String> list of attributes URNs\n+  * @return List<RichUser> admins with attributes\n+  */\n+\n+\n+ getRichAdminsWithSpecificAttributes {\n+  @Override\n+  public List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getGroupsManager().getRichAdminsWithSpecificAttributes(ac.getSession(),\n+ac.getGroupById(parms.readInt(\"group\")),\n+parms.readList(\"specificAttributes\", String.class));\n+  }\n+ },\n+\n+ /*#\n+  * Get all Group admins, which are assigned directly,\n+  *  as RichUsers with specific attributes (from user namespace)\n+  *\n+  * @deprecated\n+  * @param group int Group <code>id</code>\n+  * @param specificAttributes List<String> list of attributes URNs\n+  * @return List<RichUser> direct admins with attributes\n+  */\n+\n+\n+ getDirectRichAdminsWithSpecificAttributes {\n+  @Override\n+  public List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getGroupsManager().getDirectRichAdminsWithSpecificAttributes(ac.getSession(),\n+ac.getGroupById(parms.readInt(\"group\")),\n+parms.readList(\"specificAttributes\", String.class));\n+  }\n+ },\n+\n+ /*#\n+  * Returns direct descendant groups of a VO.\n+  *\n+  * @param vo int VO <code>id</code>\n+  * @return List<Group> Children groups\n+  */\n+\n+\n+ getGroups {\n+  @Override\n+  public List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getGroupsManager().getGroups(ac.getSession(), ac.getVoById(parms.readInt(\"vo\")));\n+  }\n+ },\n+\n+ /*#\n+  * Returns groups count in a VO.\n+  *\n+  * @param vo int VO <code>id</code>\n+  * @return int Groups count\n+  */\n+ /*#\n+  * Gets count of all groups.\n+\n+  * @return int groups count\n+  */\n+\n+\n+ getGroupsCount {\n+  @Override\n+  public Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   if (parms.contains(\"vo\")) {\n+    return ac.getGroupsManager().getGroupsCount(ac.getSession(), ac.getVoById(parms.readInt(\"vo\")));\n+   } else {\n+    return ac.getGroupsManager().getGroupsCount(ac.getSession());\n+   }\n+  }\n+ },\n+\n+ /*#\n+  * Returns subgroups count of a group.\n+  *\n+  * @param parentGroup int Parent group <code>id</code>\n+  * @return int Subgroups count\n+  */\n+\n+\n+ getSubGroupsCount {\n+  @Override\n+  public Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getGroupsManager().getSubGroupsCount(ac.getSession(), ac.getGroupById(parms.readInt(\"parentGroup\")));\n+  }\n+ },\n+\n+ /*#\n+  * Delete all groups in a VO.\n+  *\n+  * @param vo int VO <code>id</code>\n+  */\n+\n+\n+ deleteAllGroups {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   ac.getGroupsManager().deleteAllGroups(ac.getSession(), ac.getVoById(parms.readInt(\"vo\")));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Forces group synchronization.\n+  *\n+  * @param group int Group <code>id</code>\n+  */\n+\n+\n+ forceGroupSynchronization {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.getGroupsManager().forceGroupSynchronization(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Returns parent VO of a group.\n+  *\n+  * @param group int Group <code>id</code>\n+  * @return Vo Parent VO\n+  */\n+\n+\n+ getVo {\n+  @Override\n+  public Vo call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getGroupsManager().getVo(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")));\n+  }\n+ },\n+\n+ /*#\n+  * Returns members of a parent group.\n+  *\n+  * @param group int Child group <code>id</code>\n+  * @return List<Member> Parent group members\n+  */\n+\n+\n+ getParentGroupMembers {\n+  @Override\n+  public List<Member> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getGroupsManager().getParentGroupMembers(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")));\n+  }\n+ },\n+\n+ /*#\n+  * Returns members of a parent group.\n+  * RichMember contains User object.\n+  *\n+  * @param group int Child group <code>id</code>\n+  * @return List<RichMember> Parent group members\n+  */\n+\n+\n+ getParentGroupRichMembers {\n+  @Override\n+  public List<RichMember> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getGroupsManager().getParentGroupRichMembers(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")));\n+  }\n+ },\n+\n+ /*#\n+  * Returns members of a parent group.\n+  * RichMember contains User object and attributes.\n+  *\n+  * @param group int Child group <code>id</code>\n+  * @return List<RichMember> Parent group members\n+  */\n+\n+\n+ getParentGroupRichMembersWithAttributes {\n+  @Override\n+  public List<RichMember> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getGroupsManager().getParentGroupRichMembersWithAttributes(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")));\n+  }\n+ },\n+\n+ /*#\n+  * Returns groups for a member.\n+  *\n+  * @param member int Member <code>id</code>\n+  * @return List<Group> Groups of the member\n+  */\n+\n+\n+ getMemberGroups {\n+  @Override\n+  public List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getGroupsManager().getMemberGroups(ac.getSession(), ac.getMemberById(parms.readInt(\"member\")));\n+  }\n+ },\n+\n+ /*#\n+  * Returns groups with specific attribute for a member.\n+  *\n+  * @param member int Member <code>id</code>\n+  * @param attribute Attribute attribute object with value\n+  * @return List<Group> Groups of the member\n+  */\n+\n+\n+ getMemberGroupsByAttribute {\n+  @Override\n+  public List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getGroupsManager().getMemberGroupsByAttribute(ac.getSession(), ac.getMemberById(parms.readInt(\"member\")), parms.read(\"attribute\", Attribute.class));\n+  }\n+ },\n+\n+ /*#\n+  * Returns sub-list of all RichGroups, each containing selected attributes, starting at fromIndex (included)\n+  * and ending at the size of the original list.\n+  *\n+  * Example: [1,2,3,4], fromIndex=1 => [2,3,4]\n+  *\n+  * @param vo int <code>id</code> of vo\n+  * @param fromIndex int begin index of returned subList, included\n+  * @param attrNames List<String> if attrNames is null method will return RichGroups containing all attributes\n+  * @return List<RichGroup> RichGroups containing selected attributes\n+  */\n+ /*#\n+  * Returns sub-list of all RichGroups, each containing selected attributes, starting at first index of the original\n+  * list (included) and ending at the toIndex (included).\n+  *\n+  * Example: [1,2,3,4], toIndex=2 => [1,2,3]\n+  *\n+  * @param vo int <code>id</code> of vo\n+  * @param toIndex int end index of returned subList, included\n+  * @param attrNames List<String> if attrNames is null method will return RichGroups containing all attributes\n+  * @return List<RichGroup> RichGroups containing selected attributes\n+  */\n+ /*#\n+  * Returns sub-list of all RichGroups, each containing selected attributes, starting at fromIndex (included)\n+  * and ending at the toIndex (included).\n+  *\n+  * Example: [1,2,3,4], fromIndex=1, toIndex=2 => [2,3]\n+  *\n+  * @param vo int <code>id</code> of vo\n+  * @param fromIndex int begin index of returned subList, included\n+  * @param toIndex int end index of returned subList, included\n+  * @param attrNames List<String> if attrNames is null method will return RichGroups containing all attributes\n+  * @return List<RichGroup> RichGroups containing selected attributes\n+  */\n+ /*#\n+  * Returns full list of all RichGroups containing selected attributes.\n+  *\n+  * @param vo int <code>id</code> of vo\n+  * @param attrNames List<String> if attrNames is null method will return RichGroups containing all attributes\n+  * @return List<RichGroup> RichGroups containing selected attributes\n+  */\n+\n+\n+ getAllRichGroupsWithAttributesByNames {\n+  @Override\n+  public List<RichGroup> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   List<RichGroup> listOfRichGroups = ac.getGroupsManager().getAllRichGroupsWithAttributesByNames(ac.getSession(), ac.getVoById(parms.readInt(\"vo\")), parms.readList(\"attrNames\", String.class));\n+   if (listOfRichGroups == null) listOfRichGroups = new ArrayList<>();\n+   if (parms.contains(\"fromIndex\") && parms.contains(\"toIndex\")) {\n+    return ac.getSublist(listOfRichGroups, parms.readInt(\"fromIndex\"), parms.readInt(\"toIndex\"));\n+   } else if (parms.contains(\"fromIndex\")) {\n+    int toIndex = listOfRichGroups.size();\n+    return ac.getSublist(listOfRichGroups, parms.readInt(\"fromIndex\"), toIndex);\n+   } else if (parms.contains(\"toIndex\")) {\n+           return ac.getSublist(listOfRichGroups, 0, parms.readInt(\"toIndex\"));\n+          } else {\n+           return listOfRichGroups;\n+          }\n+  }\n+ },\n+\n+ /*#\n+  * Returns sub-list of member's RichGroups, each containing selected attributes, starting at fromIndex (included)\n+  * and ending at the size of the original list.\n+  *\n+  * Example: [1,2,3,4], fromIndex=1 => [2,3,4]\n+  *\n+  * \"members\" group is not included!\n+  *\n+  * @param member int <code>id</code> of member\n+  * @param fromIndex int begin index of returned subList, included\n+  * @param attrNames List<String> if attrNames is null method will return RichGroups containing all attributes\n+  * @return List<RichGroup> RichGroups containing selected attributes\n+  */\n+ /*#\n+  * Returns sub-list of member's RichGroups, each containing selected attributes, starting at first index of the original\n+  * list (included) and ending at the toIndex (included).\n+  *\n+  * Example: [1,2,3,4], toIndex=2 => [1,2,3]\n+  *\n+  * \"members\" group is not included!\n+  *\n+  * @param member int <code>id</code> of member\n+  * @param toIndex int end index of returned subList, included\n+  * @param attrNames List<String> if attrNames is null method will return RichGroups containing all attributes\n+  * @return List<RichGroup> RichGroups containing selected attributes\n+  */\n+ /*#\n+  * Returns sub-list of member's RichGroups, each containing selected attributes, starting at fromIndex (included)\n+  * and ending at the toIndex (included).\n+  *\n+  * Example: [1,2,3,4], fromIndex=1, toIndex=2 => [2,3]\n+  *\n+  * \"members\" group is not included!\n+  *\n+  * @param member int <code>id</code> of member\n+  * @param fromIndex int begin index of returned subList, included\n+  * @param toIndex int end index of returned subList, included\n+  * @param attrNames List<String> if attrNames is null method will return RichGroups containing all attributes\n+  * @return List<RichGroup> RichGroups containing selected attributes\n+  */\n+ /*#\n+  * Returns full list of member's RichGroups containing selected attributes.\n+  *\n+  * \"members\" group is not included!\n+  * \n+  * @param member int <code>id</code> of member\n+  * @param attrNames List<String> if attrNames is null method will return RichGroups containing all attributes\n+  * @return List<RichGroup> RichGroups containing selected attributes\n+  */\n+\n+\n+ getMemberRichGroupsWithAttributesByNames {\n+  @Override\n+  public List<RichGroup> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   List<RichGroup> listOfRichGroups = ac.getGroupsManager().getMemberRichGroupsWithAttributesByNames(ac.getSession(), ac.getMemberById(parms.readInt(\"member\")), parms.readList(\"attrNames\", String.class));\n+   if (listOfRichGroups == null) listOfRichGroups = new ArrayList<>();\n+   if (parms.contains(\"fromIndex\") && parms.contains(\"toIndex\")) {\n+    return ac.getSublist(listOfRichGroups, parms.readInt(\"fromIndex\"), parms.readInt(\"toIndex\"));\n+   } else if (parms.contains(\"fromIndex\")) {\n+    int toIndex = listOfRichGroups.size();\n+    return ac.getSublist(listOfRichGroups, parms.readInt(\"fromIndex\"), toIndex);\n+   } else if (parms.contains(\"toIndex\")) {\n+           return ac.getSublist(listOfRichGroups, 0, parms.readInt(\"toIndex\"));\n+          } else {\n+           return listOfRichGroups;\n+          }\n+  }\n+ },\n+\n+ /*#\n+  * Returns RichSubGroups from parent group containing selected attributes (only 1 level sub groups).\n+  *\n+  * @param group int <code>id</code> of group\n+  * @param attrNames List<String> if attrNames is null method will return RichGroups containing all attributes\n+  * @return List<RichGroup> RichGroups containing selected attributes\n+  */\n+\n+\n+ getRichSubGroupsWithAttributesByNames {\n+  @Override\n+  public List<RichGroup> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getGroupsManager().getRichSubGroupsWithAttributesByNames(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")), parms.readList(\"attrNames\", String.class));\n+  }\n+ },\n+\n+ /*#\n+  * Returns all AllRichSubGroups from parent group containing selected attributes (all level subgroups).\n+  *\n+  * @param group int <code>id</code> of group\n+  * @param attrNames List<String> if attrNames is null method will return RichGroups containing all attributes\n+  * @return List<RichGroup> RichGroups containing selected attributes\n+  */\n+\n+\n+ getAllRichSubGroupsWithAttributesByNames {\n+  @Override\n+  public List<RichGroup> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getGroupsManager().getAllRichSubGroupsWithAttributesByNames(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")), parms.readList(\"attrNames\", String.class));\n+  }\n+ },\n+\n+ /*#\n+  * Returns RichGroup selected by id containing selected attributes\n+  *\n+  * @param groupId int <code>id</code> of group\n+  * @param attrNames List<String> if attrNames is null method will return RichGroup containing all attributes\n+  * @return List<RichGroup> RichGroups containing selected attributes\n+  */\n+\n+\n+ getRichGroupByIdWithAttributesByNames {\n+  @Override\n+  public RichGroup call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getGroupsManager().getRichGroupByIdWithAttributesByNames(ac.getSession(), parms.readInt(\"groupId\"), parms.readList(\"attrNames\", String.class));\n+  }\n+ },\n+\n+ /*#\n+  * Returns all groups of specific member including group \"members\".\n+  *\n+  * @param member int <code>id</code> of member\n+  * @return List<Group> Groups of member\n+  */\n+\n+\n+ getAllMemberGroups {\n+  @Override\n+  public List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getGroupsManager().getAllMemberGroups(ac.getSession(), ac.getMemberById(parms.readInt(\"member\")));\n+  }\n+ },\n+\n+ /*#\n+  * Set membership status of a member in a group. Please note, that resulting Status after change is\n+  * calculated from all members sub-groups and groups in relation sourcing this member. If in any of them\n+  * is VALID, resulting status is still VALID.\n+  *\n+  * @param member int Member <code>id</code>\n+  * @param group int Group <code>id</code>\n+  * @param status String VALID | EXPIRED\n+  * @exampleParam status \"EXPIRED\"\n+  * @return Member Member with status after change\n+  */\n+\n+\n+ setGroupsMemberStatus {\n+  @Override\n+  public Member call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   MemberGroupStatus status = MemberGroupStatus.valueOf(parms.readString(\"status\"));\n+   return ac.getGroupsManager().setMemberGroupStatus(ac.getSession(),\n+ac.getMemberById(parms.readInt(\"member\")),\n+ac.getGroupById(parms.readInt(\"group\")),\n+status);\n+  }\n+ };\n+}\n\\ No newline at end of file\n",
            "diff_size": 1142
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1041",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}