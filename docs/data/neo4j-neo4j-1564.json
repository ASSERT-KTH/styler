{
    "project_name": "neo4j-neo4j",
    "error_id": "1564",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "120",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "134",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "146",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "172",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "186",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "226",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "142",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "139",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "275",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "279",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "283",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "287",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "291",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "295",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "299",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "309",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "321",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "321",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "329",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "333",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "342",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "346",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "346",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "358",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "358",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1564/DynamicArrayStore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1564/DynamicArrayStore.java\nindex c205e5d2fea..a58d41fac71 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1564/DynamicArrayStore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1564/DynamicArrayStore.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store;\n \n import org.eclipse.collections.api.set.ImmutableSet;\n@@ -58,7 +59,7 @@ import static java.lang.System.arraycopy;\n \n /**\n  * Dynamic store that stores arrays.\n- *\n+ * <p>\n  * Arrays are uniform collections of the same type. They can contain primitives, strings or Geometries.\n  * <ul>\n  *     <li>\n@@ -107,85 +108,82 @@ public class DynamicArrayStore extends AbstractDynamicStore\n     private final boolean allowStorePointsAndTemporal;\n \n     public DynamicArrayStore(\n-            Path path,\n-            Path idFile,\n-            Config configuration,\n-            IdType idType,\n-            IdGeneratorFactory idGeneratorFactory,\n-            PageCache pageCache,\n-            LogProvider logProvider,\n-            int dataSizeFromConfiguration,\n-            RecordFormats recordFormats,\n-            ImmutableSet<OpenOption> openOptions )\n+      Path path,\n+      Path idFile,\n+      Config configuration,\n+      IdType idType,\n+      IdGeneratorFactory idGeneratorFactory,\n+      PageCache pageCache,\n+      LogProvider logProvider,\n+      int dataSizeFromConfiguration,\n+      RecordFormats recordFormats,\n+      ImmutableSet<OpenOption> openOptions)\n     {\n-        super( path, idFile, configuration, idType, idGeneratorFactory, pageCache,\n-                logProvider, TYPE_DESCRIPTOR, dataSizeFromConfiguration, recordFormats.dynamic(), recordFormats.storeVersion(), openOptions );\n-        allowStorePointsAndTemporal = recordFormats.hasCapability( RecordStorageCapability.POINT_PROPERTIES )\n-                && recordFormats.hasCapability( RecordStorageCapability.TEMPORAL_PROPERTIES );\n+        super(path, idFile, configuration, idType, idGeneratorFactory, pageCache,\n+          logProvider, TYPE_DESCRIPTOR, dataSizeFromConfiguration, recordFormats.dynamic(), recordFormats.storeVersion(), openOptions);\n+        allowStorePointsAndTemporal = recordFormats.hasCapability(RecordStorageCapability.POINT_PROPERTIES)\n+          && recordFormats.hasCapability(RecordStorageCapability.TEMPORAL_PROPERTIES);\n     }\n \n-    public static byte[] encodeFromNumbers( Object array, int offsetBytes )\n+    public static byte[] encodeFromNumbers(Object array, int offsetBytes)\n     {\n-        ShortArray type = ShortArray.typeOf( array );\n-        if ( type == null )\n+        ShortArray type = ShortArray.typeOf(array);\n+        if (type == null)\n         {\n-            throw new IllegalArgumentException( array + \" not a valid array type.\" );\n+            throw new IllegalArgumentException(array + \" not a valid array type.\");\n         }\n \n-        if ( type == ShortArray.DOUBLE || type == ShortArray.FLOAT )\n+        if (type == ShortArray.DOUBLE || type == ShortArray.FLOAT)\n         {\n             // Skip array compaction for floating point numbers where compaction makes very little difference\n-            return createUncompactedArray( type, array, offsetBytes );\n-        }\n-        else\n+            return createUncompactedArray(type, array, offsetBytes);\n+        } else\n         {\n-            return createBitCompactedArray( type, array, offsetBytes );\n+            return createBitCompactedArray(type, array, offsetBytes);\n         }\n     }\n \n-    private static byte[] createBitCompactedArray( ShortArray type, Object array, int offsetBytes )\n+    private static byte[] createBitCompactedArray(ShortArray type, Object array, int offsetBytes)\n     {\n         Class<?> componentType = array.getClass().getComponentType();\n-        boolean isPrimitiveByteArray = componentType.equals( Byte.TYPE );\n-        boolean isByteArray = componentType.equals( Byte.class ) || isPrimitiveByteArray;\n-        int arrayLength = Array.getLength( array );\n-        int requiredBits = isByteArray ? Byte.SIZE : type.calculateRequiredBitsForArray( array, arrayLength );\n+        boolean isPrimitiveByteArray = componentType.equals(Byte.TYPE);\n+        boolean isByteArray = componentType.equals(Byte.class) || isPrimitiveByteArray;\n+        int arrayLength = Array.getLength(array);\n+        int requiredBits = isByteArray ? Byte.SIZE : type.calculateRequiredBitsForArray(array, arrayLength);\n         int totalBits = requiredBits * arrayLength;\n         int bitsUsedInLastByte = totalBits % 8;\n         bitsUsedInLastByte = bitsUsedInLastByte == 0 ? 8 : bitsUsedInLastByte;\n-        if ( isByteArray )\n+        if (isByteArray)\n         {\n-            return createBitCompactedByteArray( type, isPrimitiveByteArray, array, bitsUsedInLastByte, requiredBits, offsetBytes );\n-        }\n-        else\n+            return createBitCompactedByteArray(type, isPrimitiveByteArray, array, bitsUsedInLastByte, requiredBits, offsetBytes);\n+        } else\n         {\n             int numberOfBytes = (totalBits - 1) / 8 + 1;\n             numberOfBytes += NUMBER_HEADER_SIZE; // type + rest + requiredBits header. TODO no need to use full bytes\n-            Bits bits = Bits.bits( numberOfBytes );\n-            bits.put( (byte) type.intValue() );\n-            bits.put( (byte) bitsUsedInLastByte );\n-            bits.put( (byte) requiredBits );\n-            type.writeAll( array, arrayLength, requiredBits, bits );\n-            return bits.asBytes( offsetBytes );\n+            Bits bits = Bits.bits(numberOfBytes);\n+            bits.put((byte) type.intValue());\n+            bits.put((byte) bitsUsedInLastByte);\n+            bits.put((byte) requiredBits);\n+            type.writeAll(array, arrayLength, requiredBits, bits);\n+            return bits.asBytes(offsetBytes);\n         }\n     }\n \n-    private static byte[] createBitCompactedByteArray( ShortArray type, boolean isPrimitiveByteArray, Object array,\n-            int bitsUsedInLastByte, int requiredBits, int offsetBytes )\n+    private static byte[] createBitCompactedByteArray(ShortArray type, boolean isPrimitiveByteArray, Object array,\n+                                                      int bitsUsedInLastByte, int requiredBits, int offsetBytes)\n     {\n-        int arrayLength = Array.getLength( array );\n+        int arrayLength = Array.getLength(array);\n         byte[] bytes = new byte[NUMBER_HEADER_SIZE + arrayLength + offsetBytes];\n         bytes[offsetBytes] = (byte) type.intValue();\n         bytes[offsetBytes + 1] = (byte) bitsUsedInLastByte;\n         bytes[offsetBytes + 2] = (byte) requiredBits;\n-        if ( isPrimitiveByteArray )\n+        if (isPrimitiveByteArray)\n         {\n-            arraycopy( array, 0, bytes, NUMBER_HEADER_SIZE + offsetBytes, arrayLength );\n-        }\n-        else\n+            arraycopy(array, 0, bytes, NUMBER_HEADER_SIZE + offsetBytes, arrayLength);\n+        } else\n         {\n             Byte[] source = (Byte[]) array;\n-            for ( int i = 0; i < source.length; i++ )\n+            for (int i = 0; i < source.length; i++)\n             {\n                 bytes[NUMBER_HEADER_SIZE + offsetBytes + i] = source[i];\n             }\n@@ -193,184 +191,172 @@ public class DynamicArrayStore extends AbstractDynamicStore\n         return bytes;\n     }\n \n-    private static byte[] createUncompactedArray( ShortArray type, Object array, int offsetBytes )\n+    private static byte[] createUncompactedArray(ShortArray type, Object array, int offsetBytes)\n     {\n-        int arrayLength = Array.getLength( array );\n+        int arrayLength = Array.getLength(array);\n         int bytesPerElement = type.maxBits / 8;\n         byte[] bytes = new byte[NUMBER_HEADER_SIZE + bytesPerElement * arrayLength + offsetBytes];\n         bytes[offsetBytes] = (byte) type.intValue();\n         bytes[offsetBytes + 1] = (byte) 8;\n         bytes[offsetBytes + 2] = (byte) type.maxBits;\n-        type.writeAll( array, bytes, NUMBER_HEADER_SIZE + offsetBytes );\n+        type.writeAll(array, bytes, NUMBER_HEADER_SIZE + offsetBytes);\n         return bytes;\n     }\n \n-    public static void allocateFromNumbers( Collection<DynamicRecord> target, Object array, DynamicRecordAllocator recordAllocator,\n-            PageCursorTracer cursorTracer, MemoryTracker memoryTracker )\n+    public static void allocateFromNumbers(Collection<DynamicRecord> target, Object array, DynamicRecordAllocator recordAllocator,\n+                                           PageCursorTracer cursorTracer, MemoryTracker memoryTracker)\n     {\n-        byte[] bytes = encodeFromNumbers( array, 0 );\n-        allocateRecordsFromBytes( target, bytes, recordAllocator, cursorTracer, memoryTracker );\n+        byte[] bytes = encodeFromNumbers(array, 0);\n+        allocateRecordsFromBytes(target, bytes, recordAllocator, cursorTracer, memoryTracker);\n     }\n \n     private static void allocateFromCompositeType(\n-            Collection<DynamicRecord> target,\n-            byte[] bytes,\n-            DynamicRecordAllocator recordAllocator,\n-            boolean allowsStorage,\n-            Capability storageCapability, PageCursorTracer cursorTracer,\n-            MemoryTracker memoryTracker )\n+      Collection<DynamicRecord> target,\n+      byte[] bytes,\n+      DynamicRecordAllocator recordAllocator,\n+      boolean allowsStorage,\n+      Capability storageCapability, PageCursorTracer cursorTracer,\n+      MemoryTracker memoryTracker)\n     {\n-        if ( allowsStorage )\n+        if (allowsStorage)\n         {\n-            allocateRecordsFromBytes( target, bytes, recordAllocator, cursorTracer, memoryTracker );\n-        }\n-        else\n+            allocateRecordsFromBytes(target, bytes, recordAllocator, cursorTracer, memoryTracker);\n+        } else\n         {\n-            throw new UnsupportedFormatCapabilityException( storageCapability );\n+            throw new UnsupportedFormatCapabilityException(storageCapability);\n         }\n     }\n \n-    private static void allocateFromString( Collection<DynamicRecord> target, String[] array,\n-            DynamicRecordAllocator recordAllocator, PageCursorTracer cursorTracer, MemoryTracker memoryTracker )\n+    private static void allocateFromString(Collection<DynamicRecord> target, String[] array,\n+                                           DynamicRecordAllocator recordAllocator, PageCursorTracer cursorTracer, MemoryTracker memoryTracker)\n     {\n         byte[][] stringsAsBytes = new byte[array.length][];\n         int totalBytesRequired = STRING_HEADER_SIZE; // 1b type + 4b array length\n-        for ( int i = 0; i < array.length; i++ )\n+        for (int i = 0; i < array.length; i++)\n         {\n             String string = array[i];\n-            byte[] bytes = PropertyStore.encodeString( string );\n+            byte[] bytes = PropertyStore.encodeString(string);\n             stringsAsBytes[i] = bytes;\n             totalBytesRequired += 4/*byte[].length*/ + bytes.length;\n         }\n \n-        try ( var scopedBuffer = new HeapScopedBuffer( totalBytesRequired, memoryTracker ) )\n+        try (var scopedBuffer = new HeapScopedBuffer(totalBytesRequired, memoryTracker))\n         {\n             var buffer = scopedBuffer.getBuffer();\n-            buffer.put( PropertyType.STRING.byteValue() );\n-            buffer.putInt( array.length );\n-            for ( byte[] stringAsBytes : stringsAsBytes )\n+            buffer.put(PropertyType.STRING.byteValue());\n+            buffer.putInt(array.length);\n+            for (byte[] stringAsBytes : stringsAsBytes)\n             {\n-                buffer.putInt( stringAsBytes.length );\n-                buffer.put( stringAsBytes );\n+                buffer.putInt(stringAsBytes.length);\n+                buffer.put(stringAsBytes);\n             }\n-            allocateRecordsFromBytes( target, buffer.array(), recordAllocator, cursorTracer, memoryTracker );\n+            allocateRecordsFromBytes(target, buffer.array(), recordAllocator, cursorTracer, memoryTracker);\n         }\n     }\n \n-    public void allocateRecords( Collection<DynamicRecord> target, Object array, PageCursorTracer cursorTracer, MemoryTracker memoryTracker )\n+    public void allocateRecords(Collection<DynamicRecord> target, Object array, PageCursorTracer cursorTracer, MemoryTracker memoryTracker)\n     {\n-        allocateRecords( target, array, this, allowStorePointsAndTemporal, cursorTracer, memoryTracker );\n+        allocateRecords(target, array, this, allowStorePointsAndTemporal, cursorTracer, memoryTracker);\n     }\n \n-    public static void allocateRecords( Collection<DynamicRecord> target, Object array,\n-            DynamicRecordAllocator recordAllocator, boolean allowStorePointsAndTemporal, PageCursorTracer cursorTracer, MemoryTracker memoryTracker )\n+    public static void allocateRecords(Collection<DynamicRecord> target, Object array,\n+                                       DynamicRecordAllocator recordAllocator, boolean allowStorePointsAndTemporal, PageCursorTracer cursorTracer,\n+                                       MemoryTracker memoryTracker)\n     {\n-        if ( !array.getClass().isArray() )\n+        if (!array.getClass().isArray())\n         {\n-            throw new IllegalArgumentException( array + \" not an array\" );\n+            throw new IllegalArgumentException(array + \" not an array\");\n         }\n \n         Class<?> type = array.getClass().getComponentType();\n-        if ( type.equals( String.class ) )\n+        if (type.equals(String.class))\n         {\n-            allocateFromString( target, (String[]) array, recordAllocator, cursorTracer, memoryTracker );\n-        }\n-        else if ( type.equals( PointValue.class ) )\n+            allocateFromString(target, (String[]) array, recordAllocator, cursorTracer, memoryTracker);\n+        } else if (type.equals(PointValue.class))\n         {\n-            allocateFromCompositeType( target,GeometryType.encodePointArray( (PointValue[]) array ),\n-                    recordAllocator, allowStorePointsAndTemporal, RecordStorageCapability.POINT_PROPERTIES, cursorTracer, memoryTracker );\n-        }\n-        else if ( type.equals( LocalDate.class ) )\n+            allocateFromCompositeType(target, GeometryType.encodePointArray((PointValue[]) array),\n+              recordAllocator, allowStorePointsAndTemporal, RecordStorageCapability.POINT_PROPERTIES, cursorTracer, memoryTracker);\n+        } else if (type.equals(LocalDate.class))\n         {\n-            allocateFromCompositeType( target, TemporalType.encodeDateArray( (LocalDate[]) array ),\n-                    recordAllocator, allowStorePointsAndTemporal, RecordStorageCapability.TEMPORAL_PROPERTIES, cursorTracer, memoryTracker );\n-        }\n-        else if ( type.equals( LocalTime.class ) )\n+            allocateFromCompositeType(target, TemporalType.encodeDateArray((LocalDate[]) array),\n+              recordAllocator, allowStorePointsAndTemporal, RecordStorageCapability.TEMPORAL_PROPERTIES, cursorTracer, memoryTracker);\n+        } else if (type.equals(LocalTime.class))\n         {\n-            allocateFromCompositeType( target, TemporalType.encodeLocalTimeArray( (LocalTime[]) array ),\n-                    recordAllocator, allowStorePointsAndTemporal, RecordStorageCapability.TEMPORAL_PROPERTIES, cursorTracer, memoryTracker );\n-        }\n-        else if ( type.equals( LocalDateTime.class ) )\n+            allocateFromCompositeType(target, TemporalType.encodeLocalTimeArray((LocalTime[]) array),\n+              recordAllocator, allowStorePointsAndTemporal, RecordStorageCapability.TEMPORAL_PROPERTIES, cursorTracer, memoryTracker);\n+        } else if (type.equals(LocalDateTime.class))\n         {\n-            allocateFromCompositeType( target, TemporalType.encodeLocalDateTimeArray( (LocalDateTime[]) array ),\n-                    recordAllocator, allowStorePointsAndTemporal, RecordStorageCapability.TEMPORAL_PROPERTIES, cursorTracer, memoryTracker );\n-        }\n-        else if ( type.equals( OffsetTime.class ) )\n+            allocateFromCompositeType(target, TemporalType.encodeLocalDateTimeArray((LocalDateTime[]) array),\n+              recordAllocator, allowStorePointsAndTemporal, RecordStorageCapability.TEMPORAL_PROPERTIES, cursorTracer, memoryTracker);\n+        } else if (type.equals(OffsetTime.class))\n         {\n-            allocateFromCompositeType( target, TemporalType.encodeTimeArray( (OffsetTime[]) array ),\n-                    recordAllocator, allowStorePointsAndTemporal, RecordStorageCapability.TEMPORAL_PROPERTIES, cursorTracer, memoryTracker );\n-        }\n-        else if ( type.equals( ZonedDateTime.class ) )\n+            allocateFromCompositeType(target, TemporalType.encodeTimeArray((OffsetTime[]) array),\n+              recordAllocator, allowStorePointsAndTemporal, RecordStorageCapability.TEMPORAL_PROPERTIES, cursorTracer, memoryTracker);\n+        } else if (type.equals(ZonedDateTime.class))\n         {\n-            allocateFromCompositeType( target, TemporalType.encodeDateTimeArray( (ZonedDateTime[]) array ),\n-                    recordAllocator, allowStorePointsAndTemporal, RecordStorageCapability.TEMPORAL_PROPERTIES, cursorTracer, memoryTracker );\n-        }\n-        else if ( type.equals( DurationValue.class ) )\n+            allocateFromCompositeType(target, TemporalType.encodeDateTimeArray((ZonedDateTime[]) array),\n+              recordAllocator, allowStorePointsAndTemporal, RecordStorageCapability.TEMPORAL_PROPERTIES, cursorTracer, memoryTracker);\n+        } else if (type.equals(DurationValue.class))\n         {\n-            allocateFromCompositeType( target, TemporalType.encodeDurationArray( (DurationValue[]) array ),\n-                    recordAllocator, allowStorePointsAndTemporal, RecordStorageCapability.TEMPORAL_PROPERTIES, cursorTracer, memoryTracker );\n-        }\n-        else\n+            allocateFromCompositeType(target, TemporalType.encodeDurationArray((DurationValue[]) array),\n+              recordAllocator, allowStorePointsAndTemporal, RecordStorageCapability.TEMPORAL_PROPERTIES, cursorTracer, memoryTracker);\n+        } else\n         {\n-            allocateFromNumbers( target, array, recordAllocator, cursorTracer, memoryTracker );\n+            allocateFromNumbers(target, array, recordAllocator, cursorTracer, memoryTracker);\n         }\n     }\n \n-    public static Value getRightArray( Pair<byte[],byte[]> data )\n+    public static Value getRightArray(Pair<byte[], byte[]> data)\n     {\n         byte[] header = data.first();\n         byte[] bArray = data.other();\n         byte typeId = header[0];\n-        if ( typeId == PropertyType.STRING.intValue() )\n+        if (typeId == PropertyType.STRING.intValue())\n         {\n-            ByteBuffer headerBuffer = ByteBuffer.wrap( header, 1/*skip the type*/, header.length - 1 );\n+            ByteBuffer headerBuffer = ByteBuffer.wrap(header, 1/*skip the type*/, header.length - 1);\n             int arrayLength = headerBuffer.getInt();\n             String[] result = new String[arrayLength];\n \n-            ByteBuffer dataBuffer = ByteBuffer.wrap( bArray );\n-            for ( int i = 0; i < arrayLength; i++ )\n+            ByteBuffer dataBuffer = ByteBuffer.wrap(bArray);\n+            for (int i = 0; i < arrayLength; i++)\n             {\n                 int byteLength = dataBuffer.getInt();\n                 byte[] stringByteArray = new byte[byteLength];\n-                dataBuffer.get( stringByteArray );\n-                result[i] = PropertyStore.decodeString( stringByteArray );\n+                dataBuffer.get(stringByteArray);\n+                result[i] = PropertyStore.decodeString(stringByteArray);\n             }\n-            return Values.stringArray( result );\n-        }\n-        else if ( typeId == PropertyType.GEOMETRY.intValue() )\n+            return Values.stringArray(result);\n+        } else if (typeId == PropertyType.GEOMETRY.intValue())\n         {\n             GeometryType.GeometryHeader geometryHeader = GeometryType.GeometryHeader.fromArrayHeaderBytes(header);\n-            return GeometryType.decodeGeometryArray( geometryHeader, bArray );\n-        }\n-        else if ( typeId == PropertyType.TEMPORAL.intValue() )\n+            return GeometryType.decodeGeometryArray(geometryHeader, bArray);\n+        } else if (typeId == PropertyType.TEMPORAL.intValue())\n         {\n             TemporalType.TemporalHeader temporalHeader = TemporalType.TemporalHeader.fromArrayHeaderBytes(header);\n-            return TemporalType.decodeTemporalArray( temporalHeader, bArray );\n-        }\n-        else\n+            return TemporalType.decodeTemporalArray(temporalHeader, bArray);\n+        } else\n         {\n-            ShortArray type = ShortArray.typeOf( typeId );\n+            ShortArray type = ShortArray.typeOf(typeId);\n             int bitsUsedInLastByte = header[1];\n             int requiredBits = header[2];\n-            if ( requiredBits == 0 )\n+            if (requiredBits == 0)\n             {\n                 return type.createEmptyArray();\n             }\n-            if ( type == ShortArray.BYTE && requiredBits == Byte.SIZE )\n+            if (type == ShortArray.BYTE && requiredBits == Byte.SIZE)\n             {   // Optimization for byte arrays (probably large ones)\n-                return Values.byteArray( bArray );\n-            }\n-            else\n+                return Values.byteArray(bArray);\n+            } else\n             {   // Fallback to the generic approach, which is a slower\n-                Bits bits = Bits.bitsFromBytes( bArray );\n+                Bits bits = Bits.bitsFromBytes(bArray);\n                 int length = (bArray.length * 8 - (8 - bitsUsedInLastByte)) / requiredBits;\n-                return type.createArray( length, bits, requiredBits );\n+                return type.createArray(length, bits, requiredBits);\n             }\n         }\n     }\n \n-    public Object getArrayFor( Iterable<DynamicRecord> records, PageCursorTracer cursorTracer )\n+    public Object getArrayFor(Iterable<DynamicRecord> records, PageCursorTracer cursorTracer)\n     {\n-        return getRightArray( readFullByteArray( records, PropertyType.ARRAY , cursorTracer ) ).asObject();\n+        return getRightArray(readFullByteArray(records, PropertyType.ARRAY, cursorTracer)).asObject();\n     }\n }\n",
            "diff_size": 143
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}