{
    "project_name": "cloudera-director-sdk",
    "error_id": "206",
    "information": {
        "errors": [
            {
                "line": "0",
                "severity": "error",
                "message": "Required pattern 'Cloudera copyright header' missing in file.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
            }
        ]
    },
    "source_code": "// Licensed to Cloudera, Inc. under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/errored/1/206/Preconditions.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/intellij/206/Preconditions.java\nindex 4151ec71093..45b59737641 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/errored/1/206/Preconditions.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/intellij/206/Preconditions.java\n@@ -34,8 +34,8 @@ public final class Preconditions {\n    * method is not null.\n    *\n    * @param instance an object\n-   * @param message the exception message to use if the check fails; will\n-   *     be converted to a string using {@link String#valueOf(Object)}\n+   * @param message  the exception message to use if the check fails; will\n+   *                 be converted to a string using {@link String#valueOf(Object)}\n    * @return the non-null reference that was validated\n    * @throws NullPointerException if {@code reference} is null\n    */\n@@ -51,8 +51,8 @@ public final class Preconditions {\n    * calling method.\n    *\n    * @param expression a boolean expression\n-   * @param message the exception message to use if the check fails; will\n-   *     be converted to a string using {@link String#valueOf(Object)}\n+   * @param message    the exception message to use if the check fails; will\n+   *                   be converted to a string using {@link String#valueOf(Object)}\n    * @throws IllegalArgumentException if {@code expression} is false\n    */\n   public static void checkArgument(\n",
            "diff_size": 4
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/errored/1/206/Preconditions.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/naturalize/206/Preconditions.java\nindex 4151ec71093..de7f61dbb95 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/errored/1/206/Preconditions.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/naturalize/206/Preconditions.java\n@@ -1,19 +1,4 @@\n-// Licensed to Cloudera, Inc. under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  Cloudera, Inc. licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//     http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing, software\n-// distributed under the License is distributed on an \"AS IS\" BASIS,\n-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-// See the License for the specific language governing permissions and\n-// limitations under the License.\n-\n+// Licensed to Cloudera, Inc.\n // Note: This file is auto generated. Do not edit manually.\n \n package com.cloudera.director.client.common;\n@@ -55,13 +40,9 @@ public final class Preconditions {\n    *     be converted to a string using {@link String#valueOf(Object)}\n    * @throws IllegalArgumentException if {@code expression} is false\n    */\n-  public static void checkArgument(\n-      boolean expression, Object message) {\n-    if (!expression) {\n+  public static void checkArgument( boolean expression, Object message) {\n+  if (!expression) {\n       throw new IllegalArgumentException(String.valueOf(message));\n     }\n   }\n-}\n-\n-\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 23
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                },
                {
                    "line": "31",
                    "column": "27",
                    "severity": "warning",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "31",
                    "column": "28",
                    "severity": "warning",
                    "message": "'}' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/errored/1/206/Preconditions.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/codebuff/206/Preconditions.java\nindex 4151ec71093..9d22746cee0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/errored/1/206/Preconditions.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/codebuff/206/Preconditions.java\n@@ -21,13 +21,14 @@ package com.cloudera.director.client.common;\n /**\n  * Provides methods to check preconditions.\n  */\n+\n public final class Preconditions {\n \n   /**\n    * Private constructor to prevent instantiation.\n    */\n-  private Preconditions() {\n-  }\n+\n+  private Preconditions() {}\n \n   /**\n    * Ensures that an object reference passed as a parameter to the calling\n@@ -39,10 +40,12 @@ public final class Preconditions {\n    * @return the non-null reference that was validated\n    * @throws NullPointerException if {@code reference} is null\n    */\n+\n   public static <T> T checkNotNull(T instance, String message) {\n     if (instance == null) {\n       throw new NullPointerException(message);\n     }\n+\n     return instance;\n   }\n \n@@ -55,13 +58,10 @@ public final class Preconditions {\n    *     be converted to a string using {@link String#valueOf(Object)}\n    * @throws IllegalArgumentException if {@code expression} is false\n    */\n-  public static void checkArgument(\n-      boolean expression, Object message) {\n+\n+  public static void checkArgument(boolean expression, Object message) {\n     if (!expression) {\n       throw new IllegalArgumentException(String.valueOf(message));\n     }\n   }\n-}\n-\n-\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}