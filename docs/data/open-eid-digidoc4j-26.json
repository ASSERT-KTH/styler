{
    "project_name": "open-eid-digidoc4j",
    "error_id": "26",
    "information": {
        "errors": [
            {
                "line": "196",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 128).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    long fileSize = 0L;\n    try (InputStream inputStream = getStream()) {\n      // Read the entire stream, but do not build yet another byte[] to hold the entire contents. Just skip and count the bytes.\n      //  InputStream.skip(long) is not reliable to count the actual number of bytes available via an input stream.\n      byte[] skipBuffer = new byte[IOUtils.DEFAULT_BUFFER_SIZE];\n      int bytesRead;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "196",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "196",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/26/DataFile.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/intellij/26/DataFile.java\nindex fdcf469b7b2..0b579c3d28c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/26/DataFile.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/intellij/26/DataFile.java\n@@ -1,12 +1,12 @@\n /* DigiDoc4J library\n-*\n-* This software is released under either the GNU Library General Public\n-* License (see LICENSE.LGPL).\n-*\n-* Note that the only valid version of the LGPL license as far as this\n-* project is concerned is the original GNU Library General Public License\n-* Version 2.1, February 1999\n-*/\n+ *\n+ * This software is released under either the GNU Library General Public\n+ * License (see LICENSE.LGPL).\n+ *\n+ * Note that the only valid version of the LGPL license as far as this\n+ * project is concerned is the original GNU Library General Public License\n+ * Version 2.1, February 1999\n+ */\n \n package org.digidoc4j;\n \n",
            "diff_size": 8
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "196",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/26/DataFile.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/naturalize/26/DataFile.java\nindex fdcf469b7b2..464df6ba351 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/26/DataFile.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/naturalize/26/DataFile.java\n@@ -327,4 +327,4 @@ public class DataFile implements Serializable {\n       throw new DigiDoc4JException(e);\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "209",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/26/DataFile.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/codebuff/26/DataFile.java\nindex fdcf469b7b2..d1457345f64 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/26/DataFile.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/codebuff/26/DataFile.java\n@@ -26,7 +26,6 @@ import org.digidoc4j.exceptions.TechnicalException;\n import org.digidoc4j.impl.StreamDocument;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n@@ -40,9 +39,11 @@ import java.util.OptionalLong;\n /**\n  * Data file wrapper providing methods for handling signed files or files to be signed in Container.\n  */\n+\n+\n public class DataFile implements Serializable {\n-  private static final Logger logger = LoggerFactory.getLogger(DataFile.class);\n \n+  private static final Logger logger = LoggerFactory.getLogger(DataFile.class);\n   private DSSDocument document = null;\n   private Digest digest = null;\n   private String id;\n@@ -53,6 +54,7 @@ public class DataFile implements Serializable {\n    * @param path     file name with path\n    * @param mimeType MIME type of the data file, for example 'text/plain' or 'application/msword'\n    */\n+\n   public DataFile(String path, String mimeType) {\n     logger.debug(\"Path: \" + path + \", mime type: \" + mimeType);\n     try {\n@@ -71,6 +73,8 @@ public class DataFile implements Serializable {\n    * @param fileName file name with path\n    * @param mimeType MIME type of the data file, for example 'text/plain' or 'application/msword'\n    */\n+\n+\n   public DataFile(byte[] data, String fileName, String mimeType) {\n     logger.debug(\"File name: \" + fileName + \", mime type: \" + mimeType);\n     document = new InMemoryDocument(data.clone(), fileName, getMimeType(mimeType));\n@@ -83,6 +87,8 @@ public class DataFile implements Serializable {\n    * @param fileName file name with path\n    * @param mimeType MIME type of the stream file, for example 'text/plain' or 'application/msword'\n    */\n+\n+\n   public DataFile(InputStream stream, String fileName, String mimeType) {\n     logger.debug(\"File name: \" + fileName + \", mime type: \" + mimeType);\n     try {\n@@ -97,6 +103,7 @@ public class DataFile implements Serializable {\n     this.document = document;\n   }\n \n+\n   public DataFile() {\n   }\n \n@@ -118,6 +125,7 @@ public class DataFile implements Serializable {\n    *\n    * @return calculated digest\n    */\n+\n   public byte[] calculateDigest() {\n     return calculateDigest(getSha256DigestMethodUrl());\n   }\n@@ -135,6 +143,7 @@ public class DataFile implements Serializable {\n    * @param method method uri for calculating the digest\n    * @return calculated digest\n    */\n+\n   public byte[] calculateDigest(URL method) {\n     logger.debug(\"URL method: \" + method);\n     if (digest == null) {\n@@ -150,6 +159,7 @@ public class DataFile implements Serializable {\n    * @param digestType digest algorithm type\n    * @return digest algorithm uri\n    */\n+\n   public byte[] calculateDigest(org.digidoc4j.DigestAlgorithm digestType) {\n     return calculateDigest(digestType.uri());\n   }\n@@ -164,6 +174,7 @@ public class DataFile implements Serializable {\n    *\n    * @return filename\n    */\n+\n   public String getName() {\n     String documentName = document.getName();\n     String name = FilenameUtils.getName(documentName);\n@@ -177,6 +188,7 @@ public class DataFile implements Serializable {\n    *\n    * @return id or name\n    */\n+\n   public String getId() {\n     return (id == null ? getName() : id);\n   }\n@@ -186,6 +198,7 @@ public class DataFile implements Serializable {\n    *\n    * @return file size in bytes\n    */\n+\n   public long getFileSize() {\n     OptionalLong fileBackedSize = getFileSizeIfBackedByFile();\n     if (fileBackedSize.isPresent()) {\n@@ -212,6 +225,7 @@ public class DataFile implements Serializable {\n    *\n    * @return {@code true} if the data file is empty\n    */\n+\n   public boolean isFileEmpty() {\n     OptionalLong fileBackedSize = getFileSizeIfBackedByFile();\n     if (fileBackedSize.isPresent()) {\n@@ -243,6 +257,7 @@ public class DataFile implements Serializable {\n    *\n    * @return media type\n    */\n+\n   public String getMediaType() {\n     String mediaType = document.getMimeType().getMimeTypeString();\n     logger.debug(\"Media type is: \" + mediaType);\n@@ -260,6 +275,7 @@ public class DataFile implements Serializable {\n    * @param out stream where data is written to\n    * @throws java.io.IOException on file write error\n    */\n+\n   public void saveAs(OutputStream out) throws IOException {\n     out.write(getBytes());\n     out.close();\n@@ -271,6 +287,7 @@ public class DataFile implements Serializable {\n    * @param path full file path where the data file should be saved to. If the file exists it will be overwritten\n    */\n   //TODO exception - method throws DSSException which can be caused by other exceptions\n+\n   public void saveAs(String path) {\n     try {\n       logger.debug(\"Path: \" + path);\n@@ -286,6 +303,7 @@ public class DataFile implements Serializable {\n    *\n    * @return data as bytes\n    */\n+\n   public byte[] getBytes() {\n     try {\n       return IOUtils.toByteArray(document.openStream());\n@@ -299,6 +317,7 @@ public class DataFile implements Serializable {\n    *\n    * @return data file stream\n    */\n+\n   public InputStream getStream() {\n     return document.openStream();\n   }\n@@ -308,6 +327,7 @@ public class DataFile implements Serializable {\n    *\n    * @param dataFileId id for the dataFile\n    */\n+\n   public void setId(String dataFileId) {\n     this.id = dataFileId;\n   }\n@@ -327,4 +347,4 @@ public class DataFile implements Serializable {\n       throw new DigiDoc4JException(e);\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "196",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "195",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 280).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "195",
                    "column": "49",
                    "severity": "error",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/26/DataFile.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/styler_three_grams/26/DataFile.java\nindex fdcf469b7b2..46b1dd83743 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/26/DataFile.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/styler_three_grams/26/DataFile.java\n@@ -192,10 +192,8 @@ public class DataFile implements Serializable {\n       return fileBackedSize.getAsLong();\n     }\n     long fileSize = 0L;\n-    try (InputStream inputStream = getStream()) {\n-      // Read the entire stream, but do not build yet another byte[] to hold the entire contents. Just skip and count the bytes.\n-      //  InputStream.skip(long) is not reliable to count the actual number of bytes available via an input stream.\n-      byte[] skipBuffer = new byte[IOUtils.DEFAULT_BUFFER_SIZE];\n+    try (InputStream inputStream = getStream()) {// Read the entire stream, but do not build yet another byte[] to hold the entire contents. Just skip and count the bytes.//  InputStream.skip(long) is not reliable to count the actual number of bytes available via an input stream.\n+    bytebyte[] skipBuffer = new byte[IOUtils.DEFAULT_BUFFER_SIZE];\n       int bytesRead;\n       while ((bytesRead = inputStream.read(skipBuffer)) > 0) {\n         fileSize += bytesRead;\n",
            "diff_size": 4
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}