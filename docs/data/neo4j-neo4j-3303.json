{
    "project_name": "neo4j-neo4j",
    "error_id": "3303",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "33",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "33",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3303/HeapTrackingUnifiedMap.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3303/HeapTrackingUnifiedMap.java\nindex b4239746dae..d4e0d740712 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3303/HeapTrackingUnifiedMap.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3303/HeapTrackingUnifiedMap.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.collection.trackable;\n \n import org.eclipse.collections.impl.map.mutable.UnifiedMap;\n@@ -29,44 +30,44 @@ import static org.neo4j.memory.HeapEstimator.OBJECT_REFERENCE_BYTES;\n import static org.neo4j.memory.HeapEstimator.alignObjectSize;\n import static org.neo4j.memory.HeapEstimator.shallowSizeOfInstance;\n \n-@SuppressWarnings( \"ExternalizableWithoutPublicNoArgConstructor\" )\n-public class HeapTrackingUnifiedMap<K, V> extends UnifiedMap<K,V> implements AutoCloseable\n+@SuppressWarnings(\"ExternalizableWithoutPublicNoArgConstructor\")\n+public class HeapTrackingUnifiedMap<K, V> extends UnifiedMap<K, V> implements AutoCloseable\n {\n-    private static final long SHALLOW_SIZE = shallowSizeOfInstance( HeapTrackingUnifiedMap.class );\n+    private static final long SHALLOW_SIZE = shallowSizeOfInstance(HeapTrackingUnifiedMap.class);\n     private final MemoryTracker memoryTracker;\n     private long trackedHeap;\n \n-    static <K, V> HeapTrackingUnifiedMap<K,V> createUnifiedMap( MemoryTracker memoryTracker )\n+    static <K, V> HeapTrackingUnifiedMap<K, V> createUnifiedMap(MemoryTracker memoryTracker)\n     {\n         int initialSizeToAllocate = DEFAULT_INITIAL_CAPACITY << 2;\n-        long trackedHeap = arrayHeapSize( initialSizeToAllocate );\n-        memoryTracker.allocateHeap( SHALLOW_SIZE + trackedHeap );\n-        return new HeapTrackingUnifiedMap<>( memoryTracker, trackedHeap );\n+        long trackedHeap = arrayHeapSize(initialSizeToAllocate);\n+        memoryTracker.allocateHeap(SHALLOW_SIZE + trackedHeap);\n+        return new HeapTrackingUnifiedMap<>(memoryTracker, trackedHeap);\n     }\n \n-    private HeapTrackingUnifiedMap( MemoryTracker memoryTracker, long trackedHeap )\n+    private HeapTrackingUnifiedMap(MemoryTracker memoryTracker, long trackedHeap)\n     {\n-        this.memoryTracker = requireNonNull( memoryTracker );\n+        this.memoryTracker = requireNonNull(memoryTracker);\n         this.trackedHeap = trackedHeap;\n     }\n \n     @Override\n-    protected void allocateTable( int sizeToAllocate )\n+    protected void allocateTable(int sizeToAllocate)\n     {\n-        if ( memoryTracker != null )\n+        if (memoryTracker != null)\n         {\n-            long heapToAllocate = arrayHeapSize( sizeToAllocate );\n-            memoryTracker.allocateHeap( heapToAllocate );\n-            memoryTracker.releaseHeap( trackedHeap );\n+            long heapToAllocate = arrayHeapSize(sizeToAllocate);\n+            memoryTracker.allocateHeap(heapToAllocate);\n+            memoryTracker.releaseHeap(trackedHeap);\n             trackedHeap = heapToAllocate;\n         }\n-        super.allocateTable( sizeToAllocate );\n+        super.allocateTable(sizeToAllocate);\n     }\n \n     @Override\n-    protected void rehash( int newCapacity )\n+    protected void rehash(int newCapacity)\n     {\n-        super.rehash( newCapacity );\n+        super.rehash(newCapacity);\n         // Add an estimated heap usage of the arrays for the chains of colliding buckets, which grow in multiples of 4 (2 key-value pairs).\n         // Add a fixed cost for each chain, which amounts to an average chain length of 8 key-value pairs.\n         // In actuality chains are usually much shorter, but the number of collisions is also at it lowest just after rehash and can then grow\n@@ -74,19 +75,19 @@ public class HeapTrackingUnifiedMap<K, V> extends UnifiedMap<K,V> implements Aut\n         // So based on experiments this heuristic seems to produce a fair trade-off between underestimation just before rehash and overestimation\n         // just after rehash, with a bias toward more overestimation after rehash (e.g. ~3% under --> ~8% over)\n         int nChains = getCollidingBuckets();\n-        long estimatedHeapUsageForChains = nChains * arrayHeapSize( 16 );\n-        memoryTracker.allocateHeap( estimatedHeapUsageForChains );\n+        long estimatedHeapUsageForChains = nChains * arrayHeapSize(16);\n+        memoryTracker.allocateHeap(estimatedHeapUsageForChains);\n         trackedHeap += estimatedHeapUsageForChains;\n     }\n \n     @Override\n     public void close()\n     {\n-        memoryTracker.releaseHeap( SHALLOW_SIZE + trackedHeap );\n+        memoryTracker.releaseHeap(SHALLOW_SIZE + trackedHeap);\n     }\n \n-    static long arrayHeapSize( int arrayLength )\n+    static long arrayHeapSize(int arrayLength)\n     {\n-        return alignObjectSize( ARRAY_HEADER_BYTES + (long) arrayLength * OBJECT_REFERENCE_BYTES );\n+        return alignObjectSize(ARRAY_HEADER_BYTES + (long) arrayLength * OBJECT_REFERENCE_BYTES);\n     }\n }\n",
            "diff_size": 23
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3303/HeapTrackingUnifiedMap.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/3303/HeapTrackingUnifiedMap.java\nindex b4239746dae..636aab6c497 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3303/HeapTrackingUnifiedMap.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/3303/HeapTrackingUnifiedMap.java\n@@ -89,4 +89,4 @@ public class HeapTrackingUnifiedMap<K, V> extends UnifiedMap<K,V> implements Aut\n     {\n         return alignObjectSize( ARRAY_HEADER_BYTES + (long) arrayLength * OBJECT_REFERENCE_BYTES );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}