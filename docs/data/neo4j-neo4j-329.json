{
    "project_name": "neo4j-neo4j",
    "error_id": "329",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "44",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "126",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/329/RightmostInChain.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/329/RightmostInChain.java\nindex 789582e4101..6980ce0cfe4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/329/RightmostInChain.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/329/RightmostInChain.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.index.internal.gbptree;\n \n import java.nio.file.Path;\n@@ -40,26 +41,26 @@ class RightmostInChain\n     private long currentRightmostRightSiblingPointerGeneration;\n     private long currentRightmostNodeGeneration;\n \n-    RightmostInChain( Path path )\n+    RightmostInChain(Path path)\n     {\n         this.path = path;\n     }\n \n-    void assertNext( PageCursor cursor, long newRightmostNodeGeneration,\n-            long newRightmostLeftSiblingPointer, long newRightmostLeftSiblingPointerGeneration,\n-            long newRightmostRightSiblingPointer, long newRightmostRightSiblingPointerGeneration,\n-            GBPTreeConsistencyCheckVisitor visitor )\n+    void assertNext(PageCursor cursor, long newRightmostNodeGeneration,\n+                    long newRightmostLeftSiblingPointer, long newRightmostLeftSiblingPointerGeneration,\n+                    long newRightmostRightSiblingPointer, long newRightmostRightSiblingPointerGeneration,\n+                    GBPTreeConsistencyCheckVisitor visitor)\n     {\n         long newRightmostNode = cursor.getCurrentPageId();\n \n         // Assert we have reached expected node and that we agree about being siblings\n-        assertSiblingsAgreeOnBeingSiblings( currentRightmostNode, currentRightmostNodeGeneration, currentRightmostRightSiblingPointer,\n-                currentRightmostRightSiblingPointerGeneration, newRightmostNode, newRightmostNodeGeneration, newRightmostLeftSiblingPointer,\n-                newRightmostLeftSiblingPointerGeneration, visitor );\n+        assertSiblingsAgreeOnBeingSiblings(currentRightmostNode, currentRightmostNodeGeneration, currentRightmostRightSiblingPointer,\n+          currentRightmostRightSiblingPointerGeneration, newRightmostNode, newRightmostNodeGeneration, newRightmostLeftSiblingPointer,\n+          newRightmostLeftSiblingPointerGeneration, visitor);\n         // Assert that both sibling pointers have reasonable generations\n-        assertSiblingPointerGeneration( currentRightmostNode, currentRightmostNodeGeneration, currentRightmostRightSiblingPointer,\n-                currentRightmostRightSiblingPointerGeneration, newRightmostNode, newRightmostNodeGeneration, newRightmostLeftSiblingPointer,\n-                newRightmostLeftSiblingPointerGeneration, visitor );\n+        assertSiblingPointerGeneration(currentRightmostNode, currentRightmostNodeGeneration, currentRightmostRightSiblingPointer,\n+          currentRightmostRightSiblingPointerGeneration, newRightmostNode, newRightmostNodeGeneration, newRightmostLeftSiblingPointer,\n+          newRightmostLeftSiblingPointerGeneration, visitor);\n \n         // Update currentRightmostNode = newRightmostNode;\n         currentRightmostNode = newRightmostNode;\n@@ -68,67 +69,71 @@ class RightmostInChain\n         currentRightmostRightSiblingPointerGeneration = newRightmostRightSiblingPointerGeneration;\n     }\n \n-    private void assertSiblingPointerGeneration( long currentRightmostNode, long currentRightmostNodeGeneration,\n-            long currentRightmostRightSiblingPointer, long currentRightmostRightSiblingPointerGeneration, long newRightmostNode,\n-            long newRightmostNodeGeneration, long newRightmostLeftSiblingPointer, long newRightmostLeftSiblingPointerGeneration,\n-            GBPTreeConsistencyCheckVisitor visitor )\n+    private void assertSiblingPointerGeneration(long currentRightmostNode, long currentRightmostNodeGeneration,\n+                                                long currentRightmostRightSiblingPointer, long currentRightmostRightSiblingPointerGeneration,\n+                                                long newRightmostNode,\n+                                                long newRightmostNodeGeneration, long newRightmostLeftSiblingPointer,\n+                                                long newRightmostLeftSiblingPointerGeneration,\n+                                                GBPTreeConsistencyCheckVisitor visitor)\n     {\n-        if ( currentRightmostNodeGeneration > newRightmostLeftSiblingPointerGeneration && currentRightmostNode != NO_NODE_FLAG )\n+        if (currentRightmostNodeGeneration > newRightmostLeftSiblingPointerGeneration && currentRightmostNode != NO_NODE_FLAG)\n         {\n             // Generation of left sibling is larger than that of the pointer from right sibling\n             // Left siblings view:  {_(9)}-(_)->{_}\n             // Right siblings view: {_}<-(5)-{_(_)}\n-            visitor.pointerHasLowerGenerationThanNode( GBPTreePointerType.leftSibling(), newRightmostNode, newRightmostLeftSiblingPointerGeneration,\n-                    newRightmostLeftSiblingPointer, currentRightmostNodeGeneration, path\n+            visitor.pointerHasLowerGenerationThanNode(GBPTreePointerType.leftSibling(), newRightmostNode, newRightmostLeftSiblingPointerGeneration,\n+              newRightmostLeftSiblingPointer, currentRightmostNodeGeneration, path\n             );\n         }\n-        if ( currentRightmostRightSiblingPointerGeneration < newRightmostNodeGeneration &&\n-                currentRightmostRightSiblingPointer != NO_NODE_FLAG )\n+        if (currentRightmostRightSiblingPointerGeneration < newRightmostNodeGeneration &&\n+          currentRightmostRightSiblingPointer != NO_NODE_FLAG)\n         {\n             // Generation of right sibling is larger than that of the pointer from left sibling\n             // Left siblings view:  {_(_)}-(5)->{_}\n             // Right siblings view: {_}<-(_)-{_(9)}\n-            visitor.pointerHasLowerGenerationThanNode( GBPTreePointerType.rightSibling(), currentRightmostNode, currentRightmostRightSiblingPointerGeneration,\n-                    currentRightmostRightSiblingPointer, newRightmostNodeGeneration, path\n+            visitor.pointerHasLowerGenerationThanNode(GBPTreePointerType.rightSibling(), currentRightmostNode, currentRightmostRightSiblingPointerGeneration,\n+              currentRightmostRightSiblingPointer, newRightmostNodeGeneration, path\n             );\n         }\n     }\n \n-    private void assertSiblingsAgreeOnBeingSiblings( long currentRightmostNode, long currentRightmostNodeGeneration,\n-            long currentRightmostRightSiblingPointer, long currentRightmostRightSiblingPointerGeneration, long newRightmostNode,\n-            long newRightmostNodeGeneration, long newRightmostLeftSiblingPointer, long newRightmostLeftSiblingPointerGeneration,\n-            GBPTreeConsistencyCheckVisitor visitor )\n+    private void assertSiblingsAgreeOnBeingSiblings(long currentRightmostNode, long currentRightmostNodeGeneration,\n+                                                    long currentRightmostRightSiblingPointer, long currentRightmostRightSiblingPointerGeneration,\n+                                                    long newRightmostNode,\n+                                                    long newRightmostNodeGeneration, long newRightmostLeftSiblingPointer,\n+                                                    long newRightmostLeftSiblingPointerGeneration,\n+                                                    GBPTreeConsistencyCheckVisitor visitor)\n     {\n         boolean siblingsPointToEachOther = true;\n-        if ( newRightmostLeftSiblingPointer != currentRightmostNode )\n+        if (newRightmostLeftSiblingPointer != currentRightmostNode)\n         {\n             // Right sibling does not point to left sibling\n             // Left siblings view:  {2(_)}-(_)->{_}\n             // Right siblings view: {1}<-(_)-{_(_)}\n             siblingsPointToEachOther = false;\n         }\n-        if ( newRightmostNode != currentRightmostRightSiblingPointer &&\n-                (currentRightmostRightSiblingPointer != NO_NODE_FLAG || currentRightmostNode != NO_NODE_FLAG) )\n+        if (newRightmostNode != currentRightmostRightSiblingPointer &&\n+          (currentRightmostRightSiblingPointer != NO_NODE_FLAG || currentRightmostNode != NO_NODE_FLAG))\n         {\n             // Left sibling does not point to right sibling\n             // Left siblings view:  {_(_)}-(_)->{1}\n             // Right siblings view: {_}<-(_)-{2(_)}\n             siblingsPointToEachOther = false;\n         }\n-        if ( !siblingsPointToEachOther )\n+        if (!siblingsPointToEachOther)\n         {\n-            visitor.siblingsDontPointToEachOther( currentRightmostNode, currentRightmostNodeGeneration, currentRightmostRightSiblingPointerGeneration,\n-                    currentRightmostRightSiblingPointer, newRightmostLeftSiblingPointer, newRightmostLeftSiblingPointerGeneration, newRightmostNode,\n-                    newRightmostNodeGeneration, path\n+            visitor.siblingsDontPointToEachOther(currentRightmostNode, currentRightmostNodeGeneration, currentRightmostRightSiblingPointerGeneration,\n+              currentRightmostRightSiblingPointer, newRightmostLeftSiblingPointer, newRightmostLeftSiblingPointerGeneration, newRightmostNode,\n+              newRightmostNodeGeneration, path\n             );\n         }\n     }\n \n-    void assertLast( GBPTreeConsistencyCheckVisitor visitor )\n+    void assertLast(GBPTreeConsistencyCheckVisitor visitor)\n     {\n-        if ( currentRightmostRightSiblingPointer != NO_NODE_FLAG )\n+        if (currentRightmostRightSiblingPointer != NO_NODE_FLAG)\n         {\n-            visitor.rightmostNodeHasRightSibling( currentRightmostRightSiblingPointer, currentRightmostNode, path );\n+            visitor.rightmostNodeHasRightSibling(currentRightmostRightSiblingPointer, currentRightmostNode, path);\n         }\n     }\n }\n",
            "diff_size": 41
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}