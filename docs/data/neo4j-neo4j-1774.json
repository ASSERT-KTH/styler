{
    "project_name": "neo4j-neo4j",
    "error_id": "1774",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "38",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "86",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "145",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "134",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "292",
                    "column": "130",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1774/MethodDeclaration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1774/MethodDeclaration.java\nindex 21ec3611e6e..ca632c5a944 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1774/MethodDeclaration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1774/MethodDeclaration.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.codegen;\n \n import java.lang.reflect.Modifier;\n@@ -34,79 +35,78 @@ import static org.neo4j.codegen.TypeReference.typeReference;\n \n public abstract class MethodDeclaration\n {\n-    public static Builder method( Class<?> returnType, String name, Parameter... parameters )\n+    public static Builder method(Class<?> returnType, String name, Parameter... parameters)\n     {\n-        return method( typeReference( returnType ), name, parameters );\n+        return method(typeReference(returnType), name, parameters);\n     }\n \n-    public static Builder method( final TypeReference returnType, final String name, Parameter... parameters )\n+    public static Builder method(final TypeReference returnType, final String name, Parameter... parameters)\n     {\n-        return new Builder( parameters )\n+        return new Builder(parameters)\n         {\n             @Override\n-            MethodDeclaration build( TypeReference owner )\n+            MethodDeclaration build(TypeReference owner)\n             {\n-                return method( owner, returnType, name, parameters, exceptions(), modifiers(), typeParameters() );\n+                return method(owner, returnType, name, parameters, exceptions(), modifiers(), typeParameters());\n             }\n         };\n     }\n \n-    static Builder constructor( Parameter... parameters )\n+    static Builder constructor(Parameter... parameters)\n     {\n-        return new Builder( parameters )\n+        return new Builder(parameters)\n         {\n             @Override\n-            MethodDeclaration build( TypeReference owner )\n+            MethodDeclaration build(TypeReference owner)\n             {\n-                return constructor( owner, parameters, exceptions(), modifiers(), typeParameters() );\n+                return constructor(owner, parameters, exceptions(), modifiers(), typeParameters());\n             }\n         };\n     }\n \n     public List<TypeParameter> typeParameters()\n     {\n-        return unmodifiableList( asList( typeParameters ) );\n+        return unmodifiableList(asList(typeParameters));\n     }\n \n     public List<TypeReference> throwsList()\n     {\n-        return unmodifiableList( asList( exceptions ) );\n+        return unmodifiableList(asList(exceptions));\n     }\n \n     public abstract static class Builder\n     {\n-        private LinkedHashMap<String,TypeReference.Bound> typeParameters;\n+        private LinkedHashMap<String, TypeReference.Bound> typeParameters;\n \n-        public Builder parameterizedWith( String name, TypeReference.Bound bound )\n+        public Builder parameterizedWith(String name, TypeReference.Bound bound)\n         {\n-            if ( typeParameters == null )\n+            if (typeParameters == null)\n             {\n                 typeParameters = new LinkedHashMap<>();\n-            }\n-            else if ( typeParameters.containsKey( name ) )\n+            } else if (typeParameters.containsKey(name))\n             {\n-                throw new IllegalArgumentException( name + \" defined twice\" );\n+                throw new IllegalArgumentException(name + \" defined twice\");\n             }\n-            typeParameters.put( name, bound );\n+            typeParameters.put(name, bound);\n             return this;\n         }\n \n-        public Builder throwsException( Class<?> type )\n+        public Builder throwsException(Class<?> type)\n         {\n-            return throwsException( TypeReference.typeReference( type ) );\n+            return throwsException(TypeReference.typeReference(type));\n         }\n \n-        public Builder throwsException( TypeReference type )\n+        public Builder throwsException(TypeReference type)\n         {\n-            if ( exceptions == null )\n+            if (exceptions == null)\n             {\n                 exceptions = new ArrayList<>();\n             }\n-            exceptions.add( type );\n+            exceptions.add(type);\n             return this;\n         }\n \n-        public Builder modifiers( int modifiers )\n+        public Builder modifiers(int modifiers)\n         {\n             this.modifiers = modifiers;\n             return this;\n@@ -117,35 +117,34 @@ public abstract class MethodDeclaration\n             return modifiers;\n         }\n \n-        abstract MethodDeclaration build( TypeReference owner );\n+        abstract MethodDeclaration build(TypeReference owner);\n \n         final Parameter[] parameters;\n         private List<TypeReference> exceptions;\n         private int modifiers = Modifier.PUBLIC;\n \n-        private Builder( Parameter[] parameters )\n+        private Builder(Parameter[] parameters)\n         {\n             this.parameters = parameters;\n         }\n \n         TypeReference[] exceptions()\n         {\n-            return exceptions == null ? NO_TYPES : exceptions.toArray( new TypeReference[0] );\n+            return exceptions == null ? NO_TYPES : exceptions.toArray(new TypeReference[0]);\n         }\n \n         TypeParameter[] typeParameters()\n         {\n-            if ( typeParameters == null )\n+            if (typeParameters == null)\n             {\n                 return TypeParameter.NO_PARAMETERS;\n-            }\n-            else\n+            } else\n             {\n                 TypeParameter[] result = new TypeParameter[typeParameters.size()];\n                 int i = 0;\n-                for ( Map.Entry<String,TypeReference.Bound> entry : typeParameters.entrySet() )\n+                for (Map.Entry<String, TypeReference.Bound> entry : typeParameters.entrySet())\n                 {\n-                    result[i++] = new TypeParameter( entry.getKey(), entry.getValue() );\n+                    result[i++] = new TypeParameter(entry.getKey(), entry.getValue());\n                 }\n                 return result;\n             }\n@@ -158,8 +157,8 @@ public abstract class MethodDeclaration\n     private final TypeParameter[] typeParameters;\n     private final int modifiers;\n \n-    MethodDeclaration( TypeReference owner, Parameter[] parameters, TypeReference[] exceptions,\n-            int modifiers, TypeParameter[] typeParameters )\n+    MethodDeclaration(TypeReference owner, Parameter[] parameters, TypeReference[] exceptions,\n+                      int modifiers, TypeParameter[] typeParameters)\n     {\n         this.owner = owner;\n         this.parameters = parameters;\n@@ -172,18 +171,18 @@ public abstract class MethodDeclaration\n \n     public boolean isStatic()\n     {\n-        return Modifier.isStatic( modifiers );\n+        return Modifier.isStatic(modifiers);\n     }\n \n     public boolean isGeneric()\n     {\n-        if ( returnType().isGeneric() || typeParameters.length != 0 )\n+        if (returnType().isGeneric() || typeParameters.length != 0)\n         {\n             return true;\n         }\n-        for ( Parameter parameter : parameters )\n+        for (Parameter parameter : parameters)\n         {\n-            if ( parameter.type().isGeneric() )\n+            if (parameter.type().isGeneric())\n             {\n                 return true;\n             }\n@@ -213,50 +212,50 @@ public abstract class MethodDeclaration\n \n     public MethodDeclaration erased()\n     {\n-        Map<String,TypeReference> table = new HashMap<>();\n-        for ( TypeParameter parameter : typeParameters )\n+        Map<String, TypeReference> table = new HashMap<>();\n+        for (TypeParameter parameter : typeParameters)\n         {\n-            table.put( parameter.name(), parameter.extendsBound() );\n+            table.put(parameter.name(), parameter.extendsBound());\n         }\n \n-        TypeReference newReturnType = erase( returnType(), table );\n+        TypeReference newReturnType = erase(returnType(), table);\n         Parameter[] newParameters = new Parameter[this.parameters.length];\n-        for ( int i = 0; i < parameters.length; i++ )\n+        for (int i = 0; i < parameters.length; i++)\n         {\n             Parameter parameter = parameters[i];\n-            TypeReference erasedType = erase( parameter.type(), table );\n-            newParameters[i] = param( erasedType, parameter.name() );\n+            TypeReference erasedType = erase(parameter.type(), table);\n+            newParameters[i] = param(erasedType, parameter.name());\n         }\n         TypeReference[] newExceptions = new TypeReference[exceptions.length];\n-        for ( int i = 0; i < exceptions.length; i++ )\n+        for (int i = 0; i < exceptions.length; i++)\n         {\n-            newExceptions[i] = erase( exceptions[i], table );\n+            newExceptions[i] = erase(exceptions[i], table);\n         }\n         String newName = name();\n         boolean newIsConstructor = isConstructor();\n \n-        return methodDeclaration( owner, newReturnType, newParameters, newExceptions, newName, newIsConstructor,\n-                modifiers, typeParameters );\n+        return methodDeclaration(owner, newReturnType, newParameters, newExceptions, newName, newIsConstructor,\n+          modifiers, typeParameters);\n     }\n \n-    private TypeReference erase( TypeReference reference, Map<String,TypeReference> table )\n+    private TypeReference erase(TypeReference reference, Map<String, TypeReference> table)\n     {\n-        TypeReference erasedReference = table.get( reference.fullName() );\n+        TypeReference erasedReference = table.get(reference.fullName());\n \n         return erasedReference != null ? erasedReference : reference;\n     }\n \n-    static MethodDeclaration method( TypeReference owner, final TypeReference returnType, final String name,\n-            Parameter[] parameters, TypeReference[] exceptions, int modifiers, TypeParameter[] typeParameters )\n+    static MethodDeclaration method(TypeReference owner, final TypeReference returnType, final String name,\n+                                    Parameter[] parameters, TypeReference[] exceptions, int modifiers, TypeParameter[] typeParameters)\n     {\n-        return methodDeclaration( owner, returnType, parameters, exceptions, name, false, modifiers, typeParameters );\n+        return methodDeclaration(owner, returnType, parameters, exceptions, name, false, modifiers, typeParameters);\n     }\n \n-    static MethodDeclaration constructor( TypeReference owner, Parameter[] parameters, TypeReference[] exceptions,\n-            int modifiers, TypeParameter[] typeParameters )\n+    static MethodDeclaration constructor(TypeReference owner, Parameter[] parameters, TypeReference[] exceptions,\n+                                         int modifiers, TypeParameter[] typeParameters)\n     {\n-        return methodDeclaration( owner, TypeReference.VOID, parameters, exceptions, \"<init>\", true, modifiers,\n-                typeParameters );\n+        return methodDeclaration(owner, TypeReference.VOID, parameters, exceptions, \"<init>\", true, modifiers,\n+          typeParameters);\n     }\n \n     public static class TypeParameter\n@@ -266,7 +265,7 @@ public abstract class MethodDeclaration\n         final String name;\n         final TypeReference.Bound bound;\n \n-        TypeParameter( String name, TypeReference.Bound bound )\n+        TypeParameter(String name, TypeReference.Bound bound)\n         {\n             this.name = name;\n             this.bound = bound;\n@@ -288,11 +287,11 @@ public abstract class MethodDeclaration\n         }\n     }\n \n-    private static MethodDeclaration methodDeclaration( TypeReference owner, final TypeReference returnType,\n-            final Parameter[] parameters, final TypeReference[] exceptions, final String name,\n-            final boolean isConstructor, int modifiers, TypeParameter[] typeParameters )\n+    private static MethodDeclaration methodDeclaration(TypeReference owner, final TypeReference returnType,\n+                                                       final Parameter[] parameters, final TypeReference[] exceptions, final String name,\n+                                                       final boolean isConstructor, int modifiers, TypeParameter[] typeParameters)\n     {\n-        return new MethodDeclaration( owner, parameters, exceptions, modifiers, typeParameters )\n+        return new MethodDeclaration(owner, parameters, exceptions, modifiers, typeParameters)\n         {\n             @Override\n             public boolean isConstructor()\n",
            "diff_size": 65
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}