{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3160",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "44",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "156",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3160/MultiReadable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3160/MultiReadable.java\nindex 97d79a3f915..dffdfe262a1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3160/MultiReadable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3160/MultiReadable.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.csv.reader;\n \n import java.io.IOException;\n@@ -27,144 +28,143 @@ import org.neo4j.collection.RawIterator;\n  * Joins multiple {@link CharReadable} into one. There will never be one read which reads from multiple sources.\n  * If the end of one source is reached those (smaller amount of) characters are returned as one read and the next\n  * read will start reading from the new source.\n- *\n+ * <p>\n  * Newline will be injected in between two sources, even if the former doesn't end with such. This to not have the\n  * last line in the former and first in the latter to look like one long line, if reading characters off of this\n  * reader character by character (w/o knowing that there are multiple sources underneath).\n  */\n public class MultiReadable implements CharReadable\n {\n-    private final RawIterator<CharReadable,IOException> actual;\n-\n-    private CharReadable current = CharReadable.EMPTY;\n-    private boolean requiresNewLine;\n-    private long previousPosition;\n-\n-    public MultiReadable( RawIterator<CharReadable,IOException> readers )\n+  private final RawIterator<CharReadable, IOException> actual;\n+\n+  private CharReadable current = CharReadable.EMPTY;\n+  private boolean requiresNewLine;\n+  private long previousPosition;\n+\n+  public MultiReadable(RawIterator<CharReadable, IOException> readers)\n+  {\n+    this.actual = readers;\n+  }\n+\n+  @Override\n+  public void close() throws IOException\n+  {\n+    closeCurrent();\n+  }\n+\n+  private void closeCurrent() throws IOException\n+  {\n+    if (current != null)\n     {\n-        this.actual = readers;\n+      current.close();\n     }\n-\n-    @Override\n-    public void close() throws IOException\n+  }\n+\n+  @Override\n+  public String sourceDescription()\n+  {\n+    return current.sourceDescription();\n+  }\n+\n+  @Override\n+  public long position()\n+  {\n+    return previousPosition + current.position();\n+  }\n+\n+  private boolean goToNextSource() throws IOException\n+  {\n+    if (actual.hasNext())\n     {\n-        closeCurrent();\n+      if (current != null)\n+      {\n+        previousPosition += current.position();\n+      }\n+      closeCurrent();\n+      current = actual.next();\n+      return true;\n     }\n+    return false;\n+  }\n \n-    private void closeCurrent() throws IOException\n+  @Override\n+  public SectionedCharBuffer read(SectionedCharBuffer buffer, int from) throws IOException\n+  {\n+    while (true)\n     {\n-        if ( current != null )\n-        {\n-            current.close();\n-        }\n-    }\n-\n-    @Override\n-    public String sourceDescription()\n-    {\n-        return current.sourceDescription();\n-    }\n+      current.read(buffer, from);\n+      if (buffer.hasAvailable())\n+      {\n+        // OK we read something from the current reader\n+        checkNewLineRequirement(buffer.array(), buffer.front() - 1);\n+        return buffer;\n+      }\n+\n+      // Even if there's no line-ending at the end of this source we should introduce one\n+      // otherwise the last line of this source and the first line of the next source will\n+      // look like one long line.\n+      if (requiresNewLine)\n+      {\n+        buffer.append('\\n');\n+        requiresNewLine = false;\n+        return buffer;\n+      }\n \n-    @Override\n-    public long position()\n-    {\n-        return previousPosition + current.position();\n+      if (!goToNextSource())\n+      {\n+        break;\n+      }\n+      from = buffer.pivot();\n     }\n-\n-    private boolean goToNextSource() throws IOException\n+    return buffer;\n+  }\n+\n+  private void checkNewLineRequirement(char[] array, int lastIndex)\n+  {\n+    char lastChar = array[lastIndex];\n+    requiresNewLine = lastChar != '\\n' && lastChar != '\\r';\n+  }\n+\n+  @Override\n+  public int read(char[] into, int offset, int length) throws IOException\n+  {\n+    int totalRead = 0;\n+    while (totalRead < length)\n     {\n-        if ( actual.hasNext() )\n+      int read = current.read(into, offset + totalRead, length - totalRead);\n+      if (read == -1)\n+      {\n+        if (totalRead > 0)\n         {\n-            if ( current != null )\n-            {\n-                previousPosition += current.position();\n-            }\n-            closeCurrent();\n-            current = actual.next();\n-            return true;\n+          // Something has been read, but we couldn't fulfill the request with the current source.\n+          // Return what we've read so far so that we don't mix multiple sources into the same read,\n+          // for source traceability reasons.\n+          return totalRead;\n         }\n-        return false;\n-    }\n \n-    @Override\n-    public SectionedCharBuffer read( SectionedCharBuffer buffer, int from ) throws IOException\n-    {\n-        while ( true )\n+        if (!goToNextSource())\n         {\n-            current.read( buffer, from );\n-            if ( buffer.hasAvailable() )\n-            {\n-                // OK we read something from the current reader\n-                checkNewLineRequirement( buffer.array(), buffer.front() - 1);\n-                return buffer;\n-            }\n-\n-            // Even if there's no line-ending at the end of this source we should introduce one\n-            // otherwise the last line of this source and the first line of the next source will\n-            // look like one long line.\n-            if ( requiresNewLine )\n-            {\n-                buffer.append( '\\n' );\n-                requiresNewLine = false;\n-                return buffer;\n-            }\n-\n-            if ( !goToNextSource() )\n-            {\n-                break;\n-            }\n-            from = buffer.pivot();\n+          break;\n         }\n-        return buffer;\n-    }\n \n-    private void checkNewLineRequirement( char[] array, int lastIndex )\n-    {\n-        char lastChar = array[lastIndex];\n-        requiresNewLine = lastChar != '\\n' && lastChar != '\\r';\n-    }\n-\n-    @Override\n-    public int read( char[] into, int offset, int length ) throws IOException\n-    {\n-        int totalRead = 0;\n-        while ( totalRead < length )\n+        if (requiresNewLine)\n         {\n-            int read = current.read( into, offset + totalRead, length - totalRead );\n-            if ( read == -1 )\n-            {\n-                if ( totalRead > 0 )\n-                {\n-                    // Something has been read, but we couldn't fulfill the request with the current source.\n-                    // Return what we've read so far so that we don't mix multiple sources into the same read,\n-                    // for source traceability reasons.\n-                    return totalRead;\n-                }\n-\n-                if ( !goToNextSource() )\n-                {\n-                    break;\n-                }\n-\n-                if ( requiresNewLine )\n-                {\n-                    into[offset + totalRead] = '\\n';\n-                    totalRead++;\n-                    requiresNewLine = false;\n-                }\n-            }\n-            else if ( read > 0 )\n-            {\n-                totalRead += read;\n-                checkNewLineRequirement( into, offset + totalRead - 1 );\n-            }\n+          into[offset + totalRead] = '\\n';\n+          totalRead++;\n+          requiresNewLine = false;\n         }\n-        return totalRead;\n-    }\n-\n-    @Override\n-    public long length()\n-    {\n-        return current.length();\n+      } else if (read > 0)\n+      {\n+        totalRead += read;\n+        checkNewLineRequirement(into, offset + totalRead - 1);\n+      }\n     }\n+    return totalRead;\n+  }\n+\n+  @Override\n+  public long length()\n+  {\n+    return current.length();\n+  }\n }\n",
            "diff_size": 185
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "154",
                    "column": "65",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3160/MultiReadable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3160/MultiReadable.java\nindex 97d79a3f915..7889adc2e3b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3160/MultiReadable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3160/MultiReadable.java\n@@ -79,7 +79,8 @@ public class MultiReadable implements CharReadable\n             {\n                 previousPosition += current.position();\n             }\n-            closeCurrent();\n+\n+closeCurrent();\n             current = actual.next();\n             return true;\n         }\n@@ -95,7 +96,7 @@ public class MultiReadable implements CharReadable\n             if ( buffer.hasAvailable() )\n             {\n                 // OK we read something from the current reader\n-                checkNewLineRequirement( buffer.array(), buffer.front() - 1);\n+                checkNewLineRequirement( buffer.array(), buffer.front() - 1 );\n                 return buffer;\n             }\n \n@@ -113,9 +114,11 @@ public class MultiReadable implements CharReadable\n             {\n                 break;\n             }\n-            from = buffer.pivot();\n+\n+from = buffer.pivot();\n         }\n-        return buffer;\n+\n+return buffer;\n     }\n \n     private void checkNewLineRequirement( char[] array, int lastIndex )\n@@ -148,15 +151,15 @@ public class MultiReadable implements CharReadable\n \n                 if ( requiresNewLine )\n                 {\n-                    into[offset + totalRead] = '\\n';\n-                    totalRead++;\n+                    into[offset + totalRead] = '\\n'; totalRead++;\n                     requiresNewLine = false;\n                 }\n             }\n             else if ( read > 0 )\n             {\n                 totalRead += read;\n-                checkNewLineRequirement( into, offset + totalRead - 1 );\n+\n+checkNewLineRequirement( into, offset + totalRead - 1 );\n             }\n         }\n         return totalRead;\n@@ -167,4 +170,4 @@ public class MultiReadable implements CharReadable\n     {\n         return current.length();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}