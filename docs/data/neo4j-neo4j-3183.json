{
    "project_name": "neo4j-neo4j",
    "error_id": "3183",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "46",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3183/FullTokenStream.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3183/FullTokenStream.java\nindex 61bacad4afc..8922cc764e2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3183/FullTokenStream.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3183/FullTokenStream.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api.scan;\n \n import java.io.IOException;\n@@ -32,38 +33,38 @@ import org.neo4j.storageengine.api.EntityTokenUpdate;\n \n /**\n  * {@link FullStoreChangeStream} using a {@link IndexStoreView} to get its data.\n- *\n+ * <p>\n  * Connects the provided {@link TokenScanWriter writer} to the receiving end of a full store scan,\n  * feeding {@link EntityTokenUpdate entity tokens} into the writer.\n  */\n-public abstract class FullTokenStream implements FullStoreChangeStream, Visitor<EntityTokenUpdate,IOException>\n+public abstract class FullTokenStream implements FullStoreChangeStream, Visitor<EntityTokenUpdate, IOException>\n {\n     private final IndexStoreView indexStoreView;\n     private TokenScanWriter writer;\n     private long count;\n \n-    FullTokenStream( IndexStoreView indexStoreView )\n+    FullTokenStream(IndexStoreView indexStoreView)\n     {\n         this.indexStoreView = indexStoreView;\n     }\n \n-    abstract StoreScan<IOException> getStoreScan( IndexStoreView indexStoreView, Visitor<EntityTokenUpdate,IOException> tokenUpdateVisitor,\n-            PageCursorTracer cursorTracer, MemoryTracker memoryTracker );\n+    abstract StoreScan<IOException> getStoreScan(IndexStoreView indexStoreView, Visitor<EntityTokenUpdate, IOException> tokenUpdateVisitor,\n+                                                 PageCursorTracer cursorTracer, MemoryTracker memoryTracker);\n \n     @Override\n-    public long applyTo( TokenScanWriter writer, PageCursorTracer cursorTracer, MemoryTracker memoryTracker ) throws IOException\n+    public long applyTo(TokenScanWriter writer, PageCursorTracer cursorTracer, MemoryTracker memoryTracker) throws IOException\n     {\n         // Keep the writer for using it in \"visit\"\n         this.writer = writer;\n-        StoreScan<IOException> scan = getStoreScan( indexStoreView, this, cursorTracer, memoryTracker );\n+        StoreScan<IOException> scan = getStoreScan(indexStoreView, this, cursorTracer, memoryTracker);\n         scan.run();\n         return count;\n     }\n \n     @Override\n-    public boolean visit( EntityTokenUpdate update ) throws IOException\n+    public boolean visit(EntityTokenUpdate update) throws IOException\n     {\n-        writer.write( update );\n+        writer.write(update);\n         count++;\n         return false;\n     }\n",
            "diff_size": 10
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}