{
    "project_name": "dzhw-metadatamanagement",
    "error_id": "35",
    "information": {
        "errors": [
            {
                "line": "84",
                "column": "59",
                "severity": "error",
                "message": "'}' at column 59 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "    @Override\n    public void afterHandshake(ServerHttpRequest request, ServerHttpResponse response,\n        WebSocketHandler wsHandler, Exception exception) {}\n  }\n}",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "84",
                    "column": "59",
                    "severity": "error",
                    "message": "'}' at column 59 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "85",
                    "severity": "error",
                    "message": "'class def rcurly' has incorrect indentation level 6, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/35/WebSocketConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/styler/35/WebSocketConfig.java\nindex bba6439fb0d..88f13d24731 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/35/WebSocketConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/styler/35/WebSocketConfig.java\n@@ -82,5 +82,5 @@ public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {\n     @Override\n     public void afterHandshake(ServerHttpRequest request, ServerHttpResponse response,\n         WebSocketHandler wsHandler, Exception exception) {}\n-  }\n+      }\n }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/35/WebSocketConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/intellij/35/WebSocketConfig.java\nindex bba6439fb0d..93adcdccba7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/35/WebSocketConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/intellij/35/WebSocketConfig.java\n@@ -19,7 +19,7 @@ import org.springframework.web.socket.server.HandshakeInterceptor;\n \n /**\n  * Configuration for websockets.\n- * \n+ *\n  * @author Ren\u00e9 Reitmann\n  */\n @Configuration\n@@ -71,7 +71,8 @@ public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {\n   private static class WebsocketHandshakeInterceptor implements HandshakeInterceptor {\n     @Override\n     public boolean beforeHandshake(ServerHttpRequest request, ServerHttpResponse response,\n-        WebSocketHandler wsHandler, Map<String, Object> attributes) throws Exception {\n+                                   WebSocketHandler wsHandler, Map<String, Object> attributes)\n+        throws Exception {\n       if (request instanceof ServletServerHttpRequest) {\n         ServletServerHttpRequest servletRequest = (ServletServerHttpRequest) request;\n         attributes.put(IP_ADDRESS, servletRequest.getRemoteAddress().getAddress());\n@@ -81,6 +82,7 @@ public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {\n \n     @Override\n     public void afterHandshake(ServerHttpRequest request, ServerHttpResponse response,\n-        WebSocketHandler wsHandler, Exception exception) {}\n+                               WebSocketHandler wsHandler, Exception exception) {\n+    }\n   }\n }\n",
            "diff_size": 5
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "84",
                    "column": "59",
                    "severity": "error",
                    "message": "'}' at column 59 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/35/WebSocketConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/naturalize/35/WebSocketConfig.java\nindex bba6439fb0d..5c899fe42f3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/35/WebSocketConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/naturalize/35/WebSocketConfig.java\n@@ -83,4 +83,4 @@ public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {\n     public void afterHandshake(ServerHttpRequest request, ServerHttpResponse response,\n         WebSocketHandler wsHandler, Exception exception) {}\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "39",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "44",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 169).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "58",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "'ServerHttpResponse' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "89",
                    "severity": "error",
                    "message": "'ServerHttpResponse' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/35/WebSocketConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/codebuff/35/WebSocketConfig.java\nindex bba6439fb0d..703ec3d6be6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/35/WebSocketConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/codebuff/35/WebSocketConfig.java\n@@ -1,7 +1,6 @@\n package eu.dzhw.fdz.metadatamanagement.common.config;\n \n import java.util.Map;\n-\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n@@ -22,10 +21,11 @@ import org.springframework.web.socket.server.HandshakeInterceptor;\n  * \n  * @author Ren\u00e9 Reitmann\n  */\n+\n+\n @Configuration\n @EnableWebSocketMessageBroker\n public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {\n-\n   public static final String IP_ADDRESS = \"IP_ADDRESS\";\n \n   @Autowired\n@@ -36,30 +36,29 @@ public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {\n \n   @Override\n   public void configureMessageBroker(MessageBrokerRegistry config) {\n-    if (env.acceptsProfiles(\n-        Profiles.of(Constants.SPRING_PROFILE_LOCAL, Constants.SPRING_PROFILE_UNITTEST))) {\n+    if (env.acceptsProfiles(Profiles.of(Constants.SPRING_PROFILE_LOCAL, Constants.SPRING_PROFILE_UNITTEST))) {\n       config.enableSimpleBroker(\"/topic\", \"/queue\");\n     } else {\n-      config.enableStompBrokerRelay(\"/topic\", \"/queue\")\n-          .setRelayHost(properties.getRabbitmq().getHost())\n-          .setVirtualHost(properties.getRabbitmq().getVirtualHost())\n-          .setSystemPasscode(properties.getRabbitmq().getPassword())\n-          .setSystemLogin(properties.getRabbitmq().getUsername())\n-          .setClientLogin(properties.getRabbitmq().getUsername())\n-          .setClientPasscode(properties.getRabbitmq().getPassword());\n+      config.enableStompBrokerRelay(\"/topic\", \"/queue\").setRelayHost(properties.getRabbitmq().getHost())\n+                                                       .setVirtualHost(properties.getRabbitmq().getVirtualHost())\n+                                                       .setSystemPasscode(properties.getRabbitmq().getPassword())\n+                                                       .setSystemLogin(properties.getRabbitmq().getUsername())\n+                                                       .setClientLogin(properties.getRabbitmq().getUsername()).setClientPasscode(properties.getRabbitmq().getPassword());\n     }\n     config.setApplicationDestinationPrefixes(\"/metadatamanagement\");\n   }\n \n+\n   @Override\n   public void registerStompEndpoints(StompEndpointRegistry registry) {\n-    registry.addEndpoint(\"/websocket\")\n-        .setAllowedOrigins(properties.getWebsockets().getAllowedOrigins().toArray(new String[0]))\n-        .withSockJS().setSessionCookieNeeded(false)\n-        .setClientLibraryUrl(\"/bower_components/sockjs-client/dist/sockjs.min.js\")\n-        .setInterceptors(websocketHandshakeInterceptor());\n+    registry.addEndpoint(\"/websocket\").setAllowedOrigins(properties.getWebsockets().getAllowedOrigins()\n+                                                                                   .toArray(new String[0]))\n+                                      .withSockJS()\n+                                      .setSessionCookieNeeded(false)\n+                                      .setClientLibraryUrl(\"/bower_components/sockjs-client/dist/sockjs.min.js\").setInterceptors(websocketHandshakeInterceptor());\n   }\n \n+\n   @Bean\n   public HandshakeInterceptor websocketHandshakeInterceptor() {\n     return new WebsocketHandshakeInterceptor();\n@@ -68,19 +67,29 @@ public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {\n   /**\n    * Add remote ip address to websocket session.\n    */\n+\n   private static class WebsocketHandshakeInterceptor implements HandshakeInterceptor {\n+\n     @Override\n-    public boolean beforeHandshake(ServerHttpRequest request, ServerHttpResponse response,\n-        WebSocketHandler wsHandler, Map<String, Object> attributes) throws Exception {\n+    public boolean beforeHandshake(ServerHttpRequest request,\n+      ServerHttpResponse response,\n+        WebSocketHandler wsHandler,\n+          Map<String, Object> attributes) throws Exception {\n       if (request instanceof ServletServerHttpRequest) {\n         ServletServerHttpRequest servletRequest = (ServletServerHttpRequest) request;\n         attributes.put(IP_ADDRESS, servletRequest.getRemoteAddress().getAddress());\n       }\n+\n       return true;\n     }\n \n+\n     @Override\n-    public void afterHandshake(ServerHttpRequest request, ServerHttpResponse response,\n-        WebSocketHandler wsHandler, Exception exception) {}\n+    public void afterHandshake(ServerHttpRequest request,\n+      ServerHttpResponse response,\n+        WebSocketHandler wsHandler,\n+          Exception exception) {\n+\n+    }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 35
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "84",
                    "column": "59",
                    "severity": "error",
                    "message": "'}' at column 59 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "85",
                    "severity": "error",
                    "message": "'class def rcurly' has incorrect indentation level 6, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/35/WebSocketConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/styler_random/35/WebSocketConfig.java\nindex bba6439fb0d..88f13d24731 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/35/WebSocketConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/styler_random/35/WebSocketConfig.java\n@@ -82,5 +82,5 @@ public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {\n     @Override\n     public void afterHandshake(ServerHttpRequest request, ServerHttpResponse response,\n         WebSocketHandler wsHandler, Exception exception) {}\n-  }\n+      }\n }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "84",
                    "column": "59",
                    "severity": "error",
                    "message": "'}' at column 59 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "85",
                    "severity": "error",
                    "message": "'class def rcurly' has incorrect indentation level 6, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/35/WebSocketConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/styler_three_grams/35/WebSocketConfig.java\nindex bba6439fb0d..88f13d24731 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/35/WebSocketConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/styler_three_grams/35/WebSocketConfig.java\n@@ -82,5 +82,5 @@ public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {\n     @Override\n     public void afterHandshake(ServerHttpRequest request, ServerHttpResponse response,\n         WebSocketHandler wsHandler, Exception exception) {}\n-  }\n+      }\n }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}