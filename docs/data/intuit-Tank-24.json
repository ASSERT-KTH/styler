{
    "project_name": "intuit-Tank",
    "error_id": "24",
    "information": {
        "errors": [
            {
                "line": "111",
                "column": "29",
                "severity": "warning",
                "message": "'}' at column 29 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "                                g.setColor(lhi.getColor());\n                                g.fillRect(0, y, textArea.getWidth(), lineHeight);\n                            }\n                            else {\n                                break; // Out of visible rect\n                            }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/24/LineHighlightManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/24/LineHighlightManager.java\nindex 8829c644574..81c022b97a6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/24/LineHighlightManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/24/LineHighlightManager.java\n@@ -108,8 +108,7 @@ class LineHighlightManager {\n                             if (y < vr.y + vr.height) {\n                                 g.setColor(lhi.getColor());\n                                 g.fillRect(0, y, textArea.getWidth(), lineHeight);\n-                            }\n-                            else {\n+                            } else {\n                                 break; // Out of visible rect\n                             }\n                         }\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/24/LineHighlightManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/24/LineHighlightManager.java\nindex 8829c644574..b3e1c13b613 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/24/LineHighlightManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/24/LineHighlightManager.java\n@@ -20,6 +20,7 @@\n  * License along with this library; if not, write to the Free Software\n  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA.\n  */\n+\n package org.fife.ui.rtextarea;\n \n import java.awt.Color;\n@@ -33,189 +34,181 @@ import javax.swing.text.Position;\n \n /**\n  * Manages line highlights in an <code>RTextArea</code>.\n- * \n+ *\n  * @author Robert Futrell\n  * @version 1.0\n  */\n class LineHighlightManager {\n \n-    private RTextArea textArea;\n-    private List lineHighlights;\n-\n-    /**\n-     * Constructor.\n-     * \n-     * @param textArea\n-     *            The parent text area.\n-     */\n-    public LineHighlightManager(RTextArea textArea) {\n-        this.textArea = textArea;\n+  private RTextArea textArea;\n+  private List lineHighlights;\n+\n+  /**\n+   * Constructor.\n+   *\n+   * @param textArea The parent text area.\n+   */\n+  public LineHighlightManager(RTextArea textArea) {\n+    this.textArea = textArea;\n+  }\n+\n+  /**\n+   * Highlights the specified line.\n+   *\n+   * @param line  The line to highlight.\n+   * @param color The color to highlight with.\n+   * @return A tag for the highlight.\n+   * @throws BadLocationException If <code>line</code> is not a valid line number.\n+   * @see #removeLineHighlight(Object)\n+   */\n+  public Object addLineHighlight(int line, Color color)\n+    throws BadLocationException {\n+    int offs = textArea.getLineStartOffset(line);\n+    LineHighlightInfo lhi = new LineHighlightInfo(\n+      textArea.getDocument().createPosition(offs), color);\n+    if (lineHighlights == null) {\n+      lineHighlights = new ArrayList(1);\n     }\n-\n-    /**\n-     * Highlights the specified line.\n-     * \n-     * @param line\n-     *            The line to highlight.\n-     * @param color\n-     *            The color to highlight with.\n-     * @return A tag for the highlight.\n-     * @throws BadLocationException\n-     *             If <code>line</code> is not a valid line number.\n-     * @see #removeLineHighlight(Object)\n-     */\n-    public Object addLineHighlight(int line, Color color)\n-            throws BadLocationException {\n-        int offs = textArea.getLineStartOffset(line);\n-        LineHighlightInfo lhi = new LineHighlightInfo(\n-                textArea.getDocument().createPosition(offs), color);\n-        if (lineHighlights == null) {\n-            lineHighlights = new ArrayList(1);\n-        }\n-        int index = Collections.binarySearch(lineHighlights, lhi);\n-        if (index < 0) { // Common case\n-            index = -(index + 1);\n-        }\n-        lineHighlights.add(index, lhi);\n-        repaintLine(lhi);\n-        return lhi;\n+    int index = Collections.binarySearch(lineHighlights, lhi);\n+    if (index < 0) { // Common case\n+      index = -(index + 1);\n     }\n-\n-    /**\n-     * Paints any highlighted lines in the specified line range.\n-     * \n-     * @param g\n-     *            The graphics context.\n-     */\n-    public void paintLineHighlights(Graphics g) {\n-\n-        int count = lineHighlights == null ? 0 : lineHighlights.size();\n-        if (count > 0) {\n-\n-            int docLen = textArea.getDocument().getLength();\n-            Rectangle vr = textArea.getVisibleRect();\n-            int lineHeight = textArea.getLineHeight();\n-\n-            try {\n-\n-                for (int i = 0; i < count; i++) {\n-                    LineHighlightInfo lhi = (LineHighlightInfo)\n-                            lineHighlights.get(i);\n-                    int offs = lhi.getOffset();\n-                    if (offs >= 0 && offs <= docLen) {\n-                        int y = textArea.yForLineContaining(offs);\n-                        if (y > vr.y - lineHeight) {\n-                            if (y < vr.y + vr.height) {\n-                                g.setColor(lhi.getColor());\n-                                g.fillRect(0, y, textArea.getWidth(), lineHeight);\n-                            }\n-                            else {\n-                                break; // Out of visible rect\n-                            }\n-                        }\n-                    }\n-                }\n-\n-            } catch (BadLocationException ble) { // Never happens\n-                ble.printStackTrace();\n+    lineHighlights.add(index, lhi);\n+    repaintLine(lhi);\n+    return lhi;\n+  }\n+\n+  /**\n+   * Paints any highlighted lines in the specified line range.\n+   *\n+   * @param g The graphics context.\n+   */\n+  public void paintLineHighlights(Graphics g) {\n+\n+    int count = lineHighlights == null ? 0 : lineHighlights.size();\n+    if (count > 0) {\n+\n+      int docLen = textArea.getDocument().getLength();\n+      Rectangle vr = textArea.getVisibleRect();\n+      int lineHeight = textArea.getLineHeight();\n+\n+      try {\n+\n+        for (int i = 0; i < count; i++) {\n+          LineHighlightInfo lhi = (LineHighlightInfo)\n+            lineHighlights.get(i);\n+          int offs = lhi.getOffset();\n+          if (offs >= 0 && offs <= docLen) {\n+            int y = textArea.yForLineContaining(offs);\n+            if (y > vr.y - lineHeight) {\n+              if (y < vr.y + vr.height) {\n+                g.setColor(lhi.getColor());\n+                g.fillRect(0, y, textArea.getWidth(), lineHeight);\n+              } else {\n+                break; // Out of visible rect\n+              }\n             }\n+          }\n         }\n \n+      } catch (BadLocationException ble) { // Never happens\n+        ble.printStackTrace();\n+      }\n     }\n \n-    /**\n-     * Removes all line highlights.\n-     * \n-     * @see #removeLineHighlight(Object)\n-     */\n-    public void removeAllLineHighlights() {\n-        if (lineHighlights != null) {\n-            lineHighlights.clear();\n-            textArea.repaint();\n-        }\n+  }\n+\n+  /**\n+   * Removes all line highlights.\n+   *\n+   * @see #removeLineHighlight(Object)\n+   */\n+  public void removeAllLineHighlights() {\n+    if (lineHighlights != null) {\n+      lineHighlights.clear();\n+      textArea.repaint();\n     }\n-\n-    /**\n-     * Removes a line highlight.\n-     * \n-     * @param tag\n-     *            The tag of the line highlight to remove.\n-     * @see #addLineHighlight(int, Color)\n-     */\n-    public void removeLineHighlight(Object tag) {\n-        if (tag instanceof LineHighlightInfo) {\n-            lineHighlights.remove(tag);\n-            repaintLine((LineHighlightInfo) tag);\n-        }\n+  }\n+\n+  /**\n+   * Removes a line highlight.\n+   *\n+   * @param tag The tag of the line highlight to remove.\n+   * @see #addLineHighlight(int, Color)\n+   */\n+  public void removeLineHighlight(Object tag) {\n+    if (tag instanceof LineHighlightInfo) {\n+      lineHighlights.remove(tag);\n+      repaintLine((LineHighlightInfo) tag);\n     }\n-\n-    /**\n-     * Repaints the line pointed to by the specified highlight information.\n-     * \n-     * @param lhi\n-     *            The highlight information.\n-     */\n-    private void repaintLine(LineHighlightInfo lhi) {\n-        int offs = lhi.getOffset();\n-        // May be > length if they deleted text including the highlight\n-        if (offs >= 0 && offs <= textArea.getDocument().getLength()) {\n-            try {\n-                int y = textArea.yForLineContaining(offs);\n-                if (y > -1) {\n-                    textArea.repaint(0, y,\n-                            textArea.getWidth(), textArea.getLineHeight());\n-                }\n-            } catch (BadLocationException ble) {\n-                ble.printStackTrace(); // Never happens\n-            }\n+  }\n+\n+  /**\n+   * Repaints the line pointed to by the specified highlight information.\n+   *\n+   * @param lhi The highlight information.\n+   */\n+  private void repaintLine(LineHighlightInfo lhi) {\n+    int offs = lhi.getOffset();\n+    // May be > length if they deleted text including the highlight\n+    if (offs >= 0 && offs <= textArea.getDocument().getLength()) {\n+      try {\n+        int y = textArea.yForLineContaining(offs);\n+        if (y > -1) {\n+          textArea.repaint(0, y,\n+            textArea.getWidth(), textArea.getLineHeight());\n         }\n+      } catch (BadLocationException ble) {\n+        ble.printStackTrace(); // Never happens\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Information about a line highlight.\n+   *\n+   * @author Robert Futrell\n+   * @version 1.0\n+   */\n+  private static class LineHighlightInfo implements Comparable {\n+\n+    private Position offs;\n+    private Color color;\n+\n+    public LineHighlightInfo(Position offs, Color c) {\n+      this.offs = offs;\n+      this.color = c;\n     }\n \n-    /**\n-     * Information about a line highlight.\n-     * \n-     * @author Robert Futrell\n-     * @version 1.0\n-     */\n-    private static class LineHighlightInfo implements Comparable {\n-\n-        private Position offs;\n-        private Color color;\n-\n-        public LineHighlightInfo(Position offs, Color c) {\n-            this.offs = offs;\n-            this.color = c;\n-        }\n-\n-        public int compareTo(Object o) {\n-            if (o instanceof LineHighlightInfo) {\n-                return offs.getOffset() - ((LineHighlightInfo) o).getOffset();\n-            }\n-            return -1;\n-        }\n-\n-        public boolean equals(Object o) {\n-            if (o == this) {\n-                return true;\n-            }\n-            if (o instanceof LineHighlightInfo) {\n-                return offs.getOffset() == ((LineHighlightInfo) o).getOffset();\n-            }\n-            return false;\n-        }\n+    public int compareTo(Object o) {\n+      if (o instanceof LineHighlightInfo) {\n+        return offs.getOffset() - ((LineHighlightInfo) o).getOffset();\n+      }\n+      return -1;\n+    }\n \n-        public Color getColor() {\n-            return color;\n-        }\n+    public boolean equals(Object o) {\n+      if (o == this) {\n+        return true;\n+      }\n+      if (o instanceof LineHighlightInfo) {\n+        return offs.getOffset() == ((LineHighlightInfo) o).getOffset();\n+      }\n+      return false;\n+    }\n \n-        public int getOffset() {\n-            return offs.getOffset();\n-        }\n+    public Color getColor() {\n+      return color;\n+    }\n \n-        public int hashCode() {\n-            return getOffset();\n-        }\n+    public int getOffset() {\n+      return offs.getOffset();\n+    }\n \n+    public int hashCode() {\n+      return getOffset();\n     }\n \n+  }\n+\n }\n\\ No newline at end of file\n",
            "diff_size": 215
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/24/LineHighlightManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/24/LineHighlightManager.java\nindex 8829c644574..e570332a80e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/24/LineHighlightManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/24/LineHighlightManager.java\n@@ -22,6 +22,8 @@\n  */\n package org.fife.ui.rtextarea;\n \n+\n+\n import java.awt.Color;\n import java.awt.Graphics;\n import java.awt.Rectangle;\n@@ -37,6 +39,8 @@ import javax.swing.text.Position;\n  * @author Robert Futrell\n  * @version 1.0\n  */\n+\n+\n class LineHighlightManager {\n \n     private RTextArea textArea;\n@@ -48,6 +52,7 @@ class LineHighlightManager {\n      * @param textArea\n      *            The parent text area.\n      */\n+\n     public LineHighlightManager(RTextArea textArea) {\n         this.textArea = textArea;\n     }\n@@ -64,11 +69,12 @@ class LineHighlightManager {\n      *             If <code>line</code> is not a valid line number.\n      * @see #removeLineHighlight(Object)\n      */\n-    public Object addLineHighlight(int line, Color color)\n-            throws BadLocationException {\n+\n+\n+    public Object addLineHighlight(int line, Color color) throws BadLocationException {\n         int offs = textArea.getLineStartOffset(line);\n-        LineHighlightInfo lhi = new LineHighlightInfo(\n-                textArea.getDocument().createPosition(offs), color);\n+        LineHighlightInfo lhi = new LineHighlightInfo(textArea.getDocument().createPosition(offs),\n+            color);\n         if (lineHighlights == null) {\n             lineHighlights = new ArrayList(1);\n         }\n@@ -87,20 +93,17 @@ class LineHighlightManager {\n      * @param g\n      *            The graphics context.\n      */\n-    public void paintLineHighlights(Graphics g) {\n \n+\n+    public void paintLineHighlights(Graphics g) {\n         int count = lineHighlights == null ? 0 : lineHighlights.size();\n         if (count > 0) {\n-\n             int docLen = textArea.getDocument().getLength();\n             Rectangle vr = textArea.getVisibleRect();\n             int lineHeight = textArea.getLineHeight();\n-\n             try {\n-\n                 for (int i = 0; i < count; i++) {\n-                    LineHighlightInfo lhi = (LineHighlightInfo)\n-                            lineHighlights.get(i);\n+                    LineHighlightInfo lhi = (LineHighlightInfo) lineHighlights.get(i);\n                     int offs = lhi.getOffset();\n                     if (offs >= 0 && offs <= docLen) {\n                         int y = textArea.yForLineContaining(offs);\n@@ -108,19 +111,16 @@ class LineHighlightManager {\n                             if (y < vr.y + vr.height) {\n                                 g.setColor(lhi.getColor());\n                                 g.fillRect(0, y, textArea.getWidth(), lineHeight);\n-                            }\n-                            else {\n+                            } else {\n                                 break; // Out of visible rect\n                             }\n                         }\n                     }\n                 }\n-\n             } catch (BadLocationException ble) { // Never happens\n                 ble.printStackTrace();\n             }\n         }\n-\n     }\n \n     /**\n@@ -128,6 +128,8 @@ class LineHighlightManager {\n      * \n      * @see #removeLineHighlight(Object)\n      */\n+\n+\n     public void removeAllLineHighlights() {\n         if (lineHighlights != null) {\n             lineHighlights.clear();\n@@ -142,6 +144,8 @@ class LineHighlightManager {\n      *            The tag of the line highlight to remove.\n      * @see #addLineHighlight(int, Color)\n      */\n+\n+\n     public void removeLineHighlight(Object tag) {\n         if (tag instanceof LineHighlightInfo) {\n             lineHighlights.remove(tag);\n@@ -155,6 +159,7 @@ class LineHighlightManager {\n      * @param lhi\n      *            The highlight information.\n      */\n+\n     private void repaintLine(LineHighlightInfo lhi) {\n         int offs = lhi.getOffset();\n         // May be > length if they deleted text including the highlight\n@@ -162,8 +167,7 @@ class LineHighlightManager {\n             try {\n                 int y = textArea.yForLineContaining(offs);\n                 if (y > -1) {\n-                    textArea.repaint(0, y,\n-                            textArea.getWidth(), textArea.getLineHeight());\n+                    textArea.repaint(0, y, textArea.getWidth(), textArea.getLineHeight());\n                 }\n             } catch (BadLocationException ble) {\n                 ble.printStackTrace(); // Never happens\n@@ -177,6 +181,7 @@ class LineHighlightManager {\n      * @author Robert Futrell\n      * @version 1.0\n      */\n+\n     private static class LineHighlightInfo implements Comparable {\n \n         private Position offs;\n@@ -187,6 +192,7 @@ class LineHighlightManager {\n             this.color = c;\n         }\n \n+\n         public int compareTo(Object o) {\n             if (o instanceof LineHighlightInfo) {\n                 return offs.getOffset() - ((LineHighlightInfo) o).getOffset();\n@@ -194,6 +200,7 @@ class LineHighlightManager {\n             return -1;\n         }\n \n+\n         public boolean equals(Object o) {\n             if (o == this) {\n                 return true;\n@@ -204,14 +211,17 @@ class LineHighlightManager {\n             return false;\n         }\n \n+\n         public Color getColor() {\n             return color;\n         }\n \n+\n         public int getOffset() {\n             return offs.getOffset();\n         }\n \n+\n         public int hashCode() {\n             return getOffset();\n         }\n",
            "diff_size": 35
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/24/LineHighlightManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/24/LineHighlightManager.java\nindex 8829c644574..81c022b97a6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/24/LineHighlightManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/24/LineHighlightManager.java\n@@ -108,8 +108,7 @@ class LineHighlightManager {\n                             if (y < vr.y + vr.height) {\n                                 g.setColor(lhi.getColor());\n                                 g.fillRect(0, y, textArea.getWidth(), lineHeight);\n-                            }\n-                            else {\n+                            } else {\n                                 break; // Out of visible rect\n                             }\n                         }\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/24/LineHighlightManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/24/LineHighlightManager.java\nindex 8829c644574..81c022b97a6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/24/LineHighlightManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/24/LineHighlightManager.java\n@@ -108,8 +108,7 @@ class LineHighlightManager {\n                             if (y < vr.y + vr.height) {\n                                 g.setColor(lhi.getColor());\n                                 g.fillRect(0, y, textArea.getWidth(), lineHeight);\n-                            }\n-                            else {\n+                            } else {\n                                 break; // Out of visible rect\n                             }\n                         }\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}