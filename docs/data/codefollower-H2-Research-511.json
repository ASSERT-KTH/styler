{
    "project_name": "codefollower-H2-Research",
    "error_id": "511",
    "information": {
        "errors": [
            {
                "line": "35",
                "column": "9",
                "severity": "warning",
                "message": "'if' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "        long longValue = sequence.getNext(session);\n        Value value;\n        if(sequence.getDatabase().getMode().decimalSequences) {\n            value = ValueDecimal.get(BigDecimal.valueOf(longValue));\n        } else {\n            value = ValueLong.get(longValue);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/511/SequenceValue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/511/SequenceValue.java\nindex bdf2482e712..b1a7343a1fa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/511/SequenceValue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/511/SequenceValue.java\n@@ -32,7 +32,7 @@ public class SequenceValue extends Expression {\n     public Value getValue(Session session) {\n         long longValue = sequence.getNext(session);\n         Value value;\n-        if(sequence.getDatabase().getMode().decimalSequences) {\n+        if (sequence.getDatabase().getMode().decimalSequences) {\n             value = ValueDecimal.get(BigDecimal.valueOf(longValue));\n         } else {\n             value = ValueLong.get(longValue);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/511/SequenceValue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/511/SequenceValue.java\nindex bdf2482e712..aeab37a21a4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/511/SequenceValue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/511/SequenceValue.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.expression;\n \n import org.h2.engine.Session;\n@@ -22,84 +23,84 @@ import java.math.BigDecimal;\n  */\n public class SequenceValue extends Expression {\n \n-    private final Sequence sequence;\n+  private final Sequence sequence;\n \n-    public SequenceValue(Sequence sequence) {\n-        this.sequence = sequence;\n-    }\n+  public SequenceValue(Sequence sequence) {\n+    this.sequence = sequence;\n+  }\n \n-    @Override\n-    public Value getValue(Session session) {\n-        long longValue = sequence.getNext(session);\n-        Value value;\n-        if(sequence.getDatabase().getMode().decimalSequences) {\n-            value = ValueDecimal.get(BigDecimal.valueOf(longValue));\n-        } else {\n-            value = ValueLong.get(longValue);\n-        }\n-        session.setLastIdentity(value);\n-        return value;\n+  @Override\n+  public Value getValue(Session session) {\n+    long longValue = sequence.getNext(session);\n+    Value value;\n+    if (sequence.getDatabase().getMode().decimalSequences) {\n+      value = ValueDecimal.get(BigDecimal.valueOf(longValue));\n+    } else {\n+      value = ValueLong.get(longValue);\n     }\n+    session.setLastIdentity(value);\n+    return value;\n+  }\n \n-    @Override\n-    public TypeInfo getType() {\n-        return sequence.getDatabase().getMode().decimalSequences ? TypeInfo.TYPE_DECIMAL : TypeInfo.TYPE_LONG;\n-    }\n+  @Override\n+  public TypeInfo getType() {\n+    return sequence.getDatabase().getMode().decimalSequences ? TypeInfo.TYPE_DECIMAL : TypeInfo.TYPE_LONG;\n+  }\n \n-    @Override\n-    public void mapColumns(ColumnResolver resolver, int level, int state) {\n-        // nothing to do\n-    }\n+  @Override\n+  public void mapColumns(ColumnResolver resolver, int level, int state) {\n+    // nothing to do\n+  }\n \n-    @Override\n-    public Expression optimize(Session session) {\n-        return this;\n-    }\n+  @Override\n+  public Expression optimize(Session session) {\n+    return this;\n+  }\n \n-    @Override\n-    public void setEvaluatable(TableFilter tableFilter, boolean b) {\n-        // nothing to do\n-    }\n+  @Override\n+  public void setEvaluatable(TableFilter tableFilter, boolean b) {\n+    // nothing to do\n+  }\n \n-    @Override\n-    public StringBuilder getSQL(StringBuilder builder, boolean alwaysQuote) {\n-        builder.append(\"(NEXT VALUE FOR \");\n-        return sequence.getSQL(builder, alwaysQuote).append(')');\n-    }\n+  @Override\n+  public StringBuilder getSQL(StringBuilder builder, boolean alwaysQuote) {\n+    builder.append(\"(NEXT VALUE FOR \");\n+    return sequence.getSQL(builder, alwaysQuote).append(')');\n+  }\n \n-    @Override\n-    public void updateAggregate(Session session, int stage) {\n-        // nothing to do\n-    }\n+  @Override\n+  public void updateAggregate(Session session, int stage) {\n+    // nothing to do\n+  }\n \n-    @Override\n-    public boolean isEverything(ExpressionVisitor visitor) {\n-        switch (visitor.getType()) {\n-        case ExpressionVisitor.EVALUATABLE:\n-        case ExpressionVisitor.OPTIMIZABLE_AGGREGATE:\n-        case ExpressionVisitor.NOT_FROM_RESOLVER:\n-        case ExpressionVisitor.GET_COLUMNS1:\n-        case ExpressionVisitor.GET_COLUMNS2:\n-            return true;\n-        case ExpressionVisitor.DETERMINISTIC:\n-        case ExpressionVisitor.READONLY:\n-        case ExpressionVisitor.INDEPENDENT:\n-        case ExpressionVisitor.QUERY_COMPARABLE:\n-            return false;\n-        case ExpressionVisitor.SET_MAX_DATA_MODIFICATION_ID:\n-            visitor.addDataModificationId(sequence.getModificationId());\n-            return true;\n-        case ExpressionVisitor.GET_DEPENDENCIES:\n-            visitor.addDependency(sequence);\n-            return true;\n-        default:\n-            throw DbException.throwInternalError(\"type=\"+visitor.getType());\n-        }\n+  @Override\n+  public boolean isEverything(ExpressionVisitor visitor) {\n+    switch (visitor.getType()) {\n+      case ExpressionVisitor.EVALUATABLE:\n+      case ExpressionVisitor.OPTIMIZABLE_AGGREGATE:\n+      case ExpressionVisitor.NOT_FROM_RESOLVER:\n+      case ExpressionVisitor.GET_COLUMNS1:\n+      case ExpressionVisitor.GET_COLUMNS2:\n+        return true;\n+      case ExpressionVisitor.DETERMINISTIC:\n+      case ExpressionVisitor.READONLY:\n+      case ExpressionVisitor.INDEPENDENT:\n+      case ExpressionVisitor.QUERY_COMPARABLE:\n+        return false;\n+      case ExpressionVisitor.SET_MAX_DATA_MODIFICATION_ID:\n+        visitor.addDataModificationId(sequence.getModificationId());\n+        return true;\n+      case ExpressionVisitor.GET_DEPENDENCIES:\n+        visitor.addDependency(sequence);\n+        return true;\n+      default:\n+        throw DbException.throwInternalError(\"type=\" + visitor.getType());\n     }\n+  }\n \n-    @Override\n-    public int getCost() {\n-        return 1;\n-    }\n+  @Override\n+  public int getCost() {\n+    return 1;\n+  }\n \n }\n",
            "diff_size": 72
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/511/SequenceValue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/511/SequenceValue.java\nindex bdf2482e712..ecd7018b171 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/511/SequenceValue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/511/SequenceValue.java\n@@ -32,7 +32,7 @@ public class SequenceValue extends Expression {\n     public Value getValue(Session session) {\n         long longValue = sequence.getNext(session);\n         Value value;\n-        if(sequence.getDatabase().getMode().decimalSequences) {\n+        if (sequence.getDatabase().getMode().decimalSequences) {\n             value = ValueDecimal.get(BigDecimal.valueOf(longValue));\n         } else {\n             value = ValueLong.get(longValue);\n@@ -102,4 +102,4 @@ public class SequenceValue extends Expression {\n         return 1;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/511/SequenceValue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/511/SequenceValue.java\nindex bdf2482e712..2c98aa0b493 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/511/SequenceValue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/511/SequenceValue.java\n@@ -14,12 +14,13 @@ import org.h2.value.TypeInfo;\n import org.h2.value.Value;\n import org.h2.value.ValueDecimal;\n import org.h2.value.ValueLong;\n-\n import java.math.BigDecimal;\n \n /**\n  * Wraps a sequence when used in a statement.\n  */\n+\n+\n public class SequenceValue extends Expression {\n \n     private final Sequence sequence;\n@@ -32,7 +33,7 @@ public class SequenceValue extends Expression {\n     public Value getValue(Session session) {\n         long longValue = sequence.getNext(session);\n         Value value;\n-        if(sequence.getDatabase().getMode().decimalSequences) {\n+        if (sequence.getDatabase().getMode().decimalSequences) {\n             value = ValueDecimal.get(BigDecimal.valueOf(longValue));\n         } else {\n             value = ValueLong.get(longValue);\n@@ -49,6 +50,7 @@ public class SequenceValue extends Expression {\n     @Override\n     public void mapColumns(ColumnResolver resolver, int level, int state) {\n         // nothing to do\n+\n     }\n \n     @Override\n@@ -59,6 +61,7 @@ public class SequenceValue extends Expression {\n     @Override\n     public void setEvaluatable(TableFilter tableFilter, boolean b) {\n         // nothing to do\n+\n     }\n \n     @Override\n@@ -70,6 +73,7 @@ public class SequenceValue extends Expression {\n     @Override\n     public void updateAggregate(Session session, int stage) {\n         // nothing to do\n+\n     }\n \n     @Override\n@@ -93,7 +97,7 @@ public class SequenceValue extends Expression {\n             visitor.addDependency(sequence);\n             return true;\n         default:\n-            throw DbException.throwInternalError(\"type=\"+visitor.getType());\n+            throw DbException.throwInternalError(\"type=\" + visitor.getType());\n         }\n     }\n \n@@ -102,4 +106,4 @@ public class SequenceValue extends Expression {\n         return 1;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/511/SequenceValue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/511/SequenceValue.java\nindex bdf2482e712..b1a7343a1fa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/511/SequenceValue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/511/SequenceValue.java\n@@ -32,7 +32,7 @@ public class SequenceValue extends Expression {\n     public Value getValue(Session session) {\n         long longValue = sequence.getNext(session);\n         Value value;\n-        if(sequence.getDatabase().getMode().decimalSequences) {\n+        if (sequence.getDatabase().getMode().decimalSequences) {\n             value = ValueDecimal.get(BigDecimal.valueOf(longValue));\n         } else {\n             value = ValueLong.get(longValue);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/511/SequenceValue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/511/SequenceValue.java\nindex bdf2482e712..b1a7343a1fa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/511/SequenceValue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/511/SequenceValue.java\n@@ -32,7 +32,7 @@ public class SequenceValue extends Expression {\n     public Value getValue(Session session) {\n         long longValue = sequence.getNext(session);\n         Value value;\n-        if(sequence.getDatabase().getMode().decimalSequences) {\n+        if (sequence.getDatabase().getMode().decimalSequences) {\n             value = ValueDecimal.get(BigDecimal.valueOf(longValue));\n         } else {\n             value = ValueLong.get(longValue);\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}