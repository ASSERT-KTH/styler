{
    "project_name": "graphfoundation-ongdb",
    "error_id": "444",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "52",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "119",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/444/TransactionExecutionStatistic.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/444/TransactionExecutionStatistic.java\nindex fed1039f659..3d5e4c5c884 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/444/TransactionExecutionStatistic.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/444/TransactionExecutionStatistic.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api;\n \n import org.neo4j.time.SystemNanoClock;\n@@ -25,86 +26,86 @@ import static java.util.concurrent.TimeUnit.NANOSECONDS;\n \n public class TransactionExecutionStatistic\n {\n-    public static final TransactionExecutionStatistic NOT_AVAILABLE = new TransactionExecutionStatistic();\n-\n-    private final Long heapAllocatedBytes;\n-    private final Long directAllocatedBytes;\n-    private final Long cpuTimeMillis;\n-    private final long waitTimeMillis;\n-    private final long elapsedTimeMillis;\n-    private final Long idleTimeMillis;\n-    private final long pageFaults;\n-    private final long pageHits;\n-\n-    private TransactionExecutionStatistic()\n-    {\n-        heapAllocatedBytes = null;\n-        directAllocatedBytes = null;\n-        cpuTimeMillis = null;\n-        waitTimeMillis = -1;\n-        elapsedTimeMillis = -1;\n-        idleTimeMillis = null;\n-        pageFaults = 0;\n-        pageHits = 0;\n-    }\n-\n-    public TransactionExecutionStatistic( KernelTransactionImplementation tx, SystemNanoClock clock, long startTimeMillis )\n-    {\n-        long nowMillis = clock.millis();\n-        long nowNanos = clock.nanos();\n-        KernelTransactionImplementation.Statistics statistics = tx.getStatistics();\n-        this.waitTimeMillis = NANOSECONDS.toMillis( statistics.getWaitingTimeNanos( nowNanos ) );\n-        this.heapAllocatedBytes = nullIfNegative( statistics.heapAllocatedBytes() );\n-        this.directAllocatedBytes = nullIfNegative( statistics.directAllocatedBytes() );\n-        this.cpuTimeMillis = nullIfNegative( statistics.cpuTimeMillis() );\n-        this.pageFaults = statistics.totalTransactionPageCacheFaults();\n-        this.pageHits = statistics.totalTransactionPageCacheHits();\n-        this.elapsedTimeMillis = nowMillis - startTimeMillis;\n-        this.idleTimeMillis = this.cpuTimeMillis != null ? elapsedTimeMillis - this.cpuTimeMillis - waitTimeMillis : null;\n-    }\n-\n-    public Long getHeapAllocatedBytes()\n-    {\n-        return heapAllocatedBytes;\n-    }\n-\n-    public Long getDirectAllocatedBytes()\n-    {\n-        return directAllocatedBytes;\n-    }\n-\n-    public Long getCpuTimeMillis()\n-    {\n-        return cpuTimeMillis;\n-    }\n-\n-    public long getWaitTimeMillis()\n-    {\n-        return waitTimeMillis;\n-    }\n-\n-    public long getElapsedTimeMillis()\n-    {\n-        return elapsedTimeMillis;\n-    }\n-\n-    public Long getIdleTimeMillis()\n-    {\n-        return idleTimeMillis;\n-    }\n-\n-    public long getPageHits()\n-    {\n-        return pageHits;\n-    }\n-\n-    public long getPageFaults()\n-    {\n-        return pageFaults;\n-    }\n-\n-    private static Long nullIfNegative( long value )\n-    {\n-        return value >= 0 ? value : null;\n-    }\n+  public static final TransactionExecutionStatistic NOT_AVAILABLE = new TransactionExecutionStatistic();\n+\n+  private final Long heapAllocatedBytes;\n+  private final Long directAllocatedBytes;\n+  private final Long cpuTimeMillis;\n+  private final long waitTimeMillis;\n+  private final long elapsedTimeMillis;\n+  private final Long idleTimeMillis;\n+  private final long pageFaults;\n+  private final long pageHits;\n+\n+  private TransactionExecutionStatistic()\n+  {\n+    heapAllocatedBytes = null;\n+    directAllocatedBytes = null;\n+    cpuTimeMillis = null;\n+    waitTimeMillis = -1;\n+    elapsedTimeMillis = -1;\n+    idleTimeMillis = null;\n+    pageFaults = 0;\n+    pageHits = 0;\n+  }\n+\n+  public TransactionExecutionStatistic(KernelTransactionImplementation tx, SystemNanoClock clock, long startTimeMillis)\n+  {\n+    long nowMillis = clock.millis();\n+    long nowNanos = clock.nanos();\n+    KernelTransactionImplementation.Statistics statistics = tx.getStatistics();\n+    this.waitTimeMillis = NANOSECONDS.toMillis(statistics.getWaitingTimeNanos(nowNanos));\n+    this.heapAllocatedBytes = nullIfNegative(statistics.heapAllocatedBytes());\n+    this.directAllocatedBytes = nullIfNegative(statistics.directAllocatedBytes());\n+    this.cpuTimeMillis = nullIfNegative(statistics.cpuTimeMillis());\n+    this.pageFaults = statistics.totalTransactionPageCacheFaults();\n+    this.pageHits = statistics.totalTransactionPageCacheHits();\n+    this.elapsedTimeMillis = nowMillis - startTimeMillis;\n+    this.idleTimeMillis = this.cpuTimeMillis != null ? elapsedTimeMillis - this.cpuTimeMillis - waitTimeMillis : null;\n+  }\n+\n+  public Long getHeapAllocatedBytes()\n+  {\n+    return heapAllocatedBytes;\n+  }\n+\n+  public Long getDirectAllocatedBytes()\n+  {\n+    return directAllocatedBytes;\n+  }\n+\n+  public Long getCpuTimeMillis()\n+  {\n+    return cpuTimeMillis;\n+  }\n+\n+  public long getWaitTimeMillis()\n+  {\n+    return waitTimeMillis;\n+  }\n+\n+  public long getElapsedTimeMillis()\n+  {\n+    return elapsedTimeMillis;\n+  }\n+\n+  public Long getIdleTimeMillis()\n+  {\n+    return idleTimeMillis;\n+  }\n+\n+  public long getPageHits()\n+  {\n+    return pageHits;\n+  }\n+\n+  public long getPageFaults()\n+  {\n+    return pageFaults;\n+  }\n+\n+  private static Long nullIfNegative(long value)\n+  {\n+    return value >= 0 ? value : null;\n+  }\n }\n",
            "diff_size": 83
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/444/TransactionExecutionStatistic.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/444/TransactionExecutionStatistic.java\nindex fed1039f659..dedf585977b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/444/TransactionExecutionStatistic.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/444/TransactionExecutionStatistic.java\n@@ -107,4 +107,4 @@ public class TransactionExecutionStatistic\n     {\n         return value >= 0 ? value : null;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}