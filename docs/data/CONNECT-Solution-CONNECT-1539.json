{
    "project_name": "CONNECT-Solution-CONNECT",
    "error_id": "1539",
    "information": {
        "errors": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.exchange.transform.uddi;\n\nimport gov.hhs.fha.nhinc.exchange.OrganizationListType;\nimport gov.hhs.fha.nhinc.exchange.directory.AddressType;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1539/UDDITransform.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/1539/UDDITransform.java\nindex c78b2ff43b7..a445c449033 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1539/UDDITransform.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/1539/UDDITransform.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.exchange.transform.uddi;\n \n import gov.hhs.fha.nhinc.exchange.OrganizationListType;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1539/UDDITransform.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/1539/UDDITransform.java\nindex c78b2ff43b7..7d224a69772 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1539/UDDITransform.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/1539/UDDITransform.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.exchange.transform.uddi;\n \n import gov.hhs.fha.nhinc.exchange.OrganizationListType;\n@@ -58,244 +59,243 @@ import org.uddi.api_v3.PersonName;\n import org.uddi.api_v3.Phone;\n \n /**\n- *\n  * @author tjafri\n  */\n public class UDDITransform implements ExchangeTransforms<BusinessDetail> {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(UDDITransform.class);\n+  private static final Logger LOG = LoggerFactory.getLogger(UDDITransform.class);\n \n-    @Override\n-    public OrganizationListType transform(BusinessDetail bDetail) throws ExchangeTransformException {\n-        try {\n-            return buildOrganization(bDetail);\n-        } catch (Exception ex) {\n-            LOG.error(\"Transforming UDDI data resulted in exception: {}\", ex.getLocalizedMessage(), ex);\n-            throw new ExchangeTransformException(ex);\n-        }\n+  @Override\n+  public OrganizationListType transform(BusinessDetail bDetail) throws ExchangeTransformException {\n+    try {\n+      return buildOrganization(bDetail);\n+    } catch (Exception ex) {\n+      LOG.error(\"Transforming UDDI data resulted in exception: {}\", ex.getLocalizedMessage(), ex);\n+      throw new ExchangeTransformException(ex);\n     }\n+  }\n \n-    private OrganizationListType buildOrganization(BusinessDetail srcDirectory) {\n-        OrganizationListType orgListType = new OrganizationListType();\n-        List<OrganizationType> orgList;\n-        if (null != srcDirectory && CollectionUtils.isNotEmpty(srcDirectory.getBusinessEntity())) {\n-            orgList = new ArrayList<>();\n-            for (BusinessEntity bEntity : srcDirectory.getBusinessEntity()) {\n-                OrganizationType org = new OrganizationType();\n-                org.setName(buildOrganizationName(bEntity));\n-                org.setHcid(getHomeCommunityID(bEntity));\n-                buildContacts(bEntity, org);\n-                buildEndpointList(bEntity, org);\n-                buildTargetRegions(bEntity, org);\n-                orgList.add(org);\n-            }\n-            orgListType.getOrganization().addAll(orgList);\n-        }\n-        return orgListType;\n+  private OrganizationListType buildOrganization(BusinessDetail srcDirectory) {\n+    OrganizationListType orgListType = new OrganizationListType();\n+    List<OrganizationType> orgList;\n+    if (null != srcDirectory && CollectionUtils.isNotEmpty(srcDirectory.getBusinessEntity())) {\n+      orgList = new ArrayList<>();\n+      for (BusinessEntity bEntity : srcDirectory.getBusinessEntity()) {\n+        OrganizationType org = new OrganizationType();\n+        org.setName(buildOrganizationName(bEntity));\n+        org.setHcid(getHomeCommunityID(bEntity));\n+        buildContacts(bEntity, org);\n+        buildEndpointList(bEntity, org);\n+        buildTargetRegions(bEntity, org);\n+        orgList.add(org);\n+      }\n+      orgListType.getOrganization().addAll(orgList);\n     }\n+    return orgListType;\n+  }\n \n-    private static String getHomeCommunityID(BusinessEntity entity) {\n-        if (entity != null && entity.getIdentifierBag() != null\n-            && CollectionUtils.isNotEmpty(entity.getIdentifierBag().getKeyedReference())) {\n-            for (KeyedReference key : entity.getIdentifierBag().getKeyedReference()) {\n-                if (UDDIConstants.UDDI_HOME_COMMUNITY_ID_KEY.equalsIgnoreCase(key.getTModelKey())) {\n-                    return key.getKeyValue();\n-                }\n-            }\n+  private static String getHomeCommunityID(BusinessEntity entity) {\n+    if (entity != null && entity.getIdentifierBag() != null\n+        && CollectionUtils.isNotEmpty(entity.getIdentifierBag().getKeyedReference())) {\n+      for (KeyedReference key : entity.getIdentifierBag().getKeyedReference()) {\n+        if (UDDIConstants.UDDI_HOME_COMMUNITY_ID_KEY.equalsIgnoreCase(key.getTModelKey())) {\n+          return key.getKeyValue();\n         }\n-        return null;\n+      }\n     }\n+    return null;\n+  }\n \n-    private void buildEndpointList(BusinessEntity entity, OrganizationType org) {\n-        EndpointListType epListType;\n-        if (null != entity && null != entity.getBusinessServices()\n-            && CollectionUtils.isNotEmpty(entity.getBusinessServices().getBusinessService())) {\n-            epListType = new EndpointListType();\n-            for (BusinessService service : entity.getBusinessServices().getBusinessService()) {\n-                buildServiceEndpoints(service, epListType);\n-            }\n-            org.setEndpointList(epListType);\n-        }\n+  private void buildEndpointList(BusinessEntity entity, OrganizationType org) {\n+    EndpointListType epListType;\n+    if (null != entity && null != entity.getBusinessServices()\n+        && CollectionUtils.isNotEmpty(entity.getBusinessServices().getBusinessService())) {\n+      epListType = new EndpointListType();\n+      for (BusinessService service : entity.getBusinessServices().getBusinessService()) {\n+        buildServiceEndpoints(service, epListType);\n+      }\n+      org.setEndpointList(epListType);\n     }\n+  }\n \n-    private static String buildOrganizationName(BusinessEntity entity) {\n-        if (entity != null && entity.getName() != null) {\n-            for (Name name : entity.getName()) {\n-                if (name != null && StringUtils.isNotEmpty(name.getValue())) {\n-                    return name.getValue();\n-                }\n-            }\n+  private static String buildOrganizationName(BusinessEntity entity) {\n+    if (entity != null && entity.getName() != null) {\n+      for (Name name : entity.getName()) {\n+        if (name != null && StringUtils.isNotEmpty(name.getValue())) {\n+          return name.getValue();\n         }\n-        return null;\n+      }\n     }\n+    return null;\n+  }\n \n-    private void buildServiceEndpoints(BusinessService service, EndpointListType epListType) {\n-        if (service != null && service.getBindingTemplates() != null\n-            && CollectionUtils.isNotEmpty(service.getBindingTemplates().getBindingTemplate())) {\n-            EndpointType endpoint = new EndpointType();\n-            buildDescription(service, endpoint);\n-            buildServiceName(service, endpoint);\n-            EndpointConfigurationListType epConfigType = new EndpointConfigurationListType();\n-            for (BindingTemplate bTemplate : service.getBindingTemplates().getBindingTemplate()) {\n-                List<EndpointConfigurationType> epConfigList = buildEndpointConfiguration(bTemplate);\n-                if (CollectionUtils.isNotEmpty(epConfigList)) {\n-                    epConfigType.getEndpointConfiguration().addAll(epConfigList);\n-                    endpoint.setEndpointConfigurationList(epConfigType);\n-                }\n-            }\n-            epListType.getEndpoint().add(endpoint);\n+  private void buildServiceEndpoints(BusinessService service, EndpointListType epListType) {\n+    if (service != null && service.getBindingTemplates() != null\n+        && CollectionUtils.isNotEmpty(service.getBindingTemplates().getBindingTemplate())) {\n+      EndpointType endpoint = new EndpointType();\n+      buildDescription(service, endpoint);\n+      buildServiceName(service, endpoint);\n+      EndpointConfigurationListType epConfigType = new EndpointConfigurationListType();\n+      for (BindingTemplate bTemplate : service.getBindingTemplates().getBindingTemplate()) {\n+        List<EndpointConfigurationType> epConfigList = buildEndpointConfiguration(bTemplate);\n+        if (CollectionUtils.isNotEmpty(epConfigList)) {\n+          epConfigType.getEndpointConfiguration().addAll(epConfigList);\n+          endpoint.setEndpointConfigurationList(epConfigType);\n         }\n+      }\n+      epListType.getEndpoint().add(endpoint);\n     }\n+  }\n \n-    private static void buildDescription(BusinessService service, EndpointType endpoint) {\n-        StringBuilder description = new StringBuilder();\n-        if (CollectionUtils.isNotEmpty(service.getDescription())) {\n-            LOG.info(\"building endpoint decription(s)\");\n-            for (Description desc : service.getDescription()) {\n-                if (desc != null) {\n-                    description.append(desc.getValue().trim());\n-                }\n-            }\n-            endpoint.setDescription(description.toString());\n+  private static void buildDescription(BusinessService service, EndpointType endpoint) {\n+    StringBuilder description = new StringBuilder();\n+    if (CollectionUtils.isNotEmpty(service.getDescription())) {\n+      LOG.info(\"building endpoint decription(s)\");\n+      for (Description desc : service.getDescription()) {\n+        if (desc != null) {\n+          description.append(desc.getValue().trim());\n         }\n+      }\n+      endpoint.setDescription(description.toString());\n     }\n+  }\n \n-    private static void buildServiceName(BusinessService service, EndpointType endpoint) {\n-        if (service.getCategoryBag() != null\n-            && CollectionUtils.isNotEmpty(service.getCategoryBag().getKeyedReference())) {\n-            List<String> serviceNames = new ArrayList<>();\n-            for (KeyedReference reference : service.getCategoryBag().getKeyedReference()) {\n-                if (UDDIConstants.UDD_SERVICE_NAMES_KEY.equals(reference.getTModelKey())) {\n-                    serviceNames.add(reference.getKeyValue());\n-                }\n-            }\n-            endpoint.getName().addAll(serviceNames);\n+  private static void buildServiceName(BusinessService service, EndpointType endpoint) {\n+    if (service.getCategoryBag() != null\n+        && CollectionUtils.isNotEmpty(service.getCategoryBag().getKeyedReference())) {\n+      List<String> serviceNames = new ArrayList<>();\n+      for (KeyedReference reference : service.getCategoryBag().getKeyedReference()) {\n+        if (UDDIConstants.UDD_SERVICE_NAMES_KEY.equals(reference.getTModelKey())) {\n+          serviceNames.add(reference.getKeyValue());\n         }\n+      }\n+      endpoint.getName().addAll(serviceNames);\n     }\n+  }\n \n-    private List<EndpointConfigurationType> buildEndpointConfiguration(BindingTemplate bTemplate) {\n-        List<EndpointConfigurationType> epConfigList = null;\n-        List<String> serviceVersions = getServiceVersion(bTemplate);\n-        if (CollectionUtils.isNotEmpty(serviceVersions)) {\n-            epConfigList = new ArrayList<>();\n-            for (String version : serviceVersions) {\n-                EndpointConfigurationType epConfig = new EndpointConfigurationType();\n-                epConfig.setVersion(version);\n-                epConfig.setUrl(bTemplate.getAccessPoint() != null ? bTemplate.getAccessPoint().getValue() : null);\n-                epConfigList.add(epConfig);\n-            }\n-        }\n-        return epConfigList;\n+  private List<EndpointConfigurationType> buildEndpointConfiguration(BindingTemplate bTemplate) {\n+    List<EndpointConfigurationType> epConfigList = null;\n+    List<String> serviceVersions = getServiceVersion(bTemplate);\n+    if (CollectionUtils.isNotEmpty(serviceVersions)) {\n+      epConfigList = new ArrayList<>();\n+      for (String version : serviceVersions) {\n+        EndpointConfigurationType epConfig = new EndpointConfigurationType();\n+        epConfig.setVersion(version);\n+        epConfig.setUrl(bTemplate.getAccessPoint() != null ? bTemplate.getAccessPoint().getValue() : null);\n+        epConfigList.add(epConfig);\n+      }\n     }\n+    return epConfigList;\n+  }\n \n-    private static List<String> getServiceVersion(BindingTemplate bTemplate) {\n-        List<String> versions = null;\n-        if (bTemplate.getCategoryBag() != null\n-            && CollectionUtils.isNotEmpty(bTemplate.getCategoryBag().getKeyedReference())) {\n-            versions = new ArrayList<>();\n-            for (KeyedReference keyRef : bTemplate.getCategoryBag().getKeyedReference()) {\n-                if (UDDIConstants.UDDI_SPEC_VERSION_KEY.equalsIgnoreCase(keyRef.getTModelKey())\n-                    || UDDIConstants.ADAPTER_API_KEY.equalsIgnoreCase(keyRef.getTModelKey())) {\n-                    versions.add(keyRef.getKeyValue());\n-                }\n-            }\n+  private static List<String> getServiceVersion(BindingTemplate bTemplate) {\n+    List<String> versions = null;\n+    if (bTemplate.getCategoryBag() != null\n+        && CollectionUtils.isNotEmpty(bTemplate.getCategoryBag().getKeyedReference())) {\n+      versions = new ArrayList<>();\n+      for (KeyedReference keyRef : bTemplate.getCategoryBag().getKeyedReference()) {\n+        if (UDDIConstants.UDDI_SPEC_VERSION_KEY.equalsIgnoreCase(keyRef.getTModelKey())\n+            || UDDIConstants.ADAPTER_API_KEY.equalsIgnoreCase(keyRef.getTModelKey())) {\n+          versions.add(keyRef.getKeyValue());\n         }\n-        return versions;\n+      }\n     }\n+    return versions;\n+  }\n \n-    private static void buildContacts(BusinessEntity entity, OrganizationType org) {\n-        List<ContactType> contacts;\n-        if (null != entity && entity.getContacts() != null\n-            && CollectionUtils.isNotEmpty(entity.getContacts().getContact())) {\n-            contacts = new ArrayList<>();\n-            for (Contact contact : entity.getContacts().getContact()) {\n-                ContactType cType = new ContactType();\n-                buildPersonNames(contact, cType);\n-                buildEmails(contact, cType);\n-                buildPhones(contact, cType);\n-                buildAddresses(contact, cType);\n-                cType.setRole(buildRole(contact));\n-                contacts.add(cType);\n-            }\n-            org.getContact().addAll(contacts);\n-        }\n+  private static void buildContacts(BusinessEntity entity, OrganizationType org) {\n+    List<ContactType> contacts;\n+    if (null != entity && entity.getContacts() != null\n+        && CollectionUtils.isNotEmpty(entity.getContacts().getContact())) {\n+      contacts = new ArrayList<>();\n+      for (Contact contact : entity.getContacts().getContact()) {\n+        ContactType cType = new ContactType();\n+        buildPersonNames(contact, cType);\n+        buildEmails(contact, cType);\n+        buildPhones(contact, cType);\n+        buildAddresses(contact, cType);\n+        cType.setRole(buildRole(contact));\n+        contacts.add(cType);\n+      }\n+      org.getContact().addAll(contacts);\n     }\n+  }\n \n-    private static void buildTargetRegions(BusinessEntity entity, OrganizationType org) {\n-        List<String> regions;\n-        if (null != entity && entity.getCategoryBag() != null\n-            && CollectionUtils.isNotEmpty(entity.getCategoryBag().getKeyedReference())) {\n-            regions = new ArrayList<>();\n-            for (KeyedReference keyRef : entity.getCategoryBag().getKeyedReference()) {\n-                if (UDDIConstants.UDDI_STATE_KEY.equalsIgnoreCase(keyRef.getTModelKey())) {\n-                    regions.add(keyRef.getKeyValue());\n-                }\n-            }\n-            org.getTargetRegion().addAll(regions);\n+  private static void buildTargetRegions(BusinessEntity entity, OrganizationType org) {\n+    List<String> regions;\n+    if (null != entity && entity.getCategoryBag() != null\n+        && CollectionUtils.isNotEmpty(entity.getCategoryBag().getKeyedReference())) {\n+      regions = new ArrayList<>();\n+      for (KeyedReference keyRef : entity.getCategoryBag().getKeyedReference()) {\n+        if (UDDIConstants.UDDI_STATE_KEY.equalsIgnoreCase(keyRef.getTModelKey())) {\n+          regions.add(keyRef.getKeyValue());\n         }\n+      }\n+      org.getTargetRegion().addAll(regions);\n     }\n+  }\n \n-    private static void buildEmails(Contact contact, ContactType cType) {\n-        List<String> emails;\n-        if (contact != null && CollectionUtils.isNotEmpty(contact.getEmail())) {\n-            emails = new ArrayList<>();\n-            for (Email obj : contact.getEmail()) {\n-                emails.add(obj.getValue());\n-            }\n-            cType.getEmail().addAll(emails);\n-        }\n+  private static void buildEmails(Contact contact, ContactType cType) {\n+    List<String> emails;\n+    if (contact != null && CollectionUtils.isNotEmpty(contact.getEmail())) {\n+      emails = new ArrayList<>();\n+      for (Email obj : contact.getEmail()) {\n+        emails.add(obj.getValue());\n+      }\n+      cType.getEmail().addAll(emails);\n     }\n+  }\n \n-    private static void buildPersonNames(Contact contact, ContactType cType) {\n-        List<String> personNames;\n-        if (contact != null && CollectionUtils.isNotEmpty(contact.getPersonName())) {\n-            personNames = new ArrayList<>();\n-            for (PersonName obj : contact.getPersonName()) {\n-                personNames.add(obj.getValue());\n-            }\n-            cType.getFullName().addAll(personNames);\n-        }\n+  private static void buildPersonNames(Contact contact, ContactType cType) {\n+    List<String> personNames;\n+    if (contact != null && CollectionUtils.isNotEmpty(contact.getPersonName())) {\n+      personNames = new ArrayList<>();\n+      for (PersonName obj : contact.getPersonName()) {\n+        personNames.add(obj.getValue());\n+      }\n+      cType.getFullName().addAll(personNames);\n     }\n+  }\n \n-    private static void buildPhones(Contact contact, ContactType cType) {\n-        List<String> phones;\n-        if (contact != null && CollectionUtils.isNotEmpty(contact.getPhone())) {\n-            phones = new ArrayList<>();\n-            for (Phone obj : contact.getPhone()) {\n-                phones.add(obj.getValue());\n-            }\n-            cType.getPhone().addAll(phones);\n-        }\n+  private static void buildPhones(Contact contact, ContactType cType) {\n+    List<String> phones;\n+    if (contact != null && CollectionUtils.isNotEmpty(contact.getPhone())) {\n+      phones = new ArrayList<>();\n+      for (Phone obj : contact.getPhone()) {\n+        phones.add(obj.getValue());\n+      }\n+      cType.getPhone().addAll(phones);\n     }\n+  }\n \n-    private static void buildAddresses(Contact contact, ContactType cType) {\n-        List<AddressType> addressList;\n-        if (contact != null && CollectionUtils.isNotEmpty(contact.getAddress())) {\n-            addressList = new ArrayList<>();\n-            AddressType addressType = new AddressType();\n-            for (Address obj : contact.getAddress()) {\n-                buildAddressLine(obj, addressType);\n-            }\n-            addressList.add(addressType);\n-            cType.getAddress().addAll(addressList);\n-        }\n+  private static void buildAddresses(Contact contact, ContactType cType) {\n+    List<AddressType> addressList;\n+    if (contact != null && CollectionUtils.isNotEmpty(contact.getAddress())) {\n+      addressList = new ArrayList<>();\n+      AddressType addressType = new AddressType();\n+      for (Address obj : contact.getAddress()) {\n+        buildAddressLine(obj, addressType);\n+      }\n+      addressList.add(addressType);\n+      cType.getAddress().addAll(addressList);\n     }\n+  }\n \n-    private static void buildAddressLine(Address addr, AddressType addrType) {\n-        List<String> addrLineList;\n-        if (addr != null && CollectionUtils.isNotEmpty(addr.getAddressLine())) {\n-            addrLineList = new ArrayList<>();\n-            for (AddressLine addrLine : addr.getAddressLine()) {\n-                addrLineList.add(addrLine.getValue());\n-            }\n-            addrType.getAddressLine().addAll(addrLineList);\n-        }\n+  private static void buildAddressLine(Address addr, AddressType addrType) {\n+    List<String> addrLineList;\n+    if (addr != null && CollectionUtils.isNotEmpty(addr.getAddressLine())) {\n+      addrLineList = new ArrayList<>();\n+      for (AddressLine addrLine : addr.getAddressLine()) {\n+        addrLineList.add(addrLine.getValue());\n+      }\n+      addrType.getAddressLine().addAll(addrLineList);\n     }\n+  }\n \n-    private static String buildRole(Contact contact) {\n-        if (contact != null && StringUtils.isNotBlank(contact.getUseType())) {\n-            return contact.getUseType();\n-        }\n-        return null;\n+  private static String buildRole(Contact contact) {\n+    if (contact != null && StringUtils.isNotBlank(contact.getUseType())) {\n+      return contact.getUseType();\n     }\n+    return null;\n+  }\n }\n",
            "diff_size": 226
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "101",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "113",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 150).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "134",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 153).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "164",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "192",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "195",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 171).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "205",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "222",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1539/UDDITransform.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/1539/UDDITransform.java\nindex c78b2ff43b7..4c95a791ec8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1539/UDDITransform.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/1539/UDDITransform.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.exchange.transform.uddi;\n \n import gov.hhs.fha.nhinc.exchange.OrganizationListType;\n@@ -71,7 +72,8 @@ public class UDDITransform implements ExchangeTransforms<BusinessDetail> {\n             return buildOrganization(bDetail);\n         } catch (Exception ex) {\n             LOG.error(\"Transforming UDDI data resulted in exception: {}\", ex.getLocalizedMessage(), ex);\n-            throw new ExchangeTransformException(ex);\n+\n+throw new ExchangeTransformException(ex);\n         }\n     }\n \n@@ -90,14 +92,14 @@ public class UDDITransform implements ExchangeTransforms<BusinessDetail> {\n                 orgList.add(org);\n             }\n             orgListType.getOrganization().addAll(orgList);\n-        }\n+\n+    }\n         return orgListType;\n     }\n \n     private static String getHomeCommunityID(BusinessEntity entity) {\n-        if (entity != null && entity.getIdentifierBag() != null\n-            && CollectionUtils.isNotEmpty(entity.getIdentifierBag().getKeyedReference())) {\n-            for (KeyedReference key : entity.getIdentifierBag().getKeyedReference()) {\n+        if (entity != null && entity.getIdentifierBag() != null && CollectionUtils.isNotEmpty(entity.getIdentifierBag().getKeyedReference())) {\n+    for (KeyedReference key : entity.getIdentifierBag().getKeyedReference()) {\n                 if (UDDIConstants.UDDI_HOME_COMMUNITY_ID_KEY.equalsIgnoreCase(key.getTModelKey())) {\n                     return key.getKeyValue();\n                 }\n@@ -108,9 +110,8 @@ public class UDDITransform implements ExchangeTransforms<BusinessDetail> {\n \n     private void buildEndpointList(BusinessEntity entity, OrganizationType org) {\n         EndpointListType epListType;\n-        if (null != entity && null != entity.getBusinessServices()\n-            && CollectionUtils.isNotEmpty(entity.getBusinessServices().getBusinessService())) {\n-            epListType = new EndpointListType();\n+        if (null != entity && null != entity.getBusinessServices() && CollectionUtils.isNotEmpty(entity.getBusinessServices().getBusinessService())) {\n+    epListType = new EndpointListType();\n             for (BusinessService service : entity.getBusinessServices().getBusinessService()) {\n                 buildServiceEndpoints(service, epListType);\n             }\n@@ -130,9 +131,8 @@ public class UDDITransform implements ExchangeTransforms<BusinessDetail> {\n     }\n \n     private void buildServiceEndpoints(BusinessService service, EndpointListType epListType) {\n-        if (service != null && service.getBindingTemplates() != null\n-            && CollectionUtils.isNotEmpty(service.getBindingTemplates().getBindingTemplate())) {\n-            EndpointType endpoint = new EndpointType();\n+        if (service != null && service.getBindingTemplates() != null && CollectionUtils.isNotEmpty(service.getBindingTemplates().getBindingTemplate())) {\n+    EndpointType endpoint = new EndpointType();\n             buildDescription(service, endpoint);\n             buildServiceName(service, endpoint);\n             EndpointConfigurationListType epConfigType = new EndpointConfigurationListType();\n@@ -161,9 +161,8 @@ public class UDDITransform implements ExchangeTransforms<BusinessDetail> {\n     }\n \n     private static void buildServiceName(BusinessService service, EndpointType endpoint) {\n-        if (service.getCategoryBag() != null\n-            && CollectionUtils.isNotEmpty(service.getCategoryBag().getKeyedReference())) {\n-            List<String> serviceNames = new ArrayList<>();\n+        if (service.getCategoryBag() != null && CollectionUtils.isNotEmpty(service.getCategoryBag().getKeyedReference())) {\n+    List<String> serviceNames = new ArrayList<>();\n             for (KeyedReference reference : service.getCategoryBag().getKeyedReference()) {\n                 if (UDDIConstants.UDD_SERVICE_NAMES_KEY.equals(reference.getTModelKey())) {\n                     serviceNames.add(reference.getKeyValue());\n@@ -190,13 +189,11 @@ public class UDDITransform implements ExchangeTransforms<BusinessDetail> {\n \n     private static List<String> getServiceVersion(BindingTemplate bTemplate) {\n         List<String> versions = null;\n-        if (bTemplate.getCategoryBag() != null\n-            && CollectionUtils.isNotEmpty(bTemplate.getCategoryBag().getKeyedReference())) {\n-            versions = new ArrayList<>();\n+        if (bTemplate.getCategoryBag() != null && CollectionUtils.isNotEmpty(bTemplate.getCategoryBag().getKeyedReference())) {\n+    versions = new ArrayList<>();\n             for (KeyedReference keyRef : bTemplate.getCategoryBag().getKeyedReference()) {\n-                if (UDDIConstants.UDDI_SPEC_VERSION_KEY.equalsIgnoreCase(keyRef.getTModelKey())\n-                    || UDDIConstants.ADAPTER_API_KEY.equalsIgnoreCase(keyRef.getTModelKey())) {\n-                    versions.add(keyRef.getKeyValue());\n+                if (UDDIConstants.UDDI_SPEC_VERSION_KEY.equalsIgnoreCase(keyRef.getTModelKey()) || UDDIConstants.ADAPTER_API_KEY.equalsIgnoreCase(keyRef.getTModelKey())) {\n+    versions.add(keyRef.getKeyValue());\n                 }\n             }\n         }\n@@ -205,9 +202,8 @@ public class UDDITransform implements ExchangeTransforms<BusinessDetail> {\n \n     private static void buildContacts(BusinessEntity entity, OrganizationType org) {\n         List<ContactType> contacts;\n-        if (null != entity && entity.getContacts() != null\n-            && CollectionUtils.isNotEmpty(entity.getContacts().getContact())) {\n-            contacts = new ArrayList<>();\n+        if (null != entity && entity.getContacts() != null && CollectionUtils.isNotEmpty(entity.getContacts().getContact())) {\n+    contacts = new ArrayList<>();\n             for (Contact contact : entity.getContacts().getContact()) {\n                 ContactType cType = new ContactType();\n                 buildPersonNames(contact, cType);\n@@ -223,9 +219,8 @@ public class UDDITransform implements ExchangeTransforms<BusinessDetail> {\n \n     private static void buildTargetRegions(BusinessEntity entity, OrganizationType org) {\n         List<String> regions;\n-        if (null != entity && entity.getCategoryBag() != null\n-            && CollectionUtils.isNotEmpty(entity.getCategoryBag().getKeyedReference())) {\n-            regions = new ArrayList<>();\n+        if (null != entity && entity.getCategoryBag() != null && CollectionUtils.isNotEmpty(entity.getCategoryBag().getKeyedReference())) {\n+    regions = new ArrayList<>();\n             for (KeyedReference keyRef : entity.getCategoryBag().getKeyedReference()) {\n                 if (UDDIConstants.UDDI_STATE_KEY.equalsIgnoreCase(keyRef.getTModelKey())) {\n                     regions.add(keyRef.getKeyValue());\n@@ -295,7 +290,8 @@ public class UDDITransform implements ExchangeTransforms<BusinessDetail> {\n     private static String buildRole(Contact contact) {\n         if (contact != null && StringUtils.isNotBlank(contact.getUseType())) {\n             return contact.getUseType();\n-        }\n+\n+    }\n         return null;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 32
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "101",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "113",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 148).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "113",
                    "column": "27",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "113",
                    "column": "66",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "134",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 153).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "164",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "183",
                    "column": "67",
                    "severity": "error",
                    "message": "'?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "183",
                    "column": "106",
                    "severity": "error",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "192",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "195",
                    "column": "96",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "195",
                    "column": "96",
                    "severity": "error",
                    "message": "'||' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                },
                {
                    "line": "206",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "206",
                    "column": "27",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "223",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "223",
                    "column": "27",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1539/UDDITransform.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/1539/UDDITransform.java\nindex c78b2ff43b7..f9342ece8ed 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1539/UDDITransform.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/1539/UDDITransform.java\n@@ -61,10 +61,13 @@ import org.uddi.api_v3.Phone;\n  *\n  * @author tjafri\n  */\n+\n+\n public class UDDITransform implements ExchangeTransforms<BusinessDetail> {\n \n     private static final Logger LOG = LoggerFactory.getLogger(UDDITransform.class);\n \n+\n     @Override\n     public OrganizationListType transform(BusinessDetail bDetail) throws ExchangeTransformException {\n         try {\n@@ -95,8 +98,7 @@ public class UDDITransform implements ExchangeTransforms<BusinessDetail> {\n     }\n \n     private static String getHomeCommunityID(BusinessEntity entity) {\n-        if (entity != null && entity.getIdentifierBag() != null\n-            && CollectionUtils.isNotEmpty(entity.getIdentifierBag().getKeyedReference())) {\n+        if (entity != null && entity.getIdentifierBag() != null && CollectionUtils.isNotEmpty(entity.getIdentifierBag().getKeyedReference())) {\n             for (KeyedReference key : entity.getIdentifierBag().getKeyedReference()) {\n                 if (UDDIConstants.UDDI_HOME_COMMUNITY_ID_KEY.equalsIgnoreCase(key.getTModelKey())) {\n                     return key.getKeyValue();\n@@ -108,8 +110,7 @@ public class UDDITransform implements ExchangeTransforms<BusinessDetail> {\n \n     private void buildEndpointList(BusinessEntity entity, OrganizationType org) {\n         EndpointListType epListType;\n-        if (null != entity && null != entity.getBusinessServices()\n-            && CollectionUtils.isNotEmpty(entity.getBusinessServices().getBusinessService())) {\n+        if (null != entity&& null != entity.getBusinessServices()&& CollectionUtils.isNotEmpty(entity.getBusinessServices().getBusinessService())) {\n             epListType = new EndpointListType();\n             for (BusinessService service : entity.getBusinessServices().getBusinessService()) {\n                 buildServiceEndpoints(service, epListType);\n@@ -130,8 +131,7 @@ public class UDDITransform implements ExchangeTransforms<BusinessDetail> {\n     }\n \n     private void buildServiceEndpoints(BusinessService service, EndpointListType epListType) {\n-        if (service != null && service.getBindingTemplates() != null\n-            && CollectionUtils.isNotEmpty(service.getBindingTemplates().getBindingTemplate())) {\n+        if (service != null && service.getBindingTemplates() != null && CollectionUtils.isNotEmpty(service.getBindingTemplates().getBindingTemplate())) {\n             EndpointType endpoint = new EndpointType();\n             buildDescription(service, endpoint);\n             buildServiceName(service, endpoint);\n@@ -161,8 +161,7 @@ public class UDDITransform implements ExchangeTransforms<BusinessDetail> {\n     }\n \n     private static void buildServiceName(BusinessService service, EndpointType endpoint) {\n-        if (service.getCategoryBag() != null\n-            && CollectionUtils.isNotEmpty(service.getCategoryBag().getKeyedReference())) {\n+        if (service.getCategoryBag() != null && CollectionUtils.isNotEmpty(service.getCategoryBag().getKeyedReference())) {\n             List<String> serviceNames = new ArrayList<>();\n             for (KeyedReference reference : service.getCategoryBag().getKeyedReference()) {\n                 if (UDDIConstants.UDD_SERVICE_NAMES_KEY.equals(reference.getTModelKey())) {\n@@ -181,7 +180,7 @@ public class UDDITransform implements ExchangeTransforms<BusinessDetail> {\n             for (String version : serviceVersions) {\n                 EndpointConfigurationType epConfig = new EndpointConfigurationType();\n                 epConfig.setVersion(version);\n-                epConfig.setUrl(bTemplate.getAccessPoint() != null ? bTemplate.getAccessPoint().getValue() : null);\n+                epConfig.setUrl(bTemplate.getAccessPoint() != null? bTemplate.getAccessPoint().getValue(): null);\n                 epConfigList.add(epConfig);\n             }\n         }\n@@ -190,12 +189,11 @@ public class UDDITransform implements ExchangeTransforms<BusinessDetail> {\n \n     private static List<String> getServiceVersion(BindingTemplate bTemplate) {\n         List<String> versions = null;\n-        if (bTemplate.getCategoryBag() != null\n-            && CollectionUtils.isNotEmpty(bTemplate.getCategoryBag().getKeyedReference())) {\n+        if (bTemplate.getCategoryBag() != null && CollectionUtils.isNotEmpty(bTemplate.getCategoryBag().getKeyedReference())) {\n             versions = new ArrayList<>();\n             for (KeyedReference keyRef : bTemplate.getCategoryBag().getKeyedReference()) {\n-                if (UDDIConstants.UDDI_SPEC_VERSION_KEY.equalsIgnoreCase(keyRef.getTModelKey())\n-                    || UDDIConstants.ADAPTER_API_KEY.equalsIgnoreCase(keyRef.getTModelKey())) {\n+                if (UDDIConstants.UDDI_SPEC_VERSION_KEY.equalsIgnoreCase(keyRef.getTModelKey())||\n+                    UDDIConstants.ADAPTER_API_KEY.equalsIgnoreCase(keyRef.getTModelKey())) {\n                     versions.add(keyRef.getKeyValue());\n                 }\n             }\n@@ -205,8 +203,7 @@ public class UDDITransform implements ExchangeTransforms<BusinessDetail> {\n \n     private static void buildContacts(BusinessEntity entity, OrganizationType org) {\n         List<ContactType> contacts;\n-        if (null != entity && entity.getContacts() != null\n-            && CollectionUtils.isNotEmpty(entity.getContacts().getContact())) {\n+        if (null != entity&& entity.getContacts() != null && CollectionUtils.isNotEmpty(entity.getContacts().getContact())) {\n             contacts = new ArrayList<>();\n             for (Contact contact : entity.getContacts().getContact()) {\n                 ContactType cType = new ContactType();\n@@ -223,8 +220,7 @@ public class UDDITransform implements ExchangeTransforms<BusinessDetail> {\n \n     private static void buildTargetRegions(BusinessEntity entity, OrganizationType org) {\n         List<String> regions;\n-        if (null != entity && entity.getCategoryBag() != null\n-            && CollectionUtils.isNotEmpty(entity.getCategoryBag().getKeyedReference())) {\n+        if (null != entity&& entity.getCategoryBag() != null && CollectionUtils.isNotEmpty(entity.getCategoryBag().getKeyedReference())) {\n             regions = new ArrayList<>();\n             for (KeyedReference keyRef : entity.getCategoryBag().getKeyedReference()) {\n                 if (UDDIConstants.UDDI_STATE_KEY.equalsIgnoreCase(keyRef.getTModelKey())) {\n@@ -298,4 +294,5 @@ public class UDDITransform implements ExchangeTransforms<BusinessDetail> {\n         }\n         return null;\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 22
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "28",
                    "severity": "error",
                    "message": "'import' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1539/UDDITransform.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_random/1539/UDDITransform.java\nindex c78b2ff43b7..d0725d111c2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1539/UDDITransform.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_random/1539/UDDITransform.java\n@@ -25,7 +25,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n package gov.hhs.fha.nhinc.exchange.transform.uddi;\n-\n import gov.hhs.fha.nhinc.exchange.OrganizationListType;\n import gov.hhs.fha.nhinc.exchange.directory.AddressType;\n import gov.hhs.fha.nhinc.exchange.directory.ContactType;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1539/UDDITransform.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/1539/UDDITransform.java\nindex c78b2ff43b7..a445c449033 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1539/UDDITransform.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/1539/UDDITransform.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.exchange.transform.uddi;\n \n import gov.hhs.fha.nhinc.exchange.OrganizationListType;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}