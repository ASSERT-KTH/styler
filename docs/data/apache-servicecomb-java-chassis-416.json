{
    "project_name": "apache-servicecomb-java-chassis",
    "error_id": "416",
    "information": {
        "errors": [
            {
                "line": "153",
                "column": "41",
                "severity": "warning",
                "message": "'&&' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "    if (response != null) {\n      Model model = response.getResponseSchema();\n      return model instanceof ModelImpl &&\n          FileProperty.isType(((ModelImpl) model).getType(), ((ModelImpl) model).getFormat());\n    }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/416/RestOperationMeta.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler/416/RestOperationMeta.java\nindex 0809656b07d..68d404bb1b3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/416/RestOperationMeta.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler/416/RestOperationMeta.java\n@@ -150,8 +150,8 @@ public class RestOperationMeta {\n     Response response = operationMeta.getSwaggerOperation().getResponses().get(\"200\");\n     if (response != null) {\n       Model model = response.getResponseSchema();\n-      return model instanceof ModelImpl &&\n-          FileProperty.isType(((ModelImpl) model).getType(), ((ModelImpl) model).getFormat());\n+      return model instanceof ModelImpl\n+          && FileProperty.isType(((ModelImpl) model).getType(), ((ModelImpl) model).getFormat());\n     }\n \n     return false;\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "154",
                    "column": "41",
                    "severity": "warning",
                    "message": "'&&' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/416/RestOperationMeta.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/416/RestOperationMeta.java\nindex 0809656b07d..587fc1acf8a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/416/RestOperationMeta.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/416/RestOperationMeta.java\n@@ -122,8 +122,9 @@ public class RestOperationMeta {\n   /**\n    * EdgeService cannot recognize the map type form body whose value type is String,\n    * so there should be this additional setting.\n+   *\n    * @param parameter the swagger information of the parameter\n-   * @param type the resolved param type\n+   * @param type      the resolved param type\n    * @return the corrected param type\n    */\n   private Type correctFormBodyType(Parameter parameter, Type type) {\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "155",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/416/RestOperationMeta.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/416/RestOperationMeta.java\nindex 0809656b07d..d45dd9b029d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/416/RestOperationMeta.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/416/RestOperationMeta.java\n@@ -130,11 +130,13 @@ public class RestOperationMeta {\n     if (null != type || !(parameter instanceof BodyParameter)) {\n       return type;\n     }\n-    final BodyParameter bodyParameter = (BodyParameter) parameter;\n+\n+final BodyParameter bodyParameter = (BodyParameter) parameter;\n     if (!(bodyParameter.getSchema() instanceof ModelImpl)) {\n       return type;\n     }\n-    final Property additionalProperties = ((ModelImpl) bodyParameter.getSchema()).getAdditionalProperties();\n+\n+final Property additionalProperties = ((ModelImpl) bodyParameter.getSchema()).getAdditionalProperties();\n     if (additionalProperties instanceof StringProperty) {\n       type = RestObjectMapperFactory.getRestObjectMapper().getTypeFactory()\n           .constructMapType(Map.class, String.class, String.class);\n@@ -150,8 +152,7 @@ public class RestOperationMeta {\n     Response response = operationMeta.getSwaggerOperation().getResponses().get(\"200\");\n     if (response != null) {\n       Model model = response.getResponseSchema();\n-      return model instanceof ModelImpl &&\n-          FileProperty.isType(((ModelImpl) model).getType(), ((ModelImpl) model).getFormat());\n+      return model instanceof ModelImpl && FileProperty.isType(((ModelImpl) model).getType(), ((ModelImpl) model).getFormat());\n     }\n \n     return false;\n@@ -260,7 +261,7 @@ public class RestOperationMeta {\n         if (processor == null) {\n           LOGGER.error(\"produce {} is not supported, operation={}.\", produce,\n               operationMeta.getMicroserviceQualifiedName());\n-          continue;\n+continue;\n         }\n         this.produceProcessorMap.put(produce, processor);\n       }\n@@ -333,4 +334,4 @@ public class RestOperationMeta {\n   public List<String> getProduces() {\n     return produces;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "114",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "115",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 148).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "160",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/416/RestOperationMeta.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/416/RestOperationMeta.java\nindex 0809656b07d..ba623dcc0a3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/416/RestOperationMeta.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/416/RestOperationMeta.java\n@@ -24,10 +24,8 @@ import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n-\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n-\n import org.apache.commons.lang3.StringUtils;\n import org.apache.servicecomb.common.rest.codec.RestObjectMapperFactory;\n import org.apache.servicecomb.common.rest.codec.param.FormProcessorCreator.PartProcessor;\n@@ -42,9 +40,7 @@ import org.apache.servicecomb.foundation.vertx.http.HttpServletRequestEx;\n import org.apache.servicecomb.swagger.engine.SwaggerProducerOperation;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import com.fasterxml.jackson.annotation.JsonView;\n-\n import io.swagger.models.Model;\n import io.swagger.models.ModelImpl;\n import io.swagger.models.Operation;\n@@ -66,19 +62,23 @@ public class RestOperationMeta {\n   protected boolean formData;\n \n   // make sure if response is file\n+\n   protected boolean downloadFile;\n \n   protected List<RestParam> paramList = new ArrayList<>();\n \n   // key\u4e3a\u53c2\u6570\u540d\n+\n   protected Map<String, RestParam> paramMap = new LinkedHashMap<>();\n \n   protected List<String> fileKeys = new ArrayList<>();\n \n   // key\u4e3a\u6570\u636e\u7c7b\u578b\uff0c\u6bd4\u5982json\u4e4b\u7c7b\n+\n   private Map<String, ProduceProcessor> produceProcessorMap = new LinkedHashMap<>();\n \n   // \u4e0d\u4e00\u5b9a\u7b49\u4e8emgr\u4e2d\u7684default\uff0c\u56e0\u4e3a\u672coperation\u53ef\u80fd\u4e0d\u652f\u6301mgr\u4e2d\u7684default\n+\n   private ProduceProcessor defaultProcessor;\n \n   protected String absolutePath;\n@@ -86,6 +86,7 @@ public class RestOperationMeta {\n   protected PathRegExp absolutePathRegExp;\n \n   // \u5feb\u901f\u6784\u5efaURL path\n+\n   private URLPathBuilder pathBuilder;\n \n   public void init(OperationMeta operationMeta) {\n@@ -93,6 +94,8 @@ public class RestOperationMeta {\n \n     Swagger swagger = operationMeta.getSchemaMeta().getSwagger();\n     Operation operation = operationMeta.getSwaggerOperation();\n+\n+\n     this.produces = operation.getProduces();\n     if (produces == null) {\n       this.produces = swagger.getProduces();\n@@ -104,14 +107,14 @@ public class RestOperationMeta {\n     // \u521d\u59cb\u5316\u6240\u6709rest param\n     for (int swaggerParameterIdx = 0; swaggerParameterIdx < operation.getParameters().size(); swaggerParameterIdx++) {\n       Parameter parameter = operation.getParameters().get(swaggerParameterIdx);\n-\n       if (\"formData\".equals(parameter.getIn())) {\n         formData = true;\n       }\n \n-      Type type = operationMeta.getSwaggerProducerOperation() != null ? operationMeta.getSwaggerProducerOperation()\n-          .getSwaggerParameterTypes().get(parameter.getName()) : null;\n+      Type type = operationMeta.getSwaggerProducerOperation() != null ? operationMeta.getSwaggerProducerOperation().getSwaggerParameterTypes()\n+                                                                                                                   .get(parameter.getName()) : null;\n       type = correctFormBodyType(parameter, type);\n+\n       RestParam param = new RestParam(parameter, type);\n       addParam(param);\n     }\n@@ -126,18 +129,21 @@ public class RestOperationMeta {\n    * @param type the resolved param type\n    * @return the corrected param type\n    */\n+\n   private Type correctFormBodyType(Parameter parameter, Type type) {\n     if (null != type || !(parameter instanceof BodyParameter)) {\n       return type;\n     }\n+\n     final BodyParameter bodyParameter = (BodyParameter) parameter;\n     if (!(bodyParameter.getSchema() instanceof ModelImpl)) {\n       return type;\n     }\n+\n     final Property additionalProperties = ((ModelImpl) bodyParameter.getSchema()).getAdditionalProperties();\n     if (additionalProperties instanceof StringProperty) {\n       type = RestObjectMapperFactory.getRestObjectMapper().getTypeFactory()\n-          .constructMapType(Map.class, String.class, String.class);\n+                                                          .constructMapType(Map.class, String.class, String.class);\n     }\n     return type;\n   }\n@@ -147,13 +153,12 @@ public class RestOperationMeta {\n   }\n \n   private boolean checkDownloadFileFlag() {\n-    Response response = operationMeta.getSwaggerOperation().getResponses().get(\"200\");\n+    Response response = operationMeta.getSwaggerOperation().getResponses()\n+                                                           .get(\"200\");\n     if (response != null) {\n       Model model = response.getResponseSchema();\n-      return model instanceof ModelImpl &&\n-          FileProperty.isType(((ModelImpl) model).getType(), ((ModelImpl) model).getFormat());\n+      return model instanceof ModelImpl && FileProperty.isType(((ModelImpl) model).getType(), ((ModelImpl) model).getFormat());\n     }\n-\n     return false;\n   }\n \n@@ -166,9 +171,9 @@ public class RestOperationMeta {\n   }\n \n   // \u8f93\u51fab/c/\u5f62\u5f0f\u7684url\n+\n   private String concatPath(String basePath, String operationPath) {\n-    return (\"/\" + nonNullify(basePath) + \"/\" + nonNullify(operationPath) + \"/\")\n-        .replaceAll(\"/{2,}\", \"/\");\n+    return (\"/\" + nonNullify(basePath) + \"/\" + nonNullify(operationPath) + \"/\").replaceAll(\"/{2,}\", \"/\");\n   }\n \n   private String nonNullify(String path) {\n@@ -197,6 +202,7 @@ public class RestOperationMeta {\n     if (path == null || path.equals(\"\")) {\n       throw new Error(\"null rest url is not supported\");\n     }\n+\n     try {\n       return new PathRegExp(path);\n     } catch (Exception e) {\n@@ -223,55 +229,64 @@ public class RestOperationMeta {\n       createProduceProcessors(producerOperation.getProducerMethod().getDeclaredAnnotations());\n       return;\n     }\n+\n     createProduceProcessors(null);\n   }\n \n   // serialViewClass is deterministic for each operation\n+\n   protected void createProduceProcessors(Annotation[] annotations) {\n     if (annotations == null || annotations.length < 1) {\n       doCreateProduceProcessors(null);\n       return;\n     }\n+\n     for (Annotation annotation : annotations) {\n       if (annotation.annotationType() == JsonView.class) {\n         Class<?>[] value = ((JsonView) annotation).value();\n         if (value.length != 1) {\n-          throw new IllegalArgumentException(\n-              \"@JsonView only supported for exactly 1 class argument \");\n+          throw new IllegalArgumentException(\"@JsonView only supported for exactly 1 class argument \");\n         }\n+\n         doCreateProduceProcessors(value[0]);\n         return;\n       }\n     }\n+\n     doCreateProduceProcessors(null);\n   }\n \n   // \u4e3aoperation\u521b\u5efa\u652f\u6301\u7684\u591a\u79cdproduce processor\n+\n   protected void doCreateProduceProcessors(Class<?> serialViewClass) {\n     if (null == produces || produces.isEmpty()) {\n-      produceProcessorMap.putAll(\n-          ProduceProcessorManager.INSTANCE.getOrCreateAcceptMap(serialViewClass));\n+      produceProcessorMap.putAll(ProduceProcessorManager.INSTANCE.getOrCreateAcceptMap(serialViewClass));\n     } else {\n       for (String produce : produces) {\n         if (produce.contains(\";\")) {\n           produce = produce.substring(0, produce.indexOf(\";\"));\n         }\n+\n         ProduceProcessor processor = ProduceProcessorManager.INSTANCE.findProcessor(produce, serialViewClass);\n         if (processor == null) {\n-          LOGGER.error(\"produce {} is not supported, operation={}.\", produce,\n-              operationMeta.getMicroserviceQualifiedName());\n+          LOGGER.error(\"produce {} is not supported, operation={}.\",\n+produce,\n+operationMeta.getMicroserviceQualifiedName());\n           continue;\n         }\n+\n         this.produceProcessorMap.put(produce, processor);\n       }\n \n       if (produceProcessorMap.isEmpty()) {\n         produceProcessorMap.put(ProduceProcessorManager.DEFAULT_TYPE,\n-            ProduceProcessorManager.INSTANCE.findDefaultProcessorByViewClass(serialViewClass));\n+ProduceProcessorManager.INSTANCE.findDefaultProcessorByViewClass(serialViewClass));\n       }\n     }\n \n-    defaultProcessor = produceProcessorMap.values().stream().findFirst().get();\n+    defaultProcessor = produceProcessorMap.values().stream()\n+                                                   .findFirst()\n+                                                   .get();\n     produceProcessorMap.putIfAbsent(MediaType.WILDCARD, defaultProcessor);\n   }\n \n@@ -287,6 +302,7 @@ public class RestOperationMeta {\n     if (param.getParamProcessor() instanceof PartProcessor) {\n       fileKeys.add(param.getParamName());\n     }\n+\n     paramList.add(param);\n     paramMap.put(param.getParamName(), param);\n   }\n@@ -296,6 +312,7 @@ public class RestOperationMeta {\n   }\n \n   // \u9009\u62e9\u4e0eaccept\u5339\u914d\u7684produce processor\u6216\u8005\u7f3a\u7701\u7684\n+\n   public ProduceProcessor ensureFindProduceProcessor(HttpServletRequestEx requestEx) {\n     String acceptType = requestEx.getHeader(HttpHeaders.ACCEPT);\n     return ensureFindProduceProcessor(acceptType);\n@@ -308,9 +325,11 @@ public class RestOperationMeta {\n       //so do not care what accept type the consumer will set.\n       return this.produceProcessorMap.get(MediaType.WILDCARD);\n     }\n+\n     if (StringUtils.isEmpty(acceptType)) {\n       return defaultProcessor;\n     }\n+\n     List<String> mimeTypes = MimeTypesUtils.getSortedAcceptableMimeTypes(acceptType.toLowerCase(Locale.US));\n     for (String mime : mimeTypes) {\n       ProduceProcessor processor = this.produceProcessorMap.get(mime);\n@@ -318,7 +337,6 @@ public class RestOperationMeta {\n         return processor;\n       }\n     }\n-\n     return null;\n   }\n \n@@ -333,4 +351,4 @@ public class RestOperationMeta {\n   public List<String> getProduces() {\n     return produces;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 53
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "153",
                    "column": "41",
                    "severity": "warning",
                    "message": "'&&' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/416/RestOperationMeta.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/416/RestOperationMeta.java\nindex 0809656b07d..68d404bb1b3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/416/RestOperationMeta.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/416/RestOperationMeta.java\n@@ -150,8 +150,8 @@ public class RestOperationMeta {\n     Response response = operationMeta.getSwaggerOperation().getResponses().get(\"200\");\n     if (response != null) {\n       Model model = response.getResponseSchema();\n-      return model instanceof ModelImpl &&\n-          FileProperty.isType(((ModelImpl) model).getType(), ((ModelImpl) model).getFormat());\n+      return model instanceof ModelImpl\n+          && FileProperty.isType(((ModelImpl) model).getType(), ((ModelImpl) model).getFormat());\n     }\n \n     return false;\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}