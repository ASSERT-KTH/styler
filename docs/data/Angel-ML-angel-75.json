{
    "project_name": "Angel-ML-angel",
    "error_id": "75",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/75/AdaGradThreshold.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/75/AdaGradThreshold.java\nindex fc107f0bd16..0f19d5d05f8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/75/AdaGradThreshold.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/75/AdaGradThreshold.java\n@@ -14,6 +14,7 @@\n  * the License.\n  *\n  */\n+\n package com.tencent.angel.ml.math2.ufuncs.expression;\n \n import com.tencent.angel.ml.math2.utils.Constant;\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/75/AdaGradThreshold.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/75/AdaGradThreshold.java\nindex fc107f0bd16..584639ccdfa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/75/AdaGradThreshold.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/75/AdaGradThreshold.java\n@@ -156,4 +156,4 @@ public class AdaGradThreshold extends Binary {\n       return 0;\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/75/AdaGradThreshold.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/75/AdaGradThreshold.java\nindex fc107f0bd16..3263a414806 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/75/AdaGradThreshold.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/75/AdaGradThreshold.java\n@@ -43,7 +43,7 @@ public class AdaGradThreshold extends Binary {\n     if (ele1 > threshold) {\n       return ele1 - threshold;\n     } else if (ele1 < -threshold) {\n-      return ele1 + threshold;\n+             return ele1 + threshold;\n     } else {\n       return 0;\n     }\n@@ -55,7 +55,7 @@ public class AdaGradThreshold extends Binary {\n     if (ele1 > threshold) {\n       return ele1 - threshold;\n     } else if (ele1 < -threshold) {\n-      return ele1 + threshold;\n+             return ele1 + threshold;\n     } else {\n       return 0;\n     }\n@@ -67,7 +67,7 @@ public class AdaGradThreshold extends Binary {\n     if (ele1 > threshold) {\n       return ele1 - threshold;\n     } else if (ele1 < -threshold) {\n-      return ele1 + threshold;\n+             return ele1 + threshold;\n     } else {\n       return 0;\n     }\n@@ -79,7 +79,7 @@ public class AdaGradThreshold extends Binary {\n     if (ele1 > threshold) {\n       return ele1 - threshold;\n     } else if (ele1 < -threshold) {\n-      return ele1 + threshold;\n+             return ele1 + threshold;\n     } else {\n       return 0;\n     }\n@@ -91,7 +91,7 @@ public class AdaGradThreshold extends Binary {\n     if (ele1 > threshold) {\n       return (float) (ele1 - threshold);\n     } else if (ele1 < -threshold) {\n-      return (float) (ele1 + threshold);\n+             return (float) (ele1 + threshold);\n     } else {\n       return 0;\n     }\n@@ -103,7 +103,7 @@ public class AdaGradThreshold extends Binary {\n     if (ele1 > threshold) {\n       return (float) (ele1 - threshold);\n     } else if (ele1 < -threshold) {\n-      return (float) (ele1 + threshold);\n+             return (float) (ele1 + threshold);\n     } else {\n       return 0;\n     }\n@@ -115,7 +115,7 @@ public class AdaGradThreshold extends Binary {\n     if (ele1 > threshold) {\n       return (float) (ele1 - threshold);\n     } else if (ele1 < -threshold) {\n-      return (float) (ele1 + threshold);\n+             return (float) (ele1 + threshold);\n     } else {\n       return 0;\n     }\n@@ -127,7 +127,7 @@ public class AdaGradThreshold extends Binary {\n     if (ele1 > threshold) {\n       return (long) (ele1 - threshold);\n     } else if (ele1 < -threshold) {\n-      return (long) (ele1 + threshold);\n+             return (long) (ele1 + threshold);\n     } else {\n       return 0;\n     }\n@@ -139,7 +139,7 @@ public class AdaGradThreshold extends Binary {\n     if (ele1 > threshold) {\n       return (long) (ele1 - threshold);\n     } else if (ele1 < -threshold) {\n-      return (long) (ele1 + threshold);\n+             return (long) (ele1 + threshold);\n     } else {\n       return 0;\n     }\n@@ -151,9 +151,10 @@ public class AdaGradThreshold extends Binary {\n     if (ele1 > threshold) {\n       return (int) (ele1 - threshold);\n     } else if (ele1 < -threshold) {\n-      return (int) (ele1 + threshold);\n+             return (int) (ele1 + threshold);\n     } else {\n       return 0;\n     }\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}