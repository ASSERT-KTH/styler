{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4043",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "40",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "7",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "81",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "98",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "117",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "126",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4043/OwnerChain.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4043/OwnerChain.java\nindex d9e8bf7a645..fc8bed1b9ae 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4043/OwnerChain.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4043/OwnerChain.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency.checking;\n \n import org.neo4j.consistency.report.ConsistencyReport;\n@@ -31,108 +32,104 @@ import org.neo4j.kernel.impl.store.record.RelationshipRecord;\n \n // TODO: it would be great if this also checked for cyclic chains. (we would also need cycle checking for full check, and for relationships)\n public enum OwnerChain\n-        implements ComparativeRecordChecker<PropertyRecord, PropertyRecord, ConsistencyReport.PropertyConsistencyReport>\n+    implements ComparativeRecordChecker<PropertyRecord, PropertyRecord, ConsistencyReport.PropertyConsistencyReport>\n {\n-    NEW\n-    {\n+  NEW\n+      {\n         @Override\n-        RecordReference<PropertyRecord> property( RecordAccess records, long id )\n+        RecordReference<PropertyRecord> property(RecordAccess records, long id)\n         {\n-            return records.property( id );\n+          return records.property(id);\n         }\n \n         @Override\n-        RecordReference<NodeRecord> node( RecordAccess records, long id )\n+        RecordReference<NodeRecord> node(RecordAccess records, long id)\n         {\n-            return records.node( id );\n+          return records.node(id);\n         }\n \n         @Override\n-        RecordReference<RelationshipRecord> relationship( RecordAccess records, long id )\n+        RecordReference<RelationshipRecord> relationship(RecordAccess records, long id)\n         {\n-            return records.relationship( id );\n+          return records.relationship(id);\n         }\n \n         @Override\n-        RecordReference<NeoStoreRecord> graph( RecordAccess records )\n+        RecordReference<NeoStoreRecord> graph(RecordAccess records)\n         {\n-            return records.graph();\n+          return records.graph();\n         }\n \n         @Override\n-        void wrongOwner( ConsistencyReport.PropertyConsistencyReport report )\n+        void wrongOwner(ConsistencyReport.PropertyConsistencyReport report)\n         {\n-            report.ownerDoesNotReferenceBack();\n+          report.ownerDoesNotReferenceBack();\n         }\n-    };\n-\n-    private final ComparativeRecordChecker<PropertyRecord, PrimitiveRecord, ConsistencyReport.PropertyConsistencyReport>\n-            OWNER_CHECK =\n-            ( record, owner, engine, records ) ->\n-            {\n-                if ( !owner.inUse() && !record.inUse() )\n-                {\n-                    return;\n-                }\n-                if ( !owner.inUse() || Record.NO_NEXT_PROPERTY.is( owner.getNextProp() ) )\n-                {\n-                    wrongOwner( engine.report() );\n-                }\n-                else if ( owner.getNextProp() != record.getId() )\n-                {\n-                    engine.comparativeCheck( property( records, owner.getNextProp() ),\n-                                             OwnerChain.this );\n-                }\n-            };\n-\n-    @Override\n-    public void checkReference( PropertyRecord record, PropertyRecord property,\n-                                CheckerEngine<PropertyRecord, ConsistencyReport.PropertyConsistencyReport> engine,\n-                                RecordAccess records )\n-    {\n-        if ( record.getId() != property.getId() )\n+      };\n+\n+  private final ComparativeRecordChecker<PropertyRecord, PrimitiveRecord, ConsistencyReport.PropertyConsistencyReport>\n+      OWNER_CHECK =\n+      (record, owner, engine, records) ->\n+      {\n+        if (!owner.inUse() && !record.inUse())\n         {\n-            if ( !property.inUse() || Record.NO_NEXT_PROPERTY.is( property.getNextProp() ) )\n-            {\n-                wrongOwner( engine.report() );\n-            }\n-            else if ( property.getNextProp() != record.getId() )\n-            {\n-                engine.comparativeCheck( property( records, property.getNextProp() ), this );\n-            }\n+          return;\n         }\n-    }\n+        if (!owner.inUse() || Record.NO_NEXT_PROPERTY.is(owner.getNextProp()))\n+        {\n+          wrongOwner(engine.report());\n+        } else if (owner.getNextProp() != record.getId())\n+        {\n+          engine.comparativeCheck(property(records, owner.getNextProp()),\n+              OwnerChain.this);\n+        }\n+      };\n \n-    public void check( PropertyRecord record,\n-                CheckerEngine<PropertyRecord, ConsistencyReport.PropertyConsistencyReport> engine,\n-                RecordAccess records )\n+  @Override\n+  public void checkReference(PropertyRecord record, PropertyRecord property,\n+                             CheckerEngine<PropertyRecord, ConsistencyReport.PropertyConsistencyReport> engine,\n+                             RecordAccess records)\n+  {\n+    if (record.getId() != property.getId())\n     {\n-        engine.comparativeCheck( ownerOf( record, records ), OWNER_CHECK );\n+      if (!property.inUse() || Record.NO_NEXT_PROPERTY.is(property.getNextProp()))\n+      {\n+        wrongOwner(engine.report());\n+      } else if (property.getNextProp() != record.getId())\n+      {\n+        engine.comparativeCheck(property(records, property.getNextProp()), this);\n+      }\n     }\n+  }\n+\n+  public void check(PropertyRecord record,\n+                    CheckerEngine<PropertyRecord, ConsistencyReport.PropertyConsistencyReport> engine,\n+                    RecordAccess records)\n+  {\n+    engine.comparativeCheck(ownerOf(record, records), OWNER_CHECK);\n+  }\n \n-    private RecordReference<? extends PrimitiveRecord> ownerOf( PropertyRecord record, RecordAccess records )\n+  private RecordReference<? extends PrimitiveRecord> ownerOf(PropertyRecord record, RecordAccess records)\n+  {\n+    if (record.getNodeId() != -1)\n     {\n-        if ( record.getNodeId() != -1 )\n-        {\n-            return node( records, record.getNodeId() );\n-        }\n-        else if ( record.getRelId() != -1 )\n-        {\n-            return relationship( records, record.getRelId() );\n-        }\n-        else\n-        {\n-            return graph( records );\n-        }\n+      return node(records, record.getNodeId());\n+    } else if (record.getRelId() != -1)\n+    {\n+      return relationship(records, record.getRelId());\n+    } else\n+    {\n+      return graph(records);\n     }\n+  }\n \n-    abstract RecordReference<PropertyRecord> property( RecordAccess records, long id );\n+  abstract RecordReference<PropertyRecord> property(RecordAccess records, long id);\n \n-    abstract RecordReference<NodeRecord> node( RecordAccess records, long id );\n+  abstract RecordReference<NodeRecord> node(RecordAccess records, long id);\n \n-    abstract RecordReference<RelationshipRecord> relationship( RecordAccess records, long id );\n+  abstract RecordReference<RelationshipRecord> relationship(RecordAccess records, long id);\n \n-    abstract RecordReference<NeoStoreRecord> graph( RecordAccess records );\n+  abstract RecordReference<NeoStoreRecord> graph(RecordAccess records);\n \n-    abstract void wrongOwner( ConsistencyReport.PropertyConsistencyReport report );\n+  abstract void wrongOwner(ConsistencyReport.PropertyConsistencyReport report);\n }\n",
            "diff_size": 100
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 172).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4043/OwnerChain.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4043/OwnerChain.java\nindex d9e8bf7a645..c8b4e12e8c8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4043/OwnerChain.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4043/OwnerChain.java\n@@ -30,8 +30,7 @@ import org.neo4j.kernel.impl.store.record.Record;\n import org.neo4j.kernel.impl.store.record.RelationshipRecord;\n \n // TODO: it would be great if this also checked for cyclic chains. (we would also need cycle checking for full check, and for relationships)\n-public enum OwnerChain\n-        implements ComparativeRecordChecker<PropertyRecord, PropertyRecord, ConsistencyReport.PropertyConsistencyReport>\n+public enum OwnerChain implements ComparativeRecordChecker<PropertyRecord, PropertyRecord, ConsistencyReport.PropertyConsistencyReport>\n {\n     NEW\n     {\n@@ -66,30 +65,27 @@ public enum OwnerChain\n         }\n     };\n \n-    private final ComparativeRecordChecker<PropertyRecord, PrimitiveRecord, ConsistencyReport.PropertyConsistencyReport>\n-            OWNER_CHECK =\n-            ( record, owner, engine, records ) ->\n+    private final ComparativeRecordChecker<PropertyRecord, PrimitiveRecord, ConsistencyReport.PropertyConsistencyReport> OWNER_CHECK = ( record, owner, engine, records ) ->\n             {\n                 if ( !owner.inUse() && !record.inUse() )\n                 {\n                     return;\n                 }\n-                if ( !owner.inUse() || Record.NO_NEXT_PROPERTY.is( owner.getNextProp() ) )\n+\n+if ( !owner.inUse() || Record.NO_NEXT_PROPERTY.is( owner.getNextProp() ) )\n                 {\n                     wrongOwner( engine.report() );\n                 }\n                 else if ( owner.getNextProp() != record.getId() )\n                 {\n-                    engine.comparativeCheck( property( records, owner.getNextProp() ),\n-                                             OwnerChain.this );\n-                }\n+                    engine.comparativeCheck( property( records, owner.getNextProp() ), OwnerChain.this );\n+    }\n             };\n \n-    @Override\n-    public void checkReference( PropertyRecord record, PropertyRecord property,\n-                                CheckerEngine<PropertyRecord, ConsistencyReport.PropertyConsistencyReport> engine,\n+@Override\n+    public void checkReference( PropertyRecord record, PropertyRecord property, CheckerEngine<PropertyRecord, ConsistencyReport.PropertyConsistencyReport> engine,\n                                 RecordAccess records )\n-    {\n+{\n         if ( record.getId() != property.getId() )\n         {\n             if ( !property.inUse() || Record.NO_NEXT_PROPERTY.is( property.getNextProp() ) )\n@@ -103,10 +99,9 @@ public enum OwnerChain\n         }\n     }\n \n-    public void check( PropertyRecord record,\n-                CheckerEngine<PropertyRecord, ConsistencyReport.PropertyConsistencyReport> engine,\n+    public void check( PropertyRecord record, CheckerEngine<PropertyRecord, ConsistencyReport.PropertyConsistencyReport> engine,\n                 RecordAccess records )\n-    {\n+{\n         engine.comparativeCheck( ownerOf( record, records ), OWNER_CHECK );\n     }\n \n@@ -135,4 +130,4 @@ public enum OwnerChain\n     abstract RecordReference<NeoStoreRecord> graph( RecordAccess records );\n \n     abstract void wrongOwner( ConsistencyReport.PropertyConsistencyReport report );\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}