{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4555",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "44",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "70",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "73",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4555/InconsistencyReportReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4555/InconsistencyReportReader.java\nindex 87e849daf94..55706969159 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4555/InconsistencyReportReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4555/InconsistencyReportReader.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.tools.dump;\n \n import java.io.BufferedReader;\n@@ -38,131 +39,129 @@ import org.neo4j.tools.dump.inconsistency.Inconsistencies;\n  */\n public class InconsistencyReportReader\n {\n-    private final Inconsistencies inconsistencies;\n+  private final Inconsistencies inconsistencies;\n \n-    public InconsistencyReportReader( Inconsistencies inconsistencies )\n-    {\n-        this.inconsistencies = inconsistencies;\n-    }\n+  public InconsistencyReportReader(Inconsistencies inconsistencies)\n+  {\n+    this.inconsistencies = inconsistencies;\n+  }\n \n-    public void read( File file ) throws IOException\n+  public void read(File file) throws IOException\n+  {\n+    try (BufferedReader reader = new BufferedReader(new FileReader(file)))\n     {\n-        try ( BufferedReader reader = new BufferedReader( new FileReader( file ) ) )\n-        {\n-            read( reader );\n-        }\n+      read(reader);\n     }\n+  }\n \n-    public void read( BufferedReader bufferedReader ) throws IOException\n+  public void read(BufferedReader bufferedReader) throws IOException\n+  {\n+    int state = 0; // 0:inconsistency description, 1:entity, 2:inconsistent with\n+    String line;\n+    while ((line = bufferedReader.readLine()) != null)\n     {\n-        int state = 0; // 0:inconsistency description, 1:entity, 2:inconsistent with\n-        String line;\n-        while ( (line = bufferedReader.readLine()) != null )\n+      line = line.trim();\n+      if (state == 0)\n+      {\n+        if (!line.contains(\"ERROR\") && !line.contains(\" WARNING \"))\n         {\n-            line = line.trim();\n-            if ( state == 0 )\n-            {\n-                if ( !line.contains( \"ERROR\" ) && !line.contains( \" WARNING \" ) )\n-                {\n-                    continue;\n-                }\n-            }\n-            else if ( state == 1 )\n-            {\n-                tryPropagate( line );\n-            }\n-            else if ( state == 2 )\n-            {\n-                if ( line.startsWith( \"Inconsistent with: \" ) )\n-                {\n-                    line = line.substring( \"Inconsistent with: \".length() );\n-                }\n-\n-                tryPropagate( line );\n-            }\n-            state = (state + 1) % 3;\n+          continue;\n         }\n-    }\n-\n-    private void tryPropagate( String line )\n-    {\n-        String entityType = entityType( line );\n-        long id = id( line );\n-        if ( entityType != null && id != -1 )\n+      } else if (state == 1)\n+      {\n+        tryPropagate(line);\n+      } else if (state == 2)\n+      {\n+        if (line.startsWith(\"Inconsistent with: \"))\n         {\n-            propagate( entityType, id );\n+          line = line.substring(\"Inconsistent with: \".length());\n         }\n-    }\n \n-    private void propagate( String entityType, long id )\n-    {\n-        switch ( entityType )\n-        {\n-        case \"Relationship\":\n-            inconsistencies.relationship( id );\n-            break;\n-        case \"Node\":\n-            inconsistencies.node( id );\n-            break;\n-        case \"Property\":\n-            inconsistencies.property( id );\n-            break;\n-        case \"RelationshipGroup\":\n-            inconsistencies.relationshipGroup( id );\n-            break;\n-        case \"IndexRule\":\n-            inconsistencies.schemaIndex( id );\n-            break;\n-        case \"IndexEntry\":\n-            inconsistencies.node( id );\n-            break;\n-        default:\n-            // it's OK, we just haven't implemented support for this yet\n-        }\n+        tryPropagate(line);\n+      }\n+      state = (state + 1) % 3;\n     }\n+  }\n \n-    private long id( String line )\n+  private void tryPropagate(String line)\n+  {\n+    String entityType = entityType(line);\n+    long id = id(line);\n+    if (entityType != null && id != -1)\n     {\n-        int bracket = line.indexOf( '[' );\n-        if ( bracket > -1 )\n-        {\n-            int separator = min( getSeparatorIndex( ',', line, bracket ),\n-                    getSeparatorIndex( ';', line, bracket ),\n-                    getSeparatorIndex( ']', line, bracket ) );\n-            int equally = line.indexOf( '=', bracket );\n-            int startPosition = (isNotPlainId( bracket, separator, equally ) ? equally : bracket) + 1;\n-            if ( separator > -1 )\n-            {\n-                return Long.parseLong( line.substring( startPosition, separator ) );\n-            }\n-        }\n-        return -1;\n+      propagate(entityType, id);\n     }\n+  }\n \n-    private static int min( int... values )\n+  private void propagate(String entityType, long id)\n+  {\n+    switch (entityType)\n     {\n-        int min = Integer.MAX_VALUE;\n-        for ( int value : values )\n-        {\n-            min = Math.min( min, value );\n-        }\n-        return min;\n+      case \"Relationship\":\n+        inconsistencies.relationship(id);\n+        break;\n+      case \"Node\":\n+        inconsistencies.node(id);\n+        break;\n+      case \"Property\":\n+        inconsistencies.property(id);\n+        break;\n+      case \"RelationshipGroup\":\n+        inconsistencies.relationshipGroup(id);\n+        break;\n+      case \"IndexRule\":\n+        inconsistencies.schemaIndex(id);\n+        break;\n+      case \"IndexEntry\":\n+        inconsistencies.node(id);\n+        break;\n+      default:\n+        // it's OK, we just haven't implemented support for this yet\n     }\n+  }\n \n-    private int getSeparatorIndex( char character, String line, int bracket )\n+  private long id(String line)\n+  {\n+    int bracket = line.indexOf('[');\n+    if (bracket > -1)\n     {\n-        int index = line.indexOf( character, bracket );\n-        return index >= 0 ? index : Integer.MAX_VALUE;\n+      int separator = min(getSeparatorIndex(',', line, bracket),\n+          getSeparatorIndex(';', line, bracket),\n+          getSeparatorIndex(']', line, bracket));\n+      int equally = line.indexOf('=', bracket);\n+      int startPosition = (isNotPlainId(bracket, separator, equally) ? equally : bracket) + 1;\n+      if (separator > -1)\n+      {\n+        return Long.parseLong(line.substring(startPosition, separator));\n+      }\n     }\n+    return -1;\n+  }\n \n-    private boolean isNotPlainId( int bracket, int comma, int equally )\n+  private static int min(int... values)\n+  {\n+    int min = Integer.MAX_VALUE;\n+    for (int value : values)\n     {\n-        return (equally > bracket) && (equally < comma);\n+      min = Math.min(min, value);\n     }\n+    return min;\n+  }\n \n-    private String entityType( String line )\n-    {\n-        int bracket = line.indexOf( '[' );\n-        return bracket == -1 ? null : line.substring( 0, bracket );\n-    }\n+  private int getSeparatorIndex(char character, String line, int bracket)\n+  {\n+    int index = line.indexOf(character, bracket);\n+    return index >= 0 ? index : Integer.MAX_VALUE;\n+  }\n+\n+  private boolean isNotPlainId(int bracket, int comma, int equally)\n+  {\n+    return (equally > bracket) && (equally < comma);\n+  }\n+\n+  private String entityType(String line)\n+  {\n+    int bracket = line.indexOf('[');\n+    return bracket == -1 ? null : line.substring(0, bracket);\n+  }\n }\n",
            "diff_size": 162
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "160",
                    "column": "25",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4555/InconsistencyReportReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4555/InconsistencyReportReader.java\nindex 87e849daf94..e1705fa1198 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4555/InconsistencyReportReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4555/InconsistencyReportReader.java\n@@ -80,7 +80,8 @@ public class InconsistencyReportReader\n \n                 tryPropagate( line );\n             }\n-            state = (state + 1) % 3;\n+\n+state = (state + 1 ) % 3;\n         }\n     }\n \n@@ -126,10 +127,8 @@ public class InconsistencyReportReader\n         int bracket = line.indexOf( '[' );\n         if ( bracket > -1 )\n         {\n-            int separator = min( getSeparatorIndex( ',', line, bracket ),\n-                    getSeparatorIndex( ';', line, bracket ),\n-                    getSeparatorIndex( ']', line, bracket ) );\n-            int equally = line.indexOf( '=', bracket );\n+            int separator = min( getSeparatorIndex( ',', line, bracket ), getSeparatorIndex( ';', line, bracket ), getSeparatorIndex( ']', line, bracket ) );\n+    int equally = line.indexOf( '=', bracket );\n             int startPosition = (isNotPlainId( bracket, separator, equally ) ? equally : bracket) + 1;\n             if ( separator > -1 )\n             {\n@@ -146,7 +145,8 @@ public class InconsistencyReportReader\n         {\n             min = Math.min( min, value );\n         }\n-        return min;\n+\n+return min;\n     }\n \n     private int getSeparatorIndex( char character, String line, int bracket )\n@@ -157,7 +157,7 @@ public class InconsistencyReportReader\n \n     private boolean isNotPlainId( int bracket, int comma, int equally )\n     {\n-        return (equally > bracket) && (equally < comma);\n+        return ( equally> bracket) && ( equally < comma);\n     }\n \n     private String entityType( String line )\n@@ -165,4 +165,4 @@ public class InconsistencyReportReader\n         int bracket = line.indexOf( '[' );\n         return bracket == -1 ? null : line.substring( 0, bracket );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}