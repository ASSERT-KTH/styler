{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3872",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "55",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "119",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "71",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "140",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3872/CsvInputIterator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3872/CsvInputIterator.java\nindex f7ddecc2fdf..663748f69d7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3872/CsvInputIterator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3872/CsvInputIterator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.unsafe.impl.batchimport.input.csv;\n \n import java.io.Closeable;\n@@ -45,85 +46,84 @@ import static org.neo4j.unsafe.impl.batchimport.input.csv.CsvGroupInputIterator.\n  */\n class CsvInputIterator implements SourceTraceability, Closeable\n {\n-    private final CharReadable stream;\n-    private final Chunker chunker;\n-    private final int groupId;\n-    private final Decorator decorator;\n-    private final Supplier<CsvInputChunk> realInputChunkSupplier;\n+  private final CharReadable stream;\n+  private final Chunker chunker;\n+  private final int groupId;\n+  private final Decorator decorator;\n+  private final Supplier<CsvInputChunk> realInputChunkSupplier;\n \n-    CsvInputIterator( CharReadable stream, Decorator decorator, Header header, Configuration config, IdType idType, Collector badCollector,\n-            Extractors extractors, int groupId )\n+  CsvInputIterator(CharReadable stream, Decorator decorator, Header header, Configuration config, IdType idType, Collector badCollector,\n+                   Extractors extractors, int groupId)\n+  {\n+    this.stream = stream;\n+    this.decorator = decorator;\n+    this.groupId = groupId;\n+    if (config.multilineFields())\n     {\n-        this.stream = stream;\n-        this.decorator = decorator;\n-        this.groupId = groupId;\n-        if ( config.multilineFields() )\n-        {\n-            // If we're expecting multi-line fields then there's no way to arbitrarily chunk the underlying data source\n-            // and find record delimiters with certainty. This is why we opt for a chunker that does parsing inside\n-            // the call that normally just hands out an arbitrary amount of characters to parse outside and in parallel.\n-            // This chunker is single-threaded, as it was previously too and keeps the functionality of multi-line fields.\n-            this.chunker = new EagerParserChunker( stream, idType, header, badCollector, extractors, 1_000, config, decorator );\n-            this.realInputChunkSupplier = EagerCsvInputChunk::new;\n-        }\n-        else\n-        {\n-            this.chunker = new ClosestNewLineChunker( stream, config.bufferSize() );\n-            this.realInputChunkSupplier = () -> new LazyCsvInputChunk( idType, config.delimiter(), badCollector,\n-                    extractors( config ), chunker.newChunk(), config, decorator, header );\n-        }\n-    }\n-\n-    CsvInputIterator( CharReadable stream, Decorator decorator, Header.Factory headerFactory, IdType idType, Configuration config, Groups groups,\n-            Collector badCollector, Extractors extractors, int groupId ) throws IOException\n+      // If we're expecting multi-line fields then there's no way to arbitrarily chunk the underlying data source\n+      // and find record delimiters with certainty. This is why we opt for a chunker that does parsing inside\n+      // the call that normally just hands out an arbitrary amount of characters to parse outside and in parallel.\n+      // This chunker is single-threaded, as it was previously too and keeps the functionality of multi-line fields.\n+      this.chunker = new EagerParserChunker(stream, idType, header, badCollector, extractors, 1_000, config, decorator);\n+      this.realInputChunkSupplier = EagerCsvInputChunk::new;\n+    } else\n     {\n-        this( stream, decorator, extractHeader( stream, headerFactory, idType, config, groups ), config, idType, badCollector, extractors, groupId );\n+      this.chunker = new ClosestNewLineChunker(stream, config.bufferSize());\n+      this.realInputChunkSupplier = () -> new LazyCsvInputChunk(idType, config.delimiter(), badCollector,\n+          extractors(config), chunker.newChunk(), config, decorator, header);\n     }\n+  }\n \n-    static Header extractHeader( CharReadable stream, Header.Factory headerFactory, IdType idType,\n-            Configuration config, Groups groups ) throws IOException\n-    {\n-        if ( !headerFactory.isDefined() )\n-        {\n-            char[] firstLineBuffer = Readables.extractFirstLineFrom( stream );\n-            // make the chunk slightly bigger than the header to not have the seeker think that it's reading\n-            // a value bigger than its max buffer size\n-            ChunkImpl firstChunk = new ChunkImpl( copyOf( firstLineBuffer, firstLineBuffer.length + 1 ) );\n-            firstChunk.initialize( firstLineBuffer.length, stream.sourceDescription() );\n-            CharSeeker firstSeeker = seeker( firstChunk, config );\n-            return headerFactory.create( firstSeeker, config, idType, groups );\n-        }\n-\n-        return headerFactory.create( null, null, null, null );\n-    }\n+  CsvInputIterator(CharReadable stream, Decorator decorator, Header.Factory headerFactory, IdType idType, Configuration config, Groups groups,\n+                   Collector badCollector, Extractors extractors, int groupId) throws IOException\n+  {\n+    this(stream, decorator, extractHeader(stream, headerFactory, idType, config, groups), config, idType, badCollector, extractors, groupId);\n+  }\n \n-    public boolean next( CsvInputChunkProxy proxy ) throws IOException\n+  static Header extractHeader(CharReadable stream, Header.Factory headerFactory, IdType idType,\n+                              Configuration config, Groups groups) throws IOException\n+  {\n+    if (!headerFactory.isDefined())\n     {\n-        proxy.ensureInstantiated( realInputChunkSupplier, groupId );\n-        return proxy.fillFrom( chunker );\n+      char[] firstLineBuffer = Readables.extractFirstLineFrom(stream);\n+      // make the chunk slightly bigger than the header to not have the seeker think that it's reading\n+      // a value bigger than its max buffer size\n+      ChunkImpl firstChunk = new ChunkImpl(copyOf(firstLineBuffer, firstLineBuffer.length + 1));\n+      firstChunk.initialize(firstLineBuffer.length, stream.sourceDescription());\n+      CharSeeker firstSeeker = seeker(firstChunk, config);\n+      return headerFactory.create(firstSeeker, config, idType, groups);\n     }\n \n-    @Override\n-    public void close() throws IOException\n-    {\n-        chunker.close();\n-        decorator.close();\n-    }\n+    return headerFactory.create(null, null, null, null);\n+  }\n \n-    @Override\n-    public String sourceDescription()\n-    {\n-        return stream.sourceDescription();\n-    }\n+  public boolean next(CsvInputChunkProxy proxy) throws IOException\n+  {\n+    proxy.ensureInstantiated(realInputChunkSupplier, groupId);\n+    return proxy.fillFrom(chunker);\n+  }\n \n-    @Override\n-    public long position()\n-    {\n-        return chunker.position();\n-    }\n+  @Override\n+  public void close() throws IOException\n+  {\n+    chunker.close();\n+    decorator.close();\n+  }\n \n-    static CharSeeker seeker( Chunk chunk, Configuration config )\n-    {\n-        return new BufferedCharSeeker( Source.singleChunk( chunk ), config );\n-    }\n+  @Override\n+  public String sourceDescription()\n+  {\n+    return stream.sourceDescription();\n+  }\n+\n+  @Override\n+  public long position()\n+  {\n+    return chunker.position();\n+  }\n+\n+  static CharSeeker seeker(Chunk chunk, Configuration config)\n+  {\n+    return new BufferedCharSeeker(Source.singleChunk(chunk), config);\n+  }\n }\n",
            "diff_size": 99
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3872/CsvInputIterator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3872/CsvInputIterator.java\nindex f7ddecc2fdf..a2651529da4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3872/CsvInputIterator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3872/CsvInputIterator.java\n@@ -71,18 +71,18 @@ class CsvInputIterator implements SourceTraceability, Closeable\n             this.chunker = new ClosestNewLineChunker( stream, config.bufferSize() );\n             this.realInputChunkSupplier = () -> new LazyCsvInputChunk( idType, config.delimiter(), badCollector,\n                     extractors( config ), chunker.newChunk(), config, decorator, header );\n-        }\n+    }\n     }\n \n     CsvInputIterator( CharReadable stream, Decorator decorator, Header.Factory headerFactory, IdType idType, Configuration config, Groups groups,\n             Collector badCollector, Extractors extractors, int groupId ) throws IOException\n-    {\n+{\n         this( stream, decorator, extractHeader( stream, headerFactory, idType, config, groups ), config, idType, badCollector, extractors, groupId );\n     }\n \n     static Header extractHeader( CharReadable stream, Header.Factory headerFactory, IdType idType,\n             Configuration config, Groups groups ) throws IOException\n-    {\n+{\n         if ( !headerFactory.isDefined() )\n         {\n             char[] firstLineBuffer = Readables.extractFirstLineFrom( stream );\n@@ -126,4 +126,4 @@ class CsvInputIterator implements SourceTraceability, Closeable\n     {\n         return new BufferedCharSeeker( Source.singleChunk( chunk ), config );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}