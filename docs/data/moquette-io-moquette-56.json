{
    "project_name": "moquette-io-moquette",
    "error_id": "56",
    "information": {
        "errors": [
            {
                "line": "51",
                "column": "9",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "        MqttMessage msg = (MqttMessage) message;\n        if (msg.fixedHeader() == null) {\n        \tthrow new IOException(\"Unknown packet\");\n        }\n        MqttMessageType messageType = msg.fixedHeader().messageType();\n        LOG.debug(\"Processing MQTT message, type: {}\", messageType);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/56/NettyMQTTHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/styler/56/NettyMQTTHandler.java\nindex 714984a6ae3..f6a1ac5d1b1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/56/NettyMQTTHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/styler/56/NettyMQTTHandler.java\n@@ -48,7 +48,7 @@ public class NettyMQTTHandler extends ChannelInboundHandlerAdapter {\n     public void channelRead(ChannelHandlerContext ctx, Object message) throws Exception {\n         MqttMessage msg = (MqttMessage) message;\n         if (msg.fixedHeader() == null) {\n-        \tthrow new IOException(\"Unknown packet\");\n+        throw new IOException(\"Unknown packet\");\n         }\n         MqttMessageType messageType = msg.fixedHeader().messageType();\n         LOG.debug(\"Processing MQTT message, type: {}\", messageType);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/56/NettyMQTTHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/intellij/56/NettyMQTTHandler.java\nindex 714984a6ae3..f3fe26f078b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/56/NettyMQTTHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/intellij/56/NettyMQTTHandler.java\n@@ -37,101 +37,101 @@ import java.io.IOException;\n @Sharable\n public class NettyMQTTHandler extends ChannelInboundHandlerAdapter {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(NettyMQTTHandler.class);\n-    private final ProtocolProcessor m_processor;\n+  private static final Logger LOG = LoggerFactory.getLogger(NettyMQTTHandler.class);\n+  private final ProtocolProcessor m_processor;\n \n-    public NettyMQTTHandler(ProtocolProcessor processor) {\n-        m_processor = processor;\n-    }\n+  public NettyMQTTHandler(ProtocolProcessor processor) {\n+    m_processor = processor;\n+  }\n \n-    @Override\n-    public void channelRead(ChannelHandlerContext ctx, Object message) throws Exception {\n-        MqttMessage msg = (MqttMessage) message;\n-        if (msg.fixedHeader() == null) {\n-        \tthrow new IOException(\"Unknown packet\");\n-        }\n-        MqttMessageType messageType = msg.fixedHeader().messageType();\n-        LOG.debug(\"Processing MQTT message, type: {}\", messageType);\n-        try {\n-            switch (messageType) {\n-                case CONNECT:\n-                    m_processor.processConnect(ctx.channel(), (MqttConnectMessage) msg);\n-                    break;\n-                case SUBSCRIBE:\n-                    m_processor.processSubscribe(ctx.channel(), (MqttSubscribeMessage) msg);\n-                    break;\n-                case UNSUBSCRIBE:\n-                    m_processor.processUnsubscribe(ctx.channel(), (MqttUnsubscribeMessage) msg);\n-                    break;\n-                case PUBLISH:\n-                    m_processor.processPublish(ctx.channel(), (MqttPublishMessage) msg);\n-                    break;\n-                case PUBREC:\n-                    m_processor.processPubRec(ctx.channel(), msg);\n-                    break;\n-                case PUBCOMP:\n-                    m_processor.processPubComp(ctx.channel(), msg);\n-                    break;\n-                case PUBREL:\n-                    m_processor.processPubRel(ctx.channel(), msg);\n-                    break;\n-                case DISCONNECT:\n-                    m_processor.processDisconnect(ctx.channel());\n-                    break;\n-                case PUBACK:\n-                    m_processor.processPubAck(ctx.channel(), (MqttPubAckMessage) msg);\n-                    break;\n-                case PINGREQ:\n-                    MqttFixedHeader pingHeader = new MqttFixedHeader(\n-                            MqttMessageType.PINGRESP,\n-                            false,\n-                            AT_MOST_ONCE,\n-                            false,\n-                            0);\n-                    MqttMessage pingResp = new MqttMessage(pingHeader);\n-                    ctx.writeAndFlush(pingResp).addListener(CLOSE_ON_FAILURE);\n-                    break;\n-                default:\n-                    LOG.error(\"Unknown MessageType: {}\", messageType);\n-                    break;\n-            }\n-        } catch (Throwable ex) {\n-            //ctx.fireExceptionCaught(ex);\n-            LOG.error(\"Error processing protocol message: {}\", messageType, ex);\n-            ctx.channel().close().addListener(new ChannelFutureListener() {\n-                @Override\n-                public void operationComplete(ChannelFuture future) {\n-                    LOG.info(\"Closed client channel due to exception in processing\");\n-                }\n-            });\n-        } finally {\n-            ReferenceCountUtil.release(msg);\n-        }\n+  @Override\n+  public void channelRead(ChannelHandlerContext ctx, Object message) throws Exception {\n+    MqttMessage msg = (MqttMessage) message;\n+    if (msg.fixedHeader() == null) {\n+      throw new IOException(\"Unknown packet\");\n     }\n-\n-    @Override\n-    public void channelInactive(ChannelHandlerContext ctx) {\n-        String clientID = NettyUtils.clientID(ctx.channel());\n-        if (clientID != null && !clientID.isEmpty()) {\n-            LOG.info(\"Notifying connection lost event. MqttClientId = {}\", clientID);\n-            m_processor.processConnectionLost(clientID, ctx.channel());\n+    MqttMessageType messageType = msg.fixedHeader().messageType();\n+    LOG.debug(\"Processing MQTT message, type: {}\", messageType);\n+    try {\n+      switch (messageType) {\n+        case CONNECT:\n+          m_processor.processConnect(ctx.channel(), (MqttConnectMessage) msg);\n+          break;\n+        case SUBSCRIBE:\n+          m_processor.processSubscribe(ctx.channel(), (MqttSubscribeMessage) msg);\n+          break;\n+        case UNSUBSCRIBE:\n+          m_processor.processUnsubscribe(ctx.channel(), (MqttUnsubscribeMessage) msg);\n+          break;\n+        case PUBLISH:\n+          m_processor.processPublish(ctx.channel(), (MqttPublishMessage) msg);\n+          break;\n+        case PUBREC:\n+          m_processor.processPubRec(ctx.channel(), msg);\n+          break;\n+        case PUBCOMP:\n+          m_processor.processPubComp(ctx.channel(), msg);\n+          break;\n+        case PUBREL:\n+          m_processor.processPubRel(ctx.channel(), msg);\n+          break;\n+        case DISCONNECT:\n+          m_processor.processDisconnect(ctx.channel());\n+          break;\n+        case PUBACK:\n+          m_processor.processPubAck(ctx.channel(), (MqttPubAckMessage) msg);\n+          break;\n+        case PINGREQ:\n+          MqttFixedHeader pingHeader = new MqttFixedHeader(\n+              MqttMessageType.PINGRESP,\n+              false,\n+              AT_MOST_ONCE,\n+              false,\n+              0);\n+          MqttMessage pingResp = new MqttMessage(pingHeader);\n+          ctx.writeAndFlush(pingResp).addListener(CLOSE_ON_FAILURE);\n+          break;\n+        default:\n+          LOG.error(\"Unknown MessageType: {}\", messageType);\n+          break;\n+      }\n+    } catch (Throwable ex) {\n+      //ctx.fireExceptionCaught(ex);\n+      LOG.error(\"Error processing protocol message: {}\", messageType, ex);\n+      ctx.channel().close().addListener(new ChannelFutureListener() {\n+        @Override\n+        public void operationComplete(ChannelFuture future) {\n+          LOG.info(\"Closed client channel due to exception in processing\");\n         }\n-        ctx.close().addListener(CLOSE_ON_FAILURE);\n+      });\n+    } finally {\n+      ReferenceCountUtil.release(msg);\n     }\n+  }\n \n-    @Override\n-    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n-        LOG.error(\"Unexpected exception while processing MQTT message. Closing Netty channel. CId={}\",\n-            NettyUtils.clientID(ctx.channel()), cause);\n-        ctx.close().addListener(CLOSE_ON_FAILURE);\n+  @Override\n+  public void channelInactive(ChannelHandlerContext ctx) {\n+    String clientID = NettyUtils.clientID(ctx.channel());\n+    if (clientID != null && !clientID.isEmpty()) {\n+      LOG.info(\"Notifying connection lost event. MqttClientId = {}\", clientID);\n+      m_processor.processConnectionLost(clientID, ctx.channel());\n     }\n+    ctx.close().addListener(CLOSE_ON_FAILURE);\n+  }\n \n-    @Override\n-    public void channelWritabilityChanged(ChannelHandlerContext ctx) {\n-        if (ctx.channel().isWritable()) {\n-            m_processor.notifyChannelWritable(ctx.channel());\n-        }\n-        ctx.fireChannelWritabilityChanged();\n+  @Override\n+  public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n+    LOG.error(\"Unexpected exception while processing MQTT message. Closing Netty channel. CId={}\",\n+        NettyUtils.clientID(ctx.channel()), cause);\n+    ctx.close().addListener(CLOSE_ON_FAILURE);\n+  }\n+\n+  @Override\n+  public void channelWritabilityChanged(ChannelHandlerContext ctx) {\n+    if (ctx.channel().isWritable()) {\n+      m_processor.notifyChannelWritable(ctx.channel());\n     }\n+    ctx.fireChannelWritabilityChanged();\n+  }\n \n }\n",
            "diff_size": 145
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/56/NettyMQTTHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/naturalize/56/NettyMQTTHandler.java\nindex 714984a6ae3..8d7ade712d5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/56/NettyMQTTHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/naturalize/56/NettyMQTTHandler.java\n@@ -48,8 +48,8 @@ public class NettyMQTTHandler extends ChannelInboundHandlerAdapter {\n     public void channelRead(ChannelHandlerContext ctx, Object message) throws Exception {\n         MqttMessage msg = (MqttMessage) message;\n         if (msg.fixedHeader() == null) {\n-        \tthrow new IOException(\"Unknown packet\");\n-        }\n+    throw new IOException(\"Unknown packet\");\n+    }\n         MqttMessageType messageType = msg.fixedHeader().messageType();\n         LOG.debug(\"Processing MQTT message, type: {}\", messageType);\n         try {\n@@ -134,4 +134,4 @@ public class NettyMQTTHandler extends ChannelInboundHandlerAdapter {\n         ctx.fireChannelWritabilityChanged();\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "86",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/56/NettyMQTTHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/codebuff/56/NettyMQTTHandler.java\nindex 714984a6ae3..85a408124a9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/56/NettyMQTTHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/codebuff/56/NettyMQTTHandler.java\n@@ -31,9 +31,9 @@ import org.slf4j.LoggerFactory;\n \n import static io.netty.channel.ChannelFutureListener.CLOSE_ON_FAILURE;\n import static io.netty.handler.codec.mqtt.MqttQoS.AT_MOST_ONCE;\n-\n import java.io.IOException;\n \n+\n @Sharable\n public class NettyMQTTHandler extends ChannelInboundHandlerAdapter {\n \n@@ -48,8 +48,9 @@ public class NettyMQTTHandler extends ChannelInboundHandlerAdapter {\n     public void channelRead(ChannelHandlerContext ctx, Object message) throws Exception {\n         MqttMessage msg = (MqttMessage) message;\n         if (msg.fixedHeader() == null) {\n-        \tthrow new IOException(\"Unknown packet\");\n+            throw new IOException(\"Unknown packet\");\n         }\n+\n         MqttMessageType messageType = msg.fixedHeader().messageType();\n         LOG.debug(\"Processing MQTT message, type: {}\", messageType);\n         try {\n@@ -82,12 +83,7 @@ public class NettyMQTTHandler extends ChannelInboundHandlerAdapter {\n                     m_processor.processPubAck(ctx.channel(), (MqttPubAckMessage) msg);\n                     break;\n                 case PINGREQ:\n-                    MqttFixedHeader pingHeader = new MqttFixedHeader(\n-                            MqttMessageType.PINGRESP,\n-                            false,\n-                            AT_MOST_ONCE,\n-                            false,\n-                            0);\n+                    MqttFixedHeader pingHeader = new MqttFixedHeader(MqttMessageType.PINGRESP, false, AT_MOST_ONCE, false, 0);\n                     MqttMessage pingResp = new MqttMessage(pingHeader);\n                     ctx.writeAndFlush(pingResp).addListener(CLOSE_ON_FAILURE);\n                     break;\n@@ -99,6 +95,7 @@ public class NettyMQTTHandler extends ChannelInboundHandlerAdapter {\n             //ctx.fireExceptionCaught(ex);\n             LOG.error(\"Error processing protocol message: {}\", messageType, ex);\n             ctx.channel().close().addListener(new ChannelFutureListener() {\n+\n                 @Override\n                 public void operationComplete(ChannelFuture future) {\n                     LOG.info(\"Closed client channel due to exception in processing\");\n@@ -122,7 +119,8 @@ public class NettyMQTTHandler extends ChannelInboundHandlerAdapter {\n     @Override\n     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n         LOG.error(\"Unexpected exception while processing MQTT message. Closing Netty channel. CId={}\",\n-            NettyUtils.clientID(ctx.channel()), cause);\n+            NettyUtils.clientID(ctx.channel()),\n+            cause);\n         ctx.close().addListener(CLOSE_ON_FAILURE);\n     }\n \n@@ -133,5 +131,4 @@ public class NettyMQTTHandler extends ChannelInboundHandlerAdapter {\n         }\n         ctx.fireChannelWritabilityChanged();\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/56/NettyMQTTHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/styler_random/56/NettyMQTTHandler.java\nindex 714984a6ae3..f6a1ac5d1b1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/56/NettyMQTTHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/styler_random/56/NettyMQTTHandler.java\n@@ -48,7 +48,7 @@ public class NettyMQTTHandler extends ChannelInboundHandlerAdapter {\n     public void channelRead(ChannelHandlerContext ctx, Object message) throws Exception {\n         MqttMessage msg = (MqttMessage) message;\n         if (msg.fixedHeader() == null) {\n-        \tthrow new IOException(\"Unknown packet\");\n+        throw new IOException(\"Unknown packet\");\n         }\n         MqttMessageType messageType = msg.fixedHeader().messageType();\n         LOG.debug(\"Processing MQTT message, type: {}\", messageType);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/56/NettyMQTTHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/styler_three_grams/56/NettyMQTTHandler.java\nindex 714984a6ae3..f2917d4ff27 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/56/NettyMQTTHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/styler_three_grams/56/NettyMQTTHandler.java\n@@ -48,7 +48,7 @@ public class NettyMQTTHandler extends ChannelInboundHandlerAdapter {\n     public void channelRead(ChannelHandlerContext ctx, Object message) throws Exception {\n         MqttMessage msg = (MqttMessage) message;\n         if (msg.fixedHeader() == null) {\n-        \tthrow new IOException(\"Unknown packet\");\n+            throw new IOException(\"Unknown packet\");\n         }\n         MqttMessageType messageType = msg.fixedHeader().messageType();\n         LOG.debug(\"Processing MQTT message, type: {}\", messageType);\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff"
    ]
}