{
    "project_name": "Angel-ML-angel",
    "error_id": "232",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "850",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "855",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "870",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "875",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "880",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "928",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "933",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "938",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "943",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "948",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "953",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "958",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "963",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/232/MFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/232/MFactory.java\nindex 2d37d9e3874..af4da90cb2d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/232/MFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/232/MFactory.java\n@@ -41,7 +41,7 @@ import java.util.HashMap;\n public class MFactory {\n \n   public static RBCompIntDoubleMatrix rbCompIntDoubleMatrix(int matrixId, int clock,\n-      CompIntDoubleVector[] rows) {\n+                                                            CompIntDoubleVector[] rows) {\n     return new RBCompIntDoubleMatrix(matrixId, clock, rows);\n   }\n \n@@ -50,7 +50,7 @@ public class MFactory {\n   }\n \n   public static RBCompIntDoubleMatrix rbCompIntDoubleMatrix(int matrixId, int clock, int numRows,\n-      int numCols, int subDim) {\n+                                                            int numCols, int subDim) {\n     return new RBCompIntDoubleMatrix(matrixId, clock, numRows, numCols, subDim);\n   }\n \n@@ -59,7 +59,8 @@ public class MFactory {\n   }\n \n   public static RBCompIntDoubleMatrix rbCompIntDoubleMatrix(int matrixId, int clock, int numRows,\n-      int numCols, int subDim, StorageType storageType) {\n+                                                            int numCols, int subDim,\n+                                                            StorageType storageType) {\n     CompIntDoubleVector[] rows = new CompIntDoubleVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compIntDoubleVector(matrixId, i, clock, numCols, subDim, storageType);\n@@ -69,7 +70,7 @@ public class MFactory {\n   }\n \n   public static RBCompIntDoubleMatrix rbCompIntDoubleMatrix(int numRows, int numCols, int subDim,\n-      StorageType storageType) {\n+                                                            StorageType storageType) {\n     CompIntDoubleVector[] rows = new CompIntDoubleVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compIntDoubleVector(0, i, 0, numCols, subDim, storageType);\n@@ -79,7 +80,7 @@ public class MFactory {\n   }\n \n   public static RBCompIntFloatMatrix rbCompIntFloatMatrix(int matrixId, int clock,\n-      CompIntFloatVector[] rows) {\n+                                                          CompIntFloatVector[] rows) {\n     return new RBCompIntFloatMatrix(matrixId, clock, rows);\n   }\n \n@@ -88,7 +89,7 @@ public class MFactory {\n   }\n \n   public static RBCompIntFloatMatrix rbCompIntFloatMatrix(int matrixId, int clock, int numRows,\n-      int numCols, int subDim) {\n+                                                          int numCols, int subDim) {\n     return new RBCompIntFloatMatrix(matrixId, clock, numRows, numCols, subDim);\n   }\n \n@@ -97,7 +98,8 @@ public class MFactory {\n   }\n \n   public static RBCompIntFloatMatrix rbCompIntFloatMatrix(int matrixId, int clock, int numRows,\n-      int numCols, int subDim, StorageType storageType) {\n+                                                          int numCols, int subDim,\n+                                                          StorageType storageType) {\n     CompIntFloatVector[] rows = new CompIntFloatVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compIntFloatVector(matrixId, i, clock, numCols, subDim, storageType);\n@@ -107,7 +109,7 @@ public class MFactory {\n   }\n \n   public static RBCompIntFloatMatrix rbCompIntFloatMatrix(int numRows, int numCols, int subDim,\n-      StorageType storageType) {\n+                                                          StorageType storageType) {\n     CompIntFloatVector[] rows = new CompIntFloatVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compIntFloatVector(0, i, 0, numCols, subDim, storageType);\n@@ -117,7 +119,7 @@ public class MFactory {\n   }\n \n   public static RBCompIntLongMatrix rbCompIntLongMatrix(int matrixId, int clock,\n-      CompIntLongVector[] rows) {\n+                                                        CompIntLongVector[] rows) {\n     return new RBCompIntLongMatrix(matrixId, clock, rows);\n   }\n \n@@ -126,7 +128,7 @@ public class MFactory {\n   }\n \n   public static RBCompIntLongMatrix rbCompIntLongMatrix(int matrixId, int clock, int numRows,\n-      int numCols, int subDim) {\n+                                                        int numCols, int subDim) {\n     return new RBCompIntLongMatrix(matrixId, clock, numRows, numCols, subDim);\n   }\n \n@@ -135,7 +137,8 @@ public class MFactory {\n   }\n \n   public static RBCompIntLongMatrix rbCompIntLongMatrix(int matrixId, int clock, int numRows,\n-      int numCols, int subDim, StorageType storageType) {\n+                                                        int numCols, int subDim,\n+                                                        StorageType storageType) {\n     CompIntLongVector[] rows = new CompIntLongVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compIntLongVector(matrixId, i, clock, numCols, subDim, storageType);\n@@ -145,7 +148,7 @@ public class MFactory {\n   }\n \n   public static RBCompIntLongMatrix rbCompIntLongMatrix(int numRows, int numCols, int subDim,\n-      StorageType storageType) {\n+                                                        StorageType storageType) {\n     CompIntLongVector[] rows = new CompIntLongVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compIntLongVector(0, i, 0, numCols, subDim, storageType);\n@@ -155,7 +158,7 @@ public class MFactory {\n   }\n \n   public static RBCompIntIntMatrix rbCompIntIntMatrix(int matrixId, int clock,\n-      CompIntIntVector[] rows) {\n+                                                      CompIntIntVector[] rows) {\n     return new RBCompIntIntMatrix(matrixId, clock, rows);\n   }\n \n@@ -164,7 +167,7 @@ public class MFactory {\n   }\n \n   public static RBCompIntIntMatrix rbCompIntIntMatrix(int matrixId, int clock, int numRows,\n-      int numCols, int subDim) {\n+                                                      int numCols, int subDim) {\n     return new RBCompIntIntMatrix(matrixId, clock, numRows, numCols, subDim);\n   }\n \n@@ -173,7 +176,8 @@ public class MFactory {\n   }\n \n   public static RBCompIntIntMatrix rbCompIntIntMatrix(int matrixId, int clock, int numRows,\n-      int numCols, int subDim, StorageType storageType) {\n+                                                      int numCols, int subDim,\n+                                                      StorageType storageType) {\n     CompIntIntVector[] rows = new CompIntIntVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compIntIntVector(matrixId, i, clock, numCols, subDim, storageType);\n@@ -183,7 +187,7 @@ public class MFactory {\n   }\n \n   public static RBCompIntIntMatrix rbCompIntIntMatrix(int numRows, int numCols, int subDim,\n-      StorageType storageType) {\n+                                                      StorageType storageType) {\n     CompIntIntVector[] rows = new CompIntIntVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compIntIntVector(0, i, 0, numCols, subDim, storageType);\n@@ -193,7 +197,7 @@ public class MFactory {\n   }\n \n   public static RBCompLongDoubleMatrix rbCompLongDoubleMatrix(int matrixId, int clock,\n-      CompLongDoubleVector[] rows) {\n+                                                              CompLongDoubleVector[] rows) {\n     return new RBCompLongDoubleMatrix(matrixId, clock, rows);\n   }\n \n@@ -202,17 +206,18 @@ public class MFactory {\n   }\n \n   public static RBCompLongDoubleMatrix rbCompLongDoubleMatrix(int matrixId, int clock, int numRows,\n-      long numCols, long subDim) {\n+                                                              long numCols, long subDim) {\n     return new RBCompLongDoubleMatrix(matrixId, clock, numRows, numCols, subDim);\n   }\n \n   public static RBCompLongDoubleMatrix rbCompLongDoubleMatrix(int numRows, long numCols,\n-      long subDim) {\n+                                                              long subDim) {\n     return new RBCompLongDoubleMatrix(numRows, numCols, subDim);\n   }\n \n   public static RBCompLongDoubleMatrix rbCompLongDoubleMatrix(int matrixId, int clock, int numRows,\n-      long numCols, long subDim, StorageType storageType) {\n+                                                              long numCols, long subDim,\n+                                                              StorageType storageType) {\n     CompLongDoubleVector[] rows = new CompLongDoubleVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compLongDoubleVector(matrixId, i, clock, numCols, subDim, storageType);\n@@ -222,7 +227,8 @@ public class MFactory {\n   }\n \n   public static RBCompLongDoubleMatrix rbCompLongDoubleMatrix(int numRows, long numCols,\n-      long subDim, StorageType storageType) {\n+                                                              long subDim,\n+                                                              StorageType storageType) {\n     CompLongDoubleVector[] rows = new CompLongDoubleVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compLongDoubleVector(0, i, 0, numCols, subDim, storageType);\n@@ -232,7 +238,7 @@ public class MFactory {\n   }\n \n   public static RBCompLongFloatMatrix rbCompLongFloatMatrix(int matrixId, int clock,\n-      CompLongFloatVector[] rows) {\n+                                                            CompLongFloatVector[] rows) {\n     return new RBCompLongFloatMatrix(matrixId, clock, rows);\n   }\n \n@@ -241,17 +247,18 @@ public class MFactory {\n   }\n \n   public static RBCompLongFloatMatrix rbCompLongFloatMatrix(int matrixId, int clock, int numRows,\n-      long numCols, long subDim) {\n+                                                            long numCols, long subDim) {\n     return new RBCompLongFloatMatrix(matrixId, clock, numRows, numCols, subDim);\n   }\n \n   public static RBCompLongFloatMatrix rbCompLongFloatMatrix(int numRows, long numCols,\n-      long subDim) {\n+                                                            long subDim) {\n     return new RBCompLongFloatMatrix(numRows, numCols, subDim);\n   }\n \n   public static RBCompLongFloatMatrix rbCompLongFloatMatrix(int matrixId, int clock, int numRows,\n-      long numCols, long subDim, StorageType storageType) {\n+                                                            long numCols, long subDim,\n+                                                            StorageType storageType) {\n     CompLongFloatVector[] rows = new CompLongFloatVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compLongFloatVector(matrixId, i, clock, numCols, subDim, storageType);\n@@ -261,7 +268,7 @@ public class MFactory {\n   }\n \n   public static RBCompLongFloatMatrix rbCompLongFloatMatrix(int numRows, long numCols, long subDim,\n-      StorageType storageType) {\n+                                                            StorageType storageType) {\n     CompLongFloatVector[] rows = new CompLongFloatVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compLongFloatVector(0, i, 0, numCols, subDim, storageType);\n@@ -271,7 +278,7 @@ public class MFactory {\n   }\n \n   public static RBCompLongLongMatrix rbCompLongLongMatrix(int matrixId, int clock,\n-      CompLongLongVector[] rows) {\n+                                                          CompLongLongVector[] rows) {\n     return new RBCompLongLongMatrix(matrixId, clock, rows);\n   }\n \n@@ -280,7 +287,7 @@ public class MFactory {\n   }\n \n   public static RBCompLongLongMatrix rbCompLongLongMatrix(int matrixId, int clock, int numRows,\n-      long numCols, long subDim) {\n+                                                          long numCols, long subDim) {\n     return new RBCompLongLongMatrix(matrixId, clock, numRows, numCols, subDim);\n   }\n \n@@ -289,7 +296,8 @@ public class MFactory {\n   }\n \n   public static RBCompLongLongMatrix rbCompLongLongMatrix(int matrixId, int clock, int numRows,\n-      long numCols, long subDim, StorageType storageType) {\n+                                                          long numCols, long subDim,\n+                                                          StorageType storageType) {\n     CompLongLongVector[] rows = new CompLongLongVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compLongLongVector(matrixId, i, clock, numCols, subDim, storageType);\n@@ -299,7 +307,7 @@ public class MFactory {\n   }\n \n   public static RBCompLongLongMatrix rbCompLongLongMatrix(int numRows, long numCols, long subDim,\n-      StorageType storageType) {\n+                                                          StorageType storageType) {\n     CompLongLongVector[] rows = new CompLongLongVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compLongLongVector(0, i, 0, numCols, subDim, storageType);\n@@ -309,7 +317,7 @@ public class MFactory {\n   }\n \n   public static RBCompLongIntMatrix rbCompLongIntMatrix(int matrixId, int clock,\n-      CompLongIntVector[] rows) {\n+                                                        CompLongIntVector[] rows) {\n     return new RBCompLongIntMatrix(matrixId, clock, rows);\n   }\n \n@@ -318,7 +326,7 @@ public class MFactory {\n   }\n \n   public static RBCompLongIntMatrix rbCompLongIntMatrix(int matrixId, int clock, int numRows,\n-      long numCols, long subDim) {\n+                                                        long numCols, long subDim) {\n     return new RBCompLongIntMatrix(matrixId, clock, numRows, numCols, subDim);\n   }\n \n@@ -327,7 +335,8 @@ public class MFactory {\n   }\n \n   public static RBCompLongIntMatrix rbCompLongIntMatrix(int matrixId, int clock, int numRows,\n-      long numCols, long subDim, StorageType storageType) {\n+                                                        long numCols, long subDim,\n+                                                        StorageType storageType) {\n     CompLongIntVector[] rows = new CompLongIntVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compLongIntVector(matrixId, i, clock, numCols, subDim, storageType);\n@@ -337,7 +346,7 @@ public class MFactory {\n   }\n \n   public static RBCompLongIntMatrix rbCompLongIntMatrix(int numRows, long numCols, long subDim,\n-      StorageType storageType) {\n+                                                        StorageType storageType) {\n     CompLongIntVector[] rows = new CompLongIntVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compLongIntVector(0, i, 0, numCols, subDim, storageType);\n@@ -349,17 +358,17 @@ public class MFactory {\n   //---------------------------------------------------\n \n   public static RBIntDoubleMatrix rbIntDoubleMatrix(int matrixId, int clock,\n-      IntDoubleVector[] rows) {\n+                                                    IntDoubleVector[] rows) {\n     return new RBIntDoubleMatrix(matrixId, clock, rows);\n   }\n \n   public static RBIntDoubleMatrix rbIntDoubleMatrix(int matrixId, int clock, int numRows,\n-      int numCols) {\n+                                                    int numCols) {\n     return new RBIntDoubleMatrix(matrixId, clock, numRows, numCols);\n   }\n \n   public static RBIntDoubleMatrix rbIntDoubleMatrix(int matrixId, int clock, int numRows,\n-      int numCols, StorageType storageType) {\n+                                                    int numCols, StorageType storageType) {\n     IntDoubleVector[] rows = new IntDoubleVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -379,7 +388,7 @@ public class MFactory {\n   }\n \n   public static RBIntDoubleMatrix rbIntDoubleMatrix(int numRows, int numCols,\n-      StorageType storageType) {\n+                                                    StorageType storageType) {\n     IntDoubleVector[] rows = new IntDoubleVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -411,12 +420,12 @@ public class MFactory {\n   }\n \n   public static RBIntFloatMatrix rbIntFloatMatrix(int matrixId, int clock, int numRows,\n-      int numCols) {\n+                                                  int numCols) {\n     return new RBIntFloatMatrix(matrixId, clock, numRows, numCols);\n   }\n \n   public static RBIntFloatMatrix rbIntFloatMatrix(int matrixId, int clock, int numRows, int numCols,\n-      StorageType storageType) {\n+                                                  StorageType storageType) {\n     IntFloatVector[] rows = new IntFloatVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -436,7 +445,7 @@ public class MFactory {\n   }\n \n   public static RBIntFloatMatrix rbIntFloatMatrix(int numRows, int numCols,\n-      StorageType storageType) {\n+                                                  StorageType storageType) {\n     IntFloatVector[] rows = new IntFloatVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -472,7 +481,7 @@ public class MFactory {\n   }\n \n   public static RBIntLongMatrix rbIntLongMatrix(int matrixId, int clock, int numRows, int numCols,\n-      StorageType storageType) {\n+                                                StorageType storageType) {\n     IntLongVector[] rows = new IntLongVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -527,7 +536,7 @@ public class MFactory {\n   }\n \n   public static RBIntIntMatrix rbIntIntMatrix(int matrixId, int clock, int numRows, int numCols,\n-      StorageType storageType) {\n+                                              StorageType storageType) {\n     IntIntVector[] rows = new IntIntVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -574,17 +583,17 @@ public class MFactory {\n   }\n \n   public static RBLongDoubleMatrix rbLongDoubleMatrix(int matrixId, int clock,\n-      LongDoubleVector[] rows) {\n+                                                      LongDoubleVector[] rows) {\n     return new RBLongDoubleMatrix(matrixId, clock, rows);\n   }\n \n   public static RBLongDoubleMatrix rbLongDoubleMatrix(int matrixId, int clock, int numRows,\n-      long numCols) {\n+                                                      long numCols) {\n     return new RBLongDoubleMatrix(matrixId, clock, numRows, numCols);\n   }\n \n   public static RBLongDoubleMatrix rbLongDoubleMatrix(int matrixId, int clock, int numRows,\n-      long numCols, StorageType storageType) {\n+                                                      long numCols, StorageType storageType) {\n     LongDoubleVector[] rows = new LongDoubleVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -603,7 +612,7 @@ public class MFactory {\n   }\n \n   public static RBLongDoubleMatrix rbLongDoubleMatrix(int numRows, long numCols,\n-      StorageType storageType) {\n+                                                      StorageType storageType) {\n     LongDoubleVector[] rows = new LongDoubleVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -630,17 +639,17 @@ public class MFactory {\n   }\n \n   public static RBLongFloatMatrix rbLongFloatMatrix(int matrixId, int clock,\n-      LongFloatVector[] rows) {\n+                                                    LongFloatVector[] rows) {\n     return new RBLongFloatMatrix(matrixId, clock, rows);\n   }\n \n   public static RBLongFloatMatrix rbLongFloatMatrix(int matrixId, int clock, int numRows,\n-      long numCols) {\n+                                                    long numCols) {\n     return new RBLongFloatMatrix(matrixId, clock, numRows, numCols);\n   }\n \n   public static RBLongFloatMatrix rbLongFloatMatrix(int matrixId, int clock, int numRows,\n-      long numCols, StorageType storageType) {\n+                                                    long numCols, StorageType storageType) {\n     LongFloatVector[] rows = new LongFloatVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -659,7 +668,7 @@ public class MFactory {\n   }\n \n   public static RBLongFloatMatrix rbLongFloatMatrix(int numRows, long numCols,\n-      StorageType storageType) {\n+                                                    StorageType storageType) {\n     LongFloatVector[] rows = new LongFloatVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -690,12 +699,12 @@ public class MFactory {\n   }\n \n   public static RBLongLongMatrix rbLongLongMatrix(int matrixId, int clock, int numRows,\n-      long numCols) {\n+                                                  long numCols) {\n     return new RBLongLongMatrix(matrixId, clock, numRows, numCols);\n   }\n \n   public static RBLongLongMatrix rbLongLongMatrix(int matrixId, int clock, int numRows,\n-      long numCols, StorageType storageType) {\n+                                                  long numCols, StorageType storageType) {\n     LongLongVector[] rows = new LongLongVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -714,7 +723,7 @@ public class MFactory {\n   }\n \n   public static RBLongLongMatrix rbLongLongMatrix(int numRows, long numCols,\n-      StorageType storageType) {\n+                                                  StorageType storageType) {\n     LongLongVector[] rows = new LongLongVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -745,12 +754,12 @@ public class MFactory {\n   }\n \n   public static RBLongIntMatrix rbLongIntMatrix(int matrixId, int clock, int numRows,\n-      long numCols) {\n+                                                long numCols) {\n     return new RBLongIntMatrix(matrixId, clock, numRows, numCols);\n   }\n \n   public static RBLongIntMatrix rbLongIntMatrix(int matrixId, int clock, int numRows, long numCols,\n-      StorageType storageType) {\n+                                                StorageType storageType) {\n     LongIntVector[] rows = new LongIntVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -769,7 +778,7 @@ public class MFactory {\n   }\n \n   public static RBLongIntMatrix rbLongIntMatrix(int numRows, long numCols,\n-      StorageType storageType) {\n+                                                StorageType storageType) {\n     LongIntVector[] rows = new LongIntVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -798,12 +807,12 @@ public class MFactory {\n   //---------------------------------------------------\n \n   public static BlasDoubleMatrix denseDoubleMatrix(int matrixId, int clock, int numRows,\n-      int numCols, double[] data) {\n+                                                   int numCols, double[] data) {\n     return new BlasDoubleMatrix(matrixId, clock, numRows, numCols, data);\n   }\n \n   public static BlasDoubleMatrix denseDoubleMatrix(int matrixId, int clock, int numRows,\n-      int numCols) {\n+                                                   int numCols) {\n     double[] data = new double[numRows * numCols];\n     return new BlasDoubleMatrix(matrixId, clock, numRows, numCols, data);\n   }\n@@ -818,12 +827,12 @@ public class MFactory {\n   }\n \n   public static BlasFloatMatrix denseFloatMatrix(int matrixId, int clock, int numRows, int numCols,\n-      float[] data) {\n+                                                 float[] data) {\n     return new BlasFloatMatrix(matrixId, clock, numRows, numCols, data);\n   }\n \n   public static BlasFloatMatrix denseFloatMatrix(int matrixId, int clock, int numRows,\n-      int numCols) {\n+                                                 int numCols) {\n     float[] data = new float[numRows * numCols];\n     return new BlasFloatMatrix(matrixId, clock, numRows, numCols, data);\n   }\n@@ -838,42 +847,42 @@ public class MFactory {\n   }\n \n   public static MapMatrix<IntDoubleVector> intDoubleMapMatrix(int matrixId, int clock,\n-      HashMap<Long, IntDoubleVector> mapMatrix) {\n+                                                              HashMap<Long, IntDoubleVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n   public static MapMatrix<IntFloatVector> intFloatMapMatrix(int matrixId, int clock,\n-      HashMap<Long, IntFloatVector> mapMatrix) {\n+                                                            HashMap<Long, IntFloatVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n   public static MapMatrix<IntLongVector> intLongMapMatrix(int matrixId, int clock,\n-      HashMap<Long, IntLongVector> mapMatrix) {\n+                                                          HashMap<Long, IntLongVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n   public static MapMatrix<IntIntVector> intIntMapMatrix(int matrixId, int clock,\n-      HashMap<Long, IntIntVector> mapMatrix) {\n+                                                        HashMap<Long, IntIntVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n   public static MapMatrix<LongDoubleVector> longDoubleMapMatrix(int matrixId, int clock,\n-      HashMap<Long, LongDoubleVector> mapMatrix) {\n+                                                                HashMap<Long, LongDoubleVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n   public static MapMatrix<LongFloatVector> longFloatMapMatrix(int matrixId, int clock,\n-      HashMap<Long, LongFloatVector> mapMatrix) {\n+                                                              HashMap<Long, LongFloatVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n   public static MapMatrix<LongLongVector> longLongMapMatrix(int matrixId, int clock,\n-      HashMap<Long, LongLongVector> mapMatrix) {\n+                                                            HashMap<Long, LongLongVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n   public static MapMatrix<LongIntVector> longIntMapMatrix(int matrixId, int clock,\n-      HashMap<Long, LongIntVector> mapMatrix) {\n+                                                          HashMap<Long, LongIntVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n@@ -916,42 +925,42 @@ public class MFactory {\n   }\n \n   public static MapMatrix<IntDoubleVector> compIntDoubleMapMatrix(int matrixId, int clock,\n-      HashMap<Long, CompIntDoubleVector> mapMatrix) {\n+                                                                  HashMap<Long, CompIntDoubleVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n   public static MapMatrix<IntFloatVector> compIntFloatMapMatrix(int matrixId, int clock,\n-      HashMap<Long, CompIntFloatVector> mapMatrix) {\n+                                                                HashMap<Long, CompIntFloatVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n   public static MapMatrix<IntLongVector> compIntLongMapMatrix(int matrixId, int clock,\n-      HashMap<Long, CompIntLongVector> mapMatrix) {\n+                                                              HashMap<Long, CompIntLongVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n   public static MapMatrix<IntIntVector> compIntIntMapMatrix(int matrixId, int clock,\n-      HashMap<Long, CompIntIntVector> mapMatrix) {\n+                                                            HashMap<Long, CompIntIntVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n   public static MapMatrix<LongDoubleVector> compLongDoubleMapMatrix(int matrixId, int clock,\n-      HashMap<Long, CompLongDoubleVector> mapMatrix) {\n+                                                                    HashMap<Long, CompLongDoubleVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n   public static MapMatrix<LongFloatVector> compLongFloatMapMatrix(int matrixId, int clock,\n-      HashMap<Long, CompLongFloatVector> mapMatrix) {\n+                                                                  HashMap<Long, CompLongFloatVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n   public static MapMatrix<LongLongVector> compLongLongMapMatrix(int matrixId, int clock,\n-      HashMap<Long, CompLongLongVector> mapMatrix) {\n+                                                                HashMap<Long, CompLongLongVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n   public static MapMatrix<LongIntVector> compLongIntMapMatrix(int matrixId, int clock,\n-      HashMap<Long, CompLongIntVector> mapMatrix) {\n+                                                              HashMap<Long, CompLongIntVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n@@ -1042,7 +1051,7 @@ public class MFactory {\n \n   public static CsrDoubleMatrix csrDoubleMatrix(\n       double[] values, int[] indices, int[] indptr, int[] shape) {\n-    return new CsrDoubleMatrix(0, 0,values,  indices, indptr, shape);\n+    return new CsrDoubleMatrix(0, 0, values, indices, indptr, shape);\n   }\n \n   public static CsrFloatMatrix csrFloatMatrix(\n",
            "diff_size": 87
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 149).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "91",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 147).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "99",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "107",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "115",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "123",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "131",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "139",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "147",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "155",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "163",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "171",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 117).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "179",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "183",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "187",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 153).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "195",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "203",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "211",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "215",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "219",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "227",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "235",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "243",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "251",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 149).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "259",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "267",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "275",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "283",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 147).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "291",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "301",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "305",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "309",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "327",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "357",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "361",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "379",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "413",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "465",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "509",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "513",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "517",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "534",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "559",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "563",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "567",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "584",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "613",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "617",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "634",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "663",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "667",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "684",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "711",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "715",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "729",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "733",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "747",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "751",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "755",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "759",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "763",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "767",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "771",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "775",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "779",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "783",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "787",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "795",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "799",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "803",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "811",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "815",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "819",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "823",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "827",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "831",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "835",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "839",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "843",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "847",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "851",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "855",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "859",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "863",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "867",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "871",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "875",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "879",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "883",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "887",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "891",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "895",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "899",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "903",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "907",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "911",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "915",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "919",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/232/MFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/232/MFactory.java\nindex 2d37d9e3874..e959846e8cf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/232/MFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/232/MFactory.java\n@@ -40,8 +40,7 @@ import java.util.HashMap;\n \n public class MFactory {\n \n-  public static RBCompIntDoubleMatrix rbCompIntDoubleMatrix(int matrixId, int clock,\n-      CompIntDoubleVector[] rows) {\n+  public static RBCompIntDoubleMatrix rbCompIntDoubleMatrix(int matrixId, int clock, CompIntDoubleVector[] rows) {\n     return new RBCompIntDoubleMatrix(matrixId, clock, rows);\n   }\n \n@@ -49,8 +48,7 @@ public class MFactory {\n     return new RBCompIntDoubleMatrix(rows);\n   }\n \n-  public static RBCompIntDoubleMatrix rbCompIntDoubleMatrix(int matrixId, int clock, int numRows,\n-      int numCols, int subDim) {\n+  public static RBCompIntDoubleMatrix rbCompIntDoubleMatrix(int matrixId, int clock, int numRows, int numCols, int subDim) {\n     return new RBCompIntDoubleMatrix(matrixId, clock, numRows, numCols, subDim);\n   }\n \n@@ -58,28 +56,23 @@ public class MFactory {\n     return new RBCompIntDoubleMatrix(numRows, numCols, subDim);\n   }\n \n-  public static RBCompIntDoubleMatrix rbCompIntDoubleMatrix(int matrixId, int clock, int numRows,\n-      int numCols, int subDim, StorageType storageType) {\n+  public static RBCompIntDoubleMatrix rbCompIntDoubleMatrix(int matrixId, int clock, int numRows, int numCols, int subDim, StorageType storageType) {\n     CompIntDoubleVector[] rows = new CompIntDoubleVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compIntDoubleVector(matrixId, i, clock, numCols, subDim, storageType);\n     }\n-\n     return new RBCompIntDoubleMatrix(matrixId, clock, rows);\n   }\n \n-  public static RBCompIntDoubleMatrix rbCompIntDoubleMatrix(int numRows, int numCols, int subDim,\n-      StorageType storageType) {\n+  public static RBCompIntDoubleMatrix rbCompIntDoubleMatrix(int numRows, int numCols, int subDim, StorageType storageType) {\n     CompIntDoubleVector[] rows = new CompIntDoubleVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compIntDoubleVector(0, i, 0, numCols, subDim, storageType);\n     }\n-\n     return new RBCompIntDoubleMatrix(rows);\n   }\n \n-  public static RBCompIntFloatMatrix rbCompIntFloatMatrix(int matrixId, int clock,\n-      CompIntFloatVector[] rows) {\n+  public static RBCompIntFloatMatrix rbCompIntFloatMatrix(int matrixId, int clock, CompIntFloatVector[] rows) {\n     return new RBCompIntFloatMatrix(matrixId, clock, rows);\n   }\n \n@@ -87,8 +80,7 @@ public class MFactory {\n     return new RBCompIntFloatMatrix(rows);\n   }\n \n-  public static RBCompIntFloatMatrix rbCompIntFloatMatrix(int matrixId, int clock, int numRows,\n-      int numCols, int subDim) {\n+  public static RBCompIntFloatMatrix rbCompIntFloatMatrix(int matrixId, int clock, int numRows, int numCols, int subDim) {\n     return new RBCompIntFloatMatrix(matrixId, clock, numRows, numCols, subDim);\n   }\n \n@@ -96,28 +88,23 @@ public class MFactory {\n     return new RBCompIntFloatMatrix(numRows, numCols, subDim);\n   }\n \n-  public static RBCompIntFloatMatrix rbCompIntFloatMatrix(int matrixId, int clock, int numRows,\n-      int numCols, int subDim, StorageType storageType) {\n+  public static RBCompIntFloatMatrix rbCompIntFloatMatrix(int matrixId, int clock, int numRows, int numCols, int subDim, StorageType storageType) {\n     CompIntFloatVector[] rows = new CompIntFloatVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compIntFloatVector(matrixId, i, clock, numCols, subDim, storageType);\n     }\n-\n     return new RBCompIntFloatMatrix(matrixId, clock, rows);\n   }\n \n-  public static RBCompIntFloatMatrix rbCompIntFloatMatrix(int numRows, int numCols, int subDim,\n-      StorageType storageType) {\n+  public static RBCompIntFloatMatrix rbCompIntFloatMatrix(int numRows, int numCols, int subDim, StorageType storageType) {\n     CompIntFloatVector[] rows = new CompIntFloatVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compIntFloatVector(0, i, 0, numCols, subDim, storageType);\n     }\n-\n     return new RBCompIntFloatMatrix(rows);\n   }\n \n-  public static RBCompIntLongMatrix rbCompIntLongMatrix(int matrixId, int clock,\n-      CompIntLongVector[] rows) {\n+  public static RBCompIntLongMatrix rbCompIntLongMatrix(int matrixId, int clock, CompIntLongVector[] rows) {\n     return new RBCompIntLongMatrix(matrixId, clock, rows);\n   }\n \n@@ -125,8 +112,7 @@ public class MFactory {\n     return new RBCompIntLongMatrix(rows);\n   }\n \n-  public static RBCompIntLongMatrix rbCompIntLongMatrix(int matrixId, int clock, int numRows,\n-      int numCols, int subDim) {\n+  public static RBCompIntLongMatrix rbCompIntLongMatrix(int matrixId, int clock, int numRows, int numCols, int subDim) {\n     return new RBCompIntLongMatrix(matrixId, clock, numRows, numCols, subDim);\n   }\n \n@@ -134,28 +120,23 @@ public class MFactory {\n     return new RBCompIntLongMatrix(numRows, numCols, subDim);\n   }\n \n-  public static RBCompIntLongMatrix rbCompIntLongMatrix(int matrixId, int clock, int numRows,\n-      int numCols, int subDim, StorageType storageType) {\n+  public static RBCompIntLongMatrix rbCompIntLongMatrix(int matrixId, int clock, int numRows, int numCols, int subDim, StorageType storageType) {\n     CompIntLongVector[] rows = new CompIntLongVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compIntLongVector(matrixId, i, clock, numCols, subDim, storageType);\n     }\n-\n     return new RBCompIntLongMatrix(matrixId, clock, rows);\n   }\n \n-  public static RBCompIntLongMatrix rbCompIntLongMatrix(int numRows, int numCols, int subDim,\n-      StorageType storageType) {\n+  public static RBCompIntLongMatrix rbCompIntLongMatrix(int numRows, int numCols, int subDim, StorageType storageType) {\n     CompIntLongVector[] rows = new CompIntLongVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compIntLongVector(0, i, 0, numCols, subDim, storageType);\n     }\n-\n     return new RBCompIntLongMatrix(rows);\n   }\n \n-  public static RBCompIntIntMatrix rbCompIntIntMatrix(int matrixId, int clock,\n-      CompIntIntVector[] rows) {\n+  public static RBCompIntIntMatrix rbCompIntIntMatrix(int matrixId, int clock, CompIntIntVector[] rows) {\n     return new RBCompIntIntMatrix(matrixId, clock, rows);\n   }\n \n@@ -163,8 +144,7 @@ public class MFactory {\n     return new RBCompIntIntMatrix(rows);\n   }\n \n-  public static RBCompIntIntMatrix rbCompIntIntMatrix(int matrixId, int clock, int numRows,\n-      int numCols, int subDim) {\n+  public static RBCompIntIntMatrix rbCompIntIntMatrix(int matrixId, int clock, int numRows, int numCols, int subDim) {\n     return new RBCompIntIntMatrix(matrixId, clock, numRows, numCols, subDim);\n   }\n \n@@ -172,28 +152,23 @@ public class MFactory {\n     return new RBCompIntIntMatrix(numRows, numCols, subDim);\n   }\n \n-  public static RBCompIntIntMatrix rbCompIntIntMatrix(int matrixId, int clock, int numRows,\n-      int numCols, int subDim, StorageType storageType) {\n+  public static RBCompIntIntMatrix rbCompIntIntMatrix(int matrixId, int clock, int numRows, int numCols, int subDim, StorageType storageType) {\n     CompIntIntVector[] rows = new CompIntIntVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compIntIntVector(matrixId, i, clock, numCols, subDim, storageType);\n     }\n-\n     return new RBCompIntIntMatrix(matrixId, clock, rows);\n   }\n \n-  public static RBCompIntIntMatrix rbCompIntIntMatrix(int numRows, int numCols, int subDim,\n-      StorageType storageType) {\n+  public static RBCompIntIntMatrix rbCompIntIntMatrix(int numRows, int numCols, int subDim, StorageType storageType) {\n     CompIntIntVector[] rows = new CompIntIntVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compIntIntVector(0, i, 0, numCols, subDim, storageType);\n     }\n-\n     return new RBCompIntIntMatrix(rows);\n   }\n \n-  public static RBCompLongDoubleMatrix rbCompLongDoubleMatrix(int matrixId, int clock,\n-      CompLongDoubleVector[] rows) {\n+  public static RBCompLongDoubleMatrix rbCompLongDoubleMatrix(int matrixId, int clock, CompLongDoubleVector[] rows) {\n     return new RBCompLongDoubleMatrix(matrixId, clock, rows);\n   }\n \n@@ -201,38 +176,31 @@ public class MFactory {\n     return new RBCompLongDoubleMatrix(rows);\n   }\n \n-  public static RBCompLongDoubleMatrix rbCompLongDoubleMatrix(int matrixId, int clock, int numRows,\n-      long numCols, long subDim) {\n+  public static RBCompLongDoubleMatrix rbCompLongDoubleMatrix(int matrixId, int clock, int numRows, long numCols, long subDim) {\n     return new RBCompLongDoubleMatrix(matrixId, clock, numRows, numCols, subDim);\n   }\n \n-  public static RBCompLongDoubleMatrix rbCompLongDoubleMatrix(int numRows, long numCols,\n-      long subDim) {\n+  public static RBCompLongDoubleMatrix rbCompLongDoubleMatrix(int numRows, long numCols, long subDim) {\n     return new RBCompLongDoubleMatrix(numRows, numCols, subDim);\n   }\n \n-  public static RBCompLongDoubleMatrix rbCompLongDoubleMatrix(int matrixId, int clock, int numRows,\n-      long numCols, long subDim, StorageType storageType) {\n+  public static RBCompLongDoubleMatrix rbCompLongDoubleMatrix(int matrixId, int clock, int numRows, long numCols, long subDim, StorageType storageType) {\n     CompLongDoubleVector[] rows = new CompLongDoubleVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compLongDoubleVector(matrixId, i, clock, numCols, subDim, storageType);\n     }\n-\n     return new RBCompLongDoubleMatrix(matrixId, clock, rows);\n   }\n \n-  public static RBCompLongDoubleMatrix rbCompLongDoubleMatrix(int numRows, long numCols,\n-      long subDim, StorageType storageType) {\n+  public static RBCompLongDoubleMatrix rbCompLongDoubleMatrix(int numRows, long numCols, long subDim, StorageType storageType) {\n     CompLongDoubleVector[] rows = new CompLongDoubleVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compLongDoubleVector(0, i, 0, numCols, subDim, storageType);\n     }\n-\n     return new RBCompLongDoubleMatrix(rows);\n   }\n \n-  public static RBCompLongFloatMatrix rbCompLongFloatMatrix(int matrixId, int clock,\n-      CompLongFloatVector[] rows) {\n+  public static RBCompLongFloatMatrix rbCompLongFloatMatrix(int matrixId, int clock, CompLongFloatVector[] rows) {\n     return new RBCompLongFloatMatrix(matrixId, clock, rows);\n   }\n \n@@ -240,38 +208,31 @@ public class MFactory {\n     return new RBCompLongFloatMatrix(rows);\n   }\n \n-  public static RBCompLongFloatMatrix rbCompLongFloatMatrix(int matrixId, int clock, int numRows,\n-      long numCols, long subDim) {\n+  public static RBCompLongFloatMatrix rbCompLongFloatMatrix(int matrixId, int clock, int numRows, long numCols, long subDim) {\n     return new RBCompLongFloatMatrix(matrixId, clock, numRows, numCols, subDim);\n   }\n \n-  public static RBCompLongFloatMatrix rbCompLongFloatMatrix(int numRows, long numCols,\n-      long subDim) {\n+  public static RBCompLongFloatMatrix rbCompLongFloatMatrix(int numRows, long numCols, long subDim) {\n     return new RBCompLongFloatMatrix(numRows, numCols, subDim);\n   }\n \n-  public static RBCompLongFloatMatrix rbCompLongFloatMatrix(int matrixId, int clock, int numRows,\n-      long numCols, long subDim, StorageType storageType) {\n+  public static RBCompLongFloatMatrix rbCompLongFloatMatrix(int matrixId, int clock, int numRows, long numCols, long subDim, StorageType storageType) {\n     CompLongFloatVector[] rows = new CompLongFloatVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compLongFloatVector(matrixId, i, clock, numCols, subDim, storageType);\n     }\n-\n     return new RBCompLongFloatMatrix(matrixId, clock, rows);\n   }\n \n-  public static RBCompLongFloatMatrix rbCompLongFloatMatrix(int numRows, long numCols, long subDim,\n-      StorageType storageType) {\n+  public static RBCompLongFloatMatrix rbCompLongFloatMatrix(int numRows, long numCols, long subDim, StorageType storageType) {\n     CompLongFloatVector[] rows = new CompLongFloatVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compLongFloatVector(0, i, 0, numCols, subDim, storageType);\n     }\n-\n     return new RBCompLongFloatMatrix(rows);\n   }\n \n-  public static RBCompLongLongMatrix rbCompLongLongMatrix(int matrixId, int clock,\n-      CompLongLongVector[] rows) {\n+  public static RBCompLongLongMatrix rbCompLongLongMatrix(int matrixId, int clock, CompLongLongVector[] rows) {\n     return new RBCompLongLongMatrix(matrixId, clock, rows);\n   }\n \n@@ -279,8 +240,7 @@ public class MFactory {\n     return new RBCompLongLongMatrix(rows);\n   }\n \n-  public static RBCompLongLongMatrix rbCompLongLongMatrix(int matrixId, int clock, int numRows,\n-      long numCols, long subDim) {\n+  public static RBCompLongLongMatrix rbCompLongLongMatrix(int matrixId, int clock, int numRows, long numCols, long subDim) {\n     return new RBCompLongLongMatrix(matrixId, clock, numRows, numCols, subDim);\n   }\n \n@@ -288,28 +248,23 @@ public class MFactory {\n     return new RBCompLongLongMatrix(numRows, numCols, subDim);\n   }\n \n-  public static RBCompLongLongMatrix rbCompLongLongMatrix(int matrixId, int clock, int numRows,\n-      long numCols, long subDim, StorageType storageType) {\n+  public static RBCompLongLongMatrix rbCompLongLongMatrix(int matrixId, int clock, int numRows, long numCols, long subDim, StorageType storageType) {\n     CompLongLongVector[] rows = new CompLongLongVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compLongLongVector(matrixId, i, clock, numCols, subDim, storageType);\n     }\n-\n     return new RBCompLongLongMatrix(matrixId, clock, rows);\n   }\n \n-  public static RBCompLongLongMatrix rbCompLongLongMatrix(int numRows, long numCols, long subDim,\n-      StorageType storageType) {\n+  public static RBCompLongLongMatrix rbCompLongLongMatrix(int numRows, long numCols, long subDim, StorageType storageType) {\n     CompLongLongVector[] rows = new CompLongLongVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compLongLongVector(0, i, 0, numCols, subDim, storageType);\n     }\n-\n     return new RBCompLongLongMatrix(rows);\n   }\n \n-  public static RBCompLongIntMatrix rbCompLongIntMatrix(int matrixId, int clock,\n-      CompLongIntVector[] rows) {\n+  public static RBCompLongIntMatrix rbCompLongIntMatrix(int matrixId, int clock, CompLongIntVector[] rows) {\n     return new RBCompLongIntMatrix(matrixId, clock, rows);\n   }\n \n@@ -317,8 +272,7 @@ public class MFactory {\n     return new RBCompLongIntMatrix(rows);\n   }\n \n-  public static RBCompLongIntMatrix rbCompLongIntMatrix(int matrixId, int clock, int numRows,\n-      long numCols, long subDim) {\n+  public static RBCompLongIntMatrix rbCompLongIntMatrix(int matrixId, int clock, int numRows, long numCols, long subDim) {\n     return new RBCompLongIntMatrix(matrixId, clock, numRows, numCols, subDim);\n   }\n \n@@ -326,40 +280,33 @@ public class MFactory {\n     return new RBCompLongIntMatrix(numRows, numCols, subDim);\n   }\n \n-  public static RBCompLongIntMatrix rbCompLongIntMatrix(int matrixId, int clock, int numRows,\n-      long numCols, long subDim, StorageType storageType) {\n+  public static RBCompLongIntMatrix rbCompLongIntMatrix(int matrixId, int clock, int numRows, long numCols, long subDim, StorageType storageType) {\n     CompLongIntVector[] rows = new CompLongIntVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compLongIntVector(matrixId, i, clock, numCols, subDim, storageType);\n     }\n-\n     return new RBCompLongIntMatrix(matrixId, clock, rows);\n   }\n \n-  public static RBCompLongIntMatrix rbCompLongIntMatrix(int numRows, long numCols, long subDim,\n-      StorageType storageType) {\n+  public static RBCompLongIntMatrix rbCompLongIntMatrix(int numRows, long numCols, long subDim, StorageType storageType) {\n     CompLongIntVector[] rows = new CompLongIntVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compLongIntVector(0, i, 0, numCols, subDim, storageType);\n     }\n-\n     return new RBCompLongIntMatrix(rows);\n   }\n \n   //---------------------------------------------------\n \n-  public static RBIntDoubleMatrix rbIntDoubleMatrix(int matrixId, int clock,\n-      IntDoubleVector[] rows) {\n+  public static RBIntDoubleMatrix rbIntDoubleMatrix(int matrixId, int clock, IntDoubleVector[] rows) {\n     return new RBIntDoubleMatrix(matrixId, clock, rows);\n   }\n \n-  public static RBIntDoubleMatrix rbIntDoubleMatrix(int matrixId, int clock, int numRows,\n-      int numCols) {\n+  public static RBIntDoubleMatrix rbIntDoubleMatrix(int matrixId, int clock, int numRows, int numCols) {\n     return new RBIntDoubleMatrix(matrixId, clock, numRows, numCols);\n   }\n \n-  public static RBIntDoubleMatrix rbIntDoubleMatrix(int matrixId, int clock, int numRows,\n-      int numCols, StorageType storageType) {\n+  public static RBIntDoubleMatrix rbIntDoubleMatrix(int matrixId, int clock, int numRows, int numCols, StorageType storageType) {\n     IntDoubleVector[] rows = new IntDoubleVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -374,12 +321,10 @@ public class MFactory {\n           break;\n       }\n     }\n-\n     return new RBIntDoubleMatrix(matrixId, clock, rows);\n   }\n \n-  public static RBIntDoubleMatrix rbIntDoubleMatrix(int numRows, int numCols,\n-      StorageType storageType) {\n+  public static RBIntDoubleMatrix rbIntDoubleMatrix(int numRows, int numCols, StorageType storageType) {\n     IntDoubleVector[] rows = new IntDoubleVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -394,7 +339,6 @@ public class MFactory {\n           break;\n       }\n     }\n-\n     return new RBIntDoubleMatrix(rows);\n   }\n \n@@ -410,13 +354,11 @@ public class MFactory {\n     return new RBIntFloatMatrix(matrixId, clock, rows);\n   }\n \n-  public static RBIntFloatMatrix rbIntFloatMatrix(int matrixId, int clock, int numRows,\n-      int numCols) {\n+  public static RBIntFloatMatrix rbIntFloatMatrix(int matrixId, int clock, int numRows, int numCols) {\n     return new RBIntFloatMatrix(matrixId, clock, numRows, numCols);\n   }\n \n-  public static RBIntFloatMatrix rbIntFloatMatrix(int matrixId, int clock, int numRows, int numCols,\n-      StorageType storageType) {\n+  public static RBIntFloatMatrix rbIntFloatMatrix(int matrixId, int clock, int numRows, int numCols, StorageType storageType) {\n     IntFloatVector[] rows = new IntFloatVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -431,12 +373,10 @@ public class MFactory {\n           break;\n       }\n     }\n-\n     return new RBIntFloatMatrix(matrixId, clock, rows);\n   }\n \n-  public static RBIntFloatMatrix rbIntFloatMatrix(int numRows, int numCols,\n-      StorageType storageType) {\n+  public static RBIntFloatMatrix rbIntFloatMatrix(int numRows, int numCols, StorageType storageType) {\n     IntFloatVector[] rows = new IntFloatVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -451,7 +391,6 @@ public class MFactory {\n           break;\n       }\n     }\n-\n     return new RBIntFloatMatrix(rows);\n   }\n \n@@ -471,8 +410,7 @@ public class MFactory {\n     return new RBIntLongMatrix(matrixId, clock, numRows, numCols);\n   }\n \n-  public static RBIntLongMatrix rbIntLongMatrix(int matrixId, int clock, int numRows, int numCols,\n-      StorageType storageType) {\n+  public static RBIntLongMatrix rbIntLongMatrix(int matrixId, int clock, int numRows, int numCols, StorageType storageType) {\n     IntLongVector[] rows = new IntLongVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -487,7 +425,6 @@ public class MFactory {\n           break;\n       }\n     }\n-\n     return new RBIntLongMatrix(matrixId, clock, rows);\n   }\n \n@@ -506,7 +443,6 @@ public class MFactory {\n           break;\n       }\n     }\n-\n     return new RBIntLongMatrix(rows);\n   }\n \n@@ -526,8 +462,7 @@ public class MFactory {\n     return new RBIntIntMatrix(matrixId, clock, numRows, numCols);\n   }\n \n-  public static RBIntIntMatrix rbIntIntMatrix(int matrixId, int clock, int numRows, int numCols,\n-      StorageType storageType) {\n+  public static RBIntIntMatrix rbIntIntMatrix(int matrixId, int clock, int numRows, int numCols, StorageType storageType) {\n     IntIntVector[] rows = new IntIntVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -542,7 +477,6 @@ public class MFactory {\n           break;\n       }\n     }\n-\n     return new RBIntIntMatrix(matrixId, clock, rows);\n   }\n \n@@ -561,7 +495,6 @@ public class MFactory {\n           break;\n       }\n     }\n-\n     return new RBIntIntMatrix(rows);\n   }\n \n@@ -573,18 +506,15 @@ public class MFactory {\n     return new RBIntIntMatrix(numRows, numCols);\n   }\n \n-  public static RBLongDoubleMatrix rbLongDoubleMatrix(int matrixId, int clock,\n-      LongDoubleVector[] rows) {\n+  public static RBLongDoubleMatrix rbLongDoubleMatrix(int matrixId, int clock, LongDoubleVector[] rows) {\n     return new RBLongDoubleMatrix(matrixId, clock, rows);\n   }\n \n-  public static RBLongDoubleMatrix rbLongDoubleMatrix(int matrixId, int clock, int numRows,\n-      long numCols) {\n+  public static RBLongDoubleMatrix rbLongDoubleMatrix(int matrixId, int clock, int numRows, long numCols) {\n     return new RBLongDoubleMatrix(matrixId, clock, numRows, numCols);\n   }\n \n-  public static RBLongDoubleMatrix rbLongDoubleMatrix(int matrixId, int clock, int numRows,\n-      long numCols, StorageType storageType) {\n+  public static RBLongDoubleMatrix rbLongDoubleMatrix(int matrixId, int clock, int numRows, long numCols, StorageType storageType) {\n     LongDoubleVector[] rows = new LongDoubleVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -598,12 +528,10 @@ public class MFactory {\n           break;\n       }\n     }\n-\n     return new RBLongDoubleMatrix(matrixId, clock, rows);\n   }\n \n-  public static RBLongDoubleMatrix rbLongDoubleMatrix(int numRows, long numCols,\n-      StorageType storageType) {\n+  public static RBLongDoubleMatrix rbLongDoubleMatrix(int numRows, long numCols, StorageType storageType) {\n     LongDoubleVector[] rows = new LongDoubleVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -617,7 +545,6 @@ public class MFactory {\n           break;\n       }\n     }\n-\n     return new RBLongDoubleMatrix(rows);\n   }\n \n@@ -629,18 +556,15 @@ public class MFactory {\n     return new RBLongDoubleMatrix(numRows, numCols);\n   }\n \n-  public static RBLongFloatMatrix rbLongFloatMatrix(int matrixId, int clock,\n-      LongFloatVector[] rows) {\n+  public static RBLongFloatMatrix rbLongFloatMatrix(int matrixId, int clock, LongFloatVector[] rows) {\n     return new RBLongFloatMatrix(matrixId, clock, rows);\n   }\n \n-  public static RBLongFloatMatrix rbLongFloatMatrix(int matrixId, int clock, int numRows,\n-      long numCols) {\n+  public static RBLongFloatMatrix rbLongFloatMatrix(int matrixId, int clock, int numRows, long numCols) {\n     return new RBLongFloatMatrix(matrixId, clock, numRows, numCols);\n   }\n \n-  public static RBLongFloatMatrix rbLongFloatMatrix(int matrixId, int clock, int numRows,\n-      long numCols, StorageType storageType) {\n+  public static RBLongFloatMatrix rbLongFloatMatrix(int matrixId, int clock, int numRows, long numCols, StorageType storageType) {\n     LongFloatVector[] rows = new LongFloatVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -654,12 +578,10 @@ public class MFactory {\n           break;\n       }\n     }\n-\n     return new RBLongFloatMatrix(matrixId, clock, rows);\n   }\n \n-  public static RBLongFloatMatrix rbLongFloatMatrix(int numRows, long numCols,\n-      StorageType storageType) {\n+  public static RBLongFloatMatrix rbLongFloatMatrix(int numRows, long numCols, StorageType storageType) {\n     LongFloatVector[] rows = new LongFloatVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -673,7 +595,6 @@ public class MFactory {\n           break;\n       }\n     }\n-\n     return new RBLongFloatMatrix(rows);\n   }\n \n@@ -689,13 +610,11 @@ public class MFactory {\n     return new RBLongLongMatrix(matrixId, clock, rows);\n   }\n \n-  public static RBLongLongMatrix rbLongLongMatrix(int matrixId, int clock, int numRows,\n-      long numCols) {\n+  public static RBLongLongMatrix rbLongLongMatrix(int matrixId, int clock, int numRows, long numCols) {\n     return new RBLongLongMatrix(matrixId, clock, numRows, numCols);\n   }\n \n-  public static RBLongLongMatrix rbLongLongMatrix(int matrixId, int clock, int numRows,\n-      long numCols, StorageType storageType) {\n+  public static RBLongLongMatrix rbLongLongMatrix(int matrixId, int clock, int numRows, long numCols, StorageType storageType) {\n     LongLongVector[] rows = new LongLongVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -709,12 +628,10 @@ public class MFactory {\n           break;\n       }\n     }\n-\n     return new RBLongLongMatrix(matrixId, clock, rows);\n   }\n \n-  public static RBLongLongMatrix rbLongLongMatrix(int numRows, long numCols,\n-      StorageType storageType) {\n+  public static RBLongLongMatrix rbLongLongMatrix(int numRows, long numCols, StorageType storageType) {\n     LongLongVector[] rows = new LongLongVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -728,7 +645,6 @@ public class MFactory {\n           break;\n       }\n     }\n-\n     return new RBLongLongMatrix(rows);\n   }\n \n@@ -744,13 +660,11 @@ public class MFactory {\n     return new RBLongIntMatrix(matrixId, clock, rows);\n   }\n \n-  public static RBLongIntMatrix rbLongIntMatrix(int matrixId, int clock, int numRows,\n-      long numCols) {\n+  public static RBLongIntMatrix rbLongIntMatrix(int matrixId, int clock, int numRows, long numCols) {\n     return new RBLongIntMatrix(matrixId, clock, numRows, numCols);\n   }\n \n-  public static RBLongIntMatrix rbLongIntMatrix(int matrixId, int clock, int numRows, long numCols,\n-      StorageType storageType) {\n+  public static RBLongIntMatrix rbLongIntMatrix(int matrixId, int clock, int numRows, long numCols, StorageType storageType) {\n     LongIntVector[] rows = new LongIntVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -764,12 +678,10 @@ public class MFactory {\n           break;\n       }\n     }\n-\n     return new RBLongIntMatrix(matrixId, clock, rows);\n   }\n \n-  public static RBLongIntMatrix rbLongIntMatrix(int numRows, long numCols,\n-      StorageType storageType) {\n+  public static RBLongIntMatrix rbLongIntMatrix(int numRows, long numCols, StorageType storageType) {\n     LongIntVector[] rows = new LongIntVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -783,7 +695,6 @@ public class MFactory {\n           break;\n       }\n     }\n-\n     return new RBLongIntMatrix(rows);\n   }\n \n@@ -797,13 +708,11 @@ public class MFactory {\n \n   //---------------------------------------------------\n \n-  public static BlasDoubleMatrix denseDoubleMatrix(int matrixId, int clock, int numRows,\n-      int numCols, double[] data) {\n+  public static BlasDoubleMatrix denseDoubleMatrix(int matrixId, int clock, int numRows, int numCols, double[] data) {\n     return new BlasDoubleMatrix(matrixId, clock, numRows, numCols, data);\n   }\n \n-  public static BlasDoubleMatrix denseDoubleMatrix(int matrixId, int clock, int numRows,\n-      int numCols) {\n+  public static BlasDoubleMatrix denseDoubleMatrix(int matrixId, int clock, int numRows, int numCols) {\n     double[] data = new double[numRows * numCols];\n     return new BlasDoubleMatrix(matrixId, clock, numRows, numCols, data);\n   }\n@@ -817,13 +726,11 @@ public class MFactory {\n     return new BlasDoubleMatrix(numRows, numCols, data);\n   }\n \n-  public static BlasFloatMatrix denseFloatMatrix(int matrixId, int clock, int numRows, int numCols,\n-      float[] data) {\n+  public static BlasFloatMatrix denseFloatMatrix(int matrixId, int clock, int numRows, int numCols, float[] data) {\n     return new BlasFloatMatrix(matrixId, clock, numRows, numCols, data);\n   }\n \n-  public static BlasFloatMatrix denseFloatMatrix(int matrixId, int clock, int numRows,\n-      int numCols) {\n+  public static BlasFloatMatrix denseFloatMatrix(int matrixId, int clock, int numRows, int numCols) {\n     float[] data = new float[numRows * numCols];\n     return new BlasFloatMatrix(matrixId, clock, numRows, numCols, data);\n   }\n@@ -837,58 +744,47 @@ public class MFactory {\n     return new BlasFloatMatrix(numRows, numCols, data);\n   }\n \n-  public static MapMatrix<IntDoubleVector> intDoubleMapMatrix(int matrixId, int clock,\n-      HashMap<Long, IntDoubleVector> mapMatrix) {\n+  public static MapMatrix<IntDoubleVector> intDoubleMapMatrix(int matrixId, int clock, HashMap<Long, IntDoubleVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n-  public static MapMatrix<IntFloatVector> intFloatMapMatrix(int matrixId, int clock,\n-      HashMap<Long, IntFloatVector> mapMatrix) {\n+  public static MapMatrix<IntFloatVector> intFloatMapMatrix(int matrixId, int clock, HashMap<Long, IntFloatVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n-  public static MapMatrix<IntLongVector> intLongMapMatrix(int matrixId, int clock,\n-      HashMap<Long, IntLongVector> mapMatrix) {\n+  public static MapMatrix<IntLongVector> intLongMapMatrix(int matrixId, int clock, HashMap<Long, IntLongVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n-  public static MapMatrix<IntIntVector> intIntMapMatrix(int matrixId, int clock,\n-      HashMap<Long, IntIntVector> mapMatrix) {\n+  public static MapMatrix<IntIntVector> intIntMapMatrix(int matrixId, int clock, HashMap<Long, IntIntVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n-  public static MapMatrix<LongDoubleVector> longDoubleMapMatrix(int matrixId, int clock,\n-      HashMap<Long, LongDoubleVector> mapMatrix) {\n+  public static MapMatrix<LongDoubleVector> longDoubleMapMatrix(int matrixId, int clock, HashMap<Long, LongDoubleVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n-  public static MapMatrix<LongFloatVector> longFloatMapMatrix(int matrixId, int clock,\n-      HashMap<Long, LongFloatVector> mapMatrix) {\n+  public static MapMatrix<LongFloatVector> longFloatMapMatrix(int matrixId, int clock, HashMap<Long, LongFloatVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n-  public static MapMatrix<LongLongVector> longLongMapMatrix(int matrixId, int clock,\n-      HashMap<Long, LongLongVector> mapMatrix) {\n+  public static MapMatrix<LongLongVector> longLongMapMatrix(int matrixId, int clock, HashMap<Long, LongLongVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n-  public static MapMatrix<LongIntVector> longIntMapMatrix(int matrixId, int clock,\n-      HashMap<Long, LongIntVector> mapMatrix) {\n+  public static MapMatrix<LongIntVector> longIntMapMatrix(int matrixId, int clock, HashMap<Long, LongIntVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n-  public static MapMatrix<IntDoubleVector> intDoubleMapMatrix(\n-      HashMap<Integer, IntDoubleVector> mapMatrix) {\n+  public static MapMatrix<IntDoubleVector> intDoubleMapMatrix(HashMap<Integer, IntDoubleVector> mapMatrix) {\n     return new MapMatrix(mapMatrix);\n   }\n \n-  public static MapMatrix<IntFloatVector> intFloatMapMatrix(\n-      HashMap<Integer, IntFloatVector> mapMatrix) {\n+  public static MapMatrix<IntFloatVector> intFloatMapMatrix(HashMap<Integer, IntFloatVector> mapMatrix) {\n     return new MapMatrix(mapMatrix);\n   }\n \n-  public static MapMatrix<IntLongVector> intLongMapMatrix(\n-      HashMap<Integer, IntLongVector> mapMatrix) {\n+  public static MapMatrix<IntLongVector> intLongMapMatrix(HashMap<Integer, IntLongVector> mapMatrix) {\n     return new MapMatrix(mapMatrix);\n   }\n \n@@ -896,18 +792,15 @@ public class MFactory {\n     return new MapMatrix(mapMatrix);\n   }\n \n-  public static MapMatrix<LongDoubleVector> longDoubleMapMatrix(\n-      HashMap<Long, LongDoubleVector> mapMatrix) {\n+  public static MapMatrix<LongDoubleVector> longDoubleMapMatrix(HashMap<Long, LongDoubleVector> mapMatrix) {\n     return new MapMatrix(mapMatrix);\n   }\n \n-  public static MapMatrix<LongFloatVector> longFloatMapMatrix(\n-      HashMap<Long, LongFloatVector> mapMatrix) {\n+  public static MapMatrix<LongFloatVector> longFloatMapMatrix(HashMap<Long, LongFloatVector> mapMatrix) {\n     return new MapMatrix(mapMatrix);\n   }\n \n-  public static MapMatrix<LongLongVector> longLongMapMatrix(\n-      HashMap<Long, LongLongVector> mapMatrix) {\n+  public static MapMatrix<LongLongVector> longLongMapMatrix(HashMap<Long, LongLongVector> mapMatrix) {\n     return new MapMatrix(mapMatrix);\n   }\n \n@@ -915,143 +808,116 @@ public class MFactory {\n     return new MapMatrix(mapMatrix);\n   }\n \n-  public static MapMatrix<IntDoubleVector> compIntDoubleMapMatrix(int matrixId, int clock,\n-      HashMap<Long, CompIntDoubleVector> mapMatrix) {\n+  public static MapMatrix<IntDoubleVector> compIntDoubleMapMatrix(int matrixId, int clock, HashMap<Long, CompIntDoubleVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n-  public static MapMatrix<IntFloatVector> compIntFloatMapMatrix(int matrixId, int clock,\n-      HashMap<Long, CompIntFloatVector> mapMatrix) {\n+  public static MapMatrix<IntFloatVector> compIntFloatMapMatrix(int matrixId, int clock, HashMap<Long, CompIntFloatVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n-  public static MapMatrix<IntLongVector> compIntLongMapMatrix(int matrixId, int clock,\n-      HashMap<Long, CompIntLongVector> mapMatrix) {\n+  public static MapMatrix<IntLongVector> compIntLongMapMatrix(int matrixId, int clock, HashMap<Long, CompIntLongVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n-  public static MapMatrix<IntIntVector> compIntIntMapMatrix(int matrixId, int clock,\n-      HashMap<Long, CompIntIntVector> mapMatrix) {\n+  public static MapMatrix<IntIntVector> compIntIntMapMatrix(int matrixId, int clock, HashMap<Long, CompIntIntVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n-  public static MapMatrix<LongDoubleVector> compLongDoubleMapMatrix(int matrixId, int clock,\n-      HashMap<Long, CompLongDoubleVector> mapMatrix) {\n+  public static MapMatrix<LongDoubleVector> compLongDoubleMapMatrix(int matrixId, int clock, HashMap<Long, CompLongDoubleVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n-  public static MapMatrix<LongFloatVector> compLongFloatMapMatrix(int matrixId, int clock,\n-      HashMap<Long, CompLongFloatVector> mapMatrix) {\n+  public static MapMatrix<LongFloatVector> compLongFloatMapMatrix(int matrixId, int clock, HashMap<Long, CompLongFloatVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n-  public static MapMatrix<LongLongVector> compLongLongMapMatrix(int matrixId, int clock,\n-      HashMap<Long, CompLongLongVector> mapMatrix) {\n+  public static MapMatrix<LongLongVector> compLongLongMapMatrix(int matrixId, int clock, HashMap<Long, CompLongLongVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n-  public static MapMatrix<LongIntVector> compLongIntMapMatrix(int matrixId, int clock,\n-      HashMap<Long, CompLongIntVector> mapMatrix) {\n+  public static MapMatrix<LongIntVector> compLongIntMapMatrix(int matrixId, int clock, HashMap<Long, CompLongIntVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n-  public static MapMatrix<IntDoubleVector> compIntDoubleMapMatrix(\n-      HashMap<Integer, CompIntDoubleVector> mapMatrix) {\n+  public static MapMatrix<IntDoubleVector> compIntDoubleMapMatrix(HashMap<Integer, CompIntDoubleVector> mapMatrix) {\n     return new MapMatrix(mapMatrix);\n   }\n \n-  public static MapMatrix<IntFloatVector> compIntFloatMapMatrix(\n-      HashMap<Integer, CompIntFloatVector> mapMatrix) {\n+  public static MapMatrix<IntFloatVector> compIntFloatMapMatrix(HashMap<Integer, CompIntFloatVector> mapMatrix) {\n     return new MapMatrix(mapMatrix);\n   }\n \n-  public static MapMatrix<IntLongVector> compIntLongMapMatrix(\n-      HashMap<Integer, CompIntLongVector> mapMatrix) {\n+  public static MapMatrix<IntLongVector> compIntLongMapMatrix(HashMap<Integer, CompIntLongVector> mapMatrix) {\n     return new MapMatrix(mapMatrix);\n   }\n \n-  public static MapMatrix<IntIntVector> compIntIntMapMatrix(\n-      HashMap<Integer, CompIntIntVector> mapMatrix) {\n+  public static MapMatrix<IntIntVector> compIntIntMapMatrix(HashMap<Integer, CompIntIntVector> mapMatrix) {\n     return new MapMatrix(mapMatrix);\n   }\n \n-  public static MapMatrix<LongDoubleVector> compLongDoubleMapMatrix(\n-      HashMap<Long, CompLongDoubleVector> mapMatrix) {\n+  public static MapMatrix<LongDoubleVector> compLongDoubleMapMatrix(HashMap<Long, CompLongDoubleVector> mapMatrix) {\n     return new MapMatrix(mapMatrix);\n   }\n \n-  public static MapMatrix<LongFloatVector> compLongFloatMapMatrix(\n-      HashMap<Long, CompLongFloatVector> mapMatrix) {\n+  public static MapMatrix<LongFloatVector> compLongFloatMapMatrix(HashMap<Long, CompLongFloatVector> mapMatrix) {\n     return new MapMatrix(mapMatrix);\n   }\n \n-  public static MapMatrix<LongLongVector> compLongLongMapMatrix(\n-      HashMap<Long, CompLongLongVector> mapMatrix) {\n+  public static MapMatrix<LongLongVector> compLongLongMapMatrix(HashMap<Long, CompLongLongVector> mapMatrix) {\n     return new MapMatrix(mapMatrix);\n   }\n \n-  public static MapMatrix<LongIntVector> compLongIntMapMatrix(\n-      HashMap<Long, CompLongIntVector> mapMatrix) {\n+  public static MapMatrix<LongIntVector> compLongIntMapMatrix(HashMap<Long, CompLongIntVector> mapMatrix) {\n     return new MapMatrix(mapMatrix);\n   }\n \n-  public static CooDoubleMatrix cooDoubleMatrix(\n-      int matrixId, int clock, int[] rowIndices, int[] colIndices, double[] values, int[] shape) {\n+  public static CooDoubleMatrix cooDoubleMatrix(int matrixId, int clock, int[] rowIndices, int[] colIndices, double[] values, int[] shape) {\n     return new CooDoubleMatrix(matrixId, clock, rowIndices, colIndices, values, shape);\n   }\n \n-  public static CooDoubleMatrix cooDoubleMatrix(\n-      int[] rowIndices, int[] colIndices, double[] values, int[] shape) {\n+  public static CooDoubleMatrix cooDoubleMatrix(int[] rowIndices, int[] colIndices, double[] values, int[] shape) {\n     return new CooDoubleMatrix(0, 0, rowIndices, colIndices, values, shape);\n   }\n \n-  public static CooFloatMatrix cooFloatMatrix(\n-      int matrixId, int clock, int[] rowIndices, int[] colIndices, float[] values, int[] shape) {\n+  public static CooFloatMatrix cooFloatMatrix(int matrixId, int clock, int[] rowIndices, int[] colIndices, float[] values, int[] shape) {\n     return new CooFloatMatrix(matrixId, clock, rowIndices, colIndices, values, shape);\n   }\n \n-  public static CooFloatMatrix cooFloatMatrix(\n-      int[] rowIndices, int[] colIndices, float[] values, int[] shape) {\n+  public static CooFloatMatrix cooFloatMatrix(int[] rowIndices, int[] colIndices, float[] values, int[] shape) {\n     return new CooFloatMatrix(rowIndices, colIndices, values, shape);\n   }\n \n-  public static CsrDoubleMatrix csrDoubleMatrix(\n-      int matrixId, int clock, int[] rowIndices, int[] colIndices, double[] values, int[] shape) {\n+  public static CsrDoubleMatrix csrDoubleMatrix(int matrixId, int clock, int[] rowIndices, int[] colIndices, double[] values, int[] shape) {\n     return new CsrDoubleMatrix(matrixId, clock, rowIndices, colIndices, values, shape);\n   }\n \n-  public static CsrDoubleMatrix csrDoubleMatrix(\n-      int[] rowIndices, int[] colIndices, double[] values, int[] shape) {\n+  public static CsrDoubleMatrix csrDoubleMatrix(int[] rowIndices, int[] colIndices, double[] values, int[] shape) {\n     return new CsrDoubleMatrix(0, 0, rowIndices, colIndices, values, shape);\n   }\n \n-  public static CsrFloatMatrix csrFloatMatrix(\n-      int matrixId, int clock, int[] rowIndices, int[] colIndices, float[] values, int[] shape) {\n+  public static CsrFloatMatrix csrFloatMatrix(int matrixId, int clock, int[] rowIndices, int[] colIndices, float[] values, int[] shape) {\n     return new CsrFloatMatrix(matrixId, clock, rowIndices, colIndices, values, shape);\n   }\n \n-  public static CsrFloatMatrix csrFloatMatrix(\n-      int[] rowIndices, int[] colIndices, float[] values, int[] shape) {\n+  public static CsrFloatMatrix csrFloatMatrix(int[] rowIndices, int[] colIndices, float[] values, int[] shape) {\n     return new CsrFloatMatrix(rowIndices, colIndices, values, shape);\n   }\n \n-  public static CsrDoubleMatrix csrDoubleMatrix(\n-      int matrixId, int clock, double[] values, int[] indices, int[] indptr, int[] shape) {\n+  public static CsrDoubleMatrix csrDoubleMatrix(int matrixId, int clock, double[] values, int[] indices, int[] indptr, int[] shape) {\n     return new CsrDoubleMatrix(matrixId, clock, values, indices, indptr, shape);\n   }\n \n-  public static CsrDoubleMatrix csrDoubleMatrix(\n-      double[] values, int[] indices, int[] indptr, int[] shape) {\n-    return new CsrDoubleMatrix(0, 0,values,  indices, indptr, shape);\n+  public static CsrDoubleMatrix csrDoubleMatrix(double[] values, int[] indices, int[] indptr, int[] shape) {\n+    return new CsrDoubleMatrix(0, 0, values, indices, indptr, shape);\n   }\n \n-  public static CsrFloatMatrix csrFloatMatrix(\n-      int matrixId, int clock, float[] values, int[] indices, int[] indptr, int[] shape) {\n+  public static CsrFloatMatrix csrFloatMatrix(int matrixId, int clock, float[] values, int[] indices, int[] indptr, int[] shape) {\n     return new CsrFloatMatrix(matrixId, clock, values, indices, indptr, shape);\n   }\n \n-  public static CsrFloatMatrix csrFloatMatrix(\n-      float[] values, int[] indices, int[] indptr, int[] shape) {\n+  public static CsrFloatMatrix csrFloatMatrix(float[] values, int[] indices, int[] indptr, int[] shape) {\n     return new CsrFloatMatrix(values, indices, indptr, shape);\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 241
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}