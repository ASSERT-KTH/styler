{
    "project_name": "aspose-words-cloud-aspose-words-cloud-java",
    "error_id": "119",
    "information": {
        "errors": [
            {
                "line": "193",
                "column": "34",
                "severity": "error",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "     */\n    public FilesUploadResult deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n        return (FilesUploadResult)apiClient.deserialize(response, FilesUploadResult.class);\n    }\n}",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/119/UploadFileRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/119/UploadFileRequest.java\nindex 38ca889205f..2c3ccb33541 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/119/UploadFileRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/119/UploadFileRequest.java\n@@ -190,6 +190,6 @@ public class UploadFileRequest implements RequestIfc {\n      * @param response Response instance\n      */\n     public FilesUploadResult deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n-        return (FilesUploadResult)apiClient.deserialize(response, FilesUploadResult.class);\n+        return (FilesUploadResult) apiClient.deserialize(response, FilesUploadResult.class);\n     }\n }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/119/UploadFileRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/119/UploadFileRequest.java\nindex 38ca889205f..01976c47524 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/119/UploadFileRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/119/UploadFileRequest.java\n@@ -10,10 +10,10 @@\n  *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  *  copies of the Software, and to permit persons to whom the Software is\n  *  furnished to do so, subject to the following conditions:\n- * \n+ *\n  *  The above copyright notice and this permission notice shall be included in all\n  *  copies or substantial portions of the Software.\n- * \n+ *\n  *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -31,8 +31,10 @@ import com.aspose.words.cloud.*;\n import com.aspose.words.cloud.model.*;\n import com.aspose.words.cloud.model.responses.*;\n import com.squareup.okhttp.*;\n+\n import javax.mail.MessagingException;\n import javax.mail.internet.MimeMultipart;\n+\n import java.io.*;\n import java.lang.reflect.Type;\n import java.util.*;\n@@ -146,8 +148,9 @@ public class UploadFileRequest implements RequestIfc {\n         Map<String, String> localVarHeaderParams = new HashMap<String, String>();\n \n         Map<String, Object> localVarFormParams = new LinkedHashMap<String, Object>();\n-        if (getFileContent() != null)\n+        if (getFileContent() != null) {\n             localVarFormParams.put(\"FileContent\", getFileContent());\n+        }\n \n         final String[] localVarAccepts = {\n             \"application/xml\", \"application/json\"\n@@ -167,8 +170,8 @@ public class UploadFileRequest implements RequestIfc {\n                 public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {\n                     com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());\n                     return originalResponse.newBuilder()\n-                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))\n-                    .build();\n+                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))\n+                        .build();\n                 }\n             });\n         }\n@@ -190,6 +193,6 @@ public class UploadFileRequest implements RequestIfc {\n      * @param response Response instance\n      */\n     public FilesUploadResult deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n-        return (FilesUploadResult)apiClient.deserialize(response, FilesUploadResult.class);\n+        return (FilesUploadResult) apiClient.deserialize(response, FilesUploadResult.class);\n     }\n }\n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/119/UploadFileRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/119/UploadFileRequest.java\nindex 38ca889205f..37179af1b08 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/119/UploadFileRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/119/UploadFileRequest.java\n@@ -26,7 +26,6 @@\n  */\n \n package com.aspose.words.cloud.model.requests;\n-\n import com.aspose.words.cloud.*;\n import com.aspose.words.cloud.model.*;\n import com.aspose.words.cloud.model.responses.*;\n@@ -40,23 +39,30 @@ import java.util.*;\n /*\n  * Request model for uploadFile operation.\n  */\n+\n+\n public class UploadFileRequest implements RequestIfc {\n     /*\n      * File to upload.\n      */\n-    private byte[] fileContent;\n+\n+  private byte[] fileContent;\n \n     /*\n      * Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext\n      * If the content is multipart and path does not contains the file name it tries to get them from filename parameter\n      * from Content-Disposition header.\n      */\n-    private String path;\n+\n+\n+  private String path;\n \n     /*\n      * Storage name.\n      */\n-    private String storageName;\n+\n+\n+  private String storageName;\n \n     /*\n      * Initializes a new instance of the UploadFileRequest class.\n@@ -65,53 +71,62 @@ public class UploadFileRequest implements RequestIfc {\n      * @param String path Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext If the content is multipart and path does not contains the file name it tries to get them from filename parameter from Content-Disposition header.\n      * @param String storageName Storage name.\n      */\n-    public UploadFileRequest(byte[] fileContent, String path, String storageName) {\n-        this.fileContent = fileContent;\n-        this.path = path;\n-        this.storageName = storageName;\n-    }\n+\n+\n+  public UploadFileRequest(byte[] fileContent,  String path,  String storageName) {\n+    this.fileContent = fileContent;\n+    this.path = path;\n+    this.storageName = storageName;\n+  }\n \n     /*\n      * Gets File to upload.\n      */\n-    public byte[] getFileContent() {\n-        return this.fileContent;\n-    }\n+\n+\n+  public byte[] getFileContent() {\n+    return this.fileContent;\n+  }\n \n     /*\n      * Sets File to upload.\n      */\n-    public void setFileContent(byte[] value) {\n-        this.fileContent = value;\n-    }\n+\n+  public void setFileContent(byte[] value) {\n+    this.fileContent = value;\n+  }\n \n     /*\n      * Gets Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext If the content is multipart and path does not contains the file name it tries to get them from filename parameter from Content-Disposition header.\n      */\n-    public String getPath() {\n-        return this.path;\n-    }\n+\n+  public String getPath() {\n+    return this.path;\n+  }\n \n     /*\n      * Sets Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext If the content is multipart and path does not contains the file name it tries to get them from filename parameter from Content-Disposition header.\n      */\n-    public void setPath(String value) {\n-        this.path = value;\n-    }\n+\n+  public void setPath(String value) {\n+    this.path = value;\n+  }\n \n     /*\n      * Gets Storage name.\n      */\n-    public String getStorageName() {\n-        return this.storageName;\n-    }\n+\n+  public String getStorageName() {\n+    return this.storageName;\n+  }\n \n     /*\n      * Sets Storage name.\n      */\n-    public void setStorageName(String value) {\n-        this.storageName = value;\n-    }\n+\n+  public void setStorageName(String value) {\n+    this.storageName = value;\n+  }\n \n \n     /*\n@@ -121,67 +136,65 @@ public class UploadFileRequest implements RequestIfc {\n      * @throws ApiException If fail to serialize the request body object\n      * @throws IOException If fail to serialize the request body object\n      */\n-    public Request buildHttpRequest(ApiClient apiClient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener, Boolean addAuthHeaders) throws ApiException, IOException {\n+\n+  public Request buildHttpRequest(ApiClient apiClient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener,  Boolean addAuthHeaders) throws ApiException, IOException {\n         // verify the required parameter 'FileContent' is set\n-        if (getFileContent() == null) {\n-            throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'FileContent' when calling uploadFile\");\n-        }\n+    if (getFileContent() == null) {\n+      throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'FileContent' when calling uploadFile\");\n+    }\n \n         // verify the required parameter 'Path' is set\n-        if (getPath() == null) {\n-            throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'Path' when calling uploadFile\");\n-        }\n+    if (getPath() == null) {\n+      throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'Path' when calling uploadFile\");\n+    }\n \n-        Object localVarPostBody = null;\n+    Object localVarPostBody = null;\n \n         // create path and map variables\n-        String localVarPath = \"/words/storage/file/{path}\";\n-        localVarPath = apiClient.addParameterToPath(localVarPath, \"path\", getPath());\n-        localVarPath = localVarPath.replaceAll(\"//\", \"/\");\n-\n-        List<Pair> localVarQueryParams = new ArrayList<Pair>();\n-        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();\n-        apiClient.addParameterToQuery(localVarQueryParams, \"storageName\", getStorageName());\n-\n-        Map<String, String> localVarHeaderParams = new HashMap<String, String>();\n-\n-        Map<String, Object> localVarFormParams = new LinkedHashMap<String, Object>();\n-        if (getFileContent() != null)\n-            localVarFormParams.put(\"FileContent\", getFileContent());\n-\n-        final String[] localVarAccepts = {\n-            \"application/xml\", \"application/json\"\n-        };\n-        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);\n-        if (localVarAccept != null) localVarHeaderParams.put(\"Accept\", localVarAccept);\n-\n-        final String[] localVarContentTypes = {\n-            \"multipart/form-data\"\n-        };\n-        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);\n-        localVarHeaderParams.put(\"Content-Type\", localVarContentType);\n-\n-        if (progressListener != null) {\n-            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {\n-                @Override\n-                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {\n-                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());\n-                    return originalResponse.newBuilder()\n-                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))\n-                    .build();\n-                }\n-            });\n-        }\n-\n-        return apiClient.buildRequest(localVarPath, \"PUT\", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, addAuthHeaders, progressRequestListener);\n+    String localVarPath = \"/words/storage/file/{path}\";\n+    localVarPath = apiClient.addParameterToPath(localVarPath, \"path\", getPath());\n+    localVarPath = localVarPath.replaceAll(\"//\", \"/\");\n+\n+    List<Pair> localVarQueryParams = new ArrayList<Pair>();\n+    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();\n+    apiClient.addParameterToQuery(localVarQueryParams, \"storageName\", getStorageName());\n+\n+    Map<String, String> localVarHeaderParams = new HashMap<String, String>();\n+    Map<String, Object> localVarFormParams = new LinkedHashMap<String, Object>();\n+    if (getFileContent() != null) localVarFormParams.put(\"FileContent\", getFileContent());\n+\n+    final String[] localVarAccepts = {\n+         \"application/xml\", \"application/json\"\n+    };\n+    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);\n+    if (localVarAccept != null) localVarHeaderParams.put(\"Accept\", localVarAccept);\n+\n+    final String[] localVarContentTypes = {\n+         \"multipart/form-data\"\n+    };\n+    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);\n+    localVarHeaderParams.put(\"Content-Type\", localVarContentType);\n+\n+    if (progressListener != null) {\n+        apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {\n+          @Override\n+          public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {\n+            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());\n+            return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener))\n+                                                .build();\n+          }\n+        });\n     }\n+    return apiClient.buildRequest(localVarPath, \"PUT\", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, addAuthHeaders, progressRequestListener);\n+  }\n \n     /*\n      * Gets response type for this request.\n      */\n-    public Type getResponseType() {\n-        return FilesUploadResult.class;\n-    }\n+\n+  public Type getResponseType() {\n+    return FilesUploadResult.class;\n+  }\n \n     /*\n      * Deserialize response message.\n@@ -189,7 +202,9 @@ public class UploadFileRequest implements RequestIfc {\n      * @param apiClient ApiClient instance\n      * @param response Response instance\n      */\n-    public FilesUploadResult deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n-        return (FilesUploadResult)apiClient.deserialize(response, FilesUploadResult.class);\n-    }\n-}\n+\n+  public FilesUploadResult deserializeResponse(ApiClient apiClient,  Response response) throws ApiException, MessagingException, IOException {\n+    return (FilesUploadResult) apiClient.deserialize(response, FilesUploadResult.class);\n+  }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 103
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/119/UploadFileRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/119/UploadFileRequest.java\nindex 38ca889205f..2c3ccb33541 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/119/UploadFileRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/119/UploadFileRequest.java\n@@ -190,6 +190,6 @@ public class UploadFileRequest implements RequestIfc {\n      * @param response Response instance\n      */\n     public FilesUploadResult deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n-        return (FilesUploadResult)apiClient.deserialize(response, FilesUploadResult.class);\n+        return (FilesUploadResult) apiClient.deserialize(response, FilesUploadResult.class);\n     }\n }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/119/UploadFileRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/119/UploadFileRequest.java\nindex 38ca889205f..5f266438560 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/119/UploadFileRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/119/UploadFileRequest.java\n@@ -190,6 +190,6 @@ public class UploadFileRequest implements RequestIfc {\n      * @param response Response instance\n      */\n     public FilesUploadResult deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n-        return (FilesUploadResult)apiClient.deserialize(response, FilesUploadResult.class);\n+        return (FilesUploadResult)  apiClient.deserialize(response, FilesUploadResult.class);\n     }\n }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}