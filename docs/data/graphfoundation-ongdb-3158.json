{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3158",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "46",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3158/PathFinder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3158/PathFinder.java\nindex 7e61d45654e..ebb4b0724a9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3158/PathFinder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3158/PathFinder.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphalgo;\n \n import org.neo4j.graphdb.Node;\n@@ -26,35 +27,34 @@ import org.neo4j.graphdb.traversal.TraversalMetadata;\n /**\n  * Interface of algorithms that finds paths in between two nodes.\n  *\n- * @author Tobias Ivarsson\n- *\n  * @param <P> the path type that the algorithm produces\n+ * @author Tobias Ivarsson\n  */\n public interface PathFinder<P extends Path>\n {\n-    /**\n-     * Tries to find a single path between {@code start} and {@code end}\n-     * nodes. If a path is found a {@link Path} is returned with that path\n-     * information, else {@code null} is returned. If more than one path is\n-     * found, the implementation can decide itself upon which of those to return.\n-     *\n-     * @param start the start {@link Node} which defines the start of the path.\n-     * @param end the end {@link Node} which defines the end of the path.\n-     * @return a single {@link Path} between {@code start} and {@code end},\n-     * or {@code null} if no path was found.\n-     */\n-    P findSinglePath( Node start, Node end );\n+  /**\n+   * Tries to find a single path between {@code start} and {@code end}\n+   * nodes. If a path is found a {@link Path} is returned with that path\n+   * information, else {@code null} is returned. If more than one path is\n+   * found, the implementation can decide itself upon which of those to return.\n+   *\n+   * @param start the start {@link Node} which defines the start of the path.\n+   * @param end   the end {@link Node} which defines the end of the path.\n+   * @return a single {@link Path} between {@code start} and {@code end},\n+   * or {@code null} if no path was found.\n+   */\n+  P findSinglePath(Node start, Node end);\n \n-    /**\n-     * Tries to find all paths between {@code start} and {@code end} nodes.\n-     * A collection of {@link Path}s is returned with all the found paths.\n-     * If no paths are found an empty collection is returned.\n-     *\n-     * @param start the start {@link Node} which defines the start of the path.\n-     * @param end the end {@link Node} which defines the end of the path.\n-     * @return all {@link Path}s between {@code start} and {@code end}.\n-     */\n-    Iterable<P> findAllPaths( Node start, Node end );\n+  /**\n+   * Tries to find all paths between {@code start} and {@code end} nodes.\n+   * A collection of {@link Path}s is returned with all the found paths.\n+   * If no paths are found an empty collection is returned.\n+   *\n+   * @param start the start {@link Node} which defines the start of the path.\n+   * @param end   the end {@link Node} which defines the end of the path.\n+   * @return all {@link Path}s between {@code start} and {@code end}.\n+   */\n+  Iterable<P> findAllPaths(Node start, Node end);\n \n-    TraversalMetadata metadata();\n+  TraversalMetadata metadata();\n }\n",
            "diff_size": 27
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3158/PathFinder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3158/PathFinder.java\nindex 7e61d45654e..8056206c42c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3158/PathFinder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3158/PathFinder.java\n@@ -55,6 +55,5 @@ public interface PathFinder<P extends Path>\n      * @return all {@link Path}s between {@code start} and {@code end}.\n      */\n     Iterable<P> findAllPaths( Node start, Node end );\n-\n-    TraversalMetadata metadata();\n-}\n+TraversalMetadata metadata();\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}