{
    "project_name": "wso2-attic-commons",
    "error_id": "72",
    "information": {
        "errors": [
            {
                "line": "53",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 130).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                    if (cr.getHeaders().getFirst(SCIMConstants.CONTENT_TYPE_HEADER) != null) {\n\n                        String format = SCIMConstants.identifyFormat(cr.getHeaders().getFirst(SCIMConstants.CONTENT_TYPE_HEADER));\n                        if (format != null) {\n                            charonException = scimClient.decodeSCIMException(cr.getEntity(String.class), format);\n                        } else {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/72/CharonResponseHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/72/CharonResponseHandler.java\nindex 5b79cd4b52e..99c7efb2d86 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/72/CharonResponseHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/72/CharonResponseHandler.java\n@@ -50,7 +50,7 @@ public class CharonResponseHandler implements ClientHandler {\n                 try {\n                     if (cr.getHeaders().getFirst(SCIMConstants.CONTENT_TYPE_HEADER) != null) {\n \n-                        String format = SCIMConstants.identifyFormat(cr.getHeaders().getFirst(SCIMConstants.CONTENT_TYPE_HEADER));\n+String format = SCIMConstants.identifyFormat(cr.getHeaders().getFirst(SCIMConstants.CONTENT_TYPE_HEADER));\n                         if (format != null) {\n                             charonException = scimClient.decodeSCIMException(cr.getEntity(String.class), format);\n                         } else {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/72/CharonResponseHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/72/CharonResponseHandler.java\nindex 5b79cd4b52e..7128dac999c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/72/CharonResponseHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/72/CharonResponseHandler.java\n@@ -1,20 +1,21 @@\n /*\n-*  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n+ *  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n package org.wso2.charon.samples.utils;\n \n import org.apache.wink.client.ClientRequest;\n@@ -30,48 +31,48 @@ import org.wso2.charon.core.schema.SCIMConstants;\n \n public class CharonResponseHandler implements ClientHandler {\n \n-    SCIMClient scimClient = null;\n+  SCIMClient scimClient = null;\n \n-    public void setSCIMClient(SCIMClient scimClient) {\n-        this.scimClient = scimClient;\n-    }\n+  public void setSCIMClient(SCIMClient scimClient) {\n+    this.scimClient = scimClient;\n+  }\n \n-    //@Override\n-    public ClientResponse handle(ClientRequest clientRequest, HandlerContext handlerContext)\n-            throws Exception {\n+  //@Override\n+  public ClientResponse handle(ClientRequest clientRequest, HandlerContext handlerContext)\n+    throws Exception {\n \n-        //obtain client response\n-        ClientResponse cr = handlerContext.doChain(clientRequest);\n-        if (scimClient != null) {\n-            //see whether the response indicates a failure or success according to the status code\n-            if (!(scimClient.evaluateResponseStatus(cr.getStatusCode()))) {\n-                //if it is a failure,\n-                AbstractCharonException charonException = null;\n-                try {\n-                    if (cr.getHeaders().getFirst(SCIMConstants.CONTENT_TYPE_HEADER) != null) {\n+    //obtain client response\n+    ClientResponse cr = handlerContext.doChain(clientRequest);\n+    if (scimClient != null) {\n+      //see whether the response indicates a failure or success according to the status code\n+      if (!(scimClient.evaluateResponseStatus(cr.getStatusCode()))) {\n+        //if it is a failure,\n+        AbstractCharonException charonException = null;\n+        try {\n+          if (cr.getHeaders().getFirst(SCIMConstants.CONTENT_TYPE_HEADER) != null) {\n \n-                        String format = SCIMConstants.identifyFormat(cr.getHeaders().getFirst(SCIMConstants.CONTENT_TYPE_HEADER));\n-                        if (format != null) {\n-                            charonException = scimClient.decodeSCIMException(cr.getEntity(String.class), format);\n-                        } else {\n-                            charonException = new CharonException(cr.getEntity(String.class));\n-                        }\n-                    } else {\n-                        charonException = new CharonException(cr.getEntity(String.class));\n-                    }\n-                } catch (CharonException e) {\n-                    //TODO: remove sout and log any exception occurred in extracting the exception.\n-                    System.out.println(e.getDescription());\n-                }\n-                //TODO:log and throw the actual exception returned in the response.\n-                if (charonException != null) {\n-                    throw charonException;\n-                }\n+            String format = SCIMConstants.identifyFormat(cr.getHeaders().getFirst(SCIMConstants.CONTENT_TYPE_HEADER));\n+            if (format != null) {\n+              charonException = scimClient.decodeSCIMException(cr.getEntity(String.class), format);\n             } else {\n-                //if it is a success, just return the response.\n-                return cr;\n+              charonException = new CharonException(cr.getEntity(String.class));\n             }\n+          } else {\n+            charonException = new CharonException(cr.getEntity(String.class));\n+          }\n+        } catch (CharonException e) {\n+          //TODO: remove sout and log any exception occurred in extracting the exception.\n+          System.out.println(e.getDescription());\n+        }\n+        //TODO:log and throw the actual exception returned in the response.\n+        if (charonException != null) {\n+          throw charonException;\n         }\n+      } else {\n+        //if it is a success, just return the response.\n         return cr;\n+      }\n     }\n+    return cr;\n+  }\n }\n",
            "diff_size": 67
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/72/CharonResponseHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/72/CharonResponseHandler.java\nindex 5b79cd4b52e..9099f967d70 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/72/CharonResponseHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/72/CharonResponseHandler.java\n@@ -74,4 +74,4 @@ public class CharonResponseHandler implements ClientHandler {\n         }\n         return cr;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/72/CharonResponseHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/72/CharonResponseHandler.java\nindex 5b79cd4b52e..99c7efb2d86 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/72/CharonResponseHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/72/CharonResponseHandler.java\n@@ -50,7 +50,7 @@ public class CharonResponseHandler implements ClientHandler {\n                 try {\n                     if (cr.getHeaders().getFirst(SCIMConstants.CONTENT_TYPE_HEADER) != null) {\n \n-                        String format = SCIMConstants.identifyFormat(cr.getHeaders().getFirst(SCIMConstants.CONTENT_TYPE_HEADER));\n+String format = SCIMConstants.identifyFormat(cr.getHeaders().getFirst(SCIMConstants.CONTENT_TYPE_HEADER));\n                         if (format != null) {\n                             charonException = scimClient.decodeSCIMException(cr.getEntity(String.class), format);\n                         } else {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}