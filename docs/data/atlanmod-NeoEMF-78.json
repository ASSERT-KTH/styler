{
    "project_name": "atlanmod-NeoEMF",
    "error_id": "78",
    "information": {
        "errors": [
            {
                "line": "73",
                "column": "81",
                "severity": "warning",
                "message": "'+' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "        lazyClass = LazyReference.soft(() -> {\n            EPackage p = EPackage.Registry.INSTANCE.getEPackage(uri);\n            checkNotNull(p, \"Unable to find EPackage associated with URI: %s. \" +\n                    \"Make sure it is registered in EPackage.Registry\", uri);\n\n            EClass c = (EClass) p.getEClassifier(name);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/78/ClassBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/styler/78/ClassBean.java\nindex 57fe03a42b4..73b94123797 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/78/ClassBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/styler/78/ClassBean.java\n@@ -70,8 +70,7 @@ public class ClassBean implements Serializable {\n \n         lazyClass = LazyReference.soft(() -> {\n             EPackage p = EPackage.Registry.INSTANCE.getEPackage(uri);\n-            checkNotNull(p, \"Unable to find EPackage associated with URI: %s. \" +\n-                    \"Make sure it is registered in EPackage.Registry\", uri);\n+            checkNotNull(p, \"Unable to find EPackage associated with URI: %s. \" + \"Make sure it is registered in EPackage.Registry\", uri);\n \n             EClass c = (EClass) p.getEClassifier(name);\n             checkNotNull(c, \"Unable to find EClass '%s' from EPackage '%s'\", name, uri);\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "73",
                    "column": "81",
                    "severity": "warning",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/78/ClassBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/intellij/78/ClassBean.java\nindex 57fe03a42b4..4c89f4e56c9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/78/ClassBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/intellij/78/ClassBean.java\n@@ -71,7 +71,7 @@ public class ClassBean implements Serializable {\n         lazyClass = LazyReference.soft(() -> {\n             EPackage p = EPackage.Registry.INSTANCE.getEPackage(uri);\n             checkNotNull(p, \"Unable to find EPackage associated with URI: %s. \" +\n-                    \"Make sure it is registered in EPackage.Registry\", uri);\n+                \"Make sure it is registered in EPackage.Registry\", uri);\n \n             EClass c = (EClass) p.getEClassifier(name);\n             checkNotNull(c, \"Unable to find EClass '%s' from EPackage '%s'\", name, uri);\n@@ -99,9 +99,7 @@ public class ClassBean implements Serializable {\n      *\n      * @param object the object from which the {@link org.eclipse.emf.ecore.EClass} has to be retrieve with the {@link\n      *               PersistentEObject#eClass()} method\n-     *\n      * @return a new {@code ClassBean}\n-     *\n      * @throws NullPointerException if any argument is {@code null}\n      * @see #from(EClass)\n      */\n@@ -116,9 +114,7 @@ public class ClassBean implements Serializable {\n      * This method behaves like: {@code of(reference.getName(), reference.getEPackage().getNsURI())}.\n      *\n      * @param eClass the {@link org.eclipse.emf.ecore.EClass}\n-     *\n      * @return a new {@code ClassBean}\n-     *\n      * @throws NullPointerException if any argument is {@code null}\n      */\n     @Nonnull\n@@ -133,9 +129,7 @@ public class ClassBean implements Serializable {\n      * @param name the name of the {@link org.eclipse.emf.ecore.EClass}\n      * @param uri  the literal representation of the {@link org.eclipse.emf.common.util.URI} of the {@link\n      *             org.eclipse.emf.ecore.EClass}\n-     *\n      * @return a new {@code ClassBean}\n-     *\n      * @throws NullPointerException if any argument is {@code null}\n      */\n     @Nonnull\n@@ -190,10 +184,10 @@ public class ClassBean implements Serializable {\n     @Nonnull\n     public Optional<ClassBean> inheritFrom() {\n         return get().getESuperTypes()\n-                .parallelStream()\n-                .filter(c -> !c.isInterface())\n-                .map(ClassBean::from)\n-                .findAny();\n+            .parallelStream()\n+            .filter(c -> !c.isInterface())\n+            .map(ClassBean::from)\n+            .findAny();\n     }\n \n     /**\n@@ -207,16 +201,16 @@ public class ClassBean implements Serializable {\n         final EClass eClass = get();\n \n         final Predicate<EClass> isInheritedBy = c -> !c.isInterface()\n-                && !c.isAbstract()\n-                && eClass.isSuperTypeOf(c);\n+            && !c.isAbstract()\n+            && eClass.isSuperTypeOf(c);\n \n         return eClass.getEPackage().getEClassifiers()\n-                .parallelStream()\n-                .filter(EClass.class::isInstance)\n-                .map(EClass.class::cast)\n-                .filter(isInheritedBy)\n-                .map(ClassBean::from)\n-                .collect(Collectors.toSet());\n+            .parallelStream()\n+            .filter(EClass.class::isInstance)\n+            .map(EClass.class::cast)\n+            .filter(isInheritedBy)\n+            .map(ClassBean::from)\n+            .collect(Collectors.toSet());\n     }\n \n     /**\n@@ -245,7 +239,7 @@ public class ClassBean implements Serializable {\n \n         ClassBean that = (ClassBean) o;\n         return Objects.equals(name, that.name)\n-                && Objects.equals(uri, that.uri);\n+            && Objects.equals(uri, that.uri);\n     }\n \n     @Override\n",
            "diff_size": 20
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "207",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/78/ClassBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/naturalize/78/ClassBean.java\nindex 57fe03a42b4..070c1543b85 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/78/ClassBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/naturalize/78/ClassBean.java\n@@ -70,8 +70,7 @@ public class ClassBean implements Serializable {\n \n         lazyClass = LazyReference.soft(() -> {\n             EPackage p = EPackage.Registry.INSTANCE.getEPackage(uri);\n-            checkNotNull(p, \"Unable to find EPackage associated with URI: %s. \" +\n-                    \"Make sure it is registered in EPackage.Registry\", uri);\n+            checkNotNull(p, \"Unable to find EPackage associated with URI: %s. \" + \"Make sure it is registered in EPackage.Registry\", uri);\n \n             EClass c = (EClass) p.getEClassifier(name);\n             checkNotNull(c, \"Unable to find EClass '%s' from EPackage '%s'\", name, uri);\n@@ -205,8 +204,7 @@ public class ClassBean implements Serializable {\n     @Nonnull\n     public Set<ClassBean> inheritedBy() {\n         final EClass eClass = get();\n-\n-        final Predicate<EClass> isInheritedBy = c -> !c.isInterface()\n+final Predicate<EClass> isInheritedBy = c -> !c.isInterface()\n                 && !c.isAbstract()\n                 && eClass.isSuperTypeOf(c);\n \n@@ -252,5 +250,4 @@ public class ClassBean implements Serializable {\n     public String toString() {\n         return String.format(\"ClassBean {%s @ %s}\", name, uri);\n     }\n-}\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "80",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 24, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "81",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 24, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "85",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 24, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "86",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 24, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 24, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "88",
                    "severity": "warning",
                    "message": "'block rcurly' has incorrect indentation level 20, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/78/ClassBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/codebuff/78/ClassBean.java\nindex 57fe03a42b4..f472fb03fa2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/78/ClassBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/codebuff/78/ClassBean.java\n@@ -9,19 +9,16 @@\n package fr.inria.atlanmod.neoemf.data.bean;\n \n import fr.inria.atlanmod.neoemf.core.PersistentEObject;\n-\n import org.atlanmod.commons.LazyReference;\n import org.eclipse.emf.common.util.URI;\n import org.eclipse.emf.ecore.EClass;\n import org.eclipse.emf.ecore.EPackage;\n-\n import java.io.Serializable;\n import java.util.Objects;\n import java.util.Optional;\n import java.util.Set;\n import java.util.function.Predicate;\n import java.util.stream.Collectors;\n-\n import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n import javax.annotation.ParametersAreNonnullByDefault;\n@@ -32,27 +29,36 @@ import static org.atlanmod.commons.Preconditions.checkNotNull;\n /**\n  * A simple representation of a {@link org.eclipse.emf.ecore.EClass}.\n  */\n+\n+\n @Immutable\n @ParametersAreNonnullByDefault\n public class ClassBean implements Serializable {\n \n+\n     private static final long serialVersionUID = 3630220484508625215L;\n \n     /**\n      * The name of the meta-class.\n      */\n+\n+\n     @Nonnull\n     private final String name;\n \n     /**\n      * The literal representation of the {@link URI} of the meta-class.\n      */\n+\n+\n     @Nonnull\n     private final String uri;\n \n     /**\n      * The cached {@link EClass} of this bean.\n      */\n+\n+\n     @Nonnull\n     private final transient LazyReference<EClass> lazyClass;\n \n@@ -64,20 +70,22 @@ public class ClassBean implements Serializable {\n      * @param uri  the literal representation of the {@link org.eclipse.emf.common.util.URI} of the {@link\n      *             org.eclipse.emf.ecore.EClass}\n      */\n+\n+\n     protected ClassBean(String name, String uri) {\n         this.name = checkNotNull(name, \"name\");\n-        this.uri = checkNotNull(uri, \"uri\");\n \n+        this.uri = checkNotNull(uri, \"uri\");\n         lazyClass = LazyReference.soft(() -> {\n-            EPackage p = EPackage.Registry.INSTANCE.getEPackage(uri);\n-            checkNotNull(p, \"Unable to find EPackage associated with URI: %s. \" +\n-                    \"Make sure it is registered in EPackage.Registry\", uri);\n-\n-            EClass c = (EClass) p.getEClassifier(name);\n-            checkNotNull(c, \"Unable to find EClass '%s' from EPackage '%s'\", name, uri);\n-\n-            return c;\n-        });\n+                        EPackage p = EPackage.Registry.INSTANCE.getEPackage(uri);\n+                        checkNotNull(p,\n+                            \"Unable to find EPackage associated with URI: %s. \" + \"Make sure it is registered in EPackage.Registry\",\n+                            uri);\n+\n+                        EClass c = (EClass) p.getEClassifier(name);\n+                        checkNotNull(c, \"Unable to find EClass '%s' from EPackage '%s'\", name, uri);\n+                        return c;\n+                    });\n     }\n \n     /**\n@@ -85,9 +93,10 @@ public class ClassBean implements Serializable {\n      *\n      * @param reference the represented {@link EClass}\n      */\n+\n+\n     private ClassBean(EClass reference) {\n         this(reference.getName(), reference.getEPackage().getNsURI());\n-\n         lazyClass.update(reference);\n     }\n \n@@ -105,6 +114,7 @@ public class ClassBean implements Serializable {\n      * @throws NullPointerException if any argument is {@code null}\n      * @see #from(EClass)\n      */\n+\n     @Nonnull\n     public static ClassBean from(PersistentEObject object) {\n         return from(object.eClass());\n@@ -121,6 +131,7 @@ public class ClassBean implements Serializable {\n      *\n      * @throws NullPointerException if any argument is {@code null}\n      */\n+\n     @Nonnull\n     public static ClassBean from(EClass eClass) {\n         return new ClassBean(eClass);\n@@ -138,6 +149,7 @@ public class ClassBean implements Serializable {\n      *\n      * @throws NullPointerException if any argument is {@code null}\n      */\n+\n     @Nonnull\n     public static ClassBean of(String name, String uri) {\n         return new ClassBean(name, uri);\n@@ -148,6 +160,7 @@ public class ClassBean implements Serializable {\n      *\n      * @return the name\n      */\n+\n     @Nonnull\n     public String name() {\n         return name;\n@@ -158,6 +171,7 @@ public class ClassBean implements Serializable {\n      *\n      * @return the URI\n      */\n+\n     @Nonnull\n     public String uri() {\n         return uri;\n@@ -168,6 +182,8 @@ public class ClassBean implements Serializable {\n      *\n      * @return {@code true} if this {@code ClassBean} represents an abstract class, {@code false} otherwise\n      */\n+\n+\n     public boolean isAbstract() {\n         return get().isAbstract();\n     }\n@@ -177,6 +193,8 @@ public class ClassBean implements Serializable {\n      *\n      * @return {@code true} if this {@code ClassBean} represents an interface, {@code false} otherwise\n      */\n+\n+\n     public boolean isInterface() {\n         return get().isInterface();\n     }\n@@ -187,13 +205,14 @@ public class ClassBean implements Serializable {\n      * @return an {@link Optional} containing the representation of the direct superclass, or {@link Optional#empty()}\n      * if the class has no superclass\n      */\n+\n     @Nonnull\n     public Optional<ClassBean> inheritFrom() {\n         return get().getESuperTypes()\n-                .parallelStream()\n-                .filter(c -> !c.isInterface())\n-                .map(ClassBean::from)\n-                .findAny();\n+                    .parallelStream()\n+                    .filter(c -> !c.isInterface())\n+                    .map(ClassBean::from)\n+                    .findAny();\n     }\n \n     /**\n@@ -202,21 +221,19 @@ public class ClassBean implements Serializable {\n      * @return a immutable {@link Set} containing the representation of all non-abstract subclasses that inherit,\n      * directly and indirectly, from this {@code ClassBean}\n      */\n+\n     @Nonnull\n     public Set<ClassBean> inheritedBy() {\n         final EClass eClass = get();\n \n-        final Predicate<EClass> isInheritedBy = c -> !c.isInterface()\n-                && !c.isAbstract()\n-                && eClass.isSuperTypeOf(c);\n-\n+        final Predicate<EClass> isInheritedBy = c -> !c.isInterface() && !c.isAbstract() && eClass.isSuperTypeOf(c);\n         return eClass.getEPackage().getEClassifiers()\n-                .parallelStream()\n-                .filter(EClass.class::isInstance)\n-                .map(EClass.class::cast)\n-                .filter(isInheritedBy)\n-                .map(ClassBean::from)\n-                .collect(Collectors.toSet());\n+                                   .parallelStream()\n+                                   .filter(EClass.class::isInstance)\n+                                   .map(EClass.class::cast)\n+                                   .filter(isInheritedBy)\n+                                   .map(ClassBean::from)\n+                                   .collect(Collectors.toSet());\n     }\n \n     /**\n@@ -224,6 +241,7 @@ public class ClassBean implements Serializable {\n      *\n      * @return a class, or {@code null} if it cannot be found\n      */\n+\n     @Nonnull\n     public EClass get() {\n         return lazyClass.get();\n@@ -239,18 +257,17 @@ public class ClassBean implements Serializable {\n         if (this == o) {\n             return true;\n         }\n+\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n \n         ClassBean that = (ClassBean) o;\n-        return Objects.equals(name, that.name)\n-                && Objects.equals(uri, that.uri);\n+        return Objects.equals(name, that.name) && Objects.equals(uri, that.uri);\n     }\n \n     @Override\n     public String toString() {\n         return String.format(\"ClassBean {%s @ %s}\", name, uri);\n     }\n-}\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 59
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/78/ClassBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/styler_random/78/ClassBean.java\nindex 57fe03a42b4..73b94123797 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/78/ClassBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/styler_random/78/ClassBean.java\n@@ -70,8 +70,7 @@ public class ClassBean implements Serializable {\n \n         lazyClass = LazyReference.soft(() -> {\n             EPackage p = EPackage.Registry.INSTANCE.getEPackage(uri);\n-            checkNotNull(p, \"Unable to find EPackage associated with URI: %s. \" +\n-                    \"Make sure it is registered in EPackage.Registry\", uri);\n+            checkNotNull(p, \"Unable to find EPackage associated with URI: %s. \" + \"Make sure it is registered in EPackage.Registry\", uri);\n \n             EClass c = (EClass) p.getEClassifier(name);\n             checkNotNull(c, \"Unable to find EClass '%s' from EPackage '%s'\", name, uri);\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/78/ClassBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/styler_three_grams/78/ClassBean.java\nindex 57fe03a42b4..73b94123797 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/78/ClassBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/styler_three_grams/78/ClassBean.java\n@@ -70,8 +70,7 @@ public class ClassBean implements Serializable {\n \n         lazyClass = LazyReference.soft(() -> {\n             EPackage p = EPackage.Registry.INSTANCE.getEPackage(uri);\n-            checkNotNull(p, \"Unable to find EPackage associated with URI: %s. \" +\n-                    \"Make sure it is registered in EPackage.Registry\", uri);\n+            checkNotNull(p, \"Unable to find EPackage associated with URI: %s. \" + \"Make sure it is registered in EPackage.Registry\", uri);\n \n             EClass c = (EClass) p.getEClassifier(name);\n             checkNotNull(c, \"Unable to find EClass '%s' from EPackage '%s'\", name, uri);\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}