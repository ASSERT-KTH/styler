{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2381",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2381/PageSwapperFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2381/PageSwapperFactory.java\nindex 7ec8889f474..d8f9fa40a80 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2381/PageSwapperFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2381/PageSwapperFactory.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.io.pagecache;\n \n import java.io.File;\n@@ -38,71 +39,72 @@ import org.neo4j.io.fs.FileSystemAbstraction;\n  */\n public interface PageSwapperFactory\n {\n-    /**\n-     * Open page swapper factory with provided filesystem and config\n-     * @param fs file system to use in page swappers\n-     * @param config custom page swapper configuration\n-     */\n-    void open( FileSystemAbstraction fs, Configuration config );\n+  /**\n+   * Open page swapper factory with provided filesystem and config\n+   *\n+   * @param fs     file system to use in page swappers\n+   * @param config custom page swapper configuration\n+   */\n+  void open(FileSystemAbstraction fs, Configuration config);\n \n-    /**\n-     * Get the {@link FileSystemAbstraction} that represents the underlying storage for the page swapper.\n-     */\n-    FileSystemAbstraction getFileSystemAbstraction();\n+  /**\n+   * Get the {@link FileSystemAbstraction} that represents the underlying storage for the page swapper.\n+   */\n+  FileSystemAbstraction getFileSystemAbstraction();\n \n-    /**\n-     * Get the name of this PageSwapperFactory implementation, for configuration purpose.\n-     */\n-    String implementationName();\n+  /**\n+   * Get the name of this PageSwapperFactory implementation, for configuration purpose.\n+   */\n+  String implementationName();\n \n-    /**\n-     * Get the unit of alignment that the swappers require of the memory buffers. For instance, if page alignment is\n-     * required for doing direct IO, then {@link org.neo4j.unsafe.impl.internal.dragons.UnsafeUtil#pageSize()} can be\n-     * returned.\n-     *\n-     * @return The required buffer alignment byte multiple.\n-     */\n-    long getRequiredBufferAlignment();\n+  /**\n+   * Get the unit of alignment that the swappers require of the memory buffers. For instance, if page alignment is\n+   * required for doing direct IO, then {@link org.neo4j.unsafe.impl.internal.dragons.UnsafeUtil#pageSize()} can be\n+   * returned.\n+   *\n+   * @return The required buffer alignment byte multiple.\n+   */\n+  long getRequiredBufferAlignment();\n \n-    /**\n-     * Create a PageSwapper for the given file.\n-     *\n-     * @param file The file that the PageSwapper will move file pages in and\n-     * out of.\n-     * @param filePageSize The size of the pages in the file. Presumably a\n-     * multiple of some record size.\n-     * @param onEviction The PageSwapper will be told about evictions, and has\n-     * the responsibility of informing the PagedFile via this callback.\n-     * @param createIfNotExist When true, creates the given file if it does not exist, instead of throwing an\n-     * exception.\n-     * @return A working PageSwapper instance for the given file.\n-     * @throws IOException If the PageSwapper could not be created, for\n-     * instance if the underlying file could not be opened, or the given file does not exist and createIfNotExist is\n-     * false.\n-     */\n-    PageSwapper createPageSwapper(\n-            File file,\n-            int filePageSize,\n-            PageEvictionCallback onEviction,\n-            boolean createIfNotExist ) throws IOException;\n+  /**\n+   * Create a PageSwapper for the given file.\n+   *\n+   * @param file             The file that the PageSwapper will move file pages in and\n+   *                         out of.\n+   * @param filePageSize     The size of the pages in the file. Presumably a\n+   *                         multiple of some record size.\n+   * @param onEviction       The PageSwapper will be told about evictions, and has\n+   *                         the responsibility of informing the PagedFile via this callback.\n+   * @param createIfNotExist When true, creates the given file if it does not exist, instead of throwing an\n+   *                         exception.\n+   * @return A working PageSwapper instance for the given file.\n+   * @throws IOException If the PageSwapper could not be created, for\n+   *                     instance if the underlying file could not be opened, or the given file does not exist and createIfNotExist is\n+   *                     false.\n+   */\n+  PageSwapper createPageSwapper(\n+      File file,\n+      int filePageSize,\n+      PageEvictionCallback onEviction,\n+      boolean createIfNotExist) throws IOException;\n \n-    /**\n-     * Forces all prior writes made through all non-closed PageSwappers that this factory has created, to all the\n-     * relevant devices, such that the writes are durable when this call returns.\n-     * <p>\n-     * This method has no effect if the {@link PageSwapper#force()} method forces the writes for the individual file.\n-     * The {@link PageCache#flushAndForce()} method will first call <code>force</code> on the PageSwappers for all\n-     * mapped files, then call <code>syncDevice</code> on the PageSwapperFactory. This way, the writes are always made\n-     * durable regardless of which method that does the forcing.\n-     */\n-    void syncDevice();\n+  /**\n+   * Forces all prior writes made through all non-closed PageSwappers that this factory has created, to all the\n+   * relevant devices, such that the writes are durable when this call returns.\n+   * <p>\n+   * This method has no effect if the {@link PageSwapper#force()} method forces the writes for the individual file.\n+   * The {@link PageCache#flushAndForce()} method will first call <code>force</code> on the PageSwappers for all\n+   * mapped files, then call <code>syncDevice</code> on the PageSwapperFactory. This way, the writes are always made\n+   * durable regardless of which method that does the forcing.\n+   */\n+  void syncDevice();\n \n-    /**\n-     * Close and release any resources associated with this PageSwapperFactory, that it may have opened or acquired\n-     * during its construction or use.\n-     * <p>\n-     * This method cannot be called before all of the opened {@link PageSwapper PageSwappers} have been closed,\n-     * and it is guaranteed that no new page swappers will be created after this method has been called.\n-     */\n-    void close();\n+  /**\n+   * Close and release any resources associated with this PageSwapperFactory, that it may have opened or acquired\n+   * during its construction or use.\n+   * <p>\n+   * This method cannot be called before all of the opened {@link PageSwapper PageSwappers} have been closed,\n+   * and it is guaranteed that no new page swappers will be created after this method has been called.\n+   */\n+  void close();\n }\n",
            "diff_size": 63
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2381/PageSwapperFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2381/PageSwapperFactory.java\nindex 7ec8889f474..1c8f2b493d0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2381/PageSwapperFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2381/PageSwapperFactory.java\n@@ -80,13 +80,11 @@ public interface PageSwapperFactory\n      * instance if the underlying file could not be opened, or the given file does not exist and createIfNotExist is\n      * false.\n      */\n-    PageSwapper createPageSwapper(\n-            File file,\n-            int filePageSize,\n+    PageSwapper createPageSwapper( File file, int filePageSize,\n             PageEvictionCallback onEviction,\n             boolean createIfNotExist ) throws IOException;\n \n-    /**\n+/**\n      * Forces all prior writes made through all non-closed PageSwappers that this factory has created, to all the\n      * relevant devices, such that the writes are durable when this call returns.\n      * <p>\n@@ -105,4 +103,4 @@ public interface PageSwapperFactory\n      * and it is guaranteed that no new page swappers will be created after this method has been called.\n      */\n     void close();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}