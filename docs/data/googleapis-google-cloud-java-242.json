{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "242",
    "information": {
        "errors": [
            {
                "line": "293",
                "severity": "warning",
                "message": "Line is longer than 100 characters (found 106).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "  public URI toUri() {\n    try {\n      return new URI(CloudStorageFileSystem.URI_SCHEME, bucket(), path.toAbsolutePath().toString(), null);\n    } catch (URISyntaxException e) {\n      throw new AssertionError(e);\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "293",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "108",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/242/CloudStoragePath.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/242/CloudStoragePath.java\nindex 60b7ab0700c..d0a6153c490 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/242/CloudStoragePath.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/242/CloudStoragePath.java\n@@ -50,13 +50,15 @@ public final class CloudStoragePath implements Path {\n         fileSystem, UnixPath.getPath(fileSystem.config().permitEmptyPathComponents(), path, more));\n   }\n \n-  /** Returns the Cloud Storage bucket name being served by this file system.\n+  /**\n+   * Returns the Cloud Storage bucket name being served by this file system.\n    */\n   public String bucket() {\n     return fileSystem.bucket();\n   }\n \n-  /** Returns path converted to a {@link BlobId} so I/O can be performed.\n+  /**\n+   * Returns path converted to a {@link BlobId} so I/O can be performed.\n    */\n   BlobId getBlobId() {\n     return BlobId.of(bucket(), toRealPath().path.toString());\n@@ -103,8 +105,8 @@ public final class CloudStoragePath implements Path {\n    * is {@code true}.\n    *\n    * @throws IllegalArgumentException if path contains extra slashes or dot-dirs when\n-   *     {@link CloudStorageConfiguration#permitEmptyPathComponents() permitEmptyPathComponents}\n-   *     is {@code false}, or if the resulting path is empty.\n+   *                                  {@link CloudStorageConfiguration#permitEmptyPathComponents() permitEmptyPathComponents}\n+   *                                  is {@code false}, or if the resulting path is empty.\n    */\n   @Override\n   public CloudStoragePath toRealPath(LinkOption... options) {\n@@ -221,7 +223,8 @@ public final class CloudStoragePath implements Path {\n     return path.endsWith(getUnixPath(other));\n   }\n \n-  /** Always @throws UnsupportedOperationException.\n+  /**\n+   * Always @throws UnsupportedOperationException.\n    */\n   @Override\n   public WatchKey register(WatchService watcher, Kind<?>[] events, Modifier... modifiers) {\n@@ -229,7 +232,8 @@ public final class CloudStoragePath implements Path {\n     throw new UnsupportedOperationException();\n   }\n \n-  /** Always @throws UnsupportedOperationException.\n+  /**\n+   * Always @throws UnsupportedOperationException.\n    */\n   @Override\n   public WatchKey register(WatchService watcher, Kind<?>... events) {\n@@ -274,7 +278,7 @@ public final class CloudStoragePath implements Path {\n         || other instanceof CloudStoragePath\n         && Objects.equals(bucket(), ((CloudStoragePath) other).bucket())\n         && Objects.equals(toRealPathInternal(false),\n-            ((CloudStoragePath) other).toRealPathInternal(false));\n+        ((CloudStoragePath) other).toRealPathInternal(false));\n   }\n \n   @Override\n@@ -290,7 +294,8 @@ public final class CloudStoragePath implements Path {\n   @Override\n   public URI toUri() {\n     try {\n-      return new URI(CloudStorageFileSystem.URI_SCHEME, bucket(), path.toAbsolutePath().toString(), null);\n+      return new URI(CloudStorageFileSystem.URI_SCHEME, bucket(), path.toAbsolutePath().toString(),\n+          null);\n     } catch (URISyntaxException e) {\n       throw new AssertionError(e);\n     }\n@@ -315,7 +320,9 @@ public final class CloudStoragePath implements Path {\n     return getUnixPath(fileSystem.config().workingDirectory());\n   }\n \n-  /** Transform iterator providing a slight performance boost over {@code FluentIterable}. */\n+  /**\n+   * Transform iterator providing a slight performance boost over {@code FluentIterable}.\n+   */\n   private final class PathIterator extends UnmodifiableIterator<Path> {\n     private final Iterator<String> delegate = path.split();\n \n",
            "diff_size": 16
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "36",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 119).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "46",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "119",
                    "severity": "warning",
                    "message": "'&&' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "120",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "125",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "257",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 13, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "258",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 11, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "259",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 13, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "277",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "278",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "278",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "294",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "305",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 13, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "306",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 11, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "307",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 13, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/242/CloudStoragePath.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/242/CloudStoragePath.java\nindex 60b7ab0700c..7b693b46d6d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/242/CloudStoragePath.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/242/CloudStoragePath.java\n@@ -7,7 +7,6 @@ import static com.google.common.base.Preconditions.checkNotNull;\n \n import com.google.cloud.storage.BlobId;\n import com.google.common.collect.UnmodifiableIterator;\n-\n import java.io.File;\n import java.net.URI;\n import java.net.URISyntaxException;\n@@ -21,7 +20,6 @@ import java.util.Collections;\n import java.util.Iterator;\n import java.util.Objects;\n import java.util.regex.Pattern;\n-\n import javax.annotation.Nullable;\n import javax.annotation.concurrent.Immutable;\n \n@@ -30,12 +28,12 @@ import javax.annotation.concurrent.Immutable;\n  *\n  * @see UnixPath\n  */\n+\n+\n @Immutable\n public final class CloudStoragePath implements Path {\n \n-  private static final Pattern EXTRA_SLASHES_OR_DOT_DIRS_PATTERN =\n-      Pattern.compile(\"^\\\\.\\\\.?/|//|/\\\\.\\\\.?/|/\\\\.\\\\.?$\");\n-\n+  private static final Pattern EXTRA_SLASHES_OR_DOT_DIRS_PATTERN = Pattern.compile(\"^\\\\.\\\\.?/|//|/\\\\.\\\\.?/|/\\\\.\\\\.?$\");\n   private final CloudStorageFileSystem fileSystem;\n   private final UnixPath path;\n \n@@ -44,20 +42,20 @@ public final class CloudStoragePath implements Path {\n     this.path = path;\n   }\n \n-  static CloudStoragePath getPath(\n-      CloudStorageFileSystem fileSystem, String path, String... more) {\n-    return new CloudStoragePath(\n-        fileSystem, UnixPath.getPath(fileSystem.config().permitEmptyPathComponents(), path, more));\n+  static CloudStoragePath getPath(CloudStorageFileSystem fileSystem, String path, String... more) {\n+    return new CloudStoragePath(fileSystem, UnixPath.getPath(fileSystem.config().permitEmptyPathComponents(), path, more));\n   }\n \n   /** Returns the Cloud Storage bucket name being served by this file system.\n    */\n+\n   public String bucket() {\n     return fileSystem.bucket();\n   }\n \n   /** Returns path converted to a {@link BlobId} so I/O can be performed.\n    */\n+\n   BlobId getBlobId() {\n     return BlobId.of(bucket(), toRealPath().path.toString());\n   }\n@@ -67,7 +65,8 @@ public final class CloudStoragePath implements Path {\n   }\n \n   boolean seemsLikeADirectoryAndUsePseudoDirectories() {\n-    return path.seemsLikeADirectory() && fileSystem.config().usePseudoDirectories();\n+    return path.seemsLikeADirectory()\n+      && fileSystem.config().usePseudoDirectories();\n   }\n \n   @Override\n@@ -90,6 +89,7 @@ public final class CloudStoragePath implements Path {\n    * Changes relative path to absolute, using\n    * {@link CloudStorageConfiguration#workingDirectory() workingDirectory} as the current dir.\n    */\n+\n   @Override\n   public CloudStoragePath toAbsolutePath() {\n     return newPath(path.toAbsolutePath(getWorkingDirectory()));\n@@ -106,6 +106,7 @@ public final class CloudStoragePath implements Path {\n    *     {@link CloudStorageConfiguration#permitEmptyPathComponents() permitEmptyPathComponents}\n    *     is {@code false}, or if the resulting path is empty.\n    */\n+\n   @Override\n   public CloudStoragePath toRealPath(LinkOption... options) {\n     checkNotNullArray(options);\n@@ -114,22 +115,21 @@ public final class CloudStoragePath implements Path {\n \n   private UnixPath toRealPathInternal(boolean errorCheck) {\n     UnixPath objectName = path.toAbsolutePath(getWorkingDirectory());\n-    if (errorCheck && !fileSystem.config().permitEmptyPathComponents()) {\n-      checkArgument(!EXTRA_SLASHES_OR_DOT_DIRS_PATTERN.matcher(objectName).find(),\n-          \"I/O not allowed on dot-dirs or extra slashes when !permitEmptyPathComponents: %s\",\n-          objectName);\n+    if (errorCheck\n+      && !fileSystem.config().permitEmptyPathComponents()) {\n+      checkArgument(!EXTRA_SLASHES_OR_DOT_DIRS_PATTERN.matcher(objectName).find(), \"I/O not allowed on dot-dirs or extra slashes when !permitEmptyPathComponents: %s\", objectName);\n     }\n     if (fileSystem.config().stripPrefixSlash()) {\n       objectName = objectName.removeBeginningSeparator();\n     }\n-    checkArgument(!errorCheck || !objectName.isEmpty(),\n-        \"I/O not allowed on empty GCS object names.\");\n+    checkArgument(!errorCheck || !objectName.isEmpty(), \"I/O not allowed on empty GCS object names.\");\n     return objectName;\n   }\n \n   /**\n    * Returns path without extra slashes or {@code .} and {@code ..} and preserves trailing slash.\n    */\n+\n   @Override\n   public CloudStoragePath normalize() {\n     return newPath(path.normalize());\n@@ -223,6 +223,7 @@ public final class CloudStoragePath implements Path {\n \n   /** Always @throws UnsupportedOperationException.\n    */\n+\n   @Override\n   public WatchKey register(WatchService watcher, Kind<?>[] events, Modifier... modifiers) {\n     // TODO: Implement me.\n@@ -231,6 +232,7 @@ public final class CloudStoragePath implements Path {\n \n   /** Always @throws UnsupportedOperationException.\n    */\n+\n   @Override\n   public WatchKey register(WatchService watcher, Kind<?>... events) {\n     // TODO: Implement me.\n@@ -241,6 +243,7 @@ public final class CloudStoragePath implements Path {\n    * This operation is not supported, since GCS files aren't backed by the local file system.\n    * Always @throws UnsupportedOperationException.\n    */\n+\n   @Override\n   public File toFile() {\n     throw new UnsupportedOperationException(\"GCS objects aren't available locally\");\n@@ -251,9 +254,9 @@ public final class CloudStoragePath implements Path {\n     if (path.isEmpty()) {\n       return Collections.<Path>singleton(this).iterator();\n     } else if (path.isRoot()) {\n-      return Collections.emptyIterator();\n-    } else {\n-      return new PathIterator();\n+             return Collections.emptyIterator();\n+           } else {\n+             return new PathIterator();\n     }\n   }\n \n@@ -270,11 +273,9 @@ public final class CloudStoragePath implements Path {\n \n   @Override\n   public boolean equals(@Nullable Object other) {\n-    return this == other\n-        || other instanceof CloudStoragePath\n-        && Objects.equals(bucket(), ((CloudStoragePath) other).bucket())\n-        && Objects.equals(toRealPathInternal(false),\n-            ((CloudStoragePath) other).toRealPathInternal(false));\n+    return this == other || other instanceof CloudStoragePath\n+    && Objects.equals(bucket(), ((CloudStoragePath) other).bucket())\n+    && Objects.equals(toRealPathInternal(false), ((CloudStoragePath) other).toRealPathInternal(false));\n   }\n \n   @Override\n@@ -301,9 +302,9 @@ public final class CloudStoragePath implements Path {\n     if (newPath == path) {  // Nonuse of equals is intentional.\n       return this;\n     } else if (newPath != null) {\n-      return new CloudStoragePath(fileSystem, newPath);\n-    } else {\n-      return null;\n+             return new CloudStoragePath(fileSystem, newPath);\n+           } else {\n+             return null;\n     }\n   }\n \n@@ -316,7 +317,9 @@ public final class CloudStoragePath implements Path {\n   }\n \n   /** Transform iterator providing a slight performance boost over {@code FluentIterable}. */\n+\n   private final class PathIterator extends UnmodifiableIterator<Path> {\n+\n     private final Iterator<String> delegate = path.split();\n \n     @Override\n@@ -329,4 +332,4 @@ public final class CloudStoragePath implements Path {\n       return delegate.hasNext();\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 41
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "293",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "294",
                    "severity": "warning",
                    "message": "'try rcurly' has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/242/CloudStoragePath.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/242/CloudStoragePath.java\nindex 60b7ab0700c..93c7eb55e90 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/242/CloudStoragePath.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/242/CloudStoragePath.java\n@@ -291,7 +291,7 @@ public final class CloudStoragePath implements Path {\n   public URI toUri() {\n     try {\n       return new URI(CloudStorageFileSystem.URI_SCHEME, bucket(), path.toAbsolutePath().toString(), null);\n-    } catch (URISyntaxException e) {\n+  } catch (URISyntaxException e) {\n       throw new AssertionError(e);\n     }\n   }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "293",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}