{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1203",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "79",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "133",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "68",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "86",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1203/MultiPaxosServerFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1203/MultiPaxosServerFactory.java\nindex ad826b1a2f1..0bcba4f66ac 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1203/MultiPaxosServerFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1203/MultiPaxosServerFactory.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.cluster;\n \n import java.util.concurrent.Executor;\n@@ -69,194 +70,194 @@ import static org.neo4j.cluster.com.message.Message.internal;\n  * Factory for MultiPaxos {@link ProtocolServer}s.\n  */\n public class MultiPaxosServerFactory\n-        implements ProtocolServerFactory\n+    implements ProtocolServerFactory\n {\n-    private final ClusterConfiguration initialConfig;\n-    private final LogProvider logging;\n-    private StateMachines.Monitor stateMachinesMonitor;\n+  private final ClusterConfiguration initialConfig;\n+  private final LogProvider logging;\n+  private StateMachines.Monitor stateMachinesMonitor;\n \n-    public MultiPaxosServerFactory( ClusterConfiguration initialConfig, LogProvider logging, StateMachines.Monitor stateMachinesMonitor )\n-    {\n-        this.initialConfig = initialConfig;\n-        this.logging = logging;\n-        this.stateMachinesMonitor = stateMachinesMonitor;\n-    }\n+  public MultiPaxosServerFactory(ClusterConfiguration initialConfig, LogProvider logging, StateMachines.Monitor stateMachinesMonitor)\n+  {\n+    this.initialConfig = initialConfig;\n+    this.logging = logging;\n+    this.stateMachinesMonitor = stateMachinesMonitor;\n+  }\n \n-    @Override\n-    public ProtocolServer newProtocolServer( InstanceId me,\n-                                             TimeoutStrategy timeoutStrategy, MessageSource input,\n-                                             MessageSender output, AcceptorInstanceStore acceptorInstanceStore,\n-                                             ElectionCredentialsProvider electionCredentialsProvider,\n-                                             Executor stateMachineExecutor,\n-                                             ObjectInputStreamFactory objectInputStreamFactory,\n-                                             ObjectOutputStreamFactory objectOutputStreamFactory,\n-                                             Config config )\n-    {\n-        DelayedDirectExecutor executor = new DelayedDirectExecutor( logging );\n+  @Override\n+  public ProtocolServer newProtocolServer(InstanceId me,\n+                                          TimeoutStrategy timeoutStrategy, MessageSource input,\n+                                          MessageSender output, AcceptorInstanceStore acceptorInstanceStore,\n+                                          ElectionCredentialsProvider electionCredentialsProvider,\n+                                          Executor stateMachineExecutor,\n+                                          ObjectInputStreamFactory objectInputStreamFactory,\n+                                          ObjectOutputStreamFactory objectOutputStreamFactory,\n+                                          Config config)\n+  {\n+    DelayedDirectExecutor executor = new DelayedDirectExecutor(logging);\n \n-        // Create state machines\n-        Timeouts timeouts = new Timeouts( timeoutStrategy );\n+    // Create state machines\n+    Timeouts timeouts = new Timeouts(timeoutStrategy);\n \n-        final MultiPaxosContext context = new MultiPaxosContext( me,\n-                Iterables.iterable( new ElectionRole( ClusterConfiguration.COORDINATOR ) ),\n-                new ClusterConfiguration( initialConfig.getName(), logging,\n-                        initialConfig.getMemberURIs() ),\n-                executor, logging, objectInputStreamFactory, objectOutputStreamFactory, acceptorInstanceStore, timeouts,\n-                electionCredentialsProvider, config\n-        );\n+    final MultiPaxosContext context = new MultiPaxosContext(me,\n+        Iterables.iterable(new ElectionRole(ClusterConfiguration.COORDINATOR)),\n+        new ClusterConfiguration(initialConfig.getName(), logging,\n+            initialConfig.getMemberURIs()),\n+        executor, logging, objectInputStreamFactory, objectOutputStreamFactory, acceptorInstanceStore, timeouts,\n+        electionCredentialsProvider, config\n+    );\n \n-        SnapshotContext snapshotContext = new SnapshotContext( context.getClusterContext(),\n-                context.getLearnerContext() );\n+    SnapshotContext snapshotContext = new SnapshotContext(context.getClusterContext(),\n+        context.getLearnerContext());\n \n-        return newProtocolServer( me, input, output, stateMachineExecutor, executor, timeouts,\n-                context, snapshotContext );\n-    }\n+    return newProtocolServer(me, input, output, stateMachineExecutor, executor, timeouts,\n+        context, snapshotContext);\n+  }\n \n-    @SuppressWarnings( \"unchecked\" )\n-    public ProtocolServer newProtocolServer( InstanceId me, MessageSource input, MessageSender output,\n-                                             Executor stateMachineExecutor, DelayedDirectExecutor executor,\n-                                             Timeouts timeouts,\n-                                             MultiPaxosContext context, SnapshotContext snapshotContext )\n-    {\n-        return constructSupportingInfrastructureFor( me, input, output, executor, timeouts, stateMachineExecutor,\n-                context, new StateMachine[]\n-                {\n-                        new StateMachine( context.getAtomicBroadcastContext(), AtomicBroadcastMessage.class,\n-                                AtomicBroadcastState.start, logging ),\n-                        new StateMachine( context.getAcceptorContext(), AcceptorMessage.class, AcceptorState.start,\n-                                logging ),\n-                        new StateMachine( context.getProposerContext(), ProposerMessage.class, ProposerState.start,\n-                                logging ),\n-                        new StateMachine( context.getLearnerContext(), LearnerMessage.class, LearnerState.start,\n-                                logging ),\n-                        new StateMachine( context.getHeartbeatContext(), HeartbeatMessage.class, HeartbeatState.start,\n-                                logging ),\n-                        new StateMachine( context.getElectionContext(), ElectionMessage.class, ElectionState.start,\n-                                logging ),\n-                        new StateMachine( snapshotContext, SnapshotMessage.class, SnapshotState.start, logging ),\n-                        new StateMachine( context.getClusterContext(), ClusterMessage.class, ClusterState.start,\n-                                logging )\n-                } );\n-    }\n+  @SuppressWarnings(\"unchecked\")\n+  public ProtocolServer newProtocolServer(InstanceId me, MessageSource input, MessageSender output,\n+                                          Executor stateMachineExecutor, DelayedDirectExecutor executor,\n+                                          Timeouts timeouts,\n+                                          MultiPaxosContext context, SnapshotContext snapshotContext)\n+  {\n+    return constructSupportingInfrastructureFor(me, input, output, executor, timeouts, stateMachineExecutor,\n+        context, new StateMachine[]\n+            {\n+                new StateMachine(context.getAtomicBroadcastContext(), AtomicBroadcastMessage.class,\n+                    AtomicBroadcastState.start, logging),\n+                new StateMachine(context.getAcceptorContext(), AcceptorMessage.class, AcceptorState.start,\n+                    logging),\n+                new StateMachine(context.getProposerContext(), ProposerMessage.class, ProposerState.start,\n+                    logging),\n+                new StateMachine(context.getLearnerContext(), LearnerMessage.class, LearnerState.start,\n+                    logging),\n+                new StateMachine(context.getHeartbeatContext(), HeartbeatMessage.class, HeartbeatState.start,\n+                    logging),\n+                new StateMachine(context.getElectionContext(), ElectionMessage.class, ElectionState.start,\n+                    logging),\n+                new StateMachine(snapshotContext, SnapshotMessage.class, SnapshotState.start, logging),\n+                new StateMachine(context.getClusterContext(), ClusterMessage.class, ClusterState.start,\n+                    logging)\n+            });\n+  }\n \n-    /**\n-     * Sets up the supporting infrastructure and communication hooks for our state machines. This is here to support\n-     * an external requirement for assembling protocol servers given an existing set of state machines (used to prove\n-     * correctness).\n-     */\n-    @SuppressWarnings( \"rawtypes\" )\n-    public ProtocolServer constructSupportingInfrastructureFor( InstanceId me, MessageSource input,\n-                                                                MessageSender output, DelayedDirectExecutor executor,\n-                                                                Timeouts timeouts,\n-                                                                Executor stateMachineExecutor,\n-                                                                final MultiPaxosContext context,\n-                                                                StateMachine[] machines )\n-    {\n-        StateMachines stateMachines = new StateMachines( logging, stateMachinesMonitor, input,\n-                output, timeouts, executor, stateMachineExecutor, me );\n+  /**\n+   * Sets up the supporting infrastructure and communication hooks for our state machines. This is here to support\n+   * an external requirement for assembling protocol servers given an existing set of state machines (used to prove\n+   * correctness).\n+   */\n+  @SuppressWarnings(\"rawtypes\")\n+  public ProtocolServer constructSupportingInfrastructureFor(InstanceId me, MessageSource input,\n+                                                             MessageSender output, DelayedDirectExecutor executor,\n+                                                             Timeouts timeouts,\n+                                                             Executor stateMachineExecutor,\n+                                                             final MultiPaxosContext context,\n+                                                             StateMachine[] machines)\n+  {\n+    StateMachines stateMachines = new StateMachines(logging, stateMachinesMonitor, input,\n+        output, timeouts, executor, stateMachineExecutor, me);\n \n-        for ( StateMachine machine : machines )\n-        {\n-            stateMachines.addStateMachine( machine );\n-        }\n+    for (StateMachine machine : machines)\n+    {\n+      stateMachines.addStateMachine(machine);\n+    }\n \n-        final ProtocolServer server = new ProtocolServer( me, stateMachines, logging );\n+    final ProtocolServer server = new ProtocolServer(me, stateMachines, logging);\n \n-        server.addBindingListener( me1 -> context.getClusterContext().setBoundAt( me1 ) );\n+    server.addBindingListener(me1 -> context.getClusterContext().setBoundAt(me1));\n \n-        stateMachines.addMessageProcessor( new HeartbeatRefreshProcessor( stateMachines.getOutgoing(),\n-                context.getClusterContext() ) );\n-        input.addMessageProcessor( new HeartbeatIAmAliveProcessor( stateMachines.getOutgoing(),\n-                context.getClusterContext() ) );\n+    stateMachines.addMessageProcessor(new HeartbeatRefreshProcessor(stateMachines.getOutgoing(),\n+        context.getClusterContext()));\n+    input.addMessageProcessor(new HeartbeatIAmAliveProcessor(stateMachines.getOutgoing(),\n+        context.getClusterContext()));\n \n-        Cluster cluster = server.newClient( Cluster.class );\n-        cluster.addClusterListener( new HeartbeatJoinListener( stateMachines.getOutgoing() ) );\n-        cluster.addClusterListener( new HeartbeatLeftListener( context.getHeartbeatContext(), logging ) );\n+    Cluster cluster = server.newClient(Cluster.class);\n+    cluster.addClusterListener(new HeartbeatJoinListener(stateMachines.getOutgoing()));\n+    cluster.addClusterListener(new HeartbeatLeftListener(context.getHeartbeatContext(), logging));\n \n-        context.getHeartbeatContext().addHeartbeatListener( new HeartbeatReelectionListener(\n-                server.newClient( Election.class ), logging ) );\n-        context.getClusterContext().addClusterListener( new ClusterLeaveReelectionListener( server.newClient(\n-                Election.class ),\n-                logging\n-        ) );\n+    context.getHeartbeatContext().addHeartbeatListener(new HeartbeatReelectionListener(\n+        server.newClient(Election.class), logging));\n+    context.getClusterContext().addClusterListener(new ClusterLeaveReelectionListener(server.newClient(\n+        Election.class),\n+        logging\n+    ));\n \n-        StateMachineRules rules = new StateMachineRules( stateMachines.getOutgoing() )\n-                .rule( ClusterState.start, ClusterMessage.create, ClusterState.entered,\n-                        internal( AtomicBroadcastMessage.entered ),\n-                        internal( ProposerMessage.join ),\n-                        internal( AcceptorMessage.join ),\n-                        internal( LearnerMessage.join ),\n-                        internal( HeartbeatMessage.join ),\n-                        internal( ElectionMessage.created ),\n-                        internal( SnapshotMessage.join ) )\n+    StateMachineRules rules = new StateMachineRules(stateMachines.getOutgoing())\n+        .rule(ClusterState.start, ClusterMessage.create, ClusterState.entered,\n+            internal(AtomicBroadcastMessage.entered),\n+            internal(ProposerMessage.join),\n+            internal(AcceptorMessage.join),\n+            internal(LearnerMessage.join),\n+            internal(HeartbeatMessage.join),\n+            internal(ElectionMessage.created),\n+            internal(SnapshotMessage.join))\n \n-                .rule( ClusterState.discovery, ClusterMessage.configurationResponse, ClusterState.joining,\n-                        internal( AcceptorMessage.join ),\n-                        internal( LearnerMessage.join ),\n-                        internal( AtomicBroadcastMessage.join ) )\n+        .rule(ClusterState.discovery, ClusterMessage.configurationResponse, ClusterState.joining,\n+            internal(AcceptorMessage.join),\n+            internal(LearnerMessage.join),\n+            internal(AtomicBroadcastMessage.join))\n \n-                .rule( ClusterState.discovery, ClusterMessage.configurationResponse, ClusterState.entered,\n-                        internal( AtomicBroadcastMessage.entered ),\n-                        internal( ProposerMessage.join ),\n-                        internal( AcceptorMessage.join ),\n-                        internal( LearnerMessage.join ),\n-                        internal( HeartbeatMessage.join ),\n-                        internal( ElectionMessage.join ),\n-                        internal( SnapshotMessage.join ) )\n+        .rule(ClusterState.discovery, ClusterMessage.configurationResponse, ClusterState.entered,\n+            internal(AtomicBroadcastMessage.entered),\n+            internal(ProposerMessage.join),\n+            internal(AcceptorMessage.join),\n+            internal(LearnerMessage.join),\n+            internal(HeartbeatMessage.join),\n+            internal(ElectionMessage.join),\n+            internal(SnapshotMessage.join))\n \n-                .rule( ClusterState.joining, ClusterMessage.configurationChanged, ClusterState.entered,\n-                        internal( AtomicBroadcastMessage.entered ),\n-                        internal( ProposerMessage.join ),\n-                        internal( AcceptorMessage.join ),\n-                        internal( LearnerMessage.join ),\n-                        internal( HeartbeatMessage.join ),\n-                        internal( ElectionMessage.join ),\n-                        internal( SnapshotMessage.join ) )\n+        .rule(ClusterState.joining, ClusterMessage.configurationChanged, ClusterState.entered,\n+            internal(AtomicBroadcastMessage.entered),\n+            internal(ProposerMessage.join),\n+            internal(AcceptorMessage.join),\n+            internal(LearnerMessage.join),\n+            internal(HeartbeatMessage.join),\n+            internal(ElectionMessage.join),\n+            internal(SnapshotMessage.join))\n \n-                .rule( ClusterState.joining, ClusterMessage.joinFailure, ClusterState.start,\n-                        internal( AtomicBroadcastMessage.leave ),\n-                        internal( AcceptorMessage.leave ),\n-                        internal( LearnerMessage.leave ),\n-                        internal( ProposerMessage.leave ) )\n+        .rule(ClusterState.joining, ClusterMessage.joinFailure, ClusterState.start,\n+            internal(AtomicBroadcastMessage.leave),\n+            internal(AcceptorMessage.leave),\n+            internal(LearnerMessage.leave),\n+            internal(ProposerMessage.leave))\n \n-                .rule( ClusterState.entered, ClusterMessage.leave, ClusterState.start,\n-                        internal( AtomicBroadcastMessage.leave ),\n-                        internal( AcceptorMessage.leave ),\n-                        internal( LearnerMessage.leave ),\n-                        internal( HeartbeatMessage.leave ),\n-                        internal( SnapshotMessage.leave ),\n-                        internal( ElectionMessage.leave ),\n-                        internal( ProposerMessage.leave ) )\n+        .rule(ClusterState.entered, ClusterMessage.leave, ClusterState.start,\n+            internal(AtomicBroadcastMessage.leave),\n+            internal(AcceptorMessage.leave),\n+            internal(LearnerMessage.leave),\n+            internal(HeartbeatMessage.leave),\n+            internal(SnapshotMessage.leave),\n+            internal(ElectionMessage.leave),\n+            internal(ProposerMessage.leave))\n \n-                .rule( ClusterState.entered, ClusterMessage.leave, ClusterState.start,\n-                        internal( AtomicBroadcastMessage.leave ),\n-                        internal( AcceptorMessage.leave ),\n-                        internal( LearnerMessage.leave ),\n-                        internal( HeartbeatMessage.leave ),\n-                        internal( ElectionMessage.leave ),\n-                        internal( SnapshotMessage.leave ),\n-                        internal( ProposerMessage.leave ) )\n+        .rule(ClusterState.entered, ClusterMessage.leave, ClusterState.start,\n+            internal(AtomicBroadcastMessage.leave),\n+            internal(AcceptorMessage.leave),\n+            internal(LearnerMessage.leave),\n+            internal(HeartbeatMessage.leave),\n+            internal(ElectionMessage.leave),\n+            internal(SnapshotMessage.leave),\n+            internal(ProposerMessage.leave))\n \n-                .rule( ClusterState.leaving, ClusterMessage.configurationChanged, ClusterState.start,\n-                        internal( AtomicBroadcastMessage.leave ),\n-                        internal( AcceptorMessage.leave ),\n-                        internal( LearnerMessage.leave ),\n-                        internal( HeartbeatMessage.leave ),\n-                        internal( ElectionMessage.leave ),\n-                        internal( SnapshotMessage.leave ),\n-                        internal( ProposerMessage.leave ) )\n+        .rule(ClusterState.leaving, ClusterMessage.configurationChanged, ClusterState.start,\n+            internal(AtomicBroadcastMessage.leave),\n+            internal(AcceptorMessage.leave),\n+            internal(LearnerMessage.leave),\n+            internal(HeartbeatMessage.leave),\n+            internal(ElectionMessage.leave),\n+            internal(SnapshotMessage.leave),\n+            internal(ProposerMessage.leave))\n \n-                .rule( ClusterState.leaving, ClusterMessage.leaveTimedout, ClusterState.start,\n-                        internal( AtomicBroadcastMessage.leave ),\n-                        internal( AcceptorMessage.leave ),\n-                        internal( LearnerMessage.leave ),\n-                        internal( HeartbeatMessage.leave ),\n-                        internal( ElectionMessage.leave ),\n-                        internal( SnapshotMessage.leave ),\n-                        internal( ProposerMessage.leave ) );\n+        .rule(ClusterState.leaving, ClusterMessage.leaveTimedout, ClusterState.start,\n+            internal(AtomicBroadcastMessage.leave),\n+            internal(AcceptorMessage.leave),\n+            internal(LearnerMessage.leave),\n+            internal(HeartbeatMessage.leave),\n+            internal(ElectionMessage.leave),\n+            internal(SnapshotMessage.leave),\n+            internal(ProposerMessage.leave));\n \n-        stateMachines.addStateTransitionListener( rules );\n+    stateMachines.addStateTransitionListener(rules);\n \n-        return server;\n-    }\n+    return server;\n+  }\n }\n",
            "diff_size": 165
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "100",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 200).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "107",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "113",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "118",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 221).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "150",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 365).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "151",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 222).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "152",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 359).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "153",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 348).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "154",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 240).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "155",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 346).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "156",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 361).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "157",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 354).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "158",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 277).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1203/MultiPaxosServerFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1203/MultiPaxosServerFactory.java\nindex ad826b1a2f1..9b97a4f5a8b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1203/MultiPaxosServerFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1203/MultiPaxosServerFactory.java\n@@ -68,8 +68,7 @@ import static org.neo4j.cluster.com.message.Message.internal;\n /**\n  * Factory for MultiPaxos {@link ProtocolServer}s.\n  */\n-public class MultiPaxosServerFactory\n-        implements ProtocolServerFactory\n+public class MultiPaxosServerFactory implements ProtocolServerFactory\n {\n     private final ClusterConfiguration initialConfig;\n     private final LogProvider logging;\n@@ -83,60 +82,41 @@ public class MultiPaxosServerFactory\n     }\n \n     @Override\n-    public ProtocolServer newProtocolServer( InstanceId me,\n-                                             TimeoutStrategy timeoutStrategy, MessageSource input,\n+    public ProtocolServer newProtocolServer( InstanceId me, TimeoutStrategy timeoutStrategy, MessageSource input,\n                                              MessageSender output, AcceptorInstanceStore acceptorInstanceStore,\n                                              ElectionCredentialsProvider electionCredentialsProvider,\n                                              Executor stateMachineExecutor,\n                                              ObjectInputStreamFactory objectInputStreamFactory,\n                                              ObjectOutputStreamFactory objectOutputStreamFactory,\n                                              Config config )\n-    {\n+{\n         DelayedDirectExecutor executor = new DelayedDirectExecutor( logging );\n \n         // Create state machines\n         Timeouts timeouts = new Timeouts( timeoutStrategy );\n \n         final MultiPaxosContext context = new MultiPaxosContext( me,\n-                Iterables.iterable( new ElectionRole( ClusterConfiguration.COORDINATOR ) ),\n-                new ClusterConfiguration( initialConfig.getName(), logging,\n-                        initialConfig.getMemberURIs() ),\n-                executor, logging, objectInputStreamFactory, objectOutputStreamFactory, acceptorInstanceStore, timeouts,\n-                electionCredentialsProvider, config\n-        );\n-\n-        SnapshotContext snapshotContext = new SnapshotContext( context.getClusterContext(),\n-                context.getLearnerContext() );\n-\n-        return newProtocolServer( me, input, output, stateMachineExecutor, executor, timeouts,\n+                Iterables.iterable( new ElectionRole( ClusterConfiguration.COORDINATOR ) ), new ClusterConfiguration( initialConfig.getName(), logging,\n+                        initialConfig.getMemberURIs() ), executor, logging, objectInputStreamFactory, objectOutputStreamFactory, acceptorInstanceStore, timeouts, electionCredentialsProvider, config );\n+SnapshotContext snapshotContext = new SnapshotContext( context.getClusterContext(), context.getLearnerContext() );\n+return newProtocolServer( me, input, output, stateMachineExecutor, executor, timeouts,\n                 context, snapshotContext );\n     }\n \n     @SuppressWarnings( \"unchecked\" )\n-    public ProtocolServer newProtocolServer( InstanceId me, MessageSource input, MessageSender output,\n-                                             Executor stateMachineExecutor, DelayedDirectExecutor executor,\n+    public ProtocolServer newProtocolServer( InstanceId me, MessageSource input, MessageSender output, Executor stateMachineExecutor, DelayedDirectExecutor executor,\n                                              Timeouts timeouts,\n                                              MultiPaxosContext context, SnapshotContext snapshotContext )\n-    {\n+{\n         return constructSupportingInfrastructureFor( me, input, output, executor, timeouts, stateMachineExecutor,\n-                context, new StateMachine[]\n-                {\n-                        new StateMachine( context.getAtomicBroadcastContext(), AtomicBroadcastMessage.class,\n-                                AtomicBroadcastState.start, logging ),\n-                        new StateMachine( context.getAcceptorContext(), AcceptorMessage.class, AcceptorState.start,\n-                                logging ),\n-                        new StateMachine( context.getProposerContext(), ProposerMessage.class, ProposerState.start,\n-                                logging ),\n-                        new StateMachine( context.getLearnerContext(), LearnerMessage.class, LearnerState.start,\n-                                logging ),\n-                        new StateMachine( context.getHeartbeatContext(), HeartbeatMessage.class, HeartbeatState.start,\n-                                logging ),\n-                        new StateMachine( context.getElectionContext(), ElectionMessage.class, ElectionState.start,\n-                                logging ),\n-                        new StateMachine( snapshotContext, SnapshotMessage.class, SnapshotState.start, logging ),\n-                        new StateMachine( context.getClusterContext(), ClusterMessage.class, ClusterState.start,\n-                                logging )\n-                } );\n+                context, new StateMachine[]{ new StateMachine( context.getAtomicBroadcastContext(), AtomicBroadcastMessage.class,\n+                                AtomicBroadcastState.start, logging ), new StateMachine( context.getAcceptorContext(), AcceptorMessage.class, AcceptorState.start,\n+                                logging ), new StateMachine( context.getProposerContext(), ProposerMessage.class, ProposerState.start,\n+                                logging ), new StateMachine( context.getLearnerContext(), LearnerMessage.class, LearnerState.start,\n+                                logging ), new StateMachine( context.getHeartbeatContext(), HeartbeatMessage.class, HeartbeatState.start,\n+                                logging ), new StateMachine( context.getElectionContext(), ElectionMessage.class, ElectionState.start,\n+                                logging ), new StateMachine( snapshotContext, SnapshotMessage.class, SnapshotState.start, logging ), new StateMachine( context.getClusterContext(), ClusterMessage.class, ClusterState.start,\n+                                logging )} );\n     }\n \n     /**\n@@ -145,118 +125,38 @@ public class MultiPaxosServerFactory\n      * correctness).\n      */\n     @SuppressWarnings( \"rawtypes\" )\n-    public ProtocolServer constructSupportingInfrastructureFor( InstanceId me, MessageSource input,\n-                                                                MessageSender output, DelayedDirectExecutor executor,\n+    public ProtocolServer constructSupportingInfrastructureFor( InstanceId me, MessageSource input, MessageSender output, DelayedDirectExecutor executor,\n                                                                 Timeouts timeouts,\n-                                                                Executor stateMachineExecutor,\n-                                                                final MultiPaxosContext context,\n+                                                                Executor stateMachineExecutor, final MultiPaxosContext context,\n                                                                 StateMachine[] machines )\n-    {\n+{\n         StateMachines stateMachines = new StateMachines( logging, stateMachinesMonitor, input,\n                 output, timeouts, executor, stateMachineExecutor, me );\n-\n-        for ( StateMachine machine : machines )\n+for ( StateMachine machine : machines )\n         {\n             stateMachines.addStateMachine( machine );\n         }\n \n         final ProtocolServer server = new ProtocolServer( me, stateMachines, logging );\n-\n-        server.addBindingListener( me1 -> context.getClusterContext().setBoundAt( me1 ) );\n-\n-        stateMachines.addMessageProcessor( new HeartbeatRefreshProcessor( stateMachines.getOutgoing(),\n-                context.getClusterContext() ) );\n-        input.addMessageProcessor( new HeartbeatIAmAliveProcessor( stateMachines.getOutgoing(),\n-                context.getClusterContext() ) );\n-\n-        Cluster cluster = server.newClient( Cluster.class );\n+server.addBindingListener( me1 -> context.getClusterContext().setBoundAt( me1 ) );\n+stateMachines.addMessageProcessor( new HeartbeatRefreshProcessor( stateMachines.getOutgoing(), context.getClusterContext() ) );\n+input.addMessageProcessor( new HeartbeatIAmAliveProcessor( stateMachines.getOutgoing(), context.getClusterContext() ) );\n+Cluster cluster = server.newClient( Cluster.class );\n         cluster.addClusterListener( new HeartbeatJoinListener( stateMachines.getOutgoing() ) );\n         cluster.addClusterListener( new HeartbeatLeftListener( context.getHeartbeatContext(), logging ) );\n-\n-        context.getHeartbeatContext().addHeartbeatListener( new HeartbeatReelectionListener(\n-                server.newClient( Election.class ), logging ) );\n-        context.getClusterContext().addClusterListener( new ClusterLeaveReelectionListener( server.newClient(\n-                Election.class ),\n-                logging\n-        ) );\n-\n-        StateMachineRules rules = new StateMachineRules( stateMachines.getOutgoing() )\n-                .rule( ClusterState.start, ClusterMessage.create, ClusterState.entered,\n-                        internal( AtomicBroadcastMessage.entered ),\n-                        internal( ProposerMessage.join ),\n-                        internal( AcceptorMessage.join ),\n-                        internal( LearnerMessage.join ),\n-                        internal( HeartbeatMessage.join ),\n-                        internal( ElectionMessage.created ),\n-                        internal( SnapshotMessage.join ) )\n-\n-                .rule( ClusterState.discovery, ClusterMessage.configurationResponse, ClusterState.joining,\n-                        internal( AcceptorMessage.join ),\n-                        internal( LearnerMessage.join ),\n-                        internal( AtomicBroadcastMessage.join ) )\n-\n-                .rule( ClusterState.discovery, ClusterMessage.configurationResponse, ClusterState.entered,\n-                        internal( AtomicBroadcastMessage.entered ),\n-                        internal( ProposerMessage.join ),\n-                        internal( AcceptorMessage.join ),\n-                        internal( LearnerMessage.join ),\n-                        internal( HeartbeatMessage.join ),\n-                        internal( ElectionMessage.join ),\n-                        internal( SnapshotMessage.join ) )\n-\n-                .rule( ClusterState.joining, ClusterMessage.configurationChanged, ClusterState.entered,\n-                        internal( AtomicBroadcastMessage.entered ),\n-                        internal( ProposerMessage.join ),\n-                        internal( AcceptorMessage.join ),\n-                        internal( LearnerMessage.join ),\n-                        internal( HeartbeatMessage.join ),\n-                        internal( ElectionMessage.join ),\n-                        internal( SnapshotMessage.join ) )\n-\n-                .rule( ClusterState.joining, ClusterMessage.joinFailure, ClusterState.start,\n-                        internal( AtomicBroadcastMessage.leave ),\n-                        internal( AcceptorMessage.leave ),\n-                        internal( LearnerMessage.leave ),\n-                        internal( ProposerMessage.leave ) )\n-\n-                .rule( ClusterState.entered, ClusterMessage.leave, ClusterState.start,\n-                        internal( AtomicBroadcastMessage.leave ),\n-                        internal( AcceptorMessage.leave ),\n-                        internal( LearnerMessage.leave ),\n-                        internal( HeartbeatMessage.leave ),\n-                        internal( SnapshotMessage.leave ),\n-                        internal( ElectionMessage.leave ),\n-                        internal( ProposerMessage.leave ) )\n-\n-                .rule( ClusterState.entered, ClusterMessage.leave, ClusterState.start,\n-                        internal( AtomicBroadcastMessage.leave ),\n-                        internal( AcceptorMessage.leave ),\n-                        internal( LearnerMessage.leave ),\n-                        internal( HeartbeatMessage.leave ),\n-                        internal( ElectionMessage.leave ),\n-                        internal( SnapshotMessage.leave ),\n-                        internal( ProposerMessage.leave ) )\n-\n-                .rule( ClusterState.leaving, ClusterMessage.configurationChanged, ClusterState.start,\n-                        internal( AtomicBroadcastMessage.leave ),\n-                        internal( AcceptorMessage.leave ),\n-                        internal( LearnerMessage.leave ),\n-                        internal( HeartbeatMessage.leave ),\n-                        internal( ElectionMessage.leave ),\n-                        internal( SnapshotMessage.leave ),\n-                        internal( ProposerMessage.leave ) )\n-\n-                .rule( ClusterState.leaving, ClusterMessage.leaveTimedout, ClusterState.start,\n-                        internal( AtomicBroadcastMessage.leave ),\n-                        internal( AcceptorMessage.leave ),\n-                        internal( LearnerMessage.leave ),\n-                        internal( HeartbeatMessage.leave ),\n-                        internal( ElectionMessage.leave ),\n-                        internal( SnapshotMessage.leave ),\n-                        internal( ProposerMessage.leave ) );\n-\n-        stateMachines.addStateTransitionListener( rules );\n-\n-        return server;\n+context.getHeartbeatContext().addHeartbeatListener( new HeartbeatReelectionListener( server.newClient( Election.class ), logging ) );\n+context.getClusterContext().addClusterListener( new ClusterLeaveReelectionListener( server.newClient( Election.class ), logging ) );\n+StateMachineRules rules = new StateMachineRules( stateMachines.getOutgoing() ).rule( ClusterState.start, ClusterMessage.create, ClusterState.entered,\n+                        internal( AtomicBroadcastMessage.entered ), internal( ProposerMessage.join ), internal( AcceptorMessage.join ), internal( LearnerMessage.join ), internal( HeartbeatMessage.join ), internal( ElectionMessage.created ), internal( SnapshotMessage.join ) ).rule( ClusterState.discovery, ClusterMessage.configurationResponse, ClusterState.joining,\n+                        internal( AcceptorMessage.join ), internal( LearnerMessage.join ), internal( AtomicBroadcastMessage.join ) ).rule( ClusterState.discovery, ClusterMessage.configurationResponse, ClusterState.entered,\n+                        internal( AtomicBroadcastMessage.entered ), internal( ProposerMessage.join ), internal( AcceptorMessage.join ), internal( LearnerMessage.join ), internal( HeartbeatMessage.join ), internal( ElectionMessage.join ), internal( SnapshotMessage.join ) ).rule( ClusterState.joining, ClusterMessage.configurationChanged, ClusterState.entered,\n+                        internal( AtomicBroadcastMessage.entered ), internal( ProposerMessage.join ), internal( AcceptorMessage.join ), internal( LearnerMessage.join ), internal( HeartbeatMessage.join ), internal( ElectionMessage.join ), internal( SnapshotMessage.join ) ).rule( ClusterState.joining, ClusterMessage.joinFailure, ClusterState.start,\n+                        internal( AtomicBroadcastMessage.leave ), internal( AcceptorMessage.leave ), internal( LearnerMessage.leave ), internal( ProposerMessage.leave ) ).rule( ClusterState.entered, ClusterMessage.leave, ClusterState.start,\n+                        internal( AtomicBroadcastMessage.leave ), internal( AcceptorMessage.leave ), internal( LearnerMessage.leave ), internal( HeartbeatMessage.leave ), internal( SnapshotMessage.leave ), internal( ElectionMessage.leave ), internal( ProposerMessage.leave ) ).rule( ClusterState.entered, ClusterMessage.leave, ClusterState.start,\n+                        internal( AtomicBroadcastMessage.leave ), internal( AcceptorMessage.leave ), internal( LearnerMessage.leave ), internal( HeartbeatMessage.leave ), internal( ElectionMessage.leave ), internal( SnapshotMessage.leave ), internal( ProposerMessage.leave ) ).rule( ClusterState.leaving, ClusterMessage.configurationChanged, ClusterState.start,\n+                        internal( AtomicBroadcastMessage.leave ), internal( AcceptorMessage.leave ), internal( LearnerMessage.leave ), internal( HeartbeatMessage.leave ), internal( ElectionMessage.leave ), internal( SnapshotMessage.leave ), internal( ProposerMessage.leave ) ).rule( ClusterState.leaving, ClusterMessage.leaveTimedout, ClusterState.start,\n+                        internal( AtomicBroadcastMessage.leave ), internal( AcceptorMessage.leave ), internal( LearnerMessage.leave ), internal( HeartbeatMessage.leave ), internal( ElectionMessage.leave ), internal( SnapshotMessage.leave ), internal( ProposerMessage.leave ) );\n+stateMachines.addStateTransitionListener( rules );\n+return server;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 140
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "84",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 388).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "90",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 381).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "95",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 245).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "98",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 976).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "107",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 262).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "111",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "111",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 2,822).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1203/MultiPaxosServerFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/1203/MultiPaxosServerFactory.java\nindex ad826b1a2f1..71b84c5f8a9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1203/MultiPaxosServerFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/1203/MultiPaxosServerFactory.java\n@@ -20,7 +20,6 @@\n package org.neo4j.cluster;\n \n import java.util.concurrent.Executor;\n-\n import org.neo4j.cluster.com.message.MessageSender;\n import org.neo4j.cluster.com.message.MessageSource;\n import org.neo4j.cluster.protocol.atomicbroadcast.ObjectInputStreamFactory;\n@@ -62,14 +61,13 @@ import org.neo4j.cluster.timeout.Timeouts;\n import org.neo4j.helpers.collection.Iterables;\n import org.neo4j.kernel.configuration.Config;\n import org.neo4j.logging.LogProvider;\n-\n import static org.neo4j.cluster.com.message.Message.internal;\n \n /**\n  * Factory for MultiPaxos {@link ProtocolServer}s.\n  */\n-public class MultiPaxosServerFactory\n-        implements ProtocolServerFactory\n+\n+public class MultiPaxosServerFactory implements ProtocolServerFactory\n {\n     private final ClusterConfiguration initialConfig;\n     private final LogProvider logging;\n@@ -83,60 +81,21 @@ public class MultiPaxosServerFactory\n     }\n \n     @Override\n-    public ProtocolServer newProtocolServer( InstanceId me,\n-                                             TimeoutStrategy timeoutStrategy, MessageSource input,\n-                                             MessageSender output, AcceptorInstanceStore acceptorInstanceStore,\n-                                             ElectionCredentialsProvider electionCredentialsProvider,\n-                                             Executor stateMachineExecutor,\n-                                             ObjectInputStreamFactory objectInputStreamFactory,\n-                                             ObjectOutputStreamFactory objectOutputStreamFactory,\n-                                             Config config )\n+    public ProtocolServer newProtocolServer( InstanceId me, TimeoutStrategy timeoutStrategy, MessageSource input, MessageSender output, AcceptorInstanceStore acceptorInstanceStore, ElectionCredentialsProvider electionCredentialsProvider, Executor stateMachineExecutor, ObjectInputStreamFactory objectInputStreamFactory, ObjectOutputStreamFactory objectOutputStreamFactory, Config config )\n     {\n         DelayedDirectExecutor executor = new DelayedDirectExecutor( logging );\n \n         // Create state machines\n         Timeouts timeouts = new Timeouts( timeoutStrategy );\n-\n-        final MultiPaxosContext context = new MultiPaxosContext( me,\n-                Iterables.iterable( new ElectionRole( ClusterConfiguration.COORDINATOR ) ),\n-                new ClusterConfiguration( initialConfig.getName(), logging,\n-                        initialConfig.getMemberURIs() ),\n-                executor, logging, objectInputStreamFactory, objectOutputStreamFactory, acceptorInstanceStore, timeouts,\n-                electionCredentialsProvider, config\n-        );\n-\n-        SnapshotContext snapshotContext = new SnapshotContext( context.getClusterContext(),\n-                context.getLearnerContext() );\n-\n-        return newProtocolServer( me, input, output, stateMachineExecutor, executor, timeouts,\n-                context, snapshotContext );\n+        final MultiPaxosContext context = new MultiPaxosContext( me, Iterables.iterable( new ElectionRole( ClusterConfiguration.COORDINATOR ) ), new ClusterConfiguration( initialConfig.getName(), logging, initialConfig.getMemberURIs() ), executor, logging, objectInputStreamFactory, objectOutputStreamFactory, acceptorInstanceStore, timeouts, electionCredentialsProvider, config );\n+        SnapshotContext snapshotContext = new SnapshotContext( context.getClusterContext(), context.getLearnerContext() );\n+        return newProtocolServer( me, input, output, stateMachineExecutor, executor, timeouts, context, snapshotContext );\n     }\n \n-    @SuppressWarnings( \"unchecked\" )\n-    public ProtocolServer newProtocolServer( InstanceId me, MessageSource input, MessageSender output,\n-                                             Executor stateMachineExecutor, DelayedDirectExecutor executor,\n-                                             Timeouts timeouts,\n-                                             MultiPaxosContext context, SnapshotContext snapshotContext )\n+    @ SuppressWarnings( \"unchecked\")\n+    public ProtocolServer newProtocolServer( InstanceId me, MessageSource input, MessageSender output, Executor stateMachineExecutor, DelayedDirectExecutor executor, Timeouts timeouts, MultiPaxosContext context, SnapshotContext snapshotContext )\n     {\n-        return constructSupportingInfrastructureFor( me, input, output, executor, timeouts, stateMachineExecutor,\n-                context, new StateMachine[]\n-                {\n-                        new StateMachine( context.getAtomicBroadcastContext(), AtomicBroadcastMessage.class,\n-                                AtomicBroadcastState.start, logging ),\n-                        new StateMachine( context.getAcceptorContext(), AcceptorMessage.class, AcceptorState.start,\n-                                logging ),\n-                        new StateMachine( context.getProposerContext(), ProposerMessage.class, ProposerState.start,\n-                                logging ),\n-                        new StateMachine( context.getLearnerContext(), LearnerMessage.class, LearnerState.start,\n-                                logging ),\n-                        new StateMachine( context.getHeartbeatContext(), HeartbeatMessage.class, HeartbeatState.start,\n-                                logging ),\n-                        new StateMachine( context.getElectionContext(), ElectionMessage.class, ElectionState.start,\n-                                logging ),\n-                        new StateMachine( snapshotContext, SnapshotMessage.class, SnapshotState.start, logging ),\n-                        new StateMachine( context.getClusterContext(), ClusterMessage.class, ClusterState.start,\n-                                logging )\n-                } );\n+        return constructSupportingInfrastructureFor( me, input, output, executor, timeouts, stateMachineExecutor, context, new StateMachine[] { new StateMachine( context.getAtomicBroadcastContext(), AtomicBroadcastMessage.class, AtomicBroadcastState.start, logging ), new StateMachine( context.getAcceptorContext(), AcceptorMessage.class, AcceptorState.start, logging ), new StateMachine( context.getProposerContext(), ProposerMessage.class, ProposerState.start, logging ), new StateMachine( context.getLearnerContext(), LearnerMessage.class, LearnerState.start, logging ), new StateMachine( context.getHeartbeatContext(), HeartbeatMessage.class, HeartbeatState.start, logging ), new StateMachine( context.getElectionContext(), ElectionMessage.class, ElectionState.start, logging ), new StateMachine( snapshotContext, SnapshotMessage.class, SnapshotState.start, logging ), new StateMachine( context.getClusterContext(), ClusterMessage.class, ClusterState.start, logging ) } );\n     }\n \n     /**\n@@ -144,119 +103,27 @@ public class MultiPaxosServerFactory\n      * an external requirement for assembling protocol servers given an existing set of state machines (used to prove\n      * correctness).\n      */\n-    @SuppressWarnings( \"rawtypes\" )\n-    public ProtocolServer constructSupportingInfrastructureFor( InstanceId me, MessageSource input,\n-                                                                MessageSender output, DelayedDirectExecutor executor,\n-                                                                Timeouts timeouts,\n-                                                                Executor stateMachineExecutor,\n-                                                                final MultiPaxosContext context,\n-                                                                StateMachine[] machines )\n-    {\n-        StateMachines stateMachines = new StateMachines( logging, stateMachinesMonitor, input,\n-                output, timeouts, executor, stateMachineExecutor, me );\n \n-        for ( StateMachine machine : machines )\n+    @ SuppressWarnings( \"rawtypes\")\n+    public ProtocolServer constructSupportingInfrastructureFor( InstanceId me, MessageSource input, MessageSender output, DelayedDirectExecutor executor, Timeouts timeouts, Executor stateMachineExecutor, final MultiPaxosContext context, StateMachine[] machines )\n+    {\n+        StateMachines stateMachines = new StateMachines( logging, stateMachinesMonitor, input, output, timeouts, executor, stateMachineExecutor, me );\n+        for( StateMachine machine : machines)\n         {\n             stateMachines.addStateMachine( machine );\n         }\n \n         final ProtocolServer server = new ProtocolServer( me, stateMachines, logging );\n-\n         server.addBindingListener( me1 -> context.getClusterContext().setBoundAt( me1 ) );\n-\n-        stateMachines.addMessageProcessor( new HeartbeatRefreshProcessor( stateMachines.getOutgoing(),\n-                context.getClusterContext() ) );\n-        input.addMessageProcessor( new HeartbeatIAmAliveProcessor( stateMachines.getOutgoing(),\n-                context.getClusterContext() ) );\n-\n+        stateMachines.addMessageProcessor( new HeartbeatRefreshProcessor( stateMachines.getOutgoing(), context.getClusterContext() ) );\n+        input.addMessageProcessor( new HeartbeatIAmAliveProcessor( stateMachines.getOutgoing(), context.getClusterContext() ) );\n         Cluster cluster = server.newClient( Cluster.class );\n         cluster.addClusterListener( new HeartbeatJoinListener( stateMachines.getOutgoing() ) );\n         cluster.addClusterListener( new HeartbeatLeftListener( context.getHeartbeatContext(), logging ) );\n-\n-        context.getHeartbeatContext().addHeartbeatListener( new HeartbeatReelectionListener(\n-                server.newClient( Election.class ), logging ) );\n-        context.getClusterContext().addClusterListener( new ClusterLeaveReelectionListener( server.newClient(\n-                Election.class ),\n-                logging\n-        ) );\n-\n-        StateMachineRules rules = new StateMachineRules( stateMachines.getOutgoing() )\n-                .rule( ClusterState.start, ClusterMessage.create, ClusterState.entered,\n-                        internal( AtomicBroadcastMessage.entered ),\n-                        internal( ProposerMessage.join ),\n-                        internal( AcceptorMessage.join ),\n-                        internal( LearnerMessage.join ),\n-                        internal( HeartbeatMessage.join ),\n-                        internal( ElectionMessage.created ),\n-                        internal( SnapshotMessage.join ) )\n-\n-                .rule( ClusterState.discovery, ClusterMessage.configurationResponse, ClusterState.joining,\n-                        internal( AcceptorMessage.join ),\n-                        internal( LearnerMessage.join ),\n-                        internal( AtomicBroadcastMessage.join ) )\n-\n-                .rule( ClusterState.discovery, ClusterMessage.configurationResponse, ClusterState.entered,\n-                        internal( AtomicBroadcastMessage.entered ),\n-                        internal( ProposerMessage.join ),\n-                        internal( AcceptorMessage.join ),\n-                        internal( LearnerMessage.join ),\n-                        internal( HeartbeatMessage.join ),\n-                        internal( ElectionMessage.join ),\n-                        internal( SnapshotMessage.join ) )\n-\n-                .rule( ClusterState.joining, ClusterMessage.configurationChanged, ClusterState.entered,\n-                        internal( AtomicBroadcastMessage.entered ),\n-                        internal( ProposerMessage.join ),\n-                        internal( AcceptorMessage.join ),\n-                        internal( LearnerMessage.join ),\n-                        internal( HeartbeatMessage.join ),\n-                        internal( ElectionMessage.join ),\n-                        internal( SnapshotMessage.join ) )\n-\n-                .rule( ClusterState.joining, ClusterMessage.joinFailure, ClusterState.start,\n-                        internal( AtomicBroadcastMessage.leave ),\n-                        internal( AcceptorMessage.leave ),\n-                        internal( LearnerMessage.leave ),\n-                        internal( ProposerMessage.leave ) )\n-\n-                .rule( ClusterState.entered, ClusterMessage.leave, ClusterState.start,\n-                        internal( AtomicBroadcastMessage.leave ),\n-                        internal( AcceptorMessage.leave ),\n-                        internal( LearnerMessage.leave ),\n-                        internal( HeartbeatMessage.leave ),\n-                        internal( SnapshotMessage.leave ),\n-                        internal( ElectionMessage.leave ),\n-                        internal( ProposerMessage.leave ) )\n-\n-                .rule( ClusterState.entered, ClusterMessage.leave, ClusterState.start,\n-                        internal( AtomicBroadcastMessage.leave ),\n-                        internal( AcceptorMessage.leave ),\n-                        internal( LearnerMessage.leave ),\n-                        internal( HeartbeatMessage.leave ),\n-                        internal( ElectionMessage.leave ),\n-                        internal( SnapshotMessage.leave ),\n-                        internal( ProposerMessage.leave ) )\n-\n-                .rule( ClusterState.leaving, ClusterMessage.configurationChanged, ClusterState.start,\n-                        internal( AtomicBroadcastMessage.leave ),\n-                        internal( AcceptorMessage.leave ),\n-                        internal( LearnerMessage.leave ),\n-                        internal( HeartbeatMessage.leave ),\n-                        internal( ElectionMessage.leave ),\n-                        internal( SnapshotMessage.leave ),\n-                        internal( ProposerMessage.leave ) )\n-\n-                .rule( ClusterState.leaving, ClusterMessage.leaveTimedout, ClusterState.start,\n-                        internal( AtomicBroadcastMessage.leave ),\n-                        internal( AcceptorMessage.leave ),\n-                        internal( LearnerMessage.leave ),\n-                        internal( HeartbeatMessage.leave ),\n-                        internal( ElectionMessage.leave ),\n-                        internal( SnapshotMessage.leave ),\n-                        internal( ProposerMessage.leave ) );\n-\n+        context.getHeartbeatContext().addHeartbeatListener( new HeartbeatReelectionListener( server.newClient( Election.class ), logging ) );\n+        context.getClusterContext().addClusterListener( new ClusterLeaveReelectionListener( server.newClient( Election.class ), logging ) );\n+        StateMachineRules rules = new StateMachineRules( stateMachines.getOutgoing() ).rule( ClusterState.start, ClusterMessage.create, ClusterState.entered, internal( AtomicBroadcastMessage.entered ), internal( ProposerMessage.join ), internal( AcceptorMessage.join ), internal( LearnerMessage.join ), internal( HeartbeatMessage.join ), internal( ElectionMessage.created ), internal( SnapshotMessage.join ) ).rule( ClusterState.discovery, ClusterMessage.configurationResponse, ClusterState.joining, internal( AcceptorMessage.join ), internal( LearnerMessage.join ), internal( AtomicBroadcastMessage.join ) ).rule( ClusterState.discovery, ClusterMessage.configurationResponse, ClusterState.entered, internal( AtomicBroadcastMessage.entered ), internal( ProposerMessage.join ), internal( AcceptorMessage.join ), internal( LearnerMessage.join ), internal( HeartbeatMessage.join ), internal( ElectionMessage.join ), internal( SnapshotMessage.join ) ).rule( ClusterState.joining, ClusterMessage.configurationChanged, ClusterState.entered, internal( AtomicBroadcastMessage.entered ), internal( ProposerMessage.join ), internal( AcceptorMessage.join ), internal( LearnerMessage.join ), internal( HeartbeatMessage.join ), internal( ElectionMessage.join ), internal( SnapshotMessage.join ) ).rule( ClusterState.joining, ClusterMessage.joinFailure, ClusterState.start, internal( AtomicBroadcastMessage.leave ), internal( AcceptorMessage.leave ), internal( LearnerMessage.leave ), internal( ProposerMessage.leave ) ).rule( ClusterState.entered, ClusterMessage.leave, ClusterState.start, internal( AtomicBroadcastMessage.leave ), internal( AcceptorMessage.leave ), internal( LearnerMessage.leave ), internal( HeartbeatMessage.leave ), internal( SnapshotMessage.leave ), internal( ElectionMessage.leave ), internal( ProposerMessage.leave ) ).rule( ClusterState.entered, ClusterMessage.leave, ClusterState.start, internal( AtomicBroadcastMessage.leave ), internal( AcceptorMessage.leave ), internal( LearnerMessage.leave ), internal( HeartbeatMessage.leave ), internal( ElectionMessage.leave ), internal( SnapshotMessage.leave ), internal( ProposerMessage.leave ) ).rule( ClusterState.leaving, ClusterMessage.configurationChanged, ClusterState.start, internal( AtomicBroadcastMessage.leave ), internal( AcceptorMessage.leave ), internal( LearnerMessage.leave ), internal( HeartbeatMessage.leave ), internal( ElectionMessage.leave ), internal( SnapshotMessage.leave ), internal( ProposerMessage.leave ) ).rule( ClusterState.leaving, ClusterMessage.leaveTimedout, ClusterState.start, internal( AtomicBroadcastMessage.leave ), internal( AcceptorMessage.leave ), internal( LearnerMessage.leave ), internal( HeartbeatMessage.leave ), internal( ElectionMessage.leave ), internal( SnapshotMessage.leave ), internal( ProposerMessage.leave ) );\n         stateMachines.addStateTransitionListener( rules );\n-\n         return server;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 157
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}