{
    "project_name": "Activiti-Activiti",
    "error_id": "624",
    "information": {
        "errors": [
            {
                "line": "18",
                "severity": "error",
                "message": "'package' has more than 1 empty lines before.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "\n\npackage org.activiti.engine.impl.persistence.entity;\n\nimport java.util.ArrayList;\nimport java.util.Collection;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/624/VariableInitializingList.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/624/VariableInitializingList.java\nindex aed65b63d44..a5385b1e4f5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/624/VariableInitializingList.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/624/VariableInitializingList.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.persistence.entity;\n \n import java.util.ArrayList;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "'package' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/624/VariableInitializingList.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/624/VariableInitializingList.java\nindex aed65b63d44..c6700ddc40d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/624/VariableInitializingList.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/624/VariableInitializingList.java\n@@ -27,52 +27,50 @@ import org.activiti.engine.impl.variable.JPAEntityVariableType;\n \n /**\n  * List that initialises binary variable values if command-context is active.\n- *\n-\n  */\n public class VariableInitializingList extends ArrayList<VariableInstanceEntity> {\n \n-  private static final long serialVersionUID = 1L;\n+    private static final long serialVersionUID = 1L;\n \n-  @Override\n-  public void add(int index, VariableInstanceEntity e) {\n-    super.add(index, e);\n-    initializeVariable(e);\n-  }\n+    @Override\n+    public void add(int index, VariableInstanceEntity e) {\n+        super.add(index, e);\n+        initializeVariable(e);\n+    }\n \n-  @Override\n-  public boolean add(VariableInstanceEntity e) {\n-    initializeVariable(e);\n-    return super.add(e);\n-  }\n+    @Override\n+    public boolean add(VariableInstanceEntity e) {\n+        initializeVariable(e);\n+        return super.add(e);\n+    }\n \n-  @Override\n-  public boolean addAll(Collection<? extends VariableInstanceEntity> c) {\n-    for (VariableInstanceEntity e : c) {\n-      initializeVariable(e);\n+    @Override\n+    public boolean addAll(Collection<? extends VariableInstanceEntity> c) {\n+        for (VariableInstanceEntity e : c) {\n+            initializeVariable(e);\n+        }\n+        return super.addAll(c);\n     }\n-    return super.addAll(c);\n-  }\n \n-  @Override\n-  public boolean addAll(int index, Collection<? extends VariableInstanceEntity> c) {\n-    for (VariableInstanceEntity e : c) {\n-      initializeVariable(e);\n+    @Override\n+    public boolean addAll(int index, Collection<? extends VariableInstanceEntity> c) {\n+        for (VariableInstanceEntity e : c) {\n+            initializeVariable(e);\n+        }\n+        return super.addAll(index, c);\n     }\n-    return super.addAll(index, c);\n-  }\n \n-  /**\n-   * If the passed {@link VariableInstanceEntity} is a binary variable and the command-context is active, the variable value is fetched to ensure the byte-array is populated.\n-   */\n-  protected void initializeVariable(VariableInstanceEntity e) {\n-    if (Context.getCommandContext() != null && e != null && e.getType() != null) {\n-      e.getValue();\n+    /**\n+     * If the passed {@link VariableInstanceEntity} is a binary variable and the command-context is active, the variable value is fetched to ensure the byte-array is populated.\n+     */\n+    protected void initializeVariable(VariableInstanceEntity e) {\n+        if (Context.getCommandContext() != null && e != null && e.getType() != null) {\n+            e.getValue();\n \n-      // make sure JPA entities are cached for later retrieval\n-      if (JPAEntityVariableType.TYPE_NAME.equals(e.getType().getTypeName()) || JPAEntityListVariableType.TYPE_NAME.equals(e.getType().getTypeName())) {\n-        ((CacheableVariable) e.getType()).setForceCacheable(true);\n-      }\n+            // make sure JPA entities are cached for later retrieval\n+            if (JPAEntityVariableType.TYPE_NAME.equals(e.getType().getTypeName()) || JPAEntityListVariableType.TYPE_NAME.equals(e.getType().getTypeName())) {\n+                ((CacheableVariable) e.getType()).setForceCacheable(true);\n+            }\n+        }\n     }\n-  }\n }\n",
            "diff_size": 41
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "'package' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "34",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/624/VariableInitializingList.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/624/VariableInitializingList.java\nindex aed65b63d44..e5110edd1d3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/624/VariableInitializingList.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/624/VariableInitializingList.java\n@@ -19,7 +19,6 @@ package org.activiti.engine.impl.persistence.entity;\n \n import java.util.ArrayList;\n import java.util.Collection;\n-\n import org.activiti.engine.impl.context.Context;\n import org.activiti.engine.impl.variable.CacheableVariable;\n import org.activiti.engine.impl.variable.JPAEntityListVariableType;\n@@ -30,6 +29,8 @@ import org.activiti.engine.impl.variable.JPAEntityVariableType;\n  *\n \n  */\n+\n+\n public class VariableInitializingList extends ArrayList<VariableInstanceEntity> {\n \n   private static final long serialVersionUID = 1L;\n@@ -49,7 +50,7 @@ public class VariableInitializingList extends ArrayList<VariableInstanceEntity>\n   @Override\n   public boolean addAll(Collection<? extends VariableInstanceEntity> c) {\n     for (VariableInstanceEntity e : c) {\n-      initializeVariable(e);\n+        initializeVariable(e);\n     }\n     return super.addAll(c);\n   }\n@@ -57,7 +58,7 @@ public class VariableInitializingList extends ArrayList<VariableInstanceEntity>\n   @Override\n   public boolean addAll(int index, Collection<? extends VariableInstanceEntity> c) {\n     for (VariableInstanceEntity e : c) {\n-      initializeVariable(e);\n+        initializeVariable(e);\n     }\n     return super.addAll(index, c);\n   }\n@@ -65,6 +66,7 @@ public class VariableInitializingList extends ArrayList<VariableInstanceEntity>\n   /**\n    * If the passed {@link VariableInstanceEntity} is a binary variable and the command-context is active, the variable value is fetched to ensure the byte-array is populated.\n    */\n+\n   protected void initializeVariable(VariableInstanceEntity e) {\n     if (Context.getCommandContext() != null && e != null && e.getType() != null) {\n       e.getValue();\n@@ -75,4 +77,4 @@ public class VariableInitializingList extends ArrayList<VariableInstanceEntity>\n       }\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/624/VariableInitializingList.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/624/VariableInitializingList.java\nindex aed65b63d44..a5385b1e4f5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/624/VariableInitializingList.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/624/VariableInitializingList.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.persistence.entity;\n \n import java.util.ArrayList;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/624/VariableInitializingList.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/624/VariableInitializingList.java\nindex aed65b63d44..a5385b1e4f5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/624/VariableInitializingList.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/624/VariableInitializingList.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.persistence.entity;\n \n import java.util.ArrayList;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}