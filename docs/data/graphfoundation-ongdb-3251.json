{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3251",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "54",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "84",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "117",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "121",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "65",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "127",
                    "column": "65",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "68",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "167",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "135",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "172",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "219",
                    "column": "65",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "277",
                    "column": "65",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "136",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "302",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "302",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "310",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "310",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "365",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "365",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "367",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "367",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "384",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "384",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "387",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "387",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3251/SchemaCalculator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3251/SchemaCalculator.java\nindex 5432cd1802c..87de6cf9890 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3251/SchemaCalculator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3251/SchemaCalculator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.builtinprocs;\n \n import java.util.ArrayList;\n@@ -42,357 +43,350 @@ import org.neo4j.values.storable.Value;\n \n public class SchemaCalculator\n {\n-    private Map<Integer,String> propertyIdToPropertyNameMapping;\n-\n-    private final Set<Integer> emptyPropertyIdSet = Collections.unmodifiableSet( Collections.emptySet() );\n-\n-    private final Read dataRead;\n-    private final TokenRead tokenRead;\n-    private final CursorFactory cursors;\n-\n-    SchemaCalculator( Transaction ktx )\n-    {\n-        this.dataRead = ktx.dataRead();\n-        this.tokenRead = ktx.tokenRead();\n-        this.cursors = ktx.cursors();\n-\n-        // the only one that is common for both nodes and rels so thats why we can do it here\n-        propertyIdToPropertyNameMapping = new HashMap<>( tokenRead.propertyKeyCount() );\n-        addNamesToCollection( tokenRead.propertyKeyGetAllTokens(), propertyIdToPropertyNameMapping );\n-    }\n-\n-    private NodeMappings initializeMappingsForNodes()\n+  private Map<Integer, String> propertyIdToPropertyNameMapping;\n+\n+  private final Set<Integer> emptyPropertyIdSet = Collections.unmodifiableSet(Collections.emptySet());\n+\n+  private final Read dataRead;\n+  private final TokenRead tokenRead;\n+  private final CursorFactory cursors;\n+\n+  SchemaCalculator(Transaction ktx)\n+  {\n+    this.dataRead = ktx.dataRead();\n+    this.tokenRead = ktx.tokenRead();\n+    this.cursors = ktx.cursors();\n+\n+    // the only one that is common for both nodes and rels so thats why we can do it here\n+    propertyIdToPropertyNameMapping = new HashMap<>(tokenRead.propertyKeyCount());\n+    addNamesToCollection(tokenRead.propertyKeyGetAllTokens(), propertyIdToPropertyNameMapping);\n+  }\n+\n+  private NodeMappings initializeMappingsForNodes()\n+  {\n+    int labelCount = tokenRead.labelCount();\n+    return new NodeMappings(labelCount);\n+  }\n+\n+  private RelationshipMappings initializeMappingsForRels()\n+  {\n+    int relationshipTypeCount = tokenRead.relationshipTypeCount();\n+    return new RelationshipMappings(relationshipTypeCount);\n+  }\n+\n+  // If we would have this schema information in the count store (or somewhere), this could be super fast\n+  public Stream<NodePropertySchemaInfoResult> calculateTabularResultStreamForNodes()\n+  {\n+    NodeMappings nodeMappings = initializeMappingsForNodes();\n+    scanEverythingBelongingToNodes(nodeMappings);\n+\n+    // go through all labels to get actual names\n+    addNamesToCollection(tokenRead.labelsGetAllTokens(), nodeMappings.labelIdToLabelName);\n+\n+    return produceResultsForNodes(nodeMappings).stream();\n+  }\n+\n+  public Stream<RelationshipPropertySchemaInfoResult> calculateTabularResultStreamForRels()\n+  {\n+    RelationshipMappings relMappings = initializeMappingsForRels();\n+    scanEverythingBelongingToRelationships(relMappings);\n+\n+    // go through all relationshipTypes to get actual names\n+    addNamesToCollection(tokenRead.relationshipTypesGetAllTokens(), relMappings.relationshipTypIdToRelationshipName);\n+\n+    return produceResultsForRelationships(relMappings).stream();\n+  }\n+\n+  private List<RelationshipPropertySchemaInfoResult> produceResultsForRelationships(RelationshipMappings relMappings)\n+  {\n+    List<RelationshipPropertySchemaInfoResult> results = new ArrayList<>();\n+    for (Integer typeId : relMappings.relationshipTypeIdToPropertyKeys.keySet())\n     {\n-        int labelCount = tokenRead.labelCount();\n-        return new NodeMappings( labelCount );\n+      // lookup typ name\n+      String name = relMappings.relationshipTypIdToRelationshipName.get(typeId);\n+      name = \":`\" + name + \"`\";  // escaping\n+\n+      // lookup property value types\n+      Set<Integer> propertyIds = relMappings.relationshipTypeIdToPropertyKeys.get(typeId);\n+      if (propertyIds.size() == 0)\n+      {\n+        results.add(new RelationshipPropertySchemaInfoResult(name, null, null, false));\n+      } else\n+      {\n+        String finalName = name;\n+        propertyIds.forEach(propId -> {\n+          // lookup propId name and valueGroup\n+          String propName = propertyIdToPropertyNameMapping.get(propId);\n+          ValueTypeListHelper valueTypeListHelper = relMappings.relationshipTypeIdANDPropertyTypeIdToValueType.get(Pair.of(typeId, propId));\n+          if (relMappings.nullableRelationshipTypes.contains(typeId))\n+          {\n+            results.add(new RelationshipPropertySchemaInfoResult(finalName, propName, valueTypeListHelper.getCypherTypesList(),\n+                false));\n+          } else\n+          {\n+            results.add(new RelationshipPropertySchemaInfoResult(finalName, propName, valueTypeListHelper.getCypherTypesList(),\n+                valueTypeListHelper.isMandatory()));\n+          }\n+        });\n+      }\n     }\n+    return results;\n+  }\n \n-    private RelationshipMappings initializeMappingsForRels()\n+  private List<NodePropertySchemaInfoResult> produceResultsForNodes(NodeMappings nodeMappings)\n+  {\n+    List<NodePropertySchemaInfoResult> results = new ArrayList<>();\n+    for (SortedLabels labelSet : nodeMappings.labelSetToPropertyKeys.keySet())\n     {\n-        int relationshipTypeCount = tokenRead.relationshipTypeCount();\n-        return new RelationshipMappings( relationshipTypeCount );\n+      // lookup label names and produce list of names and produce String out of them\n+      List<String> labelNames = new ArrayList<>();\n+      for (int i = 0; i < labelSet.numberOfLabels(); i++)\n+      {\n+        String name = nodeMappings.labelIdToLabelName.get(labelSet.label(i));\n+        labelNames.add(name);\n+      }\n+      Collections.sort(labelNames);  // this is optional but waaaaay nicer\n+      StringBuilder labelsConcatenator = new StringBuilder();\n+      for (String item : labelNames)\n+      {\n+        labelsConcatenator.append(\":`\").append(item).append(\"`\");\n+      }\n+      String labels = labelsConcatenator.toString();\n+\n+      // lookup property value types\n+      Set<Integer> propertyIds = nodeMappings.labelSetToPropertyKeys.get(labelSet);\n+      if (propertyIds.size() == 0)\n+      {\n+        results.add(new NodePropertySchemaInfoResult(labels, labelNames, null, null, false));\n+      } else\n+      {\n+        propertyIds.forEach(propId -> {\n+          // lookup propId name and valueGroup\n+          String propName = propertyIdToPropertyNameMapping.get(propId);\n+          ValueTypeListHelper valueTypeListHelper = nodeMappings.labelSetANDNodePropertyKeyIdToValueType.get(Pair.of(labelSet, propId));\n+          if (nodeMappings.nullableLabelSets.contains(labelSet))\n+          {\n+            results.add(new NodePropertySchemaInfoResult(labels, labelNames, propName, valueTypeListHelper.getCypherTypesList(), false));\n+          } else\n+          {\n+            results.add(new NodePropertySchemaInfoResult(labels, labelNames, propName, valueTypeListHelper.getCypherTypesList(),\n+                valueTypeListHelper.isMandatory()));\n+          }\n+        });\n+      }\n     }\n+    return results;\n+  }\n \n-    // If we would have this schema information in the count store (or somewhere), this could be super fast\n-    public Stream<NodePropertySchemaInfoResult> calculateTabularResultStreamForNodes()\n+  private void scanEverythingBelongingToRelationships(RelationshipMappings relMappings)\n+  {\n+    try (RelationshipScanCursor relationshipScanCursor = cursors.allocateRelationshipScanCursor();\n+         PropertyCursor propertyCursor = cursors.allocatePropertyCursor())\n     {\n-        NodeMappings nodeMappings = initializeMappingsForNodes();\n-        scanEverythingBelongingToNodes(nodeMappings);\n+      dataRead.allRelationshipsScan(relationshipScanCursor);\n+      while (relationshipScanCursor.next())\n+      {\n+        int typeId = relationshipScanCursor.type();\n+        relationshipScanCursor.properties(propertyCursor);\n+        Set<Integer> propertyIds = new HashSet<>();\n+\n+        while (propertyCursor.next())\n+        {\n+          int propertyKey = propertyCursor.propertyKey();\n \n-        // go through all labels to get actual names\n-        addNamesToCollection( tokenRead.labelsGetAllTokens(), nodeMappings.labelIdToLabelName );\n+          Value currentValue = propertyCursor.propertyValue();\n+          Pair<Integer, Integer> key = Pair.of(typeId, propertyKey);\n+          updateValueTypeInMapping(currentValue, key, relMappings.relationshipTypeIdANDPropertyTypeIdToValueType);\n \n-        return produceResultsForNodes( nodeMappings ).stream();\n-    }\n+          propertyIds.add(propertyKey);\n+        }\n+        propertyCursor.close();\n \n-    public Stream<RelationshipPropertySchemaInfoResult> calculateTabularResultStreamForRels()\n-    {\n-        RelationshipMappings relMappings = initializeMappingsForRels();\n-        scanEverythingBelongingToRelationships( relMappings );\n+        Set<Integer> oldPropertyKeySet = relMappings.relationshipTypeIdToPropertyKeys.getOrDefault(typeId, emptyPropertyIdSet);\n \n-        // go through all relationshipTypes to get actual names\n-        addNamesToCollection( tokenRead.relationshipTypesGetAllTokens(), relMappings.relationshipTypIdToRelationshipName );\n+        // find out which old properties we did not visited and mark them as nullable\n+        if (oldPropertyKeySet == emptyPropertyIdSet)\n+        {\n+          if (propertyIds.size() == 0)\n+          {\n+            // Even if we find property key on other rels with this type, set all of them nullable\n+            relMappings.nullableRelationshipTypes.add(typeId);\n+          }\n+\n+          propertyIds.addAll(oldPropertyKeySet);\n+        } else\n+        {\n+          Set<Integer> currentPropertyIdsHelperSet = new HashSet(propertyIds);\n+          currentPropertyIdsHelperSet.addAll(propertyIds);\n+          propertyIds.removeAll(oldPropertyKeySet);  // only the brand new ones in propIds now\n+          oldPropertyKeySet.removeAll(currentPropertyIdsHelperSet);  // only the old ones that are not on the new rel\n+\n+          propertyIds.addAll(oldPropertyKeySet);\n+          propertyIds.forEach(id -> {\n+            Pair<Integer, Integer> key = Pair.of(typeId, id);\n+            relMappings.relationshipTypeIdANDPropertyTypeIdToValueType.get(key).setNullable();\n+          });\n+\n+          propertyIds.addAll(currentPropertyIdsHelperSet);\n+        }\n \n-        return produceResultsForRelationships( relMappings ).stream();\n+        relMappings.relationshipTypeIdToPropertyKeys.put(typeId, propertyIds);\n+      }\n+      relationshipScanCursor.close();\n     }\n+  }\n \n-    private List<RelationshipPropertySchemaInfoResult> produceResultsForRelationships( RelationshipMappings relMappings )\n+  private void scanEverythingBelongingToNodes(NodeMappings nodeMappings)\n+  {\n+    try (NodeCursor nodeCursor = cursors.allocateNodeCursor();\n+         PropertyCursor propertyCursor = cursors.allocatePropertyCursor())\n     {\n-        List<RelationshipPropertySchemaInfoResult> results = new ArrayList<>();\n-        for ( Integer typeId : relMappings.relationshipTypeIdToPropertyKeys.keySet() )\n+      dataRead.allNodesScan(nodeCursor);\n+      while (nodeCursor.next())\n+      {\n+        // each node\n+        SortedLabels labels = SortedLabels.from(nodeCursor.labels());\n+        nodeCursor.properties(propertyCursor);\n+        Set<Integer> propertyIds = new HashSet<>();\n+\n+        while (propertyCursor.next())\n         {\n-            // lookup typ name\n-            String name = relMappings.relationshipTypIdToRelationshipName.get( typeId );\n-            name = \":`\" + name + \"`\";  // escaping\n-\n-            // lookup property value types\n-            Set<Integer> propertyIds = relMappings.relationshipTypeIdToPropertyKeys.get( typeId );\n-            if ( propertyIds.size() == 0 )\n-            {\n-                results.add( new RelationshipPropertySchemaInfoResult( name, null, null, false ) );\n-            }\n-            else\n-            {\n-                String finalName = name;\n-                propertyIds.forEach( propId -> {\n-                    // lookup propId name and valueGroup\n-                    String propName = propertyIdToPropertyNameMapping.get( propId );\n-                    ValueTypeListHelper valueTypeListHelper = relMappings.relationshipTypeIdANDPropertyTypeIdToValueType.get( Pair.of( typeId, propId ) );\n-                    if ( relMappings.nullableRelationshipTypes.contains( typeId ) )\n-                    {\n-                        results.add( new RelationshipPropertySchemaInfoResult( finalName, propName, valueTypeListHelper.getCypherTypesList(),\n-                                false ) );\n-                    }\n-                    else\n-                    {\n-                        results.add( new RelationshipPropertySchemaInfoResult( finalName, propName, valueTypeListHelper.getCypherTypesList(),\n-                                valueTypeListHelper.isMandatory() ) );\n-                    }\n-                } );\n-            }\n+          Value currentValue = propertyCursor.propertyValue();\n+          int propertyKeyId = propertyCursor.propertyKey();\n+          Pair<SortedLabels, Integer> key = Pair.of(labels, propertyKeyId);\n+          updateValueTypeInMapping(currentValue, key, nodeMappings.labelSetANDNodePropertyKeyIdToValueType);\n+\n+          propertyIds.add(propertyKeyId);\n         }\n-        return results;\n-    }\n+        propertyCursor.close();\n \n-    private List<NodePropertySchemaInfoResult> produceResultsForNodes( NodeMappings nodeMappings )\n-    {\n-        List<NodePropertySchemaInfoResult> results = new ArrayList<>();\n-        for ( SortedLabels labelSet : nodeMappings.labelSetToPropertyKeys.keySet() )\n+        Set<Integer> oldPropertyKeySet = nodeMappings.labelSetToPropertyKeys.getOrDefault(labels, emptyPropertyIdSet);\n+\n+        // find out which old properties we did not visited and mark them as nullable\n+        if (oldPropertyKeySet == emptyPropertyIdSet)\n         {\n-            // lookup label names and produce list of names and produce String out of them\n-            List<String> labelNames = new ArrayList<>();\n-            for ( int i = 0; i < labelSet.numberOfLabels(); i++ )\n-            {\n-                String name = nodeMappings.labelIdToLabelName.get( labelSet.label( i ) );\n-                labelNames.add( name );\n-            }\n-            Collections.sort( labelNames );  // this is optional but waaaaay nicer\n-            StringBuilder labelsConcatenator = new StringBuilder();\n-            for ( String item : labelNames )\n-            {\n-                labelsConcatenator.append( \":`\" ).append( item ).append( \"`\" );\n-            }\n-            String labels = labelsConcatenator.toString();\n-\n-            // lookup property value types\n-            Set<Integer> propertyIds = nodeMappings.labelSetToPropertyKeys.get( labelSet );\n-            if ( propertyIds.size() == 0 )\n-            {\n-                results.add( new NodePropertySchemaInfoResult( labels, labelNames, null, null, false ) );\n-            }\n-            else\n-            {\n-                propertyIds.forEach( propId -> {\n-                    // lookup propId name and valueGroup\n-                    String propName = propertyIdToPropertyNameMapping.get( propId );\n-                    ValueTypeListHelper valueTypeListHelper = nodeMappings.labelSetANDNodePropertyKeyIdToValueType.get( Pair.of( labelSet, propId ) );\n-                    if ( nodeMappings.nullableLabelSets.contains( labelSet ) )\n-                    {\n-                        results.add( new NodePropertySchemaInfoResult( labels, labelNames, propName, valueTypeListHelper.getCypherTypesList(), false ) );\n-                    }\n-                    else\n-                    {\n-                        results.add( new NodePropertySchemaInfoResult( labels, labelNames, propName, valueTypeListHelper.getCypherTypesList(),\n-                                valueTypeListHelper.isMandatory() ) );\n-                    }\n-                } );\n-            }\n+          if (propertyIds.size() == 0)\n+          {\n+            // Even if we find property key on other nodes with those labels, set all of them nullable\n+            nodeMappings.nullableLabelSets.add(labels);\n+          }\n+\n+          propertyIds.addAll(oldPropertyKeySet);\n+        } else\n+        {\n+          Set<Integer> currentPropertyIdsHelperSet = new HashSet(propertyIds);\n+          currentPropertyIdsHelperSet.addAll(propertyIds);\n+          propertyIds.removeAll(oldPropertyKeySet);  // only the brand new ones in propIds now\n+          oldPropertyKeySet.removeAll(currentPropertyIdsHelperSet);  // only the old ones that are not on the new node\n+\n+          propertyIds.addAll(oldPropertyKeySet);\n+          propertyIds.forEach(id -> {\n+            Pair<SortedLabels, Integer> key = Pair.of(labels, id);\n+            nodeMappings.labelSetANDNodePropertyKeyIdToValueType.get(key).setNullable();\n+          });\n+\n+          propertyIds.addAll(currentPropertyIdsHelperSet);\n         }\n-        return results;\n+\n+        nodeMappings.labelSetToPropertyKeys.put(labels, propertyIds);\n+      }\n+      nodeCursor.close();\n     }\n+  }\n \n-    private void scanEverythingBelongingToRelationships( RelationshipMappings relMappings )\n+  private <X, Y> void updateValueTypeInMapping(Value currentValue, Pair<X, Y> key, Map<Pair<X, Y>, ValueTypeListHelper> mappingToUpdate)\n+  {\n+    ValueTypeListHelper helper = mappingToUpdate.get(key);\n+    if (helper == null)\n     {\n-        try ( RelationshipScanCursor relationshipScanCursor = cursors.allocateRelationshipScanCursor();\n-                PropertyCursor propertyCursor = cursors.allocatePropertyCursor() )\n-        {\n-            dataRead.allRelationshipsScan( relationshipScanCursor );\n-            while ( relationshipScanCursor.next() )\n-            {\n-                int typeId = relationshipScanCursor.type();\n-                relationshipScanCursor.properties( propertyCursor );\n-                Set<Integer> propertyIds = new HashSet<>();\n-\n-                while ( propertyCursor.next() )\n-                {\n-                    int propertyKey = propertyCursor.propertyKey();\n-\n-                    Value currentValue = propertyCursor.propertyValue();\n-                    Pair<Integer,Integer> key = Pair.of( typeId, propertyKey );\n-                    updateValueTypeInMapping( currentValue, key, relMappings.relationshipTypeIdANDPropertyTypeIdToValueType );\n-\n-                    propertyIds.add( propertyKey );\n-                }\n-                propertyCursor.close();\n-\n-                Set<Integer> oldPropertyKeySet = relMappings.relationshipTypeIdToPropertyKeys.getOrDefault( typeId, emptyPropertyIdSet );\n-\n-                // find out which old properties we did not visited and mark them as nullable\n-                if ( oldPropertyKeySet == emptyPropertyIdSet )\n-                {\n-                    if ( propertyIds.size() == 0 )\n-                    {\n-                        // Even if we find property key on other rels with this type, set all of them nullable\n-                        relMappings.nullableRelationshipTypes.add( typeId );\n-                    }\n-\n-                    propertyIds.addAll( oldPropertyKeySet );\n-                }\n-                else\n-                {\n-                    Set<Integer> currentPropertyIdsHelperSet = new HashSet( propertyIds );\n-                    currentPropertyIdsHelperSet.addAll( propertyIds );\n-                    propertyIds.removeAll( oldPropertyKeySet );  // only the brand new ones in propIds now\n-                    oldPropertyKeySet.removeAll( currentPropertyIdsHelperSet );  // only the old ones that are not on the new rel\n-\n-                    propertyIds.addAll( oldPropertyKeySet );\n-                    propertyIds.forEach( id -> {\n-                        Pair<Integer,Integer> key = Pair.of( typeId, id );\n-                        relMappings.relationshipTypeIdANDPropertyTypeIdToValueType.get( key ).setNullable();\n-                    } );\n-\n-                    propertyIds.addAll( currentPropertyIdsHelperSet );\n-                }\n-\n-                relMappings.relationshipTypeIdToPropertyKeys.put( typeId, propertyIds );\n-            }\n-            relationshipScanCursor.close();\n-        }\n+      helper = new ValueTypeListHelper(currentValue);\n+      mappingToUpdate.put(key, helper);\n+    } else\n+    {\n+      helper.updateValueTypesWith(currentValue);\n     }\n+  }\n \n-    private void scanEverythingBelongingToNodes( NodeMappings nodeMappings )\n+  private void addNamesToCollection(Iterator<NamedToken> labelIterator, Map<Integer, String> collection)\n+  {\n+    while (labelIterator.hasNext())\n     {\n-        try ( NodeCursor nodeCursor = cursors.allocateNodeCursor();\n-                PropertyCursor propertyCursor = cursors.allocatePropertyCursor() )\n-        {\n-            dataRead.allNodesScan( nodeCursor );\n-            while ( nodeCursor.next() )\n-            {\n-                // each node\n-                SortedLabels labels = SortedLabels.from( nodeCursor.labels() );\n-                nodeCursor.properties( propertyCursor );\n-                Set<Integer> propertyIds = new HashSet<>();\n-\n-                while ( propertyCursor.next() )\n-                {\n-                    Value currentValue = propertyCursor.propertyValue();\n-                    int propertyKeyId = propertyCursor.propertyKey();\n-                    Pair<SortedLabels,Integer> key = Pair.of( labels, propertyKeyId );\n-                    updateValueTypeInMapping( currentValue, key, nodeMappings.labelSetANDNodePropertyKeyIdToValueType );\n-\n-                    propertyIds.add( propertyKeyId );\n-                }\n-                propertyCursor.close();\n-\n-                Set<Integer> oldPropertyKeySet = nodeMappings.labelSetToPropertyKeys.getOrDefault( labels, emptyPropertyIdSet );\n-\n-                // find out which old properties we did not visited and mark them as nullable\n-                if ( oldPropertyKeySet == emptyPropertyIdSet )\n-                {\n-                    if ( propertyIds.size() == 0 )\n-                    {\n-                        // Even if we find property key on other nodes with those labels, set all of them nullable\n-                        nodeMappings.nullableLabelSets.add( labels );\n-                    }\n-\n-                    propertyIds.addAll( oldPropertyKeySet );\n-                }\n-                else\n-                {\n-                    Set<Integer> currentPropertyIdsHelperSet = new HashSet( propertyIds );\n-                    currentPropertyIdsHelperSet.addAll( propertyIds );\n-                    propertyIds.removeAll( oldPropertyKeySet );  // only the brand new ones in propIds now\n-                    oldPropertyKeySet.removeAll( currentPropertyIdsHelperSet );  // only the old ones that are not on the new node\n-\n-                    propertyIds.addAll( oldPropertyKeySet );\n-                    propertyIds.forEach( id -> {\n-                        Pair<SortedLabels,Integer> key = Pair.of( labels, id );\n-                        nodeMappings.labelSetANDNodePropertyKeyIdToValueType.get( key ).setNullable();\n-                    } );\n-\n-                    propertyIds.addAll( currentPropertyIdsHelperSet );\n-                }\n-\n-                nodeMappings.labelSetToPropertyKeys.put( labels, propertyIds );\n-            }\n-            nodeCursor.close();\n-        }\n+      NamedToken label = labelIterator.next();\n+      collection.put(label.id(), label.name());\n     }\n+  }\n \n-    private <X, Y> void updateValueTypeInMapping( Value currentValue, Pair<X,Y> key, Map<Pair<X,Y>,ValueTypeListHelper> mappingToUpdate )\n+  private class ValueTypeListHelper\n+  {\n+    private Set<String> seenValueTypes;\n+    private boolean isMandatory = true;\n+\n+    ValueTypeListHelper(Value v)\n     {\n-        ValueTypeListHelper helper = mappingToUpdate.get( key );\n-        if ( helper == null )\n-        {\n-            helper = new ValueTypeListHelper( currentValue );\n-            mappingToUpdate.put( key, helper );\n-        }\n-        else\n-        {\n-            helper.updateValueTypesWith( currentValue );\n-        }\n+      seenValueTypes = new HashSet<>();\n+      updateValueTypesWith(v);\n     }\n \n-    private void addNamesToCollection( Iterator<NamedToken> labelIterator, Map<Integer,String> collection )\n+    private void setNullable()\n     {\n-        while ( labelIterator.hasNext() )\n-        {\n-            NamedToken label = labelIterator.next();\n-            collection.put( label.id(), label.name() );\n-        }\n+      isMandatory = false;\n     }\n \n-    private class ValueTypeListHelper\n+    public boolean isMandatory()\n     {\n-        private Set<String> seenValueTypes;\n-        private boolean isMandatory = true;\n-\n-        ValueTypeListHelper( Value v )\n-        {\n-            seenValueTypes = new HashSet<>();\n-            updateValueTypesWith( v );\n-        }\n-\n-        private void setNullable()\n-        {\n-            isMandatory = false;\n-        }\n-\n-        public boolean isMandatory()\n-        {\n-            return isMandatory;\n-        }\n-\n-        List<String> getCypherTypesList()\n-        {\n-            return new ArrayList<>( seenValueTypes );\n-        }\n-\n-        void updateValueTypesWith( Value newValue )\n-        {\n-            if ( newValue == null )\n-            {\n-                throw new IllegalArgumentException();\n-            }\n-            seenValueTypes.add( newValue.getTypeName() );\n-        }\n+      return isMandatory;\n     }\n \n-    /*\n-      All mappings needed to describe Nodes except for property infos\n-     */\n-    private class NodeMappings\n+    List<String> getCypherTypesList()\n     {\n-        final Map<SortedLabels,Set<Integer>> labelSetToPropertyKeys;\n-        final Map<Pair<SortedLabels,Integer>,ValueTypeListHelper> labelSetANDNodePropertyKeyIdToValueType;\n-        final Set<SortedLabels> nullableLabelSets; // used for label combinations without properties -> all properties are viewed as nullable\n-        final Map<Integer,String> labelIdToLabelName;\n-\n-        NodeMappings( int labelCount )\n-        {\n-            labelSetToPropertyKeys = new HashMap<>( labelCount );\n-            labelIdToLabelName = new HashMap<>( labelCount );\n-            labelSetANDNodePropertyKeyIdToValueType = new HashMap<>();\n-            nullableLabelSets = new HashSet<>();\n-        }\n+      return new ArrayList<>(seenValueTypes);\n     }\n \n-    /*\n-      All mappings needed to describe Rels except for property infos\n-     */\n-    private class RelationshipMappings\n+    void updateValueTypesWith(Value newValue)\n     {\n-        final Map<Integer,String> relationshipTypIdToRelationshipName;\n-        final Map<Integer,Set<Integer>> relationshipTypeIdToPropertyKeys;\n-        final Map<Pair<Integer,Integer>,ValueTypeListHelper> relationshipTypeIdANDPropertyTypeIdToValueType;\n-        final Set<Integer> nullableRelationshipTypes; // used for types without properties -> all properties are viewed as nullable\n-\n-        RelationshipMappings( int relationshipTypeCount )\n-        {\n-            relationshipTypIdToRelationshipName = new HashMap<>( relationshipTypeCount );\n-            relationshipTypeIdToPropertyKeys = new HashMap<>( relationshipTypeCount );\n-            relationshipTypeIdANDPropertyTypeIdToValueType = new HashMap<>();\n-            nullableRelationshipTypes = new HashSet<>();\n-        }\n+      if (newValue == null)\n+      {\n+        throw new IllegalArgumentException();\n+      }\n+      seenValueTypes.add(newValue.getTypeName());\n+    }\n+  }\n+\n+  /*\n+    All mappings needed to describe Nodes except for property infos\n+   */\n+  private class NodeMappings\n+  {\n+    final Map<SortedLabels, Set<Integer>> labelSetToPropertyKeys;\n+    final Map<Pair<SortedLabels, Integer>, ValueTypeListHelper> labelSetANDNodePropertyKeyIdToValueType;\n+    final Set<SortedLabels> nullableLabelSets; // used for label combinations without properties -> all properties are viewed as nullable\n+    final Map<Integer, String> labelIdToLabelName;\n+\n+    NodeMappings(int labelCount)\n+    {\n+      labelSetToPropertyKeys = new HashMap<>(labelCount);\n+      labelIdToLabelName = new HashMap<>(labelCount);\n+      labelSetANDNodePropertyKeyIdToValueType = new HashMap<>();\n+      nullableLabelSets = new HashSet<>();\n+    }\n+  }\n+\n+  /*\n+    All mappings needed to describe Rels except for property infos\n+   */\n+  private class RelationshipMappings\n+  {\n+    final Map<Integer, String> relationshipTypIdToRelationshipName;\n+    final Map<Integer, Set<Integer>> relationshipTypeIdToPropertyKeys;\n+    final Map<Pair<Integer, Integer>, ValueTypeListHelper> relationshipTypeIdANDPropertyTypeIdToValueType;\n+    final Set<Integer> nullableRelationshipTypes; // used for types without properties -> all properties are viewed as nullable\n+\n+    RelationshipMappings(int relationshipTypeCount)\n+    {\n+      relationshipTypIdToRelationshipName = new HashMap<>(relationshipTypeCount);\n+      relationshipTypeIdToPropertyKeys = new HashMap<>(relationshipTypeCount);\n+      relationshipTypeIdANDPropertyTypeIdToValueType = new HashMap<>();\n+      nullableRelationshipTypes = new HashSet<>();\n     }\n+  }\n }\n",
            "diff_size": 512
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "128",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 180).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "177",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 181).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3251/SchemaCalculator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3251/SchemaCalculator.java\nindex 5432cd1802c..c7798ccd82c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3251/SchemaCalculator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3251/SchemaCalculator.java\n@@ -81,8 +81,7 @@ public class SchemaCalculator\n \n         // go through all labels to get actual names\n         addNamesToCollection( tokenRead.labelsGetAllTokens(), nodeMappings.labelIdToLabelName );\n-\n-        return produceResultsForNodes( nodeMappings ).stream();\n+return produceResultsForNodes( nodeMappings ).stream();\n     }\n \n     public Stream<RelationshipPropertySchemaInfoResult> calculateTabularResultStreamForRels()\n@@ -92,8 +91,7 @@ public class SchemaCalculator\n \n         // go through all relationshipTypes to get actual names\n         addNamesToCollection( tokenRead.relationshipTypesGetAllTokens(), relMappings.relationshipTypIdToRelationshipName );\n-\n-        return produceResultsForRelationships( relMappings ).stream();\n+return produceResultsForRelationships( relMappings ).stream();\n     }\n \n     private List<RelationshipPropertySchemaInfoResult> produceResultsForRelationships( RelationshipMappings relMappings )\n@@ -103,7 +101,8 @@ public class SchemaCalculator\n         {\n             // lookup typ name\n             String name = relMappings.relationshipTypIdToRelationshipName.get( typeId );\n-            name = \":`\" + name + \"`\";  // escaping\n+            name = \":`\" + name + \"`\";\n+    // escaping\n \n             // lookup property value types\n             Set<Integer> propertyIds = relMappings.relationshipTypeIdToPropertyKeys.get( typeId );\n@@ -114,7 +113,8 @@ public class SchemaCalculator\n             else\n             {\n                 String finalName = name;\n-                propertyIds.forEach( propId -> {\n+                propertyIds.forEach( propId ->\n+{\n                     // lookup propId name and valueGroup\n                     String propName = propertyIdToPropertyNameMapping.get( propId );\n                     ValueTypeListHelper valueTypeListHelper = relMappings.relationshipTypeIdANDPropertyTypeIdToValueType.get( Pair.of( typeId, propId ) );\n@@ -125,9 +125,8 @@ public class SchemaCalculator\n                     }\n                     else\n                     {\n-                        results.add( new RelationshipPropertySchemaInfoResult( finalName, propName, valueTypeListHelper.getCypherTypesList(),\n-                                valueTypeListHelper.isMandatory() ) );\n-                    }\n+                        results.add( new RelationshipPropertySchemaInfoResult( finalName, propName, valueTypeListHelper.getCypherTypesList(), valueTypeListHelper.isMandatory() ) );\n+    }\n                 } );\n             }\n         }\n@@ -146,13 +145,15 @@ public class SchemaCalculator\n                 String name = nodeMappings.labelIdToLabelName.get( labelSet.label( i ) );\n                 labelNames.add( name );\n             }\n-            Collections.sort( labelNames );  // this is optional but waaaaay nicer\n+            Collections.sort( labelNames );\n+    // this is optional but waaaaay nicer\n             StringBuilder labelsConcatenator = new StringBuilder();\n             for ( String item : labelNames )\n             {\n                 labelsConcatenator.append( \":`\" ).append( item ).append( \"`\" );\n             }\n-            String labels = labelsConcatenator.toString();\n+\n+String labels = labelsConcatenator.toString();\n \n             // lookup property value types\n             Set<Integer> propertyIds = nodeMappings.labelSetToPropertyKeys.get( labelSet );\n@@ -162,7 +163,8 @@ public class SchemaCalculator\n             }\n             else\n             {\n-                propertyIds.forEach( propId -> {\n+                propertyIds.forEach( propId ->\n+{\n                     // lookup propId name and valueGroup\n                     String propName = propertyIdToPropertyNameMapping.get( propId );\n                     ValueTypeListHelper valueTypeListHelper = nodeMappings.labelSetANDNodePropertyKeyIdToValueType.get( Pair.of( labelSet, propId ) );\n@@ -172,9 +174,8 @@ public class SchemaCalculator\n                     }\n                     else\n                     {\n-                        results.add( new NodePropertySchemaInfoResult( labels, labelNames, propName, valueTypeListHelper.getCypherTypesList(),\n-                                valueTypeListHelper.isMandatory() ) );\n-                    }\n+                        results.add( new NodePropertySchemaInfoResult( labels, labelNames, propName, valueTypeListHelper.getCypherTypesList(), valueTypeListHelper.isMandatory() ) );\n+    }\n                 } );\n             }\n         }\n@@ -184,7 +185,7 @@ public class SchemaCalculator\n     private void scanEverythingBelongingToRelationships( RelationshipMappings relMappings )\n     {\n         try ( RelationshipScanCursor relationshipScanCursor = cursors.allocateRelationshipScanCursor();\n-                PropertyCursor propertyCursor = cursors.allocatePropertyCursor() )\n+PropertyCursor propertyCursor = cursors.allocatePropertyCursor() )\n         {\n             dataRead.allRelationshipsScan( relationshipScanCursor );\n             while ( relationshipScanCursor.next() )\n@@ -196,12 +197,10 @@ public class SchemaCalculator\n                 while ( propertyCursor.next() )\n                 {\n                     int propertyKey = propertyCursor.propertyKey();\n-\n-                    Value currentValue = propertyCursor.propertyValue();\n+Value currentValue = propertyCursor.propertyValue();\n                     Pair<Integer,Integer> key = Pair.of( typeId, propertyKey );\n                     updateValueTypeInMapping( currentValue, key, relMappings.relationshipTypeIdANDPropertyTypeIdToValueType );\n-\n-                    propertyIds.add( propertyKey );\n+propertyIds.add( propertyKey );\n                 }\n                 propertyCursor.close();\n \n@@ -222,16 +221,18 @@ public class SchemaCalculator\n                 {\n                     Set<Integer> currentPropertyIdsHelperSet = new HashSet( propertyIds );\n                     currentPropertyIdsHelperSet.addAll( propertyIds );\n-                    propertyIds.removeAll( oldPropertyKeySet );  // only the brand new ones in propIds now\n-                    oldPropertyKeySet.removeAll( currentPropertyIdsHelperSet );  // only the old ones that are not on the new rel\n+                    propertyIds.removeAll( oldPropertyKeySet );\n+    // only the brand new ones in propIds now\n+                    oldPropertyKeySet.removeAll( currentPropertyIdsHelperSet );\n+    // only the old ones that are not on the new rel\n \n                     propertyIds.addAll( oldPropertyKeySet );\n-                    propertyIds.forEach( id -> {\n+                    propertyIds.forEach( id ->\n+{\n                         Pair<Integer,Integer> key = Pair.of( typeId, id );\n                         relMappings.relationshipTypeIdANDPropertyTypeIdToValueType.get( key ).setNullable();\n                     } );\n-\n-                    propertyIds.addAll( currentPropertyIdsHelperSet );\n+propertyIds.addAll( currentPropertyIdsHelperSet );\n                 }\n \n                 relMappings.relationshipTypeIdToPropertyKeys.put( typeId, propertyIds );\n@@ -243,7 +244,7 @@ public class SchemaCalculator\n     private void scanEverythingBelongingToNodes( NodeMappings nodeMappings )\n     {\n         try ( NodeCursor nodeCursor = cursors.allocateNodeCursor();\n-                PropertyCursor propertyCursor = cursors.allocatePropertyCursor() )\n+PropertyCursor propertyCursor = cursors.allocatePropertyCursor() )\n         {\n             dataRead.allNodesScan( nodeCursor );\n             while ( nodeCursor.next() )\n@@ -259,8 +260,7 @@ public class SchemaCalculator\n                     int propertyKeyId = propertyCursor.propertyKey();\n                     Pair<SortedLabels,Integer> key = Pair.of( labels, propertyKeyId );\n                     updateValueTypeInMapping( currentValue, key, nodeMappings.labelSetANDNodePropertyKeyIdToValueType );\n-\n-                    propertyIds.add( propertyKeyId );\n+propertyIds.add( propertyKeyId );\n                 }\n                 propertyCursor.close();\n \n@@ -281,16 +281,18 @@ public class SchemaCalculator\n                 {\n                     Set<Integer> currentPropertyIdsHelperSet = new HashSet( propertyIds );\n                     currentPropertyIdsHelperSet.addAll( propertyIds );\n-                    propertyIds.removeAll( oldPropertyKeySet );  // only the brand new ones in propIds now\n-                    oldPropertyKeySet.removeAll( currentPropertyIdsHelperSet );  // only the old ones that are not on the new node\n+                    propertyIds.removeAll( oldPropertyKeySet );\n+    // only the brand new ones in propIds now\n+                    oldPropertyKeySet.removeAll( currentPropertyIdsHelperSet );\n+    // only the old ones that are not on the new node\n \n                     propertyIds.addAll( oldPropertyKeySet );\n-                    propertyIds.forEach( id -> {\n+                    propertyIds.forEach( id ->\n+{\n                         Pair<SortedLabels,Integer> key = Pair.of( labels, id );\n                         nodeMappings.labelSetANDNodePropertyKeyIdToValueType.get( key ).setNullable();\n                     } );\n-\n-                    propertyIds.addAll( currentPropertyIdsHelperSet );\n+propertyIds.addAll( currentPropertyIdsHelperSet );\n                 }\n \n                 nodeMappings.labelSetToPropertyKeys.put( labels, propertyIds );\n@@ -299,7 +301,7 @@ public class SchemaCalculator\n         }\n     }\n \n-    private <X, Y> void updateValueTypeInMapping( Value currentValue, Pair<X,Y> key, Map<Pair<X,Y>,ValueTypeListHelper> mappingToUpdate )\n+    private <X,Y> void updateValueTypeInMapping( Value currentValue, Pair<X,Y> key, Map<Pair<X,Y>,ValueTypeListHelper> mappingToUpdate )\n     {\n         ValueTypeListHelper helper = mappingToUpdate.get( key );\n         if ( helper == null )\n@@ -395,4 +397,4 @@ public class SchemaCalculator\n             nullableRelationshipTypes = new HashSet<>();\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 46
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}