{
    "project_name": "CONNECT-Solution-CONNECT",
    "error_id": "1070",
    "information": {
        "errors": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.docquery.entity.proxy;\n\nimport gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\nimport gov.hhs.fha.nhinc.common.nhinccommon.NhinTargetCommunitiesType;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1070/EntityDocQueryProxyWebServiceSecuredImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/1070/EntityDocQueryProxyWebServiceSecuredImpl.java\nindex fdb308ff57f..bb4a883f2dc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1070/EntityDocQueryProxyWebServiceSecuredImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/1070/EntityDocQueryProxyWebServiceSecuredImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.docquery.entity.proxy;\n \n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1070/EntityDocQueryProxyWebServiceSecuredImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/1070/EntityDocQueryProxyWebServiceSecuredImpl.java\nindex fdb308ff57f..c78422e6ed5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1070/EntityDocQueryProxyWebServiceSecuredImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/1070/EntityDocQueryProxyWebServiceSecuredImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.docquery.entity.proxy;\n \n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n@@ -44,76 +45,77 @@ import org.slf4j.LoggerFactory;\n \n /**\n  * @author\n- *\n  */\n public class EntityDocQueryProxyWebServiceSecuredImpl implements EntityDocQueryProxy {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(EntityDocQueryProxyWebServiceSecuredImpl.class);\n+  private static final Logger LOG = LoggerFactory.getLogger(EntityDocQueryProxyWebServiceSecuredImpl.class);\n \n-    private WebServiceProxyHelper oProxyHelper = null;\n+  private WebServiceProxyHelper oProxyHelper = null;\n \n-    /**\n-     * Default Constructor creates log and WebServiceProxyHelper.\n-     */\n-    public EntityDocQueryProxyWebServiceSecuredImpl() {\n-        oProxyHelper = createWebServiceProxyHelper();\n-    }\n+  /**\n+   * Default Constructor creates log and WebServiceProxyHelper.\n+   */\n+  public EntityDocQueryProxyWebServiceSecuredImpl() {\n+    oProxyHelper = createWebServiceProxyHelper();\n+  }\n \n-    /**\n-     * @return WebServiceProxyHelper Object.\n-     */\n-    protected WebServiceProxyHelper createWebServiceProxyHelper() {\n-        return new WebServiceProxyHelper();\n-    }\n+  /**\n+   * @return WebServiceProxyHelper Object.\n+   */\n+  protected WebServiceProxyHelper createWebServiceProxyHelper() {\n+    return new WebServiceProxyHelper();\n+  }\n \n-    /**\n-     * @param apiLevel Adapter apiLevel for the Secured Service(DocQuery)\n-     * @return Adapter apiLevel implementation (a0,a1).\n-     */\n-    public ServicePortDescriptor<EntityDocQuerySecuredPortType> getServicePortDescriptor(\n-            NhincConstants.ADAPTER_API_LEVEL apiLevel) {\n-        return new EntityDocQuerySecuredServicePortDescriptor();\n-    }\n-\n-    /** This method returns AdhocQueryResponse from entity Interface.\n-     * @param body AdhocQUery Request (Body of message) received.\n-     * @param assertion Assertion received.\n-     * @param target TargetCommunities to send request.\n-     * @return AdhocQueryResponse from Entity Interface.\n-     */\n-    @Override\n-    public AdhocQueryResponse respondingGatewayCrossGatewayQuery(AdhocQueryRequest body, AssertionType assertion,\n-            NhinTargetCommunitiesType target) {\n-        LOG.debug(\"Begin respondingGatewayCrossGatewayQuery\");\n-        AdhocQueryResponse response = null;\n+  /**\n+   * @param apiLevel Adapter apiLevel for the Secured Service(DocQuery)\n+   * @return Adapter apiLevel implementation (a0,a1).\n+   */\n+  public ServicePortDescriptor<EntityDocQuerySecuredPortType> getServicePortDescriptor(\n+      NhincConstants.ADAPTER_API_LEVEL apiLevel) {\n+    return new EntityDocQuerySecuredServicePortDescriptor();\n+  }\n \n-        try {\n-            String url = oProxyHelper.getUrlLocalHomeCommunity(NhincConstants.ENTITY_DOC_QUERY_SECURED_SERVICE_NAME);\n+  /**\n+   * This method returns AdhocQueryResponse from entity Interface.\n+   *\n+   * @param body      AdhocQUery Request (Body of message) received.\n+   * @param assertion Assertion received.\n+   * @param target    TargetCommunities to send request.\n+   * @return AdhocQueryResponse from Entity Interface.\n+   */\n+  @Override\n+  public AdhocQueryResponse respondingGatewayCrossGatewayQuery(AdhocQueryRequest body, AssertionType assertion,\n+                                                               NhinTargetCommunitiesType target) {\n+    LOG.debug(\"Begin respondingGatewayCrossGatewayQuery\");\n+    AdhocQueryResponse response = null;\n \n-            if (body == null) {\n-                throw new IllegalArgumentException(\"Request Message must be provided\");\n-            } else if (target == null) {\n-                throw new IllegalArgumentException(\"Target Communities must be provided\");\n-            } else {\n-                ServicePortDescriptor<EntityDocQuerySecuredPortType> portDescriptor = getServicePortDescriptor(\n-                        NhincConstants.ADAPTER_API_LEVEL.LEVEL_a0);\n+    try {\n+      String url = oProxyHelper.getUrlLocalHomeCommunity(NhincConstants.ENTITY_DOC_QUERY_SECURED_SERVICE_NAME);\n \n-                CONNECTClient<EntityDocQuerySecuredPortType> client = CONNECTClientFactory.getInstance()\n-                        .getCONNECTClientSecured(portDescriptor, url, assertion);\n+      if (body == null) {\n+        throw new IllegalArgumentException(\"Request Message must be provided\");\n+      } else if (target == null) {\n+        throw new IllegalArgumentException(\"Target Communities must be provided\");\n+      } else {\n+        ServicePortDescriptor<EntityDocQuerySecuredPortType> portDescriptor = getServicePortDescriptor(\n+            NhincConstants.ADAPTER_API_LEVEL.LEVEL_a0);\n \n-                RespondingGatewayCrossGatewayQuerySecuredRequestType request =\n-                        new RespondingGatewayCrossGatewayQuerySecuredRequestType();\n-                request.setAdhocQueryRequest(body);\n-                request.setNhinTargetCommunities(target);\n+        CONNECTClient<EntityDocQuerySecuredPortType> client = CONNECTClientFactory.getInstance()\n+            .getCONNECTClientSecured(portDescriptor, url, assertion);\n \n-                response = (AdhocQueryResponse) client.invokePort(EntityDocQuerySecuredPortType.class,\n-                        \"respondingGatewayCrossGatewayQuery\", request);\n-            }\n-        } catch (Exception ex) {\n-            throw new ErrorEventException(ex, \"Unable to call Entity Doc Query\");\n-        }\n+        RespondingGatewayCrossGatewayQuerySecuredRequestType request =\n+            new RespondingGatewayCrossGatewayQuerySecuredRequestType();\n+        request.setAdhocQueryRequest(body);\n+        request.setNhinTargetCommunities(target);\n \n-        LOG.debug(\"End respondingGatewayCrossGatewayQuery\");\n-        return response;\n+        response = (AdhocQueryResponse) client.invokePort(EntityDocQuerySecuredPortType.class,\n+            \"respondingGatewayCrossGatewayQuery\", request);\n+      }\n+    } catch (Exception ex) {\n+      throw new ErrorEventException(ex, \"Unable to call Entity Doc Query\");\n     }\n+\n+    LOG.debug(\"End respondingGatewayCrossGatewayQuery\");\n+    return response;\n+  }\n }\n",
            "diff_size": 82
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "74",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "85",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 149).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "95",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 154).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "96",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "98",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "102",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 150).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1070/EntityDocQueryProxyWebServiceSecuredImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/1070/EntityDocQueryProxyWebServiceSecuredImpl.java\nindex fdb308ff57f..0b875744697 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1070/EntityDocQueryProxyWebServiceSecuredImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/1070/EntityDocQueryProxyWebServiceSecuredImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.docquery.entity.proxy;\n \n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n@@ -70,9 +71,8 @@ public class EntityDocQueryProxyWebServiceSecuredImpl implements EntityDocQueryP\n      * @param apiLevel Adapter apiLevel for the Secured Service(DocQuery)\n      * @return Adapter apiLevel implementation (a0,a1).\n      */\n-    public ServicePortDescriptor<EntityDocQuerySecuredPortType> getServicePortDescriptor(\n-            NhincConstants.ADAPTER_API_LEVEL apiLevel) {\n-        return new EntityDocQuerySecuredServicePortDescriptor();\n+    public ServicePortDescriptor<EntityDocQuerySecuredPortType> getServicePortDescriptor(NhincConstants.ADAPTER_API_LEVEL apiLevel) {\n+    return new EntityDocQuerySecuredServicePortDescriptor();\n     }\n \n     /** This method returns AdhocQueryResponse from entity Interface.\n@@ -82,38 +82,31 @@ public class EntityDocQueryProxyWebServiceSecuredImpl implements EntityDocQueryP\n      * @return AdhocQueryResponse from Entity Interface.\n      */\n     @Override\n-    public AdhocQueryResponse respondingGatewayCrossGatewayQuery(AdhocQueryRequest body, AssertionType assertion,\n-            NhinTargetCommunitiesType target) {\n+    public AdhocQueryResponse respondingGatewayCrossGatewayQuery(AdhocQueryRequest body, AssertionType assertion, NhinTargetCommunitiesType target) {\n         LOG.debug(\"Begin respondingGatewayCrossGatewayQuery\");\n         AdhocQueryResponse response = null;\n-\n-        try {\n+try {\n             String url = oProxyHelper.getUrlLocalHomeCommunity(NhincConstants.ENTITY_DOC_QUERY_SECURED_SERVICE_NAME);\n-\n-            if (body == null) {\n+if (body == null) {\n                 throw new IllegalArgumentException(\"Request Message must be provided\");\n             } else if (target == null) {\n                 throw new IllegalArgumentException(\"Target Communities must be provided\");\n             } else {\n-                ServicePortDescriptor<EntityDocQuerySecuredPortType> portDescriptor = getServicePortDescriptor(\n-                        NhincConstants.ADAPTER_API_LEVEL.LEVEL_a0);\n+                ServicePortDescriptor<EntityDocQuerySecuredPortType> portDescriptor = getServicePortDescriptor(NhincConstants.ADAPTER_API_LEVEL.LEVEL_a0);\n+CONNECTClient<EntityDocQuerySecuredPortType> client = CONNECTClientFactory.getInstance().getCONNECTClientSecured(portDescriptor, url, assertion);\n \n-                CONNECTClient<EntityDocQuerySecuredPortType> client = CONNECTClientFactory.getInstance()\n-                        .getCONNECTClientSecured(portDescriptor, url, assertion);\n-\n-                RespondingGatewayCrossGatewayQuerySecuredRequestType request =\n-                        new RespondingGatewayCrossGatewayQuerySecuredRequestType();\n-                request.setAdhocQueryRequest(body);\n+RespondingGatewayCrossGatewayQuerySecuredRequestType request = new RespondingGatewayCrossGatewayQuerySecuredRequestType();\n+request.setAdhocQueryRequest(body);\n                 request.setNhinTargetCommunities(target);\n \n-                response = (AdhocQueryResponse) client.invokePort(EntityDocQuerySecuredPortType.class,\n-                        \"respondingGatewayCrossGatewayQuery\", request);\n-            }\n+                response = (AdhocQueryResponse) client.invokePort(EntityDocQuerySecuredPortType.class, \"respondingGatewayCrossGatewayQuery\", request);\n+    }\n         } catch (Exception ex) {\n             throw new ErrorEventException(ex, \"Unable to call Entity Doc Query\");\n         }\n \n         LOG.debug(\"End respondingGatewayCrossGatewayQuery\");\n-        return response;\n+\n+return response;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "98",
                    "column": "15",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "100",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "103",
                    "column": "8",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "105",
                    "column": "6",
                    "severity": "error",
                    "message": "'}' at column 6 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "109",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 147).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "110",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 154).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "111",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "115",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1070/EntityDocQueryProxyWebServiceSecuredImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/1070/EntityDocQueryProxyWebServiceSecuredImpl.java\nindex fdb308ff57f..342bcc63d23 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1070/EntityDocQueryProxyWebServiceSecuredImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/1070/EntityDocQueryProxyWebServiceSecuredImpl.java\n@@ -46,15 +46,17 @@ import org.slf4j.LoggerFactory;\n  * @author\n  *\n  */\n+\n+\n public class EntityDocQueryProxyWebServiceSecuredImpl implements EntityDocQueryProxy {\n \n     private static final Logger LOG = LoggerFactory.getLogger(EntityDocQueryProxyWebServiceSecuredImpl.class);\n-\n     private WebServiceProxyHelper oProxyHelper = null;\n \n     /**\n      * Default Constructor creates log and WebServiceProxyHelper.\n      */\n+\n     public EntityDocQueryProxyWebServiceSecuredImpl() {\n         oProxyHelper = createWebServiceProxyHelper();\n     }\n@@ -62,6 +64,8 @@ public class EntityDocQueryProxyWebServiceSecuredImpl implements EntityDocQueryP\n     /**\n      * @return WebServiceProxyHelper Object.\n      */\n+\n+\n     protected WebServiceProxyHelper createWebServiceProxyHelper() {\n         return new WebServiceProxyHelper();\n     }\n@@ -70,8 +74,9 @@ public class EntityDocQueryProxyWebServiceSecuredImpl implements EntityDocQueryP\n      * @param apiLevel Adapter apiLevel for the Secured Service(DocQuery)\n      * @return Adapter apiLevel implementation (a0,a1).\n      */\n-    public ServicePortDescriptor<EntityDocQuerySecuredPortType> getServicePortDescriptor(\n-            NhincConstants.ADAPTER_API_LEVEL apiLevel) {\n+\n+\n+    public ServicePortDescriptor<EntityDocQuerySecuredPortType> getServicePortDescriptor(NhincConstants.ADAPTER_API_LEVEL apiLevel) {\n         return new EntityDocQuerySecuredServicePortDescriptor();\n     }\n \n@@ -81,39 +86,39 @@ public class EntityDocQueryProxyWebServiceSecuredImpl implements EntityDocQueryP\n      * @param target TargetCommunities to send request.\n      * @return AdhocQueryResponse from Entity Interface.\n      */\n+\n+\n     @Override\n-    public AdhocQueryResponse respondingGatewayCrossGatewayQuery(AdhocQueryRequest body, AssertionType assertion,\n-            NhinTargetCommunitiesType target) {\n+    public AdhocQueryResponse respondingGatewayCrossGatewayQuery(AdhocQueryRequest body,\n+        AssertionType assertion, NhinTargetCommunitiesType target) {\n         LOG.debug(\"Begin respondingGatewayCrossGatewayQuery\");\n         AdhocQueryResponse response = null;\n-\n         try {\n             String url = oProxyHelper.getUrlLocalHomeCommunity(NhincConstants.ENTITY_DOC_QUERY_SECURED_SERVICE_NAME);\n-\n-            if (body == null) {\n+            if(body == null) {\n                 throw new IllegalArgumentException(\"Request Message must be provided\");\n-            } else if (target == null) {\n-                throw new IllegalArgumentException(\"Target Communities must be provided\");\n-            } else {\n-                ServicePortDescriptor<EntityDocQuerySecuredPortType> portDescriptor = getServicePortDescriptor(\n-                        NhincConstants.ADAPTER_API_LEVEL.LEVEL_a0);\n-\n-                CONNECTClient<EntityDocQuerySecuredPortType> client = CONNECTClientFactory.getInstance()\n-                        .getCONNECTClientSecured(portDescriptor, url, assertion);\n-\n-                RespondingGatewayCrossGatewayQuerySecuredRequestType request =\n-                        new RespondingGatewayCrossGatewayQuerySecuredRequestType();\n-                request.setAdhocQueryRequest(body);\n-                request.setNhinTargetCommunities(target);\n-\n-                response = (AdhocQueryResponse) client.invokePort(EntityDocQuerySecuredPortType.class,\n-                        \"respondingGatewayCrossGatewayQuery\", request);\n             }\n+\n+\n+else if(target == null) {\n+         throw new IllegalArgumentException(\"Target Communities must be provided\");\n+     }\n+\n+\n+            else {\n+         ServicePortDescriptor<EntityDocQuerySecuredPortType> portDescriptor = getServicePortDescriptor(NhincConstants.ADAPTER_API_LEVEL.LEVEL_a0);\n+         CONNECTClient<EntityDocQuerySecuredPortType> client = CONNECTClientFactory.getInstance().getCONNECTClientSecured(portDescriptor, url, assertion);\n+         RespondingGatewayCrossGatewayQuerySecuredRequestType request = new RespondingGatewayCrossGatewayQuerySecuredRequestType();\n+         request.setAdhocQueryRequest(body);\n+         request.setNhinTargetCommunities(target);\n+         response = (AdhocQueryResponse)\n+                        client.invokePort(EntityDocQuerySecuredPortType.class, \"respondingGatewayCrossGatewayQuery\", request);\n+     }\n         } catch (Exception ex) {\n             throw new ErrorEventException(ex, \"Unable to call Entity Doc Query\");\n         }\n-\n         LOG.debug(\"End respondingGatewayCrossGatewayQuery\");\n         return response;\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 51
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "28",
                    "severity": "error",
                    "message": "'import' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1070/EntityDocQueryProxyWebServiceSecuredImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_random/1070/EntityDocQueryProxyWebServiceSecuredImpl.java\nindex fdb308ff57f..efdce104b47 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1070/EntityDocQueryProxyWebServiceSecuredImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_random/1070/EntityDocQueryProxyWebServiceSecuredImpl.java\n@@ -25,7 +25,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n package gov.hhs.fha.nhinc.docquery.entity.proxy;\n-\n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n import gov.hhs.fha.nhinc.common.nhinccommon.NhinTargetCommunitiesType;\n import gov.hhs.fha.nhinc.common.nhinccommonentity.RespondingGatewayCrossGatewayQuerySecuredRequestType;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1070/EntityDocQueryProxyWebServiceSecuredImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/1070/EntityDocQueryProxyWebServiceSecuredImpl.java\nindex fdb308ff57f..bb4a883f2dc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1070/EntityDocQueryProxyWebServiceSecuredImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/1070/EntityDocQueryProxyWebServiceSecuredImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.docquery.entity.proxy;\n \n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}