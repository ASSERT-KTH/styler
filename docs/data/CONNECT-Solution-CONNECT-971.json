{
    "project_name": "CONNECT-Solution-CONNECT",
    "error_id": "971",
    "information": {
        "errors": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.admindistribution.outbound;\n\nimport gov.hhs.fha.nhinc.admindistribution.AdminDistributionAuditLogger;\nimport gov.hhs.fha.nhinc.admindistribution.AdminDistributionPolicyChecker;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/971/StandardOutboundAdminDistribution.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/971/StandardOutboundAdminDistribution.java\nindex fe53ba3780c..357d030f29e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/971/StandardOutboundAdminDistribution.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/971/StandardOutboundAdminDistribution.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.admindistribution.outbound;\n \n import gov.hhs.fha.nhinc.admindistribution.AdminDistributionAuditLogger;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/971/StandardOutboundAdminDistribution.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/971/StandardOutboundAdminDistribution.java\nindex fe53ba3780c..9762dd9a85e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/971/StandardOutboundAdminDistribution.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/971/StandardOutboundAdminDistribution.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.admindistribution.outbound;\n \n import gov.hhs.fha.nhinc.admindistribution.AdminDistributionAuditLogger;\n@@ -49,164 +50,163 @@ import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n /**\n- *\n  * @author dunnek\n  */\n public class StandardOutboundAdminDistribution implements OutboundAdminDistribution {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(StandardOutboundAdminDistribution.class);\n-    private AdminDistributionAuditLogger auditLogger = null;\n-    private final MessageGeneratorUtils msgUtils = MessageGeneratorUtils.getInstance();\n-\n-    /**\n-     * This method sends AlertMessage to the target.\n-     *\n-     * @param message SendAlertMessage received.\n-     * @param assertion Assertion received.\n-     * @param target NhinTargetCommunity received.\n-     */\n-    @Override\n-    @OutboundProcessingEvent(beforeBuilder = ADRequestTransformingBuilder.class, afterReturningBuilder\n-    = ADRequestTransformingBuilder.class, serviceType = \"Admin Distribution\", version = \"\")\n-    public void sendAlertMessage(RespondingGatewaySendAlertMessageSecuredType message, AssertionType assertion,\n-        NhinTargetCommunitiesType target) {\n-        RespondingGatewaySendAlertMessageType unsecured = msgUtils.convertToUnsecured(message,\n-            MessageGeneratorUtils.getInstance().generateMessageId(assertion), target);\n-\n-        this.sendAlertMessage(unsecured, assertion, target);\n-\n-    }\n-\n-    /**\n-     * @param message SendAlerMessage Received.\n-     * @param assertion Assertion received.\n-     * @param target NhinTargetCommunity received.\n-     */\n-    @Override\n-    @OutboundProcessingEvent(beforeBuilder = ADRequestTransformingBuilder.class, afterReturningBuilder\n-    = ADRequestTransformingBuilder.class, serviceType = \"Admin Distribution\", version = \"\")\n-    public void sendAlertMessage(RespondingGatewaySendAlertMessageType message, AssertionType assertion,\n-        NhinTargetCommunitiesType target) {\n-        auditMessage(message, MessageGeneratorUtils.getInstance().generateMessageId(assertion),\n-            NhincConstants.AUDIT_LOG_INBOUND_DIRECTION);\n-\n-        List<UrlInfo> urlInfoList = getEndpoints(target);\n-\n-        if (urlInfoList == null || urlInfoList.isEmpty()) {\n-            LOG.warn(\"No targets were found for the Admin Distribution Request\");\n+  private static final Logger LOG = LoggerFactory.getLogger(StandardOutboundAdminDistribution.class);\n+  private AdminDistributionAuditLogger auditLogger = null;\n+  private final MessageGeneratorUtils msgUtils = MessageGeneratorUtils.getInstance();\n+\n+  /**\n+   * This method sends AlertMessage to the target.\n+   *\n+   * @param message   SendAlertMessage received.\n+   * @param assertion Assertion received.\n+   * @param target    NhinTargetCommunity received.\n+   */\n+  @Override\n+  @OutboundProcessingEvent(beforeBuilder = ADRequestTransformingBuilder.class, afterReturningBuilder\n+      = ADRequestTransformingBuilder.class, serviceType = \"Admin Distribution\", version = \"\")\n+  public void sendAlertMessage(RespondingGatewaySendAlertMessageSecuredType message, AssertionType assertion,\n+                               NhinTargetCommunitiesType target) {\n+    RespondingGatewaySendAlertMessageType unsecured = msgUtils.convertToUnsecured(message,\n+        MessageGeneratorUtils.getInstance().generateMessageId(assertion), target);\n+\n+    this.sendAlertMessage(unsecured, assertion, target);\n+\n+  }\n+\n+  /**\n+   * @param message   SendAlerMessage Received.\n+   * @param assertion Assertion received.\n+   * @param target    NhinTargetCommunity received.\n+   */\n+  @Override\n+  @OutboundProcessingEvent(beforeBuilder = ADRequestTransformingBuilder.class, afterReturningBuilder\n+      = ADRequestTransformingBuilder.class, serviceType = \"Admin Distribution\", version = \"\")\n+  public void sendAlertMessage(RespondingGatewaySendAlertMessageType message, AssertionType assertion,\n+                               NhinTargetCommunitiesType target) {\n+    auditMessage(message, MessageGeneratorUtils.getInstance().generateMessageId(assertion),\n+        NhincConstants.AUDIT_LOG_INBOUND_DIRECTION);\n+\n+    List<UrlInfo> urlInfoList = getEndpoints(target);\n+\n+    if (urlInfoList == null || urlInfoList.isEmpty()) {\n+      LOG.warn(\"No targets were found for the Admin Distribution Request\");\n+    } else {\n+      for (UrlInfo urlInfo : urlInfoList) {\n+        // create a new request to send out to each target community\n+        LOG.debug(\"Target: \" + urlInfo.getHcid());\n+        // check the policy for the outgoing request to the target community\n+        boolean bIsPolicyOk = checkPolicy(message, assertion, urlInfo.getHcid());\n+\n+        if (bIsPolicyOk) {\n+          NhinTargetSystemType targetSystem = buildTargetSystem(urlInfo);\n+          sendToNhinProxy(message, assertion, targetSystem);\n         } else {\n-            for (UrlInfo urlInfo : urlInfoList) {\n-                // create a new request to send out to each target community\n-                LOG.debug(\"Target: \" + urlInfo.getHcid());\n-                // check the policy for the outgoing request to the target community\n-                boolean bIsPolicyOk = checkPolicy(message, assertion, urlInfo.getHcid());\n-\n-                if (bIsPolicyOk) {\n-                    NhinTargetSystemType targetSystem = buildTargetSystem(urlInfo);\n-                    sendToNhinProxy(message, assertion, targetSystem);\n-                } else {\n-                    LOG.error(\"The policy engine evaluated the request and denied the request.\");\n-                }\n-            }\n+          LOG.error(\"The policy engine evaluated the request and denied the request.\");\n         }\n+      }\n     }\n-\n-    /**\n-     * This method audits the AdminDist Entity Message.\n-     *\n-     * @param message SendAlertMessage received.\n-     * @param assertion Assertion received.\n-     * @param direction The direction can be either outbound or inbound.\n-     */\n-    protected void auditMessage(RespondingGatewaySendAlertMessageType message, AssertionType assertion,\n-        String direction) {\n-        AcknowledgementType ack = getAuditLogger().auditEntityAdminDist(message, assertion, direction);\n-        if (ack != null) {\n-            LOG.debug(\"ack: \" + ack.getMessage());\n-        }\n+  }\n+\n+  /**\n+   * This method audits the AdminDist Entity Message.\n+   *\n+   * @param message   SendAlertMessage received.\n+   * @param assertion Assertion received.\n+   * @param direction The direction can be either outbound or inbound.\n+   */\n+  protected void auditMessage(RespondingGatewaySendAlertMessageType message, AssertionType assertion,\n+                              String direction) {\n+    AcknowledgementType ack = getAuditLogger().auditEntityAdminDist(message, assertion, direction);\n+    if (ack != null) {\n+      LOG.debug(\"ack: \" + ack.getMessage());\n     }\n-\n-    /**\n-     * @return auditLogger to audit.\n-     */\n-    protected AdminDistributionAuditLogger getAuditLogger() {\n-        if (null == auditLogger) {\n-            auditLogger = new AdminDistributionAuditLogger();\n-        }\n-        return auditLogger;\n+  }\n+\n+  /**\n+   * @return auditLogger to audit.\n+   */\n+  protected AdminDistributionAuditLogger getAuditLogger() {\n+    if (null == auditLogger) {\n+      auditLogger = new AdminDistributionAuditLogger();\n     }\n-\n-    private NhinTargetSystemType buildTargetSystem(UrlInfo urlInfo) {\n-        LOG.debug(\"Begin buildTargetSystem\");\n-        NhinTargetSystemType result = new NhinTargetSystemType();\n-        HomeCommunityType hc = new HomeCommunityType();\n-\n-        hc.setHomeCommunityId(urlInfo.getHcid());\n-        result.setHomeCommunity(hc);\n-        result.setUrl(urlInfo.getUrl());\n-\n-        return result;\n-    }\n-\n-    /**\n-     * This method returns the list of url's of targetCommunities.\n-     *\n-     * @param targetCommunities NhinTargetCommunities received.\n-     * @return list of urlInfo for target Communities.\n-     */\n-    protected List<UrlInfo> getEndpoints(NhinTargetCommunitiesType targetCommunities) {\n-        List<UrlInfo> urlInfoList = null;\n-\n-        try {\n-            urlInfoList = ExchangeManager.getInstance().getEndpointURLFromNhinTargetCommunities(\n-                targetCommunities, NhincConstants.NHIN_ADMIN_DIST_SERVICE_NAME);\n-        } catch (ExchangeManagerException ex) {\n-            LOG.error(\"Failed to obtain target URLs\", ex);\n-        }\n-\n-        return urlInfoList;\n-    }\n-\n-    /**\n-     * This method returns boolean for the policyCheck for a specific HCID.\n-     *\n-     * @param request SendAlertMessage received.\n-     * @param assertion Assertion received.\n-     * @param hcid homeCommunityId to check policy.\n-     * @return true if checkpolicy is permit; else false.\n-     */\n-    protected boolean checkPolicy(RespondingGatewaySendAlertMessageType request, AssertionType assertion, String hcid) {\n-        if (request != null) {\n-            request.setAssertion(assertion);\n-        }\n-        return new AdminDistributionPolicyChecker().checkOutgoingPolicy(request, hcid);\n-    }\n-\n-    /**\n-     * This method send message to Nhin Proxy.\n-     *\n-     * @param newRequest SendAlertMessage received.\n-     * @param assertion Assertion received.\n-     * @param target NhinTargetSystem received.\n-     */\n-    protected void sendToNhinProxy(RespondingGatewaySendAlertMessageType newRequest, AssertionType assertion,\n-        NhinTargetSystemType target) {\n-        LOG.debug(\"begin sendToNhinProxy\");\n-        OutboundAdminDistributionDelegate adDelegate = getNewOutboundAdminDistributionDelegate();\n-        OutboundAdminDistributionOrchestratable orchestratable = new OutboundAdminDistributionOrchestratable(\n-            adDelegate);\n-        orchestratable.setRequest(newRequest);\n-        orchestratable.setAssertion(assertion);\n-        orchestratable.setTarget(target);\n-        orchestratable.setPassthru(false);\n-\n-        adDelegate.process(orchestratable);\n+    return auditLogger;\n+  }\n+\n+  private NhinTargetSystemType buildTargetSystem(UrlInfo urlInfo) {\n+    LOG.debug(\"Begin buildTargetSystem\");\n+    NhinTargetSystemType result = new NhinTargetSystemType();\n+    HomeCommunityType hc = new HomeCommunityType();\n+\n+    hc.setHomeCommunityId(urlInfo.getHcid());\n+    result.setHomeCommunity(hc);\n+    result.setUrl(urlInfo.getUrl());\n+\n+    return result;\n+  }\n+\n+  /**\n+   * This method returns the list of url's of targetCommunities.\n+   *\n+   * @param targetCommunities NhinTargetCommunities received.\n+   * @return list of urlInfo for target Communities.\n+   */\n+  protected List<UrlInfo> getEndpoints(NhinTargetCommunitiesType targetCommunities) {\n+    List<UrlInfo> urlInfoList = null;\n+\n+    try {\n+      urlInfoList = ExchangeManager.getInstance().getEndpointURLFromNhinTargetCommunities(\n+          targetCommunities, NhincConstants.NHIN_ADMIN_DIST_SERVICE_NAME);\n+    } catch (ExchangeManagerException ex) {\n+      LOG.error(\"Failed to obtain target URLs\", ex);\n     }\n \n-    /**\n-     * @return an instance of OutboundAdminDistributionDelegate\n-     */\n-    protected OutboundAdminDistributionDelegate getNewOutboundAdminDistributionDelegate() {\n-        return new OutboundAdminDistributionDelegate();\n+    return urlInfoList;\n+  }\n+\n+  /**\n+   * This method returns boolean for the policyCheck for a specific HCID.\n+   *\n+   * @param request   SendAlertMessage received.\n+   * @param assertion Assertion received.\n+   * @param hcid      homeCommunityId to check policy.\n+   * @return true if checkpolicy is permit; else false.\n+   */\n+  protected boolean checkPolicy(RespondingGatewaySendAlertMessageType request, AssertionType assertion, String hcid) {\n+    if (request != null) {\n+      request.setAssertion(assertion);\n     }\n+    return new AdminDistributionPolicyChecker().checkOutgoingPolicy(request, hcid);\n+  }\n+\n+  /**\n+   * This method send message to Nhin Proxy.\n+   *\n+   * @param newRequest SendAlertMessage received.\n+   * @param assertion  Assertion received.\n+   * @param target     NhinTargetSystem received.\n+   */\n+  protected void sendToNhinProxy(RespondingGatewaySendAlertMessageType newRequest, AssertionType assertion,\n+                                 NhinTargetSystemType target) {\n+    LOG.debug(\"begin sendToNhinProxy\");\n+    OutboundAdminDistributionDelegate adDelegate = getNewOutboundAdminDistributionDelegate();\n+    OutboundAdminDistributionOrchestratable orchestratable = new OutboundAdminDistributionOrchestratable(\n+        adDelegate);\n+    orchestratable.setRequest(newRequest);\n+    orchestratable.setAssertion(assertion);\n+    orchestratable.setTarget(target);\n+    orchestratable.setPassthru(false);\n+\n+    adDelegate.process(orchestratable);\n+  }\n+\n+  /**\n+   * @return an instance of OutboundAdminDistributionDelegate\n+   */\n+  protected OutboundAdminDistributionDelegate getNewOutboundAdminDistributionDelegate() {\n+    return new OutboundAdminDistributionDelegate();\n+  }\n }\n",
            "diff_size": 199
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 190).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "85",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 190).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "155",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "190",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/971/StandardOutboundAdminDistribution.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/971/StandardOutboundAdminDistribution.java\nindex fe53ba3780c..e5d5af6945f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/971/StandardOutboundAdminDistribution.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/971/StandardOutboundAdminDistribution.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.admindistribution.outbound;\n \n import gov.hhs.fha.nhinc.admindistribution.AdminDistributionAuditLogger;\n@@ -66,15 +67,13 @@ public class StandardOutboundAdminDistribution implements OutboundAdminDistribut\n      * @param target NhinTargetCommunity received.\n      */\n     @Override\n-    @OutboundProcessingEvent(beforeBuilder = ADRequestTransformingBuilder.class, afterReturningBuilder\n-    = ADRequestTransformingBuilder.class, serviceType = \"Admin Distribution\", version = \"\")\n+    @OutboundProcessingEvent(beforeBuilder = ADRequestTransformingBuilder.class, afterReturningBuilder = ADRequestTransformingBuilder.class, serviceType = \"Admin Distribution\", version = \"\")\n     public void sendAlertMessage(RespondingGatewaySendAlertMessageSecuredType message, AssertionType assertion,\n         NhinTargetCommunitiesType target) {\n-        RespondingGatewaySendAlertMessageType unsecured = msgUtils.convertToUnsecured(message,\n+    RespondingGatewaySendAlertMessageType unsecured = msgUtils.convertToUnsecured(message,\n             MessageGeneratorUtils.getInstance().generateMessageId(assertion), target);\n \n         this.sendAlertMessage(unsecured, assertion, target);\n-\n     }\n \n     /**\n@@ -83,16 +82,12 @@ public class StandardOutboundAdminDistribution implements OutboundAdminDistribut\n      * @param target NhinTargetCommunity received.\n      */\n     @Override\n-    @OutboundProcessingEvent(beforeBuilder = ADRequestTransformingBuilder.class, afterReturningBuilder\n-    = ADRequestTransformingBuilder.class, serviceType = \"Admin Distribution\", version = \"\")\n+    @OutboundProcessingEvent(beforeBuilder = ADRequestTransformingBuilder.class, afterReturningBuilder = ADRequestTransformingBuilder.class, serviceType = \"Admin Distribution\", version = \"\")\n     public void sendAlertMessage(RespondingGatewaySendAlertMessageType message, AssertionType assertion,\n         NhinTargetCommunitiesType target) {\n-        auditMessage(message, MessageGeneratorUtils.getInstance().generateMessageId(assertion),\n-            NhincConstants.AUDIT_LOG_INBOUND_DIRECTION);\n-\n-        List<UrlInfo> urlInfoList = getEndpoints(target);\n-\n-        if (urlInfoList == null || urlInfoList.isEmpty()) {\n+    auditMessage(message, MessageGeneratorUtils.getInstance().generateMessageId(assertion), NhincConstants.AUDIT_LOG_INBOUND_DIRECTION);\n+List<UrlInfo> urlInfoList = getEndpoints(target);\n+if (urlInfoList == null || urlInfoList.isEmpty()) {\n             LOG.warn(\"No targets were found for the Admin Distribution Request\");\n         } else {\n             for (UrlInfo urlInfo : urlInfoList) {\n@@ -100,8 +95,7 @@ public class StandardOutboundAdminDistribution implements OutboundAdminDistribut\n                 LOG.debug(\"Target: \" + urlInfo.getHcid());\n                 // check the policy for the outgoing request to the target community\n                 boolean bIsPolicyOk = checkPolicy(message, assertion, urlInfo.getHcid());\n-\n-                if (bIsPolicyOk) {\n+if (bIsPolicyOk) {\n                     NhinTargetSystemType targetSystem = buildTargetSystem(urlInfo);\n                     sendToNhinProxy(message, assertion, targetSystem);\n                 } else {\n@@ -120,7 +114,7 @@ public class StandardOutboundAdminDistribution implements OutboundAdminDistribut\n      */\n     protected void auditMessage(RespondingGatewaySendAlertMessageType message, AssertionType assertion,\n         String direction) {\n-        AcknowledgementType ack = getAuditLogger().auditEntityAdminDist(message, assertion, direction);\n+    AcknowledgementType ack = getAuditLogger().auditEntityAdminDist(message, assertion, direction);\n         if (ack != null) {\n             LOG.debug(\"ack: \" + ack.getMessage());\n         }\n@@ -132,7 +126,8 @@ public class StandardOutboundAdminDistribution implements OutboundAdminDistribut\n     protected AdminDistributionAuditLogger getAuditLogger() {\n         if (null == auditLogger) {\n             auditLogger = new AdminDistributionAuditLogger();\n-        }\n+\n+    }\n         return auditLogger;\n     }\n \n@@ -156,11 +151,9 @@ public class StandardOutboundAdminDistribution implements OutboundAdminDistribut\n      */\n     protected List<UrlInfo> getEndpoints(NhinTargetCommunitiesType targetCommunities) {\n         List<UrlInfo> urlInfoList = null;\n-\n-        try {\n-            urlInfoList = ExchangeManager.getInstance().getEndpointURLFromNhinTargetCommunities(\n-                targetCommunities, NhincConstants.NHIN_ADMIN_DIST_SERVICE_NAME);\n-        } catch (ExchangeManagerException ex) {\n+try {\n+            urlInfoList = ExchangeManager.getInstance().getEndpointURLFromNhinTargetCommunities(targetCommunities, NhincConstants.NHIN_ADMIN_DIST_SERVICE_NAME);\n+    } catch (ExchangeManagerException ex) {\n             LOG.error(\"Failed to obtain target URLs\", ex);\n         }\n \n@@ -178,7 +171,8 @@ public class StandardOutboundAdminDistribution implements OutboundAdminDistribut\n     protected boolean checkPolicy(RespondingGatewaySendAlertMessageType request, AssertionType assertion, String hcid) {\n         if (request != null) {\n             request.setAssertion(assertion);\n-        }\n+\n+    }\n         return new AdminDistributionPolicyChecker().checkOutgoingPolicy(request, hcid);\n     }\n \n@@ -191,11 +185,10 @@ public class StandardOutboundAdminDistribution implements OutboundAdminDistribut\n      */\n     protected void sendToNhinProxy(RespondingGatewaySendAlertMessageType newRequest, AssertionType assertion,\n         NhinTargetSystemType target) {\n-        LOG.debug(\"begin sendToNhinProxy\");\n+    LOG.debug(\"begin sendToNhinProxy\");\n         OutboundAdminDistributionDelegate adDelegate = getNewOutboundAdminDistributionDelegate();\n-        OutboundAdminDistributionOrchestratable orchestratable = new OutboundAdminDistributionOrchestratable(\n-            adDelegate);\n-        orchestratable.setRequest(newRequest);\n+        OutboundAdminDistributionOrchestratable orchestratable = new OutboundAdminDistributionOrchestratable(adDelegate);\n+orchestratable.setRequest(newRequest);\n         orchestratable.setAssertion(assertion);\n         orchestratable.setTarget(target);\n         orchestratable.setPassthru(false);\n@@ -209,4 +202,4 @@ public class StandardOutboundAdminDistribution implements OutboundAdminDistribut\n     protected OutboundAdminDistributionDelegate getNewOutboundAdminDistributionDelegate() {\n         return new OutboundAdminDistributionDelegate();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 30
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 190).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 169).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 190).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "91",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "93",
                    "column": "11",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "93",
                    "column": "31",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "93",
                    "column": "31",
                    "severity": "error",
                    "message": "'||' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                },
                {
                    "line": "96",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "106",
                    "column": "19",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "109",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "169",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "207",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/971/StandardOutboundAdminDistribution.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/971/StandardOutboundAdminDistribution.java\nindex fe53ba3780c..1bf541ef5bd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/971/StandardOutboundAdminDistribution.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/971/StandardOutboundAdminDistribution.java\n@@ -52,6 +52,8 @@ import org.slf4j.LoggerFactory;\n  *\n  * @author dunnek\n  */\n+\n+\n public class StandardOutboundAdminDistribution implements OutboundAdminDistribution {\n \n     private static final Logger LOG = LoggerFactory.getLogger(StandardOutboundAdminDistribution.class);\n@@ -65,16 +67,14 @@ public class StandardOutboundAdminDistribution implements OutboundAdminDistribut\n      * @param assertion Assertion received.\n      * @param target NhinTargetCommunity received.\n      */\n-    @Override\n-    @OutboundProcessingEvent(beforeBuilder = ADRequestTransformingBuilder.class, afterReturningBuilder\n-    = ADRequestTransformingBuilder.class, serviceType = \"Admin Distribution\", version = \"\")\n-    public void sendAlertMessage(RespondingGatewaySendAlertMessageSecuredType message, AssertionType assertion,\n-        NhinTargetCommunitiesType target) {\n-        RespondingGatewaySendAlertMessageType unsecured = msgUtils.convertToUnsecured(message,\n-            MessageGeneratorUtils.getInstance().generateMessageId(assertion), target);\n \n-        this.sendAlertMessage(unsecured, assertion, target);\n \n+    @Override\n+    @OutboundProcessingEvent(beforeBuilder = ADRequestTransformingBuilder.class, afterReturningBuilder = ADRequestTransformingBuilder.class, serviceType = \"Admin Distribution\", version = \"\")\n+    public void sendAlertMessage(RespondingGatewaySendAlertMessageSecuredType message,\n+        AssertionType assertion, NhinTargetCommunitiesType target) {\n+        RespondingGatewaySendAlertMessageType unsecured = msgUtils.convertToUnsecured(message, MessageGeneratorUtils.getInstance().generateMessageId(assertion), target);\n+        this.sendAlertMessage(unsecured, assertion, target);\n     }\n \n     /**\n@@ -82,29 +82,34 @@ public class StandardOutboundAdminDistribution implements OutboundAdminDistribut\n      * @param assertion Assertion received.\n      * @param target NhinTargetCommunity received.\n      */\n-    @Override\n-    @OutboundProcessingEvent(beforeBuilder = ADRequestTransformingBuilder.class, afterReturningBuilder\n-    = ADRequestTransformingBuilder.class, serviceType = \"Admin Distribution\", version = \"\")\n-    public void sendAlertMessage(RespondingGatewaySendAlertMessageType message, AssertionType assertion,\n-        NhinTargetCommunitiesType target) {\n-        auditMessage(message, MessageGeneratorUtils.getInstance().generateMessageId(assertion),\n-            NhincConstants.AUDIT_LOG_INBOUND_DIRECTION);\n \n-        List<UrlInfo> urlInfoList = getEndpoints(target);\n \n-        if (urlInfoList == null || urlInfoList.isEmpty()) {\n+    @Override\n+    @OutboundProcessingEvent(beforeBuilder = ADRequestTransformingBuilder.class, afterReturningBuilder = ADRequestTransformingBuilder.class, serviceType = \"Admin Distribution\", version = \"\")\n+    public void sendAlertMessage(RespondingGatewaySendAlertMessageType message,\n+        AssertionType assertion, NhinTargetCommunitiesType target) {\n+        auditMessage(message, MessageGeneratorUtils.getInstance().generateMessageId(assertion), NhincConstants.AUDIT_LOG_INBOUND_DIRECTION);\n+        List<UrlInfo> urlInfoList = getEndpoints(target);\n+        if(urlInfoList == null||\n+               urlInfoList.isEmpty()) {\n             LOG.warn(\"No targets were found for the Admin Distribution Request\");\n-        } else {\n+        }\n+\n+\n+else {\n             for (UrlInfo urlInfo : urlInfoList) {\n                 // create a new request to send out to each target community\n                 LOG.debug(\"Target: \" + urlInfo.getHcid());\n                 // check the policy for the outgoing request to the target community\n-                boolean bIsPolicyOk = checkPolicy(message, assertion, urlInfo.getHcid());\n \n-                if (bIsPolicyOk) {\n+                boolean bIsPolicyOk = checkPolicy(message, assertion, urlInfo.getHcid());\n+                if(bIsPolicyOk) {\n                     NhinTargetSystemType targetSystem = buildTargetSystem(urlInfo);\n                     sendToNhinProxy(message, assertion, targetSystem);\n-                } else {\n+                }\n+\n+\n+else {\n                     LOG.error(\"The policy engine evaluated the request and denied the request.\");\n                 }\n             }\n@@ -118,8 +123,10 @@ public class StandardOutboundAdminDistribution implements OutboundAdminDistribut\n      * @param assertion Assertion received.\n      * @param direction The direction can be either outbound or inbound.\n      */\n-    protected void auditMessage(RespondingGatewaySendAlertMessageType message, AssertionType assertion,\n-        String direction) {\n+\n+\n+    protected void auditMessage(RespondingGatewaySendAlertMessageType message,\n+        AssertionType assertion, String direction) {\n         AcknowledgementType ack = getAuditLogger().auditEntityAdminDist(message, assertion, direction);\n         if (ack != null) {\n             LOG.debug(\"ack: \" + ack.getMessage());\n@@ -129,6 +136,8 @@ public class StandardOutboundAdminDistribution implements OutboundAdminDistribut\n     /**\n      * @return auditLogger to audit.\n      */\n+\n+\n     protected AdminDistributionAuditLogger getAuditLogger() {\n         if (null == auditLogger) {\n             auditLogger = new AdminDistributionAuditLogger();\n@@ -140,11 +149,9 @@ public class StandardOutboundAdminDistribution implements OutboundAdminDistribut\n         LOG.debug(\"Begin buildTargetSystem\");\n         NhinTargetSystemType result = new NhinTargetSystemType();\n         HomeCommunityType hc = new HomeCommunityType();\n-\n         hc.setHomeCommunityId(urlInfo.getHcid());\n         result.setHomeCommunity(hc);\n         result.setUrl(urlInfo.getUrl());\n-\n         return result;\n     }\n \n@@ -154,16 +161,15 @@ public class StandardOutboundAdminDistribution implements OutboundAdminDistribut\n      * @param targetCommunities NhinTargetCommunities received.\n      * @return list of urlInfo for target Communities.\n      */\n+\n+\n     protected List<UrlInfo> getEndpoints(NhinTargetCommunitiesType targetCommunities) {\n         List<UrlInfo> urlInfoList = null;\n-\n         try {\n-            urlInfoList = ExchangeManager.getInstance().getEndpointURLFromNhinTargetCommunities(\n-                targetCommunities, NhincConstants.NHIN_ADMIN_DIST_SERVICE_NAME);\n+            urlInfoList = ExchangeManager.getInstance().getEndpointURLFromNhinTargetCommunities(targetCommunities, NhincConstants.NHIN_ADMIN_DIST_SERVICE_NAME);\n         } catch (ExchangeManagerException ex) {\n             LOG.error(\"Failed to obtain target URLs\", ex);\n         }\n-\n         return urlInfoList;\n     }\n \n@@ -175,7 +181,10 @@ public class StandardOutboundAdminDistribution implements OutboundAdminDistribut\n      * @param hcid homeCommunityId to check policy.\n      * @return true if checkpolicy is permit; else false.\n      */\n-    protected boolean checkPolicy(RespondingGatewaySendAlertMessageType request, AssertionType assertion, String hcid) {\n+\n+\n+    protected boolean checkPolicy(RespondingGatewaySendAlertMessageType request,\n+        AssertionType assertion, String hcid) {\n         if (request != null) {\n             request.setAssertion(assertion);\n         }\n@@ -189,24 +198,27 @@ public class StandardOutboundAdminDistribution implements OutboundAdminDistribut\n      * @param assertion Assertion received.\n      * @param target NhinTargetSystem received.\n      */\n-    protected void sendToNhinProxy(RespondingGatewaySendAlertMessageType newRequest, AssertionType assertion,\n-        NhinTargetSystemType target) {\n+\n+\n+    protected void sendToNhinProxy(RespondingGatewaySendAlertMessageType newRequest,\n+        AssertionType assertion, NhinTargetSystemType target) {\n         LOG.debug(\"begin sendToNhinProxy\");\n         OutboundAdminDistributionDelegate adDelegate = getNewOutboundAdminDistributionDelegate();\n-        OutboundAdminDistributionOrchestratable orchestratable = new OutboundAdminDistributionOrchestratable(\n-            adDelegate);\n+        OutboundAdminDistributionOrchestratable orchestratable = new OutboundAdminDistributionOrchestratable(adDelegate);\n         orchestratable.setRequest(newRequest);\n         orchestratable.setAssertion(assertion);\n         orchestratable.setTarget(target);\n         orchestratable.setPassthru(false);\n-\n         adDelegate.process(orchestratable);\n     }\n \n     /**\n      * @return an instance of OutboundAdminDistributionDelegate\n      */\n+\n+\n     protected OutboundAdminDistributionDelegate getNewOutboundAdminDistributionDelegate() {\n         return new OutboundAdminDistributionDelegate();\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 72
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "28",
                    "severity": "error",
                    "message": "'import' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/971/StandardOutboundAdminDistribution.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_random/971/StandardOutboundAdminDistribution.java\nindex fe53ba3780c..5ccfa3e3fd6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/971/StandardOutboundAdminDistribution.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_random/971/StandardOutboundAdminDistribution.java\n@@ -25,7 +25,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n package gov.hhs.fha.nhinc.admindistribution.outbound;\n-\n import gov.hhs.fha.nhinc.admindistribution.AdminDistributionAuditLogger;\n import gov.hhs.fha.nhinc.admindistribution.AdminDistributionPolicyChecker;\n import gov.hhs.fha.nhinc.admindistribution.MessageGeneratorUtils;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/971/StandardOutboundAdminDistribution.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/971/StandardOutboundAdminDistribution.java\nindex fe53ba3780c..357d030f29e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/971/StandardOutboundAdminDistribution.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/971/StandardOutboundAdminDistribution.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.admindistribution.outbound;\n \n import gov.hhs.fha.nhinc.admindistribution.AdminDistributionAuditLogger;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}