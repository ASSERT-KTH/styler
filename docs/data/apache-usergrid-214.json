{
    "project_name": "apache-usergrid",
    "error_id": "214",
    "information": {
        "errors": [
            {
                "line": "57",
                "severity": "warning",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "        getJobListener().setExpected( 3 );\n\n        JobData returned = scheduler.createJob( \n                \"failureJobExceuction\", System.currentTimeMillis(), new JobData() );\n\n        scheduler.refreshIndex();",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/214/SchedulerRuntime3IT.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/styler/214/SchedulerRuntime3IT.java\nindex 4eee2d9b1d1..f26abaca71b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/214/SchedulerRuntime3IT.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/styler/214/SchedulerRuntime3IT.java\n@@ -54,8 +54,7 @@ public class SchedulerRuntime3IT extends AbstractSchedulerRuntimeIT {\n \n         getJobListener().setExpected( 3 );\n \n-        JobData returned = scheduler.createJob( \n-                \"failureJobExceuction\", System.currentTimeMillis(), new JobData() );\n+        JobData returned = scheduler.createJob( \"failureJobExceuction\", System.currentTimeMillis(), new JobData() );\n \n         scheduler.refreshIndex();\n \n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/214/SchedulerRuntime3IT.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/intellij/214/SchedulerRuntime3IT.java\nindex 4eee2d9b1d1..0702f01bdb3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/214/SchedulerRuntime3IT.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/intellij/214/SchedulerRuntime3IT.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.usergrid.batch.job;\n \n \n@@ -38,36 +39,38 @@ import static org.junit.Assert.assertTrue;\n public class SchedulerRuntime3IT extends AbstractSchedulerRuntimeIT {\n \n \n-    /** Test the scheduler ramps up correctly when there are more jobs to be read after a pause */\n+    /**\n+     * Test the scheduler ramps up correctly when there are more jobs to be read after a pause\n+     */\n     @Test\n     public void failureCausesJobDeath() throws Exception {\n \n-        int failCount = Integer.parseInt( props.getProperty( FAIL_PROP ) );\n-        long sleepTime = Long.parseLong( props.getProperty( RUNLOOP_PROP ) );\n+        int failCount = Integer.parseInt(props.getProperty(FAIL_PROP));\n+        long sleepTime = Long.parseLong(props.getProperty(RUNLOOP_PROP));\n \n         FailureJobExecution job = springResource.getBean(\n-                \"failureJobExceuction\", FailureJobExecution.class );\n+            \"failureJobExceuction\", FailureJobExecution.class);\n \n         int totalAttempts = failCount + 1;\n \n-        job.setLatch( failCount );\n+        job.setLatch(failCount);\n \n-        getJobListener().setExpected( 3 );\n+        getJobListener().setExpected(3);\n \n-        JobData returned = scheduler.createJob( \n-                \"failureJobExceuction\", System.currentTimeMillis(), new JobData() );\n+        JobData returned = scheduler.createJob(\n+            \"failureJobExceuction\", System.currentTimeMillis(), new JobData());\n \n         scheduler.refreshIndex();\n \n-        final long waitTime = ( failCount + 2 ) * sleepTime + 5000L ;\n+        final long waitTime = (failCount + 2) * sleepTime + 5000L;\n \n-        boolean jobInvoked = job.waitForCount( waitTime, TimeUnit.MILLISECONDS);\n+        boolean jobInvoked = job.waitForCount(waitTime, TimeUnit.MILLISECONDS);\n \n         assertTrue(\"Job invoked max times\", jobInvoked);\n \n-        boolean deadInvoked = job.waitForDead( waitTime, TimeUnit.MILLISECONDS );\n+        boolean deadInvoked = job.waitForDead(waitTime, TimeUnit.MILLISECONDS);\n \n-        assertTrue( \"dead job signaled\", deadInvoked );\n+        assertTrue(\"dead job signaled\", deadInvoked);\n \n         scheduler.refreshIndex();\n \n@@ -78,16 +81,16 @@ public class SchedulerRuntime3IT extends AbstractSchedulerRuntimeIT {\n         scheduler.refreshIndex();\n \n         //we shouldn't trip the latch.  It should fail failCount times, and not run again\n-        assertTrue( \"Jobs ran\", waited );\n-        assertTrue( failCount + \" failures resulted\", getJobListener().getFailureCount() == failCount );\n-        assertTrue( 1 + \" success resulted\", getJobListener().getSuccessCount() == 1 );\n+        assertTrue(\"Jobs ran\", waited);\n+        assertTrue(failCount + \" failures resulted\", getJobListener().getFailureCount() == failCount);\n+        assertTrue(1 + \" success resulted\", getJobListener().getSuccessCount() == 1);\n \n-        JobStat stat = scheduler.getStatsForJob( returned.getJobName(), returned.getUuid() );\n+        JobStat stat = scheduler.getStatsForJob(returned.getJobName(), returned.getUuid());\n \n         // we should have only marked this as run fail+1 times\n-        assertEquals( totalAttempts, stat.getTotalAttempts() );\n-        assertEquals( totalAttempts, stat.getRunCount() );\n-        assertEquals( 0, stat.getDelayCount() );\n+        assertEquals(totalAttempts, stat.getTotalAttempts());\n+        assertEquals(totalAttempts, stat.getRunCount());\n+        assertEquals(0, stat.getDelayCount());\n \n \n     }\n",
            "diff_size": 22
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/214/SchedulerRuntime3IT.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/naturalize/214/SchedulerRuntime3IT.java\nindex 4eee2d9b1d1..5bc36d4433a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/214/SchedulerRuntime3IT.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/naturalize/214/SchedulerRuntime3IT.java\n@@ -37,7 +37,6 @@ import static org.junit.Assert.assertTrue;\n @Ignore(\"These tests no longer work with shared spring context. Need to re-evaluate\")\n public class SchedulerRuntime3IT extends AbstractSchedulerRuntimeIT {\n \n-\n     /** Test the scheduler ramps up correctly when there are more jobs to be read after a pause */\n     @Test\n     public void failureCausesJobDeath() throws Exception {\n@@ -45,25 +44,21 @@ public class SchedulerRuntime3IT extends AbstractSchedulerRuntimeIT {\n         int failCount = Integer.parseInt( props.getProperty( FAIL_PROP ) );\n         long sleepTime = Long.parseLong( props.getProperty( RUNLOOP_PROP ) );\n \n-        FailureJobExecution job = springResource.getBean(\n-                \"failureJobExceuction\", FailureJobExecution.class );\n-\n-        int totalAttempts = failCount + 1;\n+        FailureJobExecution job = springResource.getBean( \"failureJobExceuction\", FailureJobExecution.class );\n+int totalAttempts = failCount + 1;\n \n         job.setLatch( failCount );\n \n         getJobListener().setExpected( 3 );\n \n-        JobData returned = scheduler.createJob( \n-                \"failureJobExceuction\", System.currentTimeMillis(), new JobData() );\n-\n-        scheduler.refreshIndex();\n+        JobData returned = scheduler.createJob( \"failureJobExceuction\", System.currentTimeMillis(), new JobData() );\n+scheduler.refreshIndex();\n \n-        final long waitTime = ( failCount + 2 ) * sleepTime + 5000L ;\n+        final long waitTime = ( failCount + 2 ) * sleepTime + 5000L;\n \n         boolean jobInvoked = job.waitForCount( waitTime, TimeUnit.MILLISECONDS);\n \n-        assertTrue(\"Job invoked max times\", jobInvoked);\n+        assertTrue(\"Job invoked max times\", jobInvoked );\n \n         boolean deadInvoked = job.waitForDead( waitTime, TimeUnit.MILLISECONDS );\n \n@@ -88,7 +83,5 @@ public class SchedulerRuntime3IT extends AbstractSchedulerRuntimeIT {\n         assertEquals( totalAttempts, stat.getTotalAttempts() );\n         assertEquals( totalAttempts, stat.getRunCount() );\n         assertEquals( 0, stat.getDelayCount() );\n-\n-\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/214/SchedulerRuntime3IT.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/codebuff/214/SchedulerRuntime3IT.java\nindex 4eee2d9b1d1..964f8aae1d8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/214/SchedulerRuntime3IT.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/codebuff/214/SchedulerRuntime3IT.java\n@@ -18,11 +18,9 @@ package org.apache.usergrid.batch.job;\n \n \n import java.util.concurrent.TimeUnit;\n-\n import org.apache.usergrid.cassandra.Concurrent;\n import org.apache.usergrid.persistence.entities.JobData;\n import org.apache.usergrid.persistence.entities.JobStat;\n-\n import org.junit.Ignore;\n import org.junit.Test;\n \n@@ -33,48 +31,36 @@ import static org.junit.Assert.assertTrue;\n /**\n  * Class to test job runtimes\n  */\n+\n+\n @Concurrent\n @Ignore(\"These tests no longer work with shared spring context. Need to re-evaluate\")\n public class SchedulerRuntime3IT extends AbstractSchedulerRuntimeIT {\n \n \n     /** Test the scheduler ramps up correctly when there are more jobs to be read after a pause */\n+\n     @Test\n     public void failureCausesJobDeath() throws Exception {\n-\n         int failCount = Integer.parseInt( props.getProperty( FAIL_PROP ) );\n         long sleepTime = Long.parseLong( props.getProperty( RUNLOOP_PROP ) );\n-\n-        FailureJobExecution job = springResource.getBean(\n-                \"failureJobExceuction\", FailureJobExecution.class );\n-\n+        FailureJobExecution job = springResource.getBean( \"failureJobExceuction\", FailureJobExecution.class );\n         int totalAttempts = failCount + 1;\n-\n         job.setLatch( failCount );\n-\n         getJobListener().setExpected( 3 );\n \n-        JobData returned = scheduler.createJob( \n-                \"failureJobExceuction\", System.currentTimeMillis(), new JobData() );\n-\n+        JobData returned = scheduler.createJob( \"failureJobExceuction\", System.currentTimeMillis(), new JobData() );\n         scheduler.refreshIndex();\n-\n-        final long waitTime = ( failCount + 2 ) * sleepTime + 5000L ;\n-\n-        boolean jobInvoked = job.waitForCount( waitTime, TimeUnit.MILLISECONDS);\n-\n-        assertTrue(\"Job invoked max times\", jobInvoked);\n-\n+        final long waitTime = ( failCount + 2 ) * sleepTime + 5000L;\n+        boolean jobInvoked = job.waitForCount( waitTime, TimeUnit.MILLISECONDS );\n+        assertTrue( \"Job invoked max times\", jobInvoked );\n         boolean deadInvoked = job.waitForDead( waitTime, TimeUnit.MILLISECONDS );\n-\n         assertTrue( \"dead job signaled\", deadInvoked );\n-\n         scheduler.refreshIndex();\n \n         // sleep until the job should have failed. We sleep 1 extra cycle just to\n         // make sure we're not racing the test\n-        boolean waited = getJobListener().blockTilDone(waitTime);\n-\n+        boolean waited = getJobListener().blockTilDone( waitTime );\n         scheduler.refreshIndex();\n \n         //we shouldn't trip the latch.  It should fail failCount times, and not run again\n@@ -88,7 +74,5 @@ public class SchedulerRuntime3IT extends AbstractSchedulerRuntimeIT {\n         assertEquals( totalAttempts, stat.getTotalAttempts() );\n         assertEquals( totalAttempts, stat.getRunCount() );\n         assertEquals( 0, stat.getDelayCount() );\n-\n-\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 29
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/214/SchedulerRuntime3IT.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/styler_random/214/SchedulerRuntime3IT.java\nindex 4eee2d9b1d1..f26abaca71b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/214/SchedulerRuntime3IT.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/styler_random/214/SchedulerRuntime3IT.java\n@@ -54,8 +54,7 @@ public class SchedulerRuntime3IT extends AbstractSchedulerRuntimeIT {\n \n         getJobListener().setExpected( 3 );\n \n-        JobData returned = scheduler.createJob( \n-                \"failureJobExceuction\", System.currentTimeMillis(), new JobData() );\n+        JobData returned = scheduler.createJob( \"failureJobExceuction\", System.currentTimeMillis(), new JobData() );\n \n         scheduler.refreshIndex();\n \n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "55",
                    "column": "43",
                    "severity": "warning",
                    "message": "';' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "56",
                    "column": "84",
                    "severity": "warning",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/214/SchedulerRuntime3IT.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/styler_three_grams/214/SchedulerRuntime3IT.java\nindex 4eee2d9b1d1..2d536808b0a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/214/SchedulerRuntime3IT.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/styler_three_grams/214/SchedulerRuntime3IT.java\n@@ -52,9 +52,7 @@ public class SchedulerRuntime3IT extends AbstractSchedulerRuntimeIT {\n \n         job.setLatch( failCount );\n \n-        getJobListener().setExpected( 3 );\n-\n-        JobData returned = scheduler.createJob( \n+        getJobListener().setExpected( 3 );JobData returned = scheduler.createJob(\n                 \"failureJobExceuction\", System.currentTimeMillis(), new JobData() );\n \n         scheduler.refreshIndex();\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random"
    ],
    "not_repaired_by": [
        "styler_three_grams"
    ]
}