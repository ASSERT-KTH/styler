{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2497",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "63",
                    "column": "76",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "76",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "132",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "142",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "65",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "121",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "188",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "120",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "205",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "220",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "225",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "346",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "346",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "376",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "376",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "382",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "382",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "388",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "388",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "396",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "396",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "403",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "403",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "408",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "408",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2497/LocalDateTimeValue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2497/LocalDateTimeValue.java\nindex b7e6fdc9aa0..5f35d8eed41 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2497/LocalDateTimeValue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2497/LocalDateTimeValue.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.values.storable;\n \n import java.time.Clock;\n@@ -57,360 +58,355 @@ import static org.neo4j.values.storable.IntegralValue.safeCastIntegral;\n import static org.neo4j.values.storable.LocalTimeValue.TIME_PATTERN;\n import static org.neo4j.values.storable.LocalTimeValue.parseTime;\n \n-public final class LocalDateTimeValue extends TemporalValue<LocalDateTime,LocalDateTimeValue>\n+public final class LocalDateTimeValue extends TemporalValue<LocalDateTime, LocalDateTimeValue>\n {\n-    public static final LocalDateTimeValue MIN_VALUE = new LocalDateTimeValue( LocalDateTime.MIN );\n-    public static final LocalDateTimeValue MAX_VALUE = new LocalDateTimeValue( LocalDateTime.MAX );\n-\n-    public static LocalDateTimeValue localDateTime( DateValue date, LocalTimeValue time )\n-    {\n-        return new LocalDateTimeValue( LocalDateTime.of( date.temporal(), time.temporal() ) );\n-    }\n-\n-    public static LocalDateTimeValue localDateTime(\n-            int year, int month, int day, int hour, int minute, int second, int nanoOfSecond )\n-    {\n-        return new LocalDateTimeValue( assertValidArgument( () -> LocalDateTime.of( year, month, day, hour, minute, second, nanoOfSecond ) ) );\n-    }\n-\n-    public static LocalDateTimeValue localDateTime( LocalDateTime value )\n-    {\n-        return new LocalDateTimeValue( requireNonNull( value, \"LocalDateTime\" ) );\n-    }\n-\n-    public static LocalDateTimeValue localDateTime( long epochSecond, long nano )\n-    {\n-        return new LocalDateTimeValue( assertValidArgument( () -> ofInstant( ofEpochSecond( epochSecond, nano ), UTC ) ) );\n-    }\n-\n-    public static LocalDateTimeValue parse( CharSequence text )\n-    {\n-        return parse( LocalDateTimeValue.class, PATTERN, LocalDateTimeValue::parse, text );\n-    }\n-\n-    public static LocalDateTimeValue parse( TextValue text )\n-    {\n-        return parse( LocalDateTimeValue.class, PATTERN, LocalDateTimeValue::parse, text );\n-    }\n-\n-    public static LocalDateTimeValue now( Clock clock )\n-    {\n-        return new LocalDateTimeValue( LocalDateTime.now( clock ) );\n-    }\n-\n-    public static LocalDateTimeValue now( Clock clock, String timezone )\n-    {\n-        return now( clock.withZone( parseZoneName( timezone ) ) );\n-    }\n-\n-    public static LocalDateTimeValue now( Clock clock, Supplier<ZoneId> defaultZone )\n-    {\n-        return now( clock.withZone( defaultZone.get() ) );\n-    }\n-\n-    public static LocalDateTimeValue build( MapValue map, Supplier<ZoneId> defaultZone )\n-    {\n-        return StructureBuilder.build( builder( defaultZone ), map );\n-    }\n-\n-    public static LocalDateTimeValue select( AnyValue from, Supplier<ZoneId> defaultZone )\n-    {\n-        return builder( defaultZone ).selectDateTime( from );\n-    }\n-\n-    public static LocalDateTimeValue truncate(\n-            TemporalUnit unit,\n-            TemporalValue input,\n-            MapValue fields,\n-            Supplier<ZoneId> defaultZone )\n-    {\n-        Pair<LocalDate,LocalTime> pair = getTruncatedDateAndTime( unit, input, \"local date time\" );\n-\n-        LocalDate truncatedDate = pair.first();\n-        LocalTime truncatedTime = pair.other();\n-\n-        LocalDateTime truncatedLDT = LocalDateTime.of( truncatedDate, truncatedTime );\n+  public static final LocalDateTimeValue MIN_VALUE = new LocalDateTimeValue(LocalDateTime.MIN);\n+  public static final LocalDateTimeValue MAX_VALUE = new LocalDateTimeValue(LocalDateTime.MAX);\n+\n+  public static LocalDateTimeValue localDateTime(DateValue date, LocalTimeValue time)\n+  {\n+    return new LocalDateTimeValue(LocalDateTime.of(date.temporal(), time.temporal()));\n+  }\n+\n+  public static LocalDateTimeValue localDateTime(\n+      int year, int month, int day, int hour, int minute, int second, int nanoOfSecond)\n+  {\n+    return new LocalDateTimeValue(assertValidArgument(() -> LocalDateTime.of(year, month, day, hour, minute, second, nanoOfSecond)));\n+  }\n+\n+  public static LocalDateTimeValue localDateTime(LocalDateTime value)\n+  {\n+    return new LocalDateTimeValue(requireNonNull(value, \"LocalDateTime\"));\n+  }\n+\n+  public static LocalDateTimeValue localDateTime(long epochSecond, long nano)\n+  {\n+    return new LocalDateTimeValue(assertValidArgument(() -> ofInstant(ofEpochSecond(epochSecond, nano), UTC)));\n+  }\n+\n+  public static LocalDateTimeValue parse(CharSequence text)\n+  {\n+    return parse(LocalDateTimeValue.class, PATTERN, LocalDateTimeValue::parse, text);\n+  }\n+\n+  public static LocalDateTimeValue parse(TextValue text)\n+  {\n+    return parse(LocalDateTimeValue.class, PATTERN, LocalDateTimeValue::parse, text);\n+  }\n+\n+  public static LocalDateTimeValue now(Clock clock)\n+  {\n+    return new LocalDateTimeValue(LocalDateTime.now(clock));\n+  }\n+\n+  public static LocalDateTimeValue now(Clock clock, String timezone)\n+  {\n+    return now(clock.withZone(parseZoneName(timezone)));\n+  }\n+\n+  public static LocalDateTimeValue now(Clock clock, Supplier<ZoneId> defaultZone)\n+  {\n+    return now(clock.withZone(defaultZone.get()));\n+  }\n+\n+  public static LocalDateTimeValue build(MapValue map, Supplier<ZoneId> defaultZone)\n+  {\n+    return StructureBuilder.build(builder(defaultZone), map);\n+  }\n+\n+  public static LocalDateTimeValue select(AnyValue from, Supplier<ZoneId> defaultZone)\n+  {\n+    return builder(defaultZone).selectDateTime(from);\n+  }\n+\n+  public static LocalDateTimeValue truncate(\n+      TemporalUnit unit,\n+      TemporalValue input,\n+      MapValue fields,\n+      Supplier<ZoneId> defaultZone)\n+  {\n+    Pair<LocalDate, LocalTime> pair = getTruncatedDateAndTime(unit, input, \"local date time\");\n+\n+    LocalDate truncatedDate = pair.first();\n+    LocalTime truncatedTime = pair.other();\n+\n+    LocalDateTime truncatedLDT = LocalDateTime.of(truncatedDate, truncatedTime);\n+\n+    if (fields.size() == 0)\n+    {\n+      return localDateTime(truncatedLDT);\n+    } else\n+    {\n+      Map<String, AnyValue> updatedFields = fields.getMapCopy();\n+      truncatedLDT = updateFieldMapWithConflictingSubseconds(updatedFields, unit, truncatedLDT);\n+      if (updatedFields.size() == 0)\n+      {\n+        return localDateTime(truncatedLDT);\n+      }\n+      updatedFields.put(\"datetime\", localDateTime(truncatedLDT));\n+      return build(VirtualValues.map(updatedFields), defaultZone);\n+    }\n+  }\n+\n+  static final LocalDateTime DEFAULT_LOCAL_DATE_TIME =\n+      LocalDateTime.of(TemporalFields.year.defaultValue, TemporalFields.month.defaultValue,\n+          TemporalFields.day.defaultValue, TemporalFields.hour.defaultValue,\n+          TemporalFields.minute.defaultValue);\n+\n+  static DateTimeValue.DateTimeBuilder<LocalDateTimeValue> builder(Supplier<ZoneId> defaultZone)\n+  {\n+    return new DateTimeValue.DateTimeBuilder<LocalDateTimeValue>(defaultZone)\n+    {\n+      @Override\n+      protected boolean supportsTimeZone()\n+      {\n+        return false;\n+      }\n \n-        if ( fields.size() == 0 )\n+      @Override\n+      protected boolean supportsEpoch()\n+      {\n+        return false;\n+      }\n+\n+      @Override\n+      public LocalDateTimeValue buildInternal()\n+      {\n+        boolean selectingDate = fields.containsKey(TemporalFields.date);\n+        boolean selectingTime = fields.containsKey(TemporalFields.time);\n+        boolean selectingDateTime = fields.containsKey(TemporalFields.datetime);\n+        LocalDateTime result;\n+        if (selectingDateTime)\n         {\n-            return localDateTime( truncatedLDT );\n-        }\n-        else\n+          AnyValue dtField = fields.get(TemporalFields.datetime);\n+          if (!(dtField instanceof TemporalValue))\n+          {\n+            throw new InvalidValuesArgumentException(String.format(\"Cannot construct local date time from: %s\", dtField));\n+          }\n+          TemporalValue dt = (TemporalValue) dtField;\n+          result = LocalDateTime.of(dt.getDatePart(), dt.getLocalTimePart());\n+        } else if (selectingTime || selectingDate)\n         {\n-            Map<String,AnyValue> updatedFields = fields.getMapCopy();\n-            truncatedLDT = updateFieldMapWithConflictingSubseconds( updatedFields, unit, truncatedLDT );\n-            if ( updatedFields.size() == 0 )\n+          LocalTime time;\n+          if (selectingTime)\n+          {\n+            AnyValue timeField = fields.get(TemporalFields.time);\n+            if (!(timeField instanceof TemporalValue))\n             {\n-                return localDateTime( truncatedLDT );\n+              throw new InvalidValuesArgumentException(String.format(\"Cannot construct local time from: %s\", timeField));\n             }\n-            updatedFields.put( \"datetime\", localDateTime( truncatedLDT ) );\n-            return build( VirtualValues.map( updatedFields ), defaultZone );\n-        }\n-    }\n-\n-    static final LocalDateTime DEFAULT_LOCAL_DATE_TIME =\n-            LocalDateTime.of( TemporalFields.year.defaultValue, TemporalFields.month.defaultValue,\n-                    TemporalFields.day.defaultValue, TemporalFields.hour.defaultValue,\n-                    TemporalFields.minute.defaultValue );\n-\n-    static DateTimeValue.DateTimeBuilder<LocalDateTimeValue> builder( Supplier<ZoneId> defaultZone )\n-    {\n-        return new DateTimeValue.DateTimeBuilder<LocalDateTimeValue>( defaultZone )\n-        {\n-            @Override\n-            protected boolean supportsTimeZone()\n+            TemporalValue t = (TemporalValue) timeField;\n+            time = t.getLocalTimePart();\n+          } else\n+          {\n+            time = LocalTimeValue.DEFAULT_LOCAL_TIME;\n+          }\n+          LocalDate date;\n+          if (selectingDate)\n+          {\n+            AnyValue dateField = fields.get(TemporalFields.date);\n+            if (!(dateField instanceof TemporalValue))\n             {\n-                return false;\n+              throw new InvalidValuesArgumentException(String.format(\"Cannot construct date from: %s\", dateField));\n             }\n-\n-            @Override\n-            protected boolean supportsEpoch()\n-            {\n-                return false;\n-            }\n-\n-            @Override\n-            public LocalDateTimeValue buildInternal()\n-            {\n-                boolean selectingDate = fields.containsKey( TemporalFields.date );\n-                boolean selectingTime = fields.containsKey( TemporalFields.time );\n-                boolean selectingDateTime = fields.containsKey( TemporalFields.datetime );\n-                LocalDateTime result;\n-                if ( selectingDateTime )\n-                {\n-                    AnyValue dtField = fields.get( TemporalFields.datetime );\n-                    if ( !(dtField instanceof TemporalValue) )\n-                    {\n-                        throw new InvalidValuesArgumentException( String.format( \"Cannot construct local date time from: %s\", dtField ) );\n-                    }\n-                    TemporalValue dt = (TemporalValue) dtField;\n-                    result = LocalDateTime.of( dt.getDatePart(), dt.getLocalTimePart() );\n-                }\n-                else if ( selectingTime || selectingDate )\n-                {\n-                    LocalTime time;\n-                    if ( selectingTime )\n-                    {\n-                        AnyValue timeField = fields.get( TemporalFields.time );\n-                        if ( !(timeField instanceof TemporalValue) )\n-                        {\n-                            throw new InvalidValuesArgumentException( String.format( \"Cannot construct local time from: %s\", timeField ) );\n-                        }\n-                        TemporalValue t = (TemporalValue) timeField;\n-                        time = t.getLocalTimePart();\n-                    }\n-                    else\n-                    {\n-                        time = LocalTimeValue.DEFAULT_LOCAL_TIME;\n-                    }\n-                    LocalDate date;\n-                    if ( selectingDate )\n-                    {\n-                        AnyValue dateField = fields.get( TemporalFields.date );\n-                        if ( !(dateField instanceof TemporalValue) )\n-                        {\n-                            throw new InvalidValuesArgumentException( String.format( \"Cannot construct date from: %s\", dateField ) );\n-                        }\n-                        TemporalValue t = (TemporalValue) dateField;\n-                        date = t.getDatePart();\n-                    }\n-                    else\n-                    {\n-                        date = DateValue.DEFAULT_CALENDER_DATE;\n-                    }\n-\n-                    result = LocalDateTime.of( date, time );\n-                }\n-                else\n-                {\n-                    result = DEFAULT_LOCAL_DATE_TIME;\n-                }\n-\n-                if ( fields.containsKey( TemporalFields.week ) && !selectingDate && !selectingDateTime )\n-                {\n-                    // Be sure to be in the start of the week based year (which can be later than 1st Jan)\n-                    result = result\n-                            .with( IsoFields.WEEK_BASED_YEAR, safeCastIntegral( TemporalFields.year.name(), fields.get( TemporalFields.year ),\n-                                    TemporalFields.year.defaultValue ) )\n-                            .with( IsoFields.WEEK_OF_WEEK_BASED_YEAR, 1 )\n-                            .with( ChronoField.DAY_OF_WEEK, 1 );\n-                }\n-\n-                result = assignAllFields( result );\n-                return localDateTime( result );\n-            }\n-\n-            private LocalDateTime getLocalDateTimeOf( AnyValue temporal )\n-            {\n-                if ( temporal instanceof TemporalValue )\n-                {\n-                    TemporalValue v = (TemporalValue) temporal;\n-                    LocalDate datePart = v.getDatePart();\n-                    LocalTime timePart = v.getLocalTimePart();\n-                    return LocalDateTime.of( datePart, timePart );\n-                }\n-                throw new InvalidValuesArgumentException( String.format( \"Cannot construct date from: %s\", temporal ) );\n-            }\n-\n-            @Override\n-            protected LocalDateTimeValue selectDateTime( AnyValue datetime )\n-            {\n-                if ( datetime instanceof LocalDateTimeValue )\n-                {\n-                    return (LocalDateTimeValue) datetime;\n-                }\n-                return localDateTime( getLocalDateTimeOf( datetime ) );\n-            }\n-        };\n-    }\n-\n-    private final LocalDateTime value;\n-    private final long epochSecondsInUTC;\n-\n-    private LocalDateTimeValue( LocalDateTime value )\n-    {\n-        this.value = value;\n-        this.epochSecondsInUTC = this.value.toEpochSecond(UTC);\n-    }\n-\n-    @Override\n-    int unsafeCompareTo( Value other )\n-    {\n-        LocalDateTimeValue that = (LocalDateTimeValue) other;\n-        int cmp = Long.compare( epochSecondsInUTC, that.epochSecondsInUTC );\n-        if ( cmp == 0 )\n+            TemporalValue t = (TemporalValue) dateField;\n+            date = t.getDatePart();\n+          } else\n+          {\n+            date = DateValue.DEFAULT_CALENDER_DATE;\n+          }\n+\n+          result = LocalDateTime.of(date, time);\n+        } else\n         {\n-            cmp = value.getNano() - that.value.getNano();\n+          result = DEFAULT_LOCAL_DATE_TIME;\n         }\n-        return cmp;\n-    }\n \n-    @Override\n-    public String getTypeName()\n-    {\n-        return \"LocalDateTime\";\n-    }\n-\n-    @Override\n-    LocalDateTime temporal()\n-    {\n-        return value;\n-    }\n-\n-    @Override\n-    LocalDate getDatePart()\n-    {\n-        return value.toLocalDate();\n-    }\n-\n-    @Override\n-    LocalTime getLocalTimePart()\n-    {\n-        return value.toLocalTime();\n-    }\n-\n-    @Override\n-    OffsetTime getTimePart( Supplier<ZoneId> defaultZone )\n-    {\n-        ZoneOffset currentOffset = assertValidArgument( () -> ZonedDateTime.ofInstant( Instant.now(), defaultZone.get() ) ).getOffset();\n-        return OffsetTime.of(value.toLocalTime(), currentOffset);\n-    }\n-\n-    @Override\n-    ZoneId getZoneId( Supplier<ZoneId> defaultZone )\n-    {\n-        return defaultZone.get();\n-    }\n-\n-    @Override\n-    ZoneId getZoneId()\n-    {\n-        throw new UnsupportedTemporalUnitException( String.format( \"Cannot get the timezone of: %s\", this ) );\n-    }\n-\n-    @Override\n-    ZoneOffset getZoneOffset()\n-    {\n-        throw new UnsupportedTemporalUnitException( String.format( \"Cannot get the offset of: %s\", this ) );\n-    }\n-\n-    @Override\n-    public boolean supportsTimeZone()\n-    {\n-        return false;\n-    }\n-\n-    @Override\n-    boolean hasTime()\n-    {\n-        return true;\n-    }\n-\n-    @Override\n-    public boolean equals( Value other )\n-    {\n-        return other instanceof LocalDateTimeValue && value.equals( ((LocalDateTimeValue) other).value );\n-    }\n-\n-    @Override\n-    public <E extends Exception> void writeTo( ValueWriter<E> writer ) throws E\n-    {\n-        writer.writeLocalDateTime( value );\n-    }\n-\n-    @Override\n-    public String prettyPrint()\n-    {\n-        return assertPrintable( () -> value.format( DateTimeFormatter.ISO_LOCAL_DATE_TIME ) );\n-    }\n-\n-    @Override\n-    public ValueGroup valueGroup()\n-    {\n-        return ValueGroup.LOCAL_DATE_TIME;\n-    }\n-\n-    @Override\n-    protected int computeHash()\n-    {\n-        return value.toInstant( UTC ).hashCode();\n-    }\n-\n-    @Override\n-    public <T> T map( ValueMapper<T> mapper )\n-    {\n-        return mapper.mapLocalDateTime( this );\n-    }\n-\n-    @Override\n-    public LocalDateTimeValue add( DurationValue duration )\n-    {\n-        return replacement( assertValidArithmetic( () -> value.plus( duration ) ) );\n-    }\n-\n-    @Override\n-    public LocalDateTimeValue sub( DurationValue duration )\n-    {\n-        return replacement( assertValidArithmetic( () -> value.minus( duration ) ) );\n-    }\n-\n-    @Override\n-    LocalDateTimeValue replacement( LocalDateTime dateTime )\n-    {\n-        return dateTime == value ? this : new LocalDateTimeValue( dateTime );\n-    }\n+        if (fields.containsKey(TemporalFields.week) && !selectingDate && !selectingDateTime)\n+        {\n+          // Be sure to be in the start of the week based year (which can be later than 1st Jan)\n+          result = result\n+              .with(IsoFields.WEEK_BASED_YEAR, safeCastIntegral(TemporalFields.year.name(), fields.get(TemporalFields.year),\n+                  TemporalFields.year.defaultValue))\n+              .with(IsoFields.WEEK_OF_WEEK_BASED_YEAR, 1)\n+              .with(ChronoField.DAY_OF_WEEK, 1);\n+        }\n \n-    private static final Pattern PATTERN = Pattern.compile(\n-            DATE_PATTERN + \"(?<time>T\" + TIME_PATTERN + \")?\",\n-            Pattern.CASE_INSENSITIVE );\n+        result = assignAllFields(result);\n+        return localDateTime(result);\n+      }\n \n-    private static LocalDateTimeValue parse( Matcher matcher )\n-    {\n-        return localDateTime( LocalDateTime.of( parseDate( matcher ), optTime( matcher ) ) );\n-    }\n+      private LocalDateTime getLocalDateTimeOf(AnyValue temporal)\n+      {\n+        if (temporal instanceof TemporalValue)\n+        {\n+          TemporalValue v = (TemporalValue) temporal;\n+          LocalDate datePart = v.getDatePart();\n+          LocalTime timePart = v.getLocalTimePart();\n+          return LocalDateTime.of(datePart, timePart);\n+        }\n+        throw new InvalidValuesArgumentException(String.format(\"Cannot construct date from: %s\", temporal));\n+      }\n \n-    static LocalTime optTime( Matcher matcher )\n-    {\n-        return matcher.group( \"time\" ) != null ? parseTime( matcher ) : LocalTime.MIN;\n-    }\n+      @Override\n+      protected LocalDateTimeValue selectDateTime(AnyValue datetime)\n+      {\n+        if (datetime instanceof LocalDateTimeValue)\n+        {\n+          return (LocalDateTimeValue) datetime;\n+        }\n+        return localDateTime(getLocalDateTimeOf(datetime));\n+      }\n+    };\n+  }\n+\n+  private final LocalDateTime value;\n+  private final long epochSecondsInUTC;\n+\n+  private LocalDateTimeValue(LocalDateTime value)\n+  {\n+    this.value = value;\n+    this.epochSecondsInUTC = this.value.toEpochSecond(UTC);\n+  }\n+\n+  @Override\n+  int unsafeCompareTo(Value other)\n+  {\n+    LocalDateTimeValue that = (LocalDateTimeValue) other;\n+    int cmp = Long.compare(epochSecondsInUTC, that.epochSecondsInUTC);\n+    if (cmp == 0)\n+    {\n+      cmp = value.getNano() - that.value.getNano();\n+    }\n+    return cmp;\n+  }\n+\n+  @Override\n+  public String getTypeName()\n+  {\n+    return \"LocalDateTime\";\n+  }\n+\n+  @Override\n+  LocalDateTime temporal()\n+  {\n+    return value;\n+  }\n+\n+  @Override\n+  LocalDate getDatePart()\n+  {\n+    return value.toLocalDate();\n+  }\n+\n+  @Override\n+  LocalTime getLocalTimePart()\n+  {\n+    return value.toLocalTime();\n+  }\n+\n+  @Override\n+  OffsetTime getTimePart(Supplier<ZoneId> defaultZone)\n+  {\n+    ZoneOffset currentOffset = assertValidArgument(() -> ZonedDateTime.ofInstant(Instant.now(), defaultZone.get())).getOffset();\n+    return OffsetTime.of(value.toLocalTime(), currentOffset);\n+  }\n+\n+  @Override\n+  ZoneId getZoneId(Supplier<ZoneId> defaultZone)\n+  {\n+    return defaultZone.get();\n+  }\n+\n+  @Override\n+  ZoneId getZoneId()\n+  {\n+    throw new UnsupportedTemporalUnitException(String.format(\"Cannot get the timezone of: %s\", this));\n+  }\n+\n+  @Override\n+  ZoneOffset getZoneOffset()\n+  {\n+    throw new UnsupportedTemporalUnitException(String.format(\"Cannot get the offset of: %s\", this));\n+  }\n+\n+  @Override\n+  public boolean supportsTimeZone()\n+  {\n+    return false;\n+  }\n+\n+  @Override\n+  boolean hasTime()\n+  {\n+    return true;\n+  }\n+\n+  @Override\n+  public boolean equals(Value other)\n+  {\n+    return other instanceof LocalDateTimeValue && value.equals(((LocalDateTimeValue) other).value);\n+  }\n+\n+  @Override\n+  public <E extends Exception> void writeTo(ValueWriter<E> writer) throws E\n+  {\n+    writer.writeLocalDateTime(value);\n+  }\n+\n+  @Override\n+  public String prettyPrint()\n+  {\n+    return assertPrintable(() -> value.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));\n+  }\n+\n+  @Override\n+  public ValueGroup valueGroup()\n+  {\n+    return ValueGroup.LOCAL_DATE_TIME;\n+  }\n+\n+  @Override\n+  protected int computeHash()\n+  {\n+    return value.toInstant(UTC).hashCode();\n+  }\n+\n+  @Override\n+  public <T> T map(ValueMapper<T> mapper)\n+  {\n+    return mapper.mapLocalDateTime(this);\n+  }\n+\n+  @Override\n+  public LocalDateTimeValue add(DurationValue duration)\n+  {\n+    return replacement(assertValidArithmetic(() -> value.plus(duration)));\n+  }\n+\n+  @Override\n+  public LocalDateTimeValue sub(DurationValue duration)\n+  {\n+    return replacement(assertValidArithmetic(() -> value.minus(duration)));\n+  }\n+\n+  @Override\n+  LocalDateTimeValue replacement(LocalDateTime dateTime)\n+  {\n+    return dateTime == value ? this : new LocalDateTimeValue(dateTime);\n+  }\n+\n+  private static final Pattern PATTERN = Pattern.compile(\n+      DATE_PATTERN + \"(?<time>T\" + TIME_PATTERN + \")?\",\n+      Pattern.CASE_INSENSITIVE);\n+\n+  private static LocalDateTimeValue parse(Matcher matcher)\n+  {\n+    return localDateTime(LocalDateTime.of(parseDate(matcher), optTime(matcher)));\n+  }\n+\n+  static LocalTime optTime(Matcher matcher)\n+  {\n+    return matcher.group(\"time\") != null ? parseTime(matcher) : LocalTime.MIN;\n+  }\n }\n",
            "diff_size": 558
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "227",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 267).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2497/LocalDateTimeValue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2497/LocalDateTimeValue.java\nindex b7e6fdc9aa0..4acc0324187 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2497/LocalDateTimeValue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2497/LocalDateTimeValue.java\n@@ -67,8 +67,7 @@ public final class LocalDateTimeValue extends TemporalValue<LocalDateTime,LocalD\n         return new LocalDateTimeValue( LocalDateTime.of( date.temporal(), time.temporal() ) );\n     }\n \n-    public static LocalDateTimeValue localDateTime(\n-            int year, int month, int day, int hour, int minute, int second, int nanoOfSecond )\n+    public static LocalDateTimeValue localDateTime( int year, int month, int day, int hour, int minute, int second, int nanoOfSecond )\n     {\n         return new LocalDateTimeValue( assertValidArgument( () -> LocalDateTime.of( year, month, day, hour, minute, second, nanoOfSecond ) ) );\n     }\n@@ -118,20 +117,15 @@ public final class LocalDateTimeValue extends TemporalValue<LocalDateTime,LocalD\n         return builder( defaultZone ).selectDateTime( from );\n     }\n \n-    public static LocalDateTimeValue truncate(\n-            TemporalUnit unit,\n+    public static LocalDateTimeValue truncate( TemporalUnit unit,\n             TemporalValue input,\n-            MapValue fields,\n-            Supplier<ZoneId> defaultZone )\n+            MapValue fields, Supplier<ZoneId> defaultZone )\n     {\n         Pair<LocalDate,LocalTime> pair = getTruncatedDateAndTime( unit, input, \"local date time\" );\n-\n-        LocalDate truncatedDate = pair.first();\n+LocalDate truncatedDate = pair.first();\n         LocalTime truncatedTime = pair.other();\n-\n-        LocalDateTime truncatedLDT = LocalDateTime.of( truncatedDate, truncatedTime );\n-\n-        if ( fields.size() == 0 )\n+LocalDateTime truncatedLDT = LocalDateTime.of( truncatedDate, truncatedTime );\n+if ( fields.size() == 0 )\n         {\n             return localDateTime( truncatedLDT );\n         }\n@@ -148,12 +142,9 @@ public final class LocalDateTimeValue extends TemporalValue<LocalDateTime,LocalD\n         }\n     }\n \n-    static final LocalDateTime DEFAULT_LOCAL_DATE_TIME =\n-            LocalDateTime.of( TemporalFields.year.defaultValue, TemporalFields.month.defaultValue,\n+    static final LocalDateTime DEFAULT_LOCAL_DATE_TIME = LocalDateTime.of( TemporalFields.year.defaultValue, TemporalFields.month.defaultValue,\n                     TemporalFields.day.defaultValue, TemporalFields.hour.defaultValue,\n-                    TemporalFields.minute.defaultValue );\n-\n-    static DateTimeValue.DateTimeBuilder<LocalDateTimeValue> builder( Supplier<ZoneId> defaultZone )\n+                    TemporalFields.minute.defaultValue ); static DateTimeValue.DateTimeBuilder<LocalDateTimeValue> builder( Supplier<ZoneId> defaultZone )\n     {\n         return new DateTimeValue.DateTimeBuilder<LocalDateTimeValue>( defaultZone )\n         {\n@@ -179,11 +170,12 @@ public final class LocalDateTimeValue extends TemporalValue<LocalDateTime,LocalD\n                 if ( selectingDateTime )\n                 {\n                     AnyValue dtField = fields.get( TemporalFields.datetime );\n-                    if ( !(dtField instanceof TemporalValue) )\n+                    if ( !( dtField instanceof TemporalValue) )\n                     {\n                         throw new InvalidValuesArgumentException( String.format( \"Cannot construct local date time from: %s\", dtField ) );\n                     }\n-                    TemporalValue dt = (TemporalValue) dtField;\n+\n+TemporalValue dt = (TemporalValue) dtField;\n                     result = LocalDateTime.of( dt.getDatePart(), dt.getLocalTimePart() );\n                 }\n                 else if ( selectingTime || selectingDate )\n@@ -192,26 +184,29 @@ public final class LocalDateTimeValue extends TemporalValue<LocalDateTime,LocalD\n                     if ( selectingTime )\n                     {\n                         AnyValue timeField = fields.get( TemporalFields.time );\n-                        if ( !(timeField instanceof TemporalValue) )\n+                        if ( !( timeField instanceof TemporalValue) )\n                         {\n                             throw new InvalidValuesArgumentException( String.format( \"Cannot construct local time from: %s\", timeField ) );\n                         }\n-                        TemporalValue t = (TemporalValue) timeField;\n+\n+TemporalValue t = (TemporalValue) timeField;\n                         time = t.getLocalTimePart();\n                     }\n                     else\n                     {\n                         time = LocalTimeValue.DEFAULT_LOCAL_TIME;\n                     }\n-                    LocalDate date;\n+\n+LocalDate date;\n                     if ( selectingDate )\n                     {\n                         AnyValue dateField = fields.get( TemporalFields.date );\n-                        if ( !(dateField instanceof TemporalValue) )\n+                        if ( !( dateField instanceof TemporalValue) )\n                         {\n                             throw new InvalidValuesArgumentException( String.format( \"Cannot construct date from: %s\", dateField ) );\n                         }\n-                        TemporalValue t = (TemporalValue) dateField;\n+\n+TemporalValue t = (TemporalValue) dateField;\n                         date = t.getDatePart();\n                     }\n                     else\n@@ -229,11 +224,7 @@ public final class LocalDateTimeValue extends TemporalValue<LocalDateTime,LocalD\n                 if ( fields.containsKey( TemporalFields.week ) && !selectingDate && !selectingDateTime )\n                 {\n                     // Be sure to be in the start of the week based year (which can be later than 1st Jan)\n-                    result = result\n-                            .with( IsoFields.WEEK_BASED_YEAR, safeCastIntegral( TemporalFields.year.name(), fields.get( TemporalFields.year ),\n-                                    TemporalFields.year.defaultValue ) )\n-                            .with( IsoFields.WEEK_OF_WEEK_BASED_YEAR, 1 )\n-                            .with( ChronoField.DAY_OF_WEEK, 1 );\n+                    result = result.with( IsoFields.WEEK_BASED_YEAR, safeCastIntegral( TemporalFields.year.name(), fields.get( TemporalFields.year ), TemporalFields.year.defaultValue ) ).with( IsoFields.WEEK_OF_WEEK_BASED_YEAR, 1 ).with( ChronoField.DAY_OF_WEEK, 1 );\n                 }\n \n                 result = assignAllFields( result );\n@@ -259,7 +250,8 @@ public final class LocalDateTimeValue extends TemporalValue<LocalDateTime,LocalD\n                 {\n                     return (LocalDateTimeValue) datetime;\n                 }\n-                return localDateTime( getLocalDateTimeOf( datetime ) );\n+\n+return localDateTime( getLocalDateTimeOf( datetime ) );\n             }\n         };\n     }\n@@ -282,7 +274,8 @@ public final class LocalDateTimeValue extends TemporalValue<LocalDateTime,LocalD\n         {\n             cmp = value.getNano() - that.value.getNano();\n         }\n-        return cmp;\n+\n+return cmp;\n     }\n \n     @Override\n@@ -313,7 +306,7 @@ public final class LocalDateTimeValue extends TemporalValue<LocalDateTime,LocalD\n     OffsetTime getTimePart( Supplier<ZoneId> defaultZone )\n     {\n         ZoneOffset currentOffset = assertValidArgument( () -> ZonedDateTime.ofInstant( Instant.now(), defaultZone.get() ) ).getOffset();\n-        return OffsetTime.of(value.toLocalTime(), currentOffset);\n+        return OffsetTime.of(value.toLocalTime(), currentOffset );\n     }\n \n     @Override\n@@ -400,11 +393,10 @@ public final class LocalDateTimeValue extends TemporalValue<LocalDateTime,LocalD\n         return dateTime == value ? this : new LocalDateTimeValue( dateTime );\n     }\n \n-    private static final Pattern PATTERN = Pattern.compile(\n-            DATE_PATTERN + \"(?<time>T\" + TIME_PATTERN + \")?\",\n+    private static final Pattern PATTERN = Pattern.compile( DATE_PATTERN + \"(?<time>T\" + TIME_PATTERN + \")?\",\n             Pattern.CASE_INSENSITIVE );\n \n-    private static LocalDateTimeValue parse( Matcher matcher )\n+private static LocalDateTimeValue parse( Matcher matcher )\n     {\n         return localDateTime( LocalDateTime.of( parseDate( matcher ), optTime( matcher ) ) );\n     }\n@@ -413,4 +405,4 @@ public final class LocalDateTimeValue extends TemporalValue<LocalDateTime,LocalD\n     {\n         return matcher.group( \"time\" ) != null ? parseTime( matcher ) : LocalTime.MIN;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 42
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}