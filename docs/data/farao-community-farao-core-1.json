{
    "project_name": "farao-community-farao-core",
    "error_id": "1",
    "information": {
        "errors": [
            {
                "line": "32",
                "column": "1",
                "severity": "error",
                "message": "'/*' has more than 1 empty lines before.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "\n\n/**\n * Provides methods to read and write JsonFlowBasedComputationParameters from and to JSON.\n *\n * @author Sebastien Murgey {@literal <sebastien.murgey at rte-france.com>}",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/1/JsonFlowBasedComputationParameters.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/styler/1/JsonFlowBasedComputationParameters.java\nindex 42483d68703..415bc1a4ebb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/1/JsonFlowBasedComputationParameters.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/styler/1/JsonFlowBasedComputationParameters.java\n@@ -28,7 +28,6 @@ import java.nio.file.Files;\n import java.nio.file.Path;\n import java.util.Objects;\n \n-\n /**\n  * Provides methods to read and write JsonFlowBasedComputationParameters from and to JSON.\n  *\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "33",
                    "column": "1",
                    "severity": "error",
                    "message": "'/*' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/1/JsonFlowBasedComputationParameters.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/intellij/1/JsonFlowBasedComputationParameters.java\nindex 42483d68703..4c34439a0ff 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/1/JsonFlowBasedComputationParameters.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/intellij/1/JsonFlowBasedComputationParameters.java\n@@ -4,6 +4,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package com.farao_community.farao.flowbased_computation.json;\n \n import com.fasterxml.jackson.core.JsonGenerator;\n@@ -48,7 +49,7 @@ public final class JsonFlowBasedComputationParameters {\n      * Lazily initialized list of extension serializers.\n      */\n     private static final Supplier<ExtensionProviders<ExtensionSerializer>> SUPPLIER =\n-            Suppliers.memoize(() -> ExtensionProviders.createProvider(ExtensionSerializer.class, \"fb-computation-parameters\"));\n+        Suppliers.memoize(() -> ExtensionProviders.createProvider(ExtensionSerializer.class, \"fb-computation-parameters\"));\n \n     /**\n      * Gets the known extension serializers.\n@@ -148,6 +149,6 @@ public final class JsonFlowBasedComputationParameters {\n \n     private static ObjectMapper createObjectMapper() {\n         return JsonUtil.createObjectMapper()\n-                .registerModule(new FlowBasedComputationParametersJsonModule());\n+            .registerModule(new FlowBasedComputationParametersJsonModule());\n     }\n }\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/1/JsonFlowBasedComputationParameters.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/naturalize/1/JsonFlowBasedComputationParameters.java\nindex 42483d68703..f2f5caadd0b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/1/JsonFlowBasedComputationParameters.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/naturalize/1/JsonFlowBasedComputationParameters.java\n@@ -28,7 +28,6 @@ import java.nio.file.Files;\n import java.nio.file.Path;\n import java.util.Objects;\n \n-\n /**\n  * Provides methods to read and write JsonFlowBasedComputationParameters from and to JSON.\n  *\n@@ -150,4 +149,4 @@ public final class JsonFlowBasedComputationParameters {\n         return JsonUtil.createObjectMapper()\n                 .registerModule(new FlowBasedComputationParametersJsonModule());\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "31",
                    "column": "1",
                    "severity": "error",
                    "message": "'/*' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "38",
                    "column": "1",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/1/JsonFlowBasedComputationParameters.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/codebuff/1/JsonFlowBasedComputationParameters.java\nindex 42483d68703..9d96b248a8e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/1/JsonFlowBasedComputationParameters.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/codebuff/1/JsonFlowBasedComputationParameters.java\n@@ -19,7 +19,6 @@ import com.powsybl.commons.extensions.ExtensionJsonSerializer;\n import com.powsybl.commons.extensions.ExtensionProviders;\n import com.powsybl.commons.json.JsonUtil;\n import com.farao_community.farao.flowbased_computation.FlowBasedComputationParameters;\n-\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n@@ -34,6 +33,8 @@ import java.util.Objects;\n  *\n  * @author Sebastien Murgey {@literal <sebastien.murgey at rte-france.com>}\n  */\n+\n+\n public final class JsonFlowBasedComputationParameters {\n \n     /**\n@@ -41,18 +42,20 @@ public final class JsonFlowBasedComputationParameters {\n      *\n      * @param <E> The extension class\n      */\n+\n     public interface ExtensionSerializer<E extends Extension<FlowBasedComputationParameters>> extends ExtensionJsonSerializer<FlowBasedComputationParameters, E> {\n     }\n \n     /**\n      * Lazily initialized list of extension serializers.\n      */\n-    private static final Supplier<ExtensionProviders<ExtensionSerializer>> SUPPLIER =\n-            Suppliers.memoize(() -> ExtensionProviders.createProvider(ExtensionSerializer.class, \"fb-computation-parameters\"));\n+\n+    private static final Supplier<ExtensionProviders<ExtensionSerializer>> SUPPLIER = Suppliers.memoize(() -> ExtensionProviders.createProvider(ExtensionSerializer.class, \"fb-computation-parameters\"));\n \n     /**\n      * Gets the known extension serializers.\n      */\n+\n     public static ExtensionProviders<ExtensionSerializer> getExtensionSerializers() {\n         return SUPPLIER.get();\n     }\n@@ -63,6 +66,7 @@ public final class JsonFlowBasedComputationParameters {\n     /**\n      * Reads parameters from a JSON file (will NOT rely on platform config).\n      */\n+\n     public static FlowBasedComputationParameters read(Path jsonFile) {\n         return update(new FlowBasedComputationParameters(), jsonFile);\n     }\n@@ -70,6 +74,7 @@ public final class JsonFlowBasedComputationParameters {\n     /**\n      * Reads parameters from a JSON file (will NOT rely on platform config).\n      */\n+\n     public static FlowBasedComputationParameters read(InputStream jsonStream) {\n         return update(new FlowBasedComputationParameters(), jsonStream);\n     }\n@@ -77,9 +82,9 @@ public final class JsonFlowBasedComputationParameters {\n     /**\n      * Updates parameters by reading the content of a JSON file.\n      */\n+\n     public static FlowBasedComputationParameters update(FlowBasedComputationParameters parameters, Path jsonFile) {\n         Objects.requireNonNull(jsonFile);\n-\n         try (InputStream is = Files.newInputStream(jsonFile)) {\n             return update(parameters, is);\n         } catch (IOException e) {\n@@ -90,6 +95,7 @@ public final class JsonFlowBasedComputationParameters {\n     /**\n      * Updates parameters by reading the content of a JSON stream.\n      */\n+\n     public static FlowBasedComputationParameters update(FlowBasedComputationParameters parameters, InputStream jsonStream) {\n         try {\n             ObjectMapper objectMapper = createObjectMapper();\n@@ -102,9 +108,9 @@ public final class JsonFlowBasedComputationParameters {\n     /**\n      * Writes parameters as JSON to a file.\n      */\n+\n     public static void write(FlowBasedComputationParameters parameters, Path jsonFile) {\n         Objects.requireNonNull(jsonFile);\n-\n         try (OutputStream outputStream = Files.newOutputStream(jsonFile)) {\n             write(parameters, outputStream);\n         } catch (IOException e) {\n@@ -115,9 +121,11 @@ public final class JsonFlowBasedComputationParameters {\n     /**\n      * Writes parameters as JSON to an output stream.\n      */\n+\n     public static void write(FlowBasedComputationParameters parameters, OutputStream outputStream) {\n         try {\n             ObjectMapper objectMapper = createObjectMapper();\n+\n             ObjectWriter writer = objectMapper.writerWithDefaultPrettyPrinter();\n             writer.writeValue(outputStream, parameters);\n         } catch (IOException e) {\n@@ -128,6 +136,7 @@ public final class JsonFlowBasedComputationParameters {\n     /**\n      * Low level deserialization method, to be used for instance for reading rao_computation_api computation parameters nested in another object.\n      */\n+\n     public static FlowBasedComputationParameters deserialize(JsonParser parser, DeserializationContext context, FlowBasedComputationParameters parameters) throws IOException {\n         return new FlowBasedComputationParametersDeserializer().deserialize(parser, context, parameters);\n     }\n@@ -135,6 +144,7 @@ public final class JsonFlowBasedComputationParameters {\n     /**\n      * Low level deserialization method, to be used for instance for updating lrao computation parameters nested in another object.\n      */\n+\n     public static FlowBasedComputationParameters deserialize(JsonParser parser, DeserializationContext context) throws IOException {\n         return new FlowBasedComputationParametersDeserializer().deserialize(parser, context);\n     }\n@@ -142,12 +152,12 @@ public final class JsonFlowBasedComputationParameters {\n     /**\n      * Low level serialization method, to be used for instance for writing rao_computation_api computation parameters nested in another object.\n      */\n+\n     public static void serialize(FlowBasedComputationParameters parameters, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {\n         new FlowBasedComputationParametersSerializer().serialize(parameters, jsonGenerator, serializerProvider);\n     }\n \n     private static ObjectMapper createObjectMapper() {\n-        return JsonUtil.createObjectMapper()\n-                .registerModule(new FlowBasedComputationParametersJsonModule());\n+        return JsonUtil.createObjectMapper().registerModule(new FlowBasedComputationParametersJsonModule());\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 22
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/1/JsonFlowBasedComputationParameters.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/styler_random/1/JsonFlowBasedComputationParameters.java\nindex 42483d68703..415bc1a4ebb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/1/JsonFlowBasedComputationParameters.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/styler_random/1/JsonFlowBasedComputationParameters.java\n@@ -28,7 +28,6 @@ import java.nio.file.Files;\n import java.nio.file.Path;\n import java.util.Objects;\n \n-\n /**\n  * Provides methods to read and write JsonFlowBasedComputationParameters from and to JSON.\n  *\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/1/JsonFlowBasedComputationParameters.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/styler_three_grams/1/JsonFlowBasedComputationParameters.java\nindex 42483d68703..415bc1a4ebb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/1/JsonFlowBasedComputationParameters.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/styler_three_grams/1/JsonFlowBasedComputationParameters.java\n@@ -28,7 +28,6 @@ import java.nio.file.Files;\n import java.nio.file.Path;\n import java.util.Objects;\n \n-\n /**\n  * Provides methods to read and write JsonFlowBasedComputationParameters from and to JSON.\n  *\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "codebuff"
    ]
}