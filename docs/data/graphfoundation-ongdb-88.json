{
    "project_name": "graphfoundation-ongdb",
    "error_id": "88",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "57",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/88/CypherExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/88/CypherExecutor.java\nindex c8ff0a2b82a..f1870df71a2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/88/CypherExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/88/CypherExecutor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.server.database;\n \n import java.util.Map;\n@@ -45,64 +46,64 @@ import static org.neo4j.server.web.HttpHeaderUtils.getTransactionTimeout;\n \n public class CypherExecutor extends LifecycleAdapter\n {\n-    private final Database database;\n-    private final Log log;\n-    private ExecutionEngine executionEngine;\n-    private TransactionalContextFactory contextFactory;\n+  private final Database database;\n+  private final Log log;\n+  private ExecutionEngine executionEngine;\n+  private TransactionalContextFactory contextFactory;\n \n-    private static final PropertyContainerLocker locker = new PropertyContainerLocker();\n-    private GraphDatabaseQueryService service;\n+  private static final PropertyContainerLocker locker = new PropertyContainerLocker();\n+  private GraphDatabaseQueryService service;\n \n-    public CypherExecutor( Database database, LogProvider logProvider )\n-    {\n-        this.database = database;\n-        log = logProvider.getLog( getClass() );\n-    }\n+  public CypherExecutor(Database database, LogProvider logProvider)\n+  {\n+    this.database = database;\n+    log = logProvider.getLog(getClass());\n+  }\n \n-    public ExecutionEngine getExecutionEngine()\n-    {\n-        return executionEngine;\n-    }\n+  public ExecutionEngine getExecutionEngine()\n+  {\n+    return executionEngine;\n+  }\n \n-    @Override\n-    public void start()\n-    {\n-        DependencyResolver resolver = database.getGraph().getDependencyResolver();\n-        this.executionEngine = (ExecutionEngine) resolver.resolveDependency( QueryExecutionEngine.class );\n-        this.service = resolver.resolveDependency( GraphDatabaseQueryService.class );\n-        this.contextFactory = Neo4jTransactionalContextFactory.create( this.service, locker );\n-    }\n+  @Override\n+  public void start()\n+  {\n+    DependencyResolver resolver = database.getGraph().getDependencyResolver();\n+    this.executionEngine = (ExecutionEngine) resolver.resolveDependency(QueryExecutionEngine.class);\n+    this.service = resolver.resolveDependency(GraphDatabaseQueryService.class);\n+    this.contextFactory = Neo4jTransactionalContextFactory.create(this.service, locker);\n+  }\n \n-    @Override\n-    public void stop()\n-    {\n-        this.executionEngine = null;\n-        this.contextFactory = null;\n-    }\n+  @Override\n+  public void stop()\n+  {\n+    this.executionEngine = null;\n+    this.contextFactory = null;\n+  }\n \n-    public TransactionalContext createTransactionContext( String query, Map<String, Object> parameters,\n-            HttpServletRequest request )\n-    {\n-        InternalTransaction tx = getInternalTransaction( request );\n-        return contextFactory.newContext( HttpConnectionInfoFactory.create( request ), tx, query, asMapValue( parameters ));\n-    }\n+  public TransactionalContext createTransactionContext(String query, Map<String, Object> parameters,\n+                                                       HttpServletRequest request)\n+  {\n+    InternalTransaction tx = getInternalTransaction(request);\n+    return contextFactory.newContext(HttpConnectionInfoFactory.create(request), tx, query, asMapValue(parameters));\n+  }\n \n-    private InternalTransaction getInternalTransaction( HttpServletRequest request )\n-    {\n-        long customTimeout = getTransactionTimeout( request, log );\n-        return customTimeout > GraphDatabaseSettings.UNSPECIFIED_TIMEOUT ?\n-           beginCustomTransaction( customTimeout ) : beginDefaultTransaction();\n-    }\n+  private InternalTransaction getInternalTransaction(HttpServletRequest request)\n+  {\n+    long customTimeout = getTransactionTimeout(request, log);\n+    return customTimeout > GraphDatabaseSettings.UNSPECIFIED_TIMEOUT ?\n+        beginCustomTransaction(customTimeout) : beginDefaultTransaction();\n+  }\n \n-    private InternalTransaction beginCustomTransaction( long customTimeout )\n-    {\n-        return service.beginTransaction(\n-            KernelTransaction.Type.implicit, AUTH_DISABLED, customTimeout, TimeUnit.MILLISECONDS\n-        );\n-    }\n+  private InternalTransaction beginCustomTransaction(long customTimeout)\n+  {\n+    return service.beginTransaction(\n+        KernelTransaction.Type.implicit, AUTH_DISABLED, customTimeout, TimeUnit.MILLISECONDS\n+    );\n+  }\n \n-    private InternalTransaction beginDefaultTransaction()\n-    {\n-        return service.beginTransaction( KernelTransaction.Type.implicit, AUTH_DISABLED );\n-    }\n+  private InternalTransaction beginDefaultTransaction()\n+  {\n+    return service.beginTransaction(KernelTransaction.Type.implicit, AUTH_DISABLED);\n+  }\n }\n",
            "diff_size": 52
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "93",
                    "column": "29",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/88/CypherExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/88/CypherExecutor.java\nindex c8ff0a2b82a..8b35ad0fd5d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/88/CypherExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/88/CypherExecutor.java\n@@ -80,7 +80,7 @@ public class CypherExecutor extends LifecycleAdapter\n         this.contextFactory = null;\n     }\n \n-    public TransactionalContext createTransactionContext( String query, Map<String, Object> parameters,\n+    public TransactionalContext createTransactionContext( String query, Map<String,Object> parameters,\n             HttpServletRequest request )\n     {\n         InternalTransaction tx = getInternalTransaction( request );\n@@ -90,19 +90,16 @@ public class CypherExecutor extends LifecycleAdapter\n     private InternalTransaction getInternalTransaction( HttpServletRequest request )\n     {\n         long customTimeout = getTransactionTimeout( request, log );\n-        return customTimeout > GraphDatabaseSettings.UNSPECIFIED_TIMEOUT ?\n-           beginCustomTransaction( customTimeout ) : beginDefaultTransaction();\n+        return customTimeout> GraphDatabaseSettings.UNSPECIFIED_TIMEOUT ? beginCustomTransaction( customTimeout ) : beginDefaultTransaction();\n     }\n \n     private InternalTransaction beginCustomTransaction( long customTimeout )\n     {\n-        return service.beginTransaction(\n-            KernelTransaction.Type.implicit, AUTH_DISABLED, customTimeout, TimeUnit.MILLISECONDS\n-        );\n+        return service.beginTransaction( KernelTransaction.Type.implicit, AUTH_DISABLED, customTimeout, TimeUnit.MILLISECONDS );\n     }\n \n     private InternalTransaction beginDefaultTransaction()\n     {\n         return service.beginTransaction( KernelTransaction.Type.implicit, AUTH_DISABLED );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}