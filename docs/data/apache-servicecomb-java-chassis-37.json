{
    "project_name": "apache-servicecomb-java-chassis",
    "error_id": "37",
    "information": {
        "errors": [
            {
                "line": "68",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 122).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "      } catch (Exception e) {\n        // Avoid information leak of user input, and add option for debug use.\n        String message = String.format(\"Parameter is not valid for operation [%s]. Parameter is [%s]. Processor is [%s].\",\n            restOperation.getOperationMeta().getMicroserviceQualifiedName(),\n            param.getParamName(),\n            param.getParamProcessor().getProcessorType());",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "68",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/37/RestCodec.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/37/RestCodec.java\nindex 24101cc55a9..c186326f4fd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/37/RestCodec.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/37/RestCodec.java\n@@ -38,7 +38,7 @@ public final class RestCodec {\n   }\n \n   public static void argsToRest(Object[] args, RestOperationMeta restOperation,\n-      RestClientRequest clientRequest) throws Exception {\n+                                RestClientRequest clientRequest) throws Exception {\n     int paramSize = restOperation.getParamList().size();\n     if (paramSize == 0) {\n       return;\n@@ -55,7 +55,7 @@ public final class RestCodec {\n   }\n \n   public static Object[] restToArgs(HttpServletRequest request,\n-      RestOperationMeta restOperation) throws InvocationException {\n+                                    RestOperationMeta restOperation) throws InvocationException {\n     List<RestParam> paramList = restOperation.getParamList();\n \n     Object[] paramValues = new Object[paramList.size()];\n@@ -65,10 +65,11 @@ public final class RestCodec {\n         paramValues[idx] = param.getParamProcessor().getValue(request);\n       } catch (Exception e) {\n         // Avoid information leak of user input, and add option for debug use.\n-        String message = String.format(\"Parameter is not valid for operation [%s]. Parameter is [%s]. Processor is [%s].\",\n-            restOperation.getOperationMeta().getMicroserviceQualifiedName(),\n-            param.getParamName(),\n-            param.getParamProcessor().getProcessorType());\n+        String message =\n+            String.format(\"Parameter is not valid for operation [%s]. Parameter is [%s]. Processor is [%s].\",\n+                restOperation.getOperationMeta().getMicroserviceQualifiedName(),\n+                param.getParamName(),\n+                param.getParamProcessor().getProcessorType());\n         if (DynamicPropertyFactory.getInstance().getBooleanProperty(\n             RestConst.PRINT_CODEC_ERROR_MESSGAGE, false).get()) {\n           LOG.error(message, e);\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "68",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/37/RestCodec.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/37/RestCodec.java\nindex 24101cc55a9..ae50d958172 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/37/RestCodec.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/37/RestCodec.java\n@@ -82,4 +82,4 @@ public final class RestCodec {\n \n     return paramValues;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "68",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "69",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "69",
                    "column": "116",
                    "severity": "warning",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/37/RestCodec.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/37/RestCodec.java\nindex 24101cc55a9..ffb976815ea 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/37/RestCodec.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/37/RestCodec.java\n@@ -65,8 +65,8 @@ public final class RestCodec {\n         paramValues[idx] = param.getParamProcessor().getValue(request);\n       } catch (Exception e) {\n         // Avoid information leak of user input, and add option for debug use.\n-        String message = String.format(\"Parameter is not valid for operation [%s]. Parameter is [%s]. Processor is [%s].\",\n-            restOperation.getOperationMeta().getMicroserviceQualifiedName(),\n+        String\n+        message = String.format(\"Parameter is not valid for operation [%s]. Parameter is [%s]. Processor is [%s].\",restOperation.getOperationMeta().getMicroserviceQualifiedName(),\n             param.getParamName(),\n             param.getParamProcessor().getProcessorType());\n         if (DynamicPropertyFactory.getInstance().getBooleanProperty(\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}