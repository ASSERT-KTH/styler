{
    "project_name": "aspose-words-cloud-aspose-words-cloud-java",
    "error_id": "2",
    "information": {
        "errors": [
            {
                "line": "1061",
                "column": "17",
                "severity": "error",
                "message": "'}' at column 17 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "                    MediaType mediaType = MediaType.parse(guessContentTypeFromFile(file));\n                    mpBuilder.addPart(partHeaders, RequestBody.create(mediaType, file));\n                } else {\n                    Headers partHeaders = Headers.of(\"Content-Disposition\", \"form-data; name=\\\"\" + param.getKey() + \"\\\"\");\n                    mpBuilder.addPart(partHeaders, RequestBody.create(null, parameterToString(param.getValue())));\n                }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/2/ApiClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/2/ApiClient.java\nindex 585a15d213e..809e848c3ca 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/2/ApiClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/2/ApiClient.java\n@@ -1058,7 +1058,8 @@ public class ApiClient {\n                     Headers partHeaders = Headers.of(\"Content-Disposition\", \"form-data; name=\\\"\" + param.getKey() + \"\\\"; filename=\\\"\" + param.getKey() + \"\\\"\");\n                     MediaType mediaType = MediaType.parse(guessContentTypeFromFile(file));\n                     mpBuilder.addPart(partHeaders, RequestBody.create(mediaType, file));\n-                } else {\n+                }\n+                else {\n                     Headers partHeaders = Headers.of(\"Content-Disposition\", \"form-data; name=\\\"\" + param.getKey() + \"\\\"\");\n                     mpBuilder.addPart(partHeaders, RequestBody.create(null, parameterToString(param.getValue())));\n                 }\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "311",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "418",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "422",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "431",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "433",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "490",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "492",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "586",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "612",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "615",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "624",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "627",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "642",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "645",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "667",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "670",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "674",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "678",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "697",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "726",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "730",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "742",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "775",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "813",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "840",
                    "column": "21",
                    "severity": "error",
                    "message": "'}' at column 21 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "845",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "848",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "853",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "914",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "916",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "918",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "922",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "926",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "935",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "962",
                    "column": "21",
                    "severity": "error",
                    "message": "'}' at column 21 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "978",
                    "column": "21",
                    "severity": "error",
                    "message": "'}' at column 21 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1035",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1042",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1062",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1090",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/2/ApiClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/2/ApiClient.java\nindex 585a15d213e..9bbdab31848 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/2/ApiClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/2/ApiClient.java\n@@ -10,10 +10,10 @@\n  *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  *  copies of the Software, and to permit persons to whom the Software is\n  *  furnished to do so, subject to the following conditions:\n- * \n+ *\n  *  The above copyright notice and this permission notice shall be included in all\n  *  copies or substantial portions of the Software.\n- * \n+ *\n  *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -31,8 +31,10 @@ import com.squareup.okhttp.*;\n import com.squareup.okhttp.internal.http.HttpMethod;\n import com.squareup.okhttp.logging.HttpLoggingInterceptor;\n import com.squareup.okhttp.logging.HttpLoggingInterceptor.Level;\n+\n import okio.BufferedSink;\n import okio.Okio;\n+\n import org.threeten.bp.LocalDate;\n import org.threeten.bp.OffsetDateTime;\n \n@@ -49,21 +51,31 @@ import java.util.regex.Pattern;\n public class ApiClient {\n \n     private String apiVersion = \"v4.0\";\n+\n     private String baseUrl = \"https://api.aspose.cloud\";\n+\n     private String basePath = baseUrl + \"/\" + apiVersion;\n+\n     private String clientVersion = \"20.6\";\n+\n     private boolean debugging = false;\n+\n     private Map<String, String> defaultHeaderMap = new HashMap<String, String>();\n+\n     private String tempFolderPath = null;\n \n     private OkHttpClient httpClient;\n+\n     private JSON json;\n \n     private Interceptor loggingInterceptor;\n \n     private String accessToken;\n+\n     private String refreshToken;\n+\n     private String appKey;\n+\n     private String appSid;\n \n     public ApiClient(String appSid, String appKey, String baseUrl) {\n@@ -85,14 +97,14 @@ public class ApiClient {\n         json = new JSON();\n \n         // Set default User-Agent.\n-         setUserAgent(\"Swagger-Codegen/1.0.0/java\");\n+        setUserAgent(\"Swagger-Codegen/1.0.0/java\");\n         addDefaultHeader(\"x-aspose-client\", \"java sdk\");\n         addDefaultHeader(\"x-aspose-client-version\", clientVersion);\n         setConnectTimeout(5 * 60 * 1000);\n         setReadTimeout(5 * 60 * 1000);\n     }\n \n-     /**\n+    /**\n      * Get App Key\n      *\n      * @return App Key\n@@ -112,7 +124,7 @@ public class ApiClient {\n         return this;\n     }\n \n-     /**\n+    /**\n      * Get App Sid\n      *\n      * @return App Sid\n@@ -267,7 +279,7 @@ public class ApiClient {\n     /**\n      * Add a default header.\n      *\n-     * @param key The header's key\n+     * @param key   The header's key\n      * @param value The header's value\n      * @return ApiClient\n      */\n@@ -296,8 +308,7 @@ public class ApiClient {\n             if (debugging) {\n                 loggingInterceptor = new ApiLoggingInterceptor();\n                 httpClient.interceptors().add(loggingInterceptor);\n-            } \n-            else {\n+            } else {\n                 httpClient.interceptors().remove(loggingInterceptor);\n                 loggingInterceptor = null;\n             }\n@@ -311,8 +322,8 @@ public class ApiClient {\n      * with file response. The default value is <code>null</code>, i.e. using\n      * the system's default tempopary folder.\n      *\n-     * @see <a href=\"https://docs.oracle.com/javase/7/docs/api/java/io/File.html#createTempFile\">createTempFile</a>\n      * @return Temporary folder path\n+     * @see <a href=\"https://docs.oracle.com/javase/7/docs/api/java/io/File.html#createTempFile\">createTempFile</a>\n      */\n     public String getTempFolderPath() {\n         return tempFolderPath;\n@@ -404,13 +415,11 @@ public class ApiClient {\n     public String parameterToString(Object param) {\n         if (param == null) {\n             return \"\";\n-        } \n-        else if (param instanceof Date || param instanceof OffsetDateTime || param instanceof LocalDate) {\n+        } else if (param instanceof Date || param instanceof OffsetDateTime || param instanceof LocalDate) {\n             //Serialize to json string and remove the \" enclosing characters\n             String jsonStr = json.serialize(param);\n             return jsonStr.substring(1, jsonStr.length() - 1);\n-        } \n-        else if (param instanceof Collection) {\n+        } else if (param instanceof Collection) {\n             StringBuilder b = new StringBuilder();\n             for (Object o : (Collection) param) {\n                 if (b.length() > 0) {\n@@ -419,21 +428,19 @@ public class ApiClient {\n                 b.append(String.valueOf(o));\n             }\n             return b.toString();\n-        } \n-        else if (param instanceof String) {\n+        } else if (param instanceof String) {\n             return String.valueOf(param);\n-        }\n-        else {\n+        } else {\n             return json.serialize(param);\n         }\n     }\n \n     /**\n      * Formats the specified query parameter to a list containing a single {@code Pair} object.\n-     *\n+     * <p>\n      * Note that {@code value} must not be a collection.\n      *\n-     * @param name The name of the parameter.\n+     * @param name  The name of the parameter.\n      * @param value The value of the parameter.\n      * @return A list containing a single {@code Pair} object.\n      */\n@@ -449,12 +456,12 @@ public class ApiClient {\n \n     /**\n      * Formats the specified collection query parameters to a list of {@code Pair} objects.\n-     *\n+     * <p>\n      * Note that the values of each of the returned Pair objects are percent-encoded.\n      *\n      * @param collectionFormat The collection format of the parameter.\n-     * @param name The name of the parameter.\n-     * @param value The value of the parameter.\n+     * @param name             The name of the parameter.\n+     * @param value            The value of the parameter.\n      * @return A list of {@code Pair} objects.\n      */\n     public List<Pair> parameterToPairs(String collectionFormat, String name, Collection value) {\n@@ -480,15 +487,13 @@ public class ApiClient {\n         // characters\n         if (\"ssv\".equals(collectionFormat)) {\n             delimiter = escapeString(\" \");\n-        } \n-        else if (\"tsv\".equals(collectionFormat)) {\n+        } else if (\"tsv\".equals(collectionFormat)) {\n             delimiter = escapeString(\"\\t\");\n-        } \n-        else if (\"pipes\".equals(collectionFormat)) {\n+        } else if (\"pipes\".equals(collectionFormat)) {\n             delimiter = escapeString(\"|\");\n         }\n \n-        StringBuilder sb = new StringBuilder() ;\n+        StringBuilder sb = new StringBuilder();\n         for (Object item : value) {\n             sb.append(delimiter);\n             sb.append(escapeString(parameterToString(item)));\n@@ -513,27 +518,28 @@ public class ApiClient {\n     /**\n      * Check if the given MIME is a JSON MIME.\n      * JSON MIME examples:\n-     *   application/json\n-     *   application/json; charset=UTF8\n-     *   APPLICATION/JSON\n-     *   application/vnd.company+json\n+     * application/json\n+     * application/json; charset=UTF8\n+     * APPLICATION/JSON\n+     * application/vnd.company+json\n      * \"* / *\" is also default to JSON\n+     *\n      * @param mime MIME (Multipurpose Internet Mail Extensions)\n      * @return True if the given MIME is JSON, false otherwise.\n      */\n     public boolean isJsonMime(String mime) {\n-      String jsonMime = \"(?i)^(application/json|[^;/ \\t]+/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$\";\n-      return mime != null && (mime.matches(jsonMime) || mime.equals(\"*/*\"));\n+        String jsonMime = \"(?i)^(application/json|[^;/ \\t]+/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$\";\n+        return mime != null && (mime.matches(jsonMime) || mime.equals(\"*/*\"));\n     }\n \n     /**\n      * Select the Accept header's value from the given accepts array:\n-     *   if JSON exists in the given array, use it;\n-     *   otherwise use all of them (joining into a string)\n+     * if JSON exists in the given array, use it;\n+     * otherwise use all of them (joining into a string)\n      *\n      * @param accepts The accepts array to select from\n      * @return The Accept header to use. If the given array is empty,\n-     *   null will be returned (not to set the Accept header explicitly).\n+     * null will be returned (not to set the Accept header explicitly).\n      */\n     public String selectHeaderAccept(String[] accepts) {\n         if (accepts.length == 0) {\n@@ -549,16 +555,16 @@ public class ApiClient {\n \n     /**\n      * Select the Content-Type header's value from the given array:\n-     *   if JSON exists in the given array, use it;\n-     *   otherwise use the first one of the array.\n+     * if JSON exists in the given array, use it;\n+     * otherwise use the first one of the array.\n      *\n      * @param contentTypes The Content-Type array to select from\n      * @return The Content-Type header to use. If the given array is empty,\n-     *   or matches \"any\", JSON will be used.\n+     * or matches \"any\", JSON will be used.\n      */\n     public String selectHeaderContentType(String[] contentTypes) {\n         if (contentTypes.length == 0 || contentTypes[0].equals(\"*/*\")) {\n-             return \"application/json\";\n+            return \"application/json\";\n         }\n         for (String contentType : contentTypes) {\n             if (isJsonMime(contentType)) {\n@@ -577,8 +583,7 @@ public class ApiClient {\n     public String escapeString(String str) {\n         try {\n             return URLEncoder.encode(str, \"utf8\").replaceAll(\"\\\\+\", \"%20\");\n-        } \n-        catch (UnsupportedEncodingException e) {\n+        } catch (UnsupportedEncodingException e) {\n             return str;\n         }\n     }\n@@ -587,12 +592,12 @@ public class ApiClient {\n      * Deserialize response body to Java object, according to the return type and\n      * the Content-Type response header.\n      *\n-     * @param <T> Type\n-     * @param response HTTP response\n+     * @param <T>        Type\n+     * @param response   HTTP response\n      * @param returnType The type of the Java object\n      * @return The deserialized Java object\n      * @throws ApiException If fail to deserialize response body, i.e. cannot read response body\n-     *   or the Content-Type of the response is not supported.\n+     *                      or the Content-Type of the response is not supported.\n      */\n     @SuppressWarnings(\"unchecked\")\n     public <T> T deserialize(Response response, Type returnType) throws ApiException {\n@@ -604,24 +609,22 @@ public class ApiClient {\n             // Handle binary response (byte array).\n             try {\n                 return (T) response.body().bytes();\n-            } \n-            catch (IOException e) {\n+            } catch (IOException e) {\n                 throw new ApiException(e);\n             }\n-        } \n-        else if (returnType.equals(File.class)) {\n+        } else if (returnType.equals(File.class)) {\n             // Handle file downloading.\n             return (T) downloadFileFromResponse(response);\n         }\n \n         String respBody;\n         try {\n-            if (response.body() != null)\n+            if (response.body() != null) {\n                 respBody = response.body().string();\n-            else\n+            } else {\n                 respBody = null;\n-        } \n-        catch (IOException e) {\n+            }\n+        } catch (IOException e) {\n             throw new ApiException(e);\n         }\n \n@@ -636,17 +639,15 @@ public class ApiClient {\n         }\n         if (isJsonMime(contentType)) {\n             return json.deserialize(respBody, returnType);\n-        } \n-        else if (returnType.equals(String.class)) {\n+        } else if (returnType.equals(String.class)) {\n             // Expecting string, return the raw response body.\n             return (T) respBody;\n-        } \n-        else {\n+        } else {\n             throw new ApiException(\n-                    \"Content type \\\"\" + contentType + \"\\\" is not supported for type: \" + returnType,\n-                    response.code(),\n-                    response.headers().toMultimap(),\n-                    respBody);\n+                \"Content type \\\"\" + contentType + \"\\\" is not supported for type: \" + returnType,\n+                response.code(),\n+                response.headers().toMultimap(),\n+                respBody);\n         }\n     }\n \n@@ -654,7 +655,7 @@ public class ApiClient {\n      * Serialize the given Java object into request body according to the object's\n      * class and the request Content-Type.\n      *\n-     * @param obj The Java object\n+     * @param obj         The Java object\n      * @param contentType The request Content-Type\n      * @return The serialized request body\n      * @throws ApiException If fail to serialize the given object\n@@ -663,22 +664,18 @@ public class ApiClient {\n         if (obj instanceof byte[]) {\n             // Binary (byte array) body parameter support.\n             return RequestBody.create(MediaType.parse(contentType), (byte[]) obj);\n-        } \n-        else if (obj instanceof File) {\n+        } else if (obj instanceof File) {\n             // File body parameter support.\n             return RequestBody.create(MediaType.parse(contentType), (File) obj);\n-        } \n-        else if (isJsonMime(contentType)) {\n+        } else if (isJsonMime(contentType)) {\n             String content;\n             if (obj != null) {\n                 content = json.serialize(obj);\n-            } \n-            else {\n+            } else {\n                 content = null;\n             }\n             return RequestBody.create(MediaType.parse(contentType), content);\n-        } \n-        else {\n+        } else {\n             throw new ApiException(\"Content type \\\"\" + contentType + \"\\\" is not supported\");\n         }\n     }\n@@ -687,8 +684,8 @@ public class ApiClient {\n      * Download file from the given response.\n      *\n      * @param response An instance of the Response object\n-     * @throws ApiException If fail to read file content from response and write to disk\n      * @return Downloaded file\n+     * @throws ApiException If fail to read file content from response and write to disk\n      */\n     public File downloadFileFromResponse(Response response) throws ApiException {\n         try {\n@@ -697,8 +694,7 @@ public class ApiClient {\n             sink.writeAll(response.body().source());\n             sink.close();\n             return file;\n-        } \n-        catch (IOException e) {\n+        } catch (IOException e) {\n             throw new ApiException(e);\n         }\n     }\n@@ -707,8 +703,8 @@ public class ApiClient {\n      * Prepare file for download\n      *\n      * @param response An instance of the Response object\n-     * @throws IOException If fail to prepare file for download\n      * @return Prepared file for the download\n+     * @throws IOException If fail to prepare file for download\n      */\n     public File prepareDownloadFile(Response response) throws IOException {\n         String filename = null;\n@@ -727,34 +723,34 @@ public class ApiClient {\n         if (filename == null) {\n             prefix = \"download-\";\n             suffix = \"\";\n-        } \n-        else {\n+        } else {\n             int pos = filename.lastIndexOf(\".\");\n             if (pos == -1) {\n                 prefix = filename + \"-\";\n-            } \n-            else {\n+            } else {\n                 prefix = filename.substring(0, pos) + \"-\";\n                 suffix = filename.substring(pos);\n             }\n             // File.createTempFile requires the prefix to be at least three characters long\n-            if (prefix.length() < 3)\n+            if (prefix.length() < 3) {\n                 prefix = \"download-\";\n+            }\n         }\n \n-        if (tempFolderPath == null)\n+        if (tempFolderPath == null) {\n             return File.createTempFile(prefix, suffix);\n-        else\n+        } else {\n             return File.createTempFile(prefix, suffix, new File(tempFolderPath));\n+        }\n     }\n \n     /**\n      * {@link #execute(Call, Type)}\n      *\n-     * @param <T> Type\n+     * @param <T>  Type\n      * @param call An instance of the Call object\n-     * @throws ApiException If fail to execute the call\n      * @return ApiResponse&lt;T&gt;\n+     * @throws ApiException If fail to execute the call\n      */\n     public <T> ApiResponse<T> execute(Call call) throws ApiException {\n         return execute(call, null);\n@@ -764,11 +760,11 @@ public class ApiClient {\n      * Execute HTTP call and deserialize the HTTP response body into the given return type.\n      *\n      * @param returnType The return type used to deserialize HTTP response body\n-     * @param <T> The return type corresponding to (same with) returnType\n-     * @param call Call\n+     * @param <T>        The return type corresponding to (same with) returnType\n+     * @param call       Call\n      * @return ApiResponse object containing response status, headers and\n-     *   data, which is a Java object deserialized from response body and would be null\n-     *   when returnType is null.\n+     * data, which is a Java object deserialized from response body and would be null\n+     * when returnType is null.\n      * @throws ApiException If fail to execute the call\n      */\n     public <T> ApiResponse<T> execute(Call call, Type returnType) throws ApiException {\n@@ -776,8 +772,7 @@ public class ApiClient {\n             Response response = call.execute();\n             T data = handleResponse(response, returnType);\n             return new ApiResponse<T>(response.code(), response.headers().toMultimap(), data);\n-        } \n-        catch (IOException e) {\n+        } catch (IOException e) {\n             throw new ApiException(e);\n         }\n     }\n@@ -785,8 +780,8 @@ public class ApiClient {\n     /**\n      * {@link #executeAsync(Call, Type, ApiCallback)}\n      *\n-     * @param <T> Type\n-     * @param call An instance of the Call object\n+     * @param <T>      Type\n+     * @param call     An instance of the Call object\n      * @param callback ApiCallback&lt;T&gt;\n      */\n     public <T> void executeAsync(Call call, ApiCallback<T> callback) {\n@@ -796,11 +791,11 @@ public class ApiClient {\n     /**\n      * Execute HTTP call asynchronously.\n      *\n-     * @see #execute(Call, Type)\n-     * @param <T> Type\n-     * @param call The callback to be executed when the API call finishes\n+     * @param <T>        Type\n+     * @param call       The callback to be executed when the API call finishes\n      * @param returnType Return type\n-     * @param callback ApiCallback\n+     * @param callback   ApiCallback\n+     * @see #execute(Call, Type)\n      */\n     @SuppressWarnings(\"unchecked\")\n     public <T> void executeAsync(Call call, final Type returnType, final ApiCallback<T> callback) {\n@@ -815,8 +810,7 @@ public class ApiClient {\n                 T result;\n                 try {\n                     result = (T) handleResponse(response, returnType);\n-                } \n-                catch (ApiException e) {\n+                } catch (ApiException e) {\n                     callback.onFailure(e, response.code(), response.headers().toMultimap());\n                     return;\n                 }\n@@ -828,12 +822,12 @@ public class ApiClient {\n     /**\n      * Handle the given response, return the deserialized object when the response is successful.\n      *\n-     * @param <T> Type\n-     * @param response Response\n+     * @param <T>        Type\n+     * @param response   Response\n      * @param returnType Return type\n-     * @throws ApiException If the response has a unsuccessful status code or\n-     *   fail to deserialize the response body\n      * @return Type\n+     * @throws ApiException If the response has a unsuccessful status code or\n+     *                      fail to deserialize the response body\n      */\n     public <T> T handleResponse(Response response, Type returnType) throws ApiException {\n         if (response.isSuccessful()) {\n@@ -843,24 +837,20 @@ public class ApiClient {\n                 if (response.body() != null) {\n                     try {\n                         response.body().close();\n-                    } \n-                    catch (IOException e) {\n+                    } catch (IOException e) {\n                         throw new ApiException(response.message(), e, response.code(), response.headers().toMultimap());\n                     }\n                 }\n                 return null;\n-            } \n-            else {\n+            } else {\n                 return deserialize(response, returnType);\n             }\n-        } \n-        else {\n+        } else {\n             String respBody = null;\n             if (response.body() != null) {\n                 try {\n                     respBody = response.body().string();\n-                } \n-                catch (IOException e) {\n+                } catch (IOException e) {\n                     throw new ApiException(response.message(), e, response.code(), response.headers().toMultimap());\n                 }\n             }\n@@ -871,18 +861,18 @@ public class ApiClient {\n     /**\n      * Build HTTP call with the given options.\n      *\n-     * @param path The sub-path of the HTTP URL\n-     * @param method The request method, one of \"GET\", \"HEAD\", \"OPTIONS\", \"POST\", \"PUT\", \"PATCH\" and \"DELETE\"\n-     * @param queryParams The query parameters\n-     * @param collectionQueryParams The collection query parameters\n-     * @param body The request body object\n-     * @param headerParams The header parameters\n-     * @param formParams The form parameters\n-     * @param authNames The authentications to apply\n+     * @param path                    The sub-path of the HTTP URL\n+     * @param method                  The request method, one of \"GET\", \"HEAD\", \"OPTIONS\", \"POST\", \"PUT\", \"PATCH\" and \"DELETE\"\n+     * @param queryParams             The query parameters\n+     * @param collectionQueryParams   The collection query parameters\n+     * @param body                    The request body object\n+     * @param headerParams            The header parameters\n+     * @param formParams              The form parameters\n+     * @param authNames               The authentications to apply\n      * @param progressRequestListener Progress request listener\n      * @return The HTTP call\n      * @throws ApiException If fail to serialize the request body object\n-     * @throws IOException If fail to serialize the request body object\n+     * @throws IOException  If fail to serialize the request body object\n      */\n     public Call buildCall(String path, String method, List<Pair> queryParams, List<Pair> collectionQueryParams, Object body, Map<String, String> headerParams, Map<String, Object> formParams, String[] authNames, ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {\n         Request request = buildRequest(path, method, queryParams, collectionQueryParams, body, headerParams, formParams, authNames, progressRequestListener);\n@@ -893,18 +883,18 @@ public class ApiClient {\n     /**\n      * Build an HTTP request with the given options.\n      *\n-     * @param path The sub-path of the HTTP URL\n-     * @param method The request method, one of \"GET\", \"HEAD\", \"OPTIONS\", \"POST\", \"PUT\", \"PATCH\" and \"DELETE\"\n-     * @param queryParams The query parameters\n-     * @param collectionQueryParams The collection query parameters\n-     * @param body The request body object\n-     * @param headerParams The header parameters\n-     * @param formParams The form parameters\n-     * @param authNames The authentications to apply\n+     * @param path                    The sub-path of the HTTP URL\n+     * @param method                  The request method, one of \"GET\", \"HEAD\", \"OPTIONS\", \"POST\", \"PUT\", \"PATCH\" and \"DELETE\"\n+     * @param queryParams             The query parameters\n+     * @param collectionQueryParams   The collection query parameters\n+     * @param body                    The request body object\n+     * @param headerParams            The header parameters\n+     * @param formParams              The form parameters\n+     * @param authNames               The authentications to apply\n      * @param progressRequestListener Progress request listener\n-     * @return The HTTP request \n+     * @return The HTTP request\n      * @throws ApiException If fail to serialize the request body object\n-     * @throws IOException If fail to serialize the request body object\n+     * @throws IOException  If fail to serialize the request body object\n      */\n     public Request buildRequest(String path, String method, List<Pair> queryParams, List<Pair> collectionQueryParams, Object body, Map<String, String> headerParams, Map<String, Object> formParams, String[] authNames, ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {\n         addOAuthAuthentication(headerParams);\n@@ -921,24 +911,19 @@ public class ApiClient {\n         RequestBody reqBody;\n         if (!HttpMethod.permitsRequestBody(method)) {\n             reqBody = null;\n-        } \n-        else if (\"application/x-www-form-urlencoded\".equals(contentType)) {\n+        } else if (\"application/x-www-form-urlencoded\".equals(contentType)) {\n             reqBody = buildRequestBodyFormEncoding(formParams);\n-        } \n-        else if (\"multipart/form-data\".equals(contentType)) {\n+        } else if (\"multipart/form-data\".equals(contentType)) {\n             reqBody = buildRequestBodyMultipart(formParams);\n-        } \n-        else if (body == null) {\n+        } else if (body == null) {\n             if (\"DELETE\".equals(method)) {\n                 // allow calling DELETE without sending a request body\n                 reqBody = null;\n-            } \n-            else {\n+            } else {\n                 // use an empty request body (for POST, PUT and PATCH)\n                 reqBody = RequestBody.create(MediaType.parse(contentType), \"\");\n             }\n-        } \n-        else {\n+        } else {\n             reqBody = serialize(body, contentType);\n         }\n \n@@ -947,8 +932,7 @@ public class ApiClient {\n         if (progressRequestListener != null && reqBody != null) {\n             ProgressRequestBody progressRequestBody = new ProgressRequestBody(reqBody, progressRequestListener);\n             request = reqBuilder.method(method, progressRequestBody).build();\n-        } \n-        else {\n+        } else {\n             request = reqBuilder.method(method, reqBody).build();\n         }\n \n@@ -958,8 +942,8 @@ public class ApiClient {\n     /**\n      * Build full URL by concatenating base path, the given sub path and query parameters.\n      *\n-     * @param path The sub path\n-     * @param queryParams The query parameters\n+     * @param path                  The sub path\n+     * @param queryParams           The query parameters\n      * @param collectionQueryParams The collection query parameters\n      * @return The full URL\n      */\n@@ -975,8 +959,7 @@ public class ApiClient {\n                     if (prefix != null) {\n                         url.append(prefix);\n                         prefix = null;\n-                    } \n-                    else {\n+                    } else {\n                         url.append(\"&\");\n                     }\n                     String value = parameterToString(param.getValue());\n@@ -992,8 +975,7 @@ public class ApiClient {\n                     if (prefix != null) {\n                         url.append(prefix);\n                         prefix = null;\n-                    } \n-                    else {\n+                    } else {\n                         url.append(\"&\");\n                     }\n                     String value = parameterToString(param.getValue());\n@@ -1010,7 +992,7 @@ public class ApiClient {\n      * Set header parameters to the request builder, including default headers.\n      *\n      * @param headerParams Header parameters in the ofrm of Map\n-     * @param reqBuilder Reqeust.Builder\n+     * @param reqBuilder   Reqeust.Builder\n      */\n     public void processHeaderParams(Map<String, String> headerParams, Request.Builder reqBuilder) {\n         for (Entry<String, String> param : headerParams.entrySet()) {\n@@ -1030,7 +1012,7 @@ public class ApiClient {\n      * @return RequestBody\n      */\n     public RequestBody buildRequestBodyFormEncoding(Map<String, Object> formParams) {\n-        FormEncodingBuilder formBuilder  = new FormEncodingBuilder();\n+        FormEncodingBuilder formBuilder = new FormEncodingBuilder();\n         for (Entry<String, Object> param : formParams.entrySet()) {\n             formBuilder.add(param.getKey(), parameterToString(param.getValue()));\n         }\n@@ -1042,16 +1024,15 @@ public class ApiClient {\n      * which could contain text fields and file fields.\n      *\n      * @param formParams Form parameters in the form of Map\n-     * @throws IOException If fail to serialize the request body object\n      * @return RequestBody\n+     * @throws IOException If fail to serialize the request body object\n      */\n     public RequestBody buildRequestBodyMultipart(Map<String, Object> formParams) throws IOException {\n         MultipartBuilder mpBuilder = new MultipartBuilder().type(MultipartBuilder.FORM);\n         if (formParams.isEmpty()) {\n             Headers partHeaders = Headers.of(\"Content-Disposition\", \"form-data\");\n             mpBuilder.addPart(partHeaders, RequestBody.create(MediaType.parse(\"none\"), new byte[] {}));\n-        }\n-        else {\n+        } else {\n             for (Entry<String, Object> param : formParams.entrySet()) {\n                 if (param.getValue() instanceof byte[]) {\n                     byte[] file = (byte[]) param.getValue();\n@@ -1078,41 +1059,40 @@ public class ApiClient {\n         String contentType = URLConnection.guessContentTypeFromStream(new ByteArrayInputStream(file));\n         if (contentType == null) {\n             return \"application/octet-stream\";\n-        } \n-        else {\n+        } else {\n             return contentType;\n         }\n     }\n \n-     /**\n+    /**\n      * Request OAuth token\n-     @throws ApiException If authorization is failed\n+     *\n+     * @throws ApiException If authorization is failed\n      */\n     public void requestToken() throws ApiException {\n         try {\n             RequestBody requestBody = new FormEncodingBuilder()\n-                    .addEncoded(\"grant_type\", \"client_credentials\")\n-                    .addEncoded(\"client_id\", getAppSid())\n-                    .addEncoded(\"client_secret\", getAppKey())\n-                    .build();\n+                .addEncoded(\"grant_type\", \"client_credentials\")\n+                .addEncoded(\"client_id\", getAppSid())\n+                .addEncoded(\"client_secret\", getAppKey())\n+                .build();\n \n             String url = baseUrl + \"/connect/token\";\n             Request request = new Request.Builder()\n-                    .url(url)\n-                    .post(requestBody)\n-                    .addHeader(\"Content-Type\", \" application/x-www-form-urlencoded\")\n-                    .build();\n+                .url(url)\n+                .post(requestBody)\n+                .addHeader(\"Content-Type\", \" application/x-www-form-urlencoded\")\n+                .build();\n \n             Response response = httpClient.newCall(request).execute();\n             GetAccessTokenResult result = json.deserialize(response.body().string(), GetAccessTokenResult.class);\n             setAccessToken(result.access_token);\n-        }\n-        catch (Exception ex) {\n+        } catch (Exception ex) {\n             throw new ApiException(ex);\n         }\n     }\n \n-     /**\n+    /**\n      * Add OAuth2 header\n      *\n      * @param headerParams Map of request headers\n@@ -1126,8 +1106,8 @@ public class ApiClient {\n \n \n     /**\n-    * GetAccessTokenResult class\n-    */\n+     * GetAccessTokenResult class\n+     */\n     private class GetAccessTokenResult {\n         public String access_token;\n     }\n",
            "diff_size": 192
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/2/ApiClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/2/ApiClient.java\nindex 585a15d213e..4c9b6faa731 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/2/ApiClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/2/ApiClient.java\n@@ -26,7 +26,6 @@\n  */\n \n package com.aspose.words.cloud;\n-\n import com.squareup.okhttp.*;\n import com.squareup.okhttp.internal.http.HttpMethod;\n import com.squareup.okhttp.logging.HttpLoggingInterceptor;\n@@ -35,7 +34,6 @@ import okio.BufferedSink;\n import okio.Okio;\n import org.threeten.bp.LocalDate;\n import org.threeten.bp.OffsetDateTime;\n-\n import java.io.*;\n import java.lang.reflect.Type;\n import java.net.URLConnection;\n@@ -46,60 +44,88 @@ import java.util.concurrent.TimeUnit;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n+\n public class ApiClient {\n \n-    private String apiVersion = \"v4.0\";\n-    private String baseUrl = \"https://api.aspose.cloud\";\n-    private String basePath = baseUrl + \"/\" + apiVersion;\n-    private String clientVersion = \"20.6\";\n-    private boolean debugging = false;\n-    private Map<String, String> defaultHeaderMap = new HashMap<String, String>();\n-    private String tempFolderPath = null;\n-\n-    private OkHttpClient httpClient;\n-    private JSON json;\n-\n-    private Interceptor loggingInterceptor;\n-\n-    private String accessToken;\n-    private String refreshToken;\n-    private String appKey;\n-    private String appSid;\n-\n-    public ApiClient(String appSid, String appKey, String baseUrl) {\n-        this();\n-        this.appSid = appSid;\n-        this.appKey = appKey;\n-        if (baseUrl != null) {\n-            this.setBaseUrl(baseUrl);\n-        }\n-    }\n+  private String apiVersion = \"v4.0\";\n+\n+\n+  private String baseUrl = \"https://api.aspose.cloud\";\n+\n+\n+  private String basePath = baseUrl + \"/\" + apiVersion;\n+\n+\n+  private String clientVersion = \"20.6\";\n+\n+\n+  private boolean debugging = false;\n+\n+\n+  private Map<String, String> defaultHeaderMap = new HashMap<String, String>();\n+\n+\n+  private String tempFolderPath = null;\n+\n+\n+  private OkHttpClient httpClient;\n+\n+\n+  private JSON json;\n+\n+\n+  private Interceptor loggingInterceptor;\n+\n+\n+  private String accessToken;\n+\n+\n+  private String refreshToken;\n+\n+\n+  private String appKey;\n+\n+\n+  private String appSid;\n+\n+\n+  public ApiClient(String appSid,  String appKey,  String baseUrl) {\n+    this();\n+      this.appSid = appSid;\n+      this.appKey = appKey;\n+\n+      if (baseUrl != null) {\n+        this.setBaseUrl(baseUrl);\n+      }\n+  }\n \n     /*\n      * Constructor for ApiClient\n      */\n-    public ApiClient() {\n-        httpClient = new OkHttpClient();\n-        httpClient.setProtocols(Arrays.asList(Protocol.HTTP_1_1));\n \n-        json = new JSON();\n+  public ApiClient() {\n+    httpClient = new OkHttpClient();\n+    httpClient.setProtocols(Arrays.asList(Protocol.HTTP_1_1));\n+    json = new JSON();\n \n         // Set default User-Agent.\n-         setUserAgent(\"Swagger-Codegen/1.0.0/java\");\n-        addDefaultHeader(\"x-aspose-client\", \"java sdk\");\n-        addDefaultHeader(\"x-aspose-client-version\", clientVersion);\n-        setConnectTimeout(5 * 60 * 1000);\n-        setReadTimeout(5 * 60 * 1000);\n-    }\n+    setUserAgent(\"Swagger-Codegen/1.0.0/java\");\n+    addDefaultHeader(\"x-aspose-client\", \"java sdk\");\n+    addDefaultHeader(\"x-aspose-client-version\", clientVersion);\n+    setConnectTimeout(5 * 60 * 1000);\n+    setReadTimeout(5 * 60 * 1000);\n+  }\n \n      /**\n      * Get App Key\n      *\n      * @return App Key\n      */\n-    public String getAppKey() {\n-        return appKey;\n-    }\n+\n+\n+  public String getAppKey() {\n+    return appKey;\n+  }\n \n     /**\n      * Set App Key\n@@ -107,19 +133,21 @@ public class ApiClient {\n      * @param appKey App Key\n      * @return An instance of OkHttpClient\n      */\n-    public ApiClient setAppKey(String appKey) {\n-        this.appKey = appKey;\n-        return this;\n-    }\n+\n+  public ApiClient setAppKey(String appKey) {\n+    this.appKey = appKey;\n+    return this;\n+  }\n \n      /**\n      * Get App Sid\n      *\n      * @return App Sid\n      */\n-    public String getAppSid() {\n-        return appSid;\n-    }\n+\n+  public String getAppSid() {\n+    return appSid;\n+  }\n \n     /**\n      * Set App Sid\n@@ -127,19 +155,21 @@ public class ApiClient {\n      * @param appSid App Sid\n      * @return An instance of OkHttpClient\n      */\n-    public ApiClient setAppSid(String appSid) {\n-        this.appSid = appSid;\n-        return this;\n-    }\n+\n+  public ApiClient setAppSid(String appSid) {\n+    this.appSid = appSid;\n+    return this;\n+  }\n \n     /**\n      * Get ApiVersion\n      *\n      * @return Api Version\n      */\n-    public String getApiVersion() {\n-        return apiVersion;\n-    }\n+\n+  public String getApiVersion() {\n+    return apiVersion;\n+  }\n \n     /**\n      * Set ApiVersion\n@@ -147,10 +177,11 @@ public class ApiClient {\n      * @param apiVersion Api Version\n      * @return An instance of OkHttpClient\n      */\n-    public ApiClient setApiVersion(String apiVersion) {\n-        this.apiVersion = apiVersion;\n-        return this;\n-    }\n+\n+  public ApiClient setApiVersion(String apiVersion) {\n+    this.apiVersion = apiVersion;\n+    return this;\n+  }\n \n \n     /**\n@@ -158,9 +189,10 @@ public class ApiClient {\n      *\n      * @return Base path\n      */\n-    public String getBasePath() {\n-        return basePath;\n-    }\n+\n+  public String getBasePath() {\n+    return basePath;\n+  }\n \n     /**\n      * Set BaseUrl\n@@ -168,11 +200,12 @@ public class ApiClient {\n      * @param baseUrl Base Url\n      * @return An instance of OkHttpClient\n      */\n-    public ApiClient setBaseUrl(String baseUrl) {\n-        this.baseUrl = baseUrl;\n-        this.basePath = baseUrl + \"/\" + this.apiVersion;\n-        return this;\n-    }\n+\n+  public ApiClient setBaseUrl(String baseUrl) {\n+    this.baseUrl = baseUrl;\n+    this.basePath = baseUrl + \"/\" + this.apiVersion;\n+    return this;\n+  }\n \n     /**\n      * Set base path\n@@ -180,20 +213,24 @@ public class ApiClient {\n      * @param basePath Base path of the URL (e.g https://api.aspose.cloud/v1.1\n      * @return An instance of OkHttpClient\n      */\n-    public ApiClient setBasePath(String basePath) {\n-        this.basePath = basePath;\n-        this.baseUrl = basePath.replace(\"/v1.1\", \"\").replace(\"/v1\", \"\").replace(\"/v2\", \"\").replace(\"/v3\", \"\");\n-        return this;\n-    }\n+\n+  public ApiClient setBasePath(String basePath) {\n+    this.basePath = basePath;\n+    this.baseUrl = basePath.replace(\"/v1.1\", \"\").replace(\"/v1\", \"\")\n+                                                .replace(\"/v2\", \"\")\n+                                                .replace(\"/v3\", \"\");\n+    return this;\n+  }\n \n     /**\n      * Get HTTP client\n      *\n      * @return An instance of OkHttpClient\n      */\n-    public OkHttpClient getHttpClient() {\n-        return httpClient;\n-    }\n+\n+  public OkHttpClient getHttpClient() {\n+    return httpClient;\n+  }\n \n     /**\n      * Set HTTP client\n@@ -201,19 +238,21 @@ public class ApiClient {\n      * @param httpClient An instance of OkHttpClient\n      * @return Api Client\n      */\n-    public ApiClient setHttpClient(OkHttpClient httpClient) {\n-        this.httpClient = httpClient;\n-        return this;\n-    }\n+\n+  public ApiClient setHttpClient(OkHttpClient httpClient) {\n+    this.httpClient = httpClient;\n+    return this;\n+  }\n \n     /**\n      * Get JSON\n      *\n      * @return JSON object\n      */\n-    public JSON getJSON() {\n-        return json;\n-    }\n+\n+  public JSON getJSON() {\n+    return json;\n+  }\n \n     /**\n      * Set JSON\n@@ -221,15 +260,16 @@ public class ApiClient {\n      * @param json JSON object\n      * @return Api client\n      */\n-    public ApiClient setJSON(JSON json) {\n-        this.json = json;\n-        return this;\n-    }\n \n-    public ApiClient setLenientOnJson(boolean lenientOnJson) {\n-        this.json.setLenientOnJson(lenientOnJson);\n-        return this;\n-    }\n+  public ApiClient setJSON(JSON json) {\n+    this.json = json;\n+    return this;\n+  }\n+\n+  public ApiClient setLenientOnJson(boolean lenientOnJson) {\n+    this.json.setLenientOnJson(lenientOnJson);\n+    return this;\n+  }\n \n     /**\n      * Set access token for the OAuth2 authentication.\n@@ -237,10 +277,11 @@ public class ApiClient {\n      * @param accessToken Access token\n      * @return An instance of OkHttpClient\n      */\n-    public ApiClient setAccessToken(String accessToken) {\n-        this.accessToken = accessToken;\n-        return this;\n-    }\n+\n+  public ApiClient setAccessToken(String accessToken) {\n+    this.accessToken = accessToken;\n+    return this;\n+  }\n \n     /**\n      * Set refresh token for the OAuth2 authentication.\n@@ -248,10 +289,11 @@ public class ApiClient {\n      * @param refreshToken Access token\n      * @return An instance of OkHttpClient\n      */\n-    public ApiClient setRefreshToken(String refreshToken) {\n-        this.refreshToken = refreshToken;\n-        return this;\n-    }\n+\n+  public ApiClient setRefreshToken(String refreshToken) {\n+    this.refreshToken = refreshToken;\n+    return this;\n+  }\n \n     /**\n      * Set the User-Agent header's value (by adding to the default header map).\n@@ -259,10 +301,11 @@ public class ApiClient {\n      * @param userAgent HTTP request's user agent\n      * @return ApiClient\n      */\n-    public ApiClient setUserAgent(String userAgent) {\n-        addDefaultHeader(\"User-Agent\", userAgent);\n-        return this;\n-    }\n+\n+  public ApiClient setUserAgent(String userAgent) {\n+    addDefaultHeader(\"User-Agent\", userAgent);\n+    return this;\n+  }\n \n     /**\n      * Add a default header.\n@@ -271,19 +314,21 @@ public class ApiClient {\n      * @param value The header's value\n      * @return ApiClient\n      */\n-    public ApiClient addDefaultHeader(String key, String value) {\n-        defaultHeaderMap.put(key, value);\n-        return this;\n-    }\n+\n+  public ApiClient addDefaultHeader(String key,  String value) {\n+    defaultHeaderMap.put(key, value);\n+    return this;\n+  }\n \n     /**\n      * Check that whether debugging is enabled for this API client.\n      *\n      * @return True if debugging is enabled, false otherwise.\n      */\n-    public boolean isDebugging() {\n-        return debugging;\n-    }\n+\n+  public boolean isDebugging() {\n+    return debugging;\n+  }\n \n     /**\n      * Enable/disable debugging for this API client.\n@@ -291,20 +336,21 @@ public class ApiClient {\n      * @param debugging To enable (true) or disable (false) debugging\n      * @return ApiClient\n      */\n-    public ApiClient setDebugging(boolean debugging) {\n-        if (debugging != this.debugging) {\n-            if (debugging) {\n-                loggingInterceptor = new ApiLoggingInterceptor();\n-                httpClient.interceptors().add(loggingInterceptor);\n-            } \n-            else {\n-                httpClient.interceptors().remove(loggingInterceptor);\n-                loggingInterceptor = null;\n-            }\n+\n+  public ApiClient setDebugging(boolean debugging) {\n+    if (debugging != this.debugging) {\n+        if (debugging) {\n+            loggingInterceptor = new ApiLoggingInterceptor();\n+            httpClient.interceptors().add(loggingInterceptor);\n+        }\n+        else {\n+            httpClient.interceptors().remove(loggingInterceptor);\n+            loggingInterceptor = null;\n         }\n-        this.debugging = debugging;\n-        return this;\n     }\n+    this.debugging = debugging;\n+    return this;\n+  }\n \n     /**\n      * The path of temporary folder used to store downloaded files from endpoints\n@@ -314,9 +360,10 @@ public class ApiClient {\n      * @see <a href=\"https://docs.oracle.com/javase/7/docs/api/java/io/File.html#createTempFile\">createTempFile</a>\n      * @return Temporary folder path\n      */\n-    public String getTempFolderPath() {\n-        return tempFolderPath;\n-    }\n+\n+  public String getTempFolderPath() {\n+    return tempFolderPath;\n+  }\n \n     /**\n      * Set the temporary folder path (for downloading files)\n@@ -324,19 +371,21 @@ public class ApiClient {\n      * @param tempFolderPath Temporary folder path\n      * @return ApiClient\n      */\n-    public ApiClient setTempFolderPath(String tempFolderPath) {\n-        this.tempFolderPath = tempFolderPath;\n-        return this;\n-    }\n+\n+  public ApiClient setTempFolderPath(String tempFolderPath) {\n+    this.tempFolderPath = tempFolderPath;\n+    return this;\n+  }\n \n     /**\n      * Get connection timeout (in milliseconds).\n      *\n      * @return Timeout in milliseconds\n      */\n-    public int getConnectTimeout() {\n-        return httpClient.getConnectTimeout();\n-    }\n+\n+  public int getConnectTimeout() {\n+    return httpClient.getConnectTimeout();\n+  }\n \n     /**\n      * Sets the connect timeout (in milliseconds).\n@@ -346,19 +395,21 @@ public class ApiClient {\n      * @param connectionTimeout connection timeout in milliseconds\n      * @return Api client\n      */\n-    public ApiClient setConnectTimeout(int connectionTimeout) {\n-        httpClient.setConnectTimeout(connectionTimeout, TimeUnit.MILLISECONDS);\n-        return this;\n-    }\n+\n+  public ApiClient setConnectTimeout(int connectionTimeout) {\n+    httpClient.setConnectTimeout(connectionTimeout, TimeUnit.MILLISECONDS);\n+    return this;\n+  }\n \n     /**\n      * Get read timeout (in milliseconds).\n      *\n      * @return Timeout in milliseconds\n      */\n-    public int getReadTimeout() {\n-        return httpClient.getReadTimeout();\n-    }\n+\n+  public int getReadTimeout() {\n+    return httpClient.getReadTimeout();\n+  }\n \n     /**\n      * Sets the read timeout (in milliseconds).\n@@ -368,19 +419,21 @@ public class ApiClient {\n      * @param readTimeout read timeout in milliseconds\n      * @return Api client\n      */\n-    public ApiClient setReadTimeout(int readTimeout) {\n-        httpClient.setReadTimeout(readTimeout, TimeUnit.MILLISECONDS);\n-        return this;\n-    }\n+\n+  public ApiClient setReadTimeout(int readTimeout) {\n+    httpClient.setReadTimeout(readTimeout, TimeUnit.MILLISECONDS);\n+    return this;\n+  }\n \n     /**\n      * Get write timeout (in milliseconds).\n      *\n      * @return Timeout in milliseconds\n      */\n-    public int getWriteTimeout() {\n-        return httpClient.getWriteTimeout();\n-    }\n+\n+  public int getWriteTimeout() {\n+    return httpClient.getWriteTimeout();\n+  }\n \n     /**\n      * Sets the write timeout (in milliseconds).\n@@ -390,10 +443,11 @@ public class ApiClient {\n      * @param writeTimeout connection timeout in milliseconds\n      * @return Api client\n      */\n-    public ApiClient setWriteTimeout(int writeTimeout) {\n-        httpClient.setWriteTimeout(writeTimeout, TimeUnit.MILLISECONDS);\n-        return this;\n-    }\n+\n+  public ApiClient setWriteTimeout(int writeTimeout) {\n+    httpClient.setWriteTimeout(writeTimeout, TimeUnit.MILLISECONDS);\n+    return this;\n+  }\n \n     /**\n      * Format the given parameter object into string.\n@@ -401,32 +455,33 @@ public class ApiClient {\n      * @param param Parameter\n      * @return String representation of the parameter\n      */\n-    public String parameterToString(Object param) {\n-        if (param == null) {\n-            return \"\";\n-        } \n-        else if (param instanceof Date || param instanceof OffsetDateTime || param instanceof LocalDate) {\n+\n+  public String parameterToString(Object param) {\n+    if (param == null) {\n+        return \"\";\n+    }\n+    else if (param instanceof Date || param instanceof OffsetDateTime || param instanceof LocalDate) {\n             //Serialize to json string and remove the \" enclosing characters\n-            String jsonStr = json.serialize(param);\n-            return jsonStr.substring(1, jsonStr.length() - 1);\n-        } \n-        else if (param instanceof Collection) {\n-            StringBuilder b = new StringBuilder();\n-            for (Object o : (Collection) param) {\n-                if (b.length() > 0) {\n-                    b.append(\",\");\n-                }\n-                b.append(String.valueOf(o));\n-            }\n-            return b.toString();\n-        } \n-        else if (param instanceof String) {\n-            return String.valueOf(param);\n-        }\n-        else {\n-            return json.serialize(param);\n-        }\n+        String jsonStr = json.serialize(param);\n+        return jsonStr.substring(1, jsonStr.length() - 1);\n+    }\n+    else if (param instanceof Collection) {\n+             StringBuilder b = new StringBuilder();\n+             for (Object o : (Collection) param) {\n+               if (b.length() > 0) {\n+                   b.append(\",\");\n+               }\n+               b.append(String.valueOf(o));\n+             }\n+             return b.toString();\n+         }\n+    else if (param instanceof String) {\n+             return String.valueOf(param);\n+         }\n+    else {\n+             return json.serialize(param);\n     }\n+  }\n \n     /**\n      * Formats the specified query parameter to a list containing a single {@code Pair} object.\n@@ -437,15 +492,15 @@ public class ApiClient {\n      * @param value The value of the parameter.\n      * @return A list containing a single {@code Pair} object.\n      */\n-    public List<Pair> parameterToPair(String name, Object value) {\n-        List<Pair> params = new ArrayList<Pair>();\n \n-        // preconditions\n-        if (name == null || name.isEmpty() || value == null || value instanceof Collection) return params;\n+  public List<Pair> parameterToPair(String name,  Object value) {\n+    List<Pair> params = new ArrayList<Pair>();\n \n-        params.add(new Pair(name, parameterToString(value)));\n-        return params;\n-    }\n+        // preconditions\n+    if (name == null || name.isEmpty() || value == null || value instanceof Collection) return params;\n+    params.add(new Pair(name, parameterToString(value)));\n+    return params;\n+  }\n \n     /**\n      * Formats the specified collection query parameters to a list of {@code Pair} objects.\n@@ -457,47 +512,51 @@ public class ApiClient {\n      * @param value The value of the parameter.\n      * @return A list of {@code Pair} objects.\n      */\n-    public List<Pair> parameterToPairs(String collectionFormat, String name, Collection value) {\n-        List<Pair> params = new ArrayList<Pair>();\n+\n+  public List<Pair> parameterToPairs(String collectionFormat,  String name,  Collection value) {\n+    List<Pair> params = new ArrayList<Pair>();\n \n         // preconditions\n-        if (name == null || name.isEmpty() || value == null || value.isEmpty()) {\n-            return params;\n-        }\n+    if (name == null || name.isEmpty() || value == null || value.isEmpty()) {\n+      return params;\n+    }\n \n         // create the params based on the collection format\n-        if (\"multi\".equals(collectionFormat)) {\n-            for (Object item : value) {\n-                params.add(new Pair(name, escapeString(parameterToString(item))));\n-            }\n-            return params;\n-        }\n+    if (\"multi\"\n+  .equals(collectionFormat)) {\n+      for (Object item : value) {\n+          params.add(new Pair(name, escapeString(parameterToString(item))));\n+      }\n+      return params;\n+    }\n \n         // collectionFormat is assumed to be \"csv\" by default\n-        String delimiter = \",\";\n+\n+    String delimiter = \",\";\n \n         // escape all delimiters except commas, which are URI reserved\n         // characters\n-        if (\"ssv\".equals(collectionFormat)) {\n-            delimiter = escapeString(\" \");\n-        } \n-        else if (\"tsv\".equals(collectionFormat)) {\n-            delimiter = escapeString(\"\\t\");\n-        } \n-        else if (\"pipes\".equals(collectionFormat)) {\n-            delimiter = escapeString(\"|\");\n-        }\n-\n-        StringBuilder sb = new StringBuilder() ;\n-        for (Object item : value) {\n-            sb.append(delimiter);\n-            sb.append(escapeString(parameterToString(item)));\n-        }\n-\n-        params.add(new Pair(name, sb.substring(delimiter.length())));\n-\n-        return params;\n+    if (\"ssv\"\n+  .equals(collectionFormat)) {\n+        delimiter = escapeString(\" \");\n+    }\n+    else if (\"tsv\"\n+.equals(collectionFormat)) {\n+        delimiter = escapeString(\"\\t\");\n     }\n+    else if (\"pipes\"\n+.equals(collectionFormat)) {\n+             delimiter = escapeString(\"|\");\n+         }\n+\n+    StringBuilder sb = new StringBuilder();\n+    for (Object item : value) {\n+        sb.append(delimiter);\n+        sb.append(escapeString(parameterToString(item)));\n+    }\n+    params.add(new Pair(name, sb.substring(delimiter.length())));\n+    return params;\n+  }\n \n     /**\n      * Sanitize filename by removing path.\n@@ -506,9 +565,10 @@ public class ApiClient {\n      * @param filename The filename to be sanitized\n      * @return The sanitized filename\n      */\n-    public String sanitizeFilename(String filename) {\n-        return filename.replaceAll(\".*[/\\\\\\\\]\", \"\");\n-    }\n+\n+  public String sanitizeFilename(String filename) {\n+    return filename.replaceAll(\".*[/\\\\\\\\]\", \"\");\n+  }\n \n     /**\n      * Check if the given MIME is a JSON MIME.\n@@ -521,10 +581,12 @@ public class ApiClient {\n      * @param mime MIME (Multipurpose Internet Mail Extensions)\n      * @return True if the given MIME is JSON, false otherwise.\n      */\n-    public boolean isJsonMime(String mime) {\n-      String jsonMime = \"(?i)^(application/json|[^;/ \\t]+/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$\";\n-      return mime != null && (mime.matches(jsonMime) || mime.equals(\"*/*\"));\n-    }\n+\n+  public boolean isJsonMime(String mime) {\n+    String jsonMime = \"(?i)^(application/json|[^;/ \\t]+/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$\";\n+    return mime != null &&\n+    (mime.matches(jsonMime) || mime.equals(\"*/*\"));\n+  }\n \n     /**\n      * Select the Accept header's value from the given accepts array:\n@@ -535,17 +597,18 @@ public class ApiClient {\n      * @return The Accept header to use. If the given array is empty,\n      *   null will be returned (not to set the Accept header explicitly).\n      */\n-    public String selectHeaderAccept(String[] accepts) {\n-        if (accepts.length == 0) {\n-            return null;\n-        }\n-        for (String accept : accepts) {\n-            if (isJsonMime(accept)) {\n-                return accept;\n-            }\n-        }\n-        return StringUtil.join(accepts, \",\");\n+\n+  public String selectHeaderAccept(String[] accepts) {\n+    if (accepts.length == 0) {\n+      return null;\n     }\n+    for (String accept : accepts) {\n+      if (isJsonMime(accept)) {\n+        return accept;\n+      }\n+    }\n+    return StringUtil.join(accepts, \",\");\n+  }\n \n     /**\n      * Select the Content-Type header's value from the given array:\n@@ -556,17 +619,18 @@ public class ApiClient {\n      * @return The Content-Type header to use. If the given array is empty,\n      *   or matches \"any\", JSON will be used.\n      */\n-    public String selectHeaderContentType(String[] contentTypes) {\n-        if (contentTypes.length == 0 || contentTypes[0].equals(\"*/*\")) {\n-             return \"application/json\";\n-        }\n-        for (String contentType : contentTypes) {\n-            if (isJsonMime(contentType)) {\n-                return contentType;\n-            }\n-        }\n-        return contentTypes[0];\n+\n+  public String selectHeaderContentType(String[] contentTypes) {\n+    if (contentTypes.length == 0 || contentTypes[0].equals(\"*/*\")) {\n+      return \"application/json\";\n+    }\n+    for (String contentType : contentTypes) {\n+      if (isJsonMime(contentType)) {\n+        return contentType;\n+      }\n     }\n+    return contentTypes[0];\n+  }\n \n     /**\n      * Escape the given string to be used as URL query value.\n@@ -574,14 +638,15 @@ public class ApiClient {\n      * @param str String to be escaped\n      * @return Escaped string\n      */\n-    public String escapeString(String str) {\n-        try {\n-            return URLEncoder.encode(str, \"utf8\").replaceAll(\"\\\\+\", \"%20\");\n-        } \n-        catch (UnsupportedEncodingException e) {\n-            return str;\n-        }\n+\n+  public String escapeString(String str) {\n+    try {\n+        return URLEncoder.encode(str, \"utf8\").replaceAll(\"\\\\+\", \"%20\");\n+    }\n+    catch (UnsupportedEncodingException e) {\n+        return str;\n     }\n+  }\n \n     /**\n      * Deserialize response body to Java object, according to the return type and\n@@ -594,61 +659,61 @@ public class ApiClient {\n      * @throws ApiException If fail to deserialize response body, i.e. cannot read response body\n      *   or the Content-Type of the response is not supported.\n      */\n-    @SuppressWarnings(\"unchecked\")\n-    public <T> T deserialize(Response response, Type returnType) throws ApiException {\n-        if (response == null || returnType == null) {\n-            return null;\n-        }\n \n-        if (\"byte[]\".equals(returnType.toString())) {\n-            // Handle binary response (byte array).\n-            try {\n-                return (T) response.body().bytes();\n-            } \n-            catch (IOException e) {\n-                throw new ApiException(e);\n-            }\n-        } \n-        else if (returnType.equals(File.class)) {\n-            // Handle file downloading.\n-            return (T) downloadFileFromResponse(response);\n-        }\n \n-        String respBody;\n+  @SuppressWarnings(\"unchecked\")\n+  public <T> T deserialize(Response response,  Type returnType) throws ApiException {\n+    if (response == null || returnType == null) {\n+      return null;\n+    }\n+    if (\"byte[]\"\n+  .equals(returnType.toString())) {\n+            // Handle binary response (byte array).\n         try {\n-            if (response.body() != null)\n-                respBody = response.body().string();\n-            else\n-                respBody = null;\n-        } \n+            return (T) response.body().bytes();\n+        }\n         catch (IOException e) {\n             throw new ApiException(e);\n         }\n+    }\n+    else if (returnType.equals(File.class)) {\n+            // Handle file downloading.\n+           return (T) downloadFileFromResponse(response);\n+         }\n \n-        if (respBody == null || \"\".equals(respBody)) {\n-            return null;\n-        }\n+    String respBody;\n+    try {\n+        if (response.body() != null) respBody = response.body().string();\n+        else respBody = null;\n+    }\n+    catch (IOException e) {\n+        throw new ApiException(e);\n+    }\n+    if (respBody == null || \"\"\n+  .equals(respBody)) {\n+      return null;\n+    }\n \n-        String contentType = response.headers().get(\"Content-Type\");\n-        if (contentType == null) {\n+    String contentType = response.headers().get(\"Content-Type\");\n+    if (contentType == null) {\n             // ensuring a default content type\n-            contentType = \"application/json\";\n-        }\n-        if (isJsonMime(contentType)) {\n-            return json.deserialize(respBody, returnType);\n-        } \n-        else if (returnType.equals(String.class)) {\n+        contentType = \"application/json\";\n+    }\n+    if (isJsonMime(contentType)) {\n+        return json.deserialize(respBody, returnType);\n+    }\n+    else if (returnType.equals(String.class)) {\n             // Expecting string, return the raw response body.\n-            return (T) respBody;\n-        } \n-        else {\n-            throw new ApiException(\n-                    \"Content type \\\"\" + contentType + \"\\\" is not supported for type: \" + returnType,\n-                    response.code(),\n-                    response.headers().toMultimap(),\n-                    respBody);\n-        }\n+        return (T) respBody;\n+    }\n+    else {\n+             throw new ApiException(\n+                     \"Content type \\\"\" + contentType + \"\\\" is not supported for type: \" + returnType,\n+                     response.code(),\n+                     response.headers().toMultimap(),\n+                     respBody);\n     }\n+  }\n \n     /**\n      * Serialize the given Java object into request body according to the object's\n@@ -659,29 +724,30 @@ public class ApiClient {\n      * @return The serialized request body\n      * @throws ApiException If fail to serialize the given object\n      */\n-    public RequestBody serialize(Object obj, String contentType) throws ApiException {\n-        if (obj instanceof byte[]) {\n+\n+  public RequestBody serialize(Object obj,  String contentType) throws ApiException {\n+    if (obj instanceof byte[]) {\n             // Binary (byte array) body parameter support.\n-            return RequestBody.create(MediaType.parse(contentType), (byte[]) obj);\n-        } \n-        else if (obj instanceof File) {\n+        return RequestBody.create(MediaType.parse(contentType), (byte[]) obj);\n+    }\n+    else if (obj instanceof File) {\n             // File body parameter support.\n-            return RequestBody.create(MediaType.parse(contentType), (File) obj);\n-        } \n-        else if (isJsonMime(contentType)) {\n-            String content;\n-            if (obj != null) {\n-                content = json.serialize(obj);\n-            } \n-            else {\n-                content = null;\n-            }\n-            return RequestBody.create(MediaType.parse(contentType), content);\n-        } \n-        else {\n-            throw new ApiException(\"Content type \\\"\" + contentType + \"\\\" is not supported\");\n-        }\n+        return RequestBody.create(MediaType.parse(contentType), (File) obj);\n+    }\n+    else if (isJsonMime(contentType)) {\n+             String content;\n+             if (obj != null) {\n+                 content = json.serialize(obj);\n+             }\n+             else {\n+                 content = null;\n+             }\n+             return RequestBody.create(MediaType.parse(contentType), content);\n+         }\n+    else {\n+             throw new ApiException(\"Content type \\\"\" + contentType + \"\\\" is not supported\");\n     }\n+  }\n \n     /**\n      * Download file from the given response.\n@@ -690,18 +756,19 @@ public class ApiClient {\n      * @throws ApiException If fail to read file content from response and write to disk\n      * @return Downloaded file\n      */\n-    public File downloadFileFromResponse(Response response) throws ApiException {\n-        try {\n-            File file = prepareDownloadFile(response);\n-            BufferedSink sink = Okio.buffer(Okio.sink(file));\n-            sink.writeAll(response.body().source());\n-            sink.close();\n-            return file;\n-        } \n-        catch (IOException e) {\n-            throw new ApiException(e);\n-        }\n+\n+  public File downloadFileFromResponse(Response response) throws ApiException {\n+    try {\n+        File file = prepareDownloadFile(response);\n+        BufferedSink sink = Okio.buffer(Okio.sink(file));\n+        sink.writeAll(response.body().source());\n+        sink.close();\n+        return file;\n+    }\n+    catch (IOException e) {\n+        throw new ApiException(e);\n     }\n+  }\n \n     /**\n      * Prepare file for download\n@@ -710,43 +777,42 @@ public class ApiClient {\n      * @throws IOException If fail to prepare file for download\n      * @return Prepared file for the download\n      */\n-    public File prepareDownloadFile(Response response) throws IOException {\n-        String filename = null;\n-        String contentDisposition = response.header(\"Content-Disposition\");\n-        if (contentDisposition != null && !\"\".equals(contentDisposition)) {\n+\n+  public File prepareDownloadFile(Response response) throws IOException {\n+    String filename = null;\n+    String contentDisposition = response.header(\"Content-Disposition\");\n+    if (contentDisposition != null &&\n+    !\"\"\n+.equals(contentDisposition)) {\n             // Get filename from the Content-Disposition header.\n-            Pattern pattern = Pattern.compile(\"filename=['\\\"]?([^'\\\"\\\\s]+)['\\\"]?\");\n-            Matcher matcher = pattern.matcher(contentDisposition);\n-            if (matcher.find()) {\n-                filename = sanitizeFilename(matcher.group(1));\n-            }\n+        Pattern pattern = Pattern.compile(\"filename=['\\\"]?([^'\\\"\\\\s]+)['\\\"]?\");\n+        Matcher matcher = pattern.matcher(contentDisposition);\n+        if (matcher.find()) {\n+            filename = sanitizeFilename(matcher.group(1));\n         }\n+    }\n \n-        String prefix = null;\n-        String suffix = null;\n-        if (filename == null) {\n-            prefix = \"download-\";\n-            suffix = \"\";\n-        } \n+    String prefix = null;\n+    String suffix = null;\n+    if (filename == null) {\n+        prefix = \"download-\";\n+        suffix = \"\";\n+    }\n+    else {\n+        int pos = filename.lastIndexOf(\".\");\n+        if (pos == -1) {\n+            prefix = filename + \"-\";\n+        }\n         else {\n-            int pos = filename.lastIndexOf(\".\");\n-            if (pos == -1) {\n-                prefix = filename + \"-\";\n-            } \n-            else {\n-                prefix = filename.substring(0, pos) + \"-\";\n-                suffix = filename.substring(pos);\n-            }\n-            // File.createTempFile requires the prefix to be at least three characters long\n-            if (prefix.length() < 3)\n-                prefix = \"download-\";\n+            prefix = filename.substring(0, pos) + \"-\";\n+            suffix = filename.substring(pos);\n         }\n-\n-        if (tempFolderPath == null)\n-            return File.createTempFile(prefix, suffix);\n-        else\n-            return File.createTempFile(prefix, suffix, new File(tempFolderPath));\n+            // File.createTempFile requires the prefix to be at least three characters long\n+        if (prefix.length() < 3) prefix = \"download-\";\n     }\n+    if (tempFolderPath == null) return File.createTempFile(prefix, suffix);\n+    else return File.createTempFile(prefix, suffix, new File(tempFolderPath));\n+  }\n \n     /**\n      * {@link #execute(Call, Type)}\n@@ -756,9 +822,10 @@ public class ApiClient {\n      * @throws ApiException If fail to execute the call\n      * @return ApiResponse&lt;T&gt;\n      */\n-    public <T> ApiResponse<T> execute(Call call) throws ApiException {\n-        return execute(call, null);\n-    }\n+\n+  public <T> ApiResponse<T> execute(Call call) throws ApiException {\n+    return execute(call, null);\n+  }\n \n     /**\n      * Execute HTTP call and deserialize the HTTP response body into the given return type.\n@@ -771,16 +838,17 @@ public class ApiClient {\n      *   when returnType is null.\n      * @throws ApiException If fail to execute the call\n      */\n-    public <T> ApiResponse<T> execute(Call call, Type returnType) throws ApiException {\n-        try {\n-            Response response = call.execute();\n-            T data = handleResponse(response, returnType);\n-            return new ApiResponse<T>(response.code(), response.headers().toMultimap(), data);\n-        } \n-        catch (IOException e) {\n-            throw new ApiException(e);\n-        }\n+\n+  public <T> ApiResponse<T> execute(Call call,  Type returnType) throws ApiException {\n+    try {\n+        Response response = call.execute();\n+        T data = handleResponse(response, returnType);\n+        return new ApiResponse<T>(response.code(), response.headers().toMultimap(), data);\n     }\n+    catch (IOException e) {\n+        throw new ApiException(e);\n+    }\n+  }\n \n     /**\n      * {@link #executeAsync(Call, Type, ApiCallback)}\n@@ -789,9 +857,10 @@ public class ApiClient {\n      * @param call An instance of the Call object\n      * @param callback ApiCallback&lt;T&gt;\n      */\n-    public <T> void executeAsync(Call call, ApiCallback<T> callback) {\n-        executeAsync(call, null, callback);\n-    }\n+\n+  public <T> void executeAsync(Call call,  ApiCallback<T> callback) {\n+    executeAsync(call, null, callback);\n+  }\n \n     /**\n      * Execute HTTP call asynchronously.\n@@ -802,28 +871,31 @@ public class ApiClient {\n      * @param returnType Return type\n      * @param callback ApiCallback\n      */\n-    @SuppressWarnings(\"unchecked\")\n-    public <T> void executeAsync(Call call, final Type returnType, final ApiCallback<T> callback) {\n-        call.enqueue(new Callback() {\n-            @Override\n-            public void onFailure(Request request, IOException e) {\n-                callback.onFailure(new ApiException(e), 0, null);\n-            }\n \n-            @Override\n-            public void onResponse(Response response) throws IOException {\n-                T result;\n-                try {\n-                    result = (T) handleResponse(response, returnType);\n-                } \n-                catch (ApiException e) {\n-                    callback.onFailure(e, response.code(), response.headers().toMultimap());\n-                    return;\n-                }\n-                callback.onSuccess(result, response.code(), response.headers().toMultimap());\n-            }\n-        });\n-    }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public <T> void executeAsync(Call call, final Type returnType, final ApiCallback<T> callback) {\n+    call.enqueue(new Callback() {\n+      @Override\n+      public void onFailure(Request request,  IOException e) {\n+        callback.onFailure(new ApiException(e), 0, null);\n+      }\n+\n+\n+      @Override\n+      public void onResponse(Response response) throws IOException {\n+        T result;\n+        try {\n+            result = (T) handleResponse(response, returnType);\n+        }\n+        catch (ApiException e) {\n+            callback.onFailure(e, response.code(), response.headers().toMultimap());\n+            return;\n+        }\n+        callback.onSuccess(result, response.code(), response.headers().toMultimap());\n+      }\n+                 });\n+  }\n \n     /**\n      * Handle the given response, return the deserialized object when the response is successful.\n@@ -835,38 +907,39 @@ public class ApiClient {\n      *   fail to deserialize the response body\n      * @return Type\n      */\n-    public <T> T handleResponse(Response response, Type returnType) throws ApiException {\n-        if (response.isSuccessful()) {\n-            if (returnType == null || response.code() == 204) {\n+\n+  public <T> T handleResponse(Response response,  Type returnType) throws ApiException {\n+    if (response.isSuccessful()) {\n+        if (returnType == null || response.code() == 204) {\n                 // returning null if the returnType is not defined,\n                 // or the status code is 204 (No Content)\n-                if (response.body() != null) {\n-                    try {\n-                        response.body().close();\n-                    } \n-                    catch (IOException e) {\n-                        throw new ApiException(response.message(), e, response.code(), response.headers().toMultimap());\n-                    }\n-                }\n-                return null;\n-            } \n-            else {\n-                return deserialize(response, returnType);\n-            }\n-        } \n-        else {\n-            String respBody = null;\n             if (response.body() != null) {\n-                try {\n-                    respBody = response.body().string();\n-                } \n-                catch (IOException e) {\n-                    throw new ApiException(response.message(), e, response.code(), response.headers().toMultimap());\n-                }\n+              try {\n+                  response.body().close();\n+              }\n+              catch (IOException e) {\n+                  throw new ApiException(response.message(), e, response.code(), response.headers().toMultimap());\n+              }\n             }\n-            throw new ApiException(response.message(), response.code(), response.headers().toMultimap(), respBody);\n+            return null;\n+        }\n+        else {\n+            return deserialize(response, returnType);\n         }\n     }\n+    else {\n+        String respBody = null;\n+        if (response.body() != null) {\n+          try {\n+              respBody = response.body().string();\n+          }\n+          catch (IOException e) {\n+              throw new ApiException(response.message(), e, response.code(), response.headers().toMultimap());\n+          }\n+        }\n+        throw new ApiException(response.message(), response.code(), response.headers().toMultimap(), respBody);\n+    }\n+  }\n \n     /**\n      * Build HTTP call with the given options.\n@@ -884,11 +957,11 @@ public class ApiClient {\n      * @throws ApiException If fail to serialize the request body object\n      * @throws IOException If fail to serialize the request body object\n      */\n-    public Call buildCall(String path, String method, List<Pair> queryParams, List<Pair> collectionQueryParams, Object body, Map<String, String> headerParams, Map<String, Object> formParams, String[] authNames, ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {\n-        Request request = buildRequest(path, method, queryParams, collectionQueryParams, body, headerParams, formParams, authNames, progressRequestListener);\n \n-        return httpClient.newCall(request);\n-    }\n+  public Call buildCall(String path,  String method,  List<Pair> queryParams,  List<Pair> collectionQueryParams,  Object body,  Map<String, String> headerParams,  Map<String, Object> formParams,  String[] authNames,  ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {\n+    Request request = buildRequest(path, method, queryParams, collectionQueryParams, body, headerParams, formParams, authNames, progressRequestListener);\n+    return httpClient.newCall(request);\n+  }\n \n     /**\n      * Build an HTTP request with the given options.\n@@ -906,54 +979,59 @@ public class ApiClient {\n      * @throws ApiException If fail to serialize the request body object\n      * @throws IOException If fail to serialize the request body object\n      */\n-    public Request buildRequest(String path, String method, List<Pair> queryParams, List<Pair> collectionQueryParams, Object body, Map<String, String> headerParams, Map<String, Object> formParams, String[] authNames, ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {\n-        addOAuthAuthentication(headerParams);\n-        final String url = buildUrl(path, queryParams, collectionQueryParams);\n-        final Request.Builder reqBuilder = new Request.Builder().url(url);\n-        processHeaderParams(headerParams, reqBuilder);\n \n-        String contentType = (String) headerParams.get(\"Content-Type\");\n+  public Request buildRequest(String path,  String method,  List<Pair> queryParams,  List<Pair> collectionQueryParams,  Object body,  Map<String, String> headerParams,  Map<String, Object> formParams,  String[] authNames,  ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {\n+    addOAuthAuthentication(headerParams);\n+\n+    final String url = buildUrl(path, queryParams, collectionQueryParams);\n+    final Request.Builder reqBuilder = new Request.Builder()\n+         .url(url);\n+    processHeaderParams(headerParams, reqBuilder);\n+\n+    String contentType = (String) headerParams.get(\"Content-Type\");\n         // ensuring a default content type\n-        if (contentType == null) {\n-            contentType = \"application/json\";\n-        }\n+    if (contentType == null) {\n+        contentType = \"application/json\";\n+    }\n \n-        RequestBody reqBody;\n-        if (!HttpMethod.permitsRequestBody(method)) {\n-            reqBody = null;\n-        } \n-        else if (\"application/x-www-form-urlencoded\".equals(contentType)) {\n-            reqBody = buildRequestBodyFormEncoding(formParams);\n-        } \n-        else if (\"multipart/form-data\".equals(contentType)) {\n-            reqBody = buildRequestBodyMultipart(formParams);\n-        } \n-        else if (body == null) {\n-            if (\"DELETE\".equals(method)) {\n+    RequestBody reqBody;\n+    if (!HttpMethod.permitsRequestBody(method)) {\n+        reqBody = null;\n+    }\n+    else if (\"application/x-www-form-urlencoded\"\n+.equals(contentType)) {\n+        reqBody = buildRequestBodyFormEncoding(formParams);\n+    }\n+    else if (\"multipart/form-data\"\n+.equals(contentType)) {\n+             reqBody = buildRequestBodyMultipart(formParams);\n+         }\n+    else if (body == null) {\n+             if (\"DELETE\"\n+            .equals(method)) {\n                 // allow calling DELETE without sending a request body\n-                reqBody = null;\n-            } \n-            else {\n+                 reqBody = null;\n+             }\n+             else {\n                 // use an empty request body (for POST, PUT and PATCH)\n-                reqBody = RequestBody.create(MediaType.parse(contentType), \"\");\n-            }\n-        } \n-        else {\n-            reqBody = serialize(body, contentType);\n-        }\n-\n-        Request request = null;\n-\n-        if (progressRequestListener != null && reqBody != null) {\n-            ProgressRequestBody progressRequestBody = new ProgressRequestBody(reqBody, progressRequestListener);\n-            request = reqBuilder.method(method, progressRequestBody).build();\n-        } \n-        else {\n-            request = reqBuilder.method(method, reqBody).build();\n-        }\n+                 reqBody = RequestBody.create(MediaType.parse(contentType), \"\");\n+             }\n+         }\n+    else {\n+             reqBody = serialize(body, contentType);\n+    }\n \n-        return request;\n+    Request request = null;\n+    if (progressRequestListener != null &&\n+    reqBody != null) {\n+        ProgressRequestBody progressRequestBody = new ProgressRequestBody(reqBody, progressRequestListener);\n+        request = reqBuilder.method(method, progressRequestBody).build();\n+    }\n+    else {\n+        request = reqBuilder.method(method, reqBody).build();\n     }\n+    return request;\n+  }\n \n     /**\n      * Build full URL by concatenating base path, the given sub path and query parameters.\n@@ -963,48 +1041,51 @@ public class ApiClient {\n      * @param collectionQueryParams The collection query parameters\n      * @return The full URL\n      */\n-    public String buildUrl(String path, List<Pair> queryParams, List<Pair> collectionQueryParams) {\n-        final StringBuilder url = new StringBuilder();\n-        url.append(basePath).append(path);\n \n-        if (queryParams != null && !queryParams.isEmpty()) {\n+  public String buildUrl(String path,  List<Pair> queryParams,  List<Pair> collectionQueryParams) {\n+    final StringBuilder url = new StringBuilder();\n+    url.append(basePath).append(path);\n+\n+    if (queryParams != null &&\n+    !queryParams.isEmpty()) {\n             // support (constant) query string in `path`, e.g. \"/posts?draft=1\"\n-            String prefix = path.contains(\"?\") ? \"&\" : \"?\";\n-            for (Pair param : queryParams) {\n-                if (param.getValue() != null) {\n-                    if (prefix != null) {\n-                        url.append(prefix);\n-                        prefix = null;\n-                    } \n-                    else {\n-                        url.append(\"&\");\n-                    }\n-                    String value = parameterToString(param.getValue());\n-                    url.append(escapeString(param.getName())).append(\"=\").append(escapeString(value));\n-                }\n-            }\n+        String prefix = path.contains(\"?\") ? \"&\" : \"?\";\n+        for (Pair param : queryParams) {\n+          if (param.getValue() != null) {\n+              if (prefix != null) {\n+                  url.append(prefix);\n+                  prefix = null;\n+              }\n+              else {\n+                  url.append(\"&\");\n+              }\n+\n+              String value = parameterToString(param.getValue());\n+              url.append(escapeString(param.getName())).append(\"=\").append(escapeString(value));\n+          }\n         }\n-\n-        if (collectionQueryParams != null && !collectionQueryParams.isEmpty()) {\n-            String prefix = url.toString().contains(\"?\") ? \"&\" : \"?\";\n-            for (Pair param : collectionQueryParams) {\n-                if (param.getValue() != null) {\n-                    if (prefix != null) {\n-                        url.append(prefix);\n-                        prefix = null;\n-                    } \n-                    else {\n-                        url.append(\"&\");\n-                    }\n-                    String value = parameterToString(param.getValue());\n+    }\n+    if (collectionQueryParams != null &&\n+    !collectionQueryParams.isEmpty()) {\n+        String prefix = url.toString().contains(\"?\") ? \"&\" : \"?\";\n+        for (Pair param : collectionQueryParams) {\n+          if (param.getValue() != null) {\n+              if (prefix != null) {\n+                  url.append(prefix);\n+                  prefix = null;\n+              }\n+              else {\n+                  url.append(\"&\");\n+              }\n+\n+              String value = parameterToString(param.getValue());\n                     // collection query parameter value already escaped as part of parameterToPairs\n-                    url.append(escapeString(param.getName())).append(\"=\").append(value);\n-                }\n-            }\n+              url.append(escapeString(param.getName())).append(\"=\").append(value);\n+          }\n         }\n-\n-        return url.toString();\n     }\n+    return url.toString();\n+  }\n \n     /**\n      * Set header parameters to the request builder, including default headers.\n@@ -1012,16 +1093,17 @@ public class ApiClient {\n      * @param headerParams Header parameters in the ofrm of Map\n      * @param reqBuilder Reqeust.Builder\n      */\n-    public void processHeaderParams(Map<String, String> headerParams, Request.Builder reqBuilder) {\n-        for (Entry<String, String> param : headerParams.entrySet()) {\n-            reqBuilder.header(param.getKey(), parameterToString(param.getValue()));\n-        }\n-        for (Entry<String, String> header : defaultHeaderMap.entrySet()) {\n-            if (!headerParams.containsKey(header.getKey())) {\n-                reqBuilder.header(header.getKey(), parameterToString(header.getValue()));\n-            }\n-        }\n+\n+  public void processHeaderParams(Map<String, String> headerParams,  Request.Builder reqBuilder) {\n+    for (Entry<String, String> param : headerParams.entrySet()) {\n+        reqBuilder.header(param.getKey(), parameterToString(param.getValue()));\n     }\n+    for (Entry<String, String> header : defaultHeaderMap.entrySet()) {\n+      if (!headerParams.containsKey(header.getKey())) {\n+          reqBuilder.header(header.getKey(), parameterToString(header.getValue()));\n+      }\n+    }\n+  }\n \n     /**\n      * Build a form-encoding request body with the given form parameters.\n@@ -1029,13 +1111,14 @@ public class ApiClient {\n      * @param formParams Form parameters in the form of Map\n      * @return RequestBody\n      */\n-    public RequestBody buildRequestBodyFormEncoding(Map<String, Object> formParams) {\n-        FormEncodingBuilder formBuilder  = new FormEncodingBuilder();\n-        for (Entry<String, Object> param : formParams.entrySet()) {\n-            formBuilder.add(param.getKey(), parameterToString(param.getValue()));\n-        }\n-        return formBuilder.build();\n+\n+  public RequestBody buildRequestBodyFormEncoding(Map<String, Object> formParams) {\n+    FormEncodingBuilder formBuilder = new FormEncodingBuilder();\n+    for (Entry<String, Object> param : formParams.entrySet()) {\n+        formBuilder.add(param.getKey(), parameterToString(param.getValue()));\n     }\n+    return formBuilder.build();\n+  }\n \n     /**\n      * Build a multipart (file uploading) request body with the given form parameters,\n@@ -1045,27 +1128,30 @@ public class ApiClient {\n      * @throws IOException If fail to serialize the request body object\n      * @return RequestBody\n      */\n-    public RequestBody buildRequestBodyMultipart(Map<String, Object> formParams) throws IOException {\n-        MultipartBuilder mpBuilder = new MultipartBuilder().type(MultipartBuilder.FORM);\n-        if (formParams.isEmpty()) {\n-            Headers partHeaders = Headers.of(\"Content-Disposition\", \"form-data\");\n-            mpBuilder.addPart(partHeaders, RequestBody.create(MediaType.parse(\"none\"), new byte[] {}));\n-        }\n-        else {\n-            for (Entry<String, Object> param : formParams.entrySet()) {\n-                if (param.getValue() instanceof byte[]) {\n-                    byte[] file = (byte[]) param.getValue();\n-                    Headers partHeaders = Headers.of(\"Content-Disposition\", \"form-data; name=\\\"\" + param.getKey() + \"\\\"; filename=\\\"\" + param.getKey() + \"\\\"\");\n-                    MediaType mediaType = MediaType.parse(guessContentTypeFromFile(file));\n-                    mpBuilder.addPart(partHeaders, RequestBody.create(mediaType, file));\n-                } else {\n-                    Headers partHeaders = Headers.of(\"Content-Disposition\", \"form-data; name=\\\"\" + param.getKey() + \"\\\"\");\n-                    mpBuilder.addPart(partHeaders, RequestBody.create(null, parameterToString(param.getValue())));\n-                }\n-            }\n+\n+  public RequestBody buildRequestBodyMultipart(Map<String, Object> formParams) throws IOException {\n+    MultipartBuilder mpBuilder = new MultipartBuilder()\n+         .type(MultipartBuilder.FORM);\n+    if (formParams.isEmpty()) {\n+        Headers partHeaders = Headers.of(\"Content-Disposition\", \"form-data\");\n+        mpBuilder.addPart(partHeaders, RequestBody.create(MediaType.parse(\"none\"), new byte[] {  }));\n+    }\n+    else {\n+        for (Entry<String, Object> param : formParams.entrySet()) {\n+          if (param.getValue() instanceof byte[]) {\n+              byte[] file = (byte[]) param.getValue();\n+              Headers partHeaders = Headers.of(\"Content-Disposition\", \"form-data; name=\\\"\" + param.getKey() + \"\\\"; filename=\\\"\" + param.getKey() + \"\\\"\");\n+              MediaType mediaType = MediaType.parse(guessContentTypeFromFile(file));\n+              mpBuilder.addPart(partHeaders, RequestBody.create(mediaType, file));\n+          }\n+          else {\n+              Headers partHeaders = Headers.of(\"Content-Disposition\", \"form-data; name=\\\"\" + param.getKey() + \"\\\"\");\n+              mpBuilder.addPart(partHeaders, RequestBody.create(null, parameterToString(param.getValue())));\n+          }\n         }\n-        return mpBuilder.build();\n     }\n+    return mpBuilder.build();\n+  }\n \n     /**\n      * Guess Content-Type header from the given file (defaults to \"application/octet-stream\").\n@@ -1074,61 +1160,64 @@ public class ApiClient {\n      * @return The guessed Content-Type\n      * @throws IOException If fail to serialize the request body object\n      */\n-    public String guessContentTypeFromFile(byte[] file) throws IOException {\n-        String contentType = URLConnection.guessContentTypeFromStream(new ByteArrayInputStream(file));\n-        if (contentType == null) {\n-            return \"application/octet-stream\";\n-        } \n-        else {\n-            return contentType;\n-        }\n+\n+  public String guessContentTypeFromFile(byte[] file) throws IOException {\n+    String contentType = URLConnection.guessContentTypeFromStream(new ByteArrayInputStream(file));\n+    if (contentType == null) {\n+        return \"application/octet-stream\";\n+    }\n+    else {\n+        return contentType;\n     }\n+  }\n \n      /**\n      * Request OAuth token\n      @throws ApiException If authorization is failed\n      */\n-    public void requestToken() throws ApiException {\n-        try {\n-            RequestBody requestBody = new FormEncodingBuilder()\n-                    .addEncoded(\"grant_type\", \"client_credentials\")\n-                    .addEncoded(\"client_id\", getAppSid())\n-                    .addEncoded(\"client_secret\", getAppKey())\n-                    .build();\n-\n-            String url = baseUrl + \"/connect/token\";\n-            Request request = new Request.Builder()\n-                    .url(url)\n-                    .post(requestBody)\n-                    .addHeader(\"Content-Type\", \" application/x-www-form-urlencoded\")\n-                    .build();\n-\n-            Response response = httpClient.newCall(request).execute();\n-            GetAccessTokenResult result = json.deserialize(response.body().string(), GetAccessTokenResult.class);\n-            setAccessToken(result.access_token);\n-        }\n-        catch (Exception ex) {\n-            throw new ApiException(ex);\n-        }\n+\n+  public void requestToken() throws ApiException {\n+    try {\n+        RequestBody requestBody = new FormEncodingBuilder()\n+.addEncoded(\"grant_type\", \"client_credentials\")\n+.addEncoded(\"client_id\", getAppSid())\n+.addEncoded(\"client_secret\", getAppKey())\n+.build();\n+        String url = baseUrl + \"/connect/token\";\n+        Request request = new Request.Builder()\n+.url(url)\n+.post(requestBody)\n+.addHeader(\"Content-Type\", \" application/x-www-form-urlencoded\")\n+.build();\n+        Response response = httpClient.newCall(request).execute();\n+        GetAccessTokenResult result = json.deserialize(response.body().string(), GetAccessTokenResult.class);\n+        setAccessToken(result.access_token);\n     }\n+    catch (Exception ex) {\n+        throw new ApiException(ex);\n+    }\n+  }\n \n      /**\n      * Add OAuth2 header\n      *\n      * @param headerParams Map of request headers\n      */\n-    private void addOAuthAuthentication(Map<String, String> headerParams) throws ApiException {\n-        if (null == accessToken) {\n-            requestToken();\n-        }\n-        headerParams.put(\"Authorization\", \"Bearer \" + accessToken);\n+\n+  private void addOAuthAuthentication(Map<String, String> headerParams) throws ApiException {\n+    if (null == accessToken) {\n+        requestToken();\n     }\n+    headerParams.put(\"Authorization\", \"Bearer \" + accessToken);\n+  }\n \n \n     /**\n     * GetAccessTokenResult class\n     */\n-    private class GetAccessTokenResult {\n-        public String access_token;\n-    }\n-}\n+\n+  private class GetAccessTokenResult {\n+\n+    public String access_token;\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 787
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/2/ApiClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/2/ApiClient.java\nindex 585a15d213e..809e848c3ca 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/2/ApiClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/2/ApiClient.java\n@@ -1058,7 +1058,8 @@ public class ApiClient {\n                     Headers partHeaders = Headers.of(\"Content-Disposition\", \"form-data; name=\\\"\" + param.getKey() + \"\\\"; filename=\\\"\" + param.getKey() + \"\\\"\");\n                     MediaType mediaType = MediaType.parse(guessContentTypeFromFile(file));\n                     mpBuilder.addPart(partHeaders, RequestBody.create(mediaType, file));\n-                } else {\n+                }\n+                else {\n                     Headers partHeaders = Headers.of(\"Content-Disposition\", \"form-data; name=\\\"\" + param.getKey() + \"\\\"\");\n                     mpBuilder.addPart(partHeaders, RequestBody.create(null, parameterToString(param.getValue())));\n                 }\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1060",
                    "column": "88",
                    "severity": "error",
                    "message": "';' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "1060",
                    "column": "89",
                    "severity": "error",
                    "message": "'}' at column 89 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1060",
                    "column": "89",
                    "severity": "error",
                    "message": "'}' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/2/ApiClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/2/ApiClient.java\nindex 585a15d213e..8b5aedfb159 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/2/ApiClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/2/ApiClient.java\n@@ -1057,8 +1057,7 @@ public class ApiClient {\n                     byte[] file = (byte[]) param.getValue();\n                     Headers partHeaders = Headers.of(\"Content-Disposition\", \"form-data; name=\\\"\" + param.getKey() + \"\\\"; filename=\\\"\" + param.getKey() + \"\\\"\");\n                     MediaType mediaType = MediaType.parse(guessContentTypeFromFile(file));\n-                    mpBuilder.addPart(partHeaders, RequestBody.create(mediaType, file));\n-                } else {\n+                    mpBuilder.addPart(partHeaders, RequestBody.create(mediaType, file));} else {\n                     Headers partHeaders = Headers.of(\"Content-Disposition\", \"form-data; name=\\\"\" + param.getKey() + \"\\\"\");\n                     mpBuilder.addPart(partHeaders, RequestBody.create(null, parameterToString(param.getValue())));\n                 }\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "codebuff",
        "styler_random"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "styler_three_grams"
    ]
}