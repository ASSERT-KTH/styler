{
    "project_name": "O2-Czech-Republic-proxima-platform",
    "error_id": "146",
    "information": {
        "errors": [
            {
                "line": "77",
                "severity": "error",
                "message": "Line is longer than 90 characters (found 93).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "  public void testGetValueSchemaDescriptor() {\n    final SchemaTypeDescriptor<byte[]> descriptor = serializer.getValueSchemaDescriptor();\n    assertEquals(AttributeValueType.BYTE, descriptor.asArrayTypeDescriptor().getValueType());\n  }\n\n  @Test",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 93).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/146/BytesSerializerTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/intellij/146/BytesSerializerTest.java\nindex 14acf51f33a..96ba2eeaf44 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/146/BytesSerializerTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/intellij/146/BytesSerializerTest.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright 2017-2021 O2 Czech Republic, a.s.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package cz.o2.proxima.scheme;\n \n import static org.junit.Assert.assertArrayEquals;\n@@ -74,7 +75,8 @@ public class BytesSerializerTest {\n   @Test\n   public void testGetValueSchemaDescriptor() {\n     final SchemaTypeDescriptor<byte[]> descriptor = serializer.getValueSchemaDescriptor();\n-    assertEquals(AttributeValueType.BYTE, descriptor.asArrayTypeDescriptor().getValueType());\n+    assertEquals(AttributeValueType.BYTE,\n+        descriptor.asArrayTypeDescriptor().getValueType());\n   }\n \n   @Test\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 93).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/146/BytesSerializerTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/naturalize/146/BytesSerializerTest.java\nindex 14acf51f33a..6855b9e55db 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/146/BytesSerializerTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/naturalize/146/BytesSerializerTest.java\n@@ -80,11 +80,11 @@ public class BytesSerializerTest {\n   @Test\n   public void testValueAccessor() {\n     AttributeValueAccessor<byte[], byte[]> accessor = serializer.getValueAccessor();\n-    assertArrayEquals(\n-        \"foo\".getBytes(StandardCharsets.UTF_8),\n+    assertArrayEquals(\"foo\".getBytes(StandardCharsets.UTF_8),\n         accessor.valueOf(\"foo\".getBytes(StandardCharsets.UTF_8)));\n-    assertArrayEquals(\n+\n+assertArrayEquals(\n         \"bar\".getBytes(StandardCharsets.UTF_8),\n         accessor.createFrom(\"bar\".getBytes(StandardCharsets.UTF_8)));\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 93).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "85",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "87",
                    "severity": "error",
                    "message": "'\"bar\"' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "'accessor' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/146/BytesSerializerTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/codebuff/146/BytesSerializerTest.java\nindex 14acf51f33a..355eb77bddf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/146/BytesSerializerTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/codebuff/146/BytesSerializerTest.java\n@@ -18,7 +18,6 @@ package cz.o2.proxima.scheme;\n import static org.junit.Assert.assertArrayEquals;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n-\n import cz.o2.proxima.scheme.SchemaDescriptors.SchemaTypeDescriptor;\n import java.net.URI;\n import java.net.URISyntaxException;\n@@ -28,7 +27,10 @@ import org.junit.Before;\n import org.junit.Test;\n \n /** Simple test for {@link BytesSerializer} */\n+\n+\n public class BytesSerializerTest {\n+\n   private final BytesSerializer factory = new BytesSerializer();\n   private ValueSerializer<byte[]> serializer;\n \n@@ -67,7 +69,7 @@ public class BytesSerializerTest {\n \n   @Test\n   public void testJsonValue() {\n-    byte[] value = new byte[] {1, 2};\n+    byte[] value = new byte[]{1, 2};\n     assertArrayEquals(value, serializer.fromJsonValue(serializer.asJsonValue(value)));\n   }\n \n@@ -80,11 +82,9 @@ public class BytesSerializerTest {\n   @Test\n   public void testValueAccessor() {\n     AttributeValueAccessor<byte[], byte[]> accessor = serializer.getValueAccessor();\n+    assertArrayEquals(\"foo\".getBytes(StandardCharsets.UTF_8), accessor.valueOf(\"foo\".getBytes(StandardCharsets.UTF_8)));\n     assertArrayEquals(\n-        \"foo\".getBytes(StandardCharsets.UTF_8),\n-        accessor.valueOf(\"foo\".getBytes(StandardCharsets.UTF_8)));\n-    assertArrayEquals(\n-        \"bar\".getBytes(StandardCharsets.UTF_8),\n-        accessor.createFrom(\"bar\".getBytes(StandardCharsets.UTF_8)));\n+\"bar\".getBytes(StandardCharsets.UTF_8),\n+accessor.createFrom(\"bar\".getBytes(StandardCharsets.UTF_8)));\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 93).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 99).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "77",
                    "column": "94",
                    "severity": "error",
                    "message": "'}' at column 94 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "77",
                    "column": "94",
                    "severity": "error",
                    "message": "WhitespaceAround: '}' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "77",
                    "column": "95",
                    "severity": "error",
                    "message": "WhitespaceAround: '}' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/146/BytesSerializerTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler_three_grams/146/BytesSerializerTest.java\nindex 14acf51f33a..4c621b6b147 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/146/BytesSerializerTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler_three_grams/146/BytesSerializerTest.java\n@@ -74,10 +74,7 @@ public class BytesSerializerTest {\n   @Test\n   public void testGetValueSchemaDescriptor() {\n     final SchemaTypeDescriptor<byte[]> descriptor = serializer.getValueSchemaDescriptor();\n-    assertEquals(AttributeValueType.BYTE, descriptor.asArrayTypeDescriptor().getValueType());\n-  }\n-\n-  @Test\n+    assertEquals(AttributeValueType.BYTE, descriptor.asArrayTypeDescriptor().getValueType());}@Test\n   public void testValueAccessor() {\n     AttributeValueAccessor<byte[], byte[]> accessor = serializer.getValueAccessor();\n     assertArrayEquals(\n",
            "diff_size": 4
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}