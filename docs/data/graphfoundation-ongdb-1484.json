{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1484",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "131",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "76",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "192",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "261",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "341",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "341",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "341",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "348",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "348",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "353",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "356",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "356",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "373",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "373",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "373",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "381",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "381",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "386",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "397",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "397",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "401",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "401",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "404",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "404",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "410",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "410",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "414",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "422",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "422",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "430",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "444",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "445",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "449",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "449",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "456",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "456",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "456",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "464",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "464",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "469",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "469",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "474",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "474",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "474",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "480",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "480",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "484",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "484",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "493",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "493",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "496",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "496",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "503",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "503",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "505",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "505",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "509",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "509",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "516",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "516",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "526",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "526",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "528",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "528",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "534",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "535",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "537",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "538",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "549",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "550",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "560",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "560",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "575",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "575",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "575",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "581",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "581",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "582",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "584",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "584",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "593",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "593",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "603",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "603",
                    "column": "76",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "603",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "603",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "613",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "613",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "620",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "620",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1484/Server.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1484/Server.java\nindex 269a7c24d9f..cf046c2ec32 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1484/Server.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1484/Server.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.com;\n \n import org.jboss.netty.bootstrap.ServerBootstrap;\n@@ -85,552 +86,540 @@ import static org.neo4j.helpers.NamedThreadFactory.named;\n  * @see Client\n  */\n public abstract class Server<T, R> extends SimpleChannelHandler implements ChannelPipelineFactory, Lifecycle,\n-        ChannelCloser\n+    ChannelCloser\n {\n \n-    private final LogProvider logProvider;\n-    private ScheduledExecutorService silentChannelExecutor;\n-\n-    public interface Configuration\n+  private final LogProvider logProvider;\n+  private ScheduledExecutorService silentChannelExecutor;\n+\n+  public interface Configuration\n+  {\n+    long getOldChannelThreshold();\n+\n+    int getMaxConcurrentTransactions();\n+\n+    int getChunkSize();\n+\n+    HostnamePort getServerAddress();\n+  }\n+\n+  // It's ok if there are more transactions, since these worker threads doesn't\n+  // do any actual work themselves, but spawn off other worker threads doing the\n+  // actual work. So this is more like a core Netty I/O pool worker size.\n+  public static final int DEFAULT_MAX_NUMBER_OF_CONCURRENT_TRANSACTIONS = 200;\n+  static final byte INTERNAL_PROTOCOL_VERSION = 2;\n+  private final T requestTarget;\n+  private final IdleChannelReaper connectedSlaveChannels;\n+  private final Log msgLog;\n+  private final Map<Channel, PartialRequest> partialRequests = new ConcurrentHashMap<>();\n+  private final Configuration config;\n+  private final int frameLength;\n+  private final ByteCounterMonitor byteCounterMonitor;\n+  private final RequestMonitor requestMonitor;\n+  private final byte applicationProtocolVersion;\n+  private final TxChecksumVerifier txVerifier;\n+  private ServerBootstrap bootstrap;\n+  private ChannelGroup channelGroup;\n+  private ExecutorService targetCallExecutor;\n+  private volatile boolean shuttingDown;\n+  private InetSocketAddress socketAddress;\n+  // Executor for channels that we know should be finished, but can't due to being\n+  // active at the moment.\n+  private ExecutorService unfinishedTransactionExecutor;\n+  private int chunkSize;\n+\n+  public Server(T requestTarget, Configuration config, LogProvider logProvider, int frameLength,\n+                ProtocolVersion protocolVersion, TxChecksumVerifier txVerifier, Clock clock, ByteCounterMonitor\n+                    byteCounterMonitor, RequestMonitor requestMonitor)\n+  {\n+    this.requestTarget = requestTarget;\n+    this.config = config;\n+    this.frameLength = frameLength;\n+    this.applicationProtocolVersion = protocolVersion.getApplicationProtocol();\n+    this.logProvider = logProvider;\n+    this.msgLog = this.logProvider.getLog(getClass());\n+    this.txVerifier = txVerifier;\n+    this.byteCounterMonitor = byteCounterMonitor;\n+    this.requestMonitor = requestMonitor;\n+    this.connectedSlaveChannels = new IdleChannelReaper(this, logProvider, clock, config.getOldChannelThreshold());\n+    this.chunkSize = config.getChunkSize();\n+    assertChunkSizeIsWithinFrameSize(chunkSize, frameLength);\n+  }\n+\n+  private static void writeStoreId(StoreId storeId, ChannelBuffer targetBuffer)\n+  {\n+    targetBuffer.writeLong(storeId.getCreationTime());\n+    targetBuffer.writeLong(storeId.getRandomId());\n+    targetBuffer.writeLong(storeId.getStoreVersion());\n+    targetBuffer.writeLong(storeId.getUpgradeTime());\n+    targetBuffer.writeLong(storeId.getUpgradeId());\n+  }\n+\n+  @Override\n+  public void init()\n+  {\n+    chunkSize = config.getChunkSize();\n+    assertChunkSizeIsWithinFrameSize(chunkSize, frameLength);\n+\n+    String className = getClass().getSimpleName();\n+\n+    targetCallExecutor = newCachedThreadPool(named(className + \":\" + config.getServerAddress().getPort()));\n+    unfinishedTransactionExecutor = newScheduledThreadPool(2, named(\"Unfinished transactions\"));\n+    silentChannelExecutor = newSingleThreadScheduledExecutor(named(\"Silent channel reaper\"));\n+    silentChannelExecutor.scheduleWithFixedDelay(connectedSlaveChannels, 5, 5, TimeUnit.SECONDS);\n+  }\n+\n+  @Override\n+  public void start() throws Throwable\n+  {\n+    String className = getClass().getSimpleName();\n+    ExecutorService bossExecutor = newCachedThreadPool(daemon(\"Boss-\" + className));\n+    ExecutorService workerExecutor = newCachedThreadPool(daemon(\"Worker-\" + className));\n+    bootstrap = new ServerBootstrap(new NioServerSocketChannelFactory(\n+        bossExecutor, workerExecutor, config.getMaxConcurrentTransactions()));\n+    bootstrap.setPipelineFactory(this);\n+\n+    PortRangeSocketBinder portRangeSocketBinder = new PortRangeSocketBinder(bootstrap);\n+    try\n+    {\n+      Connection connection = portRangeSocketBinder.bindToFirstAvailablePortInRange(config.getServerAddress());\n+      Channel channel = connection.getChannel();\n+      socketAddress = connection.getSocketAddress();\n+\n+      channelGroup = new DefaultChannelGroup();\n+      channelGroup.add(channel);\n+      msgLog.info(className + \" communication server started and bound to \" + socketAddress);\n+    } catch (Exception ex)\n+    {\n+      msgLog.error(\"Failed to bind server to \" + socketAddress, ex);\n+      bootstrap.releaseExternalResources();\n+      targetCallExecutor.shutdownNow();\n+      unfinishedTransactionExecutor.shutdownNow();\n+      silentChannelExecutor.shutdownNow();\n+      throw new IOException(ex);\n+    }\n+  }\n+\n+  @Override\n+  public void stop()\n+  {\n+    String name = getClass().getSimpleName();\n+    msgLog.info(name + \" communication server shutting down and unbinding from  \" + socketAddress);\n+\n+    shuttingDown = true;\n+    channelGroup.close().awaitUninterruptibly();\n+    bootstrap.releaseExternalResources();\n+  }\n+\n+  @Override\n+  public void shutdown() throws Throwable\n+  {\n+    targetCallExecutor.shutdown();\n+    targetCallExecutor.awaitTermination(10, TimeUnit.SECONDS);\n+    unfinishedTransactionExecutor.shutdown();\n+    unfinishedTransactionExecutor.awaitTermination(10, TimeUnit.SECONDS);\n+    silentChannelExecutor.shutdown();\n+    silentChannelExecutor.awaitTermination(10, TimeUnit.SECONDS);\n+  }\n+\n+  public InetSocketAddress getSocketAddress()\n+  {\n+    return socketAddress;\n+  }\n+\n+  /**\n+   * Only exposed so that tests can control it. It's not configurable really.\n+   */\n+  protected byte getInternalProtocolVersion()\n+  {\n+    return INTERNAL_PROTOCOL_VERSION;\n+  }\n+\n+  @Override\n+  public ChannelPipeline getPipeline()\n+  {\n+    ChannelPipeline pipeline = Channels.pipeline();\n+    pipeline.addLast(\"monitor\", new MonitorChannelHandler(byteCounterMonitor));\n+    addLengthFieldPipes(pipeline, frameLength);\n+    pipeline.addLast(\"serverHandler\", this);\n+    return pipeline;\n+  }\n+\n+  @Override\n+  public void channelOpen(ChannelHandlerContext ctx, ChannelStateEvent e)\n+  {\n+    channelGroup.add(e.getChannel());\n+  }\n+\n+  @Override\n+  public void messageReceived(ChannelHandlerContext ctx, MessageEvent event)\n+  {\n+    try\n+    {\n+      ChannelBuffer message = (ChannelBuffer) event.getMessage();\n+      handleRequest(message, event.getChannel());\n+    } catch (Throwable e)\n+    {\n+      msgLog.error(\"Error handling request\", e);\n+\n+      // Attempt to reply to the client\n+      ChunkingChannelBuffer buffer = newChunkingBuffer(event.getChannel());\n+      buffer.clear( /* failure = */true);\n+      writeFailureResponse(e, buffer);\n+\n+      ctx.getChannel().close();\n+      tryToCloseChannel(ctx.getChannel());\n+      throw e;\n+    }\n+  }\n+\n+  @Override\n+  public void writeComplete(ChannelHandlerContext ctx, WriteCompletionEvent e) throws Exception\n+  {\n+    /*\n+     * This is here to ensure that channels that have stuff written to them for a long time, long transaction\n+     * pulls and store copies (mainly the latter), will not timeout and have their transactions rolled back.\n+     * This is actually not a problem, since both mentioned above have no transaction associated with them\n+     * but it is more sanitary and leaves less exceptions in the logs\n+     * Each time a write completes, simply update the corresponding channel's timestamp.\n+     */\n+    if (connectedSlaveChannels.update(ctx.getChannel()))\n     {\n-        long getOldChannelThreshold();\n-\n-        int getMaxConcurrentTransactions();\n-\n-        int getChunkSize();\n-\n-        HostnamePort getServerAddress();\n+      super.writeComplete(ctx, e);\n     }\n+  }\n \n-    // It's ok if there are more transactions, since these worker threads doesn't\n-    // do any actual work themselves, but spawn off other worker threads doing the\n-    // actual work. So this is more like a core Netty I/O pool worker size.\n-    public static final int DEFAULT_MAX_NUMBER_OF_CONCURRENT_TRANSACTIONS = 200;\n-    static final byte INTERNAL_PROTOCOL_VERSION = 2;\n-    private final T requestTarget;\n-    private final IdleChannelReaper connectedSlaveChannels;\n-    private final Log msgLog;\n-    private final Map<Channel,PartialRequest> partialRequests = new ConcurrentHashMap<>();\n-    private final Configuration config;\n-    private final int frameLength;\n-    private final ByteCounterMonitor byteCounterMonitor;\n-    private final RequestMonitor requestMonitor;\n-    private final byte applicationProtocolVersion;\n-    private final TxChecksumVerifier txVerifier;\n-    private ServerBootstrap bootstrap;\n-    private ChannelGroup channelGroup;\n-    private ExecutorService targetCallExecutor;\n-    private volatile boolean shuttingDown;\n-    private InetSocketAddress socketAddress;\n-    // Executor for channels that we know should be finished, but can't due to being\n-    // active at the moment.\n-    private ExecutorService unfinishedTransactionExecutor;\n-    private int chunkSize;\n-\n-    public Server( T requestTarget, Configuration config, LogProvider logProvider, int frameLength,\n-                   ProtocolVersion protocolVersion, TxChecksumVerifier txVerifier, Clock clock, ByteCounterMonitor\n-            byteCounterMonitor, RequestMonitor requestMonitor )\n-    {\n-        this.requestTarget = requestTarget;\n-        this.config = config;\n-        this.frameLength = frameLength;\n-        this.applicationProtocolVersion = protocolVersion.getApplicationProtocol();\n-        this.logProvider = logProvider;\n-        this.msgLog = this.logProvider.getLog( getClass() );\n-        this.txVerifier = txVerifier;\n-        this.byteCounterMonitor = byteCounterMonitor;\n-        this.requestMonitor = requestMonitor;\n-        this.connectedSlaveChannels = new IdleChannelReaper( this, logProvider, clock, config.getOldChannelThreshold() );\n-        this.chunkSize = config.getChunkSize();\n-        assertChunkSizeIsWithinFrameSize( chunkSize, frameLength );\n-    }\n+  @Override\n+  public void channelClosed(ChannelHandlerContext ctx, ChannelStateEvent e)\n+      throws Exception\n+  {\n+    super.channelClosed(ctx, e);\n \n-    private static void writeStoreId( StoreId storeId, ChannelBuffer targetBuffer )\n+    if (!ctx.getChannel().isOpen())\n     {\n-        targetBuffer.writeLong( storeId.getCreationTime() );\n-        targetBuffer.writeLong( storeId.getRandomId() );\n-        targetBuffer.writeLong( storeId.getStoreVersion() );\n-        targetBuffer.writeLong( storeId.getUpgradeTime() );\n-        targetBuffer.writeLong( storeId.getUpgradeId() );\n+      tryToCloseChannel(ctx.getChannel());\n     }\n \n-    @Override\n-    public void init()\n-    {\n-        chunkSize = config.getChunkSize();\n-        assertChunkSizeIsWithinFrameSize( chunkSize, frameLength );\n-\n-        String className = getClass().getSimpleName();\n+    channelGroup.remove(e.getChannel());\n+  }\n \n-        targetCallExecutor = newCachedThreadPool( named( className + \":\" + config.getServerAddress().getPort() ) );\n-        unfinishedTransactionExecutor = newScheduledThreadPool( 2, named( \"Unfinished transactions\" ) );\n-        silentChannelExecutor = newSingleThreadScheduledExecutor( named( \"Silent channel reaper\" ) );\n-        silentChannelExecutor.scheduleWithFixedDelay( connectedSlaveChannels, 5, 5, TimeUnit.SECONDS );\n-    }\n+  @Override\n+  public void channelDisconnected(ChannelHandlerContext ctx, ChannelStateEvent e)\n+      throws Exception\n+  {\n+    super.channelDisconnected(ctx, e);\n \n-    @Override\n-    public void start() throws Throwable\n+    if (!ctx.getChannel().isConnected())\n     {\n-        String className = getClass().getSimpleName();\n-        ExecutorService bossExecutor = newCachedThreadPool( daemon( \"Boss-\" + className ) );\n-        ExecutorService workerExecutor = newCachedThreadPool( daemon( \"Worker-\" + className ) );\n-        bootstrap = new ServerBootstrap( new NioServerSocketChannelFactory(\n-                bossExecutor, workerExecutor, config.getMaxConcurrentTransactions() ) );\n-        bootstrap.setPipelineFactory( this );\n-\n-        PortRangeSocketBinder portRangeSocketBinder = new PortRangeSocketBinder( bootstrap );\n-        try\n-        {\n-            Connection connection = portRangeSocketBinder.bindToFirstAvailablePortInRange( config.getServerAddress() );\n-            Channel channel = connection.getChannel();\n-            socketAddress = connection.getSocketAddress();\n-\n-            channelGroup = new DefaultChannelGroup();\n-            channelGroup.add( channel );\n-            msgLog.info( className + \" communication server started and bound to \" + socketAddress );\n-        }\n-        catch ( Exception ex )\n-        {\n-            msgLog.error( \"Failed to bind server to \" + socketAddress, ex );\n-            bootstrap.releaseExternalResources();\n-            targetCallExecutor.shutdownNow();\n-            unfinishedTransactionExecutor.shutdownNow();\n-            silentChannelExecutor.shutdownNow();\n-            throw new IOException( ex );\n-        }\n+      tryToCloseChannel(ctx.getChannel());\n     }\n+  }\n \n-    @Override\n-    public void stop()\n-    {\n-        String name = getClass().getSimpleName();\n-        msgLog.info( name + \" communication server shutting down and unbinding from  \" + socketAddress );\n-\n-        shuttingDown = true;\n-        channelGroup.close().awaitUninterruptibly();\n-        bootstrap.releaseExternalResources();\n-    }\n+  @Override\n+  public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e)\n+  {\n+    msgLog.warn(\"Exception from Netty\", e.getCause());\n+  }\n \n-    @Override\n-    public void shutdown() throws Throwable\n+  @Override\n+  public void tryToCloseChannel(Channel channel)\n+  {\n+    IdleChannelReaper.Request request = unmapSlave(channel);\n+    if (request == null)\n     {\n-        targetCallExecutor.shutdown();\n-        targetCallExecutor.awaitTermination( 10, TimeUnit.SECONDS );\n-        unfinishedTransactionExecutor.shutdown();\n-        unfinishedTransactionExecutor.awaitTermination( 10, TimeUnit.SECONDS );\n-        silentChannelExecutor.shutdown();\n-        silentChannelExecutor.awaitTermination( 10, TimeUnit.SECONDS );\n+      return;\n     }\n+    tryToFinishOffChannel(channel, request.getRequestContext());\n+  }\n \n-    public InetSocketAddress getSocketAddress()\n+  protected void tryToFinishOffChannel(Channel channel, RequestContext slave)\n+  {\n+    try\n     {\n-        return socketAddress;\n-    }\n-\n-    /**\n-     * Only exposed so that tests can control it. It's not configurable really.\n-     */\n-    protected byte getInternalProtocolVersion()\n+      stopConversation(slave);\n+      unmapSlave(channel);\n+    } catch (Throwable failure) // Unknown error trying to finish off the tx\n     {\n-        return INTERNAL_PROTOCOL_VERSION;\n+      submitSilent(unfinishedTransactionExecutor, newTransactionFinisher(slave));\n+      msgLog.warn(\"Could not finish off dead channel\", failure);\n     }\n+  }\n \n-    @Override\n-    public ChannelPipeline getPipeline()\n-    {\n-        ChannelPipeline pipeline = Channels.pipeline();\n-        pipeline.addLast( \"monitor\", new MonitorChannelHandler( byteCounterMonitor ) );\n-        addLengthFieldPipes( pipeline, frameLength );\n-        pipeline.addLast( \"serverHandler\", this );\n-        return pipeline;\n-    }\n-\n-    @Override\n-    public void channelOpen( ChannelHandlerContext ctx, ChannelStateEvent e )\n+  private void submitSilent(ExecutorService service, Runnable job)\n+  {\n+    try\n     {\n-        channelGroup.add( e.getChannel() );\n+      service.submit(job);\n+    } catch (RejectedExecutionException e)\n+    {   // Don't scream and shout if we're shutting down, because a rejected execution\n+      // is expected at that time.\n+      if (!shuttingDown)\n+      {\n+        throw e;\n+      }\n     }\n+  }\n \n-    @Override\n-    public void messageReceived( ChannelHandlerContext ctx, MessageEvent event )\n+  private Runnable newTransactionFinisher(final RequestContext slave)\n+  {\n+    return new Runnable()\n     {\n+      @Override\n+      public void run()\n+      {\n         try\n         {\n-            ChannelBuffer message = (ChannelBuffer) event.getMessage();\n-            handleRequest( message, event.getChannel() );\n-        }\n-        catch ( Throwable e )\n+          stopConversation(slave);\n+        } catch (Throwable e)\n         {\n-            msgLog.error( \"Error handling request\", e );\n-\n-            // Attempt to reply to the client\n-            ChunkingChannelBuffer buffer = newChunkingBuffer( event.getChannel() );\n-            buffer.clear( /* failure = */true );\n-            writeFailureResponse( e, buffer );\n-\n-            ctx.getChannel().close();\n-            tryToCloseChannel( ctx.getChannel() );\n-            throw e;\n+          // Introduce some delay here. it becomes like a busy wait if it never succeeds\n+          sleepNicely(200);\n+          unfinishedTransactionExecutor.submit(this);\n         }\n-    }\n+      }\n \n-    @Override\n-    public void writeComplete( ChannelHandlerContext ctx, WriteCompletionEvent e ) throws Exception\n-    {\n-        /*\n-         * This is here to ensure that channels that have stuff written to them for a long time, long transaction\n-         * pulls and store copies (mainly the latter), will not timeout and have their transactions rolled back.\n-         * This is actually not a problem, since both mentioned above have no transaction associated with them\n-         * but it is more sanitary and leaves less exceptions in the logs\n-         * Each time a write completes, simply update the corresponding channel's timestamp.\n-         */\n-        if ( connectedSlaveChannels.update( ctx.getChannel() ) )\n+      private void sleepNicely(int millis)\n+      {\n+        try\n         {\n-            super.writeComplete( ctx, e );\n-        }\n-    }\n-\n-    @Override\n-    public void channelClosed( ChannelHandlerContext ctx, ChannelStateEvent e )\n-            throws Exception\n-    {\n-        super.channelClosed( ctx, e );\n-\n-        if ( !ctx.getChannel().isOpen() )\n+          Thread.sleep(millis);\n+        } catch (InterruptedException e)\n         {\n-            tryToCloseChannel( ctx.getChannel() );\n+          Thread.interrupted();\n         }\n-\n-        channelGroup.remove( e.getChannel() );\n+      }\n+    };\n+  }\n+\n+  protected void handleRequest(ChannelBuffer buffer, final Channel channel)\n+  {\n+    Byte continuation = readContinuationHeader(buffer, channel);\n+    if (continuation == null)\n+    {\n+      return;\n+    }\n+    if (continuation == ChunkingChannelBuffer.CONTINUATION_MORE)\n+    {\n+      PartialRequest partialRequest = partialRequests.get(channel);\n+      if (partialRequest == null)\n+      {\n+        // This is the first chunk in a multi-chunk request\n+        RequestType type = getRequestContext(buffer.readByte());\n+        RequestContext context = readContext(buffer);\n+        ChannelBuffer targetBuffer = mapSlave(channel, context);\n+        partialRequest = new PartialRequest(type, context, targetBuffer);\n+        partialRequests.put(channel, partialRequest);\n+      }\n+      partialRequest.add(buffer);\n+    } else\n+    {\n+      PartialRequest partialRequest = partialRequests.remove(channel);\n+      RequestType type;\n+      RequestContext context;\n+      ChannelBuffer targetBuffer;\n+      ChannelBuffer bufferToReadFrom;\n+      ChannelBuffer bufferToWriteTo;\n+      if (partialRequest == null)\n+      {\n+        // This is the one and single chunk in the request\n+        type = getRequestContext(buffer.readByte());\n+        context = readContext(buffer);\n+        targetBuffer = mapSlave(channel, context);\n+        bufferToReadFrom = buffer;\n+        bufferToWriteTo = targetBuffer;\n+      } else\n+      {\n+        // This is the last chunk in a multi-chunk request\n+        type = partialRequest.type;\n+        context = partialRequest.context;\n+        targetBuffer = partialRequest.buffer;\n+        partialRequest.add(buffer);\n+        bufferToReadFrom = targetBuffer;\n+        bufferToWriteTo = ChannelBuffers.dynamicBuffer();\n+      }\n+\n+      bufferToWriteTo.clear();\n+      ChunkingChannelBuffer chunkingBuffer = newChunkingBuffer(bufferToWriteTo, channel, chunkSize,\n+          getInternalProtocolVersion(), applicationProtocolVersion);\n+      submitSilent(targetCallExecutor, new TargetCaller(type, channel, context, chunkingBuffer,\n+          bufferToReadFrom));\n+    }\n+  }\n+\n+  private Byte readContinuationHeader(ChannelBuffer buffer, final Channel channel)\n+  {\n+    byte[] header = new byte[2];\n+    buffer.readBytes(header);\n+    try\n+    {   // Read request header and assert correct internal/application protocol version\n+      assertSameProtocolVersion(header, getInternalProtocolVersion(), applicationProtocolVersion);\n+    } catch (final IllegalProtocolVersionException e)\n+    {   // Version mismatch, fail with a good exception back to the client\n+      submitSilent(targetCallExecutor, () -> writeFailureResponse(e, newChunkingBuffer(channel)));\n+      return null;\n+    }\n+    return (byte) (header[0] & 0x1);\n+  }\n+\n+  protected void writeFailureResponse(Throwable exception, ChunkingChannelBuffer buffer)\n+  {\n+    try\n+    {\n+      ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n+      ObjectOutputStream out = new ObjectOutputStream(bytes);\n+      out.writeObject(exception);\n+      out.close();\n+      buffer.writeBytes(bytes.toByteArray());\n+      buffer.done();\n+    } catch (IOException e)\n+    {\n+      msgLog.warn(\"Couldn't send cause of error to client\", exception);\n+    }\n+  }\n+\n+  protected void responseWritten(RequestType type, Channel channel, RequestContext context)\n+  {\n+  }\n+\n+  protected RequestContext readContext(ChannelBuffer buffer)\n+  {\n+    long sessionId = buffer.readLong();\n+    int machineId = buffer.readInt();\n+    int eventIdentifier = buffer.readInt();\n+    long neoTx = buffer.readLong();\n+    long checksum = buffer.readLong();\n+\n+    RequestContext readRequestContext =\n+        new RequestContext(sessionId, machineId, eventIdentifier, neoTx, checksum);\n+\n+    // verify checksum only if there are transactions committed in the store\n+    if (neoTx > TransactionIdStore.BASE_TX_ID)\n+    {\n+      txVerifier.assertMatch(neoTx, checksum);\n+    }\n+    return readRequestContext;\n+  }\n+\n+  protected abstract RequestType getRequestContext(byte id);\n+\n+  protected ChannelBuffer mapSlave(Channel channel, RequestContext slave)\n+  {\n+    // Checking for machineId -1 excludes the \"empty\" slave contexts\n+    // which some communication points pass in as context.\n+    if (slave != null && slave.machineId() != RequestContext.EMPTY.machineId())\n+    {\n+      connectedSlaveChannels.add(channel, slave);\n+    }\n+    return ChannelBuffers.dynamicBuffer();\n+  }\n+\n+  protected IdleChannelReaper.Request unmapSlave(Channel channel)\n+  {\n+    return connectedSlaveChannels.remove(channel);\n+  }\n+\n+  protected T getRequestTarget()\n+  {\n+    return requestTarget;\n+  }\n+\n+  protected abstract void stopConversation(RequestContext context);\n+\n+  private ChunkingChannelBuffer newChunkingBuffer(Channel channel)\n+  {\n+    return newChunkingBuffer(ChannelBuffers.dynamicBuffer(), channel, chunkSize, getInternalProtocolVersion(),\n+        applicationProtocolVersion);\n+  }\n+\n+  protected ChunkingChannelBuffer newChunkingBuffer(ChannelBuffer bufferToWriteTo, Channel channel, int capacity,\n+                                                    byte internalProtocolVersion, byte applicationProtocolVersion)\n+  {\n+    return new ChunkingChannelBuffer(bufferToWriteTo, channel, capacity, internalProtocolVersion,\n+        applicationProtocolVersion);\n+  }\n+\n+  private class TargetCaller implements Response.Handler, Runnable\n+  {\n+    private final RequestType type;\n+    private final Channel channel;\n+    private final RequestContext context;\n+    private final ChunkingChannelBuffer targetBuffer;\n+    private final ChannelBuffer bufferToReadFrom;\n+\n+    TargetCaller(RequestType type, Channel channel, RequestContext context,\n+                 ChunkingChannelBuffer targetBuffer, ChannelBuffer bufferToReadFrom)\n+    {\n+      this.type = type;\n+      this.channel = channel;\n+      this.context = context;\n+      this.targetBuffer = targetBuffer;\n+      this.bufferToReadFrom = bufferToReadFrom;\n     }\n \n     @Override\n-    public void channelDisconnected( ChannelHandlerContext ctx, ChannelStateEvent e )\n-            throws Exception\n-    {\n-        super.channelDisconnected( ctx, e );\n-\n-        if ( !ctx.getChannel().isConnected() )\n+    @SuppressWarnings(\"unchecked\")\n+    public void run()\n+    {\n+      requestMonitor.beginRequest(channel.getRemoteAddress(), type, context);\n+      Response<R> response = null;\n+      Throwable failure = null;\n+      try\n+      {\n+        unmapSlave(channel);\n+        response = type.getTargetCaller().call(requestTarget, context, bufferToReadFrom, targetBuffer);\n+        type.getObjectSerializer().write(response.response(), targetBuffer);\n+        writeStoreId(response.getStoreId(), targetBuffer);\n+        response.accept(this);\n+        targetBuffer.done();\n+        responseWritten(type, channel, context);\n+      } catch (Throwable e)\n+      {\n+        failure = e;\n+        targetBuffer.clear(true);\n+        writeFailureResponse(e, targetBuffer);\n+        tryToFinishOffChannel(channel, context);\n+        throw new RuntimeException(e);\n+      } finally\n+      {\n+        if (response != null)\n         {\n-            tryToCloseChannel( ctx.getChannel() );\n+          response.close();\n         }\n+        requestMonitor.endRequest(failure);\n+      }\n     }\n \n     @Override\n-    public void exceptionCaught( ChannelHandlerContext ctx, ExceptionEvent e )\n+    public void obligation(long txId)\n     {\n-        msgLog.warn( \"Exception from Netty\", e.getCause() );\n+      targetBuffer.writeByte(-1);\n+      targetBuffer.writeLong(txId);\n     }\n \n     @Override\n-    public void tryToCloseChannel( Channel channel )\n-    {\n-        IdleChannelReaper.Request request = unmapSlave( channel );\n-        if ( request == null )\n-        {\n-            return;\n-        }\n-        tryToFinishOffChannel( channel, request.getRequestContext());\n-    }\n-\n-    protected void tryToFinishOffChannel( Channel channel, RequestContext slave )\n-    {\n-        try\n-        {\n-            stopConversation( slave );\n-            unmapSlave( channel );\n-        }\n-        catch ( Throwable failure ) // Unknown error trying to finish off the tx\n-        {\n-            submitSilent( unfinishedTransactionExecutor, newTransactionFinisher( slave ) );\n-            msgLog.warn( \"Could not finish off dead channel\", failure );\n-        }\n-    }\n-\n-    private void submitSilent( ExecutorService service, Runnable job )\n-    {\n-        try\n-        {\n-            service.submit( job );\n-        }\n-        catch ( RejectedExecutionException e )\n-        {   // Don't scream and shout if we're shutting down, because a rejected execution\n-            // is expected at that time.\n-            if ( !shuttingDown )\n-            {\n-                throw e;\n-            }\n-        }\n-    }\n-\n-    private Runnable newTransactionFinisher( final RequestContext slave )\n+    public Visitor<CommittedTransactionRepresentation, Exception> transactions()\n     {\n-        return new Runnable()\n-        {\n-            @Override\n-            public void run()\n-            {\n-                try\n-                {\n-                    stopConversation( slave );\n-                }\n-                catch ( Throwable e )\n-                {\n-                    // Introduce some delay here. it becomes like a busy wait if it never succeeds\n-                    sleepNicely( 200 );\n-                    unfinishedTransactionExecutor.submit( this );\n-                }\n-            }\n-\n-            private void sleepNicely( int millis )\n-            {\n-                try\n-                {\n-                    Thread.sleep( millis );\n-                }\n-                catch ( InterruptedException e )\n-                {\n-                    Thread.interrupted();\n-                }\n-            }\n-        };\n+      targetBuffer.writeByte(1);\n+      return new CommittedTransactionSerializer(new NetworkFlushableChannel(targetBuffer));\n     }\n+  }\n \n-    protected void handleRequest( ChannelBuffer buffer, final Channel channel )\n-    {\n-        Byte continuation = readContinuationHeader( buffer, channel );\n-        if ( continuation == null )\n-        {\n-            return;\n-        }\n-        if ( continuation == ChunkingChannelBuffer.CONTINUATION_MORE )\n-        {\n-            PartialRequest partialRequest = partialRequests.get( channel );\n-            if ( partialRequest == null )\n-            {\n-                // This is the first chunk in a multi-chunk request\n-                RequestType type = getRequestContext( buffer.readByte() );\n-                RequestContext context = readContext( buffer );\n-                ChannelBuffer targetBuffer = mapSlave( channel, context );\n-                partialRequest = new PartialRequest( type, context, targetBuffer );\n-                partialRequests.put( channel, partialRequest );\n-            }\n-            partialRequest.add( buffer );\n-        }\n-        else\n-        {\n-            PartialRequest partialRequest = partialRequests.remove( channel );\n-            RequestType type;\n-            RequestContext context;\n-            ChannelBuffer targetBuffer;\n-            ChannelBuffer bufferToReadFrom;\n-            ChannelBuffer bufferToWriteTo;\n-            if ( partialRequest == null )\n-            {\n-                // This is the one and single chunk in the request\n-                type = getRequestContext( buffer.readByte() );\n-                context = readContext( buffer );\n-                targetBuffer = mapSlave( channel, context );\n-                bufferToReadFrom = buffer;\n-                bufferToWriteTo = targetBuffer;\n-            }\n-            else\n-            {\n-                // This is the last chunk in a multi-chunk request\n-                type = partialRequest.type;\n-                context = partialRequest.context;\n-                targetBuffer = partialRequest.buffer;\n-                partialRequest.add( buffer );\n-                bufferToReadFrom = targetBuffer;\n-                bufferToWriteTo = ChannelBuffers.dynamicBuffer();\n-            }\n-\n-            bufferToWriteTo.clear();\n-            ChunkingChannelBuffer chunkingBuffer = newChunkingBuffer( bufferToWriteTo, channel, chunkSize,\n-                    getInternalProtocolVersion(), applicationProtocolVersion );\n-            submitSilent( targetCallExecutor, new TargetCaller( type, channel, context, chunkingBuffer,\n-                    bufferToReadFrom ) );\n-        }\n-    }\n+  private class PartialRequest\n+  {\n+    final RequestContext context;\n+    final ChannelBuffer buffer;\n+    final RequestType type;\n \n-    private Byte readContinuationHeader( ChannelBuffer buffer, final Channel channel )\n+    PartialRequest(RequestType type, RequestContext context, ChannelBuffer buffer)\n     {\n-        byte[] header = new byte[2];\n-        buffer.readBytes( header );\n-        try\n-        {   // Read request header and assert correct internal/application protocol version\n-            assertSameProtocolVersion( header, getInternalProtocolVersion(), applicationProtocolVersion );\n-        }\n-        catch ( final IllegalProtocolVersionException e )\n-        {   // Version mismatch, fail with a good exception back to the client\n-            submitSilent( targetCallExecutor, () -> writeFailureResponse( e, newChunkingBuffer( channel ) ) );\n-            return null;\n-        }\n-        return (byte) (header[0] & 0x1);\n+      this.type = type;\n+      this.context = context;\n+      this.buffer = buffer;\n     }\n \n-    protected void writeFailureResponse( Throwable exception, ChunkingChannelBuffer buffer )\n+    public void add(ChannelBuffer buffer)\n     {\n-        try\n-        {\n-            ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n-            ObjectOutputStream out = new ObjectOutputStream( bytes );\n-            out.writeObject( exception );\n-            out.close();\n-            buffer.writeBytes( bytes.toByteArray() );\n-            buffer.done();\n-        }\n-        catch ( IOException e )\n-        {\n-            msgLog.warn( \"Couldn't send cause of error to client\", exception );\n-        }\n-    }\n-\n-    protected void responseWritten( RequestType type, Channel channel, RequestContext context )\n-    {\n-    }\n-\n-    protected RequestContext readContext( ChannelBuffer buffer )\n-    {\n-        long sessionId = buffer.readLong();\n-        int machineId = buffer.readInt();\n-        int eventIdentifier = buffer.readInt();\n-        long neoTx = buffer.readLong();\n-        long checksum = buffer.readLong();\n-\n-        RequestContext readRequestContext =\n-                new RequestContext( sessionId, machineId, eventIdentifier, neoTx, checksum );\n-\n-        // verify checksum only if there are transactions committed in the store\n-        if ( neoTx > TransactionIdStore.BASE_TX_ID )\n-        {\n-            txVerifier.assertMatch( neoTx, checksum );\n-        }\n-        return readRequestContext;\n-    }\n-\n-    protected abstract RequestType getRequestContext( byte id );\n-\n-    protected ChannelBuffer mapSlave( Channel channel, RequestContext slave )\n-    {\n-        // Checking for machineId -1 excludes the \"empty\" slave contexts\n-        // which some communication points pass in as context.\n-        if ( slave != null && slave.machineId() != RequestContext.EMPTY.machineId() )\n-        {\n-            connectedSlaveChannels.add( channel, slave );\n-        }\n-        return ChannelBuffers.dynamicBuffer();\n-    }\n-\n-    protected IdleChannelReaper.Request unmapSlave( Channel channel )\n-    {\n-        return connectedSlaveChannels.remove( channel );\n-    }\n-\n-    protected T getRequestTarget()\n-    {\n-        return requestTarget;\n-    }\n-\n-    protected abstract void stopConversation( RequestContext context );\n-\n-    private ChunkingChannelBuffer newChunkingBuffer( Channel channel )\n-    {\n-        return newChunkingBuffer( ChannelBuffers.dynamicBuffer(), channel, chunkSize, getInternalProtocolVersion(),\n-                applicationProtocolVersion );\n-    }\n-\n-    protected ChunkingChannelBuffer newChunkingBuffer( ChannelBuffer bufferToWriteTo, Channel channel, int capacity,\n-            byte internalProtocolVersion, byte applicationProtocolVersion )\n-    {\n-        return new ChunkingChannelBuffer( bufferToWriteTo, channel, capacity, internalProtocolVersion,\n-                applicationProtocolVersion );\n-    }\n-\n-    private class TargetCaller implements Response.Handler, Runnable\n-    {\n-        private final RequestType type;\n-        private final Channel channel;\n-        private final RequestContext context;\n-        private final ChunkingChannelBuffer targetBuffer;\n-        private final ChannelBuffer bufferToReadFrom;\n-\n-        TargetCaller( RequestType type, Channel channel, RequestContext context,\n-                      ChunkingChannelBuffer targetBuffer, ChannelBuffer bufferToReadFrom )\n-        {\n-            this.type = type;\n-            this.channel = channel;\n-            this.context = context;\n-            this.targetBuffer = targetBuffer;\n-            this.bufferToReadFrom = bufferToReadFrom;\n-        }\n-\n-        @Override\n-        @SuppressWarnings( \"unchecked\" )\n-        public void run()\n-        {\n-            requestMonitor.beginRequest( channel.getRemoteAddress(), type, context );\n-            Response<R> response = null;\n-            Throwable failure = null;\n-            try\n-            {\n-                unmapSlave( channel );\n-                response = type.getTargetCaller().call( requestTarget, context, bufferToReadFrom, targetBuffer );\n-                type.getObjectSerializer().write( response.response(), targetBuffer );\n-                writeStoreId( response.getStoreId(), targetBuffer );\n-                response.accept( this );\n-                targetBuffer.done();\n-                responseWritten( type, channel, context );\n-            }\n-            catch ( Throwable e )\n-            {\n-                failure = e;\n-                targetBuffer.clear( true );\n-                writeFailureResponse( e, targetBuffer );\n-                tryToFinishOffChannel( channel, context );\n-                throw new RuntimeException( e );\n-            }\n-            finally\n-            {\n-                if ( response != null )\n-                {\n-                    response.close();\n-                }\n-                requestMonitor.endRequest( failure );\n-            }\n-        }\n-\n-        @Override\n-        public void obligation( long txId )\n-        {\n-            targetBuffer.writeByte( -1 );\n-            targetBuffer.writeLong( txId );\n-        }\n-\n-        @Override\n-        public Visitor<CommittedTransactionRepresentation,Exception> transactions()\n-        {\n-            targetBuffer.writeByte( 1 );\n-            return new CommittedTransactionSerializer( new NetworkFlushableChannel(  targetBuffer ) );\n-        }\n-    }\n-\n-    private class PartialRequest\n-    {\n-        final RequestContext context;\n-        final ChannelBuffer buffer;\n-        final RequestType type;\n-\n-        PartialRequest( RequestType type, RequestContext context, ChannelBuffer buffer )\n-        {\n-            this.type = type;\n-            this.context = context;\n-            this.buffer = buffer;\n-        }\n-\n-        public void add( ChannelBuffer buffer )\n-        {\n-            this.buffer.writeBytes( buffer );\n-        }\n+      this.buffer.writeBytes(buffer);\n     }\n+  }\n }\n",
            "diff_size": 897
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "88",
                    "column": "23",
                    "severity": "error",
                    "message": "'{' at column 23 should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "128",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 247).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "494",
                    "column": "19",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1484/Server.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1484/Server.java\nindex 269a7c24d9f..ff9dcd835af 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1484/Server.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1484/Server.java\n@@ -84,10 +84,8 @@ import static org.neo4j.helpers.NamedThreadFactory.named;\n  *\n  * @see Client\n  */\n-public abstract class Server<T, R> extends SimpleChannelHandler implements ChannelPipelineFactory, Lifecycle,\n-        ChannelCloser\n-{\n-\n+public abstract class Server<T,R> extends SimpleChannelHandler implements ChannelPipelineFactory, Lifecycle,\n+        ChannelCloser {\n     private final LogProvider logProvider;\n     private ScheduledExecutorService silentChannelExecutor;\n \n@@ -127,9 +125,7 @@ public abstract class Server<T, R> extends SimpleChannelHandler implements Chann\n     private ExecutorService unfinishedTransactionExecutor;\n     private int chunkSize;\n \n-    public Server( T requestTarget, Configuration config, LogProvider logProvider, int frameLength,\n-                   ProtocolVersion protocolVersion, TxChecksumVerifier txVerifier, Clock clock, ByteCounterMonitor\n-            byteCounterMonitor, RequestMonitor requestMonitor )\n+    public Server( T requestTarget, Configuration config, LogProvider logProvider, int frameLength, ProtocolVersion protocolVersion, TxChecksumVerifier txVerifier, Clock clock, ByteCounterMonitor byteCounterMonitor, RequestMonitor requestMonitor )\n     {\n         this.requestTarget = requestTarget;\n         this.config = config;\n@@ -159,8 +155,7 @@ public abstract class Server<T, R> extends SimpleChannelHandler implements Chann\n     {\n         chunkSize = config.getChunkSize();\n         assertChunkSizeIsWithinFrameSize( chunkSize, frameLength );\n-\n-        String className = getClass().getSimpleName();\n+String className = getClass().getSimpleName();\n \n         targetCallExecutor = newCachedThreadPool( named( className + \":\" + config.getServerAddress().getPort() ) );\n         unfinishedTransactionExecutor = newScheduledThreadPool( 2, named( \"Unfinished transactions\" ) );\n@@ -174,11 +169,9 @@ public abstract class Server<T, R> extends SimpleChannelHandler implements Chann\n         String className = getClass().getSimpleName();\n         ExecutorService bossExecutor = newCachedThreadPool( daemon( \"Boss-\" + className ) );\n         ExecutorService workerExecutor = newCachedThreadPool( daemon( \"Worker-\" + className ) );\n-        bootstrap = new ServerBootstrap( new NioServerSocketChannelFactory(\n-                bossExecutor, workerExecutor, config.getMaxConcurrentTransactions() ) );\n-        bootstrap.setPipelineFactory( this );\n-\n-        PortRangeSocketBinder portRangeSocketBinder = new PortRangeSocketBinder( bootstrap );\n+        bootstrap = new ServerBootstrap( new NioServerSocketChannelFactory( bossExecutor, workerExecutor, config.getMaxConcurrentTransactions() ) );\n+bootstrap.setPipelineFactory( this );\n+PortRangeSocketBinder portRangeSocketBinder = new PortRangeSocketBinder( bootstrap );\n         try\n         {\n             Connection connection = portRangeSocketBinder.bindToFirstAvailablePortInRange( config.getServerAddress() );\n@@ -205,8 +198,7 @@ public abstract class Server<T, R> extends SimpleChannelHandler implements Chann\n     {\n         String name = getClass().getSimpleName();\n         msgLog.info( name + \" communication server shutting down and unbinding from  \" + socketAddress );\n-\n-        shuttingDown = true;\n+shuttingDown = true;\n         channelGroup.close().awaitUninterruptibly();\n         bootstrap.releaseExternalResources();\n     }\n@@ -267,8 +259,7 @@ public abstract class Server<T, R> extends SimpleChannelHandler implements Chann\n             ChunkingChannelBuffer buffer = newChunkingBuffer( event.getChannel() );\n             buffer.clear( /* failure = */true );\n             writeFailureResponse( e, buffer );\n-\n-            ctx.getChannel().close();\n+ctx.getChannel().close();\n             tryToCloseChannel( ctx.getChannel() );\n             throw e;\n         }\n@@ -291,12 +282,10 @@ public abstract class Server<T, R> extends SimpleChannelHandler implements Chann\n     }\n \n     @Override\n-    public void channelClosed( ChannelHandlerContext ctx, ChannelStateEvent e )\n-            throws Exception\n-    {\n+    public void channelClosed( ChannelHandlerContext ctx, ChannelStateEvent e ) throws Exception\n+{\n         super.channelClosed( ctx, e );\n-\n-        if ( !ctx.getChannel().isOpen() )\n+if ( !ctx.getChannel().isOpen() )\n         {\n             tryToCloseChannel( ctx.getChannel() );\n         }\n@@ -305,12 +294,10 @@ public abstract class Server<T, R> extends SimpleChannelHandler implements Chann\n     }\n \n     @Override\n-    public void channelDisconnected( ChannelHandlerContext ctx, ChannelStateEvent e )\n-            throws Exception\n-    {\n+    public void channelDisconnected( ChannelHandlerContext ctx, ChannelStateEvent e ) throws Exception\n+{\n         super.channelDisconnected( ctx, e );\n-\n-        if ( !ctx.getChannel().isConnected() )\n+if ( !ctx.getChannel().isConnected() )\n         {\n             tryToCloseChannel( ctx.getChannel() );\n         }\n@@ -330,7 +317,8 @@ public abstract class Server<T, R> extends SimpleChannelHandler implements Chann\n         {\n             return;\n         }\n-        tryToFinishOffChannel( channel, request.getRequestContext());\n+\n+tryToFinishOffChannel( channel, request.getRequestContext() );\n     }\n \n     protected void tryToFinishOffChannel( Channel channel, RequestContext slave )\n@@ -354,7 +342,8 @@ public abstract class Server<T, R> extends SimpleChannelHandler implements Chann\n             service.submit( job );\n         }\n         catch ( RejectedExecutionException e )\n-        {   // Don't scream and shout if we're shutting down, because a rejected execution\n+        {\n+    // Don't scream and shout if we're shutting down, because a rejected execution\n             // is expected at that time.\n             if ( !shuttingDown )\n             {\n@@ -403,7 +392,8 @@ public abstract class Server<T, R> extends SimpleChannelHandler implements Chann\n         {\n             return;\n         }\n-        if ( continuation == ChunkingChannelBuffer.CONTINUATION_MORE )\n+\n+if ( continuation == ChunkingChannelBuffer.CONTINUATION_MORE )\n         {\n             PartialRequest partialRequest = partialRequests.get( channel );\n             if ( partialRequest == null )\n@@ -448,9 +438,9 @@ public abstract class Server<T, R> extends SimpleChannelHandler implements Chann\n             bufferToWriteTo.clear();\n             ChunkingChannelBuffer chunkingBuffer = newChunkingBuffer( bufferToWriteTo, channel, chunkSize,\n                     getInternalProtocolVersion(), applicationProtocolVersion );\n-            submitSilent( targetCallExecutor, new TargetCaller( type, channel, context, chunkingBuffer,\n+submitSilent( targetCallExecutor, new TargetCaller( type, channel, context, chunkingBuffer,\n                     bufferToReadFrom ) );\n-        }\n+    }\n     }\n \n     private Byte readContinuationHeader( ChannelBuffer buffer, final Channel channel )\n@@ -458,15 +448,17 @@ public abstract class Server<T, R> extends SimpleChannelHandler implements Chann\n         byte[] header = new byte[2];\n         buffer.readBytes( header );\n         try\n-        {   // Read request header and assert correct internal/application protocol version\n+        {\n+    // Read request header and assert correct internal/application protocol version\n             assertSameProtocolVersion( header, getInternalProtocolVersion(), applicationProtocolVersion );\n         }\n         catch ( final IllegalProtocolVersionException e )\n-        {   // Version mismatch, fail with a good exception back to the client\n+        {\n+    // Version mismatch, fail with a good exception back to the client\n             submitSilent( targetCallExecutor, () -> writeFailureResponse( e, newChunkingBuffer( channel ) ) );\n             return null;\n         }\n-        return (byte) (header[0] & 0x1);\n+        return (byte) (header[0] & 0x1 );\n     }\n \n     protected void writeFailureResponse( Throwable exception, ChunkingChannelBuffer buffer )\n@@ -497,16 +489,14 @@ public abstract class Server<T, R> extends SimpleChannelHandler implements Chann\n         int eventIdentifier = buffer.readInt();\n         long neoTx = buffer.readLong();\n         long checksum = buffer.readLong();\n-\n-        RequestContext readRequestContext =\n-                new RequestContext( sessionId, machineId, eventIdentifier, neoTx, checksum );\n-\n-        // verify checksum only if there are transactions committed in the store\n-        if ( neoTx > TransactionIdStore.BASE_TX_ID )\n+RequestContext readRequestContext = new RequestContext( sessionId, machineId, eventIdentifier, neoTx, checksum );\n+    // verify checksum only if there are transactions committed in the store\n+        if ( neoTx> TransactionIdStore.BASE_TX_ID )\n         {\n             txVerifier.assertMatch( neoTx, checksum );\n         }\n-        return readRequestContext;\n+\n+return readRequestContext;\n     }\n \n     protected abstract RequestType getRequestContext( byte id );\n@@ -519,7 +509,8 @@ public abstract class Server<T, R> extends SimpleChannelHandler implements Chann\n         {\n             connectedSlaveChannels.add( channel, slave );\n         }\n-        return ChannelBuffers.dynamicBuffer();\n+\n+return ChannelBuffers.dynamicBuffer();\n     }\n \n     protected IdleChannelReaper.Request unmapSlave( Channel channel )\n@@ -555,9 +546,8 @@ public abstract class Server<T, R> extends SimpleChannelHandler implements Chann\n         private final ChunkingChannelBuffer targetBuffer;\n         private final ChannelBuffer bufferToReadFrom;\n \n-        TargetCaller( RequestType type, Channel channel, RequestContext context,\n-                      ChunkingChannelBuffer targetBuffer, ChannelBuffer bufferToReadFrom )\n-        {\n+        TargetCaller( RequestType type, Channel channel, RequestContext context, ChunkingChannelBuffer targetBuffer, ChannelBuffer bufferToReadFrom )\n+{\n             this.type = type;\n             this.channel = channel;\n             this.context = context;\n@@ -611,7 +601,7 @@ public abstract class Server<T, R> extends SimpleChannelHandler implements Chann\n         public Visitor<CommittedTransactionRepresentation,Exception> transactions()\n         {\n             targetBuffer.writeByte( 1 );\n-            return new CommittedTransactionSerializer( new NetworkFlushableChannel(  targetBuffer ) );\n+            return new CommittedTransactionSerializer( new NetworkFlushableChannel( targetBuffer ) );\n         }\n     }\n \n@@ -633,4 +623,4 @@ public abstract class Server<T, R> extends SimpleChannelHandler implements Chann\n             this.buffer.writeBytes( buffer );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 56
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}