{
    "project_name": "Internet2-grouper",
    "error_id": "93",
    "information": {
        "errors": [
            {
                "line": "24",
                "severity": "warning",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": " * style license a copy of which has been included with this distribution in\n * the LICENSE.txt file.\n * \n * Created on 07. March 2004 by Joe Walnes\n */\npackage edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.xml.xppdom;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/93/Xpp3DomBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/intellij/93/Xpp3DomBuilder.java\nindex d9820c3cd39..bb2e633c78d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/93/Xpp3DomBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/intellij/93/Xpp3DomBuilder.java\n@@ -1,12 +1,12 @@\n /**\r\n  * Copyright 2014 Internet2\r\n- *\r\n+ * <p>\r\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  * you may not use this file except in compliance with the License.\r\n  * You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n+ * <p>\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ * <p>\r\n  * Unless required by applicable law or agreed to in writing, software\r\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n@@ -21,9 +21,10 @@\n  * The software in this package is published under the terms of the BSD\r\n  * style license a copy of which has been included with this distribution in\r\n  * the LICENSE.txt file.\r\n- * \r\n+ *\r\n  * Created on 07. March 2004 by Joe Walnes\r\n  */\r\n+\r\n package edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.xml.xppdom;\r\n \r\n import org.xmlpull.mxp1.MXParser;\r\n@@ -34,81 +35,81 @@ import java.util.ArrayList;\n import java.util.List;\r\n \r\n public class Xpp3DomBuilder {\r\n-    public static Xpp3Dom build(Reader reader)\r\n-            throws Exception {\r\n-        List elements = new ArrayList();\r\n-\r\n-        List values = new ArrayList();\r\n+  public static Xpp3Dom build(Reader reader)\r\n+    throws Exception {\r\n+    List elements = new ArrayList();\r\n \r\n-        Xpp3Dom node = null;\r\n+    List values = new ArrayList();\r\n \r\n-        XmlPullParser parser = new MXParser();\r\n+    Xpp3Dom node = null;\r\n \r\n-        parser.setInput(reader);\r\n+    XmlPullParser parser = new MXParser();\r\n \r\n-        int eventType = parser.getEventType();\r\n+    parser.setInput(reader);\r\n \r\n-        while (eventType != XmlPullParser.END_DOCUMENT) {\r\n-            if (eventType == XmlPullParser.START_TAG) {\r\n-                String rawName = parser.getName();\r\n+    int eventType = parser.getEventType();\r\n \r\n-                Xpp3Dom child = new Xpp3Dom(rawName);\r\n+    while (eventType != XmlPullParser.END_DOCUMENT) {\r\n+      if (eventType == XmlPullParser.START_TAG) {\r\n+        String rawName = parser.getName();\r\n \r\n-                int depth = elements.size();\r\n+        Xpp3Dom child = new Xpp3Dom(rawName);\r\n \r\n-                if (depth > 0) {\r\n-                    Xpp3Dom parent = (Xpp3Dom) elements.get(depth - 1);\r\n+        int depth = elements.size();\r\n \r\n-                    parent.addChild(child);\r\n-                }\r\n+        if (depth > 0) {\r\n+          Xpp3Dom parent = (Xpp3Dom) elements.get(depth - 1);\r\n \r\n-                elements.add(child);\r\n+          parent.addChild(child);\r\n+        }\r\n \r\n-                values.add(new StringBuffer());\r\n+        elements.add(child);\r\n \r\n-                int attributesSize = parser.getAttributeCount();\r\n+        values.add(new StringBuffer());\r\n \r\n-                for (int i = 0; i < attributesSize; i++) {\r\n-                    String name = parser.getAttributeName(i);\r\n+        int attributesSize = parser.getAttributeCount();\r\n \r\n-                    String value = parser.getAttributeValue(i);\r\n+        for (int i = 0; i < attributesSize; i++) {\r\n+          String name = parser.getAttributeName(i);\r\n \r\n-                    child.setAttribute(name, value);\r\n-                }\r\n-            } else if (eventType == XmlPullParser.TEXT) {\r\n-                int depth = values.size() - 1;\r\n+          String value = parser.getAttributeValue(i);\r\n \r\n-                StringBuffer valueBuffer = (StringBuffer) values.get(depth);\r\n+          child.setAttribute(name, value);\r\n+        }\r\n+      } else if (eventType == XmlPullParser.TEXT) {\r\n+        int depth = values.size() - 1;\r\n \r\n-                valueBuffer.append(parser.getText());\r\n-            } else if (eventType == XmlPullParser.END_TAG) {\r\n-                int depth = elements.size() - 1;\r\n+        StringBuffer valueBuffer = (StringBuffer) values.get(depth);\r\n \r\n-                Xpp3Dom finalNode = (Xpp3Dom) elements.remove(depth);\r\n+        valueBuffer.append(parser.getText());\r\n+      } else if (eventType == XmlPullParser.END_TAG) {\r\n+        int depth = elements.size() - 1;\r\n \r\n-                String accumulatedValue = (values.remove(depth)).toString();\r\n+        Xpp3Dom finalNode = (Xpp3Dom) elements.remove(depth);\r\n \r\n-                String finishedValue;\r\n+        String accumulatedValue = (values.remove(depth)).toString();\r\n \r\n-                if (0 == accumulatedValue.length()) {\r\n-                    finishedValue = null;\r\n-                } else {\r\n-                    finishedValue = accumulatedValue;\r\n-                }\r\n+        String finishedValue;\r\n \r\n-                finalNode.setValue(finishedValue);\r\n+        if (0 == accumulatedValue.length()) {\r\n+          finishedValue = null;\r\n+        } else {\r\n+          finishedValue = accumulatedValue;\r\n+        }\r\n \r\n-                if (0 == depth) {\r\n-                    node = finalNode;\r\n-                }\r\n-            }\r\n+        finalNode.setValue(finishedValue);\r\n \r\n-            eventType = parser.next();\r\n+        if (0 == depth) {\r\n+          node = finalNode;\r\n         }\r\n+      }\r\n \r\n-        reader.close();\r\n-\r\n-        return node;\r\n+      eventType = parser.next();\r\n     }\r\n \r\n+    reader.close();\r\n+\r\n+    return node;\r\n+  }\r\n+\r\n }\r\n",
            "diff_size": 75
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/93/Xpp3DomBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/naturalize/93/Xpp3DomBuilder.java\nindex d9820c3cd39..ab498577129 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/93/Xpp3DomBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/naturalize/93/Xpp3DomBuilder.java\n@@ -111,4 +111,4 @@ public class Xpp3DomBuilder {\n         return node;\r\n     }\r\n \r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/93/Xpp3DomBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/codebuff/93/Xpp3DomBuilder.java\nindex d9820c3cd39..040fef59621 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/93/Xpp3DomBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/codebuff/93/Xpp3DomBuilder.java\n@@ -24,91 +24,72 @@\n  * \r\n  * Created on 07. March 2004 by Joe Walnes\r\n  */\r\n-package edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.xml.xppdom;\r\n-\r\n-import org.xmlpull.mxp1.MXParser;\r\n-import org.xmlpull.v1.XmlPullParser;\r\n-\r\n-import java.io.Reader;\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-\r\n-public class Xpp3DomBuilder {\r\n-    public static Xpp3Dom build(Reader reader)\r\n-            throws Exception {\r\n-        List elements = new ArrayList();\r\n-\r\n-        List values = new ArrayList();\r\n-\r\n-        Xpp3Dom node = null;\r\n-\r\n-        XmlPullParser parser = new MXParser();\r\n-\r\n-        parser.setInput(reader);\r\n-\r\n-        int eventType = parser.getEventType();\r\n-\r\n-        while (eventType != XmlPullParser.END_DOCUMENT) {\r\n-            if (eventType == XmlPullParser.START_TAG) {\r\n-                String rawName = parser.getName();\r\n-\r\n-                Xpp3Dom child = new Xpp3Dom(rawName);\r\n-\r\n-                int depth = elements.size();\r\n-\r\n-                if (depth > 0) {\r\n-                    Xpp3Dom parent = (Xpp3Dom) elements.get(depth - 1);\r\n-\r\n-                    parent.addChild(child);\r\n-                }\r\n-\r\n-                elements.add(child);\r\n-\r\n-                values.add(new StringBuffer());\r\n-\r\n-                int attributesSize = parser.getAttributeCount();\r\n-\r\n-                for (int i = 0; i < attributesSize; i++) {\r\n-                    String name = parser.getAttributeName(i);\r\n-\r\n-                    String value = parser.getAttributeValue(i);\r\n-\r\n-                    child.setAttribute(name, value);\r\n-                }\r\n-            } else if (eventType == XmlPullParser.TEXT) {\r\n-                int depth = values.size() - 1;\r\n-\r\n-                StringBuffer valueBuffer = (StringBuffer) values.get(depth);\r\n-\r\n-                valueBuffer.append(parser.getText());\r\n-            } else if (eventType == XmlPullParser.END_TAG) {\r\n-                int depth = elements.size() - 1;\r\n-\r\n-                Xpp3Dom finalNode = (Xpp3Dom) elements.remove(depth);\r\n-\r\n-                String accumulatedValue = (values.remove(depth)).toString();\r\n-\r\n-                String finishedValue;\r\n-\r\n-                if (0 == accumulatedValue.length()) {\r\n-                    finishedValue = null;\r\n-                } else {\r\n-                    finishedValue = accumulatedValue;\r\n-                }\r\n-\r\n-                finalNode.setValue(finishedValue);\r\n-\r\n-                if (0 == depth) {\r\n-                    node = finalNode;\r\n-                }\r\n-            }\r\n-\r\n-            eventType = parser.next();\r\n-        }\r\n-\r\n-        reader.close();\r\n-\r\n-        return node;\r\n-    }\r\n-\r\n-}\r\n+package edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.xml.xppdom;\n+\n+import org.xmlpull.mxp1.MXParser;\n+import org.xmlpull.v1.XmlPullParser;\n+import java.io.Reader;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+\n+public class Xpp3DomBuilder {\n+    public static Xpp3Dom build(Reader reader) throws Exception {\n+        List elements = new ArrayList();\n+        List values = new ArrayList();\n+        Xpp3Dom node = null;\n+        XmlPullParser parser = new MXParser();\n+        parser.setInput(reader);\n+\n+        int eventType = parser.getEventType();\n+        while (eventType != XmlPullParser.END_DOCUMENT) {\n+            if (eventType == XmlPullParser.START_TAG) {\n+                String rawName = parser.getName();\n+                Xpp3Dom child = new Xpp3Dom(rawName);\n+                int depth = elements.size();\n+\n+                if (depth > 0) {\n+                    Xpp3Dom parent = (Xpp3Dom) elements.get(depth - 1);\n+                    parent.addChild(child);\n+                }\n+\n+                elements.add(child);\n+                values.add(new StringBuffer());\n+\n+                int attributesSize = parser.getAttributeCount();\n+\n+                for (int i = 0; i < attributesSize; i++) {\n+                    String name = parser.getAttributeName(i);\n+                    String value = parser.getAttributeValue(i);\n+                    child.setAttribute(name, value);\n+                }\n+            } else if (eventType == XmlPullParser.TEXT) {\n+                int depth = values.size() - 1;\n+                StringBuffer valueBuffer = (StringBuffer) values.get(depth);\n+                valueBuffer.append(parser.getText());\n+            } else if (eventType == XmlPullParser.END_TAG) {\n+                       int depth = elements.size() - 1;\n+                       Xpp3Dom finalNode = (Xpp3Dom) elements.remove(depth);\n+                       String accumulatedValue = (values.remove(depth)).toString();\n+                       String finishedValue;\n+\n+                       if (0 == accumulatedValue.length()) {\n+                           finishedValue = null;\n+                       } else {\n+                           finishedValue = accumulatedValue;\n+                       }\n+\n+                       finalNode.setValue(finishedValue);\n+\n+                       if (0 == depth) {\n+                           node = finalNode;\n+                       }\n+                   }\n+\n+            eventType = parser.next();\n+        }\n+\n+        reader.close();\n+        return node;\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 88
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}