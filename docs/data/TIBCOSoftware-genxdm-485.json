{
    "project_name": "TIBCOSoftware-genxdm",
    "error_id": "485",
    "information": {
        "errors": [
            {
                "line": "41",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "final class IdentityScopeKey extends IdentityScope\n{\n\tpublic final HashMap<IdentityTuple, IdentityVariant> m_qualifiedTargets = new HashMap<IdentityTuple, IdentityVariant>();\n\n\tpublic IdentityScopeKey(final int elementIndex, final IdentityConstraint constraint, final SchemaExceptionHandler errorHandler, final LocationInSchema location)\n\t{",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "43",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/485/IdentityScopeKey.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/485/IdentityScopeKey.java\nindex bfe47c25b40..16625695258 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/485/IdentityScopeKey.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/485/IdentityScopeKey.java\n@@ -38,7 +38,7 @@ import org.genxdm.xs.resolve.LocationInSchema;\n  */\n final class IdentityScopeKey extends IdentityScope\n {\n-\tpublic final HashMap<IdentityTuple, IdentityVariant> m_qualifiedTargets = new HashMap<IdentityTuple, IdentityVariant>();\n+public final HashMap<IdentityTuple, IdentityVariant> m_qualifiedTargets = new HashMap<IdentityTuple, IdentityVariant>();\n \n \tpublic IdentityScopeKey(final int elementIndex, final IdentityConstraint constraint, final SchemaExceptionHandler errorHandler, final LocationInSchema location)\n \t{\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/485/IdentityScopeKey.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/485/IdentityScopeKey.java\nindex bfe47c25b40..a9b2a6b8396 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/485/IdentityScopeKey.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/485/IdentityScopeKey.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright (c) 2009-2010 TIBCO Software Inc.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.genxdm.processor.w3c.xs.validation.impl;\n \n import java.util.ArrayList;\n@@ -30,62 +31,59 @@ import org.genxdm.xs.resolve.LocationInSchema;\n \n /**\n  * Specialization of a scope for xs:key and xs:unique.\n- * \n+ *\n  * Note: According to the XML Schema Part 1 Specification, both xs:key and xs:unique can be referenced by xs:keyref.\n  * This is why this class is used to represent both xs:key and xs:unique. However, there are some differences. Both key\n  * and unique assert uniqueness, with respect to the content identified by the selector, of the tuples resulting from\n  * the fields. Only key further requires that all selected content has such tuples.\n  */\n-final class IdentityScopeKey extends IdentityScope\n-{\n-\tpublic final HashMap<IdentityTuple, IdentityVariant> m_qualifiedTargets = new HashMap<IdentityTuple, IdentityVariant>();\n+final class IdentityScopeKey extends IdentityScope {\n+    public final HashMap<IdentityTuple, IdentityVariant> m_qualifiedTargets =\n+        new HashMap<IdentityTuple, IdentityVariant>();\n \n-\tpublic IdentityScopeKey(final int elementIndex, final IdentityConstraint constraint, final SchemaExceptionHandler errorHandler, final LocationInSchema location)\n-\t{\n-\t\tsuper(elementIndex, constraint, errorHandler, location);\n-\t}\n+    public IdentityScopeKey(final int elementIndex, final IdentityConstraint constraint,\n+                            final SchemaExceptionHandler errorHandler,\n+                            final LocationInSchema location) {\n+        super(elementIndex, constraint, errorHandler, location);\n+    }\n \n-\t@Override\n-\tprotected void onKeysComplete(final ArrayList<IdentityKey> keyValues, final int elementIndex) throws AbortException\n-\t{\n-\t    final IdentityTuple key = new IdentityTuple(keyValues);\n+    @Override\n+    protected void onKeysComplete(final ArrayList<IdentityKey> keyValues, final int elementIndex)\n+        throws AbortException {\n+        final IdentityTuple key = new IdentityTuple(keyValues);\n \n-\t\tfinal IdentityVariant mapped = m_qualifiedTargets.get(key);\n+        final IdentityVariant mapped = m_qualifiedTargets.get(key);\n \n-\t\tif (mapped == null || mapped.isDanglingRefs())\n-\t\t{\n-\t\t\t// List was the undeclared refs\n-\t\t\tm_qualifiedTargets.put(key, new IdentityVariant(Boolean.TRUE));\n-\t\t}\n-\t\telse if (mapped.isValue())\n-\t\t{\n-\t\t\tm_errorHandler.error(new SrcDuplicateKeyTargetException(getConstraint().getName(), keyValues, m_location));\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\t// Unexpected.\n-\t\t\tthrow new AssertionError();\n-\t\t}\n-\t}\n+        if (mapped == null || mapped.isDanglingRefs()) {\n+            // List was the undeclared refs\n+            m_qualifiedTargets.put(key, new IdentityVariant(Boolean.TRUE));\n+        } else if (mapped.isValue()) {\n+            m_errorHandler.error(\n+                new SrcDuplicateKeyTargetException(getConstraint().getName(), keyValues,\n+                    m_location));\n+        } else {\n+            // Unexpected.\n+            throw new AssertionError();\n+        }\n+    }\n \n-\t@Override\n-\tprotected void onScopeEnd(final int elementIndex, final Locatable locatable) throws AbortException\n-\t{\n-\t\tfinal IdentityConstraint constraint = getConstraint();\n-\t\tfinal IdentityConstraintKind category = constraint.getCategory();\n-\t\t// xs:key must have bound values while xs:unique need not exist.\n-\t\tif (category.isKey())\n-\t\t{\n-\t\t\tfinal ArrayList<IdentityField> elementHandlers = m_fieldEvals.get(elementIndex);\n-\t\t\tPreCondition.assertArgumentNotNull(elementHandlers, \"elementHandlers\");\n-\t\t\tif (m_boundFields.get(elementIndex) < elementHandlers.size())\n-\t\t\t{\n-\t\t\t\tfinal LocationInSchema frozenLocation = locatable.getLocation();\n-\t\t\t\tfor (int i = 0; i < elementHandlers.size(); i++)\n-\t\t\t\t{\n-\t\t\t\t\tm_errorHandler.error(new CvcMissingKeyFieldException(constraint.getName(), i + 1, frozenLocation));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n+    @Override\n+    protected void onScopeEnd(final int elementIndex, final Locatable locatable)\n+        throws AbortException {\n+        final IdentityConstraint constraint = getConstraint();\n+        final IdentityConstraintKind category = constraint.getCategory();\n+        // xs:key must have bound values while xs:unique need not exist.\n+        if (category.isKey()) {\n+            final ArrayList<IdentityField> elementHandlers = m_fieldEvals.get(elementIndex);\n+            PreCondition.assertArgumentNotNull(elementHandlers, \"elementHandlers\");\n+            if (m_boundFields.get(elementIndex) < elementHandlers.size()) {\n+                final LocationInSchema frozenLocation = locatable.getLocation();\n+                for (int i = 0; i < elementHandlers.size(); i++) {\n+                    m_errorHandler.error(\n+                        new CvcMissingKeyFieldException(constraint.getName(), i + 1,\n+                            frozenLocation));\n+                }\n+            }\n+        }\n+    }\n }\n",
            "diff_size": 54
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "43",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/485/IdentityScopeKey.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/485/IdentityScopeKey.java\nindex bfe47c25b40..abd7bd22123 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/485/IdentityScopeKey.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/485/IdentityScopeKey.java\n@@ -38,54 +38,53 @@ import org.genxdm.xs.resolve.LocationInSchema;\n  */\n final class IdentityScopeKey extends IdentityScope\n {\n-\tpublic final HashMap<IdentityTuple, IdentityVariant> m_qualifiedTargets = new HashMap<IdentityTuple, IdentityVariant>();\n+    public final HashMap<IdentityTuple, IdentityVariant> m_qualifiedTargets = new HashMap<IdentityTuple, IdentityVariant>();\n \n \tpublic IdentityScopeKey(final int elementIndex, final IdentityConstraint constraint, final SchemaExceptionHandler errorHandler, final LocationInSchema location)\n \t{\n-\t\tsuper(elementIndex, constraint, errorHandler, location);\n-\t}\n+    super(elementIndex, constraint, errorHandler, location);\n+    }\n \n \t@Override\n \tprotected void onKeysComplete(final ArrayList<IdentityKey> keyValues, final int elementIndex) throws AbortException\n \t{\n \t    final IdentityTuple key = new IdentityTuple(keyValues);\n-\n-\t\tfinal IdentityVariant mapped = m_qualifiedTargets.get(key);\n+final IdentityVariant mapped = m_qualifiedTargets.get(key);\n \n \t\tif (mapped == null || mapped.isDanglingRefs())\n \t\t{\n-\t\t\t// List was the undeclared refs\n+    // List was the undeclared refs\n \t\t\tm_qualifiedTargets.put(key, new IdentityVariant(Boolean.TRUE));\n-\t\t}\n+    }\n \t\telse if (mapped.isValue())\n \t\t{\n-\t\t\tm_errorHandler.error(new SrcDuplicateKeyTargetException(getConstraint().getName(), keyValues, m_location));\n-\t\t}\n+    m_errorHandler.error(new SrcDuplicateKeyTargetException(getConstraint().getName(), keyValues, m_location));\n+    }\n \t\telse\n \t\t{\n-\t\t\t// Unexpected.\n+    // Unexpected.\n \t\t\tthrow new AssertionError();\n-\t\t}\n-\t}\n+    }\n+    }\n \n \t@Override\n \tprotected void onScopeEnd(final int elementIndex, final Locatable locatable) throws AbortException\n \t{\n-\t\tfinal IdentityConstraint constraint = getConstraint();\n+    final IdentityConstraint constraint = getConstraint();\n \t\tfinal IdentityConstraintKind category = constraint.getCategory();\n \t\t// xs:key must have bound values while xs:unique need not exist.\n \t\tif (category.isKey())\n \t\t{\n-\t\t\tfinal ArrayList<IdentityField> elementHandlers = m_fieldEvals.get(elementIndex);\n+    final ArrayList<IdentityField> elementHandlers = m_fieldEvals.get(elementIndex);\n \t\t\tPreCondition.assertArgumentNotNull(elementHandlers, \"elementHandlers\");\n \t\t\tif (m_boundFields.get(elementIndex) < elementHandlers.size())\n \t\t\t{\n-\t\t\t\tfinal LocationInSchema frozenLocation = locatable.getLocation();\n+    final LocationInSchema frozenLocation = locatable.getLocation();\n \t\t\t\tfor (int i = 0; i < elementHandlers.size(); i++)\n \t\t\t\t{\n-\t\t\t\t\tm_errorHandler.error(new CvcMissingKeyFieldException(constraint.getName(), i + 1, frozenLocation));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-}\n+    m_errorHandler.error(new CvcMissingKeyFieldException(constraint.getName(), i + 1, frozenLocation));\n+    }\n+    }\n+    }\n+    }\n+    }\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/485/IdentityScopeKey.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/485/IdentityScopeKey.java\nindex bfe47c25b40..105f5987149 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/485/IdentityScopeKey.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/485/IdentityScopeKey.java\n@@ -17,7 +17,6 @@ package org.genxdm.processor.w3c.xs.validation.impl;\n \n import java.util.ArrayList;\n import java.util.HashMap;\n-\n import org.genxdm.exceptions.PreCondition;\n import org.genxdm.processor.w3c.xs.exception.cvc.CvcMissingKeyFieldException;\n import org.genxdm.processor.w3c.xs.exception.src.SrcDuplicateKeyTargetException;\n@@ -36,56 +35,57 @@ import org.genxdm.xs.resolve.LocationInSchema;\n  * and unique assert uniqueness, with respect to the content identified by the selector, of the tuples resulting from\n  * the fields. Only key further requires that all selected content has such tuples.\n  */\n+\n final class IdentityScopeKey extends IdentityScope\n {\n-\tpublic final HashMap<IdentityTuple, IdentityVariant> m_qualifiedTargets = new HashMap<IdentityTuple, IdentityVariant>();\n-\n-\tpublic IdentityScopeKey(final int elementIndex, final IdentityConstraint constraint, final SchemaExceptionHandler errorHandler, final LocationInSchema location)\n-\t{\n-\t\tsuper(elementIndex, constraint, errorHandler, location);\n-\t}\n-\n-\t@Override\n-\tprotected void onKeysComplete(final ArrayList<IdentityKey> keyValues, final int elementIndex) throws AbortException\n-\t{\n-\t    final IdentityTuple key = new IdentityTuple(keyValues);\n+    public final HashMap<IdentityTuple, IdentityVariant> m_qualifiedTargets = new HashMap<IdentityTuple, IdentityVariant>();\n \n-\t\tfinal IdentityVariant mapped = m_qualifiedTargets.get(key);\n+    public IdentityScopeKey(final int elementIndex, final IdentityConstraint constraint, final SchemaExceptionHandler errorHandler, final LocationInSchema location)\n+    {\n+        super(elementIndex, constraint, errorHandler, location);\n+    }\n \n-\t\tif (mapped == null || mapped.isDanglingRefs())\n-\t\t{\n-\t\t\t// List was the undeclared refs\n-\t\t\tm_qualifiedTargets.put(key, new IdentityVariant(Boolean.TRUE));\n-\t\t}\n-\t\telse if (mapped.isValue())\n-\t\t{\n-\t\t\tm_errorHandler.error(new SrcDuplicateKeyTargetException(getConstraint().getName(), keyValues, m_location));\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\t// Unexpected.\n-\t\t\tthrow new AssertionError();\n-\t\t}\n-\t}\n+    @Override\n+    protected void onKeysComplete(final ArrayList<IdentityKey> keyValues, final int elementIndex)\n+        throws AbortException\n+    {\n+        final IdentityTuple key = new IdentityTuple(keyValues);\n+        final IdentityVariant mapped = m_qualifiedTargets.get(key);\n+        if (mapped == null || mapped.isDanglingRefs())\n+        {\n+            // List was the undeclared refs\n+            m_qualifiedTargets.put(key, new IdentityVariant(Boolean.TRUE));\n+        }\n+        else if (mapped.isValue())\n+        {\n+            m_errorHandler.error(new SrcDuplicateKeyTargetException(getConstraint().getName(), keyValues, m_location));\n+        }\n+        else\n+        {\n+            // Unexpected.\n+            throw new AssertionError();\n+        }\n+    }\n \n-\t@Override\n-\tprotected void onScopeEnd(final int elementIndex, final Locatable locatable) throws AbortException\n-\t{\n-\t\tfinal IdentityConstraint constraint = getConstraint();\n-\t\tfinal IdentityConstraintKind category = constraint.getCategory();\n-\t\t// xs:key must have bound values while xs:unique need not exist.\n-\t\tif (category.isKey())\n-\t\t{\n-\t\t\tfinal ArrayList<IdentityField> elementHandlers = m_fieldEvals.get(elementIndex);\n-\t\t\tPreCondition.assertArgumentNotNull(elementHandlers, \"elementHandlers\");\n-\t\t\tif (m_boundFields.get(elementIndex) < elementHandlers.size())\n-\t\t\t{\n-\t\t\t\tfinal LocationInSchema frozenLocation = locatable.getLocation();\n-\t\t\t\tfor (int i = 0; i < elementHandlers.size(); i++)\n-\t\t\t\t{\n-\t\t\t\t\tm_errorHandler.error(new CvcMissingKeyFieldException(constraint.getName(), i + 1, frozenLocation));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-}\n+    @Override\n+    protected void onScopeEnd(final int elementIndex, final Locatable locatable)\n+        throws AbortException\n+    {\n+        final IdentityConstraint constraint = getConstraint();\n+        final IdentityConstraintKind category = constraint.getCategory();\n+        // xs:key must have bound values while xs:unique need not exist.\n+        if (category.isKey())\n+        {\n+            final ArrayList<IdentityField> elementHandlers = m_fieldEvals.get(elementIndex);\n+            PreCondition.assertArgumentNotNull(elementHandlers, \"elementHandlers\");\n+            if (m_boundFields.get(elementIndex) < elementHandlers.size())\n+            {\n+                final LocationInSchema frozenLocation = locatable.getLocation();\n+                for (int i = 0; i < elementHandlers.size() ; i++)\n+                {\n+                    m_errorHandler.error(new CvcMissingKeyFieldException(constraint.getName(), i + 1, frozenLocation));\n+                }\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 60
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "43",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/485/IdentityScopeKey.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/485/IdentityScopeKey.java\nindex bfe47c25b40..16625695258 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/485/IdentityScopeKey.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/485/IdentityScopeKey.java\n@@ -38,7 +38,7 @@ import org.genxdm.xs.resolve.LocationInSchema;\n  */\n final class IdentityScopeKey extends IdentityScope\n {\n-\tpublic final HashMap<IdentityTuple, IdentityVariant> m_qualifiedTargets = new HashMap<IdentityTuple, IdentityVariant>();\n+public final HashMap<IdentityTuple, IdentityVariant> m_qualifiedTargets = new HashMap<IdentityTuple, IdentityVariant>();\n \n \tpublic IdentityScopeKey(final int elementIndex, final IdentityConstraint constraint, final SchemaExceptionHandler errorHandler, final LocationInSchema location)\n \t{\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "43",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/485/IdentityScopeKey.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/485/IdentityScopeKey.java\nindex bfe47c25b40..78cab9976db 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/485/IdentityScopeKey.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/485/IdentityScopeKey.java\n@@ -38,7 +38,7 @@ import org.genxdm.xs.resolve.LocationInSchema;\n  */\n final class IdentityScopeKey extends IdentityScope\n {\n-\tpublic final HashMap<IdentityTuple, IdentityVariant> m_qualifiedTargets = new HashMap<IdentityTuple, IdentityVariant>();\n+    public final HashMap<IdentityTuple, IdentityVariant> m_qualifiedTargets = new HashMap<IdentityTuple, IdentityVariant>();\n \n \tpublic IdentityScopeKey(final int elementIndex, final IdentityConstraint constraint, final SchemaExceptionHandler errorHandler, final LocationInSchema location)\n \t{\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}