{
    "project_name": "graphfoundation-ongdb",
    "error_id": "245",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "55",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/245/ResultFormatV1.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/245/ResultFormatV1.java\nindex 5314bda17b7..791ad9e1cf5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/245/ResultFormatV1.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/245/ResultFormatV1.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.causalclustering.routing.load_balancing.procedure;\n \n import java.util.ArrayList;\n@@ -44,91 +45,91 @@ import static org.neo4j.causalclustering.routing.procedure.RoutingResultFormatHe\n  */\n public class ResultFormatV1\n {\n-    private static final String ROLE_KEY = \"role\";\n-    private static final String ADDRESSES_KEY = \"addresses\";\n-\n-    private ResultFormatV1()\n-    {\n-    }\n-\n-    static Object[] build( LoadBalancingProcessor.Result result )\n-    {\n-        Object[] routers = result.routeEndpoints().stream().map( Endpoint::address ).map( SocketAddress::toString ).toArray();\n-        Object[] readers = result.readEndpoints().stream().map( Endpoint::address ).map( SocketAddress::toString ).toArray();\n-        Object[] writers = result.writeEndpoints().stream().map( Endpoint::address ).map( SocketAddress::toString ).toArray();\n-\n-        List<Map<String,Object>> servers = new ArrayList<>();\n+  private static final String ROLE_KEY = \"role\";\n+  private static final String ADDRESSES_KEY = \"addresses\";\n \n-        if ( writers.length > 0 )\n-        {\n-            Map<String,Object> map = new TreeMap<>();\n+  private ResultFormatV1()\n+  {\n+  }\n \n-            map.put( ROLE_KEY, WRITE.name() );\n-            map.put( ADDRESSES_KEY, writers );\n+  static Object[] build(LoadBalancingProcessor.Result result)\n+  {\n+    Object[] routers = result.routeEndpoints().stream().map(Endpoint::address).map(SocketAddress::toString).toArray();\n+    Object[] readers = result.readEndpoints().stream().map(Endpoint::address).map(SocketAddress::toString).toArray();\n+    Object[] writers = result.writeEndpoints().stream().map(Endpoint::address).map(SocketAddress::toString).toArray();\n \n-            servers.add( map );\n-        }\n+    List<Map<String, Object>> servers = new ArrayList<>();\n \n-        if ( readers.length > 0 )\n-        {\n-            Map<String,Object> map = new TreeMap<>();\n-\n-            map.put( ROLE_KEY, READ.name() );\n-            map.put( ADDRESSES_KEY, readers );\n+    if (writers.length > 0)\n+    {\n+      Map<String, Object> map = new TreeMap<>();\n \n-            servers.add( map );\n-        }\n+      map.put(ROLE_KEY, WRITE.name());\n+      map.put(ADDRESSES_KEY, writers);\n \n-        if ( routers.length > 0 )\n-        {\n-            Map<String,Object> map = new TreeMap<>();\n+      servers.add(map);\n+    }\n \n-            map.put( ROLE_KEY, ROUTE.name() );\n-            map.put( ADDRESSES_KEY, routers );\n+    if (readers.length > 0)\n+    {\n+      Map<String, Object> map = new TreeMap<>();\n \n-            servers.add( map );\n-        }\n+      map.put(ROLE_KEY, READ.name());\n+      map.put(ADDRESSES_KEY, readers);\n \n-        long timeToLiveSeconds = MILLISECONDS.toSeconds( result.ttlMillis() );\n-        return new Object[]{timeToLiveSeconds, servers};\n+      servers.add(map);\n     }\n \n-    public static LoadBalancingResult parse( Object[] record )\n+    if (routers.length > 0)\n     {\n-        long timeToLiveSeconds = (long) record[0];\n-        @SuppressWarnings( \"unchecked\" )\n-        List<Map<String,Object>> endpointData = (List<Map<String,Object>>) record[1];\n+      Map<String, Object> map = new TreeMap<>();\n \n-        Map<Role,List<Endpoint>> endpoints = parseRows( endpointData );\n+      map.put(ROLE_KEY, ROUTE.name());\n+      map.put(ADDRESSES_KEY, routers);\n \n-        return new LoadBalancingResult(\n-                endpoints.get( ROUTE ),\n-                endpoints.get( WRITE ),\n-                endpoints.get( READ ),\n-                timeToLiveSeconds * 1000 );\n+      servers.add(map);\n     }\n \n-    public static LoadBalancingResult parse( Map<String,Object> record )\n+    long timeToLiveSeconds = MILLISECONDS.toSeconds(result.ttlMillis());\n+    return new Object[] {timeToLiveSeconds, servers};\n+  }\n+\n+  public static LoadBalancingResult parse(Object[] record)\n+  {\n+    long timeToLiveSeconds = (long) record[0];\n+    @SuppressWarnings(\"unchecked\")\n+    List<Map<String, Object>> endpointData = (List<Map<String, Object>>) record[1];\n+\n+    Map<Role, List<Endpoint>> endpoints = parseRows(endpointData);\n+\n+    return new LoadBalancingResult(\n+        endpoints.get(ROUTE),\n+        endpoints.get(WRITE),\n+        endpoints.get(READ),\n+        timeToLiveSeconds * 1000);\n+  }\n+\n+  public static LoadBalancingResult parse(Map<String, Object> record)\n+  {\n+    return parse(new Object[] {\n+        record.get(ParameterNames.TTL.parameterName()),\n+        record.get(ParameterNames.SERVERS.parameterName())\n+    });\n+  }\n+\n+  private static Map<Role, List<Endpoint>> parseRows(List<Map<String, Object>> result)\n+  {\n+    Map<Role, List<Endpoint>> endpoints = new HashMap<>();\n+    for (Map<String, Object> single : result)\n     {\n-        return parse( new Object[]{\n-                record.get( ParameterNames.TTL.parameterName() ),\n-                record.get( ParameterNames.SERVERS.parameterName() )\n-        } );\n+      Role role = Role.valueOf((String) single.get(\"role\"));\n+      List<Endpoint> addresses = parseEndpoints((Object[]) single.get(\"addresses\"), role);\n+      endpoints.put(role, addresses);\n     }\n \n-    private static Map<Role,List<Endpoint>> parseRows( List<Map<String,Object>> result )\n-    {\n-        Map<Role,List<Endpoint>> endpoints = new HashMap<>();\n-        for ( Map<String,Object> single : result )\n-        {\n-            Role role = Role.valueOf( (String) single.get( \"role\" ) );\n-            List<Endpoint> addresses = parseEndpoints( (Object[]) single.get( \"addresses\" ), role );\n-            endpoints.put( role, addresses );\n-        }\n-\n-        Arrays.stream( Role.values() ).forEach( r -> endpoints.putIfAbsent( r, Collections.emptyList() ) );\n+    Arrays.stream(Role.values()).forEach(r -> endpoints.putIfAbsent(r, Collections.emptyList()));\n \n-        return endpoints;\n-    }\n+    return endpoints;\n+  }\n \n }\n",
            "diff_size": 102
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "61",
                    "column": "20",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "69",
                    "column": "28",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "77",
                    "column": "28",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/245/ResultFormatV1.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/245/ResultFormatV1.java\nindex 5314bda17b7..e75c09f4bad 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/245/ResultFormatV1.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/245/ResultFormatV1.java\n@@ -58,35 +58,28 @@ public class ResultFormatV1\n         Object[] writers = result.writeEndpoints().stream().map( Endpoint::address ).map( SocketAddress::toString ).toArray();\n \n         List<Map<String,Object>> servers = new ArrayList<>();\n-\n-        if ( writers.length > 0 )\n+if ( writers.length> 0 )\n         {\n             Map<String,Object> map = new TreeMap<>();\n-\n-            map.put( ROLE_KEY, WRITE.name() );\n+map.put( ROLE_KEY, WRITE.name() );\n             map.put( ADDRESSES_KEY, writers );\n-\n-            servers.add( map );\n+servers.add( map );\n         }\n \n-        if ( readers.length > 0 )\n+        if ( readers.length> 0 )\n         {\n             Map<String,Object> map = new TreeMap<>();\n-\n-            map.put( ROLE_KEY, READ.name() );\n+map.put( ROLE_KEY, READ.name() );\n             map.put( ADDRESSES_KEY, readers );\n-\n-            servers.add( map );\n+servers.add( map );\n         }\n \n-        if ( routers.length > 0 )\n+        if ( routers.length> 0 )\n         {\n             Map<String,Object> map = new TreeMap<>();\n-\n-            map.put( ROLE_KEY, ROUTE.name() );\n+map.put( ROLE_KEY, ROUTE.name() );\n             map.put( ADDRESSES_KEY, routers );\n-\n-            servers.add( map );\n+servers.add( map );\n         }\n \n         long timeToLiveSeconds = MILLISECONDS.toSeconds( result.ttlMillis() );\n@@ -100,20 +93,12 @@ public class ResultFormatV1\n         List<Map<String,Object>> endpointData = (List<Map<String,Object>>) record[1];\n \n         Map<Role,List<Endpoint>> endpoints = parseRows( endpointData );\n-\n-        return new LoadBalancingResult(\n-                endpoints.get( ROUTE ),\n-                endpoints.get( WRITE ),\n-                endpoints.get( READ ),\n-                timeToLiveSeconds * 1000 );\n+return new LoadBalancingResult( endpoints.get( ROUTE ), endpoints.get( WRITE ), endpoints.get( READ ), timeToLiveSeconds * 1000 );\n     }\n \n     public static LoadBalancingResult parse( Map<String,Object> record )\n     {\n-        return parse( new Object[]{\n-                record.get( ParameterNames.TTL.parameterName() ),\n-                record.get( ParameterNames.SERVERS.parameterName() )\n-        } );\n+        return parse( new Object[]{record.get( ParameterNames.TTL.parameterName() ), record.get( ParameterNames.SERVERS.parameterName() )} );\n     }\n \n     private static Map<Role,List<Endpoint>> parseRows( List<Map<String,Object>> result )\n@@ -127,8 +112,6 @@ public class ResultFormatV1\n         }\n \n         Arrays.stream( Role.values() ).forEach( r -> endpoints.putIfAbsent( r, Collections.emptyList() ) );\n-\n-        return endpoints;\n+return endpoints;\n     }\n-\n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 30
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}