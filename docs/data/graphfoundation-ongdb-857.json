{
    "project_name": "graphfoundation-ongdb",
    "error_id": "857",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "42",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "13",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "174",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "182",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "206",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/857/DynamicRecord.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/857/DynamicRecord.java\nindex 54d9377f0e9..73982bf875c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/857/DynamicRecord.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/857/DynamicRecord.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.record;\n \n import org.neo4j.kernel.impl.store.PropertyStore;\n@@ -24,193 +25,190 @@ import org.neo4j.kernel.impl.store.PropertyType;\n \n public class DynamicRecord extends AbstractBaseRecord\n {\n-    public static final byte[] NO_DATA = new byte[0];\n-    private static final int MAX_BYTES_IN_TO_STRING = 8;\n-    private static final int MAX_CHARS_IN_TO_STRING = 16;\n-\n-    private byte[] data;\n-    private int length;\n-    private long nextBlock;\n-    private int type;\n-    private boolean startRecord;\n-\n-    /**\n-     * @deprecated use {@link #initialize(boolean, boolean, long, int, int)} instead.\n-     */\n-    @Deprecated\n-    public static DynamicRecord dynamicRecord( long id, boolean inUse )\n-    {\n-        DynamicRecord record = new DynamicRecord( id );\n-        record.setInUse( inUse );\n-        return record;\n-    }\n-\n-    /**\n-     * @deprecated use {@link #initialize(boolean, boolean, long, int, int)} instead.\n-     */\n-    @Deprecated\n-    public static DynamicRecord dynamicRecord( long id, boolean inUse, boolean isStartRecord, long nextBlock, int type,\n-                                               byte [] data )\n-    {\n-        DynamicRecord record = new DynamicRecord( id );\n-        record.setInUse( inUse );\n-        record.setStartRecord( isStartRecord );\n-        record.setNextBlock( nextBlock );\n-        record.setType( type );\n-        record.setData( data );\n-        return record;\n-    }\n-\n-    public DynamicRecord( long id )\n-    {\n-        super( id );\n-    }\n-\n-    public DynamicRecord initialize( boolean inUse, boolean isStartRecord, long nextBlock,\n-            int type, int length )\n-    {\n-        super.initialize( inUse );\n-        this.startRecord = isStartRecord;\n-        this.nextBlock = nextBlock;\n-        this.type = type;\n-        this.data = NO_DATA;\n-        this.length = length;\n-        return this;\n-    }\n-\n-    @Override\n-    public void clear()\n-    {\n-        initialize( false, true, Record.NO_NEXT_BLOCK.intValue(), -1, 0 );\n-    }\n-\n-    public void setStartRecord( boolean startRecord )\n-    {\n-        this.startRecord = startRecord;\n-    }\n-\n-    public boolean isStartRecord()\n-    {\n-        return startRecord;\n-    }\n-\n-    /**\n-     * @return The {@link PropertyType} of this record or null if unset or non valid\n-     */\n-    public PropertyType getType()\n-    {\n-        return PropertyType.getPropertyTypeOrNull( (long) (this.type << 24) );\n-    }\n-\n-    /**\n-     * @return The {@link #type} field of this record, as set by previous invocations to {@link #setType(int)} or\n-     * {@link #initialize(boolean, boolean, long, int, int)}\n-     */\n-    public int getTypeAsInt()\n-    {\n-        return type;\n-    }\n-\n-    public void setType( int type )\n-    {\n-        this.type = type;\n-    }\n-\n-    public void setLength( int length )\n-    {\n-        this.length = length;\n-    }\n-\n-    public void setInUse( boolean inUse, int type )\n-    {\n-        this.type = type;\n-        this.setInUse( inUse );\n-    }\n-\n-    public void setData( byte[] data )\n-    {\n-        this.length = data.length;\n-        this.data = data;\n-    }\n-\n-    public int getLength()\n-    {\n-        return length;\n-    }\n-\n-    public byte[] getData()\n-    {\n-        return data;\n-    }\n-\n-    public long getNextBlock()\n-    {\n-        return nextBlock;\n-    }\n-\n-    public void setNextBlock( long nextBlock )\n-    {\n-        this.nextBlock = nextBlock;\n-    }\n-\n-    @Override\n-    public String toString()\n-    {\n-        StringBuilder buf = new StringBuilder();\n-        buf.append( \"DynamicRecord[\" )\n-                .append( getId() )\n-                .append( \",used=\" ).append( inUse() ).append( ',' )\n-                .append( '(' ).append( length ).append( \"),type=\" );\n-        PropertyType type = getType();\n-        if ( type == null )\n-        {\n-            buf.append( this.type );\n-        }\n-        else\n-        {\n-            buf.append( type.name() );\n-        }\n-        buf.append( \",data=\" );\n-        if ( type == PropertyType.STRING && data.length <= MAX_CHARS_IN_TO_STRING )\n+  public static final byte[] NO_DATA = new byte[0];\n+  private static final int MAX_BYTES_IN_TO_STRING = 8;\n+  private static final int MAX_CHARS_IN_TO_STRING = 16;\n+\n+  private byte[] data;\n+  private int length;\n+  private long nextBlock;\n+  private int type;\n+  private boolean startRecord;\n+\n+  /**\n+   * @deprecated use {@link #initialize(boolean, boolean, long, int, int)} instead.\n+   */\n+  @Deprecated\n+  public static DynamicRecord dynamicRecord(long id, boolean inUse)\n+  {\n+    DynamicRecord record = new DynamicRecord(id);\n+    record.setInUse(inUse);\n+    return record;\n+  }\n+\n+  /**\n+   * @deprecated use {@link #initialize(boolean, boolean, long, int, int)} instead.\n+   */\n+  @Deprecated\n+  public static DynamicRecord dynamicRecord(long id, boolean inUse, boolean isStartRecord, long nextBlock, int type,\n+                                            byte[] data)\n+  {\n+    DynamicRecord record = new DynamicRecord(id);\n+    record.setInUse(inUse);\n+    record.setStartRecord(isStartRecord);\n+    record.setNextBlock(nextBlock);\n+    record.setType(type);\n+    record.setData(data);\n+    return record;\n+  }\n+\n+  public DynamicRecord(long id)\n+  {\n+    super(id);\n+  }\n+\n+  public DynamicRecord initialize(boolean inUse, boolean isStartRecord, long nextBlock,\n+                                  int type, int length)\n+  {\n+    super.initialize(inUse);\n+    this.startRecord = isStartRecord;\n+    this.nextBlock = nextBlock;\n+    this.type = type;\n+    this.data = NO_DATA;\n+    this.length = length;\n+    return this;\n+  }\n+\n+  @Override\n+  public void clear()\n+  {\n+    initialize(false, true, Record.NO_NEXT_BLOCK.intValue(), -1, 0);\n+  }\n+\n+  public void setStartRecord(boolean startRecord)\n+  {\n+    this.startRecord = startRecord;\n+  }\n+\n+  public boolean isStartRecord()\n+  {\n+    return startRecord;\n+  }\n+\n+  /**\n+   * @return The {@link PropertyType} of this record or null if unset or non valid\n+   */\n+  public PropertyType getType()\n+  {\n+    return PropertyType.getPropertyTypeOrNull((long) (this.type << 24));\n+  }\n+\n+  /**\n+   * @return The {@link #type} field of this record, as set by previous invocations to {@link #setType(int)} or\n+   * {@link #initialize(boolean, boolean, long, int, int)}\n+   */\n+  public int getTypeAsInt()\n+  {\n+    return type;\n+  }\n+\n+  public void setType(int type)\n+  {\n+    this.type = type;\n+  }\n+\n+  public void setLength(int length)\n+  {\n+    this.length = length;\n+  }\n+\n+  public void setInUse(boolean inUse, int type)\n+  {\n+    this.type = type;\n+    this.setInUse(inUse);\n+  }\n+\n+  public void setData(byte[] data)\n+  {\n+    this.length = data.length;\n+    this.data = data;\n+  }\n+\n+  public int getLength()\n+  {\n+    return length;\n+  }\n+\n+  public byte[] getData()\n+  {\n+    return data;\n+  }\n+\n+  public long getNextBlock()\n+  {\n+    return nextBlock;\n+  }\n+\n+  public void setNextBlock(long nextBlock)\n+  {\n+    this.nextBlock = nextBlock;\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    StringBuilder buf = new StringBuilder();\n+    buf.append(\"DynamicRecord[\")\n+        .append(getId())\n+        .append(\",used=\").append(inUse()).append(',')\n+        .append('(').append(length).append(\"),type=\");\n+    PropertyType type = getType();\n+    if (type == null)\n+    {\n+      buf.append(this.type);\n+    } else\n+    {\n+      buf.append(type.name());\n+    }\n+    buf.append(\",data=\");\n+    if (type == PropertyType.STRING && data.length <= MAX_CHARS_IN_TO_STRING)\n+    {\n+      buf.append('\"');\n+      buf.append(PropertyStore.decodeString(data));\n+      buf.append(\"\\\",\");\n+    } else\n+    {\n+      buf.append(\"byte[\");\n+      if (data.length <= MAX_BYTES_IN_TO_STRING)\n+      {\n+        for (int i = 0; i < data.length; i++)\n         {\n-            buf.append( '\"' );\n-            buf.append( PropertyStore.decodeString( data ) );\n-            buf.append( \"\\\",\" );\n+          if (i != 0)\n+          {\n+            buf.append(',');\n+          }\n+          buf.append(data[i]);\n         }\n-        else\n-        {\n-            buf.append( \"byte[\" );\n-            if ( data.length <= MAX_BYTES_IN_TO_STRING )\n-            {\n-                for ( int i = 0; i < data.length; i++ )\n-                {\n-                    if ( i != 0 )\n-                    {\n-                        buf.append( ',' );\n-                    }\n-                    buf.append( data[i] );\n-                }\n-            }\n-            else\n-            {\n-                buf.append( \"size=\" ).append( data.length );\n-            }\n-            buf.append( \"],\" );\n-        }\n-        buf.append( \"start=\" ).append( startRecord );\n-        buf.append( \",next=\" ).append( nextBlock ).append( ']' );\n-        return buf.toString();\n-    }\n-\n-    @Override\n-    public DynamicRecord clone()\n-    {\n-        DynamicRecord clone = new DynamicRecord( getId() ).initialize( inUse(),\n-                startRecord, nextBlock, type, length );\n-        if ( data != null )\n-        {\n-            clone.setData( data.clone() );\n-        }\n-        return clone;\n-    }\n+      } else\n+      {\n+        buf.append(\"size=\").append(data.length);\n+      }\n+      buf.append(\"],\");\n+    }\n+    buf.append(\"start=\").append(startRecord);\n+    buf.append(\",next=\").append(nextBlock).append(']');\n+    return buf.toString();\n+  }\n+\n+  @Override\n+  public DynamicRecord clone()\n+  {\n+    DynamicRecord clone = new DynamicRecord(getId()).initialize(inUse(),\n+        startRecord, nextBlock, type, length);\n+    if (data != null)\n+    {\n+      clone.setData(data.clone());\n+    }\n+    return clone;\n+  }\n }\n",
            "diff_size": 199
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/857/DynamicRecord.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/857/DynamicRecord.java\nindex 54d9377f0e9..e6f81d3efe2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/857/DynamicRecord.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/857/DynamicRecord.java\n@@ -49,9 +49,8 @@ public class DynamicRecord extends AbstractBaseRecord\n      * @deprecated use {@link #initialize(boolean, boolean, long, int, int)} instead.\n      */\n     @Deprecated\n-    public static DynamicRecord dynamicRecord( long id, boolean inUse, boolean isStartRecord, long nextBlock, int type,\n-                                               byte [] data )\n-    {\n+    public static DynamicRecord dynamicRecord( long id, boolean inUse, boolean isStartRecord, long nextBlock, int type, byte [] data )\n+{\n         DynamicRecord record = new DynamicRecord( id );\n         record.setInUse( inUse );\n         record.setStartRecord( isStartRecord );\n@@ -66,8 +65,7 @@ public class DynamicRecord extends AbstractBaseRecord\n         super( id );\n     }\n \n-    public DynamicRecord initialize( boolean inUse, boolean isStartRecord, long nextBlock,\n-            int type, int length )\n+    public DynamicRecord initialize( boolean inUse, boolean isStartRecord, long nextBlock, int type, int length )\n     {\n         super.initialize( inUse );\n         this.startRecord = isStartRecord;\n@@ -99,7 +97,7 @@ public class DynamicRecord extends AbstractBaseRecord\n      */\n     public PropertyType getType()\n     {\n-        return PropertyType.getPropertyTypeOrNull( (long) (this.type << 24) );\n+        return PropertyType.getPropertyTypeOrNull( (long) ( this.type << 24) );\n     }\n \n     /**\n@@ -157,11 +155,8 @@ public class DynamicRecord extends AbstractBaseRecord\n     public String toString()\n     {\n         StringBuilder buf = new StringBuilder();\n-        buf.append( \"DynamicRecord[\" )\n-                .append( getId() )\n-                .append( \",used=\" ).append( inUse() ).append( ',' )\n-                .append( '(' ).append( length ).append( \"),type=\" );\n-        PropertyType type = getType();\n+        buf.append( \"DynamicRecord[\" ).append( getId() ).append( \",used=\" ).append( inUse() ).append( ',' ).append( '(' ).append( length ).append( \"),type=\" );\n+PropertyType type = getType();\n         if ( type == null )\n         {\n             buf.append( this.type );\n@@ -207,10 +202,11 @@ public class DynamicRecord extends AbstractBaseRecord\n     {\n         DynamicRecord clone = new DynamicRecord( getId() ).initialize( inUse(),\n                 startRecord, nextBlock, type, length );\n-        if ( data != null )\n+if ( data != null )\n         {\n             clone.setData( data.clone() );\n         }\n-        return clone;\n+\n+return clone;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}