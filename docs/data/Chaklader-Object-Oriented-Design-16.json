{
    "project_name": "Chaklader-Object-Oriented-Design",
    "error_id": "16",
    "information": {
        "errors": [
            {
                "line": "91",
                "column": "18",
                "severity": "error",
                "message": "'}' at column 18 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "  }\n\n  private App() {}\n}",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "91",
                    "column": "18",
                    "severity": "error",
                    "message": "'}' at column 18 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Object-Oriented-Design/errored/1/16/App.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Object-Oriented-Design/intellij/16/App.java\nindex 1c117722fda..136b6ce65ea 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Object-Oriented-Design/errored/1/16/App.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Object-Oriented-Design/intellij/16/App.java\n@@ -1,15 +1,15 @@\n /**\r\n  * The MIT License Copyright (c) 2014 Ilkka Sepp\u00e4l\u00e4\r\n- *\r\n+ * <p>\r\n  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and\r\n  * associated documentation files (the \"Software\"), to deal in the Software without restriction,\r\n  * including without limitation the rights to use, copy, modify, merge, publish, distribute,\r\n  * sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is\r\n  * furnished to do so, subject to the following conditions:\r\n- *\r\n+ * <p>\r\n  * The above copyright notice and this permission notice shall be included in all copies or\r\n  * substantial portions of the Software.\r\n- *\r\n+ * <p>\r\n  * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT\r\n  * NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n@@ -29,7 +29,7 @@ import java.io.FileNotFoundException;\n  * <p>\r\n  * The below example demonstrates a use case for testing two different modules: File Logger and\r\n  * Console Logger\r\n- * \r\n+ *\r\n  */\r\n public final class App {\r\n \r\n@@ -38,7 +38,7 @@ public final class App {\n \r\n   /**\r\n    * Following method performs the initialization\r\n-   * \r\n+   *\r\n    * @throws FileNotFoundException if program is not able to find log files (output.txt and\r\n    *         error.txt)\r\n    */\r\n@@ -61,7 +61,7 @@ public final class App {\n \r\n   /**\r\n    * Following method is main executor\r\n-   * \r\n+   *\r\n    * @param args for providing default program arguments\r\n    */\r\n   public static void execute(final String... args) {\r\n@@ -77,7 +77,7 @@ public final class App {\n \r\n   /**\r\n    * Program entry point.\r\n-   * \r\n+   *\r\n    * @param args command line args.\r\n    * @throws FileNotFoundException if program is not able to find log files (output.txt and\r\n    *         error.txt)\r\n@@ -88,5 +88,6 @@ public final class App {\n     unprepare();\r\n   }\r\n \r\n-  private App() {}\r\n+  private App() {\r\n+  }\r\n }\r\n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "91",
                    "column": "18",
                    "severity": "error",
                    "message": "'}' at column 18 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Object-Oriented-Design/errored/1/16/App.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Object-Oriented-Design/naturalize/16/App.java\nindex 1c117722fda..9938c188393 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Object-Oriented-Design/errored/1/16/App.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Object-Oriented-Design/naturalize/16/App.java\n@@ -89,4 +89,4 @@ public final class App {\n   }\r\n \r\n   private App() {}\r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Object-Oriented-Design/errored/1/16/App.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Object-Oriented-Design/codebuff/16/App.java\nindex 1c117722fda..0774b3749e4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Object-Oriented-Design/errored/1/16/App.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Object-Oriented-Design/codebuff/16/App.java\n@@ -16,8 +16,8 @@\n  * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n  */\r\n-package com.iluwatar.module;\r\n-\r\n+package com.iluwatar.module;\n+\n import java.io.FileNotFoundException;\r\n \r\n /**\r\n@@ -30,10 +30,15 @@ import java.io.FileNotFoundException;\n  * The below example demonstrates a use case for testing two different modules: File Logger and\r\n  * Console Logger\r\n  * \r\n- */\r\n-public final class App {\r\n-\r\n-  public static FileLoggerModule fileLoggerModule;\r\n+ */\n+\n+\n+public final class App {\n+\n+\n+  public static FileLoggerModule fileLoggerModule;\n+\n+\n   public static ConsoleLoggerModule consoleLoggerModule;\r\n \r\n   /**\r\n@@ -41,38 +46,44 @@ public final class App {\n    * \r\n    * @throws FileNotFoundException if program is not able to find log files (output.txt and\r\n    *         error.txt)\r\n-   */\r\n+   */\n+\n+\n   public static void prepare() throws FileNotFoundException {\r\n \r\n-    /* Create new singleton objects and prepare their modules */\r\n-    fileLoggerModule = FileLoggerModule.getSingleton().prepare();\r\n-    consoleLoggerModule = ConsoleLoggerModule.getSingleton().prepare();\r\n+    /* Create new singleton objects and prepare their modules */\n+    fileLoggerModule = FileLoggerModule.getSingleton().prepare();\n+    consoleLoggerModule = ConsoleLoggerModule.getSingleton().prepare();\n   }\r\n \r\n   /**\r\n    * Following method performs the finalization\r\n-   */\r\n+   */\n+\n+\n   public static void unprepare() {\r\n \r\n-    /* Close all resources */\r\n-    fileLoggerModule.unprepare();\r\n-    consoleLoggerModule.unprepare();\r\n+    /* Close all resources */\n+    fileLoggerModule.unprepare();\n+    consoleLoggerModule.unprepare();\n   }\r\n \r\n   /**\r\n    * Following method is main executor\r\n    * \r\n    * @param args for providing default program arguments\r\n-   */\r\n+   */\n+\n+\n   public static void execute(final String... args) {\r\n \r\n-    /* Send logs on file system */\r\n-    fileLoggerModule.printString(\"Message\");\r\n+    /* Send logs on file system */\n+    fileLoggerModule.printString(\"Message\");\n     fileLoggerModule.printErrorString(\"Error\");\r\n \r\n-    /* Send logs on console */\r\n-    consoleLoggerModule.printString(\"Message\");\r\n-    consoleLoggerModule.printErrorString(\"Error\");\r\n+    /* Send logs on console */\n+    consoleLoggerModule.printString(\"Message\");\n+    consoleLoggerModule.printErrorString(\"Error\");\n   }\r\n \r\n   /**\r\n@@ -81,12 +92,15 @@ public final class App {\n    * @param args command line args.\r\n    * @throws FileNotFoundException if program is not able to find log files (output.txt and\r\n    *         error.txt)\r\n-   */\r\n-  public static void main(final String... args) throws FileNotFoundException {\r\n-    prepare();\r\n-    execute(args);\r\n-    unprepare();\r\n-  }\r\n-\r\n-  private App() {}\r\n-}\r\n+   */\n+\n+\n+  public static void main(final String... args) throws FileNotFoundException {\n+    prepare();\n+    execute(args);\n+    unprepare();\n+  }\n+\n+  private App() {\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 43
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "91",
                    "column": "18",
                    "severity": "error",
                    "message": "'}' at column 18 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "91",
                    "column": "18",
                    "severity": "error",
                    "message": "'}' at column 18 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}