{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3503",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "51",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3503/IdAllocationState.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3503/IdAllocationState.java\nindex 9fa5eaa9639..07c113f3b4e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3503/IdAllocationState.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3503/IdAllocationState.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.causalclustering.core.state.machines.id;\n \n import java.io.IOException;\n@@ -42,135 +43,135 @@ import org.neo4j.storageengine.api.WritableChannel;\n  */\n public class IdAllocationState implements UnallocatedIds\n {\n-    private final long[] firstUnallocated;\n-    private long logIndex;\n-\n-    IdAllocationState()\n+  private final long[] firstUnallocated;\n+  private long logIndex;\n+\n+  IdAllocationState()\n+  {\n+    this(new long[IdType.values().length], -1L);\n+  }\n+\n+  public IdAllocationState(long[] firstUnallocated, long logIndex)\n+  {\n+    this.firstUnallocated = firstUnallocated;\n+    this.logIndex = logIndex;\n+  }\n+\n+  /**\n+   * @return The last set log index, which is the value last passed to {@link #logIndex(long)}\n+   */\n+  public long logIndex()\n+  {\n+    return logIndex;\n+  }\n+\n+  /**\n+   * Sets the last seen log index, which is the last log index at which a replicated value that updated this state\n+   * was encountered.\n+   *\n+   * @param logIndex The value to set as the last log index at which this state was updated\n+   */\n+  public void logIndex(long logIndex)\n+  {\n+    this.logIndex = logIndex;\n+  }\n+\n+  /**\n+   * @param idType the type of graph object whose ID is under allocation\n+   * @return the first unallocated entry for idType\n+   */\n+  @Override\n+  public long firstUnallocated(IdType idType)\n+  {\n+    return firstUnallocated[idType.ordinal()];\n+  }\n+\n+  /**\n+   * @param idType     the type of graph object whose ID is under allocation\n+   * @param idRangeEnd the first unallocated entry for idType\n+   */\n+  void firstUnallocated(IdType idType, long idRangeEnd)\n+  {\n+    firstUnallocated[idType.ordinal()] = idRangeEnd;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o)\n+  {\n+    if (this == o)\n     {\n-        this( new long[IdType.values().length], -1L );\n+      return true;\n     }\n-\n-    public IdAllocationState( long[] firstUnallocated, long logIndex )\n+    if (o == null || getClass() != o.getClass())\n     {\n-        this.firstUnallocated = firstUnallocated;\n-        this.logIndex = logIndex;\n+      return false;\n     }\n \n-    /**\n-     * @return The last set log index, which is the value last passed to {@link #logIndex(long)}\n-     */\n-    public long logIndex()\n-    {\n-        return logIndex;\n-    }\n+    IdAllocationState that = (IdAllocationState) o;\n \n-    /**\n-     * Sets the last seen log index, which is the last log index at which a replicated value that updated this state\n-     * was encountered.\n-     *\n-     * @param logIndex The value to set as the last log index at which this state was updated\n-     */\n-    public void logIndex( long logIndex )\n-    {\n-        this.logIndex = logIndex;\n-    }\n+    return logIndex == that.logIndex &&\n+        Arrays.equals(firstUnallocated, that.firstUnallocated);\n+  }\n \n-    /**\n-     * @param idType the type of graph object whose ID is under allocation\n-     * @return the first unallocated entry for idType\n-     */\n-    @Override\n-    public long firstUnallocated( IdType idType )\n-    {\n-        return firstUnallocated[idType.ordinal()];\n-    }\n+  @Override\n+  public int hashCode()\n+  {\n+    int result = Arrays.hashCode(firstUnallocated);\n+    result = 31 * result + (int) (logIndex ^ (logIndex >>> 32));\n+    return result;\n+  }\n \n-    /**\n-     * @param idType     the type of graph object whose ID is under allocation\n-     * @param idRangeEnd the first unallocated entry for idType\n-     */\n-    void firstUnallocated( IdType idType, long idRangeEnd )\n-    {\n-        firstUnallocated[idType.ordinal()] = idRangeEnd;\n-    }\n+  public IdAllocationState newInstance()\n+  {\n+    return new IdAllocationState(firstUnallocated.clone(), logIndex);\n+  }\n \n+  public static class Marshal extends SafeStateMarshal<IdAllocationState>\n+  {\n     @Override\n-    public boolean equals( Object o )\n+    public void marshal(IdAllocationState state, WritableChannel channel) throws IOException\n     {\n-        if ( this == o )\n-        {\n-            return true;\n-        }\n-        if ( o == null || getClass() != o.getClass() )\n-        {\n-            return false;\n-        }\n-\n-        IdAllocationState that = (IdAllocationState) o;\n-\n-        return logIndex == that.logIndex &&\n-                Arrays.equals( firstUnallocated, that.firstUnallocated );\n+      channel.putLong((long) state.firstUnallocated.length);\n+      for (long l : state.firstUnallocated)\n+      {\n+        channel.putLong(l);\n+      }\n+\n+      channel.putLong(state.logIndex);\n     }\n \n     @Override\n-    public int hashCode()\n+    public IdAllocationState unmarshal0(ReadableChannel channel) throws IOException\n     {\n-        int result = Arrays.hashCode( firstUnallocated );\n-        result = 31 * result + (int) (logIndex ^ (logIndex >>> 32));\n-        return result;\n-    }\n+      long[] firstNotAllocated = new long[(int) channel.getLong()];\n \n-    public IdAllocationState newInstance()\n-    {\n-        return new IdAllocationState( firstUnallocated.clone(), logIndex );\n+      for (int i = 0; i < firstNotAllocated.length; i++)\n+      {\n+        firstNotAllocated[i] = channel.getLong();\n+      }\n+\n+      long logIndex = channel.getLong();\n+\n+      return new IdAllocationState(firstNotAllocated, logIndex);\n     }\n \n-    public static class Marshal extends SafeStateMarshal<IdAllocationState>\n+    @Override\n+    public IdAllocationState startState()\n     {\n-        @Override\n-        public void marshal( IdAllocationState state, WritableChannel channel ) throws IOException\n-        {\n-            channel.putLong( (long) state.firstUnallocated.length );\n-            for ( long l : state.firstUnallocated )\n-            {\n-                channel.putLong( l );\n-            }\n-\n-            channel.putLong( state.logIndex );\n-        }\n-\n-        @Override\n-        public IdAllocationState unmarshal0( ReadableChannel channel ) throws IOException\n-        {\n-            long[] firstNotAllocated = new long[(int) channel.getLong()];\n-\n-            for ( int i = 0; i < firstNotAllocated.length; i++ )\n-            {\n-                firstNotAllocated[i] = channel.getLong();\n-            }\n-\n-            long logIndex = channel.getLong();\n-\n-            return new IdAllocationState( firstNotAllocated, logIndex );\n-        }\n-\n-        @Override\n-        public IdAllocationState startState()\n-        {\n-            return new IdAllocationState();\n-        }\n-\n-        @Override\n-        public long ordinal( IdAllocationState state )\n-        {\n-            return state.logIndex();\n-        }\n+      return new IdAllocationState();\n     }\n \n     @Override\n-    public String toString()\n+    public long ordinal(IdAllocationState state)\n     {\n-        return String.format( \"IdAllocationState{firstUnallocated=%s, logIndex=%d}\",\n-                Arrays.toString( firstUnallocated ), logIndex );\n+      return state.logIndex();\n     }\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return String.format(\"IdAllocationState{firstUnallocated=%s, logIndex=%d}\",\n+        Arrays.toString(firstUnallocated), logIndex);\n+  }\n }\n",
            "diff_size": 176
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "112",
                    "column": "42",
                    "severity": "error",
                    "message": "'&&' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "119",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3503/IdAllocationState.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3503/IdAllocationState.java\nindex 9fa5eaa9639..c95dbefcfcd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3503/IdAllocationState.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3503/IdAllocationState.java\n@@ -101,22 +101,22 @@ public class IdAllocationState implements UnallocatedIds\n         {\n             return true;\n         }\n-        if ( o == null || getClass() != o.getClass() )\n+\n+if ( o == null || getClass() != o.getClass() )\n         {\n             return false;\n         }\n \n         IdAllocationState that = (IdAllocationState) o;\n \n-        return logIndex == that.logIndex &&\n-                Arrays.equals( firstUnallocated, that.firstUnallocated );\n+        return logIndex == that.logIndex &&Arrays.equals( firstUnallocated, that.firstUnallocated );\n     }\n \n     @Override\n     public int hashCode()\n     {\n         int result = Arrays.hashCode( firstUnallocated );\n-        result = 31 * result + (int) (logIndex ^ (logIndex >>> 32));\n+        result = 31 * result + ( int) ( logIndex ^ ( logIndex >>> 32 ));\n         return result;\n     }\n \n@@ -143,15 +143,13 @@ public class IdAllocationState implements UnallocatedIds\n         public IdAllocationState unmarshal0( ReadableChannel channel ) throws IOException\n         {\n             long[] firstNotAllocated = new long[(int) channel.getLong()];\n-\n-            for ( int i = 0; i < firstNotAllocated.length; i++ )\n+for ( int i = 0; i < firstNotAllocated.length; i++ )\n             {\n                 firstNotAllocated[i] = channel.getLong();\n             }\n \n             long logIndex = channel.getLong();\n-\n-            return new IdAllocationState( firstNotAllocated, logIndex );\n+return new IdAllocationState( firstNotAllocated, logIndex );\n         }\n \n         @Override\n@@ -173,4 +171,4 @@ public class IdAllocationState implements UnallocatedIds\n         return String.format( \"IdAllocationState{firstUnallocated=%s, logIndex=%d}\",\n                 Arrays.toString( firstUnallocated ), logIndex );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}