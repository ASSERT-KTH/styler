{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2704",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "51",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "165",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "198",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2704/DuplicateCheckStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2704/DuplicateCheckStrategy.java\nindex 349bb9c6daa..50810b57fd9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2704/DuplicateCheckStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2704/DuplicateCheckStrategy.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.impl.schema.verification;\n \n import java.util.Arrays;\n@@ -34,205 +35,205 @@ import static java.lang.Math.min;\n /**\n  * Base class for strategy used for duplicate check during verification of value uniqueness during\n  * constraint creation.\n- *\n+ * <p>\n  * Each particular strategy determines how uniqueness check is done and how to accumulate and store those values for\n  * to make check time and resource consumption optimal.\n  */\n abstract class DuplicateCheckStrategy\n {\n-    /**\n-     * Check uniqueness of multiple properties that belong to a node with provided node id\n-     * @param values property values\n-     * @param nodeId checked node id\n-     * @throws IndexEntryConflictException\n-     */\n-    abstract void checkForDuplicate( Value[] values, long nodeId )\n-            throws IndexEntryConflictException;\n-\n-    /**\n-     * Check uniqueness of single property that belong to a node with provided node id.\n-     * @param value property value\n-     * @param nodeId checked node id\n-     * @throws IndexEntryConflictException\n-     */\n-    abstract void checkForDuplicate( Value value, long nodeId ) throws IndexEntryConflictException;\n-\n-    private static boolean propertyValuesEqual( Value[] properties, Value[] values )\n+  /**\n+   * Check uniqueness of multiple properties that belong to a node with provided node id\n+   *\n+   * @param values property values\n+   * @param nodeId checked node id\n+   * @throws IndexEntryConflictException\n+   */\n+  abstract void checkForDuplicate(Value[] values, long nodeId)\n+      throws IndexEntryConflictException;\n+\n+  /**\n+   * Check uniqueness of single property that belong to a node with provided node id.\n+   *\n+   * @param value  property value\n+   * @param nodeId checked node id\n+   * @throws IndexEntryConflictException\n+   */\n+  abstract void checkForDuplicate(Value value, long nodeId) throws IndexEntryConflictException;\n+\n+  private static boolean propertyValuesEqual(Value[] properties, Value[] values)\n+  {\n+    if (properties.length != values.length)\n     {\n-        if ( properties.length != values.length )\n-        {\n-            return false;\n-        }\n-        for ( int i = 0; i < properties.length; i++ )\n-        {\n-            if ( !properties[i].equals( values[i] ) )\n-            {\n-                return false;\n-            }\n-        }\n-        return true;\n+      return false;\n     }\n-\n-    /**\n-     * Duplicate check strategy that uses plain hash map. Should be optimal for small amount of entries.\n-     */\n-    static class MapDuplicateCheckStrategy extends DuplicateCheckStrategy\n+    for (int i = 0; i < properties.length; i++)\n     {\n-        private Map<Object,Long> valueNodeIdMap;\n+      if (!properties[i].equals(values[i]))\n+      {\n+        return false;\n+      }\n+    }\n+    return true;\n+  }\n \n-        MapDuplicateCheckStrategy( int expectedNumberOfEntries )\n-        {\n-            this.valueNodeIdMap = new HashMap<>( expectedNumberOfEntries );\n-        }\n+  /**\n+   * Duplicate check strategy that uses plain hash map. Should be optimal for small amount of entries.\n+   */\n+  static class MapDuplicateCheckStrategy extends DuplicateCheckStrategy\n+  {\n+    private Map<Object, Long> valueNodeIdMap;\n \n-        @Override\n-        public void checkForDuplicate( Value[] values, long nodeId )\n-                throws IndexEntryConflictException\n-        {\n-            Long previousNodeId = valueNodeIdMap.put( ValueTuple.of( values ), nodeId );\n-            if ( previousNodeId != null )\n-            {\n-                throw new IndexEntryConflictException( previousNodeId, nodeId, ValueTuple.of( values ) );\n-            }\n-        }\n-\n-        @Override\n-        void checkForDuplicate( Value value, long nodeId ) throws IndexEntryConflictException\n-        {\n-            Long previousNodeId = valueNodeIdMap.put( value, nodeId );\n-            if ( previousNodeId != null )\n-            {\n-                throw new IndexEntryConflictException( previousNodeId, nodeId, value );\n-            }\n-        }\n+    MapDuplicateCheckStrategy(int expectedNumberOfEntries)\n+    {\n+      this.valueNodeIdMap = new HashMap<>(expectedNumberOfEntries);\n+    }\n \n+    @Override\n+    public void checkForDuplicate(Value[] values, long nodeId)\n+        throws IndexEntryConflictException\n+    {\n+      Long previousNodeId = valueNodeIdMap.put(ValueTuple.of(values), nodeId);\n+      if (previousNodeId != null)\n+      {\n+        throw new IndexEntryConflictException(previousNodeId, nodeId, ValueTuple.of(values));\n+      }\n     }\n \n-    /**\n-     * Strategy that uses arrays to store entries and uses hash codes to split those entries over different buckets.\n-     * Number of buckets and size of entries block are dynamic and evaluated based on expected number of duplicates.\n-     */\n-    static class BucketsDuplicateCheckStrategy extends DuplicateCheckStrategy\n+    @Override\n+    void checkForDuplicate(Value value, long nodeId) throws IndexEntryConflictException\n     {\n-        private static final int BASE_ENTRY_SIZE = 1000;\n-        private static final int DEFAULT_BUCKETS = 10;\n-        static final int BUCKET_STRATEGY_ENTRIES_THRESHOLD = BASE_ENTRY_SIZE * DEFAULT_BUCKETS;\n+      Long previousNodeId = valueNodeIdMap.put(value, nodeId);\n+      if (previousNodeId != null)\n+      {\n+        throw new IndexEntryConflictException(previousNodeId, nodeId, value);\n+      }\n+    }\n \n-        private static final int MAX_NUMBER_OF_BUCKETS = 100;\n-        private final int numberOfBuckets;\n-        private BucketEntry[] buckets;\n-        private final int bucketSetSize;\n+  }\n \n-        BucketsDuplicateCheckStrategy()\n-        {\n-            this( BUCKET_STRATEGY_ENTRIES_THRESHOLD );\n-        }\n+  /**\n+   * Strategy that uses arrays to store entries and uses hash codes to split those entries over different buckets.\n+   * Number of buckets and size of entries block are dynamic and evaluated based on expected number of duplicates.\n+   */\n+  static class BucketsDuplicateCheckStrategy extends DuplicateCheckStrategy\n+  {\n+    private static final int BASE_ENTRY_SIZE = 1000;\n+    private static final int DEFAULT_BUCKETS = 10;\n+    static final int BUCKET_STRATEGY_ENTRIES_THRESHOLD = BASE_ENTRY_SIZE * DEFAULT_BUCKETS;\n \n-        BucketsDuplicateCheckStrategy( int expectedNumberOfEntries )\n-        {\n-            numberOfBuckets = min( MAX_NUMBER_OF_BUCKETS, (expectedNumberOfEntries / BASE_ENTRY_SIZE) + 1 );\n-            buckets = new BucketEntry[numberOfBuckets];\n-            bucketSetSize = max( 100, BUCKET_STRATEGY_ENTRIES_THRESHOLD / numberOfBuckets );\n-        }\n+    private static final int MAX_NUMBER_OF_BUCKETS = 100;\n+    private final int numberOfBuckets;\n+    private BucketEntry[] buckets;\n+    private final int bucketSetSize;\n \n-        @Override\n-        public void checkForDuplicate( Value[] values, long nodeId )\n-                throws IndexEntryConflictException\n-        {\n-            BucketEntry current = bucketEntrySet( Arrays.hashCode( values ), bucketSetSize );\n+    BucketsDuplicateCheckStrategy()\n+    {\n+      this(BUCKET_STRATEGY_ENTRIES_THRESHOLD);\n+    }\n \n-            // We either have to find the first conflicting entry set element,\n-            // or append one for the property we just fetched:\n-            scan:\n-            do\n-            {\n-                for ( int i = 0; i < bucketSetSize; i++ )\n-                {\n-                    Value[] currentValues = (Value[]) current.value[i];\n-\n-                    if ( current.nodeId[i] == StatementConstants.NO_SUCH_NODE )\n-                    {\n-                        current.value[i] = values;\n-                        current.nodeId[i] = nodeId;\n-                        if ( i == bucketSetSize - 1 )\n-                        {\n-                            current.next = new BucketEntry( bucketSetSize );\n-                        }\n-                        break scan;\n-                    }\n-                    else if ( propertyValuesEqual( values, currentValues ) )\n-                    {\n-                        throw new IndexEntryConflictException( current.nodeId[i], nodeId, currentValues );\n-                    }\n-                }\n-                current = current.next;\n-            }\n-            while ( current != null );\n-        }\n+    BucketsDuplicateCheckStrategy(int expectedNumberOfEntries)\n+    {\n+      numberOfBuckets = min(MAX_NUMBER_OF_BUCKETS, (expectedNumberOfEntries / BASE_ENTRY_SIZE) + 1);\n+      buckets = new BucketEntry[numberOfBuckets];\n+      bucketSetSize = max(100, BUCKET_STRATEGY_ENTRIES_THRESHOLD / numberOfBuckets);\n+    }\n \n-        @Override\n-        void checkForDuplicate( Value propertyValue, long nodeId ) throws IndexEntryConflictException\n+    @Override\n+    public void checkForDuplicate(Value[] values, long nodeId)\n+        throws IndexEntryConflictException\n+    {\n+      BucketEntry current = bucketEntrySet(Arrays.hashCode(values), bucketSetSize);\n+\n+      // We either have to find the first conflicting entry set element,\n+      // or append one for the property we just fetched:\n+      scan:\n+      do\n+      {\n+        for (int i = 0; i < bucketSetSize; i++)\n         {\n-            BucketEntry current = bucketEntrySet( propertyValue.hashCode(), bucketSetSize );\n+          Value[] currentValues = (Value[]) current.value[i];\n \n-            // We either have to find the first conflicting entry set element,\n-            // or append one for the property we just fetched:\n-            scan:\n-            do\n+          if (current.nodeId[i] == StatementConstants.NO_SUCH_NODE)\n+          {\n+            current.value[i] = values;\n+            current.nodeId[i] = nodeId;\n+            if (i == bucketSetSize - 1)\n             {\n-                for ( int i = 0; i < bucketSetSize; i++ )\n-                {\n-                    Value value = (Value) current.value[i];\n-\n-                    if ( current.nodeId[i] == StatementConstants.NO_SUCH_NODE )\n-                    {\n-                        current.value[i] = propertyValue;\n-                        current.nodeId[i] = nodeId;\n-                        if ( i == bucketSetSize - 1 )\n-                        {\n-                            current.next = new BucketEntry( bucketSetSize );\n-                        }\n-                        break scan;\n-                    }\n-                    else if ( propertyValue.equals( value ) )\n-                    {\n-                        throw new IndexEntryConflictException( current.nodeId[i], nodeId, value );\n-                    }\n-                }\n-                current = current.next;\n+              current.next = new BucketEntry(bucketSetSize);\n             }\n-            while ( current != null );\n+            break scan;\n+          } else if (propertyValuesEqual(values, currentValues))\n+          {\n+            throw new IndexEntryConflictException(current.nodeId[i], nodeId, currentValues);\n+          }\n         }\n+        current = current.next;\n+      }\n+      while (current != null);\n+    }\n \n-        private BucketEntry bucketEntrySet( int hashCode, int entrySetSize )\n+    @Override\n+    void checkForDuplicate(Value propertyValue, long nodeId) throws IndexEntryConflictException\n+    {\n+      BucketEntry current = bucketEntrySet(propertyValue.hashCode(), bucketSetSize);\n+\n+      // We either have to find the first conflicting entry set element,\n+      // or append one for the property we just fetched:\n+      scan:\n+      do\n+      {\n+        for (int i = 0; i < bucketSetSize; i++)\n         {\n-            int bucket = Math.abs( hashCode ) % numberOfBuckets;\n-            BucketEntry current = buckets[bucket];\n-            if ( current == null )\n+          Value value = (Value) current.value[i];\n+\n+          if (current.nodeId[i] == StatementConstants.NO_SUCH_NODE)\n+          {\n+            current.value[i] = propertyValue;\n+            current.nodeId[i] = nodeId;\n+            if (i == bucketSetSize - 1)\n             {\n-                current = new BucketEntry( entrySetSize );\n-                buckets[bucket] = current;\n+              current.next = new BucketEntry(bucketSetSize);\n             }\n-            return current;\n+            break scan;\n+          } else if (propertyValue.equals(value))\n+          {\n+            throw new IndexEntryConflictException(current.nodeId[i], nodeId, value);\n+          }\n         }\n+        current = current.next;\n+      }\n+      while (current != null);\n+    }\n \n-        /**\n-         * Each bucket entry contains arrays of nodes and corresponding values and link to next BucketEntry in the\n-         * chain for cases when we have more data then the size of one bucket. So bucket entries will form a\n-         * chain of entries to represent values in particular bucket\n-         */\n-        private static class BucketEntry\n-        {\n-            final Object[] value;\n-            final long[] nodeId;\n-            BucketEntry next;\n+    private BucketEntry bucketEntrySet(int hashCode, int entrySetSize)\n+    {\n+      int bucket = Math.abs(hashCode) % numberOfBuckets;\n+      BucketEntry current = buckets[bucket];\n+      if (current == null)\n+      {\n+        current = new BucketEntry(entrySetSize);\n+        buckets[bucket] = current;\n+      }\n+      return current;\n+    }\n \n-            BucketEntry( int entrySize )\n-            {\n-                value = new Object[entrySize];\n-                nodeId = new long[entrySize];\n-                Arrays.fill( nodeId, StatementConstants.NO_SUCH_NODE );\n-            }\n-        }\n+    /**\n+     * Each bucket entry contains arrays of nodes and corresponding values and link to next BucketEntry in the\n+     * chain for cases when we have more data then the size of one bucket. So bucket entries will form a\n+     * chain of entries to represent values in particular bucket\n+     */\n+    private static class BucketEntry\n+    {\n+      final Object[] value;\n+      final long[] nodeId;\n+      BucketEntry next;\n+\n+      BucketEntry(int entrySize)\n+      {\n+        value = new Object[entrySize];\n+        nodeId = new long[entrySize];\n+        Arrays.fill(nodeId, StatementConstants.NO_SUCH_NODE);\n+      }\n     }\n+  }\n }\n",
            "diff_size": 251
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2704/DuplicateCheckStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2704/DuplicateCheckStrategy.java\nindex 349bb9c6daa..35d1c85c9f3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2704/DuplicateCheckStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2704/DuplicateCheckStrategy.java\n@@ -46,10 +46,9 @@ abstract class DuplicateCheckStrategy\n      * @param nodeId checked node id\n      * @throws IndexEntryConflictException\n      */\n-    abstract void checkForDuplicate( Value[] values, long nodeId )\n-            throws IndexEntryConflictException;\n+    abstract void checkForDuplicate( Value[] values, long nodeId ) throws IndexEntryConflictException;\n \n-    /**\n+/**\n      * Check uniqueness of single property that belong to a node with provided node id.\n      * @param value property value\n      * @param nodeId checked node id\n@@ -86,9 +85,8 @@ abstract class DuplicateCheckStrategy\n         }\n \n         @Override\n-        public void checkForDuplicate( Value[] values, long nodeId )\n-                throws IndexEntryConflictException\n-        {\n+        public void checkForDuplicate( Value[] values, long nodeId ) throws IndexEntryConflictException\n+{\n             Long previousNodeId = valueNodeIdMap.put( ValueTuple.of( values ), nodeId );\n             if ( previousNodeId != null )\n             {\n@@ -105,7 +103,6 @@ abstract class DuplicateCheckStrategy\n                 throw new IndexEntryConflictException( previousNodeId, nodeId, value );\n             }\n         }\n-\n     }\n \n     /**\n@@ -130,15 +127,14 @@ abstract class DuplicateCheckStrategy\n \n         BucketsDuplicateCheckStrategy( int expectedNumberOfEntries )\n         {\n-            numberOfBuckets = min( MAX_NUMBER_OF_BUCKETS, (expectedNumberOfEntries / BASE_ENTRY_SIZE) + 1 );\n+            numberOfBuckets = min( MAX_NUMBER_OF_BUCKETS, ( expectedNumberOfEntries / BASE_ENTRY_SIZE) + 1 );\n             buckets = new BucketEntry[numberOfBuckets];\n             bucketSetSize = max( 100, BUCKET_STRATEGY_ENTRIES_THRESHOLD / numberOfBuckets );\n         }\n \n         @Override\n-        public void checkForDuplicate( Value[] values, long nodeId )\n-                throws IndexEntryConflictException\n-        {\n+        public void checkForDuplicate( Value[] values, long nodeId ) throws IndexEntryConflictException\n+{\n             BucketEntry current = bucketEntrySet( Arrays.hashCode( values ), bucketSetSize );\n \n             // We either have to find the first conflicting entry set element,\n@@ -149,8 +145,7 @@ abstract class DuplicateCheckStrategy\n                 for ( int i = 0; i < bucketSetSize; i++ )\n                 {\n                     Value[] currentValues = (Value[]) current.value[i];\n-\n-                    if ( current.nodeId[i] == StatementConstants.NO_SUCH_NODE )\n+if ( current.nodeId[i] == StatementConstants.NO_SUCH_NODE )\n                     {\n                         current.value[i] = values;\n                         current.nodeId[i] = nodeId;\n@@ -183,8 +178,7 @@ abstract class DuplicateCheckStrategy\n                 for ( int i = 0; i < bucketSetSize; i++ )\n                 {\n                     Value value = (Value) current.value[i];\n-\n-                    if ( current.nodeId[i] == StatementConstants.NO_SUCH_NODE )\n+if ( current.nodeId[i] == StatementConstants.NO_SUCH_NODE )\n                     {\n                         current.value[i] = propertyValue;\n                         current.nodeId[i] = nodeId;\n@@ -213,7 +207,8 @@ abstract class DuplicateCheckStrategy\n                 current = new BucketEntry( entrySetSize );\n                 buckets[bucket] = current;\n             }\n-            return current;\n+\n+return current;\n         }\n \n         /**\n@@ -235,4 +230,4 @@ abstract class DuplicateCheckStrategy\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}