{
    "project_name": "graphfoundation-ongdb",
    "error_id": "25",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "44",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/25/ChannelMarshal.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/25/ChannelMarshal.java\nindex c2b37ecdebd..17f6b75a0a3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/25/ChannelMarshal.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/25/ChannelMarshal.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.causalclustering.messaging.marshalling;\n \n import java.io.IOException;\n@@ -29,7 +30,7 @@ import org.neo4j.storageengine.api.WritableChannel;\n /**\n  * Implementations of this class perform marshalling (encoding/decoding) of {@link STATE}\n  * into/from a {@link WritableChannel} and a {@link ReadableChannel} respectively.\n- *\n+ * <p>\n  * N.B.: Implementations should prefer to extend {@link SafeChannelMarshal} to handle\n  * {@link org.neo4j.storageengine.api.ReadPastEndException} correctly.\n  *\n@@ -37,21 +38,21 @@ import org.neo4j.storageengine.api.WritableChannel;\n  */\n public interface ChannelMarshal<STATE>\n {\n-    /**\n-     * Marshals the state into the channel.\n-     */\n-    void marshal( STATE state, WritableChannel channel ) throws IOException;\n+  /**\n+   * Marshals the state into the channel.\n+   */\n+  void marshal(STATE state, WritableChannel channel) throws IOException;\n \n-    /**\n-     * Unmarshals an instance of {@link STATE} from channel. If the channel does not have enough bytes\n-     * to fully read an instance then an {@link EndOfStreamException} must be thrown.\n-     *\n-     * N.B: The ReadableChannel is sort of broken in its implementation and throws\n-     * {@link org.neo4j.storageengine.api.ReadPastEndException} which is a subclass of IOException\n-     * and that is problematic since usually the case of reaching the end of a stream actually\n-     * requires handling distinct from that of arbitrary IOExceptions. Although it was possible\n-     * to catch that particular exception explicitly, you would not get compiler/IDE support\n-     * for making that apparent.\n-     */\n-    STATE unmarshal( ReadableChannel channel ) throws IOException, EndOfStreamException;\n+  /**\n+   * Unmarshals an instance of {@link STATE} from channel. If the channel does not have enough bytes\n+   * to fully read an instance then an {@link EndOfStreamException} must be thrown.\n+   * <p>\n+   * N.B: The ReadableChannel is sort of broken in its implementation and throws\n+   * {@link org.neo4j.storageengine.api.ReadPastEndException} which is a subclass of IOException\n+   * and that is problematic since usually the case of reaching the end of a stream actually\n+   * requires handling distinct from that of arbitrary IOExceptions. Although it was possible\n+   * to catch that particular exception explicitly, you would not get compiler/IDE support\n+   * for making that apparent.\n+   */\n+  STATE unmarshal(ReadableChannel channel) throws IOException, EndOfStreamException;\n }\n",
            "diff_size": 18
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/25/ChannelMarshal.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/25/ChannelMarshal.java\nindex c2b37ecdebd..4fdbaae1294 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/25/ChannelMarshal.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/25/ChannelMarshal.java\n@@ -54,4 +54,4 @@ public interface ChannelMarshal<STATE>\n      * for making that apparent.\n      */\n     STATE unmarshal( ReadableChannel channel ) throws IOException, EndOfStreamException;\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}