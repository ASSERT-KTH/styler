{
    "project_name": "NationalSecurityAgency-emissary",
    "error_id": "10",
    "information": {
        "errors": [
            {
                "line": "39",
                "column": "24",
                "severity": "warning",
                "message": "'}' at column 24 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "     * Take away the public constructor\n     */\n    private Factory() {}\n\n    /**\n     * Create an object from it's classname using args for arguments",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "39",
                    "column": "24",
                    "severity": "warning",
                    "message": "'}' at column 24 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/10/Factory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/intellij/10/Factory.java\nindex 1837ef92532..ffbeccfcd38 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/10/Factory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/intellij/10/Factory.java\n@@ -21,12 +21,12 @@ import org.slf4j.LoggerFactory;\n  * Factory.create() is one of the main methods that Emissary uses. This method simply constructs objects in the server\n  * name space so they may be referred to. Since this implementation is intended to run on a single machine, the create()\n  * method simply uses reflection (i.e. Class.forname() and Constructor.newInstance) to create the specified object.\n- *\n+ * <p>\n  * In the cases where a name (or handle) is supplied with the constructor arguments, the Namespace.bind method is called\n  * to save a reference to the object with that name.\n  *\n- * @see emissary.core.Namespace#bind\n  * @author ce\n+ * @see emissary.core.Namespace#bind\n  */\n public class Factory {\n     public static final boolean debug = false;\n@@ -36,13 +36,14 @@ public class Factory {\n     /**\n      * Take away the public constructor\n      */\n-    private Factory() {}\n+    private Factory() {\n+    }\n \n     /**\n      * Create an object from it's classname using args for arguments\n-     * \n+     *\n      * @param className the string classname to get a new instance of\n-     * @param args the arguments to a public constructor of classname\n+     * @param args      the arguments to a public constructor of classname\n      * @return The newly instantiated object. If it cannot instantiate, this throws some sort of Exception/Error.\n      */\n     public static Object create(final String className, final Object... args) {\n@@ -86,7 +87,7 @@ public class Factory {\n \n     /**\n      * Create an object of the type specified using a no-arg constructor\n-     * \n+     *\n      * @param className the string class name to instantiate\n      * @return The newly instantiated object. If it cannot instantiate, this throws some sort of Exception/Error.\n      */\n@@ -109,10 +110,10 @@ public class Factory {\n \n     /**\n      * Create an object and bind it into the namespace\n-     * \n+     *\n      * @param className the string classname to get a new instance of\n-     * @param args the arguments to a public constructor of classname\n-     * @param location name used to bind into the namespace\n+     * @param args      the arguments to a public constructor of classname\n+     * @param location  name used to bind into the namespace\n      * @return the newly instantiated object\n      */\n     public static Object create(final String className, final Object[] args, final String location) {\n@@ -127,10 +128,10 @@ public class Factory {\n     /**\n      * Create an object and bind it into the namespace. This method is used to prevent the ambiguity around overloaded\n      * varargs methods.\n-     * \n+     *\n      * @param className the string classname to get a new instance of\n-     * @param location name used to bind into the namespace\n-     * @param args the arguments to a public constructor of classname\n+     * @param location  name used to bind into the namespace\n+     * @param args      the arguments to a public constructor of classname\n      * @return the newly instantiated object\n      */\n     public static Object createV(final String className, final String location, final Object... args) {\n",
            "diff_size": 14
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "41",
                    "column": "1",
                    "severity": "warning",
                    "message": "'ctor def rcurly' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/10/Factory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/naturalize/10/Factory.java\nindex 1837ef92532..2007fb2c030 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/10/Factory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/naturalize/10/Factory.java\n@@ -36,7 +36,9 @@ public class Factory {\n     /**\n      * Take away the public constructor\n      */\n-    private Factory() {}\n+    private Factory() {\n+\n+}\n \n     /**\n      * Create an object from it's classname using args for arguments\n@@ -142,4 +144,4 @@ public class Factory {\n         return o;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/10/Factory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/codebuff/10/Factory.java\nindex 1837ef92532..7e6bcd0fddb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/10/Factory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/codebuff/10/Factory.java\n@@ -11,7 +11,6 @@ import java.lang.reflect.InvocationTargetException;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n-\n import emissary.util.ClassLookupCache;\n import emissary.util.ConstructorLookupCache;\n import org.slf4j.Logger;\n@@ -28,7 +27,10 @@ import org.slf4j.LoggerFactory;\n  * @see emissary.core.Namespace#bind\n  * @author ce\n  */\n+\n+\n public class Factory {\n+\n     public static final boolean debug = false;\n \n     private static final Logger logger = LoggerFactory.getLogger(Factory.class);\n@@ -36,7 +38,10 @@ public class Factory {\n     /**\n      * Take away the public constructor\n      */\n-    private Factory() {}\n+\n+    private Factory() {\n+\n+    }\n \n     /**\n      * Create an object from it's classname using args for arguments\n@@ -45,6 +50,7 @@ public class Factory {\n      * @param args the arguments to a public constructor of classname\n      * @return The newly instantiated object. If it cannot instantiate, this throws some sort of Exception/Error.\n      */\n+\n     public static Object create(final String className, final Object... args) {\n         logger.debug(\"Factory.create1({}, {})\", className, Arrays.toString(args));\n         try {\n@@ -58,7 +64,6 @@ public class Factory {\n                 }\n             }\n             logger.debug(\"checking:\" + types);\n-\n             final Constructor<?> constructor = ConstructorLookupCache.lookup(clazz, types.toArray(new Class[0]));\n             if (constructor == null) {\n                 logger.info(\"Failed to find constructor for args({}) types ({}) : {}\", args.length, types.size(), types);\n@@ -90,6 +95,8 @@ public class Factory {\n      * @param className the string class name to instantiate\n      * @return The newly instantiated object. If it cannot instantiate, this throws some sort of Exception/Error.\n      */\n+\n+\n     public static Object create(final String className) {\n         try {\n             // Since we don't have to pass any arguments to the\n@@ -115,10 +122,13 @@ public class Factory {\n      * @param location name used to bind into the namespace\n      * @return the newly instantiated object\n      */\n+\n+\n     public static Object create(final String className, final Object[] args, final String location) {\n         if (logger.isDebugEnabled()) {\n             logger.debug(\"Factory.create(\" + className + \",\" + Arrays.toString(args) + \",\" + location + \")\");\n         }\n+\n         final Object o = create(className, args);\n         Namespace.bind(location, o);\n         return o;\n@@ -133,13 +143,15 @@ public class Factory {\n      * @param args the arguments to a public constructor of classname\n      * @return the newly instantiated object\n      */\n+\n+\n     public static Object createV(final String className, final String location, final Object... args) {\n         if (logger.isDebugEnabled()) {\n             logger.debug(\"Factory.create(\" + className + \",\" + location + \",\" + Arrays.toString(args) + \")\");\n         }\n+\n         final Object o = create(className, args);\n         Namespace.bind(location, o);\n         return o;\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "40",
                    "column": "1",
                    "severity": "warning",
                    "message": "'ctor def rcurly' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/10/Factory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/styler_random/10/Factory.java\nindex 1837ef92532..fb5b578634c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/10/Factory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/styler_random/10/Factory.java\n@@ -36,7 +36,8 @@ public class Factory {\n     /**\n      * Take away the public constructor\n      */\n-    private Factory() {}\n+    private Factory() {\n+}\n \n     /**\n      * Create an object from it's classname using args for arguments\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "39",
                    "column": "24",
                    "severity": "warning",
                    "message": "'}' at column 24 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}