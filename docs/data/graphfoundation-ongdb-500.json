{
    "project_name": "graphfoundation-ongdb",
    "error_id": "500",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "70",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "121",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "70",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "212",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "252",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "266",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "273",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/500/InputEntityCacheWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/500/InputEntityCacheWriter.java\nindex 5f77390f308..8d384d95ae8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/500/InputEntityCacheWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/500/InputEntityCacheWriter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.unsafe.impl.batchimport.input;\n \n import java.io.IOException;\n@@ -47,7 +48,7 @@ import static org.neo4j.unsafe.impl.batchimport.input.InputCache.newChunkHeaderB\n /**\n  * Abstract class for caching entities or derivative to disk using a binary format.\n  * Currently each token type is limited to have a maximum of {#link Integer.MAX_VALUE} items.\n- *\n+ * <p>\n  * This instance provides means of wrapping {@link InputEntityVisitor} so that they automatically cache what they see.\n  * Each thread that visits data {@link #wrap(InputEntityVisitor)} its own visitor and serializes data into\n  * its thread-local buffer. When full it {@link #writeChunk(ByteBuffer) writes} that chunk of data to the {@link #channel},\n@@ -55,243 +56,239 @@ import static org.neo4j.unsafe.impl.batchimport.input.InputCache.newChunkHeaderB\n  */\n abstract class InputEntityCacheWriter implements InputCacher\n {\n-    static final String[] EMPTY_STRING_ARRAY = new String[0];\n+  static final String[] EMPTY_STRING_ARRAY = new String[0];\n \n-    protected final StoreChannel channel;\n-    private final ByteBuffer chunkHeaderChannel = newChunkHeaderBuffer();\n+  protected final StoreChannel channel;\n+  private final ByteBuffer chunkHeaderChannel = newChunkHeaderBuffer();\n \n-    private final FlushableChannel header;\n-    private final int chunkSize;\n+  private final FlushableChannel header;\n+  private final int chunkSize;\n \n-    private final int[] nextKeyId = new int[HIGH_TOKEN_TYPE];\n-    private final int[] maxKeyId = new int[HIGH_TOKEN_TYPE];\n+  private final int[] nextKeyId = new int[HIGH_TOKEN_TYPE];\n+  private final int[] maxKeyId = new int[HIGH_TOKEN_TYPE];\n \n-    @SuppressWarnings( \"unchecked\" )\n-    private final Map<String,Integer>[] tokens = new Map[HIGH_TOKEN_TYPE];\n+  @SuppressWarnings(\"unchecked\")\n+  private final Map<String, Integer>[] tokens = new Map[HIGH_TOKEN_TYPE];\n \n-    protected InputEntityCacheWriter( StoreChannel channel, StoreChannel header, RecordFormats recordFormats, int chunkSize )\n+  protected InputEntityCacheWriter(StoreChannel channel, StoreChannel header, RecordFormats recordFormats, int chunkSize)\n+  {\n+    this.chunkSize = chunkSize;\n+    initMaxTokenKeyIds(recordFormats);\n+\n+    // We don't really care about versions, it's just that apart from that the WritableLogChannel\n+    // does precisely what we want and there's certainly value in not duplicating that functionality.\n+    this.channel = channel;\n+    this.header = new PhysicalFlushableChannel(header);\n+    for (int i = 0; i < tokens.length; i++)\n     {\n-        this.chunkSize = chunkSize;\n-        initMaxTokenKeyIds( recordFormats );\n-\n-        // We don't really care about versions, it's just that apart from that the WritableLogChannel\n-        // does precisely what we want and there's certainly value in not duplicating that functionality.\n-        this.channel = channel;\n-        this.header = new PhysicalFlushableChannel( header );\n-        for ( int i = 0; i < tokens.length; i++ )\n-        {\n-            tokens[i] = new ConcurrentHashMap<>();\n-        }\n+      tokens[i] = new ConcurrentHashMap<>();\n     }\n+  }\n \n-    @Override\n-    public final synchronized InputEntityVisitor wrap( InputEntityVisitor visitor )\n+  @Override\n+  public final synchronized InputEntityVisitor wrap(InputEntityVisitor visitor)\n+  {\n+    return instantiateWrapper(visitor, chunkSize);\n+  }\n+\n+  protected abstract SerializingInputEntityVisitor instantiateWrapper(InputEntityVisitor visitor, int chunkSize);\n+\n+  void writeChunk(ByteBuffer buffer) throws IOException\n+  {\n+    // reserve space for the chunk\n+    long dataStartPosition;\n+    synchronized (this)\n     {\n-        return instantiateWrapper( visitor, chunkSize );\n+      // write header\n+      int chunkLength = buffer.limit();\n+      chunkHeaderChannel.clear();\n+      chunkHeaderChannel.putInt(chunkLength);\n+      chunkHeaderChannel.flip();\n+      channel.writeAll(chunkHeaderChannel);\n+\n+      dataStartPosition = channel.position();\n+      channel.position(dataStartPosition + chunkLength);\n     }\n \n-    protected abstract SerializingInputEntityVisitor instantiateWrapper( InputEntityVisitor visitor, int chunkSize );\n-\n-    void writeChunk( ByteBuffer buffer ) throws IOException\n+    // write chunk data\n+    channel.writeAll(buffer, dataStartPosition);\n+  }\n+\n+  @Override\n+  public void close() throws IOException\n+  {\n+    // write end tokens in the channels\n+    header.put(END_OF_HEADER);\n+    writeChunk(ByteBuffer.wrap(new byte[0]));\n+\n+    channel.close();\n+    header.close();\n+  }\n+\n+  private void initMaxTokenKeyIds(RecordFormats recordFormats)\n+  {\n+    maxKeyId[PROPERTY_KEY_TOKEN] = getMaxAcceptableTokenId(recordFormats.propertyKeyToken().getMaxId());\n+    maxKeyId[LABEL_TOKEN] = getMaxAcceptableTokenId(recordFormats.labelToken().getMaxId());\n+    maxKeyId[RELATIONSHIP_TYPE_TOKEN] = getMaxAcceptableTokenId(recordFormats.relationshipTypeToken().getMaxId());\n+    maxKeyId[GROUP_TOKEN] = getMaxAcceptableTokenId(recordFormats.relationshipGroup().getMaxId());\n+  }\n+\n+  private static int getMaxAcceptableTokenId(long maxId)\n+  {\n+    return (int) Math.min(Integer.MAX_VALUE, maxId);\n+  }\n+\n+  private int getOrCreateToken(byte type, String key) throws IOException\n+  {\n+    Integer id = tokens[type].get(key);\n+    if (id == null)\n     {\n-        // reserve space for the chunk\n-        long dataStartPosition;\n-        synchronized ( this )\n+      synchronized (header)\n+      {\n+        id = tokens[type].get(key);\n+        if (id == null)\n         {\n-            // write header\n-            int chunkLength = buffer.limit();\n-            chunkHeaderChannel.clear();\n-            chunkHeaderChannel.putInt( chunkLength );\n-            chunkHeaderChannel.flip();\n-            channel.writeAll( chunkHeaderChannel );\n-\n-            dataStartPosition = channel.position();\n-            channel.position( dataStartPosition + chunkLength );\n+          if (nextKeyId[type] == maxKeyId[type])\n+          {\n+            throw new UnsupportedOperationException(\"Too many tokens. Creation of more then \" +\n+                maxKeyId[type] + \" tokens is not supported.\");\n+          }\n+          tokens[type].put(key, id = nextKeyId[type]++);\n+          header.put(type);\n+          ValueType.stringType().write(key, header);\n         }\n-\n-        // write chunk data\n-        channel.writeAll( buffer, dataStartPosition );\n+      }\n     }\n-\n-    @Override\n-    public void close() throws IOException\n+    return id;\n+  }\n+\n+  abstract class SerializingInputEntityVisitor extends InputEntity\n+  {\n+    private final int lengthThreshold;\n+    private byte[] array;\n+    protected ByteBuffer buffer;\n+    private FlushableChannel bufferAsChannel;\n+    private final int[] previousGroupIds = new int[2];\n+\n+    SerializingInputEntityVisitor(InputEntityVisitor actual, int chunkSize)\n     {\n-        // write end tokens in the channels\n-        header.put( END_OF_HEADER );\n-        writeChunk( ByteBuffer.wrap( new byte[0] ) );\n-\n-        channel.close();\n-        header.close();\n+      super(actual);\n+      this.lengthThreshold = chunkSize;\n+      this.array = new byte[chunkSize + chunkSize / 10]; // some wiggle room\n+      this.buffer = ByteBuffer.wrap(array);\n+      this.bufferAsChannel = new ByteBufferFlushableChannel(buffer);\n     }\n \n-    private void initMaxTokenKeyIds( RecordFormats recordFormats )\n+    @Override\n+    public void endOfEntity() throws IOException\n     {\n-        maxKeyId[PROPERTY_KEY_TOKEN] = getMaxAcceptableTokenId( recordFormats.propertyKeyToken().getMaxId() );\n-        maxKeyId[LABEL_TOKEN] = getMaxAcceptableTokenId( recordFormats.labelToken().getMaxId() );\n-        maxKeyId[RELATIONSHIP_TYPE_TOKEN] = getMaxAcceptableTokenId( recordFormats.relationshipTypeToken().getMaxId() );\n-        maxKeyId[GROUP_TOKEN] = getMaxAcceptableTokenId( recordFormats.relationshipGroup().getMaxId() );\n+      super.endOfEntity();\n+\n+      // serialize into the buffer\n+      serializeEntity();\n+      if (buffer.position() >= lengthThreshold)\n+      {\n+        flushChunk();\n+        clearState();\n+      }\n     }\n \n-    private static int getMaxAcceptableTokenId( long maxId )\n+    protected void clearState()\n     {\n-        return (int) Math.min( Integer.MAX_VALUE, maxId );\n+      Arrays.fill(previousGroupIds, Group.GLOBAL.id());\n     }\n \n-    private int getOrCreateToken( byte type, String key ) throws IOException\n+    protected abstract void serializeEntity() throws IOException;\n+\n+    protected void writeProperties() throws IOException\n     {\n-        Integer id = tokens[type].get( key );\n-        if ( id == null )\n+      if (hasPropertyId)\n+      {\n+        buffer(Short.BYTES + Long.BYTES).putShort(HAS_FIRST_PROPERTY_ID).putLong(propertyId);\n+      } else\n+      {\n+        Object[] properties = properties();\n+        buffer(Short.BYTES).putShort(safeCastLongToShort(properties.length / 2));\n+        for (int i = 0; i < properties.length; i++)\n         {\n-            synchronized ( header )\n-            {\n-                id = tokens[type].get( key );\n-                if ( id == null )\n-                {\n-                    if ( nextKeyId[type] == maxKeyId[type] )\n-                    {\n-                        throw new UnsupportedOperationException( \"Too many tokens. Creation of more then \" +\n-                                maxKeyId[type] + \" tokens is not supported.\" );\n-                    }\n-                    tokens[type].put( key, id = nextKeyId[type]++ );\n-                    header.put( type );\n-                    ValueType.stringType().write( key, header );\n-                }\n-            }\n+          Object key = properties[i++];\n+          Object value = properties[i];\n+          if (value == null)\n+          {\n+            continue;\n+          }\n+          writeToken(PROPERTY_KEY_TOKEN, key);\n+          writeValue(value);\n         }\n-        return id;\n+      }\n     }\n \n-    abstract class SerializingInputEntityVisitor extends InputEntity\n+    protected ByteBuffer buffer(int requiredSpace)\n     {\n-        private final int lengthThreshold;\n-        private byte[] array;\n-        protected ByteBuffer buffer;\n-        private FlushableChannel bufferAsChannel;\n-        private final int[] previousGroupIds = new int[2];\n-\n-        SerializingInputEntityVisitor( InputEntityVisitor actual, int chunkSize )\n-        {\n-            super( actual );\n-            this.lengthThreshold = chunkSize;\n-            this.array = new byte[chunkSize + chunkSize / 10]; // some wiggle room\n-            this.buffer = ByteBuffer.wrap( array );\n-            this.bufferAsChannel = new ByteBufferFlushableChannel( buffer );\n-        }\n-\n-        @Override\n-        public void endOfEntity() throws IOException\n-        {\n-            super.endOfEntity();\n-\n-            // serialize into the buffer\n-            serializeEntity();\n-            if ( buffer.position() >= lengthThreshold )\n-            {\n-                flushChunk();\n-                clearState();\n-            }\n-        }\n-\n-        protected void clearState()\n-        {\n-            Arrays.fill( previousGroupIds, Group.GLOBAL.id() );\n-        }\n-\n-        protected abstract void serializeEntity() throws IOException;\n-\n-        protected void writeProperties() throws IOException\n-        {\n-            if ( hasPropertyId )\n-            {\n-                buffer( Short.BYTES + Long.BYTES ).putShort( HAS_FIRST_PROPERTY_ID ).putLong( propertyId );\n-            }\n-            else\n-            {\n-                Object[] properties = properties();\n-                buffer( Short.BYTES ).putShort( safeCastLongToShort( properties.length / 2 ) );\n-                for ( int i = 0; i < properties.length; i++ )\n-                {\n-                    Object key = properties[i++];\n-                    Object value = properties[i];\n-                    if ( value == null )\n-                    {\n-                        continue;\n-                    }\n-                    writeToken( PROPERTY_KEY_TOKEN, key );\n-                    writeValue( value );\n-                }\n-            }\n-        }\n-\n-        protected ByteBuffer buffer( int requiredSpace )\n-        {\n-            int position = buffer.position();\n-            if ( position + requiredSpace >= buffer.capacity() )\n-            {\n-                array = Arrays.copyOf( array, max( array.length * 2, position + requiredSpace ) ); // at least double in size\n-                buffer = ByteBuffer.wrap( array );\n-                buffer.position( position );\n-                bufferAsChannel = new ByteBufferFlushableChannel( buffer );\n-            }\n-            return buffer;\n-        }\n+      int position = buffer.position();\n+      if (position + requiredSpace >= buffer.capacity())\n+      {\n+        array = Arrays.copyOf(array, max(array.length * 2, position + requiredSpace)); // at least double in size\n+        buffer = ByteBuffer.wrap(array);\n+        buffer.position(position);\n+        bufferAsChannel = new ByteBufferFlushableChannel(buffer);\n+      }\n+      return buffer;\n+    }\n \n-        protected void writeGroup( Group group, int slot ) throws IOException\n-        {\n-            group = group != null ? group : Group.GLOBAL;\n-            if ( group.id() == previousGroupIds[slot] )\n-            {\n-                buffer( Byte.BYTES ).put( SAME_GROUP );\n-            }\n-            else\n-            {\n-                buffer( Byte.BYTES + Integer.BYTES ).put( NEW_GROUP ).putInt( previousGroupIds[slot] = group.id() );\n-                writeToken( GROUP_TOKEN, group.name() );\n-            }\n-        }\n+    protected void writeGroup(Group group, int slot) throws IOException\n+    {\n+      group = group != null ? group : Group.GLOBAL;\n+      if (group.id() == previousGroupIds[slot])\n+      {\n+        buffer(Byte.BYTES).put(SAME_GROUP);\n+      } else\n+      {\n+        buffer(Byte.BYTES + Integer.BYTES).put(NEW_GROUP).putInt(previousGroupIds[slot] = group.id());\n+        writeToken(GROUP_TOKEN, group.name());\n+      }\n+    }\n \n-        protected void writeValue( Object value ) throws IOException\n-        {\n-            ValueType type = ValueType.typeOf( value );\n-            int length = type.length( value );\n-            buffer( Byte.BYTES + length ).put( type.id() );\n-            type.write( value, bufferAsChannel );\n-        }\n+    protected void writeValue(Object value) throws IOException\n+    {\n+      ValueType type = ValueType.typeOf(value);\n+      int length = type.length(value);\n+      buffer(Byte.BYTES + length).put(type.id());\n+      type.write(value, bufferAsChannel);\n+    }\n \n-        protected void writeToken( byte type, Object key ) throws IOException\n-        {\n-            if ( key instanceof String )\n-            {\n-                int id = getOrCreateToken( type, (String) key );\n-                buffer( Integer.BYTES ).putInt( id );\n-            }\n-            else if ( key instanceof Integer )\n-            {\n-                // Here we signal that we have a real token id, not to be confused by the local and contrived\n-                // token ids we generate in here. Following this -1 is the real token id.\n-                buffer( Integer.BYTES + Integer.BYTES ).putInt( (short) -1 ).putInt( (Integer) key );\n-            }\n-            else\n-            {\n-                throw new IllegalArgumentException( \"Invalid key \" + key + \", \" + key.getClass() );\n-            }\n-        }\n+    protected void writeToken(byte type, Object key) throws IOException\n+    {\n+      if (key instanceof String)\n+      {\n+        int id = getOrCreateToken(type, (String) key);\n+        buffer(Integer.BYTES).putInt(id);\n+      } else if (key instanceof Integer)\n+      {\n+        // Here we signal that we have a real token id, not to be confused by the local and contrived\n+        // token ids we generate in here. Following this -1 is the real token id.\n+        buffer(Integer.BYTES + Integer.BYTES).putInt((short) -1).putInt((Integer) key);\n+      } else\n+      {\n+        throw new IllegalArgumentException(\"Invalid key \" + key + \", \" + key.getClass());\n+      }\n+    }\n \n-        @Override\n-        public void close() throws IOException\n-        {\n-            if ( buffer.position() > 0 )\n-            {\n-                flushChunk();\n-            }\n-        }\n+    @Override\n+    public void close() throws IOException\n+    {\n+      if (buffer.position() > 0)\n+      {\n+        flushChunk();\n+      }\n+    }\n \n-        private void flushChunk() throws IOException\n-        {\n-            buffer( Short.BYTES ).putShort( END_OF_ENTITIES );\n-            buffer.flip();\n-            writeChunk( buffer );\n-            buffer.clear();\n-        }\n+    private void flushChunk() throws IOException\n+    {\n+      buffer(Short.BYTES).putShort(END_OF_ENTITIES);\n+      buffer.flip();\n+      writeChunk(buffer);\n+      buffer.clear();\n     }\n+  }\n }\n",
            "diff_size": 288
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "136",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/500/InputEntityCacheWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/500/InputEntityCacheWriter.java\nindex 5f77390f308..65774d2047c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/500/InputEntityCacheWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/500/InputEntityCacheWriter.java\n@@ -72,7 +72,8 @@ abstract class InputEntityCacheWriter implements InputCacher\n     protected InputEntityCacheWriter( StoreChannel channel, StoreChannel header, RecordFormats recordFormats, int chunkSize )\n     {\n         this.chunkSize = chunkSize;\n-        initMaxTokenKeyIds( recordFormats );\n+\n+initMaxTokenKeyIds( recordFormats );\n \n         // We don't really care about versions, it's just that apart from that the WritableLogChannel\n         // does precisely what we want and there's certainly value in not duplicating that functionality.\n@@ -104,8 +105,7 @@ abstract class InputEntityCacheWriter implements InputCacher\n             chunkHeaderChannel.putInt( chunkLength );\n             chunkHeaderChannel.flip();\n             channel.writeAll( chunkHeaderChannel );\n-\n-            dataStartPosition = channel.position();\n+dataStartPosition = channel.position();\n             channel.position( dataStartPosition + chunkLength );\n         }\n \n@@ -119,8 +119,7 @@ abstract class InputEntityCacheWriter implements InputCacher\n         // write end tokens in the channels\n         header.put( END_OF_HEADER );\n         writeChunk( ByteBuffer.wrap( new byte[0] ) );\n-\n-        channel.close();\n+channel.close();\n         header.close();\n     }\n \n@@ -134,7 +133,7 @@ abstract class InputEntityCacheWriter implements InputCacher\n \n     private static int getMaxAcceptableTokenId( long maxId )\n     {\n-        return (int) Math.min( Integer.MAX_VALUE, maxId );\n+        return ( int) Math.min( Integer.MAX_VALUE, maxId );\n     }\n \n     private int getOrCreateToken( byte type, String key ) throws IOException\n@@ -149,10 +148,10 @@ abstract class InputEntityCacheWriter implements InputCacher\n                 {\n                     if ( nextKeyId[type] == maxKeyId[type] )\n                     {\n-                        throw new UnsupportedOperationException( \"Too many tokens. Creation of more then \" +\n-                                maxKeyId[type] + \" tokens is not supported.\" );\n+                        throw new UnsupportedOperationException( \"Too many tokens. Creation of more then \" + maxKeyId[type] + \" tokens is not supported.\" );\n                     }\n-                    tokens[type].put( key, id = nextKeyId[type]++ );\n+\n+tokens[type].put( key, id = nextKeyId[type]++ );\n                     header.put( type );\n                     ValueType.stringType().write( key, header );\n                 }\n@@ -217,7 +216,8 @@ abstract class InputEntityCacheWriter implements InputCacher\n                     {\n                         continue;\n                     }\n-                    writeToken( PROPERTY_KEY_TOKEN, key );\n+\n+writeToken( PROPERTY_KEY_TOKEN, key );\n                     writeValue( value );\n                 }\n             }\n@@ -233,7 +233,8 @@ abstract class InputEntityCacheWriter implements InputCacher\n                 buffer.position( position );\n                 bufferAsChannel = new ByteBufferFlushableChannel( buffer );\n             }\n-            return buffer;\n+\n+return buffer;\n         }\n \n         protected void writeGroup( Group group, int slot ) throws IOException\n@@ -294,4 +295,4 @@ abstract class InputEntityCacheWriter implements InputCacher\n             buffer.clear();\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}