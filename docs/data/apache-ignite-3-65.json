{
    "project_name": "apache-ignite-3",
    "error_id": "65",
    "information": {
        "errors": [
            {
                "line": "26",
                "column": "5",
                "severity": "error",
                "message": "'VARIABLE_DEF' should be separated from previous line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "    implements DebugNode {\n    private final int lineNumber;\n    private final LabelNode label = new LabelNode();\n\n    public LineNumberNode(int lineNumber) {\n        this.lineNumber = lineNumber;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/65/LineNumberNode.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler/65/LineNumberNode.java\nindex f735cdb5867..f8ea8bd5344 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/65/LineNumberNode.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler/65/LineNumberNode.java\n@@ -23,6 +23,7 @@ import org.objectweb.asm.MethodVisitor;\n public class LineNumberNode\n     implements DebugNode {\n     private final int lineNumber;\n+\n     private final LabelNode label = new LabelNode();\n \n     public LineNumberNode(int lineNumber) {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/65/LineNumberNode.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/intellij/65/LineNumberNode.java\nindex f735cdb5867..f6bd5a803e3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/65/LineNumberNode.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/intellij/65/LineNumberNode.java\n@@ -11,6 +11,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.facebook.presto.bytecode.debug;\n \n import com.facebook.presto.bytecode.BytecodeNode;\n@@ -22,38 +23,39 @@ import org.objectweb.asm.MethodVisitor;\n \n public class LineNumberNode\n     implements DebugNode {\n-    private final int lineNumber;\n-    private final LabelNode label = new LabelNode();\n+  private final int lineNumber;\n \n-    public LineNumberNode(int lineNumber) {\n-        this.lineNumber = lineNumber;\n-    }\n+  private final LabelNode label = new LabelNode();\n \n-    @Override\n-    public void accept(MethodVisitor visitor, MethodGenerationContext generationContext) {\n-        if (generationContext.updateLineNumber(lineNumber)) {\n-            label.accept(visitor, generationContext);\n-            visitor.visitLineNumber(lineNumber, label.getLabel());\n-        }\n-    }\n-\n-    public int getLineNumber() {\n-        return lineNumber;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return getClass().getSimpleName() +\n-            \"{line=\" + lineNumber + '}';\n-    }\n-\n-    @Override\n-    public List<BytecodeNode> getChildNodes() {\n-        return List.of();\n-    }\n+  public LineNumberNode(int lineNumber) {\n+    this.lineNumber = lineNumber;\n+  }\n \n-    @Override\n-    public <T> T accept(BytecodeNode parent, BytecodeVisitor<T> visitor) {\n-        return visitor.visitLineNumber(parent, this);\n+  @Override\n+  public void accept(MethodVisitor visitor, MethodGenerationContext generationContext) {\n+    if (generationContext.updateLineNumber(lineNumber)) {\n+      label.accept(visitor, generationContext);\n+      visitor.visitLineNumber(lineNumber, label.getLabel());\n     }\n+  }\n+\n+  public int getLineNumber() {\n+    return lineNumber;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return getClass().getSimpleName() +\n+        \"{line=\" + lineNumber + '}';\n+  }\n+\n+  @Override\n+  public List<BytecodeNode> getChildNodes() {\n+    return List.of();\n+  }\n+\n+  @Override\n+  public <T> T accept(BytecodeNode parent, BytecodeVisitor<T> visitor) {\n+    return visitor.visitLineNumber(parent, this);\n+  }\n }\n",
            "diff_size": 54
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "26",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' should be separated from previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/65/LineNumberNode.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/naturalize/65/LineNumberNode.java\nindex f735cdb5867..9aef40d0f8a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/65/LineNumberNode.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/naturalize/65/LineNumberNode.java\n@@ -56,4 +56,4 @@ public class LineNumberNode\n     public <T> T accept(BytecodeNode parent, BytecodeVisitor<T> visitor) {\n         return visitor.visitLineNumber(parent, this);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "24",
                    "column": "1",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "29",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "32",
                    "column": "5",
                    "severity": "error",
                    "message": "'CTOR_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "37",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "50",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "55",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "60",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/65/LineNumberNode.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/codebuff/65/LineNumberNode.java\nindex f735cdb5867..f2e1354919d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/65/LineNumberNode.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/codebuff/65/LineNumberNode.java\n@@ -20,19 +20,24 @@ import com.facebook.presto.bytecode.instruction.LabelNode;\n import java.util.List;\n import org.objectweb.asm.MethodVisitor;\n \n-public class LineNumberNode\n-    implements DebugNode {\n+\n+public class LineNumberNode implements DebugNode {\n+\n     private final int lineNumber;\n+\n+\n     private final LabelNode label = new LabelNode();\n \n+\n     public LineNumberNode(int lineNumber) {\n         this.lineNumber = lineNumber;\n     }\n \n-    @Override\n-    public void accept(MethodVisitor visitor, MethodGenerationContext generationContext) {\n+\n+    @Override public void accept(MethodVisitor visitor, MethodGenerationContext generationContext) {\n         if (generationContext.updateLineNumber(lineNumber)) {\n             label.accept(visitor, generationContext);\n+\n             visitor.visitLineNumber(lineNumber, label.getLabel());\n         }\n     }\n@@ -41,19 +46,18 @@ public class LineNumberNode\n         return lineNumber;\n     }\n \n-    @Override\n-    public String toString() {\n-        return getClass().getSimpleName() +\n-            \"{line=\" + lineNumber + '}';\n+\n+    @Override public String toString() {\n+        return getClass().getSimpleName() + \"{line=\" + lineNumber + '}';\n     }\n \n-    @Override\n-    public List<BytecodeNode> getChildNodes() {\n+\n+    @Override public List<BytecodeNode> getChildNodes() {\n         return List.of();\n     }\n \n-    @Override\n-    public <T> T accept(BytecodeNode parent, BytecodeVisitor<T> visitor) {\n+\n+    @Override public <T> T accept(BytecodeNode parent, BytecodeVisitor<T> visitor) {\n         return visitor.visitLineNumber(parent, this);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/65/LineNumberNode.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_random/65/LineNumberNode.java\nindex f735cdb5867..f8ea8bd5344 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/65/LineNumberNode.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_random/65/LineNumberNode.java\n@@ -23,6 +23,7 @@ import org.objectweb.asm.MethodVisitor;\n public class LineNumberNode\n     implements DebugNode {\n     private final int lineNumber;\n+\n     private final LabelNode label = new LabelNode();\n \n     public LineNumberNode(int lineNumber) {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/65/LineNumberNode.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_three_grams/65/LineNumberNode.java\nindex f735cdb5867..f8ea8bd5344 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/65/LineNumberNode.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_three_grams/65/LineNumberNode.java\n@@ -23,6 +23,7 @@ import org.objectweb.asm.MethodVisitor;\n public class LineNumberNode\n     implements DebugNode {\n     private final int lineNumber;\n+\n     private final LabelNode label = new LabelNode();\n \n     public LineNumberNode(int lineNumber) {\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}