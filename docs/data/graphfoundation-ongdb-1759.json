{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1759",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "58",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "122",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1759/ScriptExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1759/ScriptExecutor.java\nindex e2fe23388fe..96a9bdef2fe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1759/ScriptExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1759/ScriptExecutor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.shell.apps.extra;\n \n import java.io.File;\n@@ -39,164 +40,164 @@ import static org.neo4j.helpers.TextUtil.tokenizeStringWithQuotes;\n  */\n public abstract class ScriptExecutor\n {\n-    protected abstract String getPathKey();\n-\n-    protected String getDefaultPaths()\n+  protected abstract String getPathKey();\n+\n+  protected String getDefaultPaths()\n+  {\n+    return \".:src:src\" + File.separator + \"script\";\n+  }\n+\n+  /**\n+   * Executes a groovy script (with arguments) defined in {@code line}.\n+   *\n+   * @param line    the line which defines the groovy script with arguments.\n+   * @param session the {@link Session} to include as argument in groovy.\n+   * @param out     the {@link Output} to include as argument in groovy.\n+   * @throws ShellException if the execution of a groovy script fails.\n+   */\n+  public void execute(String line, Session session, Output out)\n+      throws Exception\n+  {\n+    this.ensureDependenciesAreInClasspath();\n+    if (line == null || line.trim().length() == 0)\n     {\n-        return \".:src:src\" + File.separator + \"script\";\n+      return;\n     }\n \n-    /**\n-     * Executes a groovy script (with arguments) defined in {@code line}.\n-     * @param line the line which defines the groovy script with arguments.\n-     * @param session the {@link Session} to include as argument in groovy.\n-     * @param out the {@link Output} to include as argument in groovy.\n-     * @throws ShellException if the execution of a groovy script fails.\n-     */\n-    public void execute( String line, Session session, Output out )\n-        throws Exception\n+    List<String> pathList = this.getEnvPaths(session);\n+    String[] paths = pathList.toArray(new String[pathList.size()]);\n+    Object interpreter = this.newInterpreter(paths);\n+    Map<String, Object> properties = new HashMap<>();\n+    properties.put(\"out\", out);\n+    properties.put(\"session\", session);\n+    this.runScripts(interpreter, properties, line, paths);\n+  }\n+\n+  private void runScripts(Object interpreter,\n+                          Map<String, Object> properties, String line, String[] paths)\n+      throws Exception\n+  {\n+    ArgReader reader = new ArgReader(tokenizeStringWithQuotes(line));\n+    while (reader.hasNext())\n     {\n-        this.ensureDependenciesAreInClasspath();\n-        if ( line == null || line.trim().length() == 0 )\n-        {\n-            return;\n-        }\n-\n-        List<String> pathList = this.getEnvPaths( session );\n-        String[] paths = pathList.toArray( new String[ pathList.size() ] );\n-        Object interpreter = this.newInterpreter( paths );\n-        Map<String, Object> properties = new HashMap<>();\n-        properties.put( \"out\", out );\n-        properties.put( \"session\", session );\n-        this.runScripts( interpreter, properties, line, paths );\n+      String arg = reader.next();\n+      if (arg.startsWith(\"--\"))\n+      {\n+        String[] scriptArgs = getScriptArgs(reader);\n+        String scriptName = arg.substring(2);\n+        Map<String, Object> props = new HashMap<>(properties);\n+        props.put(\"args\", scriptArgs);\n+        this.runScript(interpreter, scriptName, props, paths);\n+      }\n     }\n+  }\n \n-    private void runScripts( Object interpreter,\n-        Map<String, Object> properties, String line, String[] paths )\n-        throws Exception\n-    {\n-        ArgReader reader = new ArgReader( tokenizeStringWithQuotes( line ) );\n-        while ( reader.hasNext() )\n-        {\n-            String arg = reader.next();\n-            if ( arg.startsWith( \"--\" ) )\n-            {\n-                String[] scriptArgs = getScriptArgs( reader );\n-                String scriptName = arg.substring( 2 );\n-                Map<String, Object> props = new HashMap<>( properties );\n-                props.put( \"args\", scriptArgs );\n-                this.runScript( interpreter, scriptName, props, paths );\n-            }\n-        }\n-    }\n-\n-    protected abstract void runScript( Object interpreter,\n-        String scriptName, Map<String, Object> properties, String[] paths )\n-        throws Exception;\n+  protected abstract void runScript(Object interpreter,\n+                                    String scriptName, Map<String, Object> properties, String[] paths)\n+      throws Exception;\n \n-    private String[] getScriptArgs( ArgReader reader )\n+  private String[] getScriptArgs(ArgReader reader)\n+  {\n+    reader.mark();\n+    try\n     {\n-        reader.mark();\n-        try\n+      ArrayList<String> list = new ArrayList<>();\n+      while (reader.hasNext())\n+      {\n+        String arg = reader.next();\n+        if (arg.startsWith(\"--\"))\n         {\n-            ArrayList<String> list = new ArrayList<>();\n-            while ( reader.hasNext() )\n-            {\n-                String arg = reader.next();\n-                if ( arg.startsWith( \"--\" ) )\n-                {\n-                    break;\n-                }\n-                list.add( arg );\n-                reader.mark();\n-            }\n-            return list.toArray( new String[ list.size() ] );\n+          break;\n         }\n-        finally\n-        {\n-            reader.flip();\n-        }\n-    }\n-\n-    private List<String> getEnvPaths( Session session )\n-        throws ShellException\n+        list.add(arg);\n+        reader.mark();\n+      }\n+      return list.toArray(new String[list.size()]);\n+    } finally\n     {\n-        List<String> list = new ArrayList<>();\n-        collectPaths( list, (String) session.get( getPathKey() ) );\n-        collectPaths( list, getDefaultPaths() );\n-        return list;\n+      reader.flip();\n     }\n-\n-    private void collectPaths( List<String> paths, String pathString )\n+  }\n+\n+  private List<String> getEnvPaths(Session session)\n+      throws ShellException\n+  {\n+    List<String> list = new ArrayList<>();\n+    collectPaths(list, (String) session.get(getPathKey()));\n+    collectPaths(list, getDefaultPaths());\n+    return list;\n+  }\n+\n+  private void collectPaths(List<String> paths, String pathString)\n+  {\n+    if (pathString != null && pathString.trim().length() > 0)\n     {\n-        if ( pathString != null && pathString.trim().length() > 0 )\n-        {\n-            Collections.addAll( paths, pathString.split( \":\" ) );\n-        }\n+      Collections.addAll(paths, pathString.split(\":\"));\n     }\n+  }\n \n-    protected abstract Object newInterpreter( String[] paths )\n-        throws Exception;\n+  protected abstract Object newInterpreter(String[] paths)\n+      throws Exception;\n \n-    protected abstract void ensureDependenciesAreInClasspath()\n-        throws Exception;\n+  protected abstract void ensureDependenciesAreInClasspath()\n+      throws Exception;\n \n-    static class ArgReader implements Iterator<String>\n-    {\n-        private static final int START_INDEX = -1;\n+  static class ArgReader implements Iterator<String>\n+  {\n+    private static final int START_INDEX = -1;\n \n-        private int index = START_INDEX;\n-        private final String[] args;\n-        private Integer mark;\n+    private int index = START_INDEX;\n+    private final String[] args;\n+    private Integer mark;\n \n-        ArgReader( String[] args )\n-        {\n-            this.args = args;\n-        }\n+    ArgReader(String[] args)\n+    {\n+      this.args = args;\n+    }\n \n-        @Override\n-        public boolean hasNext()\n-        {\n-            return this.index + 1 < this.args.length;\n-        }\n+    @Override\n+    public boolean hasNext()\n+    {\n+      return this.index + 1 < this.args.length;\n+    }\n \n-        @Override\n-        public String next()\n-        {\n-            if ( !hasNext() )\n-            {\n-                throw new NoSuchElementException();\n-            }\n-            this.index++;\n-            return this.args[ this.index ];\n-        }\n+    @Override\n+    public String next()\n+    {\n+      if (!hasNext())\n+      {\n+        throw new NoSuchElementException();\n+      }\n+      this.index++;\n+      return this.args[this.index];\n+    }\n \n-        @Override\n-        public void remove()\n-        {\n-            throw new UnsupportedOperationException();\n-        }\n+    @Override\n+    public void remove()\n+    {\n+      throw new UnsupportedOperationException();\n+    }\n \n-        /**\n-         * Marks the position so that a call to {@link #flip()} returns to that\n-         * position.\n-         */\n-        public void mark()\n-        {\n-            this.mark = this.index;\n-        }\n+    /**\n+     * Marks the position so that a call to {@link #flip()} returns to that\n+     * position.\n+     */\n+    public void mark()\n+    {\n+      this.mark = this.index;\n+    }\n \n-        /**\n-         * Flips back to the position defined in {@link #mark()}.\n-         */\n-        public void flip()\n-        {\n-            if ( this.mark == null )\n-            {\n-                throw new IllegalStateException();\n-            }\n-            this.index = this.mark;\n-            this.mark = null;\n-        }\n+    /**\n+     * Flips back to the position defined in {@link #mark()}.\n+     */\n+    public void flip()\n+    {\n+      if (this.mark == null)\n+      {\n+        throw new IllegalStateException();\n+      }\n+      this.index = this.mark;\n+      this.mark = null;\n     }\n+  }\n }\n",
            "diff_size": 180
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1759/ScriptExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1759/ScriptExecutor.java\nindex e2fe23388fe..56ed7803b28 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1759/ScriptExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1759/ScriptExecutor.java\n@@ -53,9 +53,8 @@ public abstract class ScriptExecutor\n      * @param out the {@link Output} to include as argument in groovy.\n      * @throws ShellException if the execution of a groovy script fails.\n      */\n-    public void execute( String line, Session session, Output out )\n-        throws Exception\n-    {\n+    public void execute( String line, Session session, Output out ) throws Exception\n+{\n         this.ensureDependenciesAreInClasspath();\n         if ( line == null || line.trim().length() == 0 )\n         {\n@@ -63,18 +62,16 @@ public abstract class ScriptExecutor\n         }\n \n         List<String> pathList = this.getEnvPaths( session );\n-        String[] paths = pathList.toArray( new String[ pathList.size() ] );\n+        String[] paths = pathList.toArray( new String[pathList.size() ] );\n         Object interpreter = this.newInterpreter( paths );\n-        Map<String, Object> properties = new HashMap<>();\n+        Map<String,Object> properties = new HashMap<>();\n         properties.put( \"out\", out );\n         properties.put( \"session\", session );\n         this.runScripts( interpreter, properties, line, paths );\n     }\n \n-    private void runScripts( Object interpreter,\n-        Map<String, Object> properties, String line, String[] paths )\n-        throws Exception\n-    {\n+    private void runScripts( Object interpreter, Map<String,Object> properties, String line, String[] paths ) throws Exception\n+{\n         ArgReader reader = new ArgReader( tokenizeStringWithQuotes( line ) );\n         while ( reader.hasNext() )\n         {\n@@ -83,18 +80,16 @@ public abstract class ScriptExecutor\n             {\n                 String[] scriptArgs = getScriptArgs( reader );\n                 String scriptName = arg.substring( 2 );\n-                Map<String, Object> props = new HashMap<>( properties );\n+                Map<String,Object> props = new HashMap<>( properties );\n                 props.put( \"args\", scriptArgs );\n                 this.runScript( interpreter, scriptName, props, paths );\n             }\n         }\n     }\n \n-    protected abstract void runScript( Object interpreter,\n-        String scriptName, Map<String, Object> properties, String[] paths )\n-        throws Exception;\n+    protected abstract void runScript( Object interpreter, String scriptName, Map<String,Object> properties, String[] paths ) throws Exception;\n \n-    private String[] getScriptArgs( ArgReader reader )\n+private String[] getScriptArgs( ArgReader reader )\n     {\n         reader.mark();\n         try\n@@ -110,7 +105,8 @@ public abstract class ScriptExecutor\n                 list.add( arg );\n                 reader.mark();\n             }\n-            return list.toArray( new String[ list.size() ] );\n+\n+return list.toArray( new String[list.size() ] );\n         }\n         finally\n         {\n@@ -118,9 +114,8 @@ public abstract class ScriptExecutor\n         }\n     }\n \n-    private List<String> getEnvPaths( Session session )\n-        throws ShellException\n-    {\n+    private List<String> getEnvPaths( Session session ) throws ShellException\n+{\n         List<String> list = new ArrayList<>();\n         collectPaths( list, (String) session.get( getPathKey() ) );\n         collectPaths( list, getDefaultPaths() );\n@@ -135,12 +130,9 @@ public abstract class ScriptExecutor\n         }\n     }\n \n-    protected abstract Object newInterpreter( String[] paths )\n-        throws Exception;\n-\n-    protected abstract void ensureDependenciesAreInClasspath()\n-        throws Exception;\n+    protected abstract Object newInterpreter( String[] paths ) throws Exception;\n \n+protected abstract void ensureDependenciesAreInClasspath() throws Exception;\n     static class ArgReader implements Iterator<String>\n     {\n         private static final int START_INDEX = -1;\n@@ -168,7 +160,7 @@ public abstract class ScriptExecutor\n                 throw new NoSuchElementException();\n             }\n             this.index++;\n-            return this.args[ this.index ];\n+            return this.args[ this.index];\n         }\n \n         @Override\n@@ -199,4 +191,4 @@ public abstract class ScriptExecutor\n             this.mark = null;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 27
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}