{
    "project_name": "OpenEMS-openems",
    "error_id": "16",
    "information": {
        "errors": [
            {
                "line": "142",
                "column": "44",
                "severity": "warning",
                "message": "'(' is followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
            }
        ]
    },
    "source_code": "\t@Override\n\tpublic ModbusSlaveTable getModbusSlaveTable(AccessMode accessMode) {\n\t\treturn new ModbusSlaveTable( //\n\t\t\t\tOpenemsComponent.getModbusSlaveNatureTable(accessMode), //\n\t\t\t\tSymmetricMeter.getModbusSlaveNatureTable(accessMode), //\n\t\t\t\tAsymmetricMeter.getModbusSlaveNatureTable(accessMode) //",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/errored/1/16/MeterArtemesAM2.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/styler/16/MeterArtemesAM2.java\nindex 8d08e43bfe0..a136ac9c3b6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/errored/1/16/MeterArtemesAM2.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/styler/16/MeterArtemesAM2.java\n@@ -139,7 +139,7 @@ public class MeterArtemesAM2 extends AbstractOpenemsModbusComponent\n \n \t@Override\n \tpublic ModbusSlaveTable getModbusSlaveTable(AccessMode accessMode) {\n-\t\treturn new ModbusSlaveTable( //\n+\t\treturn new ModbusSlaveTable(//\n \t\t\t\tOpenemsComponent.getModbusSlaveNatureTable(accessMode), //\n \t\t\t\tSymmetricMeter.getModbusSlaveNatureTable(accessMode), //\n \t\t\t\tAsymmetricMeter.getModbusSlaveNatureTable(accessMode) //\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "142",
                    "column": "32",
                    "severity": "warning",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/errored/1/16/MeterArtemesAM2.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/intellij/16/MeterArtemesAM2.java\nindex 8d08e43bfe0..bb2dec65981 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/errored/1/16/MeterArtemesAM2.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/intellij/16/MeterArtemesAM2.java\n@@ -35,114 +35,114 @@ import io.openems.edge.meter.api.SymmetricMeter;\n \n @Designate(ocd = Config.class, factory = true)\n @Component(name = \"Meter.Artemes.AM2\", //\n-\t\timmediate = true, configurationPolicy = ConfigurationPolicy.REQUIRE)\n+    immediate = true, configurationPolicy = ConfigurationPolicy.REQUIRE)\n public class MeterArtemesAM2 extends AbstractOpenemsModbusComponent\n-\t\timplements SymmetricMeter, AsymmetricMeter, OpenemsComponent, ModbusSlave {\n-\n-\tprivate MeterType metertype = MeterType.PRODUCTION;\n-\n-\t@Reference\n-\tprotected ConfigurationAdmin cm;\n-\n-\tpublic MeterArtemesAM2() {\n-\t\tsuper(//\n-\t\t\t\tOpenemsComponent.ChannelId.values(), //\n-\t\t\t\tAsymmetricMeter.ChannelId.values(), //\n-\t\t\t\tSymmetricMeter.ChannelId.values(), //\n-\t\t\t\tChannelId.values() //\n-\t\t);\n-\t}\n-\n-\t@Reference(policy = ReferencePolicy.STATIC, policyOption = ReferencePolicyOption.GREEDY, cardinality = ReferenceCardinality.MANDATORY)\n-\tprotected void setModbus(BridgeModbus modbus) {\n-\t\tsuper.setModbus(modbus);\n-\t}\n-\n-\t@Activate\n-\tvoid activate(ComponentContext context, Config config) throws OpenemsException {\n-\t\tthis.metertype = config.type();\n-\n-\t\tif (super.activate(context, config.id(), config.alias(), config.enabled(), config.modbusUnitId(), this.cm,\n-\t\t\t\t\"Modbus\", config.modbus_id())) {\n-\t\t\treturn;\n-\t\t}\n-\t}\n-\n-\t@Deactivate\n-\tprotected void deactivate() {\n-\t\tsuper.deactivate();\n-\t}\n-\n-\tpublic enum ChannelId implements io.openems.edge.common.channel.ChannelId {\n-\t\t;\n-\t\tprivate final Doc doc;\n-\n-\t\tprivate ChannelId(Doc doc) {\n-\t\t\tthis.doc = doc;\n-\t\t}\n-\n-\t\tpublic Doc doc() {\n-\t\t\treturn this.doc;\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic MeterType getMeterType() {\n-\t\treturn this.metertype;\n-\t}\n-\n-\t@Override\n-\tprotected ModbusProtocol defineModbusProtocol() throws OpenemsException {\n-\t\treturn new ModbusProtocol(this,\n-\t\t\t\tnew FC4ReadInputRegistersTask(0x0000, Priority.HIGH,\n-\t\t\t\t\t\tm(AsymmetricMeter.ChannelId.VOLTAGE_L1, new UnsignedDoublewordElement(0x0000)),\n-\t\t\t\t\t\tm(AsymmetricMeter.ChannelId.VOLTAGE_L2, new UnsignedDoublewordElement(0x0002)),\n-\t\t\t\t\t\tm(AsymmetricMeter.ChannelId.VOLTAGE_L3, new UnsignedDoublewordElement(0x0004)),\n-\t\t\t\t\t\tnew DummyRegisterElement(0x0006, 0x000B),\n-\t\t\t\t\t\tm(SymmetricMeter.ChannelId.VOLTAGE, new UnsignedDoublewordElement(0x000C)),\n-\t\t\t\t\t\tm(AsymmetricMeter.ChannelId.CURRENT_L1, new SignedDoublewordElement(0x000E)),\n-\t\t\t\t\t\tm(AsymmetricMeter.ChannelId.CURRENT_L2, new SignedDoublewordElement(0x0010)),\n-\t\t\t\t\t\tm(AsymmetricMeter.ChannelId.CURRENT_L3, new SignedDoublewordElement(0x0012)),\n-\t\t\t\t\t\tnew DummyRegisterElement(0x0014, 0x0015),\n-\t\t\t\t\t\tm(SymmetricMeter.ChannelId.CURRENT, new SignedDoublewordElement(0x0016)),\n-\t\t\t\t\t\tm(AsymmetricMeter.ChannelId.ACTIVE_POWER_L1, new SignedQuadruplewordElement(0x0018),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_MINUS_3),\n-\t\t\t\t\t\tm(AsymmetricMeter.ChannelId.ACTIVE_POWER_L2, new SignedQuadruplewordElement(0x001C),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_MINUS_3),\n-\t\t\t\t\t\tm(AsymmetricMeter.ChannelId.ACTIVE_POWER_L3, new SignedQuadruplewordElement(0X0020),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_MINUS_3),\n-\t\t\t\t\t\tm(SymmetricMeter.ChannelId.ACTIVE_POWER, new SignedQuadruplewordElement(0X0024),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_MINUS_3),\n-\t\t\t\t\t\tnew DummyRegisterElement(0x0028, 0x0037),\n-\t\t\t\t\t\tm(AsymmetricMeter.ChannelId.REACTIVE_POWER_L1, new SignedQuadruplewordElement(0x0038),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_MINUS_3),\n-\t\t\t\t\t\tm(AsymmetricMeter.ChannelId.REACTIVE_POWER_L2, new SignedQuadruplewordElement(0x003C),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_MINUS_3),\n-\t\t\t\t\t\tm(AsymmetricMeter.ChannelId.REACTIVE_POWER_L3, new SignedQuadruplewordElement(0x0040),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_MINUS_3),\n-\t\t\t\t\t\tm(SymmetricMeter.ChannelId.REACTIVE_POWER, new SignedQuadruplewordElement(0x0044),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_MINUS_3),\n-\t\t\t\t\t\tnew DummyRegisterElement(0x0048, 0x0071),\n-\t\t\t\t\t\tm(SymmetricMeter.ChannelId.FREQUENCY, new UnsignedDoublewordElement(0x0072))),\n-\n-\t\t\t\tnew FC4ReadInputRegistersTask(0x0418, Priority.LOW,\n-\t\t\t\t\t\tm(SymmetricMeter.ChannelId.ACTIVE_PRODUCTION_ENERGY, new UnsignedQuadruplewordElement(0x0418),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_MINUS_1),\n-\t\t\t\t\t\tm(SymmetricMeter.ChannelId.ACTIVE_CONSUMPTION_ENERGY, new UnsignedQuadruplewordElement(0x0041C),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_MINUS_1)));\n-\t}\n-\n-\t@Override\n-\tpublic String debugLog() {\n-\t\treturn \"L:\" + this.getActivePower().asString();\n-\t}\n-\n-\t@Override\n-\tpublic ModbusSlaveTable getModbusSlaveTable(AccessMode accessMode) {\n-\t\treturn new ModbusSlaveTable( //\n-\t\t\t\tOpenemsComponent.getModbusSlaveNatureTable(accessMode), //\n-\t\t\t\tSymmetricMeter.getModbusSlaveNatureTable(accessMode), //\n-\t\t\t\tAsymmetricMeter.getModbusSlaveNatureTable(accessMode) //\n-\t\t);\n-\t}\n+    implements SymmetricMeter, AsymmetricMeter, OpenemsComponent, ModbusSlave {\n+\n+  private MeterType metertype = MeterType.PRODUCTION;\n+\n+  @Reference\n+  protected ConfigurationAdmin cm;\n+\n+  public MeterArtemesAM2() {\n+    super(//\n+        OpenemsComponent.ChannelId.values(), //\n+        AsymmetricMeter.ChannelId.values(), //\n+        SymmetricMeter.ChannelId.values(), //\n+        ChannelId.values() //\n+    );\n+  }\n+\n+  @Reference(policy = ReferencePolicy.STATIC, policyOption = ReferencePolicyOption.GREEDY, cardinality = ReferenceCardinality.MANDATORY)\n+  protected void setModbus(BridgeModbus modbus) {\n+    super.setModbus(modbus);\n+  }\n+\n+  @Activate\n+  void activate(ComponentContext context, Config config) throws OpenemsException {\n+    this.metertype = config.type();\n+\n+    if (super.activate(context, config.id(), config.alias(), config.enabled(), config.modbusUnitId(), this.cm,\n+        \"Modbus\", config.modbus_id())) {\n+      return;\n+    }\n+  }\n+\n+  @Deactivate\n+  protected void deactivate() {\n+    super.deactivate();\n+  }\n+\n+  public enum ChannelId implements io.openems.edge.common.channel.ChannelId {\n+    ;\n+    private final Doc doc;\n+\n+    private ChannelId(Doc doc) {\n+      this.doc = doc;\n+    }\n+\n+    public Doc doc() {\n+      return this.doc;\n+    }\n+  }\n+\n+  @Override\n+  public MeterType getMeterType() {\n+    return this.metertype;\n+  }\n+\n+  @Override\n+  protected ModbusProtocol defineModbusProtocol() throws OpenemsException {\n+    return new ModbusProtocol(this,\n+        new FC4ReadInputRegistersTask(0x0000, Priority.HIGH,\n+            m(AsymmetricMeter.ChannelId.VOLTAGE_L1, new UnsignedDoublewordElement(0x0000)),\n+            m(AsymmetricMeter.ChannelId.VOLTAGE_L2, new UnsignedDoublewordElement(0x0002)),\n+            m(AsymmetricMeter.ChannelId.VOLTAGE_L3, new UnsignedDoublewordElement(0x0004)),\n+            new DummyRegisterElement(0x0006, 0x000B),\n+            m(SymmetricMeter.ChannelId.VOLTAGE, new UnsignedDoublewordElement(0x000C)),\n+            m(AsymmetricMeter.ChannelId.CURRENT_L1, new SignedDoublewordElement(0x000E)),\n+            m(AsymmetricMeter.ChannelId.CURRENT_L2, new SignedDoublewordElement(0x0010)),\n+            m(AsymmetricMeter.ChannelId.CURRENT_L3, new SignedDoublewordElement(0x0012)),\n+            new DummyRegisterElement(0x0014, 0x0015),\n+            m(SymmetricMeter.ChannelId.CURRENT, new SignedDoublewordElement(0x0016)),\n+            m(AsymmetricMeter.ChannelId.ACTIVE_POWER_L1, new SignedQuadruplewordElement(0x0018),\n+                ElementToChannelConverter.SCALE_FACTOR_MINUS_3),\n+            m(AsymmetricMeter.ChannelId.ACTIVE_POWER_L2, new SignedQuadruplewordElement(0x001C),\n+                ElementToChannelConverter.SCALE_FACTOR_MINUS_3),\n+            m(AsymmetricMeter.ChannelId.ACTIVE_POWER_L3, new SignedQuadruplewordElement(0X0020),\n+                ElementToChannelConverter.SCALE_FACTOR_MINUS_3),\n+            m(SymmetricMeter.ChannelId.ACTIVE_POWER, new SignedQuadruplewordElement(0X0024),\n+                ElementToChannelConverter.SCALE_FACTOR_MINUS_3),\n+            new DummyRegisterElement(0x0028, 0x0037),\n+            m(AsymmetricMeter.ChannelId.REACTIVE_POWER_L1, new SignedQuadruplewordElement(0x0038),\n+                ElementToChannelConverter.SCALE_FACTOR_MINUS_3),\n+            m(AsymmetricMeter.ChannelId.REACTIVE_POWER_L2, new SignedQuadruplewordElement(0x003C),\n+                ElementToChannelConverter.SCALE_FACTOR_MINUS_3),\n+            m(AsymmetricMeter.ChannelId.REACTIVE_POWER_L3, new SignedQuadruplewordElement(0x0040),\n+                ElementToChannelConverter.SCALE_FACTOR_MINUS_3),\n+            m(SymmetricMeter.ChannelId.REACTIVE_POWER, new SignedQuadruplewordElement(0x0044),\n+                ElementToChannelConverter.SCALE_FACTOR_MINUS_3),\n+            new DummyRegisterElement(0x0048, 0x0071),\n+            m(SymmetricMeter.ChannelId.FREQUENCY, new UnsignedDoublewordElement(0x0072))),\n+\n+        new FC4ReadInputRegistersTask(0x0418, Priority.LOW,\n+            m(SymmetricMeter.ChannelId.ACTIVE_PRODUCTION_ENERGY, new UnsignedQuadruplewordElement(0x0418),\n+                ElementToChannelConverter.SCALE_FACTOR_MINUS_1),\n+            m(SymmetricMeter.ChannelId.ACTIVE_CONSUMPTION_ENERGY, new UnsignedQuadruplewordElement(0x0041C),\n+                ElementToChannelConverter.SCALE_FACTOR_MINUS_1)));\n+  }\n+\n+  @Override\n+  public String debugLog() {\n+    return \"L:\" + this.getActivePower().asString();\n+  }\n+\n+  @Override\n+  public ModbusSlaveTable getModbusSlaveTable(AccessMode accessMode) {\n+    return new ModbusSlaveTable( //\n+        OpenemsComponent.getModbusSlaveNatureTable(accessMode), //\n+        SymmetricMeter.getModbusSlaveNatureTable(accessMode), //\n+        AsymmetricMeter.getModbusSlaveNatureTable(accessMode) //\n+    );\n+  }\n }\n",
            "diff_size": 109
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/errored/1/16/MeterArtemesAM2.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/naturalize/16/MeterArtemesAM2.java\nindex 8d08e43bfe0..e17164d4b7b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/errored/1/16/MeterArtemesAM2.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/naturalize/16/MeterArtemesAM2.java\n@@ -139,10 +139,10 @@ public class MeterArtemesAM2 extends AbstractOpenemsModbusComponent\n \n \t@Override\n \tpublic ModbusSlaveTable getModbusSlaveTable(AccessMode accessMode) {\n-\t\treturn new ModbusSlaveTable( //\n+\t\treturn new ModbusSlaveTable(//\n \t\t\t\tOpenemsComponent.getModbusSlaveNatureTable(accessMode), //\n \t\t\t\tSymmetricMeter.getModbusSlaveNatureTable(accessMode), //\n \t\t\t\tAsymmetricMeter.getModbusSlaveNatureTable(accessMode) //\n \t\t);\n \t}\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/errored/1/16/MeterArtemesAM2.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/styler_random/16/MeterArtemesAM2.java\nindex 8d08e43bfe0..a136ac9c3b6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/errored/1/16/MeterArtemesAM2.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/styler_random/16/MeterArtemesAM2.java\n@@ -139,7 +139,7 @@ public class MeterArtemesAM2 extends AbstractOpenemsModbusComponent\n \n \t@Override\n \tpublic ModbusSlaveTable getModbusSlaveTable(AccessMode accessMode) {\n-\t\treturn new ModbusSlaveTable( //\n+\t\treturn new ModbusSlaveTable(//\n \t\t\t\tOpenemsComponent.getModbusSlaveNatureTable(accessMode), //\n \t\t\t\tSymmetricMeter.getModbusSlaveNatureTable(accessMode), //\n \t\t\t\tAsymmetricMeter.getModbusSlaveNatureTable(accessMode) //\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/errored/1/16/MeterArtemesAM2.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/styler_three_grams/16/MeterArtemesAM2.java\nindex 8d08e43bfe0..a136ac9c3b6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/errored/1/16/MeterArtemesAM2.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/styler_three_grams/16/MeterArtemesAM2.java\n@@ -139,7 +139,7 @@ public class MeterArtemesAM2 extends AbstractOpenemsModbusComponent\n \n \t@Override\n \tpublic ModbusSlaveTable getModbusSlaveTable(AccessMode accessMode) {\n-\t\treturn new ModbusSlaveTable( //\n+\t\treturn new ModbusSlaveTable(//\n \t\t\t\tOpenemsComponent.getModbusSlaveNatureTable(accessMode), //\n \t\t\t\tSymmetricMeter.getModbusSlaveNatureTable(accessMode), //\n \t\t\t\tAsymmetricMeter.getModbusSlaveNatureTable(accessMode) //\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "codebuff"
    ]
}