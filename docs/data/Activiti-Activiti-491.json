{
    "project_name": "Activiti-Activiti",
    "error_id": "491",
    "information": {
        "errors": [
            {
                "line": "16",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.bpmn.converter.child;\n\nimport javax.xml.stream.XMLStreamReader;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/491/DataAssociationParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/491/DataAssociationParser.java\nindex ad1ca28e7f5..765598f596a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/491/DataAssociationParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/491/DataAssociationParser.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.converter.child;\n \n import javax.xml.stream.XMLStreamReader;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/491/DataAssociationParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/491/DataAssociationParser.java\nindex ad1ca28e7f5..aa59f62ade6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/491/DataAssociationParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/491/DataAssociationParser.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.converter.child;\n \n import javax.xml.stream.XMLStreamReader;\n@@ -27,62 +28,62 @@ import org.slf4j.LoggerFactory;\n \n public class DataAssociationParser implements BpmnXMLConstants {\n \n-  protected static final Logger LOGGER = LoggerFactory.getLogger(DataAssociationParser.class.getName());\n+    protected static final Logger LOGGER = LoggerFactory.getLogger(DataAssociationParser.class.getName());\n \n-  public static void parseDataAssociation(DataAssociation dataAssociation, String elementName, XMLStreamReader xtr) {\n-    boolean readyWithDataAssociation = false;\n-    Assignment assignment = null;\n-    try {\n+    public static void parseDataAssociation(DataAssociation dataAssociation, String elementName, XMLStreamReader xtr) {\n+        boolean readyWithDataAssociation = false;\n+        Assignment assignment = null;\n+        try {\n \n-      dataAssociation.setId(xtr.getAttributeValue(null, \"id\"));\n+            dataAssociation.setId(xtr.getAttributeValue(null, \"id\"));\n \n-      while (!readyWithDataAssociation && xtr.hasNext()) {\n-        xtr.next();\n-        if (xtr.isStartElement() && ELEMENT_SOURCE_REF.equals(xtr.getLocalName())) {\n-          String sourceRef = xtr.getElementText();\n-          if (StringUtils.isNotEmpty(sourceRef)) {\n-            dataAssociation.setSourceRef(sourceRef.trim());\n-          }\n+            while (!readyWithDataAssociation && xtr.hasNext()) {\n+                xtr.next();\n+                if (xtr.isStartElement() && ELEMENT_SOURCE_REF.equals(xtr.getLocalName())) {\n+                    String sourceRef = xtr.getElementText();\n+                    if (StringUtils.isNotEmpty(sourceRef)) {\n+                        dataAssociation.setSourceRef(sourceRef.trim());\n+                    }\n \n-        } else if (xtr.isStartElement() && ELEMENT_TARGET_REF.equals(xtr.getLocalName())) {\n-          String targetRef = xtr.getElementText();\n-          if (StringUtils.isNotEmpty(targetRef)) {\n-            dataAssociation.setTargetRef(targetRef.trim());\n-          }\n+                } else if (xtr.isStartElement() && ELEMENT_TARGET_REF.equals(xtr.getLocalName())) {\n+                    String targetRef = xtr.getElementText();\n+                    if (StringUtils.isNotEmpty(targetRef)) {\n+                        dataAssociation.setTargetRef(targetRef.trim());\n+                    }\n \n-        } else if (xtr.isStartElement() && ELEMENT_TRANSFORMATION.equals(xtr.getLocalName())) {\n-          String transformation = xtr.getElementText();\n-          if (StringUtils.isNotEmpty(transformation)) {\n-            dataAssociation.setTransformation(transformation.trim());\n-          }\n+                } else if (xtr.isStartElement() && ELEMENT_TRANSFORMATION.equals(xtr.getLocalName())) {\n+                    String transformation = xtr.getElementText();\n+                    if (StringUtils.isNotEmpty(transformation)) {\n+                        dataAssociation.setTransformation(transformation.trim());\n+                    }\n \n-        } else if (xtr.isStartElement() && ELEMENT_ASSIGNMENT.equals(xtr.getLocalName())) {\n-          assignment = new Assignment();\n-          BpmnXMLUtil.addXMLLocation(assignment, xtr);\n+                } else if (xtr.isStartElement() && ELEMENT_ASSIGNMENT.equals(xtr.getLocalName())) {\n+                    assignment = new Assignment();\n+                    BpmnXMLUtil.addXMLLocation(assignment, xtr);\n \n-        } else if (xtr.isStartElement() && ELEMENT_FROM.equals(xtr.getLocalName())) {\n-          String from = xtr.getElementText();\n-          if (assignment != null && StringUtils.isNotEmpty(from)) {\n-            assignment.setFrom(from.trim());\n-          }\n+                } else if (xtr.isStartElement() && ELEMENT_FROM.equals(xtr.getLocalName())) {\n+                    String from = xtr.getElementText();\n+                    if (assignment != null && StringUtils.isNotEmpty(from)) {\n+                        assignment.setFrom(from.trim());\n+                    }\n \n-        } else if (xtr.isStartElement() && ELEMENT_TO.equals(xtr.getLocalName())) {\n-          String to = xtr.getElementText();\n-          if (assignment != null && StringUtils.isNotEmpty(to)) {\n-            assignment.setTo(to.trim());\n-          }\n+                } else if (xtr.isStartElement() && ELEMENT_TO.equals(xtr.getLocalName())) {\n+                    String to = xtr.getElementText();\n+                    if (assignment != null && StringUtils.isNotEmpty(to)) {\n+                        assignment.setTo(to.trim());\n+                    }\n \n-        } else if (xtr.isEndElement() && ELEMENT_ASSIGNMENT.equals(xtr.getLocalName())) {\n-          if (StringUtils.isNotEmpty(assignment.getFrom()) && StringUtils.isNotEmpty(assignment.getTo())) {\n-            dataAssociation.getAssignments().add(assignment);\n-          }\n+                } else if (xtr.isEndElement() && ELEMENT_ASSIGNMENT.equals(xtr.getLocalName())) {\n+                    if (StringUtils.isNotEmpty(assignment.getFrom()) && StringUtils.isNotEmpty(assignment.getTo())) {\n+                        dataAssociation.getAssignments().add(assignment);\n+                    }\n \n-        } else if (xtr.isEndElement() && elementName.equals(xtr.getLocalName())) {\n-          readyWithDataAssociation = true;\n+                } else if (xtr.isEndElement() && elementName.equals(xtr.getLocalName())) {\n+                    readyWithDataAssociation = true;\n+                }\n+            }\n+        } catch (Exception e) {\n+            LOGGER.warn(\"Error parsing data association child elements\", e);\n         }\n-      }\n-    } catch (Exception e) {\n-      LOGGER.warn(\"Error parsing data association child elements\", e);\n     }\n-  }\n }\n",
            "diff_size": 51
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "16",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "28",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "31",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/491/DataAssociationParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/491/DataAssociationParser.java\nindex ad1ca28e7f5..957fb658927 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/491/DataAssociationParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/491/DataAssociationParser.java\n@@ -16,7 +16,6 @@\n package org.activiti.bpmn.converter.child;\n \n import javax.xml.stream.XMLStreamReader;\n-\n import org.activiti.bpmn.constants.BpmnXMLConstants;\n import org.activiti.bpmn.converter.util.BpmnXMLUtil;\n import org.activiti.bpmn.model.Assignment;\n@@ -25,17 +24,15 @@ import org.apache.commons.lang3.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+\n public class DataAssociationParser implements BpmnXMLConstants {\n \n   protected static final Logger LOGGER = LoggerFactory.getLogger(DataAssociationParser.class.getName());\n-\n   public static void parseDataAssociation(DataAssociation dataAssociation, String elementName, XMLStreamReader xtr) {\n     boolean readyWithDataAssociation = false;\n     Assignment assignment = null;\n     try {\n-\n       dataAssociation.setId(xtr.getAttributeValue(null, \"id\"));\n-\n       while (!readyWithDataAssociation && xtr.hasNext()) {\n         xtr.next();\n         if (xtr.isStartElement() && ELEMENT_SOURCE_REF.equals(xtr.getLocalName())) {\n@@ -43,46 +40,40 @@ public class DataAssociationParser implements BpmnXMLConstants {\n           if (StringUtils.isNotEmpty(sourceRef)) {\n             dataAssociation.setSourceRef(sourceRef.trim());\n           }\n-\n         } else if (xtr.isStartElement() && ELEMENT_TARGET_REF.equals(xtr.getLocalName())) {\n           String targetRef = xtr.getElementText();\n           if (StringUtils.isNotEmpty(targetRef)) {\n             dataAssociation.setTargetRef(targetRef.trim());\n           }\n-\n         } else if (xtr.isStartElement() && ELEMENT_TRANSFORMATION.equals(xtr.getLocalName())) {\n           String transformation = xtr.getElementText();\n           if (StringUtils.isNotEmpty(transformation)) {\n             dataAssociation.setTransformation(transformation.trim());\n           }\n-\n-        } else if (xtr.isStartElement() && ELEMENT_ASSIGNMENT.equals(xtr.getLocalName())) {\n-          assignment = new Assignment();\n-          BpmnXMLUtil.addXMLLocation(assignment, xtr);\n-\n-        } else if (xtr.isStartElement() && ELEMENT_FROM.equals(xtr.getLocalName())) {\n-          String from = xtr.getElementText();\n-          if (assignment != null && StringUtils.isNotEmpty(from)) {\n-            assignment.setFrom(from.trim());\n-          }\n-\n-        } else if (xtr.isStartElement() && ELEMENT_TO.equals(xtr.getLocalName())) {\n-          String to = xtr.getElementText();\n-          if (assignment != null && StringUtils.isNotEmpty(to)) {\n-            assignment.setTo(to.trim());\n-          }\n-\n-        } else if (xtr.isEndElement() && ELEMENT_ASSIGNMENT.equals(xtr.getLocalName())) {\n-          if (StringUtils.isNotEmpty(assignment.getFrom()) && StringUtils.isNotEmpty(assignment.getTo())) {\n-            dataAssociation.getAssignments().add(assignment);\n-          }\n-\n-        } else if (xtr.isEndElement() && elementName.equals(xtr.getLocalName())) {\n-          readyWithDataAssociation = true;\n-        }\n+               } else if (xtr.isStartElement() && ELEMENT_ASSIGNMENT.equals(xtr.getLocalName())) {\n+                 assignment = new Assignment();\n+                 BpmnXMLUtil.addXMLLocation(assignment, xtr);\n+               } else if (xtr.isStartElement() && ELEMENT_FROM.equals(xtr.getLocalName())) {\n+                 String from = xtr.getElementText();\n+                 if (assignment != null && StringUtils.isNotEmpty(from)) {\n+                   assignment.setFrom(from.trim());\n+                 }\n+                      } else if (xtr.isStartElement() && ELEMENT_TO.equals(xtr.getLocalName())) {\n+                        String to = xtr.getElementText();\n+                        if (assignment != null && StringUtils.isNotEmpty(to)) {\n+                          assignment.setTo(to.trim());\n+                        }\n+                      } else if (xtr.isEndElement() && ELEMENT_ASSIGNMENT.equals(xtr.getLocalName())) {\n+                               if (StringUtils.isNotEmpty(assignment.getFrom()) && StringUtils.isNotEmpty(assignment.getTo())) {\n+                                 dataAssociation.getAssignments().add(assignment);\n+                               }\n+                             } else if (xtr.isEndElement() && elementName.equals(xtr.getLocalName())) {\n+                               readyWithDataAssociation = true;\n+                             }\n       }\n     } catch (Exception e) {\n-      LOGGER.warn(\"Error parsing data association child elements\", e);\n+      LOGGER.warn(\"Error parsing data association child elements\",\n+                  e);\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 35
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/491/DataAssociationParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/491/DataAssociationParser.java\nindex ad1ca28e7f5..765598f596a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/491/DataAssociationParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/491/DataAssociationParser.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.converter.child;\n \n import javax.xml.stream.XMLStreamReader;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/491/DataAssociationParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/491/DataAssociationParser.java\nindex ad1ca28e7f5..765598f596a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/491/DataAssociationParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/491/DataAssociationParser.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.converter.child;\n \n import javax.xml.stream.XMLStreamReader;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}