{
    "project_name": "opencb-opencga",
    "error_id": "24",
    "information": {
        "errors": [
            {
                "line": "219",
                "column": "68",
                "severity": "error",
                "message": "',' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "        params.putIfNotEmpty(CohortDBAdaptor.QueryParams.NATTRIBUTES.key(), cohortsCommandOptions.groupByCommandOptions.nattributes);\n        return openCGAClient.getCohortClient().groupBy(cohortsCommandOptions.groupByCommandOptions.study,\n                cohortsCommandOptions.groupByCommandOptions.fields,params);\n    }\n\n    private RestResponse stats() throws IOException {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/24/CohortCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/24/CohortCommandExecutor.java\nindex d309b0728ca..67ea25225b5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/24/CohortCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/24/CohortCommandExecutor.java\n@@ -216,7 +216,7 @@ public class CohortCommandExecutor extends OpencgaCommandExecutor {\n         params.putIfNotEmpty(CohortDBAdaptor.QueryParams.ATTRIBUTES.key(), cohortsCommandOptions.groupByCommandOptions.attributes);\n         params.putIfNotEmpty(CohortDBAdaptor.QueryParams.NATTRIBUTES.key(), cohortsCommandOptions.groupByCommandOptions.nattributes);\n         return openCGAClient.getCohortClient().groupBy(cohortsCommandOptions.groupByCommandOptions.study,\n-                cohortsCommandOptions.groupByCommandOptions.fields,params);\n+                cohortsCommandOptions.groupByCommandOptions.fields, params);\n     }\n \n     private RestResponse stats() throws IOException {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/24/CohortCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/24/CohortCommandExecutor.java\nindex d309b0728ca..edeeb8e5932 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/24/CohortCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/24/CohortCommandExecutor.java\n@@ -39,222 +39,222 @@ import java.io.IOException;\n  */\n public class CohortCommandExecutor extends OpencgaCommandExecutor {\n \n-    private CohortCommandOptions cohortsCommandOptions;\n-    private AclCommandExecutor<Cohort> aclCommandExecutor;\n-    private AnnotationCommandExecutor<Cohort> annotationCommandExecutor;\n-\n-    public CohortCommandExecutor(CohortCommandOptions cohortsCommandOptions) {\n-        super(cohortsCommandOptions.commonCommandOptions);\n-        this.cohortsCommandOptions = cohortsCommandOptions;\n-        this.aclCommandExecutor = new AclCommandExecutor<>();\n-        this.annotationCommandExecutor = new AnnotationCommandExecutor<>();\n+  private CohortCommandOptions cohortsCommandOptions;\n+  private AclCommandExecutor<Cohort> aclCommandExecutor;\n+  private AnnotationCommandExecutor<Cohort> annotationCommandExecutor;\n+\n+  public CohortCommandExecutor(CohortCommandOptions cohortsCommandOptions) {\n+    super(cohortsCommandOptions.commonCommandOptions);\n+    this.cohortsCommandOptions = cohortsCommandOptions;\n+    this.aclCommandExecutor = new AclCommandExecutor<>();\n+    this.annotationCommandExecutor = new AnnotationCommandExecutor<>();\n+  }\n+\n+\n+  @Override\n+  public void execute() throws Exception {\n+    logger.debug(\"Executing cohorts command line\");\n+\n+    String subCommandString = getParsedSubCommand(cohortsCommandOptions.jCommander);\n+    RestResponse queryResponse = null;\n+    switch (subCommandString) {\n+      case \"create\":\n+        queryResponse = create();\n+        break;\n+      case \"info\":\n+        queryResponse = info();\n+        break;\n+      case \"samples\":\n+        queryResponse = samples();\n+        break;\n+      case \"update\":\n+        queryResponse = update();\n+        break;\n+      case \"delete\":\n+        queryResponse = delete();\n+        break;\n+      case \"search\":\n+        queryResponse = search();\n+        break;\n+      case \"group-by\":\n+        queryResponse = groupBy();\n+        break;\n+      case \"stats\":\n+        queryResponse = stats();\n+        break;\n+      case \"acl\":\n+        queryResponse = aclCommandExecutor.acls(cohortsCommandOptions.aclsCommandOptions, openCGAClient.getCohortClient());\n+        break;\n+      case \"acl-update\":\n+        queryResponse = updateAcl();\n+        break;\n+      case \"annotation-sets-create\":\n+        queryResponse = annotationCommandExecutor.createAnnotationSet(cohortsCommandOptions.annotationCreateCommandOptions,\n+            openCGAClient.getCohortClient());\n+        break;\n+      case \"annotation-sets-search\":\n+        queryResponse = annotationCommandExecutor.searchAnnotationSets(cohortsCommandOptions.annotationSearchCommandOptions,\n+            openCGAClient.getCohortClient());\n+        break;\n+      case \"annotation-sets-delete\":\n+        queryResponse = annotationCommandExecutor.deleteAnnotationSet(cohortsCommandOptions.annotationDeleteCommandOptions,\n+            openCGAClient.getCohortClient());\n+        break;\n+      case \"annotation-sets\":\n+        queryResponse = annotationCommandExecutor.getAnnotationSet(cohortsCommandOptions.annotationInfoCommandOptions,\n+            openCGAClient.getCohortClient());\n+        break;\n+      case \"annotation-sets-update\":\n+        queryResponse = annotationCommandExecutor.updateAnnotationSet(cohortsCommandOptions.annotationUpdateCommandOptions,\n+            openCGAClient.getCohortClient());\n+        break;\n+      default:\n+        logger.error(\"Subcommand not valid\");\n+        break;\n     }\n \n+    createOutput(queryResponse);\n+  }\n \n-    @Override\n-    public void execute() throws Exception {\n-        logger.debug(\"Executing cohorts command line\");\n-\n-        String subCommandString = getParsedSubCommand(cohortsCommandOptions.jCommander);\n-        RestResponse queryResponse = null;\n-        switch (subCommandString) {\n-            case \"create\":\n-                queryResponse = create();\n-                break;\n-            case \"info\":\n-                queryResponse = info();\n-                break;\n-            case \"samples\":\n-                queryResponse = samples();\n-                break;\n-            case \"update\":\n-                queryResponse = update();\n-                break;\n-            case \"delete\":\n-                queryResponse = delete();\n-                break;\n-            case \"search\":\n-                queryResponse = search();\n-                break;\n-            case \"group-by\":\n-                queryResponse = groupBy();\n-                break;\n-            case \"stats\":\n-                queryResponse = stats();\n-                break;\n-            case \"acl\":\n-                queryResponse = aclCommandExecutor.acls(cohortsCommandOptions.aclsCommandOptions, openCGAClient.getCohortClient());\n-                break;\n-            case \"acl-update\":\n-                queryResponse = updateAcl();\n-                break;\n-            case \"annotation-sets-create\":\n-                queryResponse = annotationCommandExecutor.createAnnotationSet(cohortsCommandOptions.annotationCreateCommandOptions,\n-                        openCGAClient.getCohortClient());\n-                break;\n-            case \"annotation-sets-search\":\n-                queryResponse = annotationCommandExecutor.searchAnnotationSets(cohortsCommandOptions.annotationSearchCommandOptions,\n-                        openCGAClient.getCohortClient());\n-                break;\n-            case \"annotation-sets-delete\":\n-                queryResponse = annotationCommandExecutor.deleteAnnotationSet(cohortsCommandOptions.annotationDeleteCommandOptions,\n-                        openCGAClient.getCohortClient());\n-                break;\n-            case \"annotation-sets\":\n-                queryResponse = annotationCommandExecutor.getAnnotationSet(cohortsCommandOptions.annotationInfoCommandOptions,\n-                        openCGAClient.getCohortClient());\n-                break;\n-            case \"annotation-sets-update\":\n-                queryResponse = annotationCommandExecutor.updateAnnotationSet(cohortsCommandOptions.annotationUpdateCommandOptions,\n-                        openCGAClient.getCohortClient());\n-                break;\n-            default:\n-                logger.error(\"Subcommand not valid\");\n-                break;\n-        }\n-\n-        createOutput(queryResponse);\n-    }\n-\n-    private RestResponse search() throws IOException {\n-        CohortCommandOptions.SearchCommandOptions commandOptions = cohortsCommandOptions.searchCommandOptions;\n-\n-        logger.debug(\"Searching cohorts\");\n-\n-        Query query = new Query();\n-        query.putIfNotEmpty(CohortDBAdaptor.QueryParams.STUDY.key(), resolveStudy(commandOptions.study));\n-        query.putIfNotEmpty(CohortDBAdaptor.QueryParams.ID.key(), commandOptions.name);\n-        query.putIfNotNull(CohortDBAdaptor.QueryParams.TYPE.key(), commandOptions.type);\n-        query.putIfNotNull(CohortDBAdaptor.QueryParams.STATUS.key(), commandOptions.status);\n-        query.putIfNotEmpty(CohortDBAdaptor.QueryParams.SAMPLES.key(), commandOptions.samples);\n-        query.putAll(commandOptions.commonOptions.params);\n-\n-        if (commandOptions.numericOptions.count) {\n-            return openCGAClient.getCohortClient().count(query);\n-        } else {\n-            QueryOptions queryOptions = new QueryOptions();\n-            queryOptions.putIfNotEmpty(QueryOptions.INCLUDE, commandOptions.dataModelOptions.include);\n-            queryOptions.putIfNotEmpty(QueryOptions.EXCLUDE, commandOptions.dataModelOptions.exclude);\n-            queryOptions.put(QueryOptions.LIMIT, commandOptions.numericOptions.limit);\n-            queryOptions.put(QueryOptions.SKIP, commandOptions.numericOptions.skip);\n-\n-            return openCGAClient.getCohortClient().search(query, queryOptions);\n-        }\n-    }\n-\n-\n-    private RestResponse<Cohort> create() throws CatalogException, IOException {\n-        logger.debug(\"Creating a new cohort\");\n-\n-        ObjectMap params = new ObjectMap();\n-        params.putIfNotEmpty(CohortDBAdaptor.QueryParams.ID.key(), cohortsCommandOptions.createCommandOptions.name);\n-        params.putIfNotEmpty(CohortDBAdaptor.QueryParams.SAMPLES.key(), cohortsCommandOptions.createCommandOptions.sampleIds);\n-        params.putIfNotNull(CohortDBAdaptor.QueryParams.TYPE.key(), cohortsCommandOptions.createCommandOptions.type);\n-        params.putIfNotEmpty(CohortDBAdaptor.QueryParams.DESCRIPTION.key(), cohortsCommandOptions.createCommandOptions.description);\n-\n-        return openCGAClient.getCohortClient().create(resolveStudy(cohortsCommandOptions.createCommandOptions.study),\n-                cohortsCommandOptions.createCommandOptions.variableSetId, cohortsCommandOptions.createCommandOptions.variable, params);\n-    }\n-\n-    private RestResponse<Cohort> info() throws CatalogException, IOException {\n-        logger.debug(\"Getting cohort information\");\n-\n-        ObjectMap params = new ObjectMap();\n-        params.putIfNotEmpty(CohortDBAdaptor.QueryParams.STUDY.key(), resolveStudy(cohortsCommandOptions.infoCommandOptions.study));\n-        params.putIfNotEmpty(QueryOptions.INCLUDE, cohortsCommandOptions.infoCommandOptions.dataModelOptions.include);\n-        params.putIfNotEmpty(QueryOptions.EXCLUDE, cohortsCommandOptions.infoCommandOptions.dataModelOptions.exclude);\n-        return openCGAClient.getCohortClient().get(cohortsCommandOptions.infoCommandOptions.cohort, params);\n-    }\n-\n-    private RestResponse<Sample> samples() throws CatalogException, IOException {\n-        logger.debug(\"Listing samples belonging to a cohort\");\n-\n-        Query query = new Query();\n-        query.putIfNotEmpty(CohortDBAdaptor.QueryParams.STUDY.key(), resolveStudy(cohortsCommandOptions.samplesCommandOptions.study));\n-\n-        QueryOptions queryOptions = new QueryOptions();\n-        queryOptions.putIfNotEmpty(QueryOptions.INCLUDE, cohortsCommandOptions.samplesCommandOptions.dataModelOptions.include);\n-        queryOptions.putIfNotEmpty(QueryOptions.EXCLUDE, cohortsCommandOptions.samplesCommandOptions.dataModelOptions.exclude);\n-        queryOptions.put(QueryOptions.LIMIT,  cohortsCommandOptions.samplesCommandOptions.numericOptions.limit);\n-        queryOptions.put(QueryOptions.SKIP, cohortsCommandOptions.samplesCommandOptions.numericOptions.skip);\n-        queryOptions.put(\"count\", cohortsCommandOptions.samplesCommandOptions.numericOptions.count);\n-        return openCGAClient.getCohortClient().getSamples(cohortsCommandOptions.samplesCommandOptions.cohort, query, queryOptions);\n-    }\n-\n-    private RestResponse<Cohort> update() throws CatalogException, IOException {\n-        logger.debug(\"Updating cohort\");\n-\n-        ObjectMap params = new ObjectMap();\n-        params.putIfNotEmpty(CohortDBAdaptor.QueryParams.ID.key(), cohortsCommandOptions.updateCommandOptions.name);\n-        params.putIfNotEmpty(CohortDBAdaptor.QueryParams.CREATION_DATE.key(), cohortsCommandOptions.updateCommandOptions.creationDate);\n-        params.putIfNotEmpty(CohortDBAdaptor.QueryParams.DESCRIPTION.key(), cohortsCommandOptions.updateCommandOptions.description);\n-        params.putIfNotEmpty(CohortDBAdaptor.QueryParams.SAMPLES.key(), cohortsCommandOptions.updateCommandOptions.samples);\n-        return openCGAClient.getCohortClient().update(cohortsCommandOptions.updateCommandOptions.cohort,\n-                resolveStudy(cohortsCommandOptions.updateCommandOptions.study), params);\n-    }\n-\n-    private RestResponse<Cohort> delete() throws CatalogException, IOException {\n-        logger.debug(\"Deleting cohort\");\n-\n-        ObjectMap params = new ObjectMap();\n-        params.putIfNotEmpty(CohortDBAdaptor.QueryParams.STUDY.key(), resolveStudy(cohortsCommandOptions.deleteCommandOptions.study));\n-\n-        return openCGAClient.getCohortClient().delete(cohortsCommandOptions.deleteCommandOptions.cohort, params);\n-    }\n-\n-    private RestResponse<ObjectMap> groupBy() throws CatalogException, IOException {\n-        logger.debug(\"Group by cohorts\");\n-\n-        ObjectMap params = new ObjectMap();\n-        params.putIfNotEmpty(CohortDBAdaptor.QueryParams.STUDY.key(), resolveStudy(cohortsCommandOptions.groupByCommandOptions.study));\n-        params.putIfNotEmpty(CohortDBAdaptor.QueryParams.UID.key(), cohortsCommandOptions.groupByCommandOptions.id);\n-        params.putIfNotEmpty(CohortDBAdaptor.QueryParams.ID.key(), cohortsCommandOptions.groupByCommandOptions.name);\n-        params.putIfNotEmpty(CohortDBAdaptor.QueryParams.TYPE.key(), cohortsCommandOptions.groupByCommandOptions.type);\n-        params.putIfNotEmpty(CohortDBAdaptor.QueryParams.STATUS_NAME.key(), cohortsCommandOptions.groupByCommandOptions.status);\n-        params.putIfNotEmpty(CohortDBAdaptor.QueryParams.CREATION_DATE.key(), cohortsCommandOptions.groupByCommandOptions.creationDate);\n-        params.putIfNotEmpty(CohortDBAdaptor.QueryParams.SAMPLES.key(), cohortsCommandOptions.groupByCommandOptions.sampleIds);\n-        params.putIfNotEmpty(CohortDBAdaptor.QueryParams.ATTRIBUTES.key(), cohortsCommandOptions.groupByCommandOptions.attributes);\n-        params.putIfNotEmpty(CohortDBAdaptor.QueryParams.NATTRIBUTES.key(), cohortsCommandOptions.groupByCommandOptions.nattributes);\n-        return openCGAClient.getCohortClient().groupBy(cohortsCommandOptions.groupByCommandOptions.study,\n-                cohortsCommandOptions.groupByCommandOptions.fields,params);\n-    }\n-\n-    private RestResponse stats() throws IOException {\n-        logger.debug(\"Cohort stats\");\n-\n-        CohortCommandOptions.StatsCommandOptions commandOptions = cohortsCommandOptions.statsCommandOptions;\n-\n-        Query query = new Query();\n-        query.putIfNotEmpty(\"creationYear\", commandOptions.creationYear);\n-        query.putIfNotEmpty(\"creationMonth\", commandOptions.creationMonth);\n-        query.putIfNotEmpty(\"creationDay\", commandOptions.creationDay);\n-        query.putIfNotEmpty(\"creationDayOfWeek\", commandOptions.creationDayOfWeek);\n-        query.putIfNotEmpty(\"type\", commandOptions.type);\n-        query.putIfNotEmpty(\"status\", commandOptions.status);\n-        query.putIfNotEmpty(\"numSamples\", commandOptions.numSamples);\n-        query.putIfNotEmpty(\"release\", commandOptions.release);\n-        query.putIfNotEmpty(Constants.ANNOTATION, commandOptions.annotation);\n-\n-        QueryOptions options = new QueryOptions();\n-        options.put(\"default\", commandOptions.defaultStats);\n-        options.putIfNotNull(\"field\", commandOptions.field);\n-\n-        return openCGAClient.getCohortClient().stats(commandOptions.study, query, options);\n-    }\n+  private RestResponse search() throws IOException {\n+    CohortCommandOptions.SearchCommandOptions commandOptions = cohortsCommandOptions.searchCommandOptions;\n \n-    private RestResponse<ObjectMap> updateAcl() throws IOException, CatalogException {\n-        AclCommandOptions.AclsUpdateCommandOptions commandOptions = cohortsCommandOptions.aclsUpdateCommandOptions;\n+    logger.debug(\"Searching cohorts\");\n \n-        ObjectMap queryParams = new ObjectMap();\n-        queryParams.putIfNotNull(\"study\", commandOptions.study);\n+    Query query = new Query();\n+    query.putIfNotEmpty(CohortDBAdaptor.QueryParams.STUDY.key(), resolveStudy(commandOptions.study));\n+    query.putIfNotEmpty(CohortDBAdaptor.QueryParams.ID.key(), commandOptions.name);\n+    query.putIfNotNull(CohortDBAdaptor.QueryParams.TYPE.key(), commandOptions.type);\n+    query.putIfNotNull(CohortDBAdaptor.QueryParams.STATUS.key(), commandOptions.status);\n+    query.putIfNotEmpty(CohortDBAdaptor.QueryParams.SAMPLES.key(), commandOptions.samples);\n+    query.putAll(commandOptions.commonOptions.params);\n \n-        ObjectMap bodyParams = new ObjectMap();\n-        bodyParams.putIfNotNull(\"permissions\", commandOptions.permissions);\n-        bodyParams.putIfNotNull(\"action\", commandOptions.action);\n-        bodyParams.putIfNotNull(\"cohort\", extractIdsFromListOrFile(commandOptions.id));\n+    if (commandOptions.numericOptions.count) {\n+      return openCGAClient.getCohortClient().count(query);\n+    } else {\n+      QueryOptions queryOptions = new QueryOptions();\n+      queryOptions.putIfNotEmpty(QueryOptions.INCLUDE, commandOptions.dataModelOptions.include);\n+      queryOptions.putIfNotEmpty(QueryOptions.EXCLUDE, commandOptions.dataModelOptions.exclude);\n+      queryOptions.put(QueryOptions.LIMIT, commandOptions.numericOptions.limit);\n+      queryOptions.put(QueryOptions.SKIP, commandOptions.numericOptions.skip);\n \n-        return openCGAClient.getCohortClient().updateAcl(commandOptions.memberId, queryParams, bodyParams);\n+      return openCGAClient.getCohortClient().search(query, queryOptions);\n     }\n+  }\n+\n+\n+  private RestResponse<Cohort> create() throws CatalogException, IOException {\n+    logger.debug(\"Creating a new cohort\");\n+\n+    ObjectMap params = new ObjectMap();\n+    params.putIfNotEmpty(CohortDBAdaptor.QueryParams.ID.key(), cohortsCommandOptions.createCommandOptions.name);\n+    params.putIfNotEmpty(CohortDBAdaptor.QueryParams.SAMPLES.key(), cohortsCommandOptions.createCommandOptions.sampleIds);\n+    params.putIfNotNull(CohortDBAdaptor.QueryParams.TYPE.key(), cohortsCommandOptions.createCommandOptions.type);\n+    params.putIfNotEmpty(CohortDBAdaptor.QueryParams.DESCRIPTION.key(), cohortsCommandOptions.createCommandOptions.description);\n+\n+    return openCGAClient.getCohortClient().create(resolveStudy(cohortsCommandOptions.createCommandOptions.study),\n+        cohortsCommandOptions.createCommandOptions.variableSetId, cohortsCommandOptions.createCommandOptions.variable, params);\n+  }\n+\n+  private RestResponse<Cohort> info() throws CatalogException, IOException {\n+    logger.debug(\"Getting cohort information\");\n+\n+    ObjectMap params = new ObjectMap();\n+    params.putIfNotEmpty(CohortDBAdaptor.QueryParams.STUDY.key(), resolveStudy(cohortsCommandOptions.infoCommandOptions.study));\n+    params.putIfNotEmpty(QueryOptions.INCLUDE, cohortsCommandOptions.infoCommandOptions.dataModelOptions.include);\n+    params.putIfNotEmpty(QueryOptions.EXCLUDE, cohortsCommandOptions.infoCommandOptions.dataModelOptions.exclude);\n+    return openCGAClient.getCohortClient().get(cohortsCommandOptions.infoCommandOptions.cohort, params);\n+  }\n+\n+  private RestResponse<Sample> samples() throws CatalogException, IOException {\n+    logger.debug(\"Listing samples belonging to a cohort\");\n+\n+    Query query = new Query();\n+    query.putIfNotEmpty(CohortDBAdaptor.QueryParams.STUDY.key(), resolveStudy(cohortsCommandOptions.samplesCommandOptions.study));\n+\n+    QueryOptions queryOptions = new QueryOptions();\n+    queryOptions.putIfNotEmpty(QueryOptions.INCLUDE, cohortsCommandOptions.samplesCommandOptions.dataModelOptions.include);\n+    queryOptions.putIfNotEmpty(QueryOptions.EXCLUDE, cohortsCommandOptions.samplesCommandOptions.dataModelOptions.exclude);\n+    queryOptions.put(QueryOptions.LIMIT, cohortsCommandOptions.samplesCommandOptions.numericOptions.limit);\n+    queryOptions.put(QueryOptions.SKIP, cohortsCommandOptions.samplesCommandOptions.numericOptions.skip);\n+    queryOptions.put(\"count\", cohortsCommandOptions.samplesCommandOptions.numericOptions.count);\n+    return openCGAClient.getCohortClient().getSamples(cohortsCommandOptions.samplesCommandOptions.cohort, query, queryOptions);\n+  }\n+\n+  private RestResponse<Cohort> update() throws CatalogException, IOException {\n+    logger.debug(\"Updating cohort\");\n+\n+    ObjectMap params = new ObjectMap();\n+    params.putIfNotEmpty(CohortDBAdaptor.QueryParams.ID.key(), cohortsCommandOptions.updateCommandOptions.name);\n+    params.putIfNotEmpty(CohortDBAdaptor.QueryParams.CREATION_DATE.key(), cohortsCommandOptions.updateCommandOptions.creationDate);\n+    params.putIfNotEmpty(CohortDBAdaptor.QueryParams.DESCRIPTION.key(), cohortsCommandOptions.updateCommandOptions.description);\n+    params.putIfNotEmpty(CohortDBAdaptor.QueryParams.SAMPLES.key(), cohortsCommandOptions.updateCommandOptions.samples);\n+    return openCGAClient.getCohortClient().update(cohortsCommandOptions.updateCommandOptions.cohort,\n+        resolveStudy(cohortsCommandOptions.updateCommandOptions.study), params);\n+  }\n+\n+  private RestResponse<Cohort> delete() throws CatalogException, IOException {\n+    logger.debug(\"Deleting cohort\");\n+\n+    ObjectMap params = new ObjectMap();\n+    params.putIfNotEmpty(CohortDBAdaptor.QueryParams.STUDY.key(), resolveStudy(cohortsCommandOptions.deleteCommandOptions.study));\n+\n+    return openCGAClient.getCohortClient().delete(cohortsCommandOptions.deleteCommandOptions.cohort, params);\n+  }\n+\n+  private RestResponse<ObjectMap> groupBy() throws CatalogException, IOException {\n+    logger.debug(\"Group by cohorts\");\n+\n+    ObjectMap params = new ObjectMap();\n+    params.putIfNotEmpty(CohortDBAdaptor.QueryParams.STUDY.key(), resolveStudy(cohortsCommandOptions.groupByCommandOptions.study));\n+    params.putIfNotEmpty(CohortDBAdaptor.QueryParams.UID.key(), cohortsCommandOptions.groupByCommandOptions.id);\n+    params.putIfNotEmpty(CohortDBAdaptor.QueryParams.ID.key(), cohortsCommandOptions.groupByCommandOptions.name);\n+    params.putIfNotEmpty(CohortDBAdaptor.QueryParams.TYPE.key(), cohortsCommandOptions.groupByCommandOptions.type);\n+    params.putIfNotEmpty(CohortDBAdaptor.QueryParams.STATUS_NAME.key(), cohortsCommandOptions.groupByCommandOptions.status);\n+    params.putIfNotEmpty(CohortDBAdaptor.QueryParams.CREATION_DATE.key(), cohortsCommandOptions.groupByCommandOptions.creationDate);\n+    params.putIfNotEmpty(CohortDBAdaptor.QueryParams.SAMPLES.key(), cohortsCommandOptions.groupByCommandOptions.sampleIds);\n+    params.putIfNotEmpty(CohortDBAdaptor.QueryParams.ATTRIBUTES.key(), cohortsCommandOptions.groupByCommandOptions.attributes);\n+    params.putIfNotEmpty(CohortDBAdaptor.QueryParams.NATTRIBUTES.key(), cohortsCommandOptions.groupByCommandOptions.nattributes);\n+    return openCGAClient.getCohortClient().groupBy(cohortsCommandOptions.groupByCommandOptions.study,\n+        cohortsCommandOptions.groupByCommandOptions.fields, params);\n+  }\n+\n+  private RestResponse stats() throws IOException {\n+    logger.debug(\"Cohort stats\");\n+\n+    CohortCommandOptions.StatsCommandOptions commandOptions = cohortsCommandOptions.statsCommandOptions;\n+\n+    Query query = new Query();\n+    query.putIfNotEmpty(\"creationYear\", commandOptions.creationYear);\n+    query.putIfNotEmpty(\"creationMonth\", commandOptions.creationMonth);\n+    query.putIfNotEmpty(\"creationDay\", commandOptions.creationDay);\n+    query.putIfNotEmpty(\"creationDayOfWeek\", commandOptions.creationDayOfWeek);\n+    query.putIfNotEmpty(\"type\", commandOptions.type);\n+    query.putIfNotEmpty(\"status\", commandOptions.status);\n+    query.putIfNotEmpty(\"numSamples\", commandOptions.numSamples);\n+    query.putIfNotEmpty(\"release\", commandOptions.release);\n+    query.putIfNotEmpty(Constants.ANNOTATION, commandOptions.annotation);\n+\n+    QueryOptions options = new QueryOptions();\n+    options.put(\"default\", commandOptions.defaultStats);\n+    options.putIfNotNull(\"field\", commandOptions.field);\n+\n+    return openCGAClient.getCohortClient().stats(commandOptions.study, query, options);\n+  }\n+\n+  private RestResponse<ObjectMap> updateAcl() throws IOException, CatalogException {\n+    AclCommandOptions.AclsUpdateCommandOptions commandOptions = cohortsCommandOptions.aclsUpdateCommandOptions;\n+\n+    ObjectMap queryParams = new ObjectMap();\n+    queryParams.putIfNotNull(\"study\", commandOptions.study);\n+\n+    ObjectMap bodyParams = new ObjectMap();\n+    bodyParams.putIfNotNull(\"permissions\", commandOptions.permissions);\n+    bodyParams.putIfNotNull(\"action\", commandOptions.action);\n+    bodyParams.putIfNotNull(\"cohort\", extractIdsFromListOrFile(commandOptions.id));\n+\n+    return openCGAClient.getCohortClient().updateAcl(commandOptions.memberId, queryParams, bodyParams);\n+  }\n \n \n }\n",
            "diff_size": 397
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/24/CohortCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/24/CohortCommandExecutor.java\nindex d309b0728ca..5d372165dbc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/24/CohortCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/24/CohortCommandExecutor.java\n@@ -15,8 +15,6 @@\n  */\n \n package org.opencb.opencga.app.cli.main.executors.catalog;\n-\n-\n import org.opencb.commons.datastore.core.ObjectMap;\n import org.opencb.commons.datastore.core.Query;\n import org.opencb.commons.datastore.core.QueryOptions;\n@@ -175,7 +173,7 @@ public class CohortCommandExecutor extends OpencgaCommandExecutor {\n         QueryOptions queryOptions = new QueryOptions();\n         queryOptions.putIfNotEmpty(QueryOptions.INCLUDE, cohortsCommandOptions.samplesCommandOptions.dataModelOptions.include);\n         queryOptions.putIfNotEmpty(QueryOptions.EXCLUDE, cohortsCommandOptions.samplesCommandOptions.dataModelOptions.exclude);\n-        queryOptions.put(QueryOptions.LIMIT,  cohortsCommandOptions.samplesCommandOptions.numericOptions.limit);\n+        queryOptions.put(QueryOptions.LIMIT, cohortsCommandOptions.samplesCommandOptions.numericOptions.limit);\n         queryOptions.put(QueryOptions.SKIP, cohortsCommandOptions.samplesCommandOptions.numericOptions.skip);\n         queryOptions.put(\"count\", cohortsCommandOptions.samplesCommandOptions.numericOptions.count);\n         return openCGAClient.getCohortClient().getSamples(cohortsCommandOptions.samplesCommandOptions.cohort, query, queryOptions);\n@@ -216,7 +214,7 @@ public class CohortCommandExecutor extends OpencgaCommandExecutor {\n         params.putIfNotEmpty(CohortDBAdaptor.QueryParams.ATTRIBUTES.key(), cohortsCommandOptions.groupByCommandOptions.attributes);\n         params.putIfNotEmpty(CohortDBAdaptor.QueryParams.NATTRIBUTES.key(), cohortsCommandOptions.groupByCommandOptions.nattributes);\n         return openCGAClient.getCohortClient().groupBy(cohortsCommandOptions.groupByCommandOptions.study,\n-                cohortsCommandOptions.groupByCommandOptions.fields,params);\n+                cohortsCommandOptions.groupByCommandOptions.fields, params);\n     }\n \n     private RestResponse stats() throws IOException {\n@@ -257,4 +255,4 @@ public class CohortCommandExecutor extends OpencgaCommandExecutor {\n     }\n \n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/24/CohortCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/24/CohortCommandExecutor.java\nindex d309b0728ca..67ea25225b5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/24/CohortCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/24/CohortCommandExecutor.java\n@@ -216,7 +216,7 @@ public class CohortCommandExecutor extends OpencgaCommandExecutor {\n         params.putIfNotEmpty(CohortDBAdaptor.QueryParams.ATTRIBUTES.key(), cohortsCommandOptions.groupByCommandOptions.attributes);\n         params.putIfNotEmpty(CohortDBAdaptor.QueryParams.NATTRIBUTES.key(), cohortsCommandOptions.groupByCommandOptions.nattributes);\n         return openCGAClient.getCohortClient().groupBy(cohortsCommandOptions.groupByCommandOptions.study,\n-                cohortsCommandOptions.groupByCommandOptions.fields,params);\n+                cohortsCommandOptions.groupByCommandOptions.fields, params);\n     }\n \n     private RestResponse stats() throws IOException {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/24/CohortCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/24/CohortCommandExecutor.java\nindex d309b0728ca..67ea25225b5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/24/CohortCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/24/CohortCommandExecutor.java\n@@ -216,7 +216,7 @@ public class CohortCommandExecutor extends OpencgaCommandExecutor {\n         params.putIfNotEmpty(CohortDBAdaptor.QueryParams.ATTRIBUTES.key(), cohortsCommandOptions.groupByCommandOptions.attributes);\n         params.putIfNotEmpty(CohortDBAdaptor.QueryParams.NATTRIBUTES.key(), cohortsCommandOptions.groupByCommandOptions.nattributes);\n         return openCGAClient.getCohortClient().groupBy(cohortsCommandOptions.groupByCommandOptions.study,\n-                cohortsCommandOptions.groupByCommandOptions.fields,params);\n+                cohortsCommandOptions.groupByCommandOptions.fields, params);\n     }\n \n     private RestResponse stats() throws IOException {\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff"
    ]
}