{
    "project_name": "Activiti-Activiti",
    "error_id": "521",
    "information": {
        "errors": [
            {
                "line": "16",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.runtime.api.impl;\n\nimport static java.util.Collections.emptyMap;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/521/VariablesMappingProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/521/VariablesMappingProvider.java\nindex 6890a0e1f12..23525e085bc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/521/VariablesMappingProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/521/VariablesMappingProvider.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.runtime.api.impl;\n \n import static java.util.Collections.emptyMap;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/521/VariablesMappingProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/521/VariablesMappingProvider.java\nindex 6890a0e1f12..337b1f6d74d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/521/VariablesMappingProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/521/VariablesMappingProvider.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.runtime.api.impl;\n \n import static java.util.Collections.emptyMap;\n@@ -104,10 +105,10 @@ public class VariablesMappingProvider {\n         Map<String, Mapping> inputMappings = processVariablesMapping.getInputs();\n         for (Map.Entry<String, Mapping> mapping : inputMappings.entrySet()) {\n             Optional<Object> mappedValue = calculateMappedValue(mapping.getValue(),\n-                                                                execution,\n-                                                                extensions);\n+                    execution,\n+                    extensions);\n             mappedValue.ifPresent(value -> inboundVariables.put(mapping.getKey(),\n-                                                                value));\n+                    value));\n         }\n         return inboundVariables;\n     }\n@@ -166,13 +167,13 @@ public class VariablesMappingProvider {\n \n             if (processVariableDefinition != null) {\n                 calculateOutPutMappedValue(mapping.getValue(),\n-                                           availableVariables)\n-                                                              .ifPresent(value -> outboundVariables.put(name, value));\n+                        availableVariables)\n+                        .ifPresent(value -> outboundVariables.put(name, value));\n             }\n         }\n \n         return expressionResolver.resolveExpressionsMap(new SimpleMapExpressionEvaluator(availableVariables\n-            ),\n-                                                        outboundVariables);\n+                ),\n+                outboundVariables);\n     }\n }\n",
            "diff_size": 8
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "16",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "33",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/521/VariablesMappingProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/521/VariablesMappingProvider.java\nindex 6890a0e1f12..092e36f5420 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/521/VariablesMappingProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/521/VariablesMappingProvider.java\n@@ -16,7 +16,6 @@\n package org.activiti.runtime.api.impl;\n \n import static java.util.Collections.emptyMap;\n-\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Optional;\n@@ -30,149 +29,122 @@ import org.activiti.spring.process.model.ProcessConstantsMapping;\n import org.activiti.spring.process.model.ProcessVariablesMapping;\n import org.activiti.spring.process.model.VariableDefinition;\n \n-public class VariablesMappingProvider {\n-\n-    private ProcessExtensionService processExtensionService;\n-\n-    private ExpressionResolver expressionResolver;\n-\n-    public VariablesMappingProvider(ProcessExtensionService processExtensionService,\n-                                    ExpressionResolver expressionResolver) {\n-        this.processExtensionService = processExtensionService;\n-        this.expressionResolver = expressionResolver;\n-    }\n \n-    protected Optional<Object> calculateMappedValue(Mapping inputMapping,\n-                                                    DelegateExecution execution,\n-                                                    Extension extensions) {\n-        if (inputMapping != null) {\n-            if (Mapping.SourceMappingType.VALUE.equals(inputMapping.getType())) {\n-                return Optional.of(inputMapping.getValue());\n-            }\n-\n-            if (Mapping.SourceMappingType.VARIABLE.equals(inputMapping.getType())) {\n-                String name = inputMapping.getValue().toString();\n+public class VariablesMappingProvider {\n \n-                VariableDefinition processVariableDefinition = extensions.getPropertyByName(name);\n-                if (processVariableDefinition != null) {\n-                    return Optional.ofNullable(execution.getVariable(processVariableDefinition.getName()));\n-                }\n-            }\n+  private ProcessExtensionService processExtensionService;\n+\n+  private ExpressionResolver expressionResolver;\n+\n+  public VariablesMappingProvider(ProcessExtensionService processExtensionService, ExpressionResolver expressionResolver) {\n+    this.processExtensionService = processExtensionService;\n+    this.expressionResolver = expressionResolver;\n+  }\n+\n+  protected Optional<Object> calculateMappedValue(Mapping inputMapping, DelegateExecution execution, Extension extensions) {\n+    if (inputMapping != null) {\n+      if (Mapping.SourceMappingType.VALUE.equals(inputMapping.getType())) {\n+        return Optional.of(inputMapping.getValue());\n+      }\n+      if (Mapping.SourceMappingType.VARIABLE.equals(inputMapping.getType())) {\n+        String name = inputMapping.getValue().toString();\n+        VariableDefinition processVariableDefinition = extensions.getPropertyByName(name);\n+        if (processVariableDefinition != null) {\n+          return Optional.ofNullable(execution.getVariable(processVariableDefinition.getName()));\n         }\n-        return Optional.empty();\n+      }\n     }\n-\n-    public Map<String, Object> calculateInputVariables(DelegateExecution execution) {\n-\n-        Extension extensions = processExtensionService.getExtensionsForId(execution.getProcessDefinitionId());\n-\n-        Map<String, Object> constants = calculateConstants(execution, extensions);\n-\n-        if (extensions.hasEmptyInputsMapping(execution.getCurrentActivityId())) {\n-            return constants;\n-        }\n-\n-        Map<String, Object> inboundVariables;\n-\n-        if (!extensions.hasMapping(execution.getCurrentActivityId())) {\n-            inboundVariables = execution.getVariables();\n-        } else {\n-            inboundVariables = calculateInputVariables(execution, extensions);\n-        }\n-        inboundVariables = expressionResolver.resolveExpressionsMap(new VariableScopeExpressionEvaluator(execution), inboundVariables);\n-        inboundVariables.putAll(constants);\n-        return inboundVariables;\n+    return Optional.empty();\n+  }\n+\n+  public Map<String, Object> calculateInputVariables(DelegateExecution execution) {\n+    Extension extensions = processExtensionService.getExtensionsForId(execution.getProcessDefinitionId());\n+    Map<String, Object> constants = calculateConstants(execution, extensions);\n+    if (extensions.hasEmptyInputsMapping(execution.getCurrentActivityId())) {\n+      return constants;\n     }\n \n-    private Map<String, Object> calculateConstants(DelegateExecution execution,\n-                                                   Extension extensions) {\n-        Map<String, Object> constants = new HashMap<>();\n-\n-        ProcessConstantsMapping processConstantsMapping = extensions.getConstantForFlowElement(execution.getCurrentActivityId());\n-        for (Map.Entry<String, ConstantDefinition> mapping : processConstantsMapping.entrySet()) {\n-            constants.put(mapping.getKey(), mapping.getValue().getValue());\n-        }\n-        return constants;\n+    Map<String, Object> inboundVariables;\n+    if (!extensions.hasMapping(execution.getCurrentActivityId())) {\n+      inboundVariables = execution.getVariables();\n+    } else {\n+      inboundVariables = calculateInputVariables(execution, extensions);\n     }\n-\n-    private Map<String, Object> calculateInputVariables(DelegateExecution execution,\n-                                                        Extension extensions) {\n-        Map<String, Object> inboundVariables = new HashMap<>();\n-\n-        ProcessVariablesMapping processVariablesMapping = extensions.getMappingForFlowElement(execution.getCurrentActivityId());\n-\n-        Map<String, Mapping> inputMappings = processVariablesMapping.getInputs();\n-        for (Map.Entry<String, Mapping> mapping : inputMappings.entrySet()) {\n-            Optional<Object> mappedValue = calculateMappedValue(mapping.getValue(),\n-                                                                execution,\n-                                                                extensions);\n-            mappedValue.ifPresent(value -> inboundVariables.put(mapping.getKey(),\n-                                                                value));\n-        }\n-        return inboundVariables;\n+    inboundVariables = expressionResolver.resolveExpressionsMap(new VariableScopeExpressionEvaluator(execution),\n+                                                                inboundVariables);\n+    inboundVariables.putAll(constants);\n+    return inboundVariables;\n+  }\n+\n+  private Map<String, Object> calculateConstants(DelegateExecution execution, Extension extensions) {\n+    Map<String, Object> constants = new HashMap<>();\n+    ProcessConstantsMapping processConstantsMapping = extensions.getConstantForFlowElement(execution.getCurrentActivityId());\n+    for (Map.Entry<String, ConstantDefinition> mapping : processConstantsMapping.entrySet()) {\n+        constants.put(mapping.getKey(),\n+                      mapping.getValue().getValue());\n     }\n-\n-    private Optional<Object> calculateOutPutMappedValue(Mapping mapping,\n-                                                        Map<String, Object> currentContextVariables) {\n-        if (mapping != null) {\n-            if (Mapping.SourceMappingType.VALUE.equals(mapping.getType())) {\n-                return Optional.of(mapping.getValue());\n-            } else {\n-                if (Mapping.SourceMappingType.VARIABLE.equals(mapping.getType())) {\n-                    String name = mapping.getValue().toString();\n-\n-                    return currentContextVariables != null ? Optional.ofNullable(currentContextVariables.get(name)) : Optional.empty();\n-                }\n-            }\n-        }\n-        return Optional.empty();\n+    return constants;\n+  }\n+\n+  private Map<String, Object> calculateInputVariables(DelegateExecution execution, Extension extensions) {\n+    Map<String, Object> inboundVariables = new HashMap<>();\n+    ProcessVariablesMapping processVariablesMapping = extensions.getMappingForFlowElement(execution.getCurrentActivityId());\n+    Map<String, Mapping> inputMappings = processVariablesMapping.getInputs();\n+    for (Map.Entry<String, Mapping> mapping : inputMappings.entrySet()) {\n+        Optional<Object> mappedValue = calculateMappedValue(mapping.getValue(), execution, extensions);\n+        mappedValue.ifPresent(value -> inboundVariables.put(mapping.getKey(), value));\n     }\n-\n-    public Map<String, Object> calculateOutPutVariables(MappingExecutionContext mappingExecutionContext,\n-                                                        Map<String, Object> availableVariables) {\n-\n-        Extension extensions = processExtensionService.getExtensionsForId(mappingExecutionContext.getProcessDefinitionId());\n-\n-        if (extensions.hasEmptyOutputsMapping(mappingExecutionContext.getActivityId())) {\n-            return emptyMap();\n-        }\n-\n-        if (!extensions.hasMapping(mappingExecutionContext.getActivityId())) {\n-            return (availableVariables != null ? new HashMap<>(availableVariables) : emptyMap());\n-        }\n-\n-        if (availableVariables != null && !availableVariables.isEmpty()) {\n-            if (expressionResolver.containsExpression(availableVariables)) {\n-                throw new ActivitiIllegalArgumentException(\"Expressions are not allowed as variable values in the output mapping\");\n-            }\n-            return calculateOutPutVariables(mappingExecutionContext, extensions, availableVariables);\n-        } else {\n-            return emptyMap();\n+    return inboundVariables;\n+  }\n+\n+  private Optional<Object> calculateOutPutMappedValue(Mapping mapping, Map<String, Object> currentContextVariables) {\n+    if (mapping != null) {\n+      if (Mapping.SourceMappingType.VALUE.equals(mapping.getType())) {\n+        return Optional.of(mapping.getValue());\n+      } else {\n+        if (Mapping.SourceMappingType.VARIABLE.equals(mapping.getType())) {\n+          String name = mapping.getValue().toString();\n+          return currentContextVariables != null ? Optional.ofNullable(currentContextVariables.get(name)) : Optional.empty();\n         }\n+      }\n     }\n+    return Optional.empty();\n+  }\n \n-    private Map<String, Object> calculateOutPutVariables(MappingExecutionContext mappingExecutionContext,\n-                                                         Extension extensions,\n-                                                         Map<String, Object> availableVariables) {\n-        Map<String, Object> outboundVariables = new HashMap<>();\n-        ProcessVariablesMapping processVariablesMapping = extensions.getMappingForFlowElement(mappingExecutionContext.getActivityId());\n-        Map<String, Mapping> outputMappings = processVariablesMapping.getOutputs();\n-\n-        for (Map.Entry<String, Mapping> mapping : outputMappings.entrySet()) {\n-\n-            String name = mapping.getKey();\n-\n-            VariableDefinition processVariableDefinition = extensions.getPropertyByName(name);\n-\n-            if (processVariableDefinition != null) {\n-                calculateOutPutMappedValue(mapping.getValue(),\n-                                           availableVariables)\n-                                                              .ifPresent(value -> outboundVariables.put(name, value));\n-            }\n+  public Map<String, Object> calculateOutPutVariables(MappingExecutionContext mappingExecutionContext, Map<String, Object> availableVariables) {\n+    Extension extensions = processExtensionService.getExtensionsForId(mappingExecutionContext.getProcessDefinitionId());\n+    if (extensions.hasEmptyOutputsMapping(mappingExecutionContext.getActivityId())) {\n+      return emptyMap();\n+    }\n+    if (!extensions.hasMapping(mappingExecutionContext.getActivityId())) {\n+      return (availableVariables != null ? new HashMap<>(availableVariables) : emptyMap());\n+    }\n+    if (availableVariables != null && !availableVariables.isEmpty()) {\n+      if (expressionResolver.containsExpression(availableVariables)) {\n+        throw new ActivitiIllegalArgumentException(\"Expressions are not allowed as variable values in the output mapping\");\n+      }\n+      return calculateOutPutVariables(mappingExecutionContext,\n+                                      extensions,\n+                                      availableVariables);\n+    } else {\n+      return emptyMap();\n+    }\n+  }\n+\n+  private Map<String, Object> calculateOutPutVariables(MappingExecutionContext mappingExecutionContext,\n+                                                       Extension extensions, Map<String, Object> availableVariables) {\n+    Map<String, Object> outboundVariables = new HashMap<>();\n+    ProcessVariablesMapping processVariablesMapping = extensions.getMappingForFlowElement(mappingExecutionContext.getActivityId());\n+    Map<String, Mapping> outputMappings = processVariablesMapping.getOutputs();\n+    for (Map.Entry<String, Mapping> mapping : outputMappings.entrySet()) {\n+        String name = mapping.getKey();\n+        VariableDefinition processVariableDefinition = extensions.getPropertyByName(name);\n+        if (processVariableDefinition != null) {\n+          calculateOutPutMappedValue(mapping.getValue(), availableVariables).ifPresent(value -> outboundVariables.put(name, value));\n         }\n-\n-        return expressionResolver.resolveExpressionsMap(new SimpleMapExpressionEvaluator(availableVariables\n-            ),\n-                                                        outboundVariables);\n     }\n-}\n+    return expressionResolver.resolveExpressionsMap(new SimpleMapExpressionEvaluator(availableVariables),\n+                                                    outboundVariables);\n+  }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 166
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/521/VariablesMappingProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/521/VariablesMappingProvider.java\nindex 6890a0e1f12..23525e085bc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/521/VariablesMappingProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/521/VariablesMappingProvider.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.runtime.api.impl;\n \n import static java.util.Collections.emptyMap;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/521/VariablesMappingProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/521/VariablesMappingProvider.java\nindex 6890a0e1f12..23525e085bc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/521/VariablesMappingProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/521/VariablesMappingProvider.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.runtime.api.impl;\n \n import static java.util.Collections.emptyMap;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}