{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4352",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "50",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "59",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "74",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "21",
                    "severity": "error",
                    "message": "'}' at column 21 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "140",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "72",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "23",
                    "severity": "error",
                    "message": "'}' at column 23 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "202",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "21",
                    "severity": "error",
                    "message": "'}' at column 21 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "209",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "239",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "296",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "15",
                    "severity": "error",
                    "message": "'}' at column 15 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "306",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4352/ElectionState.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4352/ElectionState.java\nindex 354114700f6..f638a9a03c7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4352/ElectionState.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4352/ElectionState.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.cluster.protocol.election;\n \n import java.net.URI;\n@@ -41,329 +42,322 @@ import static org.neo4j.helpers.collection.Iterables.firstOrNull;\n  * State machine that implements the {@link Election} API.\n  */\n public enum ElectionState\n-        implements State<ElectionContext, ElectionMessage>\n+    implements State<ElectionContext, ElectionMessage>\n {\n-    start\n+  start\n+      {\n+        @Override\n+        public ElectionState handle(ElectionContext context,\n+                                    Message<ElectionMessage> message,\n+                                    MessageHolder outgoing\n+        )\n+        {\n+          if (message.getMessageType() == ElectionMessage.created)\n+          {\n+            context.created();\n+            return election;\n+          } else if (message.getMessageType() == ElectionMessage.join)\n+          {\n+            return election;\n+          }\n+\n+          return this;\n+        }\n+      },\n+\n+  election\n+      {\n+        @Override\n+        public ElectionState handle(ElectionContext context,\n+                                    Message<ElectionMessage> message,\n+                                    MessageHolder outgoing\n+        )\n+        {\n+          Log log = context.getLog(ElectionState.class);\n+          switch (message.getMessageType())\n+          {\n+            case demote:\n             {\n-                @Override\n-                public ElectionState handle( ElectionContext context,\n-                                           Message<ElectionMessage> message,\n-                                           MessageHolder outgoing\n-                )\n+              if (!context.electionOk())\n+              {\n+                log.warn(\"Context says election is not OK to proceed. \" +\n+                    \"Failed instances are: \" +\n+                    context.getFailed() +\n+                    \", cluster members are: \" +\n+                    context.getMembers());\n+                break;\n+              }\n+\n+              InstanceId demoteNode = message.getPayload();\n+              // TODO  Could perhaps be done better?\n+              context.nodeFailed(demoteNode);\n+              if (context.isInCluster())\n+              {\n+                // Only the first alive server should try elections. Everyone else waits\n+                List<InstanceId> aliveInstances = Iterables.asList(context.getAlive());\n+                Collections.sort(aliveInstances);\n+                boolean isElector = aliveInstances.indexOf(context.getMyId()) == 0;\n+\n+                if (isElector)\n                 {\n-                    if ( message.getMessageType() == ElectionMessage.created )\n+                  log.debug(\"I (\" + context.getMyId() +\n+                      \") am the elector, executing the election\");\n+                  // Start election process for all roles that are currently unassigned\n+                  Iterable<String> rolesRequiringElection = context.getRolesRequiringElection();\n+                  for (String role : rolesRequiringElection)\n+                  {\n+                    if (!context.isElectionProcessInProgress(role))\n                     {\n-                        context.created();\n-                        return election;\n-                    }\n-                    else if ( message.getMessageType() == ElectionMessage.join )\n+                      log.debug(\"Starting election process for role \" + role);\n+\n+                      context.startElectionProcess(role);\n+\n+                      // Allow other live nodes to vote which one should take over\n+                      for (Map.Entry<InstanceId, URI> server : context.getMembers().entrySet())\n+                      {\n+                        if (!context.getFailed().contains(server.getKey()))\n+                        {\n+                          // This is a candidate - allow it to vote itself for promotion\n+                          outgoing.offer(Message.to(ElectionMessage.vote, server.getValue(),\n+                              context.voteRequestForRole(new ElectionRole(role))));\n+                        }\n+                      }\n+                      context.setTimeout(\"election-\" + role,\n+                          Message.timeout(ElectionMessage.electionTimeout, message,\n+                              new ElectionTimeoutData(role, message)));\n+                    } else\n                     {\n-                        return election;\n+                      log.debug(\"Election already in progress for role \" + role);\n                     }\n-\n-                    return this;\n+                  }\n                 }\n-            },\n+              }\n+              break;\n+            }\n \n-    election\n+            case performRoleElections:\n             {\n-                @Override\n-                public ElectionState handle( ElectionContext context,\n-                                           Message<ElectionMessage> message,\n-                                           MessageHolder outgoing\n-                )\n+              if (!context.electionOk())\n+              {\n+                log.warn(\"Context says election is not OK to proceed. \" +\n+                    \"Failed instances are: \" +\n+                    context.getFailed() +\n+                    \", cluster members are: \" +\n+                    context.getMembers());\n+                break;\n+              }\n+              if (context.isInCluster())\n+              {\n+                boolean isElector = context.isElector();\n+\n+                if (isElector)\n                 {\n-                    Log log = context.getLog( ElectionState.class );\n-                    switch ( message.getMessageType() )\n+                  context.getLog(ElectionState.class).info(\"I am the elector, doing election...\");\n+                  // Start election process for all roles\n+                  Iterable<ElectionRole> rolesRequiringElection = context.getPossibleRoles();\n+                  for (ElectionRole role : rolesRequiringElection)\n+                  {\n+                    String roleName = role.getName();\n+                    if (!context.isElectionProcessInProgress(roleName))\n                     {\n-                        case demote:\n+                      context.getLog(ElectionState.class).debug(\n+                          \"Starting election process for role \" + roleName);\n+\n+                      context.startElectionProcess(roleName);\n+\n+                      boolean sentSome = false;\n+                      // Allow other live nodes to vote which one should take over\n+                      for (Map.Entry<InstanceId, URI> server : context.getMembers().entrySet())\n+                      {\n+                        /*\n+                         * Skip dead nodes and the current role holder. Dead nodes are not\n+                         * candidates anyway and the current role holder will be asked last,\n+                         * after everyone else has cast votes.\n+                         */\n+                        if (!context.isFailed(server.getKey()) &&\n+                            !server.getKey().equals(context.getElected(roleName)))\n                         {\n-                            if ( !context.electionOk() )\n-                            {\n-                                log.warn( \"Context says election is not OK to proceed. \" +\n-                                        \"Failed instances are: \" +\n-                                        context.getFailed() +\n-                                        \", cluster members are: \" +\n-                                        context.getMembers()  );\n-                                break;\n-                            }\n-\n-                            InstanceId demoteNode = message.getPayload();\n-                            // TODO  Could perhaps be done better?\n-                            context.nodeFailed( demoteNode );\n-                            if ( context.isInCluster() )\n-                            {\n-                                // Only the first alive server should try elections. Everyone else waits\n-                                List<InstanceId> aliveInstances = Iterables.asList(context.getAlive());\n-                                Collections.sort( aliveInstances );\n-                                boolean isElector = aliveInstances.indexOf( context.getMyId() ) == 0;\n-\n-                                if ( isElector )\n-                                {\n-                                    log.debug( \"I (\" + context.getMyId() +\n-                                            \") am the elector, executing the election\" );\n-                                    // Start election process for all roles that are currently unassigned\n-                                    Iterable<String> rolesRequiringElection = context.getRolesRequiringElection();\n-                                    for ( String role : rolesRequiringElection )\n-                                    {\n-                                        if ( !context.isElectionProcessInProgress( role ) )\n-                                        {\n-                                            log.debug( \"Starting election process for role \" + role );\n-\n-                                            context.startElectionProcess( role );\n-\n-                                            // Allow other live nodes to vote which one should take over\n-                                            for ( Map.Entry<InstanceId, URI> server : context.getMembers().entrySet() )\n-                                            {\n-                                                if ( !context.getFailed().contains( server.getKey() ) )\n-                                                {\n-                                                    // This is a candidate - allow it to vote itself for promotion\n-                                                    outgoing.offer( Message.to( ElectionMessage.vote, server.getValue(),\n-                                                            context.voteRequestForRole( new ElectionRole( role ) ) ) );\n-                                                }\n-                                            }\n-                                            context.setTimeout( \"election-\" + role,\n-                                                    Message.timeout( ElectionMessage.electionTimeout, message,\n-                                                            new ElectionTimeoutData( role, message ) ) );\n-                                        }\n-                                        else\n-                                        {\n-                                            log.debug( \"Election already in progress for role \" + role );\n-                                        }\n-                                    }\n-                                }\n-                            }\n-                            break;\n-                        }\n-\n-                        case performRoleElections:\n-                        {\n-                            if ( !context.electionOk() )\n-                            {\n-                                log.warn( \"Context says election is not OK to proceed. \" +\n-                                        \"Failed instances are: \" +\n-                                        context.getFailed() +\n-                                        \", cluster members are: \" +\n-                                        context.getMembers()  );\n-                                break;\n-                            }\n-                            if ( context.isInCluster() )\n-                            {\n-                                boolean isElector = context.isElector();\n-\n-                                if ( isElector )\n-                                {\n-                                    context.getLog( ElectionState.class ).info( \"I am the elector, doing election...\" );\n-                                    // Start election process for all roles\n-                                    Iterable<ElectionRole> rolesRequiringElection = context.getPossibleRoles();\n-                                    for ( ElectionRole role : rolesRequiringElection )\n-                                    {\n-                                        String roleName = role.getName();\n-                                        if ( !context.isElectionProcessInProgress( roleName ) )\n-                                        {\n-                                            context.getLog( ElectionState.class ).debug(\n-                                                    \"Starting election process for role \" + roleName );\n-\n-                                            context.startElectionProcess( roleName );\n-\n-                                            boolean sentSome = false;\n-                                            // Allow other live nodes to vote which one should take over\n-                                            for ( Map.Entry<InstanceId, URI> server : context.getMembers().entrySet() )\n-                                            {\n-                                                /*\n-                                                 * Skip dead nodes and the current role holder. Dead nodes are not\n-                                                 * candidates anyway and the current role holder will be asked last,\n-                                                 * after everyone else has cast votes.\n-                                                 */\n-                                                if ( !context.isFailed( server.getKey() ) &&\n-                                                        !server.getKey().equals( context.getElected( roleName ) ) )\n-                                                {\n-                                                    // This is a candidate - allow it to vote itself for promotion\n-                                                    outgoing.offer( Message.to( ElectionMessage.vote,\n-                                                            server.getValue(), context.voteRequestForRole( role ) ) );\n-                                                    sentSome = true;\n-                                                }\n-                                            }\n-                                            if ( !sentSome )\n-                                            {\n-                                                /*\n-                                                 * If we didn't send any messages, we are the only non-failed cluster\n-                                                 * member and probably (not necessarily) hold the role, though that\n-                                                 * doesn't matter. So we ask ourselves to vote, if we didn't above.\n-                                                 * In this case, no timeout is required, because no messages are\n-                                                 * expected. If we are indeed the role holder, then we'll cast our\n-                                                 * vote as a response to this message, which will complete the election.\n-                                                 */\n-                                                outgoing.offer( Message.internal( ElectionMessage.vote,\n-                                                        context.voteRequestForRole( new ElectionRole( roleName ) ) ) );\n-                                            }\n-                                            else\n-                                            {\n-                                                context.setTimeout( \"election-\" + roleName,\n-                                                        Message.timeout( ElectionMessage.electionTimeout, message,\n-                                                                new ElectionTimeoutData( roleName, message ) ) );\n-                                            }\n-                                        }\n-                                        else\n-                                        {\n-                                            log.debug( \"Election already in progress for role \" + roleName );\n-                                        }\n-                                    }\n-                                }\n-                                else\n-                                {\n-                                    /*\n-                                     * We take alive instances as determined by suspicions and remove those that are\n-                                     * marked as failed in the failed set. This is done so that an instance which\n-                                     * just joined can use the failed set provided in the configuration response to\n-                                     * correctly determine the instances that are failed and skip them.\n-                                     * Basically, this is to solve an issue where if an instance joins and is the\n-                                     * lowest numbered alive but not overall will not try to get the failed lower\n-                                     * numbered one to do elections.\n-                                     */\n-                                    Set<InstanceId> aliveInstances = Iterables.asSet( context.getAlive() );\n-                                    aliveInstances.removeAll( context.getFailed() );\n-                                    List<InstanceId> adjustedAlive = Iterables.asList( aliveInstances );\n-                                    Collections.sort( adjustedAlive );\n-\n-                                    context.getLog( ElectionState.class ).info( \"I am NOT the elector, sending to \" + adjustedAlive );\n-                                    outgoing.offer( message.setHeader( Message.HEADER_TO,\n-                                            context.getUriForId( firstOrNull( adjustedAlive ) ).toString() ) );\n-                                }\n-                            }\n-                            break;\n-                        }\n-\n-                        case vote:\n-                        {\n-                            Object request = message.getPayload();\n-\n-                            ElectionContext.VoteRequest voteRequest = (ElectionContext.VoteRequest) request;\n-                            outgoing.offer( Message.respond( ElectionMessage.voted, message,\n-                                    new ElectionMessage.VersionedVotedData( voteRequest.getRole(), context.getMyId(),\n-                                            context.getCredentialsForRole( voteRequest.getRole() ),\n-                                            voteRequest.getVersion() ) ) );\n-                            break;\n+                          // This is a candidate - allow it to vote itself for promotion\n+                          outgoing.offer(Message.to(ElectionMessage.vote,\n+                              server.getValue(), context.voteRequestForRole(role)));\n+                          sentSome = true;\n                         }\n+                      }\n+                      if (!sentSome)\n+                      {\n+                        /*\n+                         * If we didn't send any messages, we are the only non-failed cluster\n+                         * member and probably (not necessarily) hold the role, though that\n+                         * doesn't matter. So we ask ourselves to vote, if we didn't above.\n+                         * In this case, no timeout is required, because no messages are\n+                         * expected. If we are indeed the role holder, then we'll cast our\n+                         * vote as a response to this message, which will complete the election.\n+                         */\n+                        outgoing.offer(Message.internal(ElectionMessage.vote,\n+                            context.voteRequestForRole(new ElectionRole(roleName))));\n+                      } else\n+                      {\n+                        context.setTimeout(\"election-\" + roleName,\n+                            Message.timeout(ElectionMessage.electionTimeout, message,\n+                                new ElectionTimeoutData(roleName, message)));\n+                      }\n+                    } else\n+                    {\n+                      log.debug(\"Election already in progress for role \" + roleName);\n+                    }\n+                  }\n+                } else\n+                {\n+                  /*\n+                   * We take alive instances as determined by suspicions and remove those that are\n+                   * marked as failed in the failed set. This is done so that an instance which\n+                   * just joined can use the failed set provided in the configuration response to\n+                   * correctly determine the instances that are failed and skip them.\n+                   * Basically, this is to solve an issue where if an instance joins and is the\n+                   * lowest numbered alive but not overall will not try to get the failed lower\n+                   * numbered one to do elections.\n+                   */\n+                  Set<InstanceId> aliveInstances = Iterables.asSet(context.getAlive());\n+                  aliveInstances.removeAll(context.getFailed());\n+                  List<InstanceId> adjustedAlive = Iterables.asList(aliveInstances);\n+                  Collections.sort(adjustedAlive);\n+\n+                  context.getLog(ElectionState.class).info(\"I am NOT the elector, sending to \" + adjustedAlive);\n+                  outgoing.offer(message.setHeader(Message.HEADER_TO,\n+                      context.getUriForId(firstOrNull(adjustedAlive)).toString()));\n+                }\n+              }\n+              break;\n+            }\n \n-                        case voted:\n-                        {\n-                            ElectionMessage.VotedData data = message.getPayload();\n-                            long version = -1;\n-                            if ( data instanceof ElectionMessage.VersionedVotedData )\n-                            {\n-                                version = ((ElectionMessage.VersionedVotedData) data).getVersion();\n-                            }\n-                            boolean accepted =\n-                                    context.voted( data.getRole(), data.getInstanceId(), data.getElectionCredentials(),\n-                                            version );\n-\n-                            String voter = message.hasHeader( Message.HEADER_FROM ) ? message.getHeader( Message.HEADER_FROM ) : \"I\";\n-                            log.debug( voter + \" voted \" + data + \" which i \" +\n-                                    ( accepted ? \"accepted\" : \"did not accept\" ) );\n-\n-                            if ( !accepted )\n-                            {\n-                                break;\n-                            }\n-\n-                            /*\n-                             * This is the URI of the current role holder and, yes, it could very well be null. However\n-                             * we don't really care. If it is null then the election would not have sent one vote\n-                             * request less than needed (i.e. ask the master last) since, well, it doesn't exist. So\n-                             * the immediate effect is that the else (which checks for null) will never be called.\n-                             */\n-                            InstanceId currentElected = context.getElected( data.getRole() );\n-\n-                            if ( context.getVoteCount( data.getRole() ) == context.getNeededVoteCount() )\n-                            {\n-                                // We have all votes now\n-                                InstanceId winner = context.getElectionWinner( data.getRole() );\n-\n-                                context.cancelTimeout( \"election-\" + data.getRole() );\n-                                context.forgetElection( data.getRole() );\n-\n-                                if ( winner != null )\n-                                {\n-                                    log.debug( \"Elected \" + winner + \" as \" + data.getRole() );\n-\n-                                    // Broadcast this\n-                                    ClusterMessage.VersionedConfigurationStateChange configurationChangeState =\n-                                            context.newConfigurationStateChange();\n-                                    configurationChangeState.elected( data.getRole(), winner );\n-\n-                                    outgoing.offer( Message.internal( AtomicBroadcastMessage.broadcast,\n-                                            configurationChangeState ) );\n-                                }\n-                                else\n-                                {\n-                                    log.warn( \"Election could not pick a winner\" );\n-                                    if ( currentElected != null )\n-                                    {\n-                                        // Someone had the role and doesn't anymore. Broadcast this\n-                                        ClusterMessage.ConfigurationChangeState configurationChangeState =\n-                                                new ClusterMessage.ConfigurationChangeState();\n-                                        configurationChangeState.unelected( data.getRole(), currentElected );\n-                                        outgoing.offer( Message.internal( ProposerMessage.propose,\n-                                                configurationChangeState ) );\n-                                    }\n-                                }\n-                            }\n-                            else if ( context.getVoteCount( data.getRole() ) == context.getNeededVoteCount() - 1 &&\n-                                    currentElected != null &&\n-                                    !context.hasCurrentlyElectedVoted( data.getRole(), currentElected ) )\n-                            {\n-                                // Missing one vote, the one from the current role holder\n-                                outgoing.offer( Message.to( ElectionMessage.vote,\n-                                        context.getUriForId( currentElected ),\n-                                        context.voteRequestForRole( new ElectionRole( data.getRole() ) ) ) );\n-                            }\n-                            break;\n-                        }\n+            case vote:\n+            {\n+              Object request = message.getPayload();\n \n-                        case electionTimeout:\n-                        {\n-                            // Election failed - try again\n-                            ElectionTimeoutData electionTimeoutData = message.getPayload();\n-                            log.warn( String.format(\n-                                    \"Election timed out for '%s'- trying again\", electionTimeoutData.getRole() ) );\n-                            context.forgetElection( electionTimeoutData.getRole() );\n-                            outgoing.offer( electionTimeoutData.getMessage() );\n-                            break;\n-                        }\n+              ElectionContext.VoteRequest voteRequest = (ElectionContext.VoteRequest) request;\n+              outgoing.offer(Message.respond(ElectionMessage.voted, message,\n+                  new ElectionMessage.VersionedVotedData(voteRequest.getRole(), context.getMyId(),\n+                      context.getCredentialsForRole(voteRequest.getRole()),\n+                      voteRequest.getVersion())));\n+              break;\n+            }\n \n-                        case leave:\n-                        {\n-                            return start;\n-                        }\n+            case voted:\n+            {\n+              ElectionMessage.VotedData data = message.getPayload();\n+              long version = -1;\n+              if (data instanceof ElectionMessage.VersionedVotedData)\n+              {\n+                version = ((ElectionMessage.VersionedVotedData) data).getVersion();\n+              }\n+              boolean accepted =\n+                  context.voted(data.getRole(), data.getInstanceId(), data.getElectionCredentials(),\n+                      version);\n+\n+              String voter = message.hasHeader(Message.HEADER_FROM) ? message.getHeader(Message.HEADER_FROM) : \"I\";\n+              log.debug(voter + \" voted \" + data + \" which i \" +\n+                  (accepted ? \"accepted\" : \"did not accept\"));\n+\n+              if (!accepted)\n+              {\n+                break;\n+              }\n+\n+              /*\n+               * This is the URI of the current role holder and, yes, it could very well be null. However\n+               * we don't really care. If it is null then the election would not have sent one vote\n+               * request less than needed (i.e. ask the master last) since, well, it doesn't exist. So\n+               * the immediate effect is that the else (which checks for null) will never be called.\n+               */\n+              InstanceId currentElected = context.getElected(data.getRole());\n+\n+              if (context.getVoteCount(data.getRole()) == context.getNeededVoteCount())\n+              {\n+                // We have all votes now\n+                InstanceId winner = context.getElectionWinner(data.getRole());\n+\n+                context.cancelTimeout(\"election-\" + data.getRole());\n+                context.forgetElection(data.getRole());\n+\n+                if (winner != null)\n+                {\n+                  log.debug(\"Elected \" + winner + \" as \" + data.getRole());\n \n-                        default:\n-                            break;\n-                    }\n+                  // Broadcast this\n+                  ClusterMessage.VersionedConfigurationStateChange configurationChangeState =\n+                      context.newConfigurationStateChange();\n+                  configurationChangeState.elected(data.getRole(), winner);\n \n-                    return this;\n+                  outgoing.offer(Message.internal(AtomicBroadcastMessage.broadcast,\n+                      configurationChangeState));\n+                } else\n+                {\n+                  log.warn(\"Election could not pick a winner\");\n+                  if (currentElected != null)\n+                  {\n+                    // Someone had the role and doesn't anymore. Broadcast this\n+                    ClusterMessage.ConfigurationChangeState configurationChangeState =\n+                        new ClusterMessage.ConfigurationChangeState();\n+                    configurationChangeState.unelected(data.getRole(), currentElected);\n+                    outgoing.offer(Message.internal(ProposerMessage.propose,\n+                        configurationChangeState));\n+                  }\n                 }\n-            };\n+              } else if (context.getVoteCount(data.getRole()) == context.getNeededVoteCount() - 1 &&\n+                  currentElected != null &&\n+                  !context.hasCurrentlyElectedVoted(data.getRole(), currentElected))\n+              {\n+                // Missing one vote, the one from the current role holder\n+                outgoing.offer(Message.to(ElectionMessage.vote,\n+                    context.getUriForId(currentElected),\n+                    context.voteRequestForRole(new ElectionRole(data.getRole()))));\n+              }\n+              break;\n+            }\n+\n+            case electionTimeout:\n+            {\n+              // Election failed - try again\n+              ElectionTimeoutData electionTimeoutData = message.getPayload();\n+              log.warn(String.format(\n+                  \"Election timed out for '%s'- trying again\", electionTimeoutData.getRole()));\n+              context.forgetElection(electionTimeoutData.getRole());\n+              outgoing.offer(electionTimeoutData.getMessage());\n+              break;\n+            }\n+\n+            case leave:\n+            {\n+              return start;\n+            }\n \n-    public static class ElectionTimeoutData\n-    {\n-        private final String role;\n-        private final Message message;\n+            default:\n+              break;\n+          }\n \n-        public ElectionTimeoutData( String role, Message message )\n-        {\n-            this.role = role;\n-            this.message = message;\n+          return this;\n         }\n+      };\n \n-        public String getRole()\n-        {\n-            return role;\n-        }\n+  public static class ElectionTimeoutData\n+  {\n+    private final String role;\n+    private final Message message;\n \n-        public Message getMessage()\n-        {\n-            return message;\n-        }\n+    public ElectionTimeoutData(String role, Message message)\n+    {\n+      this.role = role;\n+      this.message = message;\n+    }\n+\n+    public String getRole()\n+    {\n+      return role;\n+    }\n+\n+    public Message getMessage()\n+    {\n+      return message;\n     }\n+  }\n }\n",
            "diff_size": 535
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 191).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "108",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 180).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "127",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 191).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "181",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "216",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 262).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4352/ElectionState.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4352/ElectionState.java\nindex 354114700f6..65efa43fd94 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4352/ElectionState.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4352/ElectionState.java\n@@ -40,16 +40,13 @@ import static org.neo4j.helpers.collection.Iterables.firstOrNull;\n /**\n  * State machine that implements the {@link Election} API.\n  */\n-public enum ElectionState\n-        implements State<ElectionContext, ElectionMessage>\n+public enum ElectionState implements State<ElectionContext, ElectionMessage>\n {\n     start\n-            {\n+{\n                 @Override\n-                public ElectionState handle( ElectionContext context,\n-                                           Message<ElectionMessage> message,\n-                                           MessageHolder outgoing\n-                )\n+                public ElectionState handle( ElectionContext context, Message<ElectionMessage> message,\n+                                           MessageHolder outgoing )\n                 {\n                     if ( message.getMessageType() == ElectionMessage.created )\n                     {\n@@ -63,29 +60,21 @@ public enum ElectionState\n \n                     return this;\n                 }\n-            },\n-\n-    election\n-            {\n+            }, election\n+{\n                 @Override\n-                public ElectionState handle( ElectionContext context,\n-                                           Message<ElectionMessage> message,\n-                                           MessageHolder outgoing\n-                )\n+                public ElectionState handle( ElectionContext context, Message<ElectionMessage> message,\n+                                           MessageHolder outgoing )\n                 {\n                     Log log = context.getLog( ElectionState.class );\n                     switch ( message.getMessageType() )\n                     {\n-                        case demote:\n+case demote:\n                         {\n                             if ( !context.electionOk() )\n                             {\n-                                log.warn( \"Context says election is not OK to proceed. \" +\n-                                        \"Failed instances are: \" +\n-                                        context.getFailed() +\n-                                        \", cluster members are: \" +\n-                                        context.getMembers()  );\n-                                break;\n+                                log.warn( \"Context says election is not OK to proceed. \" + \"Failed instances are: \" + context.getFailed() + \", cluster members are: \" + context.getMembers() );\n+break;\n                             }\n \n                             InstanceId demoteNode = message.getPayload();\n@@ -94,38 +83,34 @@ public enum ElectionState\n                             if ( context.isInCluster() )\n                             {\n                                 // Only the first alive server should try elections. Everyone else waits\n-                                List<InstanceId> aliveInstances = Iterables.asList(context.getAlive());\n+                                List<InstanceId> aliveInstances = Iterables.asList(context.getAlive() );\n                                 Collections.sort( aliveInstances );\n                                 boolean isElector = aliveInstances.indexOf( context.getMyId() ) == 0;\n \n                                 if ( isElector )\n                                 {\n-                                    log.debug( \"I (\" + context.getMyId() +\n-                                            \") am the elector, executing the election\" );\n-                                    // Start election process for all roles that are currently unassigned\n+                                    log.debug( \"I (\" + context.getMyId() + \") am the elector, executing the election\" );\n+    // Start election process for all roles that are currently unassigned\n                                     Iterable<String> rolesRequiringElection = context.getRolesRequiringElection();\n                                     for ( String role : rolesRequiringElection )\n                                     {\n                                         if ( !context.isElectionProcessInProgress( role ) )\n                                         {\n                                             log.debug( \"Starting election process for role \" + role );\n-\n-                                            context.startElectionProcess( role );\n+context.startElectionProcess( role );\n \n                                             // Allow other live nodes to vote which one should take over\n-                                            for ( Map.Entry<InstanceId, URI> server : context.getMembers().entrySet() )\n+                                            for ( Map.Entry<InstanceId,URI> server : context.getMembers().entrySet() )\n                                             {\n                                                 if ( !context.getFailed().contains( server.getKey() ) )\n                                                 {\n                                                     // This is a candidate - allow it to vote itself for promotion\n-                                                    outgoing.offer( Message.to( ElectionMessage.vote, server.getValue(),\n-                                                            context.voteRequestForRole( new ElectionRole( role ) ) ) );\n-                                                }\n+                                                    outgoing.offer( Message.to( ElectionMessage.vote, server.getValue(), context.voteRequestForRole( new ElectionRole( role ) ) ) );\n+    }\n                                             }\n                                             context.setTimeout( \"election-\" + role,\n-                                                    Message.timeout( ElectionMessage.electionTimeout, message,\n-                                                            new ElectionTimeoutData( role, message ) ) );\n-                                        }\n+                                                    Message.timeout( ElectionMessage.electionTimeout, message, new ElectionTimeoutData( role, message ) ) );\n+    }\n                                         else\n                                         {\n                                             log.debug( \"Election already in progress for role \" + role );\n@@ -135,23 +120,18 @@ public enum ElectionState\n                             }\n                             break;\n                         }\n-\n-                        case performRoleElections:\n+    case performRoleElections:\n                         {\n                             if ( !context.electionOk() )\n                             {\n-                                log.warn( \"Context says election is not OK to proceed. \" +\n-                                        \"Failed instances are: \" +\n-                                        context.getFailed() +\n-                                        \", cluster members are: \" +\n-                                        context.getMembers()  );\n-                                break;\n+                                log.warn( \"Context says election is not OK to proceed. \" + \"Failed instances are: \" + context.getFailed() + \", cluster members are: \" + context.getMembers() );\n+break;\n                             }\n-                            if ( context.isInCluster() )\n+\n+if ( context.isInCluster() )\n                             {\n                                 boolean isElector = context.isElector();\n-\n-                                if ( isElector )\n+if ( isElector )\n                                 {\n                                     context.getLog( ElectionState.class ).info( \"I am the elector, doing election...\" );\n                                     // Start election process for all roles\n@@ -161,14 +141,12 @@ public enum ElectionState\n                                         String roleName = role.getName();\n                                         if ( !context.isElectionProcessInProgress( roleName ) )\n                                         {\n-                                            context.getLog( ElectionState.class ).debug(\n-                                                    \"Starting election process for role \" + roleName );\n-\n-                                            context.startElectionProcess( roleName );\n+                                            context.getLog( ElectionState.class ).debug( \"Starting election process for role \" + roleName );\n+context.startElectionProcess( roleName );\n \n                                             boolean sentSome = false;\n                                             // Allow other live nodes to vote which one should take over\n-                                            for ( Map.Entry<InstanceId, URI> server : context.getMembers().entrySet() )\n+                                            for ( Map.Entry<InstanceId,URI> server : context.getMembers().entrySet() )\n                                             {\n                                                 /*\n                                                  * Skip dead nodes and the current role holder. Dead nodes are not\n@@ -181,7 +159,7 @@ public enum ElectionState\n                                                     // This is a candidate - allow it to vote itself for promotion\n                                                     outgoing.offer( Message.to( ElectionMessage.vote,\n                                                             server.getValue(), context.voteRequestForRole( role ) ) );\n-                                                    sentSome = true;\n+sentSome = true;\n                                                 }\n                                             }\n                                             if ( !sentSome )\n@@ -200,9 +178,8 @@ public enum ElectionState\n                                             else\n                                             {\n                                                 context.setTimeout( \"election-\" + roleName,\n-                                                        Message.timeout( ElectionMessage.electionTimeout, message,\n-                                                                new ElectionTimeoutData( roleName, message ) ) );\n-                                            }\n+                                                        Message.timeout( ElectionMessage.electionTimeout, message, new ElectionTimeoutData( roleName, message ) ) );\n+    }\n                                         }\n                                         else\n                                         {\n@@ -225,28 +202,21 @@ public enum ElectionState\n                                     aliveInstances.removeAll( context.getFailed() );\n                                     List<InstanceId> adjustedAlive = Iterables.asList( aliveInstances );\n                                     Collections.sort( adjustedAlive );\n-\n-                                    context.getLog( ElectionState.class ).info( \"I am NOT the elector, sending to \" + adjustedAlive );\n+context.getLog( ElectionState.class ).info( \"I am NOT the elector, sending to \" + adjustedAlive );\n                                     outgoing.offer( message.setHeader( Message.HEADER_TO,\n                                             context.getUriForId( firstOrNull( adjustedAlive ) ).toString() ) );\n-                                }\n+    }\n                             }\n                             break;\n                         }\n-\n-                        case vote:\n+    case vote:\n                         {\n                             Object request = message.getPayload();\n-\n-                            ElectionContext.VoteRequest voteRequest = (ElectionContext.VoteRequest) request;\n-                            outgoing.offer( Message.respond( ElectionMessage.voted, message,\n-                                    new ElectionMessage.VersionedVotedData( voteRequest.getRole(), context.getMyId(),\n-                                            context.getCredentialsForRole( voteRequest.getRole() ),\n-                                            voteRequest.getVersion() ) ) );\n-                            break;\n+ElectionContext.VoteRequest voteRequest = (ElectionContext.VoteRequest) request;\n+                            outgoing.offer( Message.respond( ElectionMessage.voted, message, new ElectionMessage.VersionedVotedData( voteRequest.getRole(), context.getMyId(), context.getCredentialsForRole( voteRequest.getRole() ), voteRequest.getVersion() ) ) );\n+break;\n                         }\n-\n-                        case voted:\n+    case voted:\n                         {\n                             ElectionMessage.VotedData data = message.getPayload();\n                             long version = -1;\n@@ -254,15 +224,11 @@ public enum ElectionState\n                             {\n                                 version = ((ElectionMessage.VersionedVotedData) data).getVersion();\n                             }\n-                            boolean accepted =\n-                                    context.voted( data.getRole(), data.getInstanceId(), data.getElectionCredentials(),\n+                            boolean accepted = context.voted( data.getRole(), data.getInstanceId(), data.getElectionCredentials(),\n                                             version );\n-\n-                            String voter = message.hasHeader( Message.HEADER_FROM ) ? message.getHeader( Message.HEADER_FROM ) : \"I\";\n-                            log.debug( voter + \" voted \" + data + \" which i \" +\n-                                    ( accepted ? \"accepted\" : \"did not accept\" ) );\n-\n-                            if ( !accepted )\n+String voter = message.hasHeader( Message.HEADER_FROM ) ? message.getHeader( Message.HEADER_FROM ) : \"I\";\n+                            log.debug( voter + \" voted \" + data + \" which i \" + ( accepted ? \"accepted\" : \"did not accept\" ) );\n+if ( !accepted )\n                             {\n                                 break;\n                             }\n@@ -274,25 +240,20 @@ public enum ElectionState\n                              * the immediate effect is that the else (which checks for null) will never be called.\n                              */\n                             InstanceId currentElected = context.getElected( data.getRole() );\n-\n-                            if ( context.getVoteCount( data.getRole() ) == context.getNeededVoteCount() )\n+if ( context.getVoteCount( data.getRole() ) == context.getNeededVoteCount() )\n                             {\n                                 // We have all votes now\n                                 InstanceId winner = context.getElectionWinner( data.getRole() );\n-\n-                                context.cancelTimeout( \"election-\" + data.getRole() );\n+context.cancelTimeout( \"election-\" + data.getRole() );\n                                 context.forgetElection( data.getRole() );\n-\n-                                if ( winner != null )\n+if ( winner != null )\n                                 {\n                                     log.debug( \"Elected \" + winner + \" as \" + data.getRole() );\n \n                                     // Broadcast this\n-                                    ClusterMessage.VersionedConfigurationStateChange configurationChangeState =\n-                                            context.newConfigurationStateChange();\n-                                    configurationChangeState.elected( data.getRole(), winner );\n-\n-                                    outgoing.offer( Message.internal( AtomicBroadcastMessage.broadcast,\n+                                    ClusterMessage.VersionedConfigurationStateChange configurationChangeState = context.newConfigurationStateChange();\n+configurationChangeState.elected( data.getRole(), winner );\n+outgoing.offer( Message.internal( AtomicBroadcastMessage.broadcast,\n                                             configurationChangeState ) );\n                                 }\n                                 else\n@@ -301,12 +262,11 @@ public enum ElectionState\n                                     if ( currentElected != null )\n                                     {\n                                         // Someone had the role and doesn't anymore. Broadcast this\n-                                        ClusterMessage.ConfigurationChangeState configurationChangeState =\n-                                                new ClusterMessage.ConfigurationChangeState();\n-                                        configurationChangeState.unelected( data.getRole(), currentElected );\n+                                        ClusterMessage.ConfigurationChangeState configurationChangeState = new ClusterMessage.ConfigurationChangeState();\n+configurationChangeState.unelected( data.getRole(), currentElected );\n                                         outgoing.offer( Message.internal( ProposerMessage.propose,\n                                                 configurationChangeState ) );\n-                                    }\n+    }\n                                 }\n                             }\n                             else if ( context.getVoteCount( data.getRole() ) == context.getNeededVoteCount() - 1 &&\n@@ -315,37 +275,32 @@ public enum ElectionState\n                             {\n                                 // Missing one vote, the one from the current role holder\n                                 outgoing.offer( Message.to( ElectionMessage.vote,\n-                                        context.getUriForId( currentElected ),\n-                                        context.voteRequestForRole( new ElectionRole( data.getRole() ) ) ) );\n+                                        context.getUriForId( currentElected ), context.voteRequestForRole( new ElectionRole( data.getRole() ) ) ) );\n                             }\n                             break;\n                         }\n-\n-                        case electionTimeout:\n+    case electionTimeout:\n                         {\n                             // Election failed - try again\n                             ElectionTimeoutData electionTimeoutData = message.getPayload();\n-                            log.warn( String.format(\n-                                    \"Election timed out for '%s'- trying again\", electionTimeoutData.getRole() ) );\n-                            context.forgetElection( electionTimeoutData.getRole() );\n+                            log.warn( String.format( \"Election timed out for '%s'- trying again\", electionTimeoutData.getRole() ) );\n+context.forgetElection( electionTimeoutData.getRole() );\n                             outgoing.offer( electionTimeoutData.getMessage() );\n                             break;\n                         }\n-\n-                        case leave:\n+    case leave:\n                         {\n                             return start;\n                         }\n-\n-                        default:\n+    default:\n                             break;\n-                    }\n+    }\n \n                     return this;\n                 }\n             };\n \n-    public static class ElectionTimeoutData\n+public static class ElectionTimeoutData\n     {\n         private final String role;\n         private final Message message;\n@@ -366,4 +321,4 @@ public enum ElectionState\n             return message;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 107
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}