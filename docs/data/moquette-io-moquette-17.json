{
    "project_name": "moquette-io-moquette",
    "error_id": "17",
    "information": {
        "errors": [
            {
                "line": "158",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 124).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    private void resendNotAcked(ChannelHandlerContext ctx/* , IdleStateEvent evt */) {\n        if (LOG.isTraceEnabled()) {\n            LOG.trace(\"Flushing idle Netty channel {} for clientId: {}\", ctx.channel(), NettyUtils.clientID(ctx.channel()));\n        }\n        ctx.fireUserEventTriggered(new ResendNotAckedPublishes());\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "158",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/17/InflightResender.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/intellij/17/InflightResender.java\nindex e7c9995dc26..ea2e3d4b99c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/17/InflightResender.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/intellij/17/InflightResender.java\n@@ -32,131 +32,131 @@ import java.util.concurrent.TimeUnit;\n  */\n public class InflightResender extends ChannelDuplexHandler {\n \n-    /**\n-     * Placeholder event to resend not-acked publish messages in the in flight window.\n-     * */\n-    public static class ResendNotAckedPublishes {\n-    }\n+  /**\n+   * Placeholder event to resend not-acked publish messages in the in flight window.\n+   */\n+  public static class ResendNotAckedPublishes {\n+  }\n \n-    private final class WriterIdleTimeoutTask implements Runnable {\n+  private final class WriterIdleTimeoutTask implements Runnable {\n \n-        private final ChannelHandlerContext ctx;\n+    private final ChannelHandlerContext ctx;\n \n-        WriterIdleTimeoutTask(ChannelHandlerContext ctx) {\n-            this.ctx = ctx;\n-        }\n+    WriterIdleTimeoutTask(ChannelHandlerContext ctx) {\n+      this.ctx = ctx;\n+    }\n \n-        @Override\n-        public void run() {\n-            if (!ctx.channel().isOpen()) {\n-                return;\n-            }\n-            long nextDelay = resenderTimeNanos - (System.nanoTime() - lastExecutionTime);\n-            if (nextDelay <= 0) {\n-                // Writer is idle - set a new timeout and notify the callback.\n-                resenderTimeout = ctx.executor().schedule(this, resenderTimeNanos, TimeUnit.NANOSECONDS);\n-                try {\n-                    resendNotAcked(ctx/* , event */);\n-                } catch (Throwable t) {\n-                    ctx.fireExceptionCaught(t);\n-                }\n-            } else {\n-                // Write occurred before the timeout - set a new timeout with shorter delay.\n-                resenderTimeout = ctx.executor().schedule(this, nextDelay, TimeUnit.NANOSECONDS);\n-            }\n+    @Override\n+    public void run() {\n+      if (!ctx.channel().isOpen()) {\n+        return;\n+      }\n+      long nextDelay = resenderTimeNanos - (System.nanoTime() - lastExecutionTime);\n+      if (nextDelay <= 0) {\n+        // Writer is idle - set a new timeout and notify the callback.\n+        resenderTimeout = ctx.executor().schedule(this, resenderTimeNanos, TimeUnit.NANOSECONDS);\n+        try {\n+          resendNotAcked(ctx/* , event */);\n+        } catch (Throwable t) {\n+          ctx.fireExceptionCaught(t);\n         }\n+      } else {\n+        // Write occurred before the timeout - set a new timeout with shorter delay.\n+        resenderTimeout = ctx.executor().schedule(this, nextDelay, TimeUnit.NANOSECONDS);\n+      }\n     }\n+  }\n \n-    private static final Logger LOG = LoggerFactory.getLogger(InflightResender.class);\n-    private static final long MIN_TIMEOUT_NANOS = TimeUnit.MILLISECONDS.toNanos(1);\n-\n-    private final long resenderTimeNanos;\n-    volatile ScheduledFuture<?> resenderTimeout;\n-    volatile long lastExecutionTime;\n+  private static final Logger LOG = LoggerFactory.getLogger(InflightResender.class);\n+  private static final long MIN_TIMEOUT_NANOS = TimeUnit.MILLISECONDS.toNanos(1);\n \n-    private volatile int state; // 0 - none, 1 - initialized, 2 - destroyed\n+  private final long resenderTimeNanos;\n+  volatile ScheduledFuture<?> resenderTimeout;\n+  volatile long lastExecutionTime;\n \n-    public InflightResender(long writerIdleTime, TimeUnit unit) {\n-        if (unit == null) {\n-            throw new NullPointerException(\"unit\");\n-        }\n-        resenderTimeNanos = Math.max(unit.toNanos(writerIdleTime), MIN_TIMEOUT_NANOS);\n-    }\n+  private volatile int state; // 0 - none, 1 - initialized, 2 - destroyed\n \n-    @Override\n-    public void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n-        if (ctx.channel().isActive() && ctx.channel().isRegistered()) {\n-            // channelActive() event has been fired already, which means this.channelActive() will\n-            // not be invoked. We have to initialize here instead.\n-            initialize(ctx);\n-        } else {\n-            // channelActive() event has not been fired yet. this.channelActive() will be invoked\n-            // and initialization will occur there.\n-        }\n+  public InflightResender(long writerIdleTime, TimeUnit unit) {\n+    if (unit == null) {\n+      throw new NullPointerException(\"unit\");\n     }\n-\n-    @Override\n-    public void handlerRemoved(ChannelHandlerContext ctx) throws Exception {\n-        destroy();\n+    resenderTimeNanos = Math.max(unit.toNanos(writerIdleTime), MIN_TIMEOUT_NANOS);\n+  }\n+\n+  @Override\n+  public void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n+    if (ctx.channel().isActive() && ctx.channel().isRegistered()) {\n+      // channelActive() event has been fired already, which means this.channelActive() will\n+      // not be invoked. We have to initialize here instead.\n+      initialize(ctx);\n+    } else {\n+      // channelActive() event has not been fired yet. this.channelActive() will be invoked\n+      // and initialization will occur there.\n     }\n-\n-    @Override\n-    public void channelRegistered(ChannelHandlerContext ctx) throws Exception {\n-        // Initialize early if channel is active already.\n-        if (ctx.channel().isActive()) {\n-            initialize(ctx);\n-        }\n-        super.channelRegistered(ctx);\n+  }\n+\n+  @Override\n+  public void handlerRemoved(ChannelHandlerContext ctx) throws Exception {\n+    destroy();\n+  }\n+\n+  @Override\n+  public void channelRegistered(ChannelHandlerContext ctx) throws Exception {\n+    // Initialize early if channel is active already.\n+    if (ctx.channel().isActive()) {\n+      initialize(ctx);\n     }\n-\n-    @Override\n-    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n-        // This method will be invoked only if this handler was added\n-        // before channelActive() event is fired. If a user adds this handler\n-        // after the channelActive() event, initialize() will be called by beforeAdd().\n-        initialize(ctx);\n-        super.channelActive(ctx);\n+    super.channelRegistered(ctx);\n+  }\n+\n+  @Override\n+  public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+    // This method will be invoked only if this handler was added\n+    // before channelActive() event is fired. If a user adds this handler\n+    // after the channelActive() event, initialize() will be called by beforeAdd().\n+    initialize(ctx);\n+    super.channelActive(ctx);\n+  }\n+\n+  @Override\n+  public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n+    destroy();\n+    super.channelInactive(ctx);\n+  }\n+\n+  private void initialize(ChannelHandlerContext ctx) {\n+    // Avoid the case where destroy() is called before scheduling timeouts.\n+    // See: https://github.com/netty/netty/issues/143\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Initializing autoflush handler on channel {}\", ctx.channel());\n     }\n-\n-    @Override\n-    public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n-        destroy();\n-        super.channelInactive(ctx);\n+    switch (state) {\n+      case 1:\n+      case 2:\n+        return;\n     }\n \n-    private void initialize(ChannelHandlerContext ctx) {\n-        // Avoid the case where destroy() is called before scheduling timeouts.\n-        // See: https://github.com/netty/netty/issues/143\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Initializing autoflush handler on channel {}\", ctx.channel());\n-        }\n-        switch (state) {\n-            case 1:\n-            case 2:\n-                return;\n-        }\n-\n-        state = 1;\n+    state = 1;\n \n-        EventExecutor loop = ctx.executor();\n+    EventExecutor loop = ctx.executor();\n \n-        lastExecutionTime = System.nanoTime();\n-        resenderTimeout = loop.schedule(new WriterIdleTimeoutTask(ctx), resenderTimeNanos, TimeUnit.NANOSECONDS);\n-    }\n+    lastExecutionTime = System.nanoTime();\n+    resenderTimeout = loop.schedule(new WriterIdleTimeoutTask(ctx), resenderTimeNanos, TimeUnit.NANOSECONDS);\n+  }\n \n-    private void destroy() {\n-        state = 2;\n+  private void destroy() {\n+    state = 2;\n \n-        if (resenderTimeout != null) {\n-            resenderTimeout.cancel(false);\n-            resenderTimeout = null;\n-        }\n+    if (resenderTimeout != null) {\n+      resenderTimeout.cancel(false);\n+      resenderTimeout = null;\n     }\n+  }\n \n-    private void resendNotAcked(ChannelHandlerContext ctx/* , IdleStateEvent evt */) {\n-        if (LOG.isTraceEnabled()) {\n-            LOG.trace(\"Flushing idle Netty channel {} for clientId: {}\", ctx.channel(), NettyUtils.clientID(ctx.channel()));\n-        }\n-        ctx.fireUserEventTriggered(new ResendNotAckedPublishes());\n+  private void resendNotAcked(ChannelHandlerContext ctx/* , IdleStateEvent evt */) {\n+    if (LOG.isTraceEnabled()) {\n+      LOG.trace(\"Flushing idle Netty channel {} for clientId: {}\", ctx.channel(), NettyUtils.clientID(ctx.channel()));\n     }\n+    ctx.fireUserEventTriggered(new ResendNotAckedPublishes());\n+  }\n }\n",
            "diff_size": 141
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "158",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/17/InflightResender.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/naturalize/17/InflightResender.java\nindex e7c9995dc26..cb457e9aff6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/17/InflightResender.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/naturalize/17/InflightResender.java\n@@ -159,4 +159,4 @@ public class InflightResender extends ChannelDuplexHandler {\n         }\n         ctx.fireUserEventTriggered(new ResendNotAckedPublishes());\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "30",
                    "severity": "warning",
                    "message": "two or more consecutive empty lines",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpMultilineCheck"
                },
                {
                    "line": "94",
                    "severity": "warning",
                    "message": "two or more consecutive empty lines",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpMultilineCheck"
                },
                {
                    "line": "95",
                    "severity": "warning",
                    "message": "an empty line before }",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpMultilineCheck"
                },
                {
                    "line": "157",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/17/InflightResender.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/codebuff/17/InflightResender.java\nindex e7c9995dc26..36831fa83a5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/17/InflightResender.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/codebuff/17/InflightResender.java\n@@ -22,7 +22,6 @@ import io.netty.channel.ChannelHandlerContext;\n import io.netty.util.concurrent.EventExecutor;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n@@ -30,11 +29,14 @@ import java.util.concurrent.TimeUnit;\n  * Resend inflight not ack'ed publish packets (QoS1 PUB and QoS2 PUB/PUBREL). It's inspired by IdleStateHandler but it's\n  * specialized version, just invoking Session's resendInflightNotAcked by the channel after a period.\n  */\n+\n+\n public class InflightResender extends ChannelDuplexHandler {\n \n     /**\n      * Placeholder event to resend not-acked publish messages in the in flight window.\n      * */\n+\n     public static class ResendNotAckedPublishes {\n     }\n \n@@ -51,6 +53,7 @@ public class InflightResender extends ChannelDuplexHandler {\n             if (!ctx.channel().isOpen()) {\n                 return;\n             }\n+\n             long nextDelay = resenderTimeNanos - (System.nanoTime() - lastExecutionTime);\n             if (nextDelay <= 0) {\n                 // Writer is idle - set a new timeout and notify the callback.\n@@ -69,11 +72,9 @@ public class InflightResender extends ChannelDuplexHandler {\n \n     private static final Logger LOG = LoggerFactory.getLogger(InflightResender.class);\n     private static final long MIN_TIMEOUT_NANOS = TimeUnit.MILLISECONDS.toNanos(1);\n-\n     private final long resenderTimeNanos;\n     volatile ScheduledFuture<?> resenderTimeout;\n     volatile long lastExecutionTime;\n-\n     private volatile int state; // 0 - none, 1 - initialized, 2 - destroyed\n \n     public InflightResender(long writerIdleTime, TimeUnit unit) {\n@@ -92,6 +93,8 @@ public class InflightResender extends ChannelDuplexHandler {\n         } else {\n             // channelActive() event has not been fired yet. this.channelActive() will be invoked\n             // and initialization will occur there.\n+\n+\n         }\n     }\n \n@@ -135,18 +138,14 @@ public class InflightResender extends ChannelDuplexHandler {\n             case 2:\n                 return;\n         }\n-\n         state = 1;\n-\n         EventExecutor loop = ctx.executor();\n-\n         lastExecutionTime = System.nanoTime();\n         resenderTimeout = loop.schedule(new WriterIdleTimeoutTask(ctx), resenderTimeNanos, TimeUnit.NANOSECONDS);\n     }\n \n     private void destroy() {\n         state = 2;\n-\n         if (resenderTimeout != null) {\n             resenderTimeout.cancel(false);\n             resenderTimeout = null;\n@@ -159,4 +158,4 @@ public class InflightResender extends ChannelDuplexHandler {\n         }\n         ctx.fireUserEventTriggered(new ResendNotAckedPublishes());\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "158",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "158",
                    "column": "87",
                    "severity": "warning",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/17/InflightResender.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/styler_three_grams/17/InflightResender.java\nindex e7c9995dc26..5f34f523615 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/17/InflightResender.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/styler_three_grams/17/InflightResender.java\n@@ -155,7 +155,8 @@ public class InflightResender extends ChannelDuplexHandler {\n \n     private void resendNotAcked(ChannelHandlerContext ctx/* , IdleStateEvent evt */) {\n         if (LOG.isTraceEnabled()) {\n-            LOG.trace(\"Flushing idle Netty channel {} for clientId: {}\", ctx.channel(), NettyUtils.clientID(ctx.channel()));\n+            LOG.trace(\"Flushing idle Netty channel {} for clientId: {}\", ctx.channel(),NettyUtils\n+        .clientID(ctx.channel()));\n         }\n         ctx.fireUserEventTriggered(new ResendNotAckedPublishes());\n     }\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}