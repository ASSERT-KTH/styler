{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3764",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "58",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "224",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "261",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "69",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "310",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "310",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "327",
                    "column": "69",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "346",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "346",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "382",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "382",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "385",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "385",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "387",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "387",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "395",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "395",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "400",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "400",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "405",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "405",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "408",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "408",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "415",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "415",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "428",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "428",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "430",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "430",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "441",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "441",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "454",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "454",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "457",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "457",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "471",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "471",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "474",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "474",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "481",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "481",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "493",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "501",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "501",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "513",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "522",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "522",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "534",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "542",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "542",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "544",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "544",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "562",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "562",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "580",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "580",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "586",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "586",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "591",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "591",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "597",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "597",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "601",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "601",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "603",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "603",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "609",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "611",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "611",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "618",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "618",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "620",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "620",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "624",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "624",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "627",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "627",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "646",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "646",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "651",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "651",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "653",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "653",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "656",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "656",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "658",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "658",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "662",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "664",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "664",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "667",
                    "column": "75",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "667",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "685",
                    "column": "75",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "685",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "690",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "690",
                    "column": "125",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "692",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "692",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "696",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "696",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "697",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "697",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "702",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "702",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "704",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "704",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "707",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "707",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "709",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "709",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "712",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "712",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "717",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "717",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "720",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "720",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "723",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "723",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "731",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "731",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "755",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "755",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "772",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "772",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "777",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "777",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3764/Iterators.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3764/Iterators.java\nindex ec05b669bda..63dff176fd4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3764/Iterators.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3764/Iterators.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.helpers.collection;\n \n import java.util.ArrayDeque;\n@@ -52,755 +53,753 @@ import static java.util.Collections.emptyIterator;\n  */\n public final class Iterators\n {\n-    private Iterators()\n-    {\n-        throw new AssertionError( \"no instance\" );\n-    }\n-\n-    /**\n-     * Returns the given iterator's first element or {@code null} if no\n-     * element found.\n-     *\n-     * @param <T> the type of elements in {@code iterator}.\n-     * @param iterator the {@link Iterator} to get elements from.\n-     * @return the first element in the {@code iterator}, or {@code null} if no\n-     * element found.\n-     */\n-    public static <T> T firstOrNull( Iterator<T> iterator )\n-    {\n-        return iterator.hasNext() ? iterator.next() : null;\n-    }\n-\n-    /**\n-     * Returns the given iterator's first element. If no element is found a\n-     * {@link NoSuchElementException} is thrown.\n-     *\n-     * @param <T> the type of elements in {@code iterator}.\n-     * @param iterator the {@link Iterator} to get elements from.\n-     * @return the first element in the {@code iterator}.\n-     * @throws NoSuchElementException if no element found.\n-     */\n-    public static <T> T first( Iterator<T> iterator )\n-    {\n-        return assertNotNull( iterator, firstOrNull( iterator ) );\n-    }\n-\n-    /**\n-     * Returns the given iterator's last element or {@code null} if no\n-     * element found.\n-     *\n-     * @param <T> the type of elements in {@code iterator}.\n-     * @param iterator the {@link Iterator} to get elements from.\n-     * @return the last element in the {@code iterator}, or {@code null} if no\n-     * element found.\n-     */\n-    public static <T> T lastOrNull( Iterator<T> iterator )\n-    {\n-        T result = null;\n-        while ( iterator.hasNext() )\n-        {\n-            result = iterator.next();\n-        }\n-        return result;\n-    }\n-\n-    /**\n-     * Returns the given iterator's last element. If no element is found a\n-     * {@link NoSuchElementException} is thrown.\n-     *\n-     * @param <T> the type of elements in {@code iterator}.\n-     * @param iterator the {@link Iterator} to get elements from.\n-     * @return the last element in the {@code iterator}.\n-     * @throws NoSuchElementException if no element found.\n-     */\n-    public static <T> T last( Iterator<T> iterator )\n-    {\n-        return assertNotNull( iterator, lastOrNull( iterator ) );\n-    }\n-\n-    /**\n-     * Returns the given iterator's single element or {@code null} if no\n-     * element found. If there is more than one element in the iterator a\n-     * {@link NoSuchElementException} will be thrown.\n-     *\n-     * If the {@code iterator} implements {@link Resource} it will be {@link Resource#close() closed}\n-     * in a {@code finally} block after the single item has been retrieved, or failed to be retrieved.\n-     *\n-     * @param <T> the type of elements in {@code iterator}.\n-     * @param iterator the {@link Iterator} to get elements from.\n-     * @return the single element in {@code iterator}, or {@code null} if no\n-     * element found.\n-     * @throws NoSuchElementException if more than one element was found.\n-     */\n-    public static <T> T singleOrNull( Iterator<T> iterator )\n-    {\n-        return single( iterator, null );\n-    }\n-\n-    /**\n-     * Returns the given iterator's single element. If there are no elements\n-     * or more than one element in the iterator a {@link NoSuchElementException}\n-     * will be thrown.\n-     *\n-     * If the {@code iterator} implements {@link Resource} it will be {@link Resource#close() closed}\n-     * in a {@code finally} block after the single item has been retrieved, or failed to be retrieved.\n-     *\n-     * @param <T> the type of elements in {@code iterator}.\n-     * @param iterator the {@link Iterator} to get elements from.\n-     * @return the single element in the {@code iterator}.\n-     * @throws NoSuchElementException if there isn't exactly one element.\n-     */\n-    public static <T> T single( Iterator<T> iterator )\n-    {\n-        return assertNotNull( iterator, singleOrNull( iterator ) );\n-    }\n-\n-    /**\n-     * Returns the iterator's n:th item from the end of the iteration.\n-     * If the iterator has got less than n-1 items in it\n-     * {@link NoSuchElementException} is thrown.\n-     *\n-     * @param <T> the type of elements in {@code iterator}.\n-     * @param iterator the {@link Iterator} to get elements from.\n-     * @param n the n:th item from the end to get.\n-     * @return the iterator's n:th item from the end of the iteration.\n-     * @throws NoSuchElementException if the iterator contains less than n-1 items.\n-     */\n-    public static <T> T fromEnd( Iterator<T> iterator, int n )\n-    {\n-        return assertNotNull( iterator, fromEndOrNull( iterator, n ) );\n-    }\n-\n-    /**\n-     * Returns the iterator's n:th item from the end of the iteration.\n-     * If the iterator has got less than n-1 items in it {@code null} is returned.\n-     *\n-     * @param <T> the type of elements in {@code iterator}.\n-     * @param iterator the {@link Iterator} to get elements from.\n-     * @param n the n:th item from the end to get.\n-     * @return the iterator's n:th item from the end of the iteration,\n-     * or {@code null} if the iterator doesn't contain that many items.\n-     */\n-    public static <T> T fromEndOrNull( Iterator<T> iterator, int n )\n-    {\n-        Deque<T> trail = new ArrayDeque<>( n );\n-        while ( iterator.hasNext() )\n-        {\n-            if ( trail.size() > n )\n-            {\n-                trail.removeLast();\n-            }\n-            trail.addFirst( iterator.next() );\n-        }\n-        return trail.size() == n + 1 ? trail.getLast() : null;\n-    }\n-\n-    /**\n-     * Iterates over the full iterators, and checks equality for each item in them. Note that this\n-     * will consume the iterators.\n-     *\n-     * @param first the first iterator\n-     * @param other the other iterator\n-     * @return {@code true} if all items are equal; otherwise\n-     */\n-    public static boolean iteratorsEqual( Iterator<?> first, Iterator<?> other )\n-    {\n-        while ( true )\n-        {\n-            if ( first.hasNext() && other.hasNext() )\n-            {\n-                if ( !first.next().equals( other.next() ) )\n-                {\n-                    return false;\n-                }\n-            }\n-            else\n-            {\n-                return first.hasNext() == other.hasNext();\n-            }\n-        }\n-    }\n-\n-    private static <T> T assertNotNull( Iterator<T> iterator, T result )\n-    {\n-        if ( result == null )\n+  private Iterators()\n+  {\n+    throw new AssertionError(\"no instance\");\n+  }\n+\n+  /**\n+   * Returns the given iterator's first element or {@code null} if no\n+   * element found.\n+   *\n+   * @param <T>      the type of elements in {@code iterator}.\n+   * @param iterator the {@link Iterator} to get elements from.\n+   * @return the first element in the {@code iterator}, or {@code null} if no\n+   * element found.\n+   */\n+  public static <T> T firstOrNull(Iterator<T> iterator)\n+  {\n+    return iterator.hasNext() ? iterator.next() : null;\n+  }\n+\n+  /**\n+   * Returns the given iterator's first element. If no element is found a\n+   * {@link NoSuchElementException} is thrown.\n+   *\n+   * @param <T>      the type of elements in {@code iterator}.\n+   * @param iterator the {@link Iterator} to get elements from.\n+   * @return the first element in the {@code iterator}.\n+   * @throws NoSuchElementException if no element found.\n+   */\n+  public static <T> T first(Iterator<T> iterator)\n+  {\n+    return assertNotNull(iterator, firstOrNull(iterator));\n+  }\n+\n+  /**\n+   * Returns the given iterator's last element or {@code null} if no\n+   * element found.\n+   *\n+   * @param <T>      the type of elements in {@code iterator}.\n+   * @param iterator the {@link Iterator} to get elements from.\n+   * @return the last element in the {@code iterator}, or {@code null} if no\n+   * element found.\n+   */\n+  public static <T> T lastOrNull(Iterator<T> iterator)\n+  {\n+    T result = null;\n+    while (iterator.hasNext())\n+    {\n+      result = iterator.next();\n+    }\n+    return result;\n+  }\n+\n+  /**\n+   * Returns the given iterator's last element. If no element is found a\n+   * {@link NoSuchElementException} is thrown.\n+   *\n+   * @param <T>      the type of elements in {@code iterator}.\n+   * @param iterator the {@link Iterator} to get elements from.\n+   * @return the last element in the {@code iterator}.\n+   * @throws NoSuchElementException if no element found.\n+   */\n+  public static <T> T last(Iterator<T> iterator)\n+  {\n+    return assertNotNull(iterator, lastOrNull(iterator));\n+  }\n+\n+  /**\n+   * Returns the given iterator's single element or {@code null} if no\n+   * element found. If there is more than one element in the iterator a\n+   * {@link NoSuchElementException} will be thrown.\n+   * <p>\n+   * If the {@code iterator} implements {@link Resource} it will be {@link Resource#close() closed}\n+   * in a {@code finally} block after the single item has been retrieved, or failed to be retrieved.\n+   *\n+   * @param <T>      the type of elements in {@code iterator}.\n+   * @param iterator the {@link Iterator} to get elements from.\n+   * @return the single element in {@code iterator}, or {@code null} if no\n+   * element found.\n+   * @throws NoSuchElementException if more than one element was found.\n+   */\n+  public static <T> T singleOrNull(Iterator<T> iterator)\n+  {\n+    return single(iterator, null);\n+  }\n+\n+  /**\n+   * Returns the given iterator's single element. If there are no elements\n+   * or more than one element in the iterator a {@link NoSuchElementException}\n+   * will be thrown.\n+   * <p>\n+   * If the {@code iterator} implements {@link Resource} it will be {@link Resource#close() closed}\n+   * in a {@code finally} block after the single item has been retrieved, or failed to be retrieved.\n+   *\n+   * @param <T>      the type of elements in {@code iterator}.\n+   * @param iterator the {@link Iterator} to get elements from.\n+   * @return the single element in the {@code iterator}.\n+   * @throws NoSuchElementException if there isn't exactly one element.\n+   */\n+  public static <T> T single(Iterator<T> iterator)\n+  {\n+    return assertNotNull(iterator, singleOrNull(iterator));\n+  }\n+\n+  /**\n+   * Returns the iterator's n:th item from the end of the iteration.\n+   * If the iterator has got less than n-1 items in it\n+   * {@link NoSuchElementException} is thrown.\n+   *\n+   * @param <T>      the type of elements in {@code iterator}.\n+   * @param iterator the {@link Iterator} to get elements from.\n+   * @param n        the n:th item from the end to get.\n+   * @return the iterator's n:th item from the end of the iteration.\n+   * @throws NoSuchElementException if the iterator contains less than n-1 items.\n+   */\n+  public static <T> T fromEnd(Iterator<T> iterator, int n)\n+  {\n+    return assertNotNull(iterator, fromEndOrNull(iterator, n));\n+  }\n+\n+  /**\n+   * Returns the iterator's n:th item from the end of the iteration.\n+   * If the iterator has got less than n-1 items in it {@code null} is returned.\n+   *\n+   * @param <T>      the type of elements in {@code iterator}.\n+   * @param iterator the {@link Iterator} to get elements from.\n+   * @param n        the n:th item from the end to get.\n+   * @return the iterator's n:th item from the end of the iteration,\n+   * or {@code null} if the iterator doesn't contain that many items.\n+   */\n+  public static <T> T fromEndOrNull(Iterator<T> iterator, int n)\n+  {\n+    Deque<T> trail = new ArrayDeque<>(n);\n+    while (iterator.hasNext())\n+    {\n+      if (trail.size() > n)\n+      {\n+        trail.removeLast();\n+      }\n+      trail.addFirst(iterator.next());\n+    }\n+    return trail.size() == n + 1 ? trail.getLast() : null;\n+  }\n+\n+  /**\n+   * Iterates over the full iterators, and checks equality for each item in them. Note that this\n+   * will consume the iterators.\n+   *\n+   * @param first the first iterator\n+   * @param other the other iterator\n+   * @return {@code true} if all items are equal; otherwise\n+   */\n+  public static boolean iteratorsEqual(Iterator<?> first, Iterator<?> other)\n+  {\n+    while (true)\n+    {\n+      if (first.hasNext() && other.hasNext())\n+      {\n+        if (!first.next().equals(other.next()))\n         {\n-            throw new NoSuchElementException( \"No element found in \" + iterator );\n+          return false;\n         }\n-        return result;\n-    }\n-\n-    /**\n-     * Returns the given iterator's single element or {@code itemIfNone} if no\n-     * element found. If there is more than one element in the iterator a\n-     * {@link NoSuchElementException} will be thrown.\n-     *\n-     * If the {@code iterator} implements {@link Resource} it will be {@link Resource#close() closed}\n-     * in a {@code finally} block after the single item has been retrieved, or failed to be retrieved.\n-     *\n-     * @param <T> the type of elements in {@code iterator}.\n-     * @param iterator the {@link Iterator} to get elements from.\n-     * @param itemIfNone item to use if none is found\n-     * @return the single element in {@code iterator}, or {@code itemIfNone} if no\n-     * element found.\n-     * @throws NoSuchElementException if more than one element was found.\n-     */\n-    public static <T> T single( Iterator<T> iterator, T itemIfNone )\n-    {\n+      } else\n+      {\n+        return first.hasNext() == other.hasNext();\n+      }\n+    }\n+  }\n+\n+  private static <T> T assertNotNull(Iterator<T> iterator, T result)\n+  {\n+    if (result == null)\n+    {\n+      throw new NoSuchElementException(\"No element found in \" + iterator);\n+    }\n+    return result;\n+  }\n+\n+  /**\n+   * Returns the given iterator's single element or {@code itemIfNone} if no\n+   * element found. If there is more than one element in the iterator a\n+   * {@link NoSuchElementException} will be thrown.\n+   * <p>\n+   * If the {@code iterator} implements {@link Resource} it will be {@link Resource#close() closed}\n+   * in a {@code finally} block after the single item has been retrieved, or failed to be retrieved.\n+   *\n+   * @param <T>        the type of elements in {@code iterator}.\n+   * @param iterator   the {@link Iterator} to get elements from.\n+   * @param itemIfNone item to use if none is found\n+   * @return the single element in {@code iterator}, or {@code itemIfNone} if no\n+   * element found.\n+   * @throws NoSuchElementException if more than one element was found.\n+   */\n+  public static <T> T single(Iterator<T> iterator, T itemIfNone)\n+  {\n+    try\n+    {\n+      T result = iterator.hasNext() ? iterator.next() : itemIfNone;\n+      if (iterator.hasNext())\n+      {\n+        throw new NoSuchElementException(\"More than one element in \" + iterator + \". First element is '\"\n+            + result + \"' and the second element is '\" + iterator.next() + \"'\");\n+      }\n+      return result;\n+    } finally\n+    {\n+      if (iterator instanceof Resource)\n+      {\n+        ((Resource) iterator).close();\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Adds all the items in {@code iterator} to {@code collection}.\n+   *\n+   * @param <C>        the type of {@link Collection} to add to items to.\n+   * @param <T>        the type of items in the collection and iterator.\n+   * @param iterator   the {@link Iterator} to grab the items from.\n+   * @param collection the {@link Collection} to add the items to.\n+   * @return the {@code collection} which was passed in, now filled\n+   * with the items from {@code iterator}.\n+   */\n+  public static <C extends Collection<T>, T> C addToCollection(Iterator<T> iterator,\n+                                                               C collection)\n+  {\n+    while (iterator.hasNext())\n+    {\n+      collection.add(iterator.next());\n+    }\n+    return collection;\n+  }\n+\n+  /**\n+   * Adds all the items in {@code iterator} to {@code collection}.\n+   *\n+   * @param <C>        the type of {@link Collection} to add to items to.\n+   * @param <T>        the type of items in the collection and iterator.\n+   * @param iterator   the {@link Iterator} to grab the items from.\n+   * @param collection the {@link Collection} to add the items to.\n+   * @return the {@code collection} which was passed in, now filled\n+   * with the items from {@code iterator}.\n+   */\n+  public static <C extends Collection<T>, T> C addToCollectionUnique(Iterator<T> iterator,\n+                                                                     C collection)\n+  {\n+    while (iterator.hasNext())\n+    {\n+      addUnique(collection, iterator.next());\n+    }\n+    return collection;\n+  }\n+\n+  private static <T, C extends Collection<T>> void addUnique(C collection, T item)\n+  {\n+    if (!collection.add(item))\n+    {\n+      throw new IllegalStateException(\"Encountered an already added item:\" + item +\n+          \" when adding items uniquely to a collection:\" + collection);\n+    }\n+  }\n+\n+  /**\n+   * Adds all the items in {@code iterator} to {@code collection}.\n+   *\n+   * @param <C>        the type of {@link Collection} to add to items to.\n+   * @param <T>        the type of items in the collection and iterator.\n+   * @param iterable   the {@link Iterator} to grab the items from.\n+   * @param collection the {@link Collection} to add the items to.\n+   * @return the {@code collection} which was passed in, now filled\n+   * with the items from {@code iterator}.\n+   */\n+  public static <C extends Collection<T>, T> C addToCollectionUnique(Iterable<T> iterable,\n+                                                                     C collection)\n+  {\n+    return addToCollectionUnique(iterable.iterator(), collection);\n+  }\n+\n+  /**\n+   * Convenience method for looping over an {@link Iterator}. Converts the\n+   * {@link Iterator} to an {@link Iterable} by wrapping it in an\n+   * {@link Iterable} that returns the {@link Iterator}. It breaks the\n+   * contract of {@link Iterable} in that it returns the supplied iterator\n+   * instance for each call to {@code iterator()} on the returned\n+   * {@link Iterable} instance. This method exists to make it easy to use an\n+   * {@link Iterator} in a for-loop.\n+   *\n+   * @param <T>      the type of items in the iterator.\n+   * @param iterator the iterator to expose as an {@link Iterable}.\n+   * @return the supplied iterator posing as an {@link Iterable}.\n+   */\n+  public static <T> Iterable<T> loop(final Iterator<T> iterator)\n+  {\n+    return () -> iterator;\n+  }\n+\n+  /**\n+   * Exposes {@code iterator} as an {@link Iterable}. It breaks the contract\n+   * of {@link Iterable} in that it returns the supplied iterator instance for\n+   * each call to {@code iterator()} on the returned {@link Iterable}\n+   * instance. This method mostly exists to make it easy to use an\n+   * {@link Iterator} in a for-loop.\n+   *\n+   * @param <T>      the type of items in the iterator.\n+   * @param iterator the iterator to expose as an {@link Iterable}.\n+   * @return the supplied iterator posing as an {@link Iterable}.\n+   */\n+  //@Deprecated * @deprecated use {@link #loop(Iterator) the loop method} instead.\n+  public static <T> Iterable<T> asIterable(final Iterator<T> iterator)\n+  {\n+    return loop(iterator);\n+  }\n+\n+  public static <T> long count(Iterator<T> iterator)\n+  {\n+    return count(iterator, Predicates.alwaysTrue());\n+  }\n+\n+  /**\n+   * Counts the number of filtered in the {@code iterator} by looping\n+   * through it.\n+   *\n+   * @param <T>      the type of items in the iterator.\n+   * @param iterator the {@link Iterator} to count items in.\n+   * @param filter   the filter to test items against\n+   * @return the number of filtered items found in {@code iterator}.\n+   */\n+  public static <T> long count(Iterator<T> iterator, Predicate<T> filter)\n+  {\n+    long result = 0;\n+    while (iterator.hasNext())\n+    {\n+      if (filter.test(iterator.next()))\n+      {\n+        result++;\n+      }\n+    }\n+    return result;\n+  }\n+\n+  public static <T> Collection<T> asCollection(Iterator<T> iterable)\n+  {\n+    return addToCollection(iterable, new ArrayList<>());\n+  }\n+\n+  public static <T> List<T> asList(Iterator<T> iterator)\n+  {\n+    return addToCollection(iterator, new ArrayList<>());\n+  }\n+\n+  public static <T, EX extends Exception> List<T> asList(RawIterator<T, EX> iterator) throws EX\n+  {\n+    List<T> out = new ArrayList<>();\n+    while (iterator.hasNext())\n+    {\n+      out.add(iterator.next());\n+    }\n+    return out;\n+  }\n+\n+  public static <T> Set<T> asSet(Iterator<T> iterator)\n+  {\n+    return addToCollection(iterator, new HashSet<>());\n+  }\n+\n+  /**\n+   * Creates a {@link Set} from an array of items.an\n+   *\n+   * @param items the items to add to the set.\n+   * @param <T>   the type of the items\n+   * @return the {@link Set} containing the items.\n+   */\n+  @SafeVarargs\n+  public static <T> Set<T> asSet(T... items)\n+  {\n+    return new HashSet<>(Arrays.asList(items));\n+  }\n+\n+  /**\n+   * Alias for asSet()\n+   *\n+   * @param items the items to add to the set.\n+   * @param <T>   the type of the items\n+   * @return the {@link Set} containing the items.\n+   */\n+  @SafeVarargs\n+  public static <T> Set<T> set(T... items)\n+  {\n+    return asSet(items);\n+  }\n+\n+  /**\n+   * Creates a {@link Set} from an array of items.\n+   *\n+   * @param items the items to add to the set.\n+   * @param <T>   the type of the items\n+   * @return the {@link Set} containing the items.\n+   */\n+  @SafeVarargs\n+  public static <T> Set<T> asUniqueSet(T... items)\n+  {\n+    HashSet<T> set = new HashSet<>();\n+    for (T item : items)\n+    {\n+      addUnique(set, item);\n+    }\n+    return set;\n+  }\n+\n+  /**\n+   * Creates a {@link Set} from an array of items.\n+   *\n+   * @param items the items to add to the set.\n+   * @param <T>   the type of the items\n+   * @return the {@link Set} containing the items.\n+   */\n+  public static <T> Set<T> asUniqueSet(Iterator<T> items)\n+  {\n+    HashSet<T> set = new HashSet<>();\n+    while (items.hasNext())\n+    {\n+      addUnique(set, items.next());\n+    }\n+    return set;\n+  }\n+\n+  public static Iterator<Long> asIterator(final long... array)\n+  {\n+    return new PrefetchingIterator<Long>()\n+    {\n+      private int index;\n+\n+      @Override\n+      protected Long fetchNextOrNull()\n+      {\n         try\n         {\n-            T result = iterator.hasNext() ? iterator.next() : itemIfNone;\n-            if ( iterator.hasNext() )\n-            {\n-                throw new NoSuchElementException( \"More than one element in \" + iterator + \". First element is '\"\n-                        + result + \"' and the second element is '\" + iterator.next() + \"'\" );\n-            }\n-            return result;\n-        }\n-        finally\n+          return index < array.length ? array[index] : null;\n+        } finally\n         {\n-            if ( iterator instanceof Resource )\n-            {\n-                ((Resource) iterator).close();\n-            }\n+          index++;\n         }\n-    }\n+      }\n+    };\n+  }\n \n-    /**\n-     * Adds all the items in {@code iterator} to {@code collection}.\n-     * @param <C> the type of {@link Collection} to add to items to.\n-     * @param <T> the type of items in the collection and iterator.\n-     * @param iterator the {@link Iterator} to grab the items from.\n-     * @param collection the {@link Collection} to add the items to.\n-     * @return the {@code collection} which was passed in, now filled\n-     * with the items from {@code iterator}.\n-     */\n-    public static <C extends Collection<T>,T> C addToCollection( Iterator<T> iterator,\n-            C collection )\n+  public static Iterator<Integer> asIterator(final int... array)\n+  {\n+    return new PrefetchingIterator<Integer>()\n     {\n-        while ( iterator.hasNext() )\n-        {\n-            collection.add( iterator.next() );\n-        }\n-        return collection;\n-    }\n+      private int index;\n \n-    /**\n-     * Adds all the items in {@code iterator} to {@code collection}.\n-     * @param <C> the type of {@link Collection} to add to items to.\n-     * @param <T> the type of items in the collection and iterator.\n-     * @param iterator the {@link Iterator} to grab the items from.\n-     * @param collection the {@link Collection} to add the items to.\n-     * @return the {@code collection} which was passed in, now filled\n-     * with the items from {@code iterator}.\n-     */\n-    public static <C extends Collection<T>,T> C addToCollectionUnique( Iterator<T> iterator,\n-            C collection )\n-    {\n-        while ( iterator.hasNext() )\n-        {\n-            addUnique( collection, iterator.next() );\n-        }\n-        return collection;\n-    }\n-\n-    private static <T, C extends Collection<T>> void addUnique( C collection, T item )\n-    {\n-        if ( !collection.add( item ) )\n-        {\n-            throw new IllegalStateException( \"Encountered an already added item:\" + item +\n-                    \" when adding items uniquely to a collection:\" + collection );\n-        }\n-    }\n-\n-    /**\n-     * Adds all the items in {@code iterator} to {@code collection}.\n-     * @param <C> the type of {@link Collection} to add to items to.\n-     * @param <T> the type of items in the collection and iterator.\n-     * @param iterable the {@link Iterator} to grab the items from.\n-     * @param collection the {@link Collection} to add the items to.\n-     * @return the {@code collection} which was passed in, now filled\n-     * with the items from {@code iterator}.\n-     */\n-    public static <C extends Collection<T>,T> C addToCollectionUnique( Iterable<T> iterable,\n-            C collection )\n-    {\n-        return addToCollectionUnique( iterable.iterator(), collection );\n-    }\n-\n-    /**\n-     * Convenience method for looping over an {@link Iterator}. Converts the\n-     * {@link Iterator} to an {@link Iterable} by wrapping it in an\n-     * {@link Iterable} that returns the {@link Iterator}. It breaks the\n-     * contract of {@link Iterable} in that it returns the supplied iterator\n-     * instance for each call to {@code iterator()} on the returned\n-     * {@link Iterable} instance. This method exists to make it easy to use an\n-     * {@link Iterator} in a for-loop.\n-     *\n-     * @param <T> the type of items in the iterator.\n-     * @param iterator the iterator to expose as an {@link Iterable}.\n-     * @return the supplied iterator posing as an {@link Iterable}.\n-     */\n-    public static <T> Iterable<T> loop( final Iterator<T> iterator )\n-    {\n-        return () -> iterator;\n-    }\n-\n-    /**\n-     * Exposes {@code iterator} as an {@link Iterable}. It breaks the contract\n-     * of {@link Iterable} in that it returns the supplied iterator instance for\n-     * each call to {@code iterator()} on the returned {@link Iterable}\n-     * instance. This method mostly exists to make it easy to use an\n-     * {@link Iterator} in a for-loop.\n-     *\n-     * @param <T> the type of items in the iterator.\n-     * @param iterator the iterator to expose as an {@link Iterable}.\n-     * @return the supplied iterator posing as an {@link Iterable}.\n-     */\n-    //@Deprecated * @deprecated use {@link #loop(Iterator) the loop method} instead.\n-    public static <T> Iterable<T> asIterable( final Iterator<T> iterator )\n-    {\n-        return loop( iterator );\n-    }\n-\n-    public static <T> long count( Iterator<T> iterator )\n-    {\n-        return count( iterator, Predicates.alwaysTrue() );\n-    }\n-\n-    /**\n-     * Counts the number of filtered in the {@code iterator} by looping\n-     * through it.\n-     * @param <T> the type of items in the iterator.\n-     * @param iterator the {@link Iterator} to count items in.\n-     * @param filter the filter to test items against\n-     * @return the number of filtered items found in {@code iterator}.\n-     */\n-    public static <T> long count( Iterator<T> iterator, Predicate<T> filter )\n-    {\n-        long result = 0;\n-        while ( iterator.hasNext() )\n-        {\n-            if ( filter.test( iterator.next() ) )\n-            {\n-                result++;\n-            }\n-        }\n-        return result;\n-    }\n-\n-    public static <T> Collection<T> asCollection( Iterator<T> iterable )\n-    {\n-        return addToCollection( iterable, new ArrayList<>() );\n-    }\n-\n-    public static <T> List<T> asList( Iterator<T> iterator )\n-    {\n-        return addToCollection( iterator, new ArrayList<>() );\n-    }\n-\n-    public static <T, EX extends Exception> List<T> asList( RawIterator<T, EX> iterator ) throws EX\n-    {\n-        List<T> out = new ArrayList<>();\n-        while ( iterator.hasNext() )\n-        {\n-            out.add( iterator.next() );\n-        }\n-        return out;\n-    }\n-\n-    public static <T> Set<T> asSet( Iterator<T> iterator )\n-    {\n-        return addToCollection( iterator, new HashSet<>() );\n-    }\n-\n-    /**\n-     * Creates a {@link Set} from an array of items.an\n-     *\n-     * @param items the items to add to the set.\n-     * @param <T> the type of the items\n-     * @return the {@link Set} containing the items.\n-     */\n-    @SafeVarargs\n-    public static <T> Set<T> asSet( T... items )\n-    {\n-        return new HashSet<>( Arrays.asList( items ) );\n-    }\n-\n-    /**\n-     * Alias for asSet()\n-     *\n-     * @param items the items to add to the set.\n-     * @param <T> the type of the items\n-     * @return the {@link Set} containing the items.\n-     */\n-    @SafeVarargs\n-    public static <T> Set<T> set( T... items )\n-    {\n-        return asSet( items );\n-    }\n-\n-    /**\n-     * Creates a {@link Set} from an array of items.\n-     *\n-     * @param items the items to add to the set.\n-     * @param <T> the type of the items\n-     * @return the {@link Set} containing the items.\n-     */\n-    @SafeVarargs\n-    public static <T> Set<T> asUniqueSet( T... items )\n-    {\n-        HashSet<T> set = new HashSet<>();\n-        for ( T item : items )\n+      @Override\n+      protected Integer fetchNextOrNull()\n+      {\n+        try\n         {\n-            addUnique( set, item );\n-        }\n-        return set;\n-    }\n-\n-    /**\n-     * Creates a {@link Set} from an array of items.\n-     *\n-     * @param items the items to add to the set.\n-     * @param <T> the type of the items\n-     * @return the {@link Set} containing the items.\n-     */\n-    public static <T> Set<T> asUniqueSet( Iterator<T> items )\n-    {\n-        HashSet<T> set = new HashSet<>();\n-        while ( items.hasNext() )\n+          return index < array.length ? array[index] : null;\n+        } finally\n         {\n-            addUnique( set, items.next() );\n+          index++;\n         }\n-        return set;\n-    }\n+      }\n+    };\n+  }\n \n-    public static Iterator<Long> asIterator( final long... array )\n+  @SafeVarargs\n+  public static <T> Iterator<T> asIterator(final int maxItems, final T... array)\n+  {\n+    return new PrefetchingIterator<T>()\n     {\n-        return new PrefetchingIterator<Long>()\n-        {\n-            private int index;\n-\n-            @Override\n-            protected Long fetchNextOrNull()\n-            {\n-                try\n-                {\n-                    return index < array.length ? array[index] : null;\n-                }\n-                finally\n-                {\n-                    index++;\n-                }\n-            }\n-        };\n-    }\n-\n-    public static Iterator<Integer> asIterator( final int... array )\n-    {\n-        return new PrefetchingIterator<Integer>()\n-        {\n-            private int index;\n-\n-            @Override\n-            protected Integer fetchNextOrNull()\n-            {\n-                try\n-                {\n-                    return index < array.length ? array[index] : null;\n-                }\n-                finally\n-                {\n-                    index++;\n-                }\n-            }\n-        };\n-    }\n+      private int index;\n \n-    @SafeVarargs\n-    public static <T> Iterator<T> asIterator( final int maxItems, final T... array )\n-    {\n-        return new PrefetchingIterator<T>()\n+      @Override\n+      protected T fetchNextOrNull()\n+      {\n+        try\n         {\n-            private int index;\n-\n-            @Override\n-            protected T fetchNextOrNull()\n-            {\n-                try\n-                {\n-                    return index < array.length && index < maxItems ? array[index] : null;\n-                }\n-                finally\n-                {\n-                    index++;\n-                }\n-            }\n-        };\n-    }\n-\n-    public static <T> Iterator<T> iterator( final T item )\n-    {\n-        if ( item == null )\n+          return index < array.length && index < maxItems ? array[index] : null;\n+        } finally\n         {\n-            return emptyIterator();\n+          index++;\n         }\n+      }\n+    };\n+  }\n \n-        return new Iterator<T>()\n-        {\n-            T myItem = item;\n-\n-            @Override\n-            public boolean hasNext()\n-            {\n-                return myItem != null;\n-            }\n-\n-            @Override\n-            public T next()\n-            {\n-                if ( !hasNext() )\n-                {\n-                    throw new NoSuchElementException();\n-                }\n-                T toReturn = myItem;\n-                myItem = null;\n-                return toReturn;\n-            }\n-\n-            @Override\n-            public void remove()\n-            {\n-                throw new UnsupportedOperationException();\n-            }\n-        };\n-    }\n-\n-    @SafeVarargs\n-    public static <T> Iterator<T> iterator( T ... items )\n+  public static <T> Iterator<T> iterator(final T item)\n+  {\n+    if (item == null)\n     {\n-        return asIterator( items.length, items );\n+      return emptyIterator();\n     }\n \n-    @SafeVarargs\n-    public static <T> Iterator<T> iterator( int maxItems, T ... items )\n+    return new Iterator<T>()\n     {\n-        return asIterator( maxItems, items );\n-    }\n+      T myItem = item;\n \n-    @SuppressWarnings( \"unchecked\" )\n-    public static <T> ResourceIterator<T> emptyResourceIterator()\n-    {\n-        return (ResourceIterator<T>) EmptyResourceIterator.EMPTY_RESOURCE_ITERATOR;\n-    }\n+      @Override\n+      public boolean hasNext()\n+      {\n+        return myItem != null;\n+      }\n \n-    public static <T> boolean contains( Iterator<T> iterator, T item )\n-    {\n-        try\n+      @Override\n+      public T next()\n+      {\n+        if (!hasNext())\n         {\n-            for ( T element : loop( iterator ) )\n-            {\n-                if ( item == null ? element == null : item.equals( element ) )\n-                {\n-                    return true;\n-                }\n-            }\n-            return false;\n+          throw new NoSuchElementException();\n         }\n-        finally\n+        T toReturn = myItem;\n+        myItem = null;\n+        return toReturn;\n+      }\n+\n+      @Override\n+      public void remove()\n+      {\n+        throw new UnsupportedOperationException();\n+      }\n+    };\n+  }\n+\n+  @SafeVarargs\n+  public static <T> Iterator<T> iterator(T... items)\n+  {\n+    return asIterator(items.length, items);\n+  }\n+\n+  @SafeVarargs\n+  public static <T> Iterator<T> iterator(int maxItems, T... items)\n+  {\n+    return asIterator(maxItems, items);\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public static <T> ResourceIterator<T> emptyResourceIterator()\n+  {\n+    return (ResourceIterator<T>) EmptyResourceIterator.EMPTY_RESOURCE_ITERATOR;\n+  }\n+\n+  public static <T> boolean contains(Iterator<T> iterator, T item)\n+  {\n+    try\n+    {\n+      for (T element : loop(iterator))\n+      {\n+        if (item == null ? element == null : item.equals(element))\n         {\n-            if ( iterator instanceof ResourceIterator<?> )\n-            {\n-                ((ResourceIterator<?>) iterator).close();\n-            }\n+          return true;\n         }\n-    }\n-\n-    public static <T> ResourceIterator<T> asResourceIterator( final Iterator<T> iterator )\n+      }\n+      return false;\n+    } finally\n     {\n-        if ( iterator instanceof ResourceIterator<?> )\n-        {\n-            return (ResourceIterator<T>) iterator;\n-        }\n-        return new WrappingResourceIterator<>( iterator );\n+      if (iterator instanceof ResourceIterator<?>)\n+      {\n+        ((ResourceIterator<?>) iterator).close();\n+      }\n     }\n+  }\n \n-    public static <T> ResourceIterator<T> resourceIterator( final Iterator<T> iterator, final Resource resource )\n+  public static <T> ResourceIterator<T> asResourceIterator(final Iterator<T> iterator)\n+  {\n+    if (iterator instanceof ResourceIterator<?>)\n     {\n-        return new PrefetchingResourceIterator<T>()\n-        {\n-            @Override\n-            public void close()\n-            {\n-                resource.close();\n-            }\n-\n-            @Override\n-            protected T fetchNextOrNull()\n-            {\n-                return iterator.hasNext() ? iterator.next() : null;\n-            }\n-        };\n+      return (ResourceIterator<T>) iterator;\n     }\n+    return new WrappingResourceIterator<>(iterator);\n+  }\n \n-    @SafeVarargs\n-    public static <T> T[] array( T... items )\n+  public static <T> ResourceIterator<T> resourceIterator(final Iterator<T> iterator, final Resource resource)\n+  {\n+    return new PrefetchingResourceIterator<T>()\n     {\n-        return items;\n-    }\n+      @Override\n+      public void close()\n+      {\n+        resource.close();\n+      }\n \n-    public static <X> Iterator<X> filter( Predicate<? super X> specification, Iterator<X> i )\n-    {\n-        return new FilterIterable.FilterIterator<>( i, specification );\n-    }\n-\n-    public static <FROM, TO> Iterator<TO> map( Function<? super FROM, ? extends TO> function, Iterator<FROM> from )\n-    {\n-        return new MapIterable.MapIterator<>( from, function );\n-    }\n-\n-    public static <FROM, TO, EX extends Exception> RawIterator<TO, EX> map(\n-            ThrowingFunction<? super FROM, ? extends TO, EX> function, RawIterator<FROM, EX> from )\n-    {\n-        return new RawMapIterator<>( from, function );\n-    }\n-\n-    public static <T, EX extends Exception> RawIterator<T, EX> asRawIterator( Iterator<T> iter )\n-    {\n-        return new RawIterator<T,EX>()\n+      @Override\n+      protected T fetchNextOrNull()\n+      {\n+        return iterator.hasNext() ? iterator.next() : null;\n+      }\n+    };\n+  }\n+\n+  @SafeVarargs\n+  public static <T> T[] array(T... items)\n+  {\n+    return items;\n+  }\n+\n+  public static <X> Iterator<X> filter(Predicate<? super X> specification, Iterator<X> i)\n+  {\n+    return new FilterIterable.FilterIterator<>(i, specification);\n+  }\n+\n+  public static <FROM, TO> Iterator<TO> map(Function<? super FROM, ? extends TO> function, Iterator<FROM> from)\n+  {\n+    return new MapIterable.MapIterator<>(from, function);\n+  }\n+\n+  public static <FROM, TO, EX extends Exception> RawIterator<TO, EX> map(\n+      ThrowingFunction<? super FROM, ? extends TO, EX> function, RawIterator<FROM, EX> from)\n+  {\n+    return new RawMapIterator<>(from, function);\n+  }\n+\n+  public static <T, EX extends Exception> RawIterator<T, EX> asRawIterator(Iterator<T> iter)\n+  {\n+    return new RawIterator<T, EX>()\n+    {\n+      @Override\n+      public boolean hasNext()\n+      {\n+        return iter.hasNext();\n+      }\n+\n+      @Override\n+      public T next()\n+      {\n+        return iter.next();\n+      }\n+    };\n+  }\n+\n+  public static <T, EX extends Exception> RawIterator<T, EX> asRawIterator(Stream<T> stream)\n+  {\n+    return asRawIterator(stream.iterator());\n+  }\n+\n+  public static <FROM, TO> Iterator<TO> flatMap(Function<? super FROM, ? extends Iterator<TO>> function, Iterator<FROM> from)\n+  {\n+    return new CombiningIterator<>(map(function, from));\n+  }\n+\n+  @SafeVarargs\n+  @SuppressWarnings(\"unchecked\")\n+  public static <T> Iterator<T> concat(Iterator<? extends T>... iterators)\n+  {\n+    return concat(Arrays.asList((Iterator<T>[]) iterators).iterator());\n+  }\n+\n+  public static <T> ResourceIterator<T> concatResourceIterators(Iterator<ResourceIterator<T>> iterators)\n+  {\n+    return new CombiningResourceIterator<>(iterators);\n+  }\n+\n+  public static <T> Iterator<T> concat(Iterator<Iterator<T>> iterators)\n+  {\n+    return new CombiningIterator<>(iterators);\n+  }\n+\n+  public static <T> ResourceIterable<T> asResourceIterable(final ResourceIterator<T> it)\n+  {\n+    return () -> it;\n+  }\n+\n+  public static String join(String joinString, Iterator<?> iter)\n+  {\n+    StringBuilder sb = new StringBuilder();\n+    while (iter.hasNext())\n+    {\n+      sb.append(iter.next().toString());\n+      if (iter.hasNext())\n+      {\n+        sb.append(joinString);\n+      }\n+    }\n+    return sb.toString();\n+  }\n+\n+  public static <T> PrefetchingIterator<T> prefetching(Iterator<T> iterator)\n+  {\n+    return iterator instanceof PrefetchingIterator ? (PrefetchingIterator<T>) iterator :\n+        new PrefetchingIterator<T>()\n         {\n-            @Override\n-            public boolean hasNext()\n-            {\n-                return iter.hasNext();\n-            }\n-\n-            @Override\n-            public T next()\n-            {\n-                return iter.next();\n-            }\n+          @Override\n+          protected T fetchNextOrNull()\n+          {\n+            return iterator.hasNext() ? iterator.next() : null;\n+          }\n         };\n-    }\n-\n-    public static <T, EX extends Exception> RawIterator<T, EX> asRawIterator( Stream<T> stream )\n-    {\n-        return asRawIterator( stream.iterator() );\n-    }\n-\n-    public static <FROM, TO> Iterator<TO> flatMap( Function<? super FROM, ? extends Iterator<TO>> function, Iterator<FROM> from )\n-    {\n-        return new CombiningIterator<>( map(function, from) );\n-    }\n-\n-    @SafeVarargs\n-    @SuppressWarnings( \"unchecked\" )\n-    public static <T> Iterator<T> concat( Iterator<? extends T>... iterators )\n-    {\n-        return concat( Arrays.asList( (Iterator<T>[]) iterators ).iterator() );\n-    }\n-\n-    public static <T> ResourceIterator<T> concatResourceIterators( Iterator<ResourceIterator<T>> iterators )\n-    {\n-        return new CombiningResourceIterator<>( iterators );\n-    }\n-\n-    public static <T> Iterator<T> concat( Iterator<Iterator<T>> iterators )\n-    {\n-        return new CombiningIterator<>( iterators );\n-    }\n-\n-    public static <T> ResourceIterable<T> asResourceIterable( final ResourceIterator<T> it )\n-    {\n-        return () -> it;\n-    }\n-\n-    public static String join( String joinString, Iterator<?> iter )\n-    {\n-        StringBuilder sb = new StringBuilder();\n-        while ( iter.hasNext() )\n-        {\n-            sb.append( iter.next().toString() );\n-            if ( iter.hasNext() )\n-            {\n-                sb.append( joinString );\n-            }\n-        }\n-        return sb.toString();\n-    }\n-\n-    public static <T> PrefetchingIterator<T> prefetching( Iterator<T> iterator )\n-    {\n-        return iterator instanceof PrefetchingIterator ? (PrefetchingIterator<T>) iterator :\n-               new PrefetchingIterator<T>()\n-               {\n-                   @Override\n-                   protected T fetchNextOrNull()\n-                   {\n-                       return iterator.hasNext() ? iterator.next() : null;\n-                   }\n-               };\n-    }\n-\n-    /**\n-     * Create a stream from the given iterator.\n-     * <p>\n-     * <b>Note:</b> returned stream needs to be closed via {@link Stream#close()} if the given iterator implements\n-     * {@link Resource}.\n-     *\n-     * @param iterator the iterator to convert to stream\n-     * @param <T> the type of elements in the given iterator\n-     * @return stream over the iterator elements\n-     * @throws NullPointerException when the given stream is {@code null}\n-     */\n-    public static <T> Stream<T> stream( Iterator<T> iterator )\n-    {\n-        return stream( iterator, 0 );\n-    }\n-\n-    /**\n-     * Create a stream from the given iterator with given characteristics.\n-     * <p>\n-     * <b>Note:</b> returned stream needs to be closed via {@link Stream#close()} if the given iterator implements\n-     * {@link Resource}.\n-     *\n-     * @param iterator the iterator to convert to stream\n-     * @param characteristics the logical OR of characteristics for the underlying {@link Spliterator}\n-     * @param <T> the type of elements in the given iterator\n-     * @return stream over the iterator elements\n-     * @throws NullPointerException when the given iterator is {@code null}\n-     */\n-    public static <T> Stream<T> stream( Iterator<T> iterator, int characteristics )\n-    {\n-        Objects.requireNonNull( iterator );\n-        Spliterator<T> spliterator = Spliterators.spliteratorUnknownSize( iterator, characteristics );\n-        Stream<T> stream = StreamSupport.stream( spliterator, false );\n-        if ( iterator instanceof Resource )\n-        {\n-            return stream.onClose( ((Resource) iterator)::close );\n-        }\n-        return stream;\n-    }\n-\n-    private static class EmptyResourceIterator<E> implements ResourceIterator<E>\n-    {\n-        private static final ResourceIterator<Object> EMPTY_RESOURCE_ITERATOR = new Iterators.EmptyResourceIterator<>();\n-\n-        @Override\n-        public void close()\n-        {\n-        }\n-\n-        @Override\n-        public boolean hasNext()\n-        {\n-            return false;\n-        }\n-\n-        @Override\n-        public E next()\n-        {\n-            throw new NoSuchElementException();\n-        }\n-    }\n+  }\n+\n+  /**\n+   * Create a stream from the given iterator.\n+   * <p>\n+   * <b>Note:</b> returned stream needs to be closed via {@link Stream#close()} if the given iterator implements\n+   * {@link Resource}.\n+   *\n+   * @param iterator the iterator to convert to stream\n+   * @param <T>      the type of elements in the given iterator\n+   * @return stream over the iterator elements\n+   * @throws NullPointerException when the given stream is {@code null}\n+   */\n+  public static <T> Stream<T> stream(Iterator<T> iterator)\n+  {\n+    return stream(iterator, 0);\n+  }\n+\n+  /**\n+   * Create a stream from the given iterator with given characteristics.\n+   * <p>\n+   * <b>Note:</b> returned stream needs to be closed via {@link Stream#close()} if the given iterator implements\n+   * {@link Resource}.\n+   *\n+   * @param iterator        the iterator to convert to stream\n+   * @param characteristics the logical OR of characteristics for the underlying {@link Spliterator}\n+   * @param <T>             the type of elements in the given iterator\n+   * @return stream over the iterator elements\n+   * @throws NullPointerException when the given iterator is {@code null}\n+   */\n+  public static <T> Stream<T> stream(Iterator<T> iterator, int characteristics)\n+  {\n+    Objects.requireNonNull(iterator);\n+    Spliterator<T> spliterator = Spliterators.spliteratorUnknownSize(iterator, characteristics);\n+    Stream<T> stream = StreamSupport.stream(spliterator, false);\n+    if (iterator instanceof Resource)\n+    {\n+      return stream.onClose(((Resource) iterator)::close);\n+    }\n+    return stream;\n+  }\n+\n+  private static class EmptyResourceIterator<E> implements ResourceIterator<E>\n+  {\n+    private static final ResourceIterator<Object> EMPTY_RESOURCE_ITERATOR = new Iterators.EmptyResourceIterator<>();\n+\n+    @Override\n+    public void close()\n+    {\n+    }\n+\n+    @Override\n+    public boolean hasNext()\n+    {\n+      return false;\n+    }\n+\n+    @Override\n+    public E next()\n+    {\n+      throw new NoSuchElementException();\n+    }\n+  }\n }\n",
            "diff_size": 1101
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "258",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 183).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "670",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3764/Iterators.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3764/Iterators.java\nindex ec05b669bda..dd2a9eef1f0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3764/Iterators.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3764/Iterators.java\n@@ -101,7 +101,8 @@ public final class Iterators\n         {\n             result = iterator.next();\n         }\n-        return result;\n+\n+return result;\n     }\n \n     /**\n@@ -192,7 +193,8 @@ public final class Iterators\n             }\n             trail.addFirst( iterator.next() );\n         }\n-        return trail.size() == n + 1 ? trail.getLast() : null;\n+\n+return trail.size() == n + 1 ? trail.getLast() : null;\n     }\n \n     /**\n@@ -227,7 +229,8 @@ public final class Iterators\n         {\n             throw new NoSuchElementException( \"No element found in \" + iterator );\n         }\n-        return result;\n+\n+return result;\n     }\n \n     /**\n@@ -252,10 +255,10 @@ public final class Iterators\n             T result = iterator.hasNext() ? iterator.next() : itemIfNone;\n             if ( iterator.hasNext() )\n             {\n-                throw new NoSuchElementException( \"More than one element in \" + iterator + \". First element is '\"\n-                        + result + \"' and the second element is '\" + iterator.next() + \"'\" );\n+                throw new NoSuchElementException( \"More than one element in \" + iterator + \". First element is '\" + result + \"' and the second element is '\" + iterator.next() + \"'\" );\n             }\n-            return result;\n+\n+return result;\n         }\n         finally\n         {\n@@ -282,7 +285,8 @@ public final class Iterators\n         {\n             collection.add( iterator.next() );\n         }\n-        return collection;\n+\n+return collection;\n     }\n \n     /**\n@@ -301,16 +305,16 @@ public final class Iterators\n         {\n             addUnique( collection, iterator.next() );\n         }\n-        return collection;\n+\n+return collection;\n     }\n \n     private static <T, C extends Collection<T>> void addUnique( C collection, T item )\n     {\n         if ( !collection.add( item ) )\n         {\n-            throw new IllegalStateException( \"Encountered an already added item:\" + item +\n-                    \" when adding items uniquely to a collection:\" + collection );\n-        }\n+            throw new IllegalStateException( \"Encountered an already added item:\" + item + \" when adding items uniquely to a collection:\" + collection );\n+    }\n     }\n \n     /**\n@@ -399,14 +403,15 @@ public final class Iterators\n         return addToCollection( iterator, new ArrayList<>() );\n     }\n \n-    public static <T, EX extends Exception> List<T> asList( RawIterator<T, EX> iterator ) throws EX\n+    public static <T, EX extends Exception> List<T> asList( RawIterator<T,EX> iterator ) throws EX\n     {\n         List<T> out = new ArrayList<>();\n         while ( iterator.hasNext() )\n         {\n             out.add( iterator.next() );\n         }\n-        return out;\n+\n+return out;\n     }\n \n     public static <T> Set<T> asSet( Iterator<T> iterator )\n@@ -455,7 +460,8 @@ public final class Iterators\n         {\n             addUnique( set, item );\n         }\n-        return set;\n+\n+return set;\n     }\n \n     /**\n@@ -472,7 +478,8 @@ public final class Iterators\n         {\n             addUnique( set, items.next() );\n         }\n-        return set;\n+\n+return set;\n     }\n \n     public static Iterator<Long> asIterator( final long... array )\n@@ -563,7 +570,8 @@ public final class Iterators\n                 {\n                     throw new NoSuchElementException();\n                 }\n-                T toReturn = myItem;\n+\n+T toReturn = myItem;\n                 myItem = null;\n                 return toReturn;\n             }\n@@ -654,18 +662,17 @@ public final class Iterators\n         return new FilterIterable.FilterIterator<>( i, specification );\n     }\n \n-    public static <FROM, TO> Iterator<TO> map( Function<? super FROM, ? extends TO> function, Iterator<FROM> from )\n+    public static <FROM,TO> Iterator<TO> map( Function<? super FROM, ? extends TO> function, Iterator<FROM> from )\n     {\n         return new MapIterable.MapIterator<>( from, function );\n     }\n \n-    public static <FROM, TO, EX extends Exception> RawIterator<TO, EX> map(\n-            ThrowingFunction<? super FROM, ? extends TO, EX> function, RawIterator<FROM, EX> from )\n+    public static <FROM, TO, EX extends Exception> RawIterator<TO,EX> map( ThrowingFunction<? super FROM, ? extends TO, EX> function, RawIterator<FROM,EX> from )\n     {\n         return new RawMapIterator<>( from, function );\n     }\n \n-    public static <T, EX extends Exception> RawIterator<T, EX> asRawIterator( Iterator<T> iter )\n+    public static <T, EX extends Exception> RawIterator<T,EX> asRawIterator( Iterator<T> iter )\n     {\n         return new RawIterator<T,EX>()\n         {\n@@ -683,21 +690,21 @@ public final class Iterators\n         };\n     }\n \n-    public static <T, EX extends Exception> RawIterator<T, EX> asRawIterator( Stream<T> stream )\n+    public static <T, EX extends Exception> RawIterator<T,EX> asRawIterator( Stream<T> stream )\n     {\n         return asRawIterator( stream.iterator() );\n     }\n \n-    public static <FROM, TO> Iterator<TO> flatMap( Function<? super FROM, ? extends Iterator<TO>> function, Iterator<FROM> from )\n+    public static <FROM,TO> Iterator<TO> flatMap( Function<? super FROM, ? extends Iterator<TO>> function, Iterator<FROM> from )\n     {\n-        return new CombiningIterator<>( map(function, from) );\n+        return new CombiningIterator<>( map( function, from) );\n     }\n \n     @SafeVarargs\n     @SuppressWarnings( \"unchecked\" )\n     public static <T> Iterator<T> concat( Iterator<? extends T>... iterators )\n     {\n-        return concat( Arrays.asList( (Iterator<T>[]) iterators ).iterator() );\n+        return concat( Arrays.asList( (Iterator<T>[]) iterators).iterator() );\n     }\n \n     public static <T> ResourceIterator<T> concatResourceIterators( Iterator<ResourceIterator<T>> iterators )\n@@ -731,8 +738,7 @@ public final class Iterators\n \n     public static <T> PrefetchingIterator<T> prefetching( Iterator<T> iterator )\n     {\n-        return iterator instanceof PrefetchingIterator ? (PrefetchingIterator<T>) iterator :\n-               new PrefetchingIterator<T>()\n+        return iterator instanceof PrefetchingIterator ? (PrefetchingIterator<T>) iterator : new PrefetchingIterator<T>()\n                {\n                    @Override\n                    protected T fetchNextOrNull()\n@@ -740,7 +746,7 @@ public final class Iterators\n                        return iterator.hasNext() ? iterator.next() : null;\n                    }\n                };\n-    }\n+            }\n \n     /**\n      * Create a stream from the given iterator.\n@@ -779,7 +785,8 @@ public final class Iterators\n         {\n             return stream.onClose( ((Resource) iterator)::close );\n         }\n-        return stream;\n+\n+return stream;\n     }\n \n     private static class EmptyResourceIterator<E> implements ResourceIterator<E>\n@@ -803,4 +810,4 @@ public final class Iterators\n             throw new NoSuchElementException();\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 40
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}