{
    "project_name": "apache-servicecomb-java-chassis",
    "error_id": "291",
    "information": {
        "errors": [
            {
                "line": "142",
                "column": "29",
                "severity": "warning",
                "message": "'(' is followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
            }
        ]
    },
    "source_code": "    // we have already copy the cse config to the serviceComb config when we load the config from local yaml files\n    // hence, we do not need duplicate copy it.\n    config.addConfiguration( new DynamicConfiguration(\n            new MicroserviceConfigurationSource(configModelList), new NeverStartPollingScheduler()),\n        \"configFromYamlFile\");\n    duplicateCseConfigToServicecombAtFront(config,",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/291/ConfigUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler/291/ConfigUtil.java\nindex 4c1b65fd773..d4752b2856d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/291/ConfigUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler/291/ConfigUtil.java\n@@ -139,7 +139,7 @@ public final class ConfigUtil {\n             configMapEntry.getKey()));\n     // we have already copy the cse config to the serviceComb config when we load the config from local yaml files\n     // hence, we do not need duplicate copy it.\n-    config.addConfiguration( new DynamicConfiguration(\n+    config.addConfiguration(new DynamicConfiguration(\n             new MicroserviceConfigurationSource(configModelList), new NeverStartPollingScheduler()),\n         \"configFromYamlFile\");\n     duplicateCseConfigToServicecombAtFront(config,\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/291/ConfigUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/291/ConfigUtil.java\nindex 4c1b65fd773..d6a537aab00 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/291/ConfigUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/291/ConfigUtil.java\n@@ -139,7 +139,7 @@ public final class ConfigUtil {\n             configMapEntry.getKey()));\n     // we have already copy the cse config to the serviceComb config when we load the config from local yaml files\n     // hence, we do not need duplicate copy it.\n-    config.addConfiguration( new DynamicConfiguration(\n+    config.addConfiguration(new DynamicConfiguration(\n             new MicroserviceConfigurationSource(configModelList), new NeverStartPollingScheduler()),\n         \"configFromYamlFile\");\n     duplicateCseConfigToServicecombAtFront(config,\n@@ -184,16 +184,16 @@ public final class ConfigUtil {\n   }\n \n   private static void duplicateCseConfigToServicecomb(ConcurrentCompositeConfiguration compositeConfiguration,\n-      AbstractConfiguration source,\n-      String sourceName) {\n+                                                      AbstractConfiguration source,\n+                                                      String sourceName) {\n     duplicateCseConfigToServicecomb(source);\n \n     compositeConfiguration.addConfiguration(source, sourceName);\n   }\n \n   private static void duplicateCseConfigToServicecombAtFront(ConcurrentCompositeConfiguration compositeConfiguration,\n-      AbstractConfiguration source,\n-      String sourceName) {\n+                                                             AbstractConfiguration source,\n+                                                             String sourceName) {\n     duplicateCseConfigToServicecomb(source);\n \n     compositeConfiguration.addConfigurationAtFront(source, sourceName);\n",
            "diff_size": 5
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "143",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "218",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/291/ConfigUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/291/ConfigUtil.java\nindex 4c1b65fd773..dd64735b1cb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/291/ConfigUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/291/ConfigUtil.java\n@@ -130,17 +130,17 @@ public final class ConfigUtil {\n     duplicateCseConfigToServicecomb(config,\n         convertEnvVariable(new ConcurrentMapConfiguration(new EnvironmentConfiguration())),\n         \"configFromEnvironment\");\n-    // If there is extra configurations, add it into config.\n+// If there is extra configurations, add it into config.\n     EXTRA_CONFIG_MAP.entrySet()\n         .stream()\n         .filter(mapEntry -> !mapEntry.getValue().isEmpty())\n         .forEachOrdered(configMapEntry -> duplicateCseConfigToServicecomb(config,\n             new ConcurrentMapConfiguration(configMapEntry.getValue()),\n             configMapEntry.getKey()));\n-    // we have already copy the cse config to the serviceComb config when we load the config from local yaml files\n+\n+// we have already copy the cse config to the serviceComb config when we load the config from local yaml files\n     // hence, we do not need duplicate copy it.\n-    config.addConfiguration( new DynamicConfiguration(\n-            new MicroserviceConfigurationSource(configModelList), new NeverStartPollingScheduler()),\n+    config.addConfiguration(new DynamicConfiguration(new MicroserviceConfigurationSource(configModelList), new NeverStartPollingScheduler()),\n         \"configFromYamlFile\");\n     duplicateCseConfigToServicecombAtFront(config,\n         new ConcurrentMapConfiguration(ConfigMapping.getConvertedMap(config)),\n@@ -184,16 +184,14 @@ public final class ConfigUtil {\n   }\n \n   private static void duplicateCseConfigToServicecomb(ConcurrentCompositeConfiguration compositeConfiguration,\n-      AbstractConfiguration source,\n-      String sourceName) {\n+      AbstractConfiguration source, String sourceName) {\n     duplicateCseConfigToServicecomb(source);\n \n     compositeConfiguration.addConfiguration(source, sourceName);\n   }\n \n   private static void duplicateCseConfigToServicecombAtFront(ConcurrentCompositeConfiguration compositeConfiguration,\n-      AbstractConfiguration source,\n-      String sourceName) {\n+      AbstractConfiguration source, String sourceName) {\n     duplicateCseConfigToServicecomb(source);\n \n     compositeConfiguration.addConfigurationAtFront(source, sourceName);\n@@ -217,8 +215,7 @@ public final class ConfigUtil {\n   }\n \n   private static void createDynamicWatchedConfiguration(\n-      ConcurrentCompositeConfiguration localConfiguration,\n-      ConfigCenterConfigurationSource configCenterConfigurationSource) {\n+      ConcurrentCompositeConfiguration localConfiguration, ConfigCenterConfigurationSource configCenterConfigurationSource) {\n     ConcurrentMapConfiguration injectConfig = new ConcurrentMapConfiguration();\n     localConfiguration.addConfigurationAtFront(injectConfig, \"extraInjectConfig\");\n     configCenterConfigurationSource.addUpdateListener(new ServiceCombPropertyUpdateListener(injectConfig));\n@@ -317,4 +314,4 @@ public final class ConfigUtil {\n       }\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/291/ConfigUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_random/291/ConfigUtil.java\nindex 4c1b65fd773..d4752b2856d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/291/ConfigUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_random/291/ConfigUtil.java\n@@ -139,7 +139,7 @@ public final class ConfigUtil {\n             configMapEntry.getKey()));\n     // we have already copy the cse config to the serviceComb config when we load the config from local yaml files\n     // hence, we do not need duplicate copy it.\n-    config.addConfiguration( new DynamicConfiguration(\n+    config.addConfiguration(new DynamicConfiguration(\n             new MicroserviceConfigurationSource(configModelList), new NeverStartPollingScheduler()),\n         \"configFromYamlFile\");\n     duplicateCseConfigToServicecombAtFront(config,\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/291/ConfigUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/291/ConfigUtil.java\nindex 4c1b65fd773..d4752b2856d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/291/ConfigUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/291/ConfigUtil.java\n@@ -139,7 +139,7 @@ public final class ConfigUtil {\n             configMapEntry.getKey()));\n     // we have already copy the cse config to the serviceComb config when we load the config from local yaml files\n     // hence, we do not need duplicate copy it.\n-    config.addConfiguration( new DynamicConfiguration(\n+    config.addConfiguration(new DynamicConfiguration(\n             new MicroserviceConfigurationSource(configModelList), new NeverStartPollingScheduler()),\n         \"configFromYamlFile\");\n     duplicateCseConfigToServicecombAtFront(config,\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}