{
    "project_name": "Angel-ML-angel",
    "error_id": "1041",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1041/ExecutorsBlock.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/1041/ExecutorsBlock.java\nindex d86ec8a6f7e..a0c0ab9b11b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1041/ExecutorsBlock.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/1041/ExecutorsBlock.java\n@@ -56,11 +56,9 @@ public class ExecutorsBlock extends HtmlBlock {\n       }\n       tbody.tr().td(String.valueOf(t.getThreadId())).td(String.valueOf(t.getThreadName()))\n           .td(String.valueOf(t.getThreadState())).td(String.valueOf(stackTraceString))._();\n-    }\n+  }\n     tbody._()._();\n-\n-\n   }\n \n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 172).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 171).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1041/ExecutorsBlock.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/1041/ExecutorsBlock.java\nindex d86ec8a6f7e..72128c14658 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1041/ExecutorsBlock.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/1041/ExecutorsBlock.java\n@@ -22,15 +22,14 @@ import org.apache.hadoop.yarn.webapp.hamlet.Hamlet;\n import org.apache.hadoop.yarn.webapp.hamlet.Hamlet.TABLE;\n import org.apache.hadoop.yarn.webapp.hamlet.Hamlet.TBODY;\n import org.apache.hadoop.yarn.webapp.view.HtmlBlock;\n-\n import java.lang.management.ManagementFactory;\n import java.lang.management.ThreadInfo;\n import java.lang.management.ThreadMXBean;\n-\n import static org.apache.hadoop.yarn.util.StringHelper.join;\n import static org.apache.hadoop.yarn.webapp.view.JQueryUI._TH;\n \n public class ExecutorsBlock extends HtmlBlock {\n+\n   final AMContext amContext;\n \n   @Inject\n@@ -41,10 +40,7 @@ public class ExecutorsBlock extends HtmlBlock {\n   @Override\n   protected void render(Block html) {\n     set(TITLE, join(\"Angel ExecutorsBlock\"));\n-    TBODY<TABLE<Hamlet>> tbody =\n-        html.h1(\"ExecutorsBlock\").table(\"#jobs\").thead().tr().th(_TH, \"id\").th(_TH, \"name\")\n-            .th(_TH, \"state\").th(_TH, \"stacktrace\")._()._().tbody();\n-\n+    TBODY<TABLE<Hamlet>> tbody = html.h1(\"ExecutorsBlock\").table(\"#jobs\").thead().tr().th(_TH, \"id\").th(_TH, \"name\").th(_TH, \"state\").th(_TH, \"stacktrace\")._()._().tbody();\n     ThreadMXBean threadMXBean = ManagementFactory.getThreadMXBean();\n     ThreadInfo[] threadInfo = threadMXBean.dumpAllThreads(true, true);\n     String stackTraceString;\n@@ -54,13 +50,9 @@ public class ExecutorsBlock extends HtmlBlock {\n       for (StackTraceElement s : stackTrace) {\n         stackTraceString += s.toString() + \"\\n\";\n       }\n-      tbody.tr().td(String.valueOf(t.getThreadId())).td(String.valueOf(t.getThreadName()))\n-          .td(String.valueOf(t.getThreadState())).td(String.valueOf(stackTraceString))._();\n+      tbody.tr().td(String.valueOf(t.getThreadId())).td(String.valueOf(t.getThreadName())).td(String.valueOf(t.getThreadState())).td(String.valueOf(stackTraceString))._();\n     }\n     tbody._()._();\n-\n-\n   }\n \n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}