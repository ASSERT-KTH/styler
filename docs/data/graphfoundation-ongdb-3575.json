{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3575",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "77",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3575/OnlineIndexProxy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3575/OnlineIndexProxy.java\nindex e4751ca97b6..3bc2bfe21f3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3575/OnlineIndexProxy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3575/OnlineIndexProxy.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api.index;\n \n import java.io.File;\n@@ -40,206 +41,206 @@ import org.neo4j.values.storable.Value;\n \n public class OnlineIndexProxy implements IndexProxy\n {\n-    private final long indexId;\n-    private final IndexMeta indexMeta;\n-    final IndexAccessor accessor;\n-    private final IndexStoreView storeView;\n-    private final IndexCountsRemover indexCountsRemover;\n-    private boolean started;\n-\n-    // About this flag: there are two online \"modes\", you might say...\n-    // - One is the pure starting of an already online index which was cleanly shut down and all that.\n-    //   This scenario is simple and doesn't need this idempotency mode.\n-    // - The other is the creation or starting from an uncompleted population, where there will be a point\n-    //   in the future where this index will flip from a populating index proxy to an online index proxy.\n-    //   This is the problematic part. You see... we have been accidentally relying on the short-lived node\n-    //   entity locks for this to work. The scenario where they have saved indexes from getting duplicate\n-    //   nodes in them (one from populator and the other from a \"normal\" update is where a populator is nearing\n-    //   its completion and wants to flip. Another thread is in the middle of applying a transaction which\n-    //   in the end will feed an update to this index. Index updates are applied after store updates, so\n-    //   the populator may see the created node and add it, index flips and then the updates comes in to the normal\n-    //   online index and gets added again. The read lock here will have the populator wait for the transaction\n-    //   to fully apply, e.g. also wait for the index update to reach the population job before adding that node\n-    //   and flipping (the update mechanism in a populator is idempotent).\n-    //     This strategy has changed slightly in 3.0 where transactions can be applied in whole batches\n-    //   and index updates for the whole batch will be applied in the end. This is fine for everything except\n-    //   the above scenario because the short-lived entity locks are per transaction, not per batch, and must\n-    //   be so to not interfere with transactions creating constraints inside this batch. We do need to apply\n-    //   index updates in batches because nowadays slave update pulling and application isn't special in any\n-    //   way, it's simply applying transactions in batches and this needs to be very fast to not have instances\n-    //   fall behind in a cluster.\n-    //     So the sum of this is that during the session (until the next restart of the db) an index gets created\n-    //   it will be in this forced idempotency mode where it applies additions idempotently, which may be\n-    //   slightly more costly, but shouldn't make that big of a difference hopefully.\n-    private final boolean forcedIdempotentMode;\n-\n-    OnlineIndexProxy( long indexId,\n-            IndexMeta indexMeta,\n-            IndexAccessor accessor,\n-            IndexStoreView storeView,\n-            boolean forcedIdempotentMode )\n-    {\n-        assert accessor != null;\n-        this.indexId = indexId;\n-        this.indexMeta = indexMeta;\n-        this.accessor = accessor;\n-        this.storeView = storeView;\n-        this.forcedIdempotentMode = forcedIdempotentMode;\n-        this.indexCountsRemover = new IndexCountsRemover( storeView, indexId );\n-    }\n-\n-    @Override\n-    public void start()\n-    {\n-        started = true;\n-    }\n-\n-    @Override\n-    public IndexUpdater newUpdater( final IndexUpdateMode mode )\n-    {\n-        IndexUpdater actual = accessor.newUpdater( escalateModeIfNecessary( mode ) );\n-        return started ? updateCountingUpdater( actual ) : actual;\n-    }\n-\n-    private IndexUpdateMode escalateModeIfNecessary( IndexUpdateMode mode )\n-    {\n-        if ( forcedIdempotentMode )\n-        {\n-            // If this proxy is flagged with taking extra care about idempotency then escalate ONLINE to ONLINE_IDEMPOTENT.\n-            if ( mode != IndexUpdateMode.ONLINE )\n-            {\n-                throw new IllegalArgumentException( \"Unexpected mode \" + mode + \" given that \" + this +\n-                        \" has been marked with forced idempotent mode. Expected mode \" + IndexUpdateMode.ONLINE );\n-            }\n-            return IndexUpdateMode.ONLINE_IDEMPOTENT;\n-        }\n-        return mode;\n-    }\n-\n-    private IndexUpdater updateCountingUpdater( final IndexUpdater indexUpdater )\n-    {\n-        return new UpdateCountingIndexUpdater( storeView, indexId, indexUpdater );\n-    }\n-\n-    @Override\n-    public void drop() throws IOException\n-    {\n-        indexCountsRemover.remove();\n-        accessor.drop();\n-    }\n-\n-    @Override\n-    public SchemaIndexDescriptor getDescriptor()\n-    {\n-        return indexMeta.indexDescriptor();\n-    }\n-\n-    @Override\n-    public SchemaDescriptor schema()\n-    {\n-        return indexMeta.indexDescriptor().schema();\n-    }\n-\n-    @Override\n-    public IndexProvider.Descriptor getProviderDescriptor()\n-    {\n-        return indexMeta.providerDescriptor();\n-    }\n-\n-    @Override\n-    public InternalIndexState getState()\n-    {\n-        return InternalIndexState.ONLINE;\n-    }\n-\n-    @Override\n-    public IndexCapability getIndexCapability()\n-    {\n-        return indexMeta.indexCapability();\n-    }\n-\n-    @Override\n-    public void force( IOLimiter ioLimiter ) throws IOException\n-    {\n-        accessor.force( ioLimiter );\n-    }\n-\n-    @Override\n-    public void refresh() throws IOException\n-    {\n-        accessor.refresh();\n-    }\n-\n-    @Override\n-    public void close() throws IOException\n-    {\n-        accessor.close();\n-    }\n-\n-    @Override\n-    public IndexReader newReader()\n-    {\n-        return accessor.newReader();\n-    }\n-\n-    @Override\n-    public boolean awaitStoreScanCompleted()\n-    {\n-        return false; // the store scan is already completed\n-    }\n-\n-    @Override\n-    public void activate()\n-    {\n-        // ok, already active\n-    }\n-\n-    @Override\n-    public void validate()\n-    {\n-        // ok, it's online so it's valid\n-    }\n-\n-    @Override\n-    public void validateBeforeCommit( Value[] tuple )\n-    {\n-        accessor.validateBeforeCommit( tuple );\n-    }\n-\n-    @Override\n-    public long getIndexId()\n-    {\n-        return indexId;\n-    }\n-\n-    @Override\n-    public IndexPopulationFailure getPopulationFailure() throws IllegalStateException\n-    {\n-        throw new IllegalStateException( this + \" is ONLINE\" );\n-    }\n-\n-    @Override\n-    public PopulationProgress getIndexPopulationProgress()\n-    {\n-        return PopulationProgress.DONE;\n-    }\n-\n-    @Override\n-    public ResourceIterator<File> snapshotFiles() throws IOException\n-    {\n-        return accessor.snapshotFiles();\n-    }\n-\n-    @Override\n-    public String toString()\n-    {\n-        return getClass().getSimpleName() + \"[accessor:\" + accessor + \", descriptor:\" + indexMeta.indexDescriptor() + \"]\";\n-    }\n-\n-    @Override\n-    public void verifyDeferredConstraints( PropertyAccessor propertyAccessor )\n-            throws IndexEntryConflictException, IOException\n-    {\n-        accessor.verifyDeferredConstraints( propertyAccessor );\n-    }\n+  private final long indexId;\n+  private final IndexMeta indexMeta;\n+  final IndexAccessor accessor;\n+  private final IndexStoreView storeView;\n+  private final IndexCountsRemover indexCountsRemover;\n+  private boolean started;\n+\n+  // About this flag: there are two online \"modes\", you might say...\n+  // - One is the pure starting of an already online index which was cleanly shut down and all that.\n+  //   This scenario is simple and doesn't need this idempotency mode.\n+  // - The other is the creation or starting from an uncompleted population, where there will be a point\n+  //   in the future where this index will flip from a populating index proxy to an online index proxy.\n+  //   This is the problematic part. You see... we have been accidentally relying on the short-lived node\n+  //   entity locks for this to work. The scenario where they have saved indexes from getting duplicate\n+  //   nodes in them (one from populator and the other from a \"normal\" update is where a populator is nearing\n+  //   its completion and wants to flip. Another thread is in the middle of applying a transaction which\n+  //   in the end will feed an update to this index. Index updates are applied after store updates, so\n+  //   the populator may see the created node and add it, index flips and then the updates comes in to the normal\n+  //   online index and gets added again. The read lock here will have the populator wait for the transaction\n+  //   to fully apply, e.g. also wait for the index update to reach the population job before adding that node\n+  //   and flipping (the update mechanism in a populator is idempotent).\n+  //     This strategy has changed slightly in 3.0 where transactions can be applied in whole batches\n+  //   and index updates for the whole batch will be applied in the end. This is fine for everything except\n+  //   the above scenario because the short-lived entity locks are per transaction, not per batch, and must\n+  //   be so to not interfere with transactions creating constraints inside this batch. We do need to apply\n+  //   index updates in batches because nowadays slave update pulling and application isn't special in any\n+  //   way, it's simply applying transactions in batches and this needs to be very fast to not have instances\n+  //   fall behind in a cluster.\n+  //     So the sum of this is that during the session (until the next restart of the db) an index gets created\n+  //   it will be in this forced idempotency mode where it applies additions idempotently, which may be\n+  //   slightly more costly, but shouldn't make that big of a difference hopefully.\n+  private final boolean forcedIdempotentMode;\n+\n+  OnlineIndexProxy(long indexId,\n+                   IndexMeta indexMeta,\n+                   IndexAccessor accessor,\n+                   IndexStoreView storeView,\n+                   boolean forcedIdempotentMode)\n+  {\n+    assert accessor != null;\n+    this.indexId = indexId;\n+    this.indexMeta = indexMeta;\n+    this.accessor = accessor;\n+    this.storeView = storeView;\n+    this.forcedIdempotentMode = forcedIdempotentMode;\n+    this.indexCountsRemover = new IndexCountsRemover(storeView, indexId);\n+  }\n+\n+  @Override\n+  public void start()\n+  {\n+    started = true;\n+  }\n+\n+  @Override\n+  public IndexUpdater newUpdater(final IndexUpdateMode mode)\n+  {\n+    IndexUpdater actual = accessor.newUpdater(escalateModeIfNecessary(mode));\n+    return started ? updateCountingUpdater(actual) : actual;\n+  }\n+\n+  private IndexUpdateMode escalateModeIfNecessary(IndexUpdateMode mode)\n+  {\n+    if (forcedIdempotentMode)\n+    {\n+      // If this proxy is flagged with taking extra care about idempotency then escalate ONLINE to ONLINE_IDEMPOTENT.\n+      if (mode != IndexUpdateMode.ONLINE)\n+      {\n+        throw new IllegalArgumentException(\"Unexpected mode \" + mode + \" given that \" + this +\n+            \" has been marked with forced idempotent mode. Expected mode \" + IndexUpdateMode.ONLINE);\n+      }\n+      return IndexUpdateMode.ONLINE_IDEMPOTENT;\n+    }\n+    return mode;\n+  }\n+\n+  private IndexUpdater updateCountingUpdater(final IndexUpdater indexUpdater)\n+  {\n+    return new UpdateCountingIndexUpdater(storeView, indexId, indexUpdater);\n+  }\n+\n+  @Override\n+  public void drop() throws IOException\n+  {\n+    indexCountsRemover.remove();\n+    accessor.drop();\n+  }\n+\n+  @Override\n+  public SchemaIndexDescriptor getDescriptor()\n+  {\n+    return indexMeta.indexDescriptor();\n+  }\n+\n+  @Override\n+  public SchemaDescriptor schema()\n+  {\n+    return indexMeta.indexDescriptor().schema();\n+  }\n+\n+  @Override\n+  public IndexProvider.Descriptor getProviderDescriptor()\n+  {\n+    return indexMeta.providerDescriptor();\n+  }\n+\n+  @Override\n+  public InternalIndexState getState()\n+  {\n+    return InternalIndexState.ONLINE;\n+  }\n+\n+  @Override\n+  public IndexCapability getIndexCapability()\n+  {\n+    return indexMeta.indexCapability();\n+  }\n+\n+  @Override\n+  public void force(IOLimiter ioLimiter) throws IOException\n+  {\n+    accessor.force(ioLimiter);\n+  }\n+\n+  @Override\n+  public void refresh() throws IOException\n+  {\n+    accessor.refresh();\n+  }\n+\n+  @Override\n+  public void close() throws IOException\n+  {\n+    accessor.close();\n+  }\n+\n+  @Override\n+  public IndexReader newReader()\n+  {\n+    return accessor.newReader();\n+  }\n+\n+  @Override\n+  public boolean awaitStoreScanCompleted()\n+  {\n+    return false; // the store scan is already completed\n+  }\n+\n+  @Override\n+  public void activate()\n+  {\n+    // ok, already active\n+  }\n+\n+  @Override\n+  public void validate()\n+  {\n+    // ok, it's online so it's valid\n+  }\n+\n+  @Override\n+  public void validateBeforeCommit(Value[] tuple)\n+  {\n+    accessor.validateBeforeCommit(tuple);\n+  }\n+\n+  @Override\n+  public long getIndexId()\n+  {\n+    return indexId;\n+  }\n+\n+  @Override\n+  public IndexPopulationFailure getPopulationFailure() throws IllegalStateException\n+  {\n+    throw new IllegalStateException(this + \" is ONLINE\");\n+  }\n+\n+  @Override\n+  public PopulationProgress getIndexPopulationProgress()\n+  {\n+    return PopulationProgress.DONE;\n+  }\n+\n+  @Override\n+  public ResourceIterator<File> snapshotFiles() throws IOException\n+  {\n+    return accessor.snapshotFiles();\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return getClass().getSimpleName() + \"[accessor:\" + accessor + \", descriptor:\" + indexMeta.indexDescriptor() + \"]\";\n+  }\n+\n+  @Override\n+  public void verifyDeferredConstraints(PropertyAccessor propertyAccessor)\n+      throws IndexEntryConflictException, IOException\n+  {\n+    accessor.verifyDeferredConstraints(propertyAccessor);\n+  }\n }\n",
            "diff_size": 203
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "111",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 194).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3575/OnlineIndexProxy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3575/OnlineIndexProxy.java\nindex e4751ca97b6..65bb6f23248 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3575/OnlineIndexProxy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3575/OnlineIndexProxy.java\n@@ -108,12 +108,13 @@ public class OnlineIndexProxy implements IndexProxy\n             // If this proxy is flagged with taking extra care about idempotency then escalate ONLINE to ONLINE_IDEMPOTENT.\n             if ( mode != IndexUpdateMode.ONLINE )\n             {\n-                throw new IllegalArgumentException( \"Unexpected mode \" + mode + \" given that \" + this +\n-                        \" has been marked with forced idempotent mode. Expected mode \" + IndexUpdateMode.ONLINE );\n+                throw new IllegalArgumentException( \"Unexpected mode \" + mode + \" given that \" + this + \" has been marked with forced idempotent mode. Expected mode \" + IndexUpdateMode.ONLINE );\n             }\n-            return IndexUpdateMode.ONLINE_IDEMPOTENT;\n+\n+return IndexUpdateMode.ONLINE_IDEMPOTENT;\n         }\n-        return mode;\n+\n+return mode;\n     }\n \n     private IndexUpdater updateCountingUpdater( final IndexUpdater indexUpdater )\n@@ -237,9 +238,8 @@ public class OnlineIndexProxy implements IndexProxy\n     }\n \n     @Override\n-    public void verifyDeferredConstraints( PropertyAccessor propertyAccessor )\n-            throws IndexEntryConflictException, IOException\n-    {\n+    public void verifyDeferredConstraints( PropertyAccessor propertyAccessor ) throws IndexEntryConflictException, IOException\n+{\n         accessor.verifyDeferredConstraints( propertyAccessor );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "106",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 193).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "106",
                    "column": "78",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "232",
                    "column": "68",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3575/OnlineIndexProxy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/3575/OnlineIndexProxy.java\nindex e4751ca97b6..a1b2616ffa0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3575/OnlineIndexProxy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/3575/OnlineIndexProxy.java\n@@ -21,7 +21,6 @@ package org.neo4j.kernel.impl.api.index;\n \n import java.io.File;\n import java.io.IOException;\n-\n import org.neo4j.graphdb.ResourceIterator;\n import org.neo4j.internal.kernel.api.IndexCapability;\n import org.neo4j.internal.kernel.api.InternalIndexState;\n@@ -73,11 +72,7 @@ public class OnlineIndexProxy implements IndexProxy\n     //   slightly more costly, but shouldn't make that big of a difference hopefully.\n     private final boolean forcedIdempotentMode;\n \n-    OnlineIndexProxy( long indexId,\n-            IndexMeta indexMeta,\n-            IndexAccessor accessor,\n-            IndexStoreView storeView,\n-            boolean forcedIdempotentMode )\n+    OnlineIndexProxy( long indexId, IndexMeta indexMeta, IndexAccessor accessor, IndexStoreView storeView, boolean forcedIdempotentMode )\n     {\n         assert accessor != null;\n         this.indexId = indexId;\n@@ -108,11 +103,12 @@ public class OnlineIndexProxy implements IndexProxy\n             // If this proxy is flagged with taking extra care about idempotency then escalate ONLINE to ONLINE_IDEMPOTENT.\n             if ( mode != IndexUpdateMode.ONLINE )\n             {\n-                throw new IllegalArgumentException( \"Unexpected mode \" + mode + \" given that \" + this +\n-                        \" has been marked with forced idempotent mode. Expected mode \" + IndexUpdateMode.ONLINE );\n+                throw new IllegalArgumentException( \"Unexpected mode \" + mode+ \" given that \" + this + \" has been marked with forced idempotent mode. Expected mode \" + IndexUpdateMode.ONLINE );\n             }\n+\n             return IndexUpdateMode.ONLINE_IDEMPOTENT;\n         }\n+\n         return mode;\n     }\n \n@@ -233,13 +229,12 @@ public class OnlineIndexProxy implements IndexProxy\n     @Override\n     public String toString()\n     {\n-        return getClass().getSimpleName() + \"[accessor:\" + accessor + \", descriptor:\" + indexMeta.indexDescriptor() + \"]\";\n+        return getClass().getSimpleName() + \"[accessor:\" + accessor+ \", descriptor:\" + indexMeta.indexDescriptor() + \"]\";\n     }\n \n     @Override\n-    public void verifyDeferredConstraints( PropertyAccessor propertyAccessor )\n-            throws IndexEntryConflictException, IOException\n+    public void verifyDeferredConstraints( PropertyAccessor propertyAccessor ) throws IndexEntryConflictException, IOException\n     {\n         accessor.verifyDeferredConstraints( propertyAccessor );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}