{
    "project_name": "neo4j-neo4j",
    "error_id": "2826",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "59",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "121",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "115",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "120",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2826/GraphCountsSection.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2826/GraphCountsSection.java\nindex 7caa2d12a31..201f111ea1e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2826/GraphCountsSection.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2826/GraphCountsSection.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.collector;\n \n import java.util.ArrayList;\n@@ -55,163 +56,163 @@ final class GraphCountsSection\n     { // only static functionality\n     }\n \n-    static Stream<RetrieveResult> retrieve( Kernel kernel, Anonymizer anonymizer )\n-            throws TransactionFailureException, IndexNotFoundKernelException\n+    static Stream<RetrieveResult> retrieve(Kernel kernel, Anonymizer anonymizer)\n+      throws TransactionFailureException, IndexNotFoundKernelException\n     {\n-        try ( KernelTransaction tx = kernel.beginTransaction( KernelTransaction.Type.EXPLICIT, LoginContext.AUTH_DISABLED ) )\n+        try (KernelTransaction tx = kernel.beginTransaction(KernelTransaction.Type.EXPLICIT, LoginContext.AUTH_DISABLED))\n         {\n             TokenRead tokens = tx.tokenRead();\n             Read read = tx.dataRead();\n \n-            Map<String,Object> data = new HashMap<>();\n-            data.put( \"nodes\", nodeCounts( tokens, read, anonymizer ) );\n-            data.put( \"relationships\", relationshipCounts( tokens, read, anonymizer ) );\n-            data.put( \"indexes\", indexes( tokens, tx.schemaRead(), anonymizer ) );\n-            data.put( \"constraints\", constraints( tokens, tx.schemaRead(), anonymizer ) );\n+            Map<String, Object> data = new HashMap<>();\n+            data.put(\"nodes\", nodeCounts(tokens, read, anonymizer));\n+            data.put(\"relationships\", relationshipCounts(tokens, read, anonymizer));\n+            data.put(\"indexes\", indexes(tokens, tx.schemaRead(), anonymizer));\n+            data.put(\"constraints\", constraints(tokens, tx.schemaRead(), anonymizer));\n \n-            return Stream.of( new RetrieveResult( Sections.GRAPH_COUNTS, data ) );\n+            return Stream.of(new RetrieveResult(Sections.GRAPH_COUNTS, data));\n         }\n     }\n \n-    private static List<Map<String,Object>> nodeCounts( TokenRead tokens, Read read, Anonymizer anonymizer )\n+    private static List<Map<String, Object>> nodeCounts(TokenRead tokens, Read read, Anonymizer anonymizer)\n     {\n-        List<Map<String,Object>> nodeCounts = new ArrayList<>();\n-        Map<String,Object> nodeCount = new HashMap<>();\n+        List<Map<String, Object>> nodeCounts = new ArrayList<>();\n+        Map<String, Object> nodeCount = new HashMap<>();\n \n-        nodeCount.put( \"count\", read.countsForNodeWithoutTxState( -1 ) );\n-        nodeCounts.add( nodeCount );\n+        nodeCount.put(\"count\", read.countsForNodeWithoutTxState(-1));\n+        nodeCounts.add(nodeCount);\n \n-        tokens.labelsGetAllTokens().forEachRemaining( t -> {\n-            long count = read.countsForNodeWithoutTxState( t.id() );\n-            Map<String,Object> labelCount = new HashMap<>();\n-            labelCount.put( \"label\", anonymizer.label( t.name(), t.id() ) );\n-            labelCount.put( \"count\", count );\n-            nodeCounts.add( labelCount );\n-        } );\n+        tokens.labelsGetAllTokens().forEachRemaining(t -> {\n+            long count = read.countsForNodeWithoutTxState(t.id());\n+            Map<String, Object> labelCount = new HashMap<>();\n+            labelCount.put(\"label\", anonymizer.label(t.name(), t.id()));\n+            labelCount.put(\"count\", count);\n+            nodeCounts.add(labelCount);\n+        });\n \n         return nodeCounts;\n     }\n \n-    private static List<Map<String,Object>> relationshipCounts( TokenRead tokens, Read read, Anonymizer anonymizer )\n+    private static List<Map<String, Object>> relationshipCounts(TokenRead tokens, Read read, Anonymizer anonymizer)\n     {\n-        List<Map<String,Object>> relationshipCounts = new ArrayList<>();\n-        Map<String,Object> relationshipCount = new HashMap<>();\n-        relationshipCount.put( \"count\", read.countsForRelationshipWithoutTxState( -1, -1, -1 ) );\n-        relationshipCounts.add( relationshipCount );\n+        List<Map<String, Object>> relationshipCounts = new ArrayList<>();\n+        Map<String, Object> relationshipCount = new HashMap<>();\n+        relationshipCount.put(\"count\", read.countsForRelationshipWithoutTxState(-1, -1, -1));\n+        relationshipCounts.add(relationshipCount);\n \n-        List<NamedToken> labels = Iterators.asList( tokens.labelsGetAllTokens() );\n+        List<NamedToken> labels = Iterators.asList(tokens.labelsGetAllTokens());\n \n-        tokens.relationshipTypesGetAllTokens().forEachRemaining( t -> {\n-            long count = read.countsForRelationshipWithoutTxState( -1, t.id(), -1 );\n-            Map<String,Object> relationshipTypeCount = new HashMap<>();\n-            relationshipTypeCount.put( \"relationshipType\", anonymizer.relationshipType( t.name(), t.id() ) );\n-            relationshipTypeCount.put( \"count\", count );\n-            relationshipCounts.add( relationshipTypeCount );\n+        tokens.relationshipTypesGetAllTokens().forEachRemaining(t -> {\n+            long count = read.countsForRelationshipWithoutTxState(-1, t.id(), -1);\n+            Map<String, Object> relationshipTypeCount = new HashMap<>();\n+            relationshipTypeCount.put(\"relationshipType\", anonymizer.relationshipType(t.name(), t.id()));\n+            relationshipTypeCount.put(\"count\", count);\n+            relationshipCounts.add(relationshipTypeCount);\n \n-            for ( NamedToken label : labels )\n+            for (NamedToken label : labels)\n             {\n-                long startCount = read.countsForRelationshipWithoutTxState( label.id(), t.id(), -1 );\n-                if ( startCount > 0 )\n+                long startCount = read.countsForRelationshipWithoutTxState(label.id(), t.id(), -1);\n+                if (startCount > 0)\n                 {\n-                    Map<String,Object> x = new HashMap<>();\n-                    x.put( \"relationshipType\", anonymizer.relationshipType( t.name(), t.id() ) );\n-                    x.put( \"startLabel\", anonymizer.label( label.name(), label.id() ) );\n-                    x.put( \"count\", startCount );\n-                    relationshipCounts.add( x );\n+                    Map<String, Object> x = new HashMap<>();\n+                    x.put(\"relationshipType\", anonymizer.relationshipType(t.name(), t.id()));\n+                    x.put(\"startLabel\", anonymizer.label(label.name(), label.id()));\n+                    x.put(\"count\", startCount);\n+                    relationshipCounts.add(x);\n                 }\n-                long endCount = read.countsForRelationshipWithoutTxState( -1, t.id(), label.id() );\n-                if ( endCount > 0 )\n+                long endCount = read.countsForRelationshipWithoutTxState(-1, t.id(), label.id());\n+                if (endCount > 0)\n                 {\n-                    Map<String,Object> x = new HashMap<>();\n-                    x.put( \"relationshipType\", anonymizer.relationshipType( t.name(), t.id() ) );\n-                    x.put( \"endLabel\", anonymizer.label( label.name(), label.id() ) );\n-                    x.put( \"count\", endCount );\n-                    relationshipCounts.add( x );\n+                    Map<String, Object> x = new HashMap<>();\n+                    x.put(\"relationshipType\", anonymizer.relationshipType(t.name(), t.id()));\n+                    x.put(\"endLabel\", anonymizer.label(label.name(), label.id()));\n+                    x.put(\"count\", endCount);\n+                    relationshipCounts.add(x);\n                 }\n             }\n-        } );\n+        });\n \n         return relationshipCounts;\n     }\n \n-    private static List<Map<String,Object>> indexes( TokenRead tokens, SchemaRead schemaRead, Anonymizer anonymizer )\n-            throws IndexNotFoundKernelException\n+    private static List<Map<String, Object>> indexes(TokenRead tokens, SchemaRead schemaRead, Anonymizer anonymizer)\n+      throws IndexNotFoundKernelException\n     {\n-        List<Map<String,Object>> indexes = new ArrayList<>();\n+        List<Map<String, Object>> indexes = new ArrayList<>();\n \n         Iterator<IndexDescriptor> iterator = schemaRead.indexesGetAll();\n-        while ( iterator.hasNext() )\n+        while (iterator.hasNext())\n         {\n             IndexDescriptor index = iterator.next();\n \n-            Map<String,Object> data = new HashMap<>();\n-            data.put( \"labels\", map( index.schema().getEntityTokenIds(),\n-                                     id -> anonymizer.label( tokens.labelGetName( id ), id ) ) );\n+            Map<String, Object> data = new HashMap<>();\n+            data.put(\"labels\", map(index.schema().getEntityTokenIds(),\n+              id -> anonymizer.label(tokens.labelGetName(id), id)));\n \n-            data.put( \"properties\", map( index.schema().getPropertyIds(),\n-                                         id -> anonymizer.propertyKey( tokens.propertyKeyGetName( id ), id ) ) );\n+            data.put(\"properties\", map(index.schema().getPropertyIds(),\n+              id -> anonymizer.propertyKey(tokens.propertyKeyGetName(id), id)));\n \n-            var indexSample = schemaRead.indexSample( index );\n-            data.put( \"totalSize\", indexSample.indexSize() );\n-            data.put( \"updatesSinceEstimation\", indexSample.updates() );\n-            data.put( \"estimatedUniqueSize\", indexSample.uniqueValues() );\n+            var indexSample = schemaRead.indexSample(index);\n+            data.put(\"totalSize\", indexSample.indexSize());\n+            data.put(\"updatesSinceEstimation\", indexSample.updates());\n+            data.put(\"estimatedUniqueSize\", indexSample.uniqueValues());\n \n-            indexes.add( data );\n+            indexes.add(data);\n         }\n \n         return indexes;\n     }\n \n-    private static List<Map<String,Object>> constraints( TokenRead tokens, SchemaRead schemaRead, Anonymizer anonymizer )\n+    private static List<Map<String, Object>> constraints(TokenRead tokens, SchemaRead schemaRead, Anonymizer anonymizer)\n     {\n-        List<Map<String,Object>> constraints = new ArrayList<>();\n+        List<Map<String, Object>> constraints = new ArrayList<>();\n \n         Iterator<ConstraintDescriptor> iterator = schemaRead.constraintsGetAll();\n-        while ( iterator.hasNext() )\n+        while (iterator.hasNext())\n         {\n             ConstraintDescriptor constraint = iterator.next();\n             EntityType entityType = constraint.schema().entityType();\n-            Map<String,Object> data = new HashMap<>();\n+            Map<String, Object> data = new HashMap<>();\n \n-            data.put( \"properties\", map( constraint.schema().getPropertyIds(),\n-                    id -> anonymizer.propertyKey( tokens.propertyKeyGetName( id ), id ) ) );\n-            data.put( \"type\", constraintType( constraint ) );\n+            data.put(\"properties\", map(constraint.schema().getPropertyIds(),\n+              id -> anonymizer.propertyKey(tokens.propertyKeyGetName(id), id)));\n+            data.put(\"type\", constraintType(constraint));\n             int entityTokenId = constraint.schema().getEntityTokenIds()[0];\n \n-            switch ( entityType )\n+            switch (entityType)\n             {\n-            case NODE:\n-                data.put( \"label\", anonymizer.label( tokens.labelGetName( entityTokenId ), entityTokenId ) );\n-                constraints.add( data );\n-                break;\n-            case RELATIONSHIP:\n-                data.put( \"relationshipType\", anonymizer.relationshipType( tokens.relationshipTypeGetName( entityTokenId ), entityTokenId ) );\n-                constraints.add( data );\n-                break;\n-            default:\n+                case NODE:\n+                    data.put(\"label\", anonymizer.label(tokens.labelGetName(entityTokenId), entityTokenId));\n+                    constraints.add(data);\n+                    break;\n+                case RELATIONSHIP:\n+                    data.put(\"relationshipType\", anonymizer.relationshipType(tokens.relationshipTypeGetName(entityTokenId), entityTokenId));\n+                    constraints.add(data);\n+                    break;\n+                default:\n             }\n         }\n \n         return constraints;\n     }\n \n-    private static List<String> map( int[] ids, IntFunction<String> f )\n+    private static List<String> map(int[] ids, IntFunction<String> f)\n     {\n-        return Arrays.stream(ids).mapToObj( f ).collect( Collectors.toList());\n+        return Arrays.stream(ids).mapToObj(f).collect(Collectors.toList());\n     }\n \n-    private static String constraintType( ConstraintDescriptor constraint )\n+    private static String constraintType(ConstraintDescriptor constraint)\n     {\n-        switch ( constraint.type() )\n+        switch (constraint.type())\n         {\n-        case EXISTS:\n-            return \"Existence constraint\";\n-        case UNIQUE:\n-            return \"Uniqueness constraint\";\n-        case UNIQUE_EXISTS:\n-            return \"Node Key\";\n-        default:\n-            throw new IllegalArgumentException( \"Unknown constraint type: \" + constraint.type() );\n+            case EXISTS:\n+                return \"Existence constraint\";\n+            case UNIQUE:\n+                return \"Uniqueness constraint\";\n+            case UNIQUE_EXISTS:\n+                return \"Node Key\";\n+            default:\n+                throw new IllegalArgumentException(\"Unknown constraint type: \" + constraint.type());\n         }\n     }\n }\n",
            "diff_size": 93
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}