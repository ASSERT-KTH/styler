{
    "project_name": "intuit-Tank",
    "error_id": "186",
    "information": {
        "errors": [
            {
                "line": "27",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "class FileFileLocation extends FileLocation {\n\n\t/**\n\t * The file.  This may or may not actually exist.\n\t */\n\tprivate File file;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "28",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/186/FileFileLocation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/186/FileFileLocation.java\nindex cb2a6efe5c4..559ec10fd99 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/186/FileFileLocation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/186/FileFileLocation.java\n@@ -24,10 +24,10 @@ import java.io.OutputStream;\n  */\n class FileFileLocation extends FileLocation {\n \n-\t/**\n+    /**\n \t * The file.  This may or may not actually exist.\n \t */\n-\tprivate File file;\n+        private File file;\n \n \n \t/**\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/186/FileFileLocation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/186/FileFileLocation.java\nindex cb2a6efe5c4..bb9fd738357 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/186/FileFileLocation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/186/FileFileLocation.java\n@@ -6,6 +6,7 @@\n  * This library is distributed under a modified BSD license.  See the included\n  * LICENSE file for details.\n  */\n+\n package org.fife.ui.rsyntaxtextarea;\n \n import java.io.File;\n@@ -24,98 +25,98 @@ import java.io.OutputStream;\n  */\n class FileFileLocation extends FileLocation {\n \n-\t/**\n-\t * The file.  This may or may not actually exist.\n-\t */\n-\tprivate File file;\n-\n-\n-\t/**\n-\t * Constructor.\n-\t *\n-\t * @param file The local file.\n-\t */\n-\tFileFileLocation(File file) {\n-\t\ttry {\n-\t\t\t// Useful on Windows and OS X.\n-\t\t\tthis.file = file.getCanonicalFile();\n-\t\t} catch (IOException ioe) {\n-\t\t\tthis.file = file;\n-\t\t}\n-\t}\n-\n-\n-\t/**\n-\t * {@inheritDoc}\n-\t */\n-\t@Override\n-\tprotected long getActualLastModified() {\n-\t\treturn file.lastModified();\n-\t}\n-\n-\n-\t/**\n-\t * Returns the full path to the file.\n-\t *\n-\t * @return The full path to the file.\n-\t * @see #getFileName()\n-\t */\n-\t@Override\n-\tpublic String getFileFullPath() {\n-\t\treturn file.getAbsolutePath();\n-\t}\n-\n-\n-\t/**\n-\t * {@inheritDoc}\n-\t */\n-\t@Override\n-\tpublic String getFileName() {\n-\t\treturn file.getName();\n-\t}\n-\n-\n-\t/**\n-\t * {@inheritDoc}\n-\t */\n-\t@Override\n-\tprotected InputStream getInputStream() throws IOException {\n-\t\treturn new FileInputStream(file);\n-\t}\n-\n-\n-\t/**\n-\t * {@inheritDoc}\n-\t */\n-\t@Override\n-\tprotected OutputStream getOutputStream() throws IOException {\n-\t\treturn new FileOutputStream(file);\n-\t}\n-\n-\n-\t/**\n-\t * Always returns <code>true</code>.\n-\t *\n-\t * @return <code>true</code> always.\n-\t * @see #isLocalAndExists()\n-\t */\n-\t@Override\n-\tpublic boolean isLocal() {\n-\t\treturn true;\n-\t}\n-\n-\n-\t/**\n-\t * Since file locations of this type are guaranteed to be local, this\n-\t * method returns whether the file exists.\n-\t *\n-\t * @return Whether this local file actually exists.\n-\t * @see #isLocal()\n-\t */\n-\t@Override\n-\tpublic boolean isLocalAndExists() {\n-\t\treturn file.exists();\n-\t}\n+  /**\n+   * The file.  This may or may not actually exist.\n+   */\n+  private File file;\n+\n+\n+  /**\n+   * Constructor.\n+   *\n+   * @param file The local file.\n+   */\n+  FileFileLocation(File file) {\n+    try {\n+      // Useful on Windows and OS X.\n+      this.file = file.getCanonicalFile();\n+    } catch (IOException ioe) {\n+      this.file = file;\n+    }\n+  }\n+\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  protected long getActualLastModified() {\n+    return file.lastModified();\n+  }\n+\n+\n+  /**\n+   * Returns the full path to the file.\n+   *\n+   * @return The full path to the file.\n+   * @see #getFileName()\n+   */\n+  @Override\n+  public String getFileFullPath() {\n+    return file.getAbsolutePath();\n+  }\n+\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public String getFileName() {\n+    return file.getName();\n+  }\n+\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  protected InputStream getInputStream() throws IOException {\n+    return new FileInputStream(file);\n+  }\n+\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  protected OutputStream getOutputStream() throws IOException {\n+    return new FileOutputStream(file);\n+  }\n+\n+\n+  /**\n+   * Always returns <code>true</code>.\n+   *\n+   * @return <code>true</code> always.\n+   * @see #isLocalAndExists()\n+   */\n+  @Override\n+  public boolean isLocal() {\n+    return true;\n+  }\n+\n+\n+  /**\n+   * Since file locations of this type are guaranteed to be local, this\n+   * method returns whether the file exists.\n+   *\n+   * @return Whether this local file actually exists.\n+   * @see #isLocal()\n+   */\n+  @Override\n+  public boolean isLocalAndExists() {\n+    return file.exists();\n+  }\n \n \n }\n",
            "diff_size": 93
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "27",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/186/FileFileLocation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/186/FileFileLocation.java\nindex cb2a6efe5c4..05c7474de6f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/186/FileFileLocation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/186/FileFileLocation.java\n@@ -15,7 +15,6 @@ import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n \n-\n /**\n  * The location of a local file.\n  *\n@@ -24,37 +23,34 @@ import java.io.OutputStream;\n  */\n class FileFileLocation extends FileLocation {\n \n-\t/**\n+    /**\n \t * The file.  This may or may not actually exist.\n \t */\n \tprivate File file;\n \n-\n-\t/**\n+/**\n \t * Constructor.\n \t *\n \t * @param file The local file.\n \t */\n \tFileFileLocation(File file) {\n-\t\ttry {\n-\t\t\t// Useful on Windows and OS X.\n+    try {\n+    // Useful on Windows and OS X.\n \t\t\tthis.file = file.getCanonicalFile();\n-\t\t} catch (IOException ioe) {\n-\t\t\tthis.file = file;\n-\t\t}\n-\t}\n+    } catch (IOException ioe) {\n+    this.file = file;\n+    }\n+    }\n \n-\n-\t/**\n+/**\n \t * {@inheritDoc}\n \t */\n \t@Override\n \tprotected long getActualLastModified() {\n-\t\treturn file.lastModified();\n-\t}\n+    return file.lastModified();\n+    }\n \n-\n-\t/**\n+/**\n \t * Returns the full path to the file.\n \t *\n \t * @return The full path to the file.\n@@ -62,38 +58,34 @@ class FileFileLocation extends FileLocation {\n \t */\n \t@Override\n \tpublic String getFileFullPath() {\n-\t\treturn file.getAbsolutePath();\n-\t}\n+    return file.getAbsolutePath();\n+    }\n \n-\n-\t/**\n+/**\n \t * {@inheritDoc}\n \t */\n \t@Override\n \tpublic String getFileName() {\n-\t\treturn file.getName();\n-\t}\n+    return file.getName();\n+    }\n \n-\n-\t/**\n+/**\n \t * {@inheritDoc}\n \t */\n \t@Override\n \tprotected InputStream getInputStream() throws IOException {\n-\t\treturn new FileInputStream(file);\n-\t}\n-\n+    return new FileInputStream(file);\n+    }\n \n-\t/**\n+/**\n \t * {@inheritDoc}\n \t */\n \t@Override\n \tprotected OutputStream getOutputStream() throws IOException {\n-\t\treturn new FileOutputStream(file);\n-\t}\n-\n+    return new FileOutputStream(file);\n+    }\n \n-\t/**\n+/**\n \t * Always returns <code>true</code>.\n \t *\n \t * @return <code>true</code> always.\n@@ -101,11 +93,10 @@ class FileFileLocation extends FileLocation {\n \t */\n \t@Override\n \tpublic boolean isLocal() {\n-\t\treturn true;\n-\t}\n-\n+    return true;\n+    }\n \n-\t/**\n+/**\n \t * Since file locations of this type are guaranteed to be local, this\n \t * method returns whether the file exists.\n \t *\n@@ -114,8 +105,7 @@ class FileFileLocation extends FileLocation {\n \t */\n \t@Override\n \tpublic boolean isLocalAndExists() {\n-\t\treturn file.exists();\n-\t}\n-\n+    return file.exists();\n+    }\n \n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 40
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/186/FileFileLocation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/186/FileFileLocation.java\nindex cb2a6efe5c4..ec74ae07e45 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/186/FileFileLocation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/186/FileFileLocation.java\n@@ -8,6 +8,8 @@\n  */\n package org.fife.ui.rsyntaxtextarea;\n \n+\n+\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n@@ -22,100 +24,110 @@ import java.io.OutputStream;\n  * @author Robert Futrell\n  * @version 1.0\n  */\n+\n+\n class FileFileLocation extends FileLocation {\n \n-\t/**\n-\t * The file.  This may or may not actually exist.\n-\t */\n-\tprivate File file;\n-\n-\n-\t/**\n-\t * Constructor.\n-\t *\n-\t * @param file The local file.\n-\t */\n-\tFileFileLocation(File file) {\n-\t\ttry {\n-\t\t\t// Useful on Windows and OS X.\n-\t\t\tthis.file = file.getCanonicalFile();\n-\t\t} catch (IOException ioe) {\n-\t\t\tthis.file = file;\n-\t\t}\n-\t}\n-\n-\n-\t/**\n-\t * {@inheritDoc}\n-\t */\n-\t@Override\n-\tprotected long getActualLastModified() {\n-\t\treturn file.lastModified();\n-\t}\n-\n-\n-\t/**\n-\t * Returns the full path to the file.\n-\t *\n-\t * @return The full path to the file.\n-\t * @see #getFileName()\n-\t */\n-\t@Override\n-\tpublic String getFileFullPath() {\n-\t\treturn file.getAbsolutePath();\n-\t}\n-\n-\n-\t/**\n-\t * {@inheritDoc}\n-\t */\n-\t@Override\n-\tpublic String getFileName() {\n-\t\treturn file.getName();\n-\t}\n-\n-\n-\t/**\n-\t * {@inheritDoc}\n-\t */\n-\t@Override\n-\tprotected InputStream getInputStream() throws IOException {\n-\t\treturn new FileInputStream(file);\n-\t}\n-\n-\n-\t/**\n-\t * {@inheritDoc}\n-\t */\n-\t@Override\n-\tprotected OutputStream getOutputStream() throws IOException {\n-\t\treturn new FileOutputStream(file);\n-\t}\n-\n-\n-\t/**\n-\t * Always returns <code>true</code>.\n-\t *\n-\t * @return <code>true</code> always.\n-\t * @see #isLocalAndExists()\n-\t */\n-\t@Override\n-\tpublic boolean isLocal() {\n-\t\treturn true;\n-\t}\n-\n-\n-\t/**\n-\t * Since file locations of this type are guaranteed to be local, this\n-\t * method returns whether the file exists.\n-\t *\n-\t * @return Whether this local file actually exists.\n-\t * @see #isLocal()\n-\t */\n-\t@Override\n-\tpublic boolean isLocalAndExists() {\n-\t\treturn file.exists();\n-\t}\n-\n-\n-}\n+    /**\n+     * The file.  This may or may not actually exist.\n+     */\n+\n+    private File file;\n+\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param file The local file.\n+     */\n+\n+    FileFileLocation(File file) {\n+        try {\n+            // Useful on Windows and OS X.\n+            this.file = file.getCanonicalFile();\n+        } catch (IOException ioe) {\n+            this.file = file;\n+        }\n+    }\n+\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+\n+    @Override\n+    protected long getActualLastModified() {\n+        return file.lastModified();\n+    }\n+\n+\n+    /**\n+     * Returns the full path to the file.\n+     *\n+     * @return The full path to the file.\n+     * @see #getFileName()\n+     */\n+\n+    @Override\n+    public String getFileFullPath() {\n+        return file.getAbsolutePath();\n+    }\n+\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+\n+    @Override\n+    public String getFileName() {\n+        return file.getName();\n+    }\n+\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+\n+    @Override\n+    protected InputStream getInputStream() throws IOException {\n+        return new FileInputStream(file);\n+    }\n+\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+\n+    @Override\n+    protected OutputStream getOutputStream() throws IOException {\n+        return new FileOutputStream(file);\n+    }\n+\n+\n+    /**\n+     * Always returns <code>true</code>.\n+     *\n+     * @return <code>true</code> always.\n+     * @see #isLocalAndExists()\n+     */\n+\n+    @Override\n+    public boolean isLocal() {\n+        return true;\n+    }\n+\n+\n+    /**\n+     * Since file locations of this type are guaranteed to be local, this\n+     * method returns whether the file exists.\n+     *\n+     * @return Whether this local file actually exists.\n+     * @see #isLocal()\n+     */\n+\n+    @Override\n+    public boolean isLocalAndExists() {\n+        return file.exists();\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 107
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "28",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/186/FileFileLocation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/186/FileFileLocation.java\nindex cb2a6efe5c4..559ec10fd99 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/186/FileFileLocation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/186/FileFileLocation.java\n@@ -24,10 +24,10 @@ import java.io.OutputStream;\n  */\n class FileFileLocation extends FileLocation {\n \n-\t/**\n+    /**\n \t * The file.  This may or may not actually exist.\n \t */\n-\tprivate File file;\n+        private File file;\n \n \n \t/**\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "28",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/186/FileFileLocation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/186/FileFileLocation.java\nindex cb2a6efe5c4..c07e3be1b01 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/186/FileFileLocation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/186/FileFileLocation.java\n@@ -24,10 +24,10 @@ import java.io.OutputStream;\n  */\n class FileFileLocation extends FileLocation {\n \n-\t/**\n+    /**\n \t * The file.  This may or may not actually exist.\n \t */\n-\tprivate File file;\n+ private File file;\n \n \n \t/**\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}