{
    "project_name": "DaGeRe-peass",
    "error_id": "109",
    "information": {
        "errors": [
            {
                "line": "78",
                "severity": "error",
                "message": "Line is longer than 200 characters (found 212).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    * @param iterator\n    */\n   public DependencyReader(final File projectFolder, final File dependencyFile, final String url, final VersionIterator iterator, final int timeout, final VersionKeeper nonRunning, final VersionKeeper nochange) {\n      super(new Dependencies(), projectFolder, dependencyFile, timeout, nochange);\n\n      this.iterator = iterator;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Line is longer than 200 characters (found 205).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/109/DependencyReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler/109/DependencyReader.java\nindex caccd67fddc..7c565e35a9f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/109/DependencyReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler/109/DependencyReader.java\n@@ -75,8 +75,9 @@ public class DependencyReader extends DependencyReaderBase {\n     * @param url\n     * @param iterator\n     */\n-   public DependencyReader(final File projectFolder, final File dependencyFile, final String url, final VersionIterator iterator, final int timeout, final VersionKeeper nonRunning, final VersionKeeper nochange) {\n-      super(new Dependencies(), projectFolder, dependencyFile, timeout, nochange);\n+\t\t\t\tpublic\n+   DependencyReader(final File projectFolder, final File dependencyFile, final String url, final VersionIterator iterator, final int timeout, final VersionKeeper nonRunning, final VersionKeeper nochange) {\n+       super(new Dependencies(), projectFolder, dependencyFile, timeout, nochange);\n \n       this.iterator = iterator;\n \n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/109/DependencyReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/intellij/109/DependencyReader.java\nindex caccd67fddc..984fe5f6d06 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/109/DependencyReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/intellij/109/DependencyReader.java\n@@ -1,19 +1,20 @@\n /**\n- *     This file is part of PerAn.\n- *\n- *     PerAn is free software: you can redistribute it and/or modify\n- *     it under the terms of the GNU General Public License as published by\n- *     the Free Software Foundation, either version 3 of the License, or\n- *     (at your option) any later version.\n- *\n- *     PerAn is distributed in the hope that it will be useful,\n- *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n- *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- *     GNU General Public License for more details.\n- *\n- *     You should have received a copy of the GNU General Public License\n- *     along with PerAn.  If not, see <http://www.gnu.org/licenses/>.\n+ * This file is part of PerAn.\n+ * <p>\n+ * PerAn is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ * <p>\n+ * PerAn is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ * <p>\n+ * You should have received a copy of the GNU General Public License\n+ * along with PerAn.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package de.peass.dependency.reader;\n \n import java.io.File;\n@@ -37,173 +38,174 @@ import de.peass.vcs.VersionIteratorGit;\n \n /**\n  * Reads the dependencies of a project\n- * \n+ *\n  * @author reichelt\n  *\n  */\n public class DependencyReader extends DependencyReaderBase {\n \n-   private static final Logger LOG = LogManager.getLogger(DependencyReader.class);\n+  private static final Logger LOG = LogManager.getLogger(DependencyReader.class);\n \n-   protected boolean init = false;\n-   private final ChangeManager changeManager;\n-   private int overallSize = 0, prunedSize = 0;\n+  protected boolean init = false;\n+  private final ChangeManager changeManager;\n+  private int overallSize = 0, prunedSize = 0;\n \n-   private final VersionKeeper nonRunning;\n+  private final VersionKeeper nonRunning;\n //   private final VersionKeeper skippedNoChange;\n \n-   public DependencyReader(final File projectFolder, final File dependencyFile, final String url, final VersionIterator iterator, final int timeout,\n-         final ChangeManager changeManager) {\n-      super(new Dependencies(), projectFolder, dependencyFile, timeout, new VersionKeeper(new File(\"/dev/null\")));\n+  public DependencyReader(final File projectFolder, final File dependencyFile, final String url, final VersionIterator iterator, final int timeout,\n+                          final ChangeManager changeManager) {\n+    super(new Dependencies(), projectFolder, dependencyFile, timeout, new VersionKeeper(new File(\"/dev/null\")));\n \n-      this.iterator = iterator;\n+    this.iterator = iterator;\n \n-      dependencyResult.setUrl(url);\n+    dependencyResult.setUrl(url);\n \n-      dependencyManager = new DependencyManager(projectFolder, timeout);\n+    dependencyManager = new DependencyManager(projectFolder, timeout);\n \n-      this.changeManager = changeManager;\n-      nonRunning = new VersionKeeper(new File(\"/dev/null\"));\n+    this.changeManager = changeManager;\n+    nonRunning = new VersionKeeper(new File(\"/dev/null\"));\n //      skippedNoChange = new VersionKeeper(new File(\"/dev/null\"));\n-   }\n-\n-   /**\n-    * Starts reading dependencies\n-    * \n-    * @param projectFolder\n-    * @param dependencyFile\n-    * @param url\n-    * @param iterator\n-    */\n-   public DependencyReader(final File projectFolder, final File dependencyFile, final String url, final VersionIterator iterator, final int timeout, final VersionKeeper nonRunning, final VersionKeeper nochange) {\n-      super(new Dependencies(), projectFolder, dependencyFile, timeout, nochange);\n-\n-      this.iterator = iterator;\n-\n-      dependencyResult.setUrl(url);\n-\n-      dependencyManager = new DependencyManager(projectFolder, timeout);\n-\n-      changeManager = new ChangeManager(folders);\n-      this.nonRunning = nonRunning;\n-   }\n-\n-   /**\n-    * Continues reading dependencies\n-    * \n-    * @param projectFolder\n-    * @param dependencyFile\n-    * @param url\n-    * @param iterator\n-    * @param initialdependencies\n-    * @param timeout Timeout in Minutes\n-    */\n-   public DependencyReader(final File projectFolder, final File dependencyFile, final String url, final VersionIterator iterator, final Dependencies initialdependencies,\n-         final int timeout) {\n-      this(projectFolder, dependencyFile, url, iterator, timeout, new VersionKeeper(new File(dependencyFile.getParentFile(), \"nonrunning.json\")),\n-            new VersionKeeper(new File(dependencyFile.getParentFile(), \"nochanges.json\")));\n-\n-      dependencyResult.setVersions(initialdependencies.getVersions());\n-      dependencyResult.setInitialversion(initialdependencies.getInitialversion());\n-\n-      readCompletedVersions();\n-      init = true;\n-   }\n-\n-   /**\n-    * Searches the first commit where a mvn clean packages runs correct, i.e. returns 1\n-    * \n-    * @param projectFolder\n-    */\n-   public boolean searchFirstRunningCommit(final VersionIterator iterator, final TestExecutor executor, final File projectFolder) {\n-      boolean successGettingCommit = iterator.goToFirstCommit();\n-      while (!successGettingCommit && iterator.hasNextCommit()) {\n-         successGettingCommit = iterator.goToNextCommit();\n-      }\n-      if (!successGettingCommit) {\n-         throw new RuntimeException(\"Repository does not contain usable commit - maybe path has changed?\");\n-      } else {\n-         LOG.info(\"Found first commit: \" + iterator.getTag());\n+  }\n+\n+  /**\n+   * Starts reading dependencies\n+   *\n+   * @param projectFolder\n+   * @param dependencyFile\n+   * @param url\n+   * @param iterator\n+   */\n+  public DependencyReader(final File projectFolder, final File dependencyFile, final String url, final VersionIterator iterator, final int timeout, final VersionKeeper nonRunning,\n+                          final VersionKeeper nochange) {\n+    super(new Dependencies(), projectFolder, dependencyFile, timeout, nochange);\n+\n+    this.iterator = iterator;\n+\n+    dependencyResult.setUrl(url);\n+\n+    dependencyManager = new DependencyManager(projectFolder, timeout);\n+\n+    changeManager = new ChangeManager(folders);\n+    this.nonRunning = nonRunning;\n+  }\n+\n+  /**\n+   * Continues reading dependencies\n+   *\n+   * @param projectFolder\n+   * @param dependencyFile\n+   * @param url\n+   * @param iterator\n+   * @param initialdependencies\n+   * @param timeout Timeout in Minutes\n+   */\n+  public DependencyReader(final File projectFolder, final File dependencyFile, final String url, final VersionIterator iterator, final Dependencies initialdependencies,\n+                          final int timeout) {\n+    this(projectFolder, dependencyFile, url, iterator, timeout, new VersionKeeper(new File(dependencyFile.getParentFile(), \"nonrunning.json\")),\n+        new VersionKeeper(new File(dependencyFile.getParentFile(), \"nochanges.json\")));\n+\n+    dependencyResult.setVersions(initialdependencies.getVersions());\n+    dependencyResult.setInitialversion(initialdependencies.getInitialversion());\n+\n+    readCompletedVersions();\n+    init = true;\n+  }\n+\n+  /**\n+   * Searches the first commit where a mvn clean packages runs correct, i.e. returns 1\n+   *\n+   * @param projectFolder\n+   */\n+  public boolean searchFirstRunningCommit(final VersionIterator iterator, final TestExecutor executor, final File projectFolder) {\n+    boolean successGettingCommit = iterator.goToFirstCommit();\n+    while (!successGettingCommit && iterator.hasNextCommit()) {\n+      successGettingCommit = iterator.goToNextCommit();\n+    }\n+    if (!successGettingCommit) {\n+      throw new RuntimeException(\"Repository does not contain usable commit - maybe path has changed?\");\n+    } else {\n+      LOG.info(\"Found first commit: \" + iterator.getTag());\n+    }\n+    boolean isVersionRunning = false;\n+    while (!isVersionRunning && iterator.hasNextCommit()) {\n+      isVersionRunning = executor.isVersionRunning(iterator.getTag());\n+\n+      if (!isVersionRunning) {\n+        LOG.debug(\"Buildfile does not exist / version is not running {}\", iterator.getTag());\n+        if (executor.doesBuildfileExist()) {\n+          nonRunning.addVersion(iterator.getTag(), \"Version is not running.\");\n+        } else {\n+          nonRunning.addVersion(iterator.getTag(), \"Buildfile does not exist.\");\n+        }\n+        iterator.goToNextCommit();\n       }\n-      boolean isVersionRunning = false;\n-      while (!isVersionRunning && iterator.hasNextCommit()) {\n-         isVersionRunning = executor.isVersionRunning(iterator.getTag());\n-\n-         if (!isVersionRunning) {\n-            LOG.debug(\"Buildfile does not exist / version is not running {}\", iterator.getTag());\n-            if (executor.doesBuildfileExist()) {\n-               nonRunning.addVersion(iterator.getTag(), \"Version is not running.\");\n-            } else {\n-               nonRunning.addVersion(iterator.getTag(), \"Buildfile does not exist.\");\n-            }\n-            iterator.goToNextCommit();\n-         }\n+    }\n+    return isVersionRunning;\n+  }\n+\n+  /**\n+   * Reads the dependencies of the tests\n+   */\n+  public boolean readDependencies() {\n+    try {\n+      if (!init) {\n+        final boolean running = searchFirstRunningCommit(iterator, dependencyManager.getExecutor(), folders.getProjectFolder());\n+        if (!running || !readInitialVersion()) {\n+          LOG.error(\"No version analyzable.\");\n+          return false;\n+        }\n       }\n-      return isVersionRunning;\n-   }\n-\n-   /**\n-    * Reads the dependencies of the tests\n-    */\n-   public boolean readDependencies() {\n-      try {\n-         if (!init) {\n-            final boolean running = searchFirstRunningCommit(iterator, dependencyManager.getExecutor(), folders.getProjectFolder());\n-            if (!running || !readInitialVersion()) {\n-               LOG.error(\"No version analyzable.\");\n-               return false;\n-            }\n-         }\n-\n-         LOG.debug(\"Analysiere {} Eintr\u00e4ge\", iterator.getSize());\n-\n-         prunedSize += dependencyMap.size();\n-\n-         changeManager.saveOldClasses();\n-         lastRunningVersion = iterator.getTag();\n-         while (iterator.hasNextCommit()) {\n-            iterator.goToNextCommit();\n-            readVersion();\n-         }\n-\n-         LOG.debug(\"Finished dependency-reading\");\n-         return true;\n-      } catch (IOException | InterruptedException | XmlPullParserException e) {\n-         e.printStackTrace();\n-         return false;\n-      }\n-   }\n-\n-   public void readVersion() throws IOException, FileNotFoundException {\n-      try {\n-         final int tests = analyseVersion(changeManager);\n-         DependencyReaderUtil.write(dependencyResult, dependencyFile);\n-         overallSize += dependencyMap.size();\n-         prunedSize += tests;\n-\n-         LOG.info(\"Overall-tests: {} Executed tests with pruning: {}\", overallSize, prunedSize);\n-\n-         dependencyManager.getExecutor().deleteTemporaryFiles();\n-         final File xmlFileFolder = TestResultManager.getXMLFileFolder(folders, folders.getProjectFolder());\n-         if (xmlFileFolder != null) {\n-            FileUtils.deleteDirectory(xmlFileFolder);\n-         }\n-      } catch (final ParseProblemException ppe) {\n-         ppe.printStackTrace();\n-      } catch (final XmlPullParserException e) {\n-         e.printStackTrace();\n-      } catch (final InterruptedException e) {\n-         // TODO Auto-generated catch block\n-         e.printStackTrace();\n-      }\n-   }\n \n-   public Dependencies getDependencies() {\n-      return dependencyResult;\n-   }\n+      LOG.debug(\"Analysiere {} Eintr\u00e4ge\", iterator.getSize());\n+\n+      prunedSize += dependencyMap.size();\n \n-   public void setIterator(final VersionIteratorGit reserveIterator) {\n-      this.iterator = reserveIterator;\n-   }\n+      changeManager.saveOldClasses();\n+      lastRunningVersion = iterator.getTag();\n+      while (iterator.hasNextCommit()) {\n+        iterator.goToNextCommit();\n+        readVersion();\n+      }\n+\n+      LOG.debug(\"Finished dependency-reading\");\n+      return true;\n+    } catch (IOException | InterruptedException | XmlPullParserException e) {\n+      e.printStackTrace();\n+      return false;\n+    }\n+  }\n+\n+  public void readVersion() throws IOException, FileNotFoundException {\n+    try {\n+      final int tests = analyseVersion(changeManager);\n+      DependencyReaderUtil.write(dependencyResult, dependencyFile);\n+      overallSize += dependencyMap.size();\n+      prunedSize += tests;\n+\n+      LOG.info(\"Overall-tests: {} Executed tests with pruning: {}\", overallSize, prunedSize);\n+\n+      dependencyManager.getExecutor().deleteTemporaryFiles();\n+      final File xmlFileFolder = TestResultManager.getXMLFileFolder(folders, folders.getProjectFolder());\n+      if (xmlFileFolder != null) {\n+        FileUtils.deleteDirectory(xmlFileFolder);\n+      }\n+    } catch (final ParseProblemException ppe) {\n+      ppe.printStackTrace();\n+    } catch (final XmlPullParserException e) {\n+      e.printStackTrace();\n+    } catch (final InterruptedException e) {\n+      // TODO Auto-generated catch block\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  public Dependencies getDependencies() {\n+    return dependencyResult;\n+  }\n+\n+  public void setIterator(final VersionIteratorGit reserveIterator) {\n+    this.iterator = reserveIterator;\n+  }\n \n }\n",
            "diff_size": 224
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Line is longer than 200 characters (found 210).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "91",
                    "severity": "error",
                    "message": "Line is longer than 200 characters (found 221).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/109/DependencyReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/codebuff/109/DependencyReader.java\nindex caccd67fddc..44c88035a0d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/109/DependencyReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/codebuff/109/DependencyReader.java\n@@ -19,14 +19,11 @@ package de.peass.dependency.reader;\n import java.io.File;\n import java.io.FileNotFoundException;\n import java.io.IOException;\n-\n import org.apache.commons.io.FileUtils;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.codehaus.plexus.util.xml.pull.XmlPullParserException;\n-\n import com.github.javaparser.ParseProblemException;\n-\n import de.peass.dependency.ChangeManager;\n import de.peass.dependency.DependencyManager;\n import de.peass.dependency.TestResultManager;\n@@ -41,31 +38,25 @@ import de.peass.vcs.VersionIteratorGit;\n  * @author reichelt\n  *\n  */\n-public class DependencyReader extends DependencyReaderBase {\n \n-   private static final Logger LOG = LogManager.getLogger(DependencyReader.class);\n \n-   protected boolean init = false;\n-   private final ChangeManager changeManager;\n-   private int overallSize = 0, prunedSize = 0;\n-\n-   private final VersionKeeper nonRunning;\n+public class DependencyReader extends DependencyReaderBase {\n+ private static final Logger LOG = LogManager.getLogger(DependencyReader.class);\n+ protected boolean init = false;\n+ private final ChangeManager changeManager;\n+ private int overallSize = 0, prunedSize = 0;\n+ private final VersionKeeper nonRunning;\n //   private final VersionKeeper skippedNoChange;\n \n-   public DependencyReader(final File projectFolder, final File dependencyFile, final String url, final VersionIterator iterator, final int timeout,\n-         final ChangeManager changeManager) {\n-      super(new Dependencies(), projectFolder, dependencyFile, timeout, new VersionKeeper(new File(\"/dev/null\")));\n-\n-      this.iterator = iterator;\n-\n-      dependencyResult.setUrl(url);\n-\n-      dependencyManager = new DependencyManager(projectFolder, timeout);\n-\n-      this.changeManager = changeManager;\n-      nonRunning = new VersionKeeper(new File(\"/dev/null\"));\n+ public DependencyReader(final File projectFolder, final File dependencyFile, final String url, final VersionIterator iterator, final int timeout, final ChangeManager changeManager) {\n+  super(new Dependencies(), projectFolder, dependencyFile, timeout, new VersionKeeper(new File(\"/dev/null\")));\n+  this.iterator = iterator;\n+  dependencyResult.setUrl(url);\n+  dependencyManager = new DependencyManager(projectFolder, timeout);\n+  this.changeManager = changeManager;\n+  nonRunning = new VersionKeeper(new File(\"/dev/null\"));\n //      skippedNoChange = new VersionKeeper(new File(\"/dev/null\"));\n-   }\n+ }\n \n    /**\n     * Starts reading dependencies\n@@ -75,18 +66,15 @@ public class DependencyReader extends DependencyReaderBase {\n     * @param url\n     * @param iterator\n     */\n-   public DependencyReader(final File projectFolder, final File dependencyFile, final String url, final VersionIterator iterator, final int timeout, final VersionKeeper nonRunning, final VersionKeeper nochange) {\n-      super(new Dependencies(), projectFolder, dependencyFile, timeout, nochange);\n-\n-      this.iterator = iterator;\n-\n-      dependencyResult.setUrl(url);\n \n-      dependencyManager = new DependencyManager(projectFolder, timeout);\n-\n-      changeManager = new ChangeManager(folders);\n-      this.nonRunning = nonRunning;\n-   }\n+ public DependencyReader(final File projectFolder, final File dependencyFile, final String url, final VersionIterator iterator, final int timeout, final VersionKeeper nonRunning, final VersionKeeper nochange) {\n+  super(new Dependencies(), projectFolder, dependencyFile, timeout, nochange);\n+  this.iterator = iterator;\n+  dependencyResult.setUrl(url);\n+  dependencyManager = new DependencyManager(projectFolder, timeout);\n+  changeManager = new ChangeManager(folders);\n+  this.nonRunning = nonRunning;\n+ }\n \n    /**\n     * Continues reading dependencies\n@@ -98,112 +86,106 @@ public class DependencyReader extends DependencyReaderBase {\n     * @param initialdependencies\n     * @param timeout Timeout in Minutes\n     */\n-   public DependencyReader(final File projectFolder, final File dependencyFile, final String url, final VersionIterator iterator, final Dependencies initialdependencies,\n-         final int timeout) {\n-      this(projectFolder, dependencyFile, url, iterator, timeout, new VersionKeeper(new File(dependencyFile.getParentFile(), \"nonrunning.json\")),\n-            new VersionKeeper(new File(dependencyFile.getParentFile(), \"nochanges.json\")));\n-\n-      dependencyResult.setVersions(initialdependencies.getVersions());\n-      dependencyResult.setInitialversion(initialdependencies.getInitialversion());\n \n-      readCompletedVersions();\n-      init = true;\n-   }\n+ public DependencyReader(final File projectFolder, final File dependencyFile, final String url, final VersionIterator iterator, final Dependencies initialdependencies, final int timeout) {\n+  this(projectFolder, dependencyFile, url, iterator, timeout, new VersionKeeper(new File(dependencyFile.getParentFile(), \"nonrunning.json\")), new VersionKeeper(new File(dependencyFile.getParentFile(), \"nochanges.json\")));\n+  dependencyResult.setVersions(initialdependencies.getVersions());\n+  dependencyResult.setInitialversion(initialdependencies.getInitialversion());\n+  readCompletedVersions();\n+  init = true;\n+ }\n \n    /**\n     * Searches the first commit where a mvn clean packages runs correct, i.e. returns 1\n     * \n     * @param projectFolder\n     */\n-   public boolean searchFirstRunningCommit(final VersionIterator iterator, final TestExecutor executor, final File projectFolder) {\n-      boolean successGettingCommit = iterator.goToFirstCommit();\n-      while (!successGettingCommit && iterator.hasNextCommit()) {\n-         successGettingCommit = iterator.goToNextCommit();\n-      }\n-      if (!successGettingCommit) {\n-         throw new RuntimeException(\"Repository does not contain usable commit - maybe path has changed?\");\n-      } else {\n-         LOG.info(\"Found first commit: \" + iterator.getTag());\n-      }\n-      boolean isVersionRunning = false;\n-      while (!isVersionRunning && iterator.hasNextCommit()) {\n-         isVersionRunning = executor.isVersionRunning(iterator.getTag());\n-\n-         if (!isVersionRunning) {\n-            LOG.debug(\"Buildfile does not exist / version is not running {}\", iterator.getTag());\n-            if (executor.doesBuildfileExist()) {\n-               nonRunning.addVersion(iterator.getTag(), \"Version is not running.\");\n-            } else {\n-               nonRunning.addVersion(iterator.getTag(), \"Buildfile does not exist.\");\n-            }\n-            iterator.goToNextCommit();\n-         }\n-      }\n-      return isVersionRunning;\n+\n+\n+ public boolean searchFirstRunningCommit(final VersionIterator iterator, final TestExecutor executor, final File projectFolder) {\n+  boolean successGettingCommit = iterator.goToFirstCommit();\n+  while (!successGettingCommit && iterator.hasNextCommit()) {\n+   successGettingCommit = iterator.goToNextCommit();\n+  }\n+  if (!successGettingCommit) {\n+   throw new RuntimeException(\"Repository does not contain usable commit - maybe path has changed?\");\n+  } else {\n+   LOG.info(\"Found first commit: \" + iterator.getTag());\n+  }\n+\n+  boolean isVersionRunning = false;\n+  while (!isVersionRunning && iterator.hasNextCommit()) {\n+   isVersionRunning = executor.isVersionRunning(iterator.getTag());\n+   if (!isVersionRunning) {\n+    LOG.debug(\"Buildfile does not exist / version is not running {}\", iterator.getTag());\n+    if (executor.doesBuildfileExist()) {\n+     nonRunning.addVersion(iterator.getTag(), \"Version is not running.\");\n+    } else {\n+     nonRunning.addVersion(iterator.getTag(), \"Buildfile does not exist.\");\n+    }\n+    iterator.goToNextCommit();\n    }\n+  }\n+  return isVersionRunning;\n+ }\n \n    /**\n     * Reads the dependencies of the tests\n     */\n-   public boolean readDependencies() {\n-      try {\n-         if (!init) {\n-            final boolean running = searchFirstRunningCommit(iterator, dependencyManager.getExecutor(), folders.getProjectFolder());\n-            if (!running || !readInitialVersion()) {\n-               LOG.error(\"No version analyzable.\");\n-               return false;\n-            }\n-         }\n-\n-         LOG.debug(\"Analysiere {} Eintr\u00e4ge\", iterator.getSize());\n-\n-         prunedSize += dependencyMap.size();\n-\n-         changeManager.saveOldClasses();\n-         lastRunningVersion = iterator.getTag();\n-         while (iterator.hasNextCommit()) {\n-            iterator.goToNextCommit();\n-            readVersion();\n-         }\n-\n-         LOG.debug(\"Finished dependency-reading\");\n-         return true;\n-      } catch (IOException | InterruptedException | XmlPullParserException e) {\n-         e.printStackTrace();\n-         return false;\n-      }\n-   }\n \n-   public void readVersion() throws IOException, FileNotFoundException {\n-      try {\n-         final int tests = analyseVersion(changeManager);\n-         DependencyReaderUtil.write(dependencyResult, dependencyFile);\n-         overallSize += dependencyMap.size();\n-         prunedSize += tests;\n-\n-         LOG.info(\"Overall-tests: {} Executed tests with pruning: {}\", overallSize, prunedSize);\n-\n-         dependencyManager.getExecutor().deleteTemporaryFiles();\n-         final File xmlFileFolder = TestResultManager.getXMLFileFolder(folders, folders.getProjectFolder());\n-         if (xmlFileFolder != null) {\n-            FileUtils.deleteDirectory(xmlFileFolder);\n-         }\n-      } catch (final ParseProblemException ppe) {\n-         ppe.printStackTrace();\n-      } catch (final XmlPullParserException e) {\n-         e.printStackTrace();\n-      } catch (final InterruptedException e) {\n-         // TODO Auto-generated catch block\n-         e.printStackTrace();\n-      }\n+ public boolean readDependencies() {\n+  try {\n+   if (!init) {\n+    final boolean running = searchFirstRunningCommit(iterator, dependencyManager.getExecutor(), folders.getProjectFolder());\n+    if (!running || !readInitialVersion()) {\n+     LOG.error(\"No version analyzable.\");\n+     return false;\n+    }\n    }\n-\n-   public Dependencies getDependencies() {\n-      return dependencyResult;\n+   LOG.debug(\"Analysiere {} Eintr\u00e4ge\", iterator.getSize());\n+   prunedSize += dependencyMap.size();\n+   changeManager.saveOldClasses();\n+   lastRunningVersion = iterator.getTag();\n+   while (iterator.hasNextCommit()) {\n+    iterator.goToNextCommit();\n+    readVersion();\n    }\n-\n-   public void setIterator(final VersionIteratorGit reserveIterator) {\n-      this.iterator = reserveIterator;\n+   LOG.debug(\"Finished dependency-reading\");\n+   return true;\n+  } catch (IOException | InterruptedException | XmlPullParserException e) {\n+   e.printStackTrace();\n+   return false;\n+  }\n+ }\n+\n+ public void readVersion() throws IOException, FileNotFoundException {\n+  try {\n+   final int tests = analyseVersion(changeManager);\n+   DependencyReaderUtil.write(dependencyResult, dependencyFile);\n+   overallSize += dependencyMap.size();\n+   prunedSize += tests;\n+   LOG.info(\"Overall-tests: {} Executed tests with pruning: {}\", overallSize, prunedSize);\n+   dependencyManager.getExecutor().deleteTemporaryFiles();\n+\n+   final File xmlFileFolder = TestResultManager.getXMLFileFolder(folders, folders.getProjectFolder());\n+   if (xmlFileFolder != null) {\n+    FileUtils.deleteDirectory(xmlFileFolder);\n    }\n-\n-}\n+  } catch (final ParseProblemException ppe) {\n+   ppe.printStackTrace();\n+  } catch (final XmlPullParserException e) {\n+   e.printStackTrace();\n+  } catch (final InterruptedException e) {\n+         // TODO Auto-generated catch block\n+   e.printStackTrace();\n+  }\n+ }\n+\n+ public Dependencies getDependencies() {\n+  return dependencyResult;\n+ }\n+\n+ public void setIterator(final VersionIteratorGit reserveIterator) {\n+  this.iterator = reserveIterator;\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 175
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Line is longer than 200 characters (found 205).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/109/DependencyReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_random/109/DependencyReader.java\nindex caccd67fddc..7c565e35a9f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/109/DependencyReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_random/109/DependencyReader.java\n@@ -75,8 +75,9 @@ public class DependencyReader extends DependencyReaderBase {\n     * @param url\n     * @param iterator\n     */\n-   public DependencyReader(final File projectFolder, final File dependencyFile, final String url, final VersionIterator iterator, final int timeout, final VersionKeeper nonRunning, final VersionKeeper nochange) {\n-      super(new Dependencies(), projectFolder, dependencyFile, timeout, nochange);\n+\t\t\t\tpublic\n+   DependencyReader(final File projectFolder, final File dependencyFile, final String url, final VersionIterator iterator, final int timeout, final VersionKeeper nonRunning, final VersionKeeper nochange) {\n+       super(new Dependencies(), projectFolder, dependencyFile, timeout, nochange);\n \n       this.iterator = iterator;\n \n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}