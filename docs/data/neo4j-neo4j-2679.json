{
    "project_name": "neo4j-neo4j",
    "error_id": "2679",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "56",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "80",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "128",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "136",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "137",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "131",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "90",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "150",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "151",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "106",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "133",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "133",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2679/DiagnosticsReporter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2679/DiagnosticsReporter.java\nindex be255cf874f..4ac26a940c6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2679/DiagnosticsReporter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2679/DiagnosticsReporter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.diagnostics;\n \n import java.io.BufferedInputStream;\n@@ -50,91 +51,90 @@ public class DiagnosticsReporter\n {\n     private final List<DiagnosticsOfflineReportProvider> providers = new ArrayList<>();\n     private final Set<String> availableClassifiers = new TreeSet<>();\n-    private final Map<String,List<DiagnosticsReportSource>> additionalSources = new HashMap<>();\n+    private final Map<String, List<DiagnosticsReportSource>> additionalSources = new HashMap<>();\n \n-    public void registerOfflineProvider( DiagnosticsOfflineReportProvider provider )\n+    public void registerOfflineProvider(DiagnosticsOfflineReportProvider provider)\n     {\n-        providers.add( provider );\n-        availableClassifiers.addAll( provider.getFilterClassifiers() );\n+        providers.add(provider);\n+        availableClassifiers.addAll(provider.getFilterClassifiers());\n     }\n \n-    public void registerSource( String classifier, DiagnosticsReportSource source )\n+    public void registerSource(String classifier, DiagnosticsReportSource source)\n     {\n-        availableClassifiers.add( classifier );\n-        additionalSources.computeIfAbsent( classifier, c -> new ArrayList<>() ).add( source );\n+        availableClassifiers.add(classifier);\n+        additionalSources.computeIfAbsent(classifier, c -> new ArrayList<>()).add(source);\n     }\n \n-    public void dump( Set<String> classifiers, Path destination, DiagnosticsReporterProgress progress, boolean force ) throws IOException\n+    public void dump(Set<String> classifiers, Path destination, DiagnosticsReporterProgress progress, boolean force) throws IOException\n     {\n-        final List<DiagnosticsReportSource> sources = getAllSources( classifiers );\n-        final Path destinationDir = createDirectories( destination.getParent() );\n+        final List<DiagnosticsReportSource> sources = getAllSources(classifiers);\n+        final Path destinationDir = createDirectories(destination.getParent());\n \n-        if ( !force )\n+        if (!force)\n         {\n-            estimateSizeAndCheckAvailableDiskSpace( destination, sources, destinationDir );\n+            estimateSizeAndCheckAvailableDiskSpace(destination, sources, destinationDir);\n         }\n \n-        progress.setTotalSteps( sources.size() );\n-        try ( ZipOutputStream zip = new ZipOutputStream( new BufferedOutputStream( newOutputStream( destination, CREATE_NEW, WRITE ) ), UTF_8 ) )\n+        progress.setTotalSteps(sources.size());\n+        try (ZipOutputStream zip = new ZipOutputStream(new BufferedOutputStream(newOutputStream(destination, CREATE_NEW, WRITE)), UTF_8))\n         {\n-            writeDiagnostics( zip, sources, progress );\n+            writeDiagnostics(zip, sources, progress);\n         }\n     }\n \n-    private void writeDiagnostics( ZipOutputStream zip, List<DiagnosticsReportSource> sources, DiagnosticsReporterProgress progress )\n+    private void writeDiagnostics(ZipOutputStream zip, List<DiagnosticsReportSource> sources, DiagnosticsReporterProgress progress)\n     {\n         int step = 0;\n-        final byte[] buf = new byte[(int) kibiBytes( 8 )]; // same as default buf size in buffered streams\n-        for ( DiagnosticsReportSource source : sources )\n+        final byte[] buf = new byte[(int) kibiBytes(8)]; // same as default buf size in buffered streams\n+        for (DiagnosticsReportSource source : sources)\n         {\n             ++step;\n-            progress.started( step, source.destinationPath() );\n-            try ( InputStream rawInput = source.newInputStream();\n-                    InputStream input = new ProgressAwareInputStream( new BufferedInputStream( rawInput ), source.estimatedSize(), progress::percentChanged ) )\n+            progress.started(step, source.destinationPath());\n+            try (InputStream rawInput = source.newInputStream();\n+                 InputStream input = new ProgressAwareInputStream(new BufferedInputStream(rawInput), source.estimatedSize(), progress::percentChanged))\n             {\n-                final ZipEntry entry = new ZipEntry( source.destinationPath() );\n-                zip.putNextEntry( entry );\n+                final ZipEntry entry = new ZipEntry(source.destinationPath());\n+                zip.putNextEntry(entry);\n \n                 int chunkSize;\n-                while ( (chunkSize = input.read( buf )) >= 0 )\n+                while ((chunkSize = input.read(buf)) >= 0)\n                 {\n-                    zip.write( buf, 0, chunkSize );\n+                    zip.write(buf, 0, chunkSize);\n                 }\n \n                 zip.closeEntry();\n-            }\n-            catch ( Exception e )\n+            } catch (Exception e)\n             {\n-                progress.error( \"Failed to write \" + source.destinationPath(), e );\n+                progress.error(\"Failed to write \" + source.destinationPath(), e);\n                 continue;\n             }\n             progress.finished();\n         }\n     }\n \n-    private List<DiagnosticsReportSource> getAllSources( Set<String> classifiers )\n+    private List<DiagnosticsReportSource> getAllSources(Set<String> classifiers)\n     {\n         final List<DiagnosticsReportSource> allSources = new ArrayList<>();\n-        providers.forEach( provider -> allSources.addAll( provider.getDiagnosticsSources( classifiers ) ) );\n-        additionalSources.forEach( ( classifier, sources ) ->\n+        providers.forEach(provider -> allSources.addAll(provider.getDiagnosticsSources(classifiers)));\n+        additionalSources.forEach((classifier, sources) ->\n         {\n-            if ( classifiers.contains( \"all\" ) || classifiers.contains( classifier ) )\n+            if (classifiers.contains(\"all\") || classifiers.contains(classifier))\n             {\n-                allSources.addAll( sources );\n+                allSources.addAll(sources);\n             }\n-        } );\n+        });\n         return allSources;\n     }\n \n-    private void estimateSizeAndCheckAvailableDiskSpace( Path destination, List<DiagnosticsReportSource> sources, Path destinationDir )\n+    private void estimateSizeAndCheckAvailableDiskSpace(Path destination, List<DiagnosticsReportSource> sources, Path destinationDir)\n     {\n \n-        final long estimatedFinalSize = sources.stream().mapToLong( DiagnosticsReportSource::estimatedSize ).sum();\n+        final long estimatedFinalSize = sources.stream().mapToLong(DiagnosticsReportSource::estimatedSize).sum();\n         final long freeSpace = destinationDir.toFile().getFreeSpace();\n-        if ( estimatedFinalSize > freeSpace )\n+        if (estimatedFinalSize > freeSpace)\n         {\n-            throw new RuntimeException( format( \"Free available disk space for %s is %s, worst case estimate is %s. To ignore add '--force' to the command.\",\n-                    destination.getFileName(), bytesToString( freeSpace ), bytesToString( estimatedFinalSize ) )\n+            throw new RuntimeException(format(\"Free available disk space for %s is %s, worst case estimate is %s. To ignore add '--force' to the command.\",\n+              destination.getFileName(), bytesToString(freeSpace), bytesToString(estimatedFinalSize))\n             );\n         }\n     }\n@@ -144,12 +144,12 @@ public class DiagnosticsReporter\n         return availableClassifiers;\n     }\n \n-    public void registerAllOfflineProviders( Config config, Path storeDirectory, FileSystemAbstraction fs, String defaultDatabaseName )\n+    public void registerAllOfflineProviders(Config config, Path storeDirectory, FileSystemAbstraction fs, String defaultDatabaseName)\n     {\n-        for ( DiagnosticsOfflineReportProvider provider : Services.loadAll( DiagnosticsOfflineReportProvider.class ) )\n+        for (DiagnosticsOfflineReportProvider provider : Services.loadAll(DiagnosticsOfflineReportProvider.class))\n         {\n-            provider.init( fs, defaultDatabaseName, config, storeDirectory );\n-            registerOfflineProvider( provider );\n+            provider.init(fs, defaultDatabaseName, config, storeDirectory);\n+            registerOfflineProvider(provider);\n         }\n     }\n }\n",
            "diff_size": 44
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2679/DiagnosticsReporter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/2679/DiagnosticsReporter.java\nindex be255cf874f..4ea1c487f92 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2679/DiagnosticsReporter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/2679/DiagnosticsReporter.java\n@@ -152,4 +152,4 @@ public class DiagnosticsReporter\n             registerOfflineProvider( provider );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}