{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2067",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "292",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "292",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "305",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2067/CappedLogger.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2067/CappedLogger.java\nindex 2fcb38b5aa2..881711fba56 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2067/CappedLogger.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2067/CappedLogger.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.util;\n \n import java.time.Clock;\n@@ -31,315 +32,317 @@ import org.neo4j.logging.Log;\n /**\n  * A CappedLogger will accept log messages, unless they occur \"too much\", in which case the messages will be ignored\n  * until some time passes, or the logger is reset.\n- *\n+ * <p>\n  * It is also desirable to be aware that log capping is taking place, so we don't mistakenly lose log output due to\n  * output capping.\n- *\n+ * <p>\n  * By default, the CappedLogger does not filter out any messages. Filtering can be configured at any time using the\n  * \"set\" and \"unset\" methods.\n  */\n public class CappedLogger\n {\n-    private final Log delegate;\n-    // We use the filter indirection so we can atomically update the configuration without locking\n-    private volatile Filter filter;\n+  private final Log delegate;\n+  // We use the filter indirection so we can atomically update the configuration without locking\n+  private volatile Filter filter;\n \n-    public CappedLogger( @Nonnull Log delegate )\n+  public CappedLogger(@Nonnull Log delegate)\n+  {\n+    if (delegate == null)\n     {\n-        if ( delegate == null )\n-        {\n-            throw new IllegalArgumentException( \"The delegate StringLogger cannot be null\" );\n-        }\n-        filter = new Filter();\n-        this.delegate = delegate;\n+      throw new IllegalArgumentException(\"The delegate StringLogger cannot be null\");\n     }\n+    filter = new Filter();\n+    this.delegate = delegate;\n+  }\n \n-    public void debug( @Nonnull String msg )\n+  public void debug(@Nonnull String msg)\n+  {\n+    if (filter.accept(msg, null))\n     {\n-        if ( filter.accept( msg, null ) )\n-        {\n-            delegate.debug( msg );\n-        }\n+      delegate.debug(msg);\n     }\n+  }\n \n-    public void debug( @Nonnull String msg, @Nonnull Throwable cause )\n+  public void debug(@Nonnull String msg, @Nonnull Throwable cause)\n+  {\n+    if (filter.accept(msg, cause))\n     {\n-        if ( filter.accept( msg, cause ) )\n-        {\n-            delegate.debug( msg, cause );\n-        }\n+      delegate.debug(msg, cause);\n     }\n+  }\n \n-    public void info( @Nonnull String msg )\n+  public void info(@Nonnull String msg)\n+  {\n+    if (filter.accept(msg, null))\n     {\n-        if ( filter.accept( msg, null ) )\n-        {\n-            delegate.info( msg );\n-        }\n+      delegate.info(msg);\n     }\n+  }\n \n-    public void info( @Nonnull String msg, @Nonnull Throwable cause )\n+  public void info(@Nonnull String msg, @Nonnull Throwable cause)\n+  {\n+    if (filter.accept(msg, cause))\n     {\n-        if ( filter.accept( msg, cause ) )\n-        {\n-            delegate.info( msg, cause );\n-        }\n+      delegate.info(msg, cause);\n     }\n+  }\n \n-    public void warn( @Nonnull String msg )\n+  public void warn(@Nonnull String msg)\n+  {\n+    if (filter.accept(msg, null))\n     {\n-        if ( filter.accept( msg, null ) )\n-        {\n-            delegate.warn( msg );\n-        }\n+      delegate.warn(msg);\n     }\n+  }\n \n-    public void warn( @Nonnull String msg, @Nonnull Throwable cause )\n+  public void warn(@Nonnull String msg, @Nonnull Throwable cause)\n+  {\n+    if (filter.accept(msg, cause))\n     {\n-        if ( filter.accept( msg, cause ) )\n-        {\n-            delegate.warn( msg, cause );\n-        }\n+      delegate.warn(msg, cause);\n     }\n+  }\n \n-    public void error( @Nonnull String msg )\n+  public void error(@Nonnull String msg)\n+  {\n+    if (filter.accept(msg, null))\n     {\n-        if ( filter.accept( msg, null ) )\n-        {\n-            delegate.error( msg );\n-        }\n+      delegate.error(msg);\n     }\n+  }\n \n-    public void error( @Nonnull String msg, @Nonnull Throwable cause )\n+  public void error(@Nonnull String msg, @Nonnull Throwable cause)\n+  {\n+    if (filter.accept(msg, cause))\n     {\n-        if ( filter.accept( msg, cause ) )\n-        {\n-            delegate.error( msg, cause );\n-        }\n+      delegate.error(msg, cause);\n     }\n-\n-    /**\n-     * Reset the filtering state of this CappedLogger. This usually means that something good happened, and that all\n-     * filtering states that grows towards a state where the log messages are filtered out, should calm down and reset.\n-     *\n-     * Specifically, this means that the counter in the count limit should return to zero, and that the time limit and\n-     * duplicate filter should forget about past messages.\n-     */\n-    public void reset()\n+  }\n+\n+  /**\n+   * Reset the filtering state of this CappedLogger. This usually means that something good happened, and that all\n+   * filtering states that grows towards a state where the log messages are filtered out, should calm down and reset.\n+   * <p>\n+   * Specifically, this means that the counter in the count limit should return to zero, and that the time limit and\n+   * duplicate filter should forget about past messages.\n+   */\n+  public void reset()\n+  {\n+    filter = filter.reset();\n+  }\n+\n+  /**\n+   * Set a limit to the amount of logging that this logger will accept between resets.\n+   *\n+   * @param limit The number of log messages that the CappedLogger will let through in between resets.\n+   */\n+  public CappedLogger setCountLimit(int limit)\n+  {\n+    if (limit < 1)\n     {\n-        filter = filter.reset();\n+      throw new IllegalArgumentException(\"The count limit must be positive\");\n     }\n-\n-    /**\n-     * Set a limit to the amount of logging that this logger will accept between resets.\n-     * @param limit The number of log messages that the CappedLogger will let through in between resets.\n-     */\n-    public CappedLogger setCountLimit( int limit )\n+    filter = filter.setCountLimit(limit);\n+    return this;\n+  }\n+\n+  /**\n+   * Unset the count limit, and allow any number of messages through, provided other limits don't apply.\n+   */\n+  public CappedLogger unsetCountLimit()\n+  {\n+    filter = filter.unsetCountLimit();\n+    return this;\n+  }\n+\n+  /**\n+   * Set a time based limit to the amount of logging that this logger will accept between resets. With a time limit\n+   * of 1 second, for instance, then the logger will log at most one message per second.\n+   *\n+   * @param time  The time amount, must be positive.\n+   * @param unit  The time unit.\n+   * @param clock The clock to use for reading the current time when checking this limit.\n+   */\n+  public CappedLogger setTimeLimit(long time, @Nonnull TimeUnit unit, @Nonnull Clock clock)\n+  {\n+    if (time < 1)\n     {\n-        if ( limit < 1 )\n-        {\n-            throw new IllegalArgumentException( \"The count limit must be positive\" );\n-        }\n-        filter = filter.setCountLimit( limit );\n-        return this;\n+      throw new IllegalArgumentException(\"The time limit must be positive\");\n     }\n-\n-    /**\n-     * Unset the count limit, and allow any number of messages through, provided other limits don't apply.\n-     */\n-    public CappedLogger unsetCountLimit()\n+    if (unit == null)\n     {\n-        filter = filter.unsetCountLimit();\n-        return this;\n+      throw new IllegalArgumentException(\"The time unit cannot be null\");\n     }\n-\n-    /**\n-     * Set a time based limit to the amount of logging that this logger will accept between resets. With a time limit\n-     * of 1 second, for instance, then the logger will log at most one message per second.\n-     * @param time The time amount, must be positive.\n-     * @param unit The time unit.\n-     * @param clock The clock to use for reading the current time when checking this limit.\n-     */\n-    public CappedLogger setTimeLimit( long time, @Nonnull TimeUnit unit, @Nonnull Clock clock )\n+    if (clock == null)\n     {\n-        if ( time < 1 )\n-        {\n-            throw new IllegalArgumentException( \"The time limit must be positive\" );\n-        }\n-        if ( unit == null )\n-        {\n-            throw new IllegalArgumentException( \"The time unit cannot be null\" );\n-        }\n-        if ( clock == null )\n-        {\n-            throw new IllegalArgumentException( \"The clock used for time limiting cannot be null\" );\n-        }\n-        filter = filter.setTimeLimit( time, unit, clock );\n-        return this;\n+      throw new IllegalArgumentException(\"The clock used for time limiting cannot be null\");\n     }\n-\n-    /**\n-     * Unset the time limit, and allow any number of messages through, as often as possible, provided other limits\n-     * don't apply.\n-     */\n-    public CappedLogger unsetTimeLimit()\n+    filter = filter.setTimeLimit(time, unit, clock);\n+    return this;\n+  }\n+\n+  /**\n+   * Unset the time limit, and allow any number of messages through, as often as possible, provided other limits\n+   * don't apply.\n+   */\n+  public CappedLogger unsetTimeLimit()\n+  {\n+    filter = filter.unsetTimeLimit();\n+    return this;\n+  }\n+\n+  /**\n+   * Enable or disable filtering of duplicate messages. This filtering only looks at the previous message, so a\n+   * sequence of identical messages will only have that message logged once, but a sequence of two alternating\n+   * messages will get logged in full.\n+   *\n+   * @param enabled {@code true} if duplicates should be filtered, {@code false} if they should not.\n+   */\n+  public CappedLogger setDuplicateFilterEnabled(boolean enabled)\n+  {\n+    filter = filter.setDuplicateFilterEnabled(enabled);\n+    return this;\n+  }\n+\n+  private static class Filter\n+  {\n+    private static final AtomicIntegerFieldUpdater<Filter> CURRENT_COUNT =\n+        AtomicIntegerFieldUpdater.newUpdater(Filter.class, \"currentCount\");\n+    private static final AtomicLongFieldUpdater<Filter> LAST_CHECK =\n+        AtomicLongFieldUpdater.newUpdater(Filter.class, \"lastCheck\");\n+\n+    // The thread-safety of these normal fields are guarded by the volatile reads and writes to the\n+    // CappedLogger.filter field.\n+    private boolean hasCountLimit;\n+    private int countLimit;\n+    private long timeLimitMillis;\n+    private final Clock clock;\n+    private boolean filterDuplicates;\n+\n+    // Atomically updated\n+    private volatile int currentCount;\n+    private volatile long lastCheck;\n+\n+    // Read and updated together; guarded by synchronized(this) in checkDuplicate()\n+    private String lastMessage;\n+    private Throwable lastException;\n+\n+    private Filter()\n     {\n-        filter = filter.unsetTimeLimit();\n-        return this;\n+      this(false, 0, 0, 0, 0, null, false);\n     }\n \n-    /**\n-     * Enable or disable filtering of duplicate messages. This filtering only looks at the previous message, so a\n-     * sequence of identical messages will only have that message logged once, but a sequence of two alternating\n-     * messages will get logged in full.\n-     * @param enabled {@code true} if duplicates should be filtered, {@code false} if they should not.\n-     */\n-    public CappedLogger setDuplicateFilterEnabled( boolean enabled )\n+    private Filter(\n+        boolean hasCountLimit,\n+        int countLimit,\n+        int currentCount,\n+        long timeLimitMillis,\n+        long lastCheck,\n+        Clock clock, boolean filterDuplicates)\n     {\n-        filter = filter.setDuplicateFilterEnabled( enabled );\n-        return this;\n+      this.hasCountLimit = hasCountLimit;\n+      this.countLimit = countLimit;\n+      this.currentCount = currentCount;\n+      this.timeLimitMillis = timeLimitMillis;\n+      this.lastCheck = lastCheck;\n+      this.clock = clock;\n+      this.filterDuplicates = filterDuplicates;\n     }\n \n-    private static class Filter\n+    public Filter setCountLimit(int limit)\n     {\n-        private static final AtomicIntegerFieldUpdater<Filter> CURRENT_COUNT =\n-                AtomicIntegerFieldUpdater.newUpdater( Filter.class, \"currentCount\" );\n-        private static final AtomicLongFieldUpdater<Filter> LAST_CHECK =\n-                AtomicLongFieldUpdater.newUpdater( Filter.class, \"lastCheck\" );\n-\n-        // The thread-safety of these normal fields are guarded by the volatile reads and writes to the\n-        // CappedLogger.filter field.\n-        private boolean hasCountLimit;\n-        private int countLimit;\n-        private long timeLimitMillis;\n-        private final Clock clock;\n-        private boolean filterDuplicates;\n-\n-        // Atomically updated\n-        private volatile int currentCount;\n-        private volatile long lastCheck;\n-\n-        // Read and updated together; guarded by synchronized(this) in checkDuplicate()\n-        private String lastMessage;\n-        private Throwable lastException;\n-\n-        private Filter()\n-        {\n-            this( false, 0, 0, 0, 0, null, false );\n-        }\n-\n-        private Filter(\n-                boolean hasCountLimit,\n-                int countLimit,\n-                int currentCount,\n-                long timeLimitMillis,\n-                long lastCheck,\n-                Clock clock, boolean filterDuplicates )\n-        {\n-            this.hasCountLimit = hasCountLimit;\n-            this.countLimit = countLimit;\n-            this.currentCount = currentCount;\n-            this.timeLimitMillis = timeLimitMillis;\n-            this.lastCheck = lastCheck;\n-            this.clock = clock;\n-            this.filterDuplicates = filterDuplicates;\n-        }\n-\n-        public Filter setCountLimit( int limit )\n-        {\n-            return new Filter( true, limit, currentCount, timeLimitMillis, lastCheck, clock, filterDuplicates );\n-        }\n+      return new Filter(true, limit, currentCount, timeLimitMillis, lastCheck, clock, filterDuplicates);\n+    }\n \n-        public boolean accept( @Nonnull String msg, @Nullable Throwable cause )\n-        {\n-            return (!hasCountLimit || (getAndIncrementCurrentCount() < countLimit))\n-                    && (clock == null || !checkExpiredAndSetLastCheckTime())\n-                    && (!filterDuplicates || checkDuplicate( msg, cause ));\n-        }\n+    public boolean accept(@Nonnull String msg, @Nullable Throwable cause)\n+    {\n+      return (!hasCountLimit || (getAndIncrementCurrentCount() < countLimit))\n+          && (clock == null || !checkExpiredAndSetLastCheckTime())\n+          && (!filterDuplicates || checkDuplicate(msg, cause));\n+    }\n \n-        public int getAndIncrementCurrentCount()\n-        {\n-            return CURRENT_COUNT.getAndIncrement( this );\n-        }\n+    public int getAndIncrementCurrentCount()\n+    {\n+      return CURRENT_COUNT.getAndIncrement(this);\n+    }\n \n-        private boolean checkExpiredAndSetLastCheckTime()\n+    private boolean checkExpiredAndSetLastCheckTime()\n+    {\n+      long now = clock.millis();\n+      long check = this.lastCheck;\n+      if (check > now - timeLimitMillis)\n+      {\n+        return true;\n+      }\n+      while (!LAST_CHECK.compareAndSet(this, check, now))\n+      {\n+        check = lastCheck;\n+        if (check > now)\n         {\n-            long now = clock.millis();\n-            long check = this.lastCheck;\n-            if ( check > now - timeLimitMillis )\n-            {\n-                return true;\n-            }\n-            while ( !LAST_CHECK.compareAndSet( this, check, now ) )\n-            {\n-                check = lastCheck;\n-                if ( check > now )\n-                {\n-                    break;\n-                }\n-            }\n-            return false;\n+          break;\n         }\n+      }\n+      return false;\n+    }\n \n-        private synchronized boolean checkDuplicate( @Nonnull String msg, @Nullable Throwable cause )\n-        {\n-            String last = lastMessage;\n-            Throwable exc = lastException;\n-            if ( stringEqual( last, msg ) && sameClass( cause, exc ) && sameMsg( cause, exc ) )\n-            {\n-                // Duplicate! Filter it out.\n-                return false;\n-            }\n-            else\n-            {\n-                // Distinct! Update and let it through.\n-                lastMessage = msg;\n-                lastException = cause;\n-                return true;\n-            }\n-        }\n+    private synchronized boolean checkDuplicate(@Nonnull String msg, @Nullable Throwable cause)\n+    {\n+      String last = lastMessage;\n+      Throwable exc = lastException;\n+      if (stringEqual(last, msg) && sameClass(cause, exc) && sameMsg(cause, exc))\n+      {\n+        // Duplicate! Filter it out.\n+        return false;\n+      } else\n+      {\n+        // Distinct! Update and let it through.\n+        lastMessage = msg;\n+        lastException = cause;\n+        return true;\n+      }\n+    }\n \n-        private boolean sameMsg( @Nullable Throwable cause, @Nullable Throwable exc )\n-        {\n-            return ( cause == null && exc == null ) ||\n-                    ( cause != null && exc != null && stringEqual( exc.getMessage(), cause.getMessage() ) );\n-        }\n+    private boolean sameMsg(@Nullable Throwable cause, @Nullable Throwable exc)\n+    {\n+      return (cause == null && exc == null) ||\n+          (cause != null && exc != null && stringEqual(exc.getMessage(), cause.getMessage()));\n+    }\n \n-        private boolean stringEqual( String a, String b )\n-        {\n-            return a == null ? b == null : a.equals( b );\n-        }\n+    private boolean stringEqual(String a, String b)\n+    {\n+      return a == null ? b == null : a.equals(b);\n+    }\n \n-        private boolean sameClass( @Nullable Throwable cause, @Nullable Throwable exc )\n-        {\n-            return ( cause == null && exc == null ) ||\n-                    ( cause != null && exc != null && exc.getClass().equals( cause.getClass() ) );\n-        }\n+    private boolean sameClass(@Nullable Throwable cause, @Nullable Throwable exc)\n+    {\n+      return (cause == null && exc == null) ||\n+          (cause != null && exc != null && exc.getClass().equals(cause.getClass()));\n+    }\n \n-        public Filter reset()\n-        {\n-            return new Filter( hasCountLimit, countLimit, 0, timeLimitMillis, 0, clock, filterDuplicates );\n-        }\n+    public Filter reset()\n+    {\n+      return new Filter(hasCountLimit, countLimit, 0, timeLimitMillis, 0, clock, filterDuplicates);\n+    }\n \n-        public Filter unsetCountLimit()\n-        {\n-            return new Filter( false, 0, currentCount, timeLimitMillis, lastCheck, clock, filterDuplicates );\n-        }\n+    public Filter unsetCountLimit()\n+    {\n+      return new Filter(false, 0, currentCount, timeLimitMillis, lastCheck, clock, filterDuplicates);\n+    }\n \n-        public Filter setTimeLimit( long time, @Nonnull TimeUnit unit, @Nonnull Clock clock )\n-        {\n-            return new Filter(\n-                    hasCountLimit, countLimit, currentCount, unit.toMillis( time ), lastCheck, clock, filterDuplicates );\n-        }\n+    public Filter setTimeLimit(long time, @Nonnull TimeUnit unit, @Nonnull Clock clock)\n+    {\n+      return new Filter(\n+          hasCountLimit, countLimit, currentCount, unit.toMillis(time), lastCheck, clock, filterDuplicates);\n+    }\n \n-        public Filter unsetTimeLimit()\n-        {\n-            return new Filter( hasCountLimit, countLimit, currentCount, 0, lastCheck, null, filterDuplicates );\n-        }\n+    public Filter unsetTimeLimit()\n+    {\n+      return new Filter(hasCountLimit, countLimit, currentCount, 0, lastCheck, null, filterDuplicates);\n+    }\n \n-        public Filter setDuplicateFilterEnabled( boolean enabled )\n-        {\n-            return new Filter( hasCountLimit, countLimit, currentCount, timeLimitMillis, lastCheck, clock, enabled );\n-        }\n+    public Filter setDuplicateFilterEnabled(boolean enabled)\n+    {\n+      return new Filter(hasCountLimit, countLimit, currentCount, timeLimitMillis, lastCheck, clock, enabled);\n     }\n+  }\n }\n",
            "diff_size": 372
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "255",
                    "column": "84",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "268",
                    "column": "23",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "275",
                    "column": "27",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "303",
                    "column": "53",
                    "severity": "error",
                    "message": "'||' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "313",
                    "column": "53",
                    "severity": "error",
                    "message": "'||' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2067/CappedLogger.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2067/CappedLogger.java\nindex 2fcb38b5aa2..94676ad7ba2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2067/CappedLogger.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2067/CappedLogger.java\n@@ -50,7 +50,8 @@ public class CappedLogger\n         {\n             throw new IllegalArgumentException( \"The delegate StringLogger cannot be null\" );\n         }\n-        filter = new Filter();\n+\n+filter = new Filter();\n         this.delegate = delegate;\n     }\n \n@@ -140,7 +141,8 @@ public class CappedLogger\n         {\n             throw new IllegalArgumentException( \"The count limit must be positive\" );\n         }\n-        filter = filter.setCountLimit( limit );\n+\n+filter = filter.setCountLimit( limit );\n         return this;\n     }\n \n@@ -166,15 +168,18 @@ public class CappedLogger\n         {\n             throw new IllegalArgumentException( \"The time limit must be positive\" );\n         }\n-        if ( unit == null )\n+\n+if ( unit == null )\n         {\n             throw new IllegalArgumentException( \"The time unit cannot be null\" );\n         }\n-        if ( clock == null )\n+\n+if ( clock == null )\n         {\n             throw new IllegalArgumentException( \"The clock used for time limiting cannot be null\" );\n         }\n-        filter = filter.setTimeLimit( time, unit, clock );\n+\n+filter = filter.setTimeLimit( time, unit, clock );\n         return this;\n     }\n \n@@ -202,12 +207,10 @@ public class CappedLogger\n \n     private static class Filter\n     {\n-        private static final AtomicIntegerFieldUpdater<Filter> CURRENT_COUNT =\n-                AtomicIntegerFieldUpdater.newUpdater( Filter.class, \"currentCount\" );\n-        private static final AtomicLongFieldUpdater<Filter> LAST_CHECK =\n-                AtomicLongFieldUpdater.newUpdater( Filter.class, \"lastCheck\" );\n+        private static final AtomicIntegerFieldUpdater<Filter> CURRENT_COUNT = AtomicIntegerFieldUpdater.newUpdater( Filter.class, \"currentCount\" );\n \n-        // The thread-safety of these normal fields are guarded by the volatile reads and writes to the\n+private static final AtomicLongFieldUpdater<Filter> LAST_CHECK = AtomicLongFieldUpdater.newUpdater( Filter.class, \"lastCheck\" );\n+    // The thread-safety of these normal fields are guarded by the volatile reads and writes to the\n         // CappedLogger.filter field.\n         private boolean hasCountLimit;\n         private int countLimit;\n@@ -228,10 +231,7 @@ public class CappedLogger\n             this( false, 0, 0, 0, 0, null, false );\n         }\n \n-        private Filter(\n-                boolean hasCountLimit,\n-                int countLimit,\n-                int currentCount,\n+        private Filter( boolean hasCountLimit, int countLimit, int currentCount,\n                 long timeLimitMillis,\n                 long lastCheck,\n                 Clock clock, boolean filterDuplicates )\n@@ -252,8 +252,7 @@ public class CappedLogger\n \n         public boolean accept( @Nonnull String msg, @Nullable Throwable cause )\n         {\n-            return (!hasCountLimit || (getAndIncrementCurrentCount() < countLimit))\n-                    && (clock == null || !checkExpiredAndSetLastCheckTime())\n+            return (!hasCountLimit || (getAndIncrementCurrentCount() < countLimit))&& ( clock == null || !checkExpiredAndSetLastCheckTime())\n                     && (!filterDuplicates || checkDuplicate( msg, cause ));\n         }\n \n@@ -266,14 +265,14 @@ public class CappedLogger\n         {\n             long now = clock.millis();\n             long check = this.lastCheck;\n-            if ( check > now - timeLimitMillis )\n+            if ( check> now - timeLimitMillis )\n             {\n                 return true;\n             }\n             while ( !LAST_CHECK.compareAndSet( this, check, now ) )\n             {\n                 check = lastCheck;\n-                if ( check > now )\n+                if ( check> now )\n                 {\n                     break;\n                 }\n@@ -301,8 +300,7 @@ public class CappedLogger\n \n         private boolean sameMsg( @Nullable Throwable cause, @Nullable Throwable exc )\n         {\n-            return ( cause == null && exc == null ) ||\n-                    ( cause != null && exc != null && stringEqual( exc.getMessage(), cause.getMessage() ) );\n+            return ( cause == null && exc == null ) ||( cause != null && exc != null && stringEqual( exc.getMessage(), cause.getMessage() ) );\n         }\n \n         private boolean stringEqual( String a, String b )\n@@ -312,8 +310,7 @@ public class CappedLogger\n \n         private boolean sameClass( @Nullable Throwable cause, @Nullable Throwable exc )\n         {\n-            return ( cause == null && exc == null ) ||\n-                    ( cause != null && exc != null && exc.getClass().equals( cause.getClass() ) );\n+            return ( cause == null && exc == null ) ||( cause != null && exc != null && exc.getClass().equals( cause.getClass() ) );\n         }\n \n         public Filter reset()\n@@ -328,8 +325,7 @@ public class CappedLogger\n \n         public Filter setTimeLimit( long time, @Nonnull TimeUnit unit, @Nonnull Clock clock )\n         {\n-            return new Filter(\n-                    hasCountLimit, countLimit, currentCount, unit.toMillis( time ), lastCheck, clock, filterDuplicates );\n+            return new Filter( hasCountLimit, countLimit, currentCount, unit.toMillis( time ), lastCheck, clock, filterDuplicates );\n         }\n \n         public Filter unsetTimeLimit()\n@@ -342,4 +338,4 @@ public class CappedLogger\n             return new Filter( hasCountLimit, countLimit, currentCount, timeLimitMillis, lastCheck, clock, enabled );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 31
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}