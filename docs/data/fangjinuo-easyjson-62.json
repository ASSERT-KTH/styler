{
    "project_name": "fangjinuo-easyjson",
    "error_id": "62",
    "information": {
        "errors": [
            {
                "line": "22",
                "column": "26",
                "severity": "warning",
                "message": "'{' is not preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": " */\npublic class ParameterizedTypeGetter <T> {\n    public Type getType(){\n        ParameterizedType genericSuperclass = (ParameterizedType)getClass().getGenericSuperclass();\n        return genericSuperclass.getActualTypeArguments()[0];\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/62/ParameterizedTypeGetter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/styler/62/ParameterizedTypeGetter.java\nindex 3d31e0493e1..75a4dced4e6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/62/ParameterizedTypeGetter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/styler/62/ParameterizedTypeGetter.java\n@@ -19,7 +19,7 @@ import java.lang.reflect.Type;\n  * @param <T>\n  */\n public class ParameterizedTypeGetter <T> {\n-    public Type getType(){\n+    public Type getType() {\n         ParameterizedType genericSuperclass = (ParameterizedType)getClass().getGenericSuperclass();\n         return genericSuperclass.getActualTypeArguments()[0];\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/62/ParameterizedTypeGetter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/intellij/62/ParameterizedTypeGetter.java\nindex 3d31e0493e1..855cc3004ac 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/62/ParameterizedTypeGetter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/intellij/62/ParameterizedTypeGetter.java\n@@ -16,11 +16,12 @@ import java.lang.reflect.Type;\n  *  type0 equivalent to type2\n  *\n  * </pre>\n+ *\n  * @param <T>\n  */\n-public class ParameterizedTypeGetter <T> {\n-    public Type getType(){\n-        ParameterizedType genericSuperclass = (ParameterizedType)getClass().getGenericSuperclass();\n+public class ParameterizedTypeGetter<T> {\n+    public Type getType() {\n+        ParameterizedType genericSuperclass = (ParameterizedType) getClass().getGenericSuperclass();\n         return genericSuperclass.getActualTypeArguments()[0];\n     }\n }\n",
            "diff_size": 4
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/62/ParameterizedTypeGetter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/naturalize/62/ParameterizedTypeGetter.java\nindex 3d31e0493e1..de4ad2f2595 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/62/ParameterizedTypeGetter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/naturalize/62/ParameterizedTypeGetter.java\n@@ -18,9 +18,9 @@ import java.lang.reflect.Type;\n  * </pre>\n  * @param <T>\n  */\n-public class ParameterizedTypeGetter <T> {\n-    public Type getType(){\n+public class ParameterizedTypeGetter<T> {\n+    public Type getType() {\n         ParameterizedType genericSuperclass = (ParameterizedType)getClass().getGenericSuperclass();\n         return genericSuperclass.getActualTypeArguments()[0];\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/62/ParameterizedTypeGetter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/codebuff/62/ParameterizedTypeGetter.java\nindex 3d31e0493e1..2849549fb98 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/62/ParameterizedTypeGetter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/codebuff/62/ParameterizedTypeGetter.java\n@@ -18,9 +18,10 @@ import java.lang.reflect.Type;\n  * </pre>\n  * @param <T>\n  */\n-public class ParameterizedTypeGetter <T> {\n-    public Type getType(){\n-        ParameterizedType genericSuperclass = (ParameterizedType)getClass().getGenericSuperclass();\n+\n+public class ParameterizedTypeGetter<T> {\n+    public Type getType() {\n+        ParameterizedType genericSuperclass = (ParameterizedType) getClass().getGenericSuperclass();\n         return genericSuperclass.getActualTypeArguments()[0];\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/62/ParameterizedTypeGetter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/styler_random/62/ParameterizedTypeGetter.java\nindex 3d31e0493e1..75a4dced4e6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/62/ParameterizedTypeGetter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/styler_random/62/ParameterizedTypeGetter.java\n@@ -19,7 +19,7 @@ import java.lang.reflect.Type;\n  * @param <T>\n  */\n public class ParameterizedTypeGetter <T> {\n-    public Type getType(){\n+    public Type getType() {\n         ParameterizedType genericSuperclass = (ParameterizedType)getClass().getGenericSuperclass();\n         return genericSuperclass.getActualTypeArguments()[0];\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/62/ParameterizedTypeGetter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/styler_three_grams/62/ParameterizedTypeGetter.java\nindex 3d31e0493e1..75a4dced4e6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/62/ParameterizedTypeGetter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/styler_three_grams/62/ParameterizedTypeGetter.java\n@@ -19,7 +19,7 @@ import java.lang.reflect.Type;\n  * @param <T>\n  */\n public class ParameterizedTypeGetter <T> {\n-    public Type getType(){\n+    public Type getType() {\n         ParameterizedType genericSuperclass = (ParameterizedType)getClass().getGenericSuperclass();\n         return genericSuperclass.getActualTypeArguments()[0];\n     }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}