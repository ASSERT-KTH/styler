{
    "project_name": "CONNECT-Solution-CONNECT",
    "error_id": "812",
    "information": {
        "errors": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.direct;\n\nimport gov.hhs.fha.nhinc.nhinclib.NhincConstants;\nimport gov.hhs.fha.nhinc.util.StreamUtils;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/812/MimeMessageBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/812/MimeMessageBuilder.java\nindex c5ec02a4c2e..3bd91f98800 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/812/MimeMessageBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/812/MimeMessageBuilder.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.direct;\n \n import gov.hhs.fha.nhinc.nhinclib.NhincConstants;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/812/MimeMessageBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/812/MimeMessageBuilder.java\nindex c5ec02a4c2e..9fd30499093 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/812/MimeMessageBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/812/MimeMessageBuilder.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.direct;\n \n import gov.hhs.fha.nhinc.nhinclib.NhincConstants;\n@@ -51,183 +52,183 @@ import org.nhindirect.xd.common.DirectDocuments;\n  */\n public class MimeMessageBuilder {\n \n-    private final Session session;\n-    private final Address fromAddress;\n-    private final Address[] recipients;\n-\n-    private String subject;\n-    private String text;\n-    private DirectDocuments documents;\n-    private String messageId;\n-    private Document attachment;\n-    private String attachmentName;\n-\n-    /**\n-     * Construct the Mime Message builder with required fields.\n-     *\n-     * @param session used to build the message.\n-     * @param fromAddress sender of the message.\n-     * @param recipients - list of recipients of the message.\n-     */\n-    public MimeMessageBuilder(Session session, Address fromAddress, Address[] recipients) {\n-        this.session = session;\n-        this.fromAddress = fromAddress;\n-        this.recipients = recipients;\n-    }\n-\n-    /**\n-     * @param str for subject.\n-     * @return builder\n-     */\n-    public MimeMessageBuilder subject(String str) {\n-        subject = str;\n-        return this;\n+  private final Session session;\n+  private final Address fromAddress;\n+  private final Address[] recipients;\n+\n+  private String subject;\n+  private String text;\n+  private DirectDocuments documents;\n+  private String messageId;\n+  private Document attachment;\n+  private String attachmentName;\n+\n+  /**\n+   * Construct the Mime Message builder with required fields.\n+   *\n+   * @param session     used to build the message.\n+   * @param fromAddress sender of the message.\n+   * @param recipients  - list of recipients of the message.\n+   */\n+  public MimeMessageBuilder(Session session, Address fromAddress, Address[] recipients) {\n+    this.session = session;\n+    this.fromAddress = fromAddress;\n+    this.recipients = recipients;\n+  }\n+\n+  /**\n+   * @param str for subject.\n+   * @return builder\n+   */\n+  public MimeMessageBuilder subject(String str) {\n+    subject = str;\n+    return this;\n+  }\n+\n+  /**\n+   * @param str for text\n+   * @return builder\n+   */\n+  public MimeMessageBuilder text(String str) {\n+    text = str;\n+    return this;\n+  }\n+\n+  /**\n+   * @param directDocuments for attachment\n+   * @return builder of mime messages.\n+   */\n+  public MimeMessageBuilder documents(DirectDocuments directDocuments) {\n+    documents = directDocuments;\n+    return this;\n+  }\n+\n+  /**\n+   * @param str messageId for message\n+   * @return builder of mime messages.\n+   */\n+  public MimeMessageBuilder messageId(String str) {\n+    messageId = str;\n+    return this;\n+  }\n+\n+  /**\n+   * @param doc for attachment\n+   * @return builder\n+   */\n+  public MimeMessageBuilder attachment(Document doc) {\n+    attachment = doc;\n+    return this;\n+  }\n+\n+  /**\n+   * @param str for attachment name\n+   * @return builder\n+   */\n+  public MimeMessageBuilder attachmentName(String str) {\n+    attachmentName = str;\n+    return this;\n+  }\n+\n+  /**\n+   * Build the Mime Message.\n+   *\n+   * @return the Mime message.\n+   */\n+  public MimeMessage build() {\n+\n+    final MimeMessage message = new MimeMessage(session);\n+\n+    try {\n+      message.setFrom(fromAddress);\n+    } catch (Exception e) {\n+      throw new DirectException(\"Exception setting from address: \" + fromAddress, e);\n     }\n \n-    /**\n-     * @param str for text\n-     * @return builder\n-     */\n-    public MimeMessageBuilder text(String str) {\n-        text = str;\n-        return this;\n+    try {\n+      message.addRecipients(Message.RecipientType.TO, recipients);\n+    } catch (Exception e) {\n+      throw new DirectException(\"Exception setting recipient to address(es): \" + recipients, e);\n     }\n \n-    /**\n-     * @param directDocuments for attachment\n-     * @return builder of mime messages.\n-     */\n-    public MimeMessageBuilder documents(DirectDocuments directDocuments) {\n-        documents = directDocuments;\n-        return this;\n+    try {\n+      message.setSubject(subject);\n+    } catch (Exception e) {\n+      throw new DirectException(\"Exception setting subject: \" + subject, e);\n     }\n \n-    /**\n-     * @param str messageId for message\n-     * @return builder of mime messages.\n-     */\n-    public MimeMessageBuilder messageId(String str) {\n-        messageId = str;\n-        return this;\n+    MimeBodyPart messagePart = new MimeBodyPart();\n+    try {\n+      messagePart.setText(text);\n+    } catch (Exception e) {\n+      throw new DirectException(\"Exception setting mime message part text: \" + text, e);\n     }\n \n-    /**\n-     * @param doc for attachment\n-     * @return builder\n-     */\n-    public MimeMessageBuilder attachment(Document doc) {\n-        attachment = doc;\n-        return this;\n+    MimeBodyPart attachmentPart;\n+    try {\n+      if (documents != null && !StringUtils.isBlank(messageId)) {\n+        attachmentPart = getMimeBodyPart();\n+\n+        messageId = messageId.replace(NhincConstants.WS_SOAP_HEADER_MESSAGE_ID_PREFIX, \"\");\n+        attachmentPart.attachFile(documents.toXdmPackage(messageId).toFile());\n+      } else if (attachment != null && !StringUtils.isBlank(attachmentName)) {\n+        attachmentPart = createAttachmentFromSOAPRequest(attachment, attachmentName);\n+      } else {\n+        throw new Exception(\n+            \"Could not create attachment. Need documents and messageId or attachment and attachmentName.\");\n+      }\n+    } catch (Exception e) {\n+      throw new DirectException(\"Exception creating attachment: \" + attachmentName, e);\n     }\n \n-    /**\n-     * @param str for attachment name\n-     * @return builder\n-     */\n-    public MimeMessageBuilder attachmentName(String str) {\n-        attachmentName = str;\n-        return this;\n+    Multipart multipart = new MimeMultipart();\n+    try {\n+      multipart.addBodyPart(messagePart);\n+      multipart.addBodyPart(attachmentPart);\n+      message.setContent(multipart);\n+    } catch (Exception e) {\n+      throw new DirectException(\"Exception creating multi-part attachment.\", e);\n     }\n \n-    /**\n-     * Build the Mime Message.\n-     *\n-     * @return the Mime message.\n-     */\n-    public MimeMessage build() {\n-\n-        final MimeMessage message = new MimeMessage(session);\n-\n-        try {\n-            message.setFrom(fromAddress);\n-        } catch (Exception e) {\n-            throw new DirectException(\"Exception setting from address: \" + fromAddress, e);\n-        }\n-\n-        try {\n-            message.addRecipients(Message.RecipientType.TO, recipients);\n-        } catch (Exception e) {\n-            throw new DirectException(\"Exception setting recipient to address(es): \" + recipients, e);\n-        }\n-\n-        try {\n-            message.setSubject(subject);\n-        } catch (Exception e) {\n-            throw new DirectException(\"Exception setting subject: \" + subject, e);\n-        }\n-\n-        MimeBodyPart messagePart = new MimeBodyPart();\n-        try {\n-            messagePart.setText(text);\n-        } catch (Exception e) {\n-            throw new DirectException(\"Exception setting mime message part text: \" + text, e);\n-        }\n-\n-        MimeBodyPart attachmentPart;\n-        try {\n-            if (documents != null && !StringUtils.isBlank(messageId)) {\n-                attachmentPart = getMimeBodyPart();\n-\n-                messageId = messageId.replace(NhincConstants.WS_SOAP_HEADER_MESSAGE_ID_PREFIX, \"\");\n-                attachmentPart.attachFile(documents.toXdmPackage(messageId).toFile());\n-            } else if (attachment != null && !StringUtils.isBlank(attachmentName)) {\n-                attachmentPart = createAttachmentFromSOAPRequest(attachment, attachmentName);\n-            } else {\n-                throw new Exception(\n-                    \"Could not create attachment. Need documents and messageId or attachment and attachmentName.\");\n-            }\n-        } catch (Exception e) {\n-            throw new DirectException(\"Exception creating attachment: \" + attachmentName, e);\n-        }\n-\n-        Multipart multipart = new MimeMultipart();\n-        try {\n-            multipart.addBodyPart(messagePart);\n-            multipart.addBodyPart(attachmentPart);\n-            message.setContent(multipart);\n-        } catch (Exception e) {\n-            throw new DirectException(\"Exception creating multi-part attachment.\", e);\n-        }\n-\n-        try {\n-            message.saveChanges();\n-        } catch (Exception e) {\n-            throw new DirectException(\"Exception saving changes.\", e);\n-        }\n-\n-        return message;\n+    try {\n+      message.saveChanges();\n+    } catch (Exception e) {\n+      throw new DirectException(\"Exception saving changes.\", e);\n     }\n \n-    /**\n-     * @return mime body part of the message.\n-     */\n-    protected MimeBodyPart getMimeBodyPart() {\n-        return new MimeBodyPart();\n+    return message;\n+  }\n+\n+  /**\n+   * @return mime body part of the message.\n+   */\n+  protected MimeBodyPart getMimeBodyPart() {\n+    return new MimeBodyPart();\n+  }\n+\n+  private static MimeBodyPart createAttachmentFromSOAPRequest(Document data, String name)\n+      throws MessagingException,\n+      IOException {\n+\n+    InputStream is = null;\n+    DataSource source;\n+    DataHandler dhnew;\n+    MimeBodyPart bodypart = null;\n+\n+    try {\n+      is = data.getValue().getInputStream();\n+      source = new ByteArrayDataSource(is, \"application/octet-stream\");\n+      dhnew = new DataHandler(source);\n+      bodypart = new MimeBodyPart();\n+\n+      bodypart.setDataHandler(dhnew);\n+      bodypart.setHeader(\"Content-Type\", \"application/octet-stream\");\n+      bodypart.setDisposition(Part.ATTACHMENT);\n+      bodypart.setFileName(name);\n+    } finally {\n+      StreamUtils.closeStreamSilently(is);\n     }\n \n-    private static MimeBodyPart createAttachmentFromSOAPRequest(Document data, String name)\n-        throws MessagingException,\n-    IOException {\n-\n-        InputStream is = null;\n-        DataSource source;\n-        DataHandler dhnew;\n-        MimeBodyPart bodypart = null;\n-\n-        try {\n-            is = data.getValue().getInputStream();\n-            source = new ByteArrayDataSource(is, \"application/octet-stream\");\n-            dhnew = new DataHandler(source);\n-            bodypart = new MimeBodyPart();\n-\n-            bodypart.setDataHandler(dhnew);\n-            bodypart.setHeader(\"Content-Type\", \"application/octet-stream\");\n-            bodypart.setDisposition(Part.ATTACHMENT);\n-            bodypart.setFileName(name);\n-        } finally {\n-            StreamUtils.closeStreamSilently(is);\n-        }\n-\n-        return bodypart;\n-    }\n+    return bodypart;\n+  }\n }\n",
            "diff_size": 258
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "176",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "207",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/812/MimeMessageBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/812/MimeMessageBuilder.java\nindex c5ec02a4c2e..7e33457c803 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/812/MimeMessageBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/812/MimeMessageBuilder.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.direct;\n \n import gov.hhs.fha.nhinc.nhinclib.NhincConstants;\n@@ -137,8 +138,7 @@ public class MimeMessageBuilder {\n     public MimeMessage build() {\n \n         final MimeMessage message = new MimeMessage(session);\n-\n-        try {\n+try {\n             message.setFrom(fromAddress);\n         } catch (Exception e) {\n             throw new DirectException(\"Exception setting from address: \" + fromAddress, e);\n@@ -173,9 +173,8 @@ public class MimeMessageBuilder {\n             } else if (attachment != null && !StringUtils.isBlank(attachmentName)) {\n                 attachmentPart = createAttachmentFromSOAPRequest(attachment, attachmentName);\n             } else {\n-                throw new Exception(\n-                    \"Could not create attachment. Need documents and messageId or attachment and attachmentName.\");\n-            }\n+                throw new Exception(\"Could not create attachment. Need documents and messageId or attachment and attachmentName.\");\n+    }\n         } catch (Exception e) {\n             throw new DirectException(\"Exception creating attachment: \" + attachmentName, e);\n         }\n@@ -205,16 +204,13 @@ public class MimeMessageBuilder {\n         return new MimeBodyPart();\n     }\n \n-    private static MimeBodyPart createAttachmentFromSOAPRequest(Document data, String name)\n-        throws MessagingException,\n-    IOException {\n+    private static MimeBodyPart createAttachmentFromSOAPRequest(Document data, String name) throws MessagingException, IOException {\n \n         InputStream is = null;\n         DataSource source;\n         DataHandler dhnew;\n         MimeBodyPart bodypart = null;\n-\n-        try {\n+try {\n             is = data.getValue().getInputStream();\n             source = new ByteArrayDataSource(is, \"application/octet-stream\");\n             dhnew = new DataHandler(source);\n@@ -230,4 +226,4 @@ public class MimeMessageBuilder {\n \n         return bodypart;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "181",
                    "column": "15",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "186",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "189",
                    "column": "8",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "192",
                    "column": "6",
                    "severity": "error",
                    "message": "'}' at column 6 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "196",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "226",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "240",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/812/MimeMessageBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/812/MimeMessageBuilder.java\nindex c5ec02a4c2e..96b8052f138 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/812/MimeMessageBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/812/MimeMessageBuilder.java\n@@ -49,12 +49,14 @@ import org.nhindirect.xd.common.DirectDocuments;\n /**\n  * Builder for {@link MimeMessage}.\n  */\n+\n+\n public class MimeMessageBuilder {\n \n     private final Session session;\n     private final Address fromAddress;\n-    private final Address[] recipients;\n-\n+    private final Address\n+        [ ] recipients;\n     private String subject;\n     private String text;\n     private DirectDocuments documents;\n@@ -69,7 +71,10 @@ public class MimeMessageBuilder {\n      * @param fromAddress sender of the message.\n      * @param recipients - list of recipients of the message.\n      */\n-    public MimeMessageBuilder(Session session, Address fromAddress, Address[] recipients) {\n+\n+    public MimeMessageBuilder(Session session,\n+        Address fromAddress, Address\n+                                 [ ] recipients) {\n         this.session = session;\n         this.fromAddress = fromAddress;\n         this.recipients = recipients;\n@@ -79,6 +84,8 @@ public class MimeMessageBuilder {\n      * @param str for subject.\n      * @return builder\n      */\n+\n+\n     public MimeMessageBuilder subject(String str) {\n         subject = str;\n         return this;\n@@ -88,6 +95,8 @@ public class MimeMessageBuilder {\n      * @param str for text\n      * @return builder\n      */\n+\n+\n     public MimeMessageBuilder text(String str) {\n         text = str;\n         return this;\n@@ -97,6 +106,8 @@ public class MimeMessageBuilder {\n      * @param directDocuments for attachment\n      * @return builder of mime messages.\n      */\n+\n+\n     public MimeMessageBuilder documents(DirectDocuments directDocuments) {\n         documents = directDocuments;\n         return this;\n@@ -106,6 +117,8 @@ public class MimeMessageBuilder {\n      * @param str messageId for message\n      * @return builder of mime messages.\n      */\n+\n+\n     public MimeMessageBuilder messageId(String str) {\n         messageId = str;\n         return this;\n@@ -115,6 +128,8 @@ public class MimeMessageBuilder {\n      * @param doc for attachment\n      * @return builder\n      */\n+\n+\n     public MimeMessageBuilder attachment(Document doc) {\n         attachment = doc;\n         return this;\n@@ -124,6 +139,8 @@ public class MimeMessageBuilder {\n      * @param str for attachment name\n      * @return builder\n      */\n+\n+\n     public MimeMessageBuilder attachmentName(String str) {\n         attachmentName = str;\n         return this;\n@@ -134,52 +151,53 @@ public class MimeMessageBuilder {\n      *\n      * @return the Mime message.\n      */\n-    public MimeMessage build() {\n \n-        final MimeMessage message = new MimeMessage(session);\n \n+    public MimeMessage build() {\n+        final MimeMessage message = new MimeMessage(session);\n         try {\n             message.setFrom(fromAddress);\n         } catch (Exception e) {\n             throw new DirectException(\"Exception setting from address: \" + fromAddress, e);\n         }\n-\n         try {\n             message.addRecipients(Message.RecipientType.TO, recipients);\n         } catch (Exception e) {\n             throw new DirectException(\"Exception setting recipient to address(es): \" + recipients, e);\n         }\n-\n         try {\n             message.setSubject(subject);\n         } catch (Exception e) {\n             throw new DirectException(\"Exception setting subject: \" + subject, e);\n         }\n-\n         MimeBodyPart messagePart = new MimeBodyPart();\n         try {\n             messagePart.setText(text);\n         } catch (Exception e) {\n             throw new DirectException(\"Exception setting mime message part text: \" + text, e);\n         }\n-\n         MimeBodyPart attachmentPart;\n         try {\n-            if (documents != null && !StringUtils.isBlank(messageId)) {\n+            if(documents != null && !\n+                                        StringUtils.isBlank(messageId)) {\n                 attachmentPart = getMimeBodyPart();\n-\n                 messageId = messageId.replace(NhincConstants.WS_SOAP_HEADER_MESSAGE_ID_PREFIX, \"\");\n                 attachmentPart.attachFile(documents.toXdmPackage(messageId).toFile());\n-            } else if (attachment != null && !StringUtils.isBlank(attachmentName)) {\n-                attachmentPart = createAttachmentFromSOAPRequest(attachment, attachmentName);\n-            } else {\n-                throw new Exception(\n-                    \"Could not create attachment. Need documents and messageId or attachment and attachmentName.\");\n             }\n+\n+\n+else if(attachment != null && !\n+                                  StringUtils.isBlank(attachmentName)) {\n+         attachmentPart = createAttachmentFromSOAPRequest(attachment, attachmentName);\n+     }\n+\n+\n+     else {\n+         throw new Exception(\"Could not create attachment. Need documents and messageId or attachment and attachmentName.\");\n+     }\n         } catch (Exception e) {\n             throw new DirectException(\"Exception creating attachment: \" + attachmentName, e);\n         }\n-\n         Multipart multipart = new MimeMultipart();\n         try {\n             multipart.addBodyPart(messagePart);\n@@ -188,46 +206,44 @@ public class MimeMessageBuilder {\n         } catch (Exception e) {\n             throw new DirectException(\"Exception creating multi-part attachment.\", e);\n         }\n-\n         try {\n             message.saveChanges();\n         } catch (Exception e) {\n             throw new DirectException(\"Exception saving changes.\", e);\n         }\n-\n         return message;\n     }\n \n     /**\n      * @return mime body part of the message.\n      */\n+\n+\n     protected MimeBodyPart getMimeBodyPart() {\n         return new MimeBodyPart();\n     }\n \n-    private static MimeBodyPart createAttachmentFromSOAPRequest(Document data, String name)\n-        throws MessagingException,\n-    IOException {\n-\n+    private static MimeBodyPart createAttachmentFromSOAPRequest(Document data, String name) throws MessagingException, IOException {\n         InputStream is = null;\n         DataSource source;\n         DataHandler dhnew;\n         MimeBodyPart bodypart = null;\n-\n         try {\n             is = data.getValue().getInputStream();\n             source = new ByteArrayDataSource(is, \"application/octet-stream\");\n             dhnew = new DataHandler(source);\n             bodypart = new MimeBodyPart();\n-\n             bodypart.setDataHandler(dhnew);\n             bodypart.setHeader(\"Content-Type\", \"application/octet-stream\");\n             bodypart.setDisposition(Part.ATTACHMENT);\n             bodypart.setFileName(name);\n-        } finally {\n-            StreamUtils.closeStreamSilently(is);\n         }\n \n+\n+finally {\n+            StreamUtils.closeStreamSilently(is);\n+        }\n         return bodypart;\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 66
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/812/MimeMessageBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/812/MimeMessageBuilder.java\nindex c5ec02a4c2e..3bd91f98800 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/812/MimeMessageBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/812/MimeMessageBuilder.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.direct;\n \n import gov.hhs.fha.nhinc.nhinclib.NhincConstants;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}