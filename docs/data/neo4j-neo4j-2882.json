{
    "project_name": "neo4j-neo4j",
    "error_id": "2882",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "36",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "36",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2882/BooleanValue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2882/BooleanValue.java\nindex 8b0c2c2cadc..ec42e7a2c67 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2882/BooleanValue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2882/BooleanValue.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.values.storable;\n \n import org.neo4j.hashing.HashFunction;\n@@ -32,15 +33,15 @@ public abstract class BooleanValue extends ScalarValue\n     }\n \n     @Override\n-    public boolean equalTo( Object other )\n+    public boolean equalTo(Object other)\n     {\n-        return other instanceof Value && equals( (Value) other );\n+        return other instanceof Value && equals((Value) other);\n     }\n \n     @Override\n-    public <T> T map( ValueMapper<T> mapper )\n+    public <T> T map(ValueMapper<T> mapper)\n     {\n-        return mapper.mapBoolean( this );\n+        return mapper.mapBoolean(this);\n     }\n \n     @Override\n@@ -58,9 +59,9 @@ public abstract class BooleanValue extends ScalarValue\n     }\n \n     @Override\n-    public long updateHash( HashFunction hashFunction, long hash )\n+    public long updateHash(HashFunction hashFunction, long hash)\n     {\n-        return hashFunction.update( hash, hashCode() );\n+        return hashFunction.update(hash, hashCode());\n     }\n \n     @Override\n@@ -78,13 +79,13 @@ public abstract class BooleanValue extends ScalarValue\n     public static final BooleanValue TRUE = new BooleanValue()\n     {\n         @Override\n-        public boolean equals( Value other )\n+        public boolean equals(Value other)\n         {\n             return this == other;\n         }\n \n         @Override\n-        public boolean equals( boolean x )\n+        public boolean equals(boolean x)\n         {\n             return x;\n         }\n@@ -92,7 +93,7 @@ public abstract class BooleanValue extends ScalarValue\n         @Override\n         protected int computeHash()\n         {\n-            return Boolean.hashCode( true );\n+            return Boolean.hashCode(true);\n         }\n \n         @Override\n@@ -102,16 +103,16 @@ public abstract class BooleanValue extends ScalarValue\n         }\n \n         @Override\n-        int unsafeCompareTo( Value otherValue )\n+        int unsafeCompareTo(Value otherValue)\n         {\n             BooleanValue other = (BooleanValue) otherValue;\n             return other.booleanValue() ? 0 : 1;\n         }\n \n         @Override\n-        public <E extends Exception> void writeTo( ValueWriter<E> writer ) throws E\n+        public <E extends Exception> void writeTo(ValueWriter<E> writer) throws E\n         {\n-            writer.writeBoolean( true );\n+            writer.writeBoolean(true);\n         }\n \n         @Override\n@@ -123,26 +124,26 @@ public abstract class BooleanValue extends ScalarValue\n         @Override\n         public String prettyPrint()\n         {\n-            return Boolean.toString( true );\n+            return Boolean.toString(true);\n         }\n \n         @Override\n         public String toString()\n         {\n-            return format( \"%s('%s')\", getTypeName(), true );\n+            return format(\"%s('%s')\", getTypeName(), true);\n         }\n     };\n \n     public static final BooleanValue FALSE = new BooleanValue()\n     {\n         @Override\n-        public boolean equals( Value other )\n+        public boolean equals(Value other)\n         {\n             return this == other;\n         }\n \n         @Override\n-        public boolean equals( boolean x )\n+        public boolean equals(boolean x)\n         {\n             return !x;\n         }\n@@ -150,7 +151,7 @@ public abstract class BooleanValue extends ScalarValue\n         @Override\n         protected int computeHash()\n         {\n-            return Boolean.hashCode( false );\n+            return Boolean.hashCode(false);\n         }\n \n         @Override\n@@ -160,16 +161,16 @@ public abstract class BooleanValue extends ScalarValue\n         }\n \n         @Override\n-        int unsafeCompareTo( Value otherValue )\n+        int unsafeCompareTo(Value otherValue)\n         {\n             BooleanValue other = (BooleanValue) otherValue;\n             return !other.booleanValue() ? 0 : -1;\n         }\n \n         @Override\n-        public <E extends Exception> void writeTo( ValueWriter<E> writer ) throws E\n+        public <E extends Exception> void writeTo(ValueWriter<E> writer) throws E\n         {\n-            writer.writeBoolean( false );\n+            writer.writeBoolean(false);\n         }\n \n         @Override\n@@ -181,13 +182,13 @@ public abstract class BooleanValue extends ScalarValue\n         @Override\n         public String prettyPrint()\n         {\n-            return Boolean.toString( false );\n+            return Boolean.toString(false);\n         }\n \n         @Override\n         public String toString()\n         {\n-            return format( \"%s('%s')\", getTypeName(), false );\n+            return format(\"%s('%s')\", getTypeName(), false);\n         }\n     };\n }\n",
            "diff_size": 23
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}