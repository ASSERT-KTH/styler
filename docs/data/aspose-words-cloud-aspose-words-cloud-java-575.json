{
    "project_name": "aspose-words-cloud-aspose-words-cloud-java",
    "error_id": "575",
    "information": {
        "errors": [
            {
                "line": "145",
                "column": "46",
                "severity": "error",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "            return false;\n        }\n    ReplaceRange replaceRange = (ReplaceRange)o;\n    return\n        Objects.equals(this.text, replaceRange.text) &&\n        Objects.equals(this.textType, replaceRange.textType);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/575/ReplaceRange.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/575/ReplaceRange.java\nindex d1de2caaf02..a7ba3f2e099 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/575/ReplaceRange.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/575/ReplaceRange.java\n@@ -142,7 +142,7 @@ public class ReplaceRange {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    ReplaceRange replaceRange = (ReplaceRange)o;\n+    ReplaceRange replaceRange = (ReplaceRange) o;\n     return\n         Objects.equals(this.text, replaceRange.text) &&\n         Objects.equals(this.textType, replaceRange.textType);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/575/ReplaceRange.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/575/ReplaceRange.java\nindex d1de2caaf02..372771c2af1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/575/ReplaceRange.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/575/ReplaceRange.java\n@@ -10,10 +10,10 @@\n  *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  *  copies of the Software, and to permit persons to whom the Software is\n  *  furnished to do so, subject to the following conditions:\n- * \n+ *\n  *  The above copyright notice and this permission notice shall be included in all\n  *  copies or substantial portions of the Software.\n- * \n+ *\n  *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -32,13 +32,16 @@ import java.util.Arrays;\n import java.util.ArrayList;\n import java.util.List;\n import java.io.IOException;\n+\n import org.threeten.bp.OffsetDateTime;\n+\n import com.aspose.words.cloud.model.*;\n import com.google.gson.TypeAdapter;\n import com.google.gson.annotations.JsonAdapter;\n import com.google.gson.annotations.SerializedName;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n+\n import io.swagger.annotations.ApiModel;\n import io.swagger.annotations.ApiModelProperty;\n \n@@ -79,7 +82,7 @@ public class ReplaceRange {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< TextTypeEnum > {\n+        public static class Adapter extends TypeAdapter<TextTypeEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final TextTypeEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -98,6 +101,7 @@ public class ReplaceRange {\n \n     @SerializedName(\"TextType\")\n     private TextTypeEnum textType = null;\n+\n     public ReplaceRange text(String text) {\n         this.text = text;\n         return this;\n@@ -105,8 +109,9 @@ public class ReplaceRange {\n \n     /**\n      * Gets or sets range's text.\n-    * @return text\n-    **/\n+     *\n+     * @return text\n+     **/\n     @ApiModelProperty(value = \"Gets or sets range's text.\")\n     public String getText() {\n         return text;\n@@ -123,8 +128,9 @@ public class ReplaceRange {\n \n     /**\n      * Gets or sets range's text type.\n-    * @return textType\n-    **/\n+     *\n+     * @return textType\n+     **/\n     @ApiModelProperty(value = \"Gets or sets range's text type.\")\n     public TextTypeEnum getTextType() {\n         return textType;\n@@ -142,35 +148,35 @@ public class ReplaceRange {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    ReplaceRange replaceRange = (ReplaceRange)o;\n-    return\n-        Objects.equals(this.text, replaceRange.text) &&\n-        Objects.equals(this.textType, replaceRange.textType);\n-  }\n-\n-  @Override\n-  public int hashCode() {\n-    return Objects.hash(text, textType);\n-  }\n-\n-  @Override\n-  public String toString() {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(\"class ReplaceRange {\\n\");\n-    sb.append(\"    text: \").append(toIndentedString(text)).append(\"\\n\");\n-    sb.append(\"    textType: \").append(toIndentedString(textType)).append(\"\\n\");\n-    sb.append(\"}\");\n-    return sb.toString();\n-  }\n-\n-  /**\n-   * Convert the given object to string with each line indented by 4 spaces\n-   * (except the first line).\n-   */\n-  private String toIndentedString(java.lang.Object o) {\n-    if (o == null) {\n-      return \"null\";\n+        ReplaceRange replaceRange = (ReplaceRange) o;\n+        return\n+            Objects.equals(this.text, replaceRange.text) &&\n+                Objects.equals(this.textType, replaceRange.textType);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(text, textType);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"class ReplaceRange {\\n\");\n+        sb.append(\"    text: \").append(toIndentedString(text)).append(\"\\n\");\n+        sb.append(\"    textType: \").append(toIndentedString(textType)).append(\"\\n\");\n+        sb.append(\"}\");\n+        return sb.toString();\n+    }\n+\n+    /**\n+     * Convert the given object to string with each line indented by 4 spaces\n+     * (except the first line).\n+     */\n+    private String toIndentedString(java.lang.Object o) {\n+        if (o == null) {\n+            return \"null\";\n+        }\n+        return o.toString().replace(\"\\n\", \"\\n    \");\n     }\n-    return o.toString().replace(\"\\n\", \"\\n    \");\n-  }\n }\n",
            "diff_size": 45
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "148",
                    "column": "42",
                    "severity": "error",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/575/ReplaceRange.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/naturalize/575/ReplaceRange.java\nindex d1de2caaf02..1c2caef13ef 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/575/ReplaceRange.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/naturalize/575/ReplaceRange.java\n@@ -53,7 +53,8 @@ public class ReplaceRange {\n     @JsonAdapter(TextTypeEnum.Adapter.class)\n     public enum TextTypeEnum {\n         TEXT(\"Text\"),\n-        HTML(\"Html\");\n+\n+HTML(\"Html\");\n \n         private String value;\n \n@@ -79,7 +80,7 @@ public class ReplaceRange {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< TextTypeEnum > {\n+        public static class Adapter extends TypeAdapter<TextTypeEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final TextTypeEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -98,7 +99,8 @@ public class ReplaceRange {\n \n     @SerializedName(\"TextType\")\n     private TextTypeEnum textType = null;\n-    public ReplaceRange text(String text) {\n+\n+public ReplaceRange text(String text) {\n         this.text = text;\n         return this;\n     }\n@@ -138,13 +140,13 @@ public class ReplaceRange {\n     public boolean equals(java.lang.Object o) {\n         if (this == o) {\n             return true;\n-        }\n+  }\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    ReplaceRange replaceRange = (ReplaceRange)o;\n-    return\n-        Objects.equals(this.text, replaceRange.text) &&\n+\n+ReplaceRange replaceRange = (ReplaceRange)o;\n+    return Objects.equals(this.text, replaceRange.text) &&\n         Objects.equals(this.textType, replaceRange.textType);\n   }\n \n@@ -173,4 +175,4 @@ public class ReplaceRange {\n     }\n     return o.toString().replace(\"\\n\", \"\\n    \");\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/575/ReplaceRange.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/575/ReplaceRange.java\nindex d1de2caaf02..12940b8bad2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/575/ReplaceRange.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/575/ReplaceRange.java\n@@ -45,114 +45,128 @@ import io.swagger.annotations.ApiModelProperty;\n /**\n  * Range element.\n  */\n+\n+\n @ApiModel(description = \"Range element.\")\n+\n public class ReplaceRange {\n     /**\n      * Gets or sets range's text type.\n      */\n-    @JsonAdapter(TextTypeEnum.Adapter.class)\n-    public enum TextTypeEnum {\n-        TEXT(\"Text\"),\n-        HTML(\"Html\");\n+  @JsonAdapter(TextTypeEnum.Adapter.class)\n+  public enum TextTypeEnum {\n+    TEXT(\"Text\"),\n \n-        private String value;\n+    HTML(\"Html\");\n \n-        TextTypeEnum(String value) {\n-            this.value = value;\n-        }\n+    private String value;\n \n-        public String getValue() {\n-            return value;\n-        }\n+    TextTypeEnum(String value) {\n+      this.value = value;\n+    }\n \n-        @Override\n-        public String toString() {\n-            return String.valueOf(value);\n-        }\n+    public String getValue() {\n+      return value;\n+    }\n \n-        public static TextTypeEnum fromValue(String text) {\n-            for (TextTypeEnum b : TextTypeEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n+    @Override\n+    public String toString() {\n+      return String.valueOf(value);\n+    }\n \n-        public static class Adapter extends TypeAdapter< TextTypeEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final TextTypeEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public TextTypeEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return TextTypeEnum.fromValue(String.valueOf(value));\n-            }\n+    public static TextTypeEnum fromValue(String text) {\n+      for (TextTypeEnum b : TextTypeEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+          return b;\n         }\n+      }\n+      return null;\n     }\n \n-    @SerializedName(\"Text\")\n-    private String text = null;\n+    public static class Adapter extends TypeAdapter<TextTypeEnum> {\n+      @Override\n+      public void write(final JsonWriter jsonWriter, final TextTypeEnum enumeration) throws IOException {\n+        jsonWriter.value(enumeration.getValue());\n+      }\n \n-    @SerializedName(\"TextType\")\n-    private TextTypeEnum textType = null;\n-    public ReplaceRange text(String text) {\n-        this.text = text;\n-        return this;\n+\n+      @Override\n+      public TextTypeEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return TextTypeEnum.fromValue(String.valueOf(value));\n+      }\n     }\n+  }\n+\n+\n+  @SerializedName(\"Text\")\n+  private String text = null;\n+\n+  @SerializedName(\"TextType\")\n+  private TextTypeEnum textType = null;\n+\n+  public ReplaceRange text(String text) {\n+    this.text = text;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets range's text.\n     * @return text\n     **/\n-    @ApiModelProperty(value = \"Gets or sets range's text.\")\n-    public String getText() {\n-        return text;\n-    }\n \n-    public void setText(String text) {\n-        this.text = text;\n-    }\n \n-    public ReplaceRange textType(TextTypeEnum textType) {\n-        this.textType = textType;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets range's text.\")\n+  public String getText() {\n+    return text;\n+  }\n+\n+  public void setText(String text) {\n+    this.text = text;\n+  }\n+\n+  public ReplaceRange textType(TextTypeEnum textType) {\n+    this.textType = textType;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets range's text type.\n     * @return textType\n     **/\n-    @ApiModelProperty(value = \"Gets or sets range's text type.\")\n-    public TextTypeEnum getTextType() {\n-        return textType;\n-    }\n \n-    public void setTextType(TextTypeEnum textType) {\n-        this.textType = textType;\n+\n+  @ApiModelProperty(value = \"Gets or sets range's text type.\")\n+  public TextTypeEnum getTextType() {\n+    return textType;\n+  }\n+\n+  public void setTextType(TextTypeEnum textType) {\n+    this.textType = textType;\n+  }\n+\n+\n+  @Override\n+  public boolean equals(java.lang.Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n     }\n \n-    @Override\n-    public boolean equals(java.lang.Object o) {\n-        if (this == o) {\n-            return true;\n-        }\n-        if (o == null || getClass() != o.getClass()) {\n-            return false;\n-        }\n-    ReplaceRange replaceRange = (ReplaceRange)o;\n-    return\n-        Objects.equals(this.text, replaceRange.text) &&\n-        Objects.equals(this.textType, replaceRange.textType);\n+    ReplaceRange replaceRange = (ReplaceRange) o;\n+    return Objects.equals(this.text, replaceRange.text) &&\n+    Objects.equals(this.textType, replaceRange.textType);\n   }\n \n+\n   @Override\n   public int hashCode() {\n     return Objects.hash(text, textType);\n   }\n \n+\n   @Override\n   public String toString() {\n     StringBuilder sb = new StringBuilder();\n@@ -167,10 +181,12 @@ public class ReplaceRange {\n    * Convert the given object to string with each line indented by 4 spaces\n    * (except the first line).\n    */\n+\n   private String toIndentedString(java.lang.Object o) {\n     if (o == null) {\n       return \"null\";\n     }\n     return o.toString().replace(\"\\n\", \"\\n    \");\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 122
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/575/ReplaceRange.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/575/ReplaceRange.java\nindex d1de2caaf02..a7ba3f2e099 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/575/ReplaceRange.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/575/ReplaceRange.java\n@@ -142,7 +142,7 @@ public class ReplaceRange {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    ReplaceRange replaceRange = (ReplaceRange)o;\n+    ReplaceRange replaceRange = (ReplaceRange) o;\n     return\n         Objects.equals(this.text, replaceRange.text) &&\n         Objects.equals(this.textType, replaceRange.textType);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/575/ReplaceRange.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/575/ReplaceRange.java\nindex d1de2caaf02..a7ba3f2e099 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/575/ReplaceRange.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/575/ReplaceRange.java\n@@ -142,7 +142,7 @@ public class ReplaceRange {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    ReplaceRange replaceRange = (ReplaceRange)o;\n+    ReplaceRange replaceRange = (ReplaceRange) o;\n     return\n         Objects.equals(this.text, replaceRange.text) &&\n         Objects.equals(this.textType, replaceRange.textType);\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}