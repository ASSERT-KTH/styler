{
    "project_name": "neo4j-neo4j",
    "error_id": "1821",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "56",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1821/DynamicProcessorAssigner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1821/DynamicProcessorAssigner.java\nindex ccab4d553b3..594e2167236 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1821/DynamicProcessorAssigner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1821/DynamicProcessorAssigner.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.batchimport.staging;\n \n import java.util.HashMap;\n@@ -49,74 +50,74 @@ import static org.neo4j.internal.batchimport.stats.Keys.done_batches;\n public class DynamicProcessorAssigner extends ExecutionMonitor.Adapter\n {\n     private final Configuration config;\n-    private final Map<Step<?>,Long/*done batches*/> lastChangedProcessors = new HashMap<>();\n+    private final Map<Step<?>, Long/*done batches*/> lastChangedProcessors = new HashMap<>();\n     private final int availableProcessors;\n \n-    public DynamicProcessorAssigner( Configuration config )\n+    public DynamicProcessorAssigner(Configuration config)\n     {\n-        super( 1, SECONDS );\n+        super(1, SECONDS);\n         this.config = config;\n         this.availableProcessors = config.maxNumberOfProcessors();\n     }\n \n     @Override\n-    public void start( StageExecution execution )\n+    public void start(StageExecution execution)\n     {   // A new stage begins, any data that we had is irrelevant\n         lastChangedProcessors.clear();\n     }\n \n     @Override\n-    public void check( StageExecution execution )\n+    public void check(StageExecution execution)\n     {\n-        if ( execution.stillExecuting() )\n+        if (execution.stillExecuting())\n         {\n-            int permits = availableProcessors - countActiveProcessors( execution );\n-            if ( permits > 0 )\n+            int permits = availableProcessors - countActiveProcessors(execution);\n+            if (permits > 0)\n             {\n                 // Be swift at assigning processors to slow steps, i.e. potentially multiple per round\n-                permits -= assignProcessors( execution, permits );\n+                permits -= assignProcessors(execution, permits);\n             }\n             // Be a little more conservative removing processors from too fast steps\n-            if ( permits == 0 )\n+            if (permits == 0)\n             {\n-                moveProcessorFromOverlyAssigned( execution );\n+                moveProcessorFromOverlyAssigned(execution);\n             }\n         }\n     }\n \n-    private int assignProcessors( StageExecution execution, int permits )\n+    private int assignProcessors(StageExecution execution, int permits)\n     {\n-        Pair<Step<?>,Float> bottleNeck = execution.stepsOrderedBy( Keys.avg_processing_time, false ).iterator().next();\n+        Pair<Step<?>, Float> bottleNeck = execution.stepsOrderedBy(Keys.avg_processing_time, false).iterator().next();\n         Step<?> bottleNeckStep = bottleNeck.first();\n-        long doneBatches = bottleNeckStep.longStat( done_batches );\n-        if ( bottleNeck.other() > 1.0f &&\n-             batchesPassedSinceLastChange( bottleNeckStep, doneBatches ) >= config.movingAverageSize() )\n+        long doneBatches = bottleNeckStep.longStat(done_batches);\n+        if (bottleNeck.other() > 1.0f &&\n+          batchesPassedSinceLastChange(bottleNeckStep, doneBatches) >= config.movingAverageSize())\n         {\n             // Assign 1/10th of the remaining permits. This will have processors being assigned more\n             // aggressively in the beginning of the run\n-            int optimalProcessorIncrement = min( max( 1, (int) bottleNeck.other().floatValue() - 1 ), permits );\n-            int before = bottleNeckStep.processors( 0 );\n-            int after = bottleNeckStep.processors( max( optimalProcessorIncrement, permits / 10 ) );\n-            if ( after > before )\n+            int optimalProcessorIncrement = min(max(1, (int) bottleNeck.other().floatValue() - 1), permits);\n+            int before = bottleNeckStep.processors(0);\n+            int after = bottleNeckStep.processors(max(optimalProcessorIncrement, permits / 10));\n+            if (after > before)\n             {\n-                lastChangedProcessors.put( bottleNeckStep, doneBatches );\n+                lastChangedProcessors.put(bottleNeckStep, doneBatches);\n             }\n             return after - before;\n         }\n         return 0;\n     }\n \n-    private void moveProcessorFromOverlyAssigned( StageExecution execution )\n+    private void moveProcessorFromOverlyAssigned(StageExecution execution)\n     {\n-        List<Pair<Step<?>,Float>> steps = execution.stepsOrderedBy( Keys.avg_processing_time, true );\n-        for ( int i = 0; i < steps.size() - 1; i++ )\n+        List<Pair<Step<?>, Float>> steps = execution.stepsOrderedBy(Keys.avg_processing_time, true);\n+        for (int i = 0; i < steps.size() - 1; i++)\n         {\n-            Pair<Step<?>,Float> faster = steps.get( i );\n+            Pair<Step<?>, Float> faster = steps.get(i);\n             Step<?> fasterStep = faster.first();\n-            Pair<Step<?>,Float> slower = steps.get( i + 1 );\n+            Pair<Step<?>, Float> slower = steps.get(i + 1);\n             Step<?> slowerStep = slower.first();\n-            int numberOfProcessors = faster.first().processors( 0 );\n-            if ( numberOfProcessors == 1 || slowerStep.processors( 0 ) == slowerStep.maxProcessors() )\n+            int numberOfProcessors = faster.first().processors(0);\n+            if (numberOfProcessors == 1 || slowerStep.processors(0) == slowerStep.maxProcessors())\n             {\n                 continue;\n             }\n@@ -125,18 +126,18 @@ public class DynamicProcessorAssigner extends ExecutionMonitor.Adapter\n             // be faster if we decremented the processor count, with a slight conservative margin as well\n             // (0.8 instead of 1.0 so that we don't decrement and immediately become the bottleneck ourselves).\n             float factorWithDecrementedProcessorCount = faster.other() * numberOfProcessors / (numberOfProcessors - 1);\n-            if ( factorWithDecrementedProcessorCount < 0.8f )\n+            if (factorWithDecrementedProcessorCount < 0.8f)\n             {\n-                long doneBatches = fasterStep.longStat( done_batches );\n-                if ( batchesPassedSinceLastChange( fasterStep, doneBatches ) >= config.movingAverageSize() )\n+                long doneBatches = fasterStep.longStat(done_batches);\n+                if (batchesPassedSinceLastChange(fasterStep, doneBatches) >= config.movingAverageSize())\n                 {\n-                    if ( fasterStep.processors( -1 ) < numberOfProcessors )\n+                    if (fasterStep.processors(-1) < numberOfProcessors)\n                     {\n                         // OK, we pulled one from the faster step which had unnecessarily many processors.\n-                        lastChangedProcessors.put( fasterStep, doneBatches );\n+                        lastChangedProcessors.put(fasterStep, doneBatches);\n                         // Now give that one to the slower step\n-                        slowerStep.processors( 1 );\n-                        lastChangedProcessors.put( slowerStep, doneBatches );\n+                        slowerStep.processors(1);\n+                        lastChangedProcessors.put(slowerStep, doneBatches);\n                         return;\n                     }\n                 }\n@@ -144,17 +145,17 @@ public class DynamicProcessorAssigner extends ExecutionMonitor.Adapter\n         }\n     }\n \n-    private int countActiveProcessors( StageExecution execution )\n+    private int countActiveProcessors(StageExecution execution)\n     {\n-        return execution.stillExecuting() ? StreamSupport.stream( execution.steps().spliterator(), false ).mapToInt( step -> step.processors( 0 ) ).sum() : 0;\n+        return execution.stillExecuting() ? StreamSupport.stream(execution.steps().spliterator(), false).mapToInt(step -> step.processors(0)).sum() : 0;\n     }\n \n-    private long batchesPassedSinceLastChange( Step<?> step, long doneBatches )\n+    private long batchesPassedSinceLastChange(Step<?> step, long doneBatches)\n     {\n-        return lastChangedProcessors.containsKey( step )\n-                // <doneBatches> number of batches have passed since the last change to this step\n-                ? doneBatches - lastChangedProcessors.get( step )\n-                // we have made no changes to this step yet, go ahead\n-                : config.movingAverageSize();\n+        return lastChangedProcessors.containsKey(step)\n+          // <doneBatches> number of batches have passed since the last change to this step\n+          ? doneBatches - lastChangedProcessors.get(step)\n+          // we have made no changes to this step yet, go ahead\n+          : config.movingAverageSize();\n     }\n }\n",
            "diff_size": 44
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}