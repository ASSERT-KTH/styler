{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2314",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "51",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "119",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "124",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "131",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2314/ProtocolHandshaker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2314/ProtocolHandshaker.java\nindex 2791a553d80..b89c4448e28 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2314/ProtocolHandshaker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2314/ProtocolHandshaker.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.bolt.transport.pipeline;\n \n import io.netty.buffer.ByteBuf;\n@@ -35,161 +36,158 @@ import static java.lang.String.format;\n \n public class ProtocolHandshaker extends ChannelInboundHandlerAdapter\n {\n-    public static final int BOLT_MAGIC_PREAMBLE = 0x6060B017;\n-    private static final int HANDSHAKE_BUFFER_SIZE = 5 * Integer.BYTES;\n-\n-    private final BoltChannel boltChannel;\n-    private final BoltProtocolPipelineInstallerFactory handlerFactory;\n-    private final Log log;\n-    private final boolean encryptionRequired;\n-    private final boolean encrypted;\n-\n-    private ByteBuf handshakeBuffer;\n-    private BoltProtocolPipelineInstaller protocol;\n-\n-    public ProtocolHandshaker( BoltProtocolPipelineInstallerFactory handlerFactory, BoltChannel boltChannel, LogProvider logging, boolean encryptionRequired,\n-            boolean encrypted )\n+  public static final int BOLT_MAGIC_PREAMBLE = 0x6060B017;\n+  private static final int HANDSHAKE_BUFFER_SIZE = 5 * Integer.BYTES;\n+\n+  private final BoltChannel boltChannel;\n+  private final BoltProtocolPipelineInstallerFactory handlerFactory;\n+  private final Log log;\n+  private final boolean encryptionRequired;\n+  private final boolean encrypted;\n+\n+  private ByteBuf handshakeBuffer;\n+  private BoltProtocolPipelineInstaller protocol;\n+\n+  public ProtocolHandshaker(BoltProtocolPipelineInstallerFactory handlerFactory, BoltChannel boltChannel, LogProvider logging, boolean encryptionRequired,\n+                            boolean encrypted)\n+  {\n+    this.handlerFactory = handlerFactory;\n+    this.boltChannel = boltChannel;\n+    this.log = logging.getLog(getClass());\n+    this.encryptionRequired = encryptionRequired;\n+    this.encrypted = encrypted;\n+  }\n+\n+  @Override\n+  public void handlerAdded(ChannelHandlerContext ctx)\n+  {\n+    handshakeBuffer = ctx.alloc().buffer(HANDSHAKE_BUFFER_SIZE, HANDSHAKE_BUFFER_SIZE);\n+  }\n+\n+  @Override\n+  public void handlerRemoved(ChannelHandlerContext ctx)\n+  {\n+    handshakeBuffer.release();\n+    handshakeBuffer = null;\n+  }\n+\n+  @Override\n+  public void channelRead(ChannelHandlerContext ctx, Object msg)\n+  {\n+    try\n     {\n-        this.handlerFactory = handlerFactory;\n-        this.boltChannel = boltChannel;\n-        this.log = logging.getLog( getClass() );\n-        this.encryptionRequired = encryptionRequired;\n-        this.encrypted = encrypted;\n-    }\n+      if (!(msg instanceof ByteBuf))\n+      {\n+        // we know it is HTTP as we only have HTTP (for Websocket) and TCP handlers installed.\n+        log.warn(\"Unsupported connection type: 'HTTP'. Bolt protocol only operates over a TCP connection or WebSocket.\");\n+        ctx.close();\n+        return;\n+      }\n+      ByteBuf buf = (ByteBuf) msg;\n \n-    @Override\n-    public void handlerAdded( ChannelHandlerContext ctx )\n-    {\n-        handshakeBuffer = ctx.alloc().buffer( HANDSHAKE_BUFFER_SIZE, HANDSHAKE_BUFFER_SIZE );\n-    }\n+      assertEncryptedIfRequired();\n \n-    @Override\n-    public void handlerRemoved( ChannelHandlerContext ctx )\n-    {\n-        handshakeBuffer.release();\n-        handshakeBuffer = null;\n-    }\n+      // try to fill out handshake buffer\n+      handshakeBuffer.writeBytes(buf, Math.min(buf.readableBytes(), handshakeBuffer.writableBytes()));\n \n-    @Override\n-    public void channelRead( ChannelHandlerContext ctx, Object msg )\n-    {\n-        try\n+      // we filled up the handshake buffer\n+      if (handshakeBuffer.writableBytes() == 0)\n+      {\n+        if (verifyBoltPreamble())\n         {\n-            if ( !(msg instanceof ByteBuf) )\n+          // let's handshake\n+          if (performHandshake())\n+          {\n+            // announce selected protocol to the client\n+            ctx.writeAndFlush(ctx.alloc().buffer(4).writeInt((int) protocol.version()));\n+\n+            // install related protocol handlers into the pipeline\n+            protocol.install();\n+            ctx.pipeline().remove(this);\n+\n+            // if we somehow end up with more data in the incoming buffers, let's send them\n+            // down to the pipeline for the chosen protocol handlers to handle whatever they\n+            // are.\n+            if (buf.readableBytes() > 0)\n             {\n-                // we know it is HTTP as we only have HTTP (for Websocket) and TCP handlers installed.\n-                log.warn( \"Unsupported connection type: 'HTTP'. Bolt protocol only operates over a TCP connection or WebSocket.\" );\n-                ctx.close();\n-                return;\n+              ctx.fireChannelRead(buf.readRetainedSlice(buf.readableBytes()));\n             }\n-            ByteBuf buf = (ByteBuf) msg;\n-\n-            assertEncryptedIfRequired();\n-\n-            // try to fill out handshake buffer\n-            handshakeBuffer.writeBytes( buf, Math.min( buf.readableBytes(), handshakeBuffer.writableBytes() ) );\n-\n-            // we filled up the handshake buffer\n-            if ( handshakeBuffer.writableBytes() == 0 )\n-            {\n-                if ( verifyBoltPreamble() )\n-                {\n-                    // let's handshake\n-                    if ( performHandshake() )\n-                    {\n-                        // announce selected protocol to the client\n-                        ctx.writeAndFlush( ctx.alloc().buffer( 4 ).writeInt( (int)protocol.version() ) );\n-\n-                        // install related protocol handlers into the pipeline\n-                        protocol.install();\n-                        ctx.pipeline().remove( this );\n-\n-                        // if we somehow end up with more data in the incoming buffers, let's send them\n-                        // down to the pipeline for the chosen protocol handlers to handle whatever they\n-                        // are.\n-                        if ( buf.readableBytes() > 0 )\n-                        {\n-                            ctx.fireChannelRead( buf.readRetainedSlice( buf.readableBytes() ) );\n-                        }\n-                    }\n-                    else\n-                    {\n-                        ctx.writeAndFlush( ctx.alloc().buffer().writeBytes( new byte[]{0, 0, 0, 0} ) ).addListener( ChannelFutureListener.CLOSE );\n-                    }\n-                }\n-                else\n-                {\n-                    ctx.close();\n-                }\n-            }\n-        }\n-        finally\n+          } else\n+          {\n+            ctx.writeAndFlush(ctx.alloc().buffer().writeBytes(new byte[] {0, 0, 0, 0})).addListener(ChannelFutureListener.CLOSE);\n+          }\n+        } else\n         {\n-            ReferenceCountUtil.release( msg );\n+          ctx.close();\n         }\n-    }\n-\n-    @Override\n-    public void exceptionCaught( ChannelHandlerContext ctx, Throwable cause )\n+      }\n+    } finally\n     {\n-        // log insecure handshake to the bolt message log\n-        if ( cause instanceof SecurityException )\n-        {\n-            boltChannel.log().serverError( \"HANDSHAKE\", \"Insecure handshake\" );\n-        }\n-\n-        log.error( \"Fatal error occurred during protocol handshaking: \" + ctx.channel(), cause );\n-        ctx.close();\n+      ReferenceCountUtil.release(msg);\n     }\n+  }\n \n-    @Override\n-    public void channelInactive( ChannelHandlerContext ctx )\n+  @Override\n+  public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause)\n+  {\n+    // log insecure handshake to the bolt message log\n+    if (cause instanceof SecurityException)\n     {\n-        ctx.close();\n+      boltChannel.log().serverError(\"HANDSHAKE\", \"Insecure handshake\");\n     }\n \n-    private void assertEncryptedIfRequired()\n+    log.error(\"Fatal error occurred during protocol handshaking: \" + ctx.channel(), cause);\n+    ctx.close();\n+  }\n+\n+  @Override\n+  public void channelInactive(ChannelHandlerContext ctx)\n+  {\n+    ctx.close();\n+  }\n+\n+  private void assertEncryptedIfRequired()\n+  {\n+    if (encryptionRequired && !encrypted)\n     {\n-        if ( encryptionRequired && !encrypted )\n-        {\n-            throw new SecurityException( \"An unencrypted connection attempt was made where encryption is required.\" );\n-        }\n+      throw new SecurityException(\"An unencrypted connection attempt was made where encryption is required.\");\n     }\n+  }\n \n-    private boolean verifyBoltPreamble()\n+  private boolean verifyBoltPreamble()\n+  {\n+    if (handshakeBuffer.getInt(0) != BOLT_MAGIC_PREAMBLE)\n     {\n-        if ( handshakeBuffer.getInt( 0 ) != BOLT_MAGIC_PREAMBLE )\n-        {\n-            boltChannel.log().clientError( \"HANDSHAKE\", \"Invalid Bolt signature\", () -> format( \"0x%08X\", handshakeBuffer.getInt( 0 ) ) );\n+      boltChannel.log().clientError(\"HANDSHAKE\", \"Invalid Bolt signature\", () -> format(\"0x%08X\", handshakeBuffer.getInt(0)));\n \n-            return false;\n-        }\n-\n-        return true;\n+      return false;\n     }\n \n-    private boolean performHandshake()\n-    {\n-        boltChannel.log().clientEvent( \"HANDSHAKE\", () -> format( \"0x%08X\", BOLT_MAGIC_PREAMBLE ) );\n+    return true;\n+  }\n \n-        for ( int i = 0; i < 4; i++ )\n-        {\n-            final long suggestion = handshakeBuffer.getInt( (i + 1) * Integer.BYTES ) & 0xFFFFFFFFL;\n+  private boolean performHandshake()\n+  {\n+    boltChannel.log().clientEvent(\"HANDSHAKE\", () -> format(\"0x%08X\", BOLT_MAGIC_PREAMBLE));\n \n-            protocol = handlerFactory.create( suggestion, boltChannel );\n-            if ( protocol != null )\n-            {\n-                boltChannel.log().serverEvent( \"HANDSHAKE\", () -> format( \"0x%02X\", suggestion ) );\n+    for (int i = 0; i < 4; i++)\n+    {\n+      final long suggestion = handshakeBuffer.getInt((i + 1) * Integer.BYTES) & 0xFFFFFFFFL;\n \n-                break;\n-            }\n-        }\n+      protocol = handlerFactory.create(suggestion, boltChannel);\n+      if (protocol != null)\n+      {\n+        boltChannel.log().serverEvent(\"HANDSHAKE\", () -> format(\"0x%02X\", suggestion));\n \n-        if ( protocol == null )\n-        {\n-            boltChannel.log().serverError( \"HANDSHAKE\", \"No applicable protocol\" );\n-        }\n+        break;\n+      }\n+    }\n \n-        return protocol != null;\n+    if (protocol == null)\n+    {\n+      boltChannel.log().serverError(\"HANDSHAKE\", \"No applicable protocol\");\n     }\n+\n+    return protocol != null;\n+  }\n }\n",
            "diff_size": 195
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "102",
                    "column": "78",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "176",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "176",
                    "column": "162",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2314/ProtocolHandshaker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2314/ProtocolHandshaker.java\nindex 2791a553d80..2d95a80c829 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2314/ProtocolHandshaker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2314/ProtocolHandshaker.java\n@@ -75,14 +75,15 @@ public class ProtocolHandshaker extends ChannelInboundHandlerAdapter\n     {\n         try\n         {\n-            if ( !(msg instanceof ByteBuf) )\n+            if ( !( msg instanceof ByteBuf) )\n             {\n                 // we know it is HTTP as we only have HTTP (for Websocket) and TCP handlers installed.\n                 log.warn( \"Unsupported connection type: 'HTTP'. Bolt protocol only operates over a TCP connection or WebSocket.\" );\n                 ctx.close();\n                 return;\n             }\n-            ByteBuf buf = (ByteBuf) msg;\n+\n+ByteBuf buf = (ByteBuf) msg;\n \n             assertEncryptedIfRequired();\n \n@@ -98,7 +99,7 @@ public class ProtocolHandshaker extends ChannelInboundHandlerAdapter\n                     if ( performHandshake() )\n                     {\n                         // announce selected protocol to the client\n-                        ctx.writeAndFlush( ctx.alloc().buffer( 4 ).writeInt( (int)protocol.version() ) );\n+                        ctx.writeAndFlush( ctx.alloc().buffer( 4 ).writeInt( ( int)protocol.version() ) );\n \n                         // install related protocol handlers into the pipeline\n                         protocol.install();\n@@ -161,8 +162,7 @@ public class ProtocolHandshaker extends ChannelInboundHandlerAdapter\n         if ( handshakeBuffer.getInt( 0 ) != BOLT_MAGIC_PREAMBLE )\n         {\n             boltChannel.log().clientError( \"HANDSHAKE\", \"Invalid Bolt signature\", () -> format( \"0x%08X\", handshakeBuffer.getInt( 0 ) ) );\n-\n-            return false;\n+return false;\n         }\n \n         return true;\n@@ -171,17 +171,13 @@ public class ProtocolHandshaker extends ChannelInboundHandlerAdapter\n     private boolean performHandshake()\n     {\n         boltChannel.log().clientEvent( \"HANDSHAKE\", () -> format( \"0x%08X\", BOLT_MAGIC_PREAMBLE ) );\n-\n-        for ( int i = 0; i < 4; i++ )\n+for ( int i = 0; i < 4; i++ )\n         {\n-            final long suggestion = handshakeBuffer.getInt( (i + 1) * Integer.BYTES ) & 0xFFFFFFFFL;\n-\n-            protocol = handlerFactory.create( suggestion, boltChannel );\n+            final long suggestion = handshakeBuffer.getInt( (i + 1 ) * Integer.BYTES ) & 0xFFFFFFFFL; protocol = handlerFactory.create( suggestion, boltChannel );\n             if ( protocol != null )\n             {\n                 boltChannel.log().serverEvent( \"HANDSHAKE\", () -> format( \"0x%02X\", suggestion ) );\n-\n-                break;\n+break;\n             }\n         }\n \n@@ -192,4 +188,4 @@ public class ProtocolHandshaker extends ChannelInboundHandlerAdapter\n \n         return protocol != null;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}