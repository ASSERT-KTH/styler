{
    "project_name": "apache-servicecomb-java-chassis",
    "error_id": "407",
    "information": {
        "errors": [
            {
                "line": "39",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 125).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n  /**\n   * @param producerNameToSwaggerIndexMap name of the fields & setters defined in @BeanParam parameter -> swagger param index\n   * @param producerIdx index of producer param\n   * @param producerParamType type of producer param\n   */",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "39",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "39",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/407/ProducerBeanParamMapper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/407/ProducerBeanParamMapper.java\nindex b72b7c9cc81..e909f679cbc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/407/ProducerBeanParamMapper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/407/ProducerBeanParamMapper.java\n@@ -37,11 +37,11 @@ public class ProducerBeanParamMapper implements ArgumentMapper {\n \n   /**\n    * @param producerNameToSwaggerIndexMap name of the fields & setters defined in @BeanParam parameter -> swagger param index\n-   * @param producerIdx index of producer param\n-   * @param producerParamType type of producer param\n+   * @param producerIdx                   index of producer param\n+   * @param producerParamType             type of producer param\n    */\n   public ProducerBeanParamMapper(Map<String, Integer> producerNameToSwaggerIndexMap, int producerIdx,\n-      Type producerParamType) {\n+                                 Type producerParamType) {\n     this.producerIdx = producerIdx;\n     this.swaggerParamIndexMap = new HashMap<>();\n     this.swaggerParamIndexMap.putAll(producerNameToSwaggerIndexMap);\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "39",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/407/ProducerBeanParamMapper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/407/ProducerBeanParamMapper.java\nindex b72b7c9cc81..a0afb983842 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/407/ProducerBeanParamMapper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/407/ProducerBeanParamMapper.java\n@@ -59,4 +59,4 @@ public class ProducerBeanParamMapper implements ArgumentMapper {\n     final Object producerParam = converter.convert(jsonMap);\n     producerArguments[producerIdx] = producerParam;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "37",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/407/ProducerBeanParamMapper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/407/ProducerBeanParamMapper.java\nindex b72b7c9cc81..1f39bbf5f04 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/407/ProducerBeanParamMapper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/407/ProducerBeanParamMapper.java\n@@ -21,14 +21,12 @@ import java.lang.reflect.Type;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Map.Entry;\n-\n import org.apache.servicecomb.swagger.invocation.SwaggerInvocation;\n import org.apache.servicecomb.swagger.invocation.arguments.ArgumentMapper;\n import org.apache.servicecomb.swagger.invocation.converter.Converter;\n import org.apache.servicecomb.swagger.invocation.converter.impl.ConverterCommon;\n \n public class ProducerBeanParamMapper implements ArgumentMapper {\n-\n   private int producerIdx;\n \n   private Map<String, Integer> swaggerParamIndexMap;\n@@ -40,8 +38,9 @@ public class ProducerBeanParamMapper implements ArgumentMapper {\n    * @param producerIdx index of producer param\n    * @param producerParamType type of producer param\n    */\n-  public ProducerBeanParamMapper(Map<String, Integer> producerNameToSwaggerIndexMap, int producerIdx,\n-      Type producerParamType) {\n+\n+  public ProducerBeanParamMapper(Map<String, Integer> producerNameToSwaggerIndexMap,\n+    int producerIdx, Type producerParamType) {\n     this.producerIdx = producerIdx;\n     this.swaggerParamIndexMap = new HashMap<>();\n     this.swaggerParamIndexMap.putAll(producerNameToSwaggerIndexMap);\n@@ -51,12 +50,12 @@ public class ProducerBeanParamMapper implements ArgumentMapper {\n   @Override\n   public void mapArgument(SwaggerInvocation invocation, Object[] producerArguments) {\n     Map<String, Object> jsonMap = new HashMap<>(swaggerParamIndexMap.size());\n-\n     for (Entry<String, Integer> swaggerIndexEntry : swaggerParamIndexMap.entrySet()) {\n-      jsonMap.put(swaggerIndexEntry.getKey(), invocation.getSwaggerArgument(swaggerIndexEntry.getValue()));\n+      jsonMap.put(swaggerIndexEntry.getKey(),\n+invocation.getSwaggerArgument(swaggerIndexEntry.getValue()));\n     }\n \n     final Object producerParam = converter.convert(jsonMap);\n     producerArguments[producerIdx] = producerParam;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "39",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "39",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}