{
    "project_name": "neo4j-neo4j",
    "error_id": "1658",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "42",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1658/NodePropertyEntryView.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1658/NodePropertyEntryView.java\nindex e7c91f22439..2e9bdfdb545 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1658/NodePropertyEntryView.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1658/NodePropertyEntryView.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.internal.event;\n \n import org.neo4j.graphdb.Node;\n@@ -30,7 +31,7 @@ import static org.neo4j.memory.HeapEstimator.shallowSizeOfInstance;\n \n class NodePropertyEntryView implements PropertyEntry<Node>\n {\n-    static final long SHALLOW_SIZE = shallowSizeOfInstance( NodePropertyEntryView.class );\n+    static final long SHALLOW_SIZE = shallowSizeOfInstance(NodePropertyEntryView.class);\n \n     private final InternalTransaction internalTransaction;\n     private final long nodeId;\n@@ -38,8 +39,8 @@ class NodePropertyEntryView implements PropertyEntry<Node>\n     private final Value newValue;\n     private final Value oldValue;\n \n-    NodePropertyEntryView( InternalTransaction internalTransaction, long nodeId, String key,\n-            Value newValue, Value oldValue )\n+    NodePropertyEntryView(InternalTransaction internalTransaction, long nodeId, String key,\n+                          Value newValue, Value oldValue)\n     {\n         this.internalTransaction = internalTransaction;\n         this.nodeId = nodeId;\n@@ -51,7 +52,7 @@ class NodePropertyEntryView implements PropertyEntry<Node>\n     @Override\n     public Node entity()\n     {\n-        return new NodeEntity( internalTransaction, nodeId );\n+        return new NodeEntity(internalTransaction, nodeId);\n     }\n \n     @Override\n@@ -69,9 +70,9 @@ class NodePropertyEntryView implements PropertyEntry<Node>\n     @Override\n     public Object value()\n     {\n-        if ( newValue == null || newValue == Values.NO_VALUE )\n+        if (newValue == null || newValue == Values.NO_VALUE)\n         {\n-            throw new IllegalStateException( \"This property has been removed, it has no value anymore: \" + this );\n+            throw new IllegalStateException(\"This property has been removed, it has no value anymore: \" + this);\n         }\n         return newValue.asObjectCopy();\n     }\n@@ -80,10 +81,10 @@ class NodePropertyEntryView implements PropertyEntry<Node>\n     public String toString()\n     {\n         return \"NodePropertyEntryView{\" +\n-                \"nodeId=\" + nodeId +\n-                \", key='\" + key + '\\'' +\n-                \", newValue=\" + newValue +\n-                \", oldValue=\" + oldValue +\n-                '}';\n+          \"nodeId=\" + nodeId +\n+          \", key='\" + key + '\\'' +\n+          \", newValue=\" + newValue +\n+          \", oldValue=\" + oldValue +\n+          '}';\n     }\n }\n",
            "diff_size": 12
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}