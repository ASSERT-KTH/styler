{
    "project_name": "neo4j-neo4j",
    "error_id": "3192",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "51",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "119",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "68",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3192/DiagnosticsOfflineReportProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3192/DiagnosticsOfflineReportProvider.java\nindex 4e9dba36fc1..39701bd6e61 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3192/DiagnosticsOfflineReportProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3192/DiagnosticsOfflineReportProvider.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.diagnostics;\n \n import java.nio.file.Path;\n@@ -44,23 +45,24 @@ public abstract class DiagnosticsOfflineReportProvider\n      * A provider needs to know all the available classifiers in advance. A classifier is a group in the context of\n      * diagnostics reporting, e.g. 'logs', 'config' or 'threaddump'.\n      *\n-     * @param classifier one\n+     * @param classifier  one\n      * @param classifiers or more classifiers have to be provided.\n      */\n-    protected DiagnosticsOfflineReportProvider( String classifier, String... classifiers )\n+    protected DiagnosticsOfflineReportProvider(String classifier, String... classifiers)\n     {\n-        filterClassifiers = new HashSet<>( Arrays.asList( classifiers ) );\n-        filterClassifiers.add( classifier );\n+        filterClassifiers = new HashSet<>(Arrays.asList(classifiers));\n+        filterClassifiers.add(classifier);\n     }\n \n     /**\n      * Called after service loading to initialize the class.\n-     * @param fs filesystem to use for file access.\n+     *\n+     * @param fs                  filesystem to use for file access.\n      * @param defaultDatabaseName identifier for default database\n-     * @param config configuration file in use.\n-     * @param storeDirectory directory of the database files.\n+     * @param config              configuration file in use.\n+     * @param storeDirectory      directory of the database files.\n      */\n-    public abstract void init( FileSystemAbstraction fs, String defaultDatabaseName, Config config, Path storeDirectory );\n+    public abstract void init(FileSystemAbstraction fs, String defaultDatabaseName, Config config, Path storeDirectory);\n \n     /**\n      * Returns a list of source that matches the given classifiers.\n@@ -68,22 +70,21 @@ public abstract class DiagnosticsOfflineReportProvider\n      * @param classifiers a set of classifiers to filter on.\n      * @return a list of sources, empty if nothing matches.\n      */\n-    protected abstract List<DiagnosticsReportSource> provideSources( Set<String> classifiers );\n+    protected abstract List<DiagnosticsReportSource> provideSources(Set<String> classifiers);\n \n     final Set<String> getFilterClassifiers()\n     {\n         return filterClassifiers;\n     }\n \n-    final List<DiagnosticsReportSource> getDiagnosticsSources( Set<String> classifiers )\n+    final List<DiagnosticsReportSource> getDiagnosticsSources(Set<String> classifiers)\n     {\n-        if ( classifiers.contains( \"all\" ) )\n+        if (classifiers.contains(\"all\"))\n         {\n-            return provideSources( filterClassifiers );\n-        }\n-        else\n+            return provideSources(filterClassifiers);\n+        } else\n         {\n-            return provideSources( classifiers );\n+            return provideSources(classifiers);\n         }\n     }\n }\n",
            "diff_size": 17
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}