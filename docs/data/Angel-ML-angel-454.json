{
    "project_name": "Angel-ML-angel",
    "error_id": "454",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/454/DoubleVectorTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/454/DoubleVectorTest.java\nindex 7114c5a1825..c734c3051a3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/454/DoubleVectorTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/454/DoubleVectorTest.java\n@@ -104,21 +104,21 @@ public class DoubleVectorTest {\n   public void sparseIntVectorTest() {\n     int dim = 1000;\n     int[] indices = new int[dim];\n-    int[] values  = new int[dim];\n+    int[] values = new int[dim];\n \n     Random random = new Random(Time.monotonicNow());\n-    for (int i = 0; i < dim; i ++) {\n+    for (int i = 0; i < dim; i++) {\n       indices[i] = random.nextInt(dim);\n-      values[i]  = random.nextInt(dim);\n+      values[i] = random.nextInt(dim);\n     }\n \n     SparseIntVector vector = new SparseIntVector(dim, indices, values);\n \n \n     int[] indices2 = vector.getIndices();\n-    int[] values2  = vector.getValues();\n+    int[] values2 = vector.getValues();\n \n-    for (int i = 0; i < indices2.length; i ++) {\n+    for (int i = 0; i < indices2.length; i++) {\n       Assert.assertEquals(vector.get(indices2[i]), values2[i]);\n     }\n   }\n@@ -128,20 +128,20 @@ public class DoubleVectorTest {\n   public void sparseDoubleVectorTest() {\n     int dim = 1000;\n     int[] indices = new int[dim];\n-    double[] values  = new double[dim];\n+    double[] values = new double[dim];\n \n     Random random = new Random(Time.monotonicNow());\n-    for (int i = 0; i < dim; i ++) {\n+    for (int i = 0; i < dim; i++) {\n       indices[i] = random.nextInt(dim);\n-      values[i]  = random.nextInt(dim);\n+      values[i] = random.nextInt(dim);\n     }\n \n     SparseDoubleVector vector = new SparseDoubleVector(dim, indices, values);\n \n     int[] indices2 = vector.getIndices();\n-    double[] values2  = vector.getValues();\n+    double[] values2 = vector.getValues();\n \n-    for (int i = 0; i < indices2.length; i ++) {\n+    for (int i = 0; i < indices2.length; i++) {\n       Assert.assertEquals(vector.get(indices2[i]), values2[i], 0.0);\n     }\n   }\n",
            "diff_size": 10
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/454/DoubleVectorTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/454/DoubleVectorTest.java\nindex 7114c5a1825..657175bd565 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/454/DoubleVectorTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/454/DoubleVectorTest.java\n@@ -28,7 +28,6 @@ import java.util.Random;\n \n \n public class DoubleVectorTest {\n-\n   @Test\n   public void timesBySparseTest() {\n     SparseDoubleVector vector = new SparseDoubleVector(10);\n@@ -104,46 +103,43 @@ public class DoubleVectorTest {\n   public void sparseIntVectorTest() {\n     int dim = 1000;\n     int[] indices = new int[dim];\n-    int[] values  = new int[dim];\n+    int[] values = new int[dim];\n \n     Random random = new Random(Time.monotonicNow());\n     for (int i = 0; i < dim; i ++) {\n       indices[i] = random.nextInt(dim);\n-      values[i]  = random.nextInt(dim);\n+      values[i] = random.nextInt(dim);\n     }\n \n     SparseIntVector vector = new SparseIntVector(dim, indices, values);\n-\n-\n-    int[] indices2 = vector.getIndices();\n-    int[] values2  = vector.getValues();\n+int[] indices2 = vector.getIndices();\n+    int[] values2 = vector.getValues();\n \n     for (int i = 0; i < indices2.length; i ++) {\n       Assert.assertEquals(vector.get(indices2[i]), values2[i]);\n     }\n   }\n \n-\n-  @Test\n+@Test\n   public void sparseDoubleVectorTest() {\n     int dim = 1000;\n     int[] indices = new int[dim];\n-    double[] values  = new double[dim];\n+    double[] values = new double[dim];\n \n     Random random = new Random(Time.monotonicNow());\n     for (int i = 0; i < dim; i ++) {\n       indices[i] = random.nextInt(dim);\n-      values[i]  = random.nextInt(dim);\n+      values[i] = random.nextInt(dim);\n     }\n \n     SparseDoubleVector vector = new SparseDoubleVector(dim, indices, values);\n \n     int[] indices2 = vector.getIndices();\n-    double[] values2  = vector.getValues();\n+    double[] values2 = vector.getValues();\n \n     for (int i = 0; i < indices2.length; i ++) {\n       Assert.assertEquals(vector.get(indices2[i]), values2[i], 0.0);\n     }\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/454/DoubleVectorTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/454/DoubleVectorTest.java\nindex 7114c5a1825..b803b3e3db5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/454/DoubleVectorTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/454/DoubleVectorTest.java\n@@ -23,21 +23,18 @@ import com.tencent.angel.ml.math.vector.SparseIntVector;\n import com.tencent.angel.utils.Time;\n import junit.framework.Assert;\n import org.junit.Test;\n-\n import java.util.Random;\n \n-\n public class DoubleVectorTest {\n \n+\n   @Test\n   public void timesBySparseTest() {\n     SparseDoubleVector vector = new SparseDoubleVector(10);\n     vector.set(1, 1.0);\n     vector.set(3, 3.0);\n     vector.set(5, 5.0);\n-\n     vector.timesBy(2.0);\n-\n     Assert.assertEquals(2.0, vector.get(1), 0.0);\n     Assert.assertEquals(6.0, vector.get(3), 0.0);\n     Assert.assertEquals(10.0, vector.get(5), 0.0);\n@@ -49,13 +46,10 @@ public class DoubleVectorTest {\n     vector.set(1, 1.0);\n     vector.set(3, 3.0);\n     vector.set(5, 5.0);\n-\n     SparseDummyVector dummyVector = new SparseDummyVector(10);\n     dummyVector.set(1, 1.0);\n     dummyVector.set(3, 1.0);\n-\n     vector.plusBy(dummyVector, 1.0);\n-\n     Assert.assertEquals(2.0, vector.get(1), 0.0);\n     Assert.assertEquals(4.0, vector.get(3), 0.0);\n     Assert.assertEquals(5.0, vector.get(5), 0.0);\n@@ -67,14 +61,11 @@ public class DoubleVectorTest {\n     vector.set(1, 1.0);\n     vector.set(3, 3.0);\n     vector.set(5, 5.0);\n-\n     SparseDoubleVector sparseDoubleVector = new SparseDoubleVector(10);\n     sparseDoubleVector.set(1, 1.0);\n     sparseDoubleVector.set(3, 3.0);\n     sparseDoubleVector.set(7, 7.0);\n-\n     vector.plusBy(sparseDoubleVector, 1.0);\n-\n     Assert.assertEquals(2.0, vector.get(1), 0.0);\n     Assert.assertEquals(6.0, vector.get(3), 0.0);\n     Assert.assertEquals(5.0, vector.get(5), 0.0);\n@@ -87,13 +78,10 @@ public class DoubleVectorTest {\n     vector.set(1, 1.0);\n     vector.set(3, 3.0);\n     vector.set(5, 5.0);\n-\n     SparseDummyVector dummyVector = new SparseDummyVector(10);\n     dummyVector.set(1, 1.0);\n     dummyVector.set(3, 1.0);\n-\n     vector.plusBy(dummyVector, 1.0);\n-\n     Assert.assertEquals(2.0, vector.get(1), 0.0);\n     Assert.assertEquals(4.0, vector.get(3), 0.0);\n     Assert.assertEquals(5.0, vector.get(5), 0.0);\n@@ -104,46 +92,38 @@ public class DoubleVectorTest {\n   public void sparseIntVectorTest() {\n     int dim = 1000;\n     int[] indices = new int[dim];\n-    int[] values  = new int[dim];\n-\n+    int[] values = new int[dim];\n     Random random = new Random(Time.monotonicNow());\n-    for (int i = 0; i < dim; i ++) {\n+    for (int i = 0; i < dim; i++) {\n       indices[i] = random.nextInt(dim);\n-      values[i]  = random.nextInt(dim);\n+      values[i] = random.nextInt(dim);\n     }\n \n     SparseIntVector vector = new SparseIntVector(dim, indices, values);\n-\n-\n     int[] indices2 = vector.getIndices();\n-    int[] values2  = vector.getValues();\n-\n-    for (int i = 0; i < indices2.length; i ++) {\n+    int[] values2 = vector.getValues();\n+    for (int i = 0; i < indices2.length; i++) {\n       Assert.assertEquals(vector.get(indices2[i]), values2[i]);\n     }\n   }\n \n-\n   @Test\n   public void sparseDoubleVectorTest() {\n     int dim = 1000;\n     int[] indices = new int[dim];\n-    double[] values  = new double[dim];\n-\n+    double[] values = new double[dim];\n     Random random = new Random(Time.monotonicNow());\n-    for (int i = 0; i < dim; i ++) {\n+    for (int i = 0; i < dim; i++) {\n       indices[i] = random.nextInt(dim);\n-      values[i]  = random.nextInt(dim);\n+      values[i] = random.nextInt(dim);\n     }\n \n     SparseDoubleVector vector = new SparseDoubleVector(dim, indices, values);\n-\n     int[] indices2 = vector.getIndices();\n-    double[] values2  = vector.getValues();\n-\n-    for (int i = 0; i < indices2.length; i ++) {\n+    double[] values2 = vector.getValues();\n+    for (int i = 0; i < indices2.length; i++) {\n       Assert.assertEquals(vector.get(indices2[i]), values2[i], 0.0);\n     }\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 33
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}