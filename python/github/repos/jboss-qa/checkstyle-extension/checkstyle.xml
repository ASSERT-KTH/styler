<?xml version="1.0"?>
<!--
	Copyright 2015 Red Hat Inc. and/or its affiliates and other contributors.

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
-->
<!DOCTYPE module PUBLIC
	"-//Puppy Crawl//DTD Check Configuration 1.3//EN"
	"http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<module name="Checker">

	<module name="Header">
		<property name="headerFile" value="checkstyle/license.header"/>
		<property name="fileExtensions" value="java"/>
	</module>

	<!-- Checks whether files end with a new line -->
	<!-- http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
	<module name="NewlineAtEndOfFile"/>

	<!-- Checks that TODOs & FIXMEs are named and have content -->
	<!-- http://checkstyle.sourceforge.net/config_misc.html#TodoComment -->
	<module name="RegexpSingleline">
		<property name="format" value="((//.*)|(\*.*))TODO(?!(\([a-z]{2,20}\): .+))"/>
		<property name="message" value='TODOs should be named and have content: e.g. "TODO(username): Change to..."'/>
	</module>
	<module name="RegexpSingleline">
		<property name="format" value="((//.*)|(\*.*))FIXME(?!(\([a-z]{2,20}\): .+))"/>
		<property name="message" value='FIXMEs should be named and have content: e.g. "FIXME(username): A fixme desc."'/>
	</module>

	<module name="TreeWalker">
		<property name="tabWidth" value="4"/> <!-- Default tab size for java files -->

		<!-- Internal check extensions -->
		<module name="org.jboss.soa.qa.checkstyle.checks.ArrayInitialisationSpaces"/>
		<module name="org.jboss.soa.qa.checkstyle.checks.BlankLineBeforeBlockEnd"/>
		<module name="org.jboss.soa.qa.checkstyle.checks.BlankLines"/>
		<module name="org.jboss.soa.qa.checkstyle.checks.Whitespace">
			<property name="checkMultipleSpaces" value="true"/>
		</module>

		<!-- Whitespace check -->
		<!-- http://checkstyle.sourceforge.net/config_whitespace.html -->

		<!-- Checks that there are no whitespaces around the Generic tokens < and > -->
		<module name="GenericWhitespace"/>
		<!-- Checks no padding of an empty for initializer -->
		<module name="EmptyForInitializerPad"/>
		<!-- Checks no padding of an empty for iterator -->
		<module name="EmptyForIteratorPad"/>
		<!-- Checks no padding between the identifier of a method definition / call -->
		<module name="MethodParamPad"/>
		<!-- Checks that there is no whitespace after a token -->
		<module name="NoWhitespaceAfter">
			<property name="tokens" value="ARRAY_INIT"/>
			<property name="allowLineBreaks" value="true"/>
		</module>
		<module name="NoWhitespaceAfter">
			<property name="tokens" value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS"/>
			<property name="allowLineBreaks" value="false"/>
		</module>
		<!-- Checks that there is no whitespace before a token -->
		<module name="NoWhitespaceBefore">
			<property name="tokens" value="DOT"/>
			<property name="allowLineBreaks" value="true"/>
		</module>
		<module name="NoWhitespaceBefore">
			<property name="tokens" value="SEMI, POST_DEC, POST_INC"/>
			<property name="allowLineBreaks" value="false"/>
		</module>
		<!-- Checks the policy on how to wrap lines on operators -->
		<module name="OperatorWrap"/>
		<!-- Checks the policy on the padding of parentheses -->
		<module name="ParenPad"/>
		<!-- Checks the policy on the padding of parentheses for typecasts -->
		<module name="TypecastParenPad"/>
		<!-- Checks that a token (coma, semi, typecast) is followed by whitespace. -->
		<module name="WhitespaceAfter"/>
		<!-- Checks that a token (assign, bor, etc.) is surrounded by whitespace -->
		<module name="WhitespaceAround"/>

		<!-- Checks for Javadoc comments -->
		<!-- http://checkstyle.sf.net/config_javadoc.html -->

		<!-- Checks Javadoc comments for class and interface definitions -->
		<module name="JavadocType">
			<property name="severity" value="warning"/>
			<property name="scope" value="protected"/>
		</module>
		<!-- Checks the Javadoc of a method or constructor -->
		<module name="JavadocMethod">
			<property name="severity" value="warning"/>
			<property name="scope" value="protected"/>
			<property name="allowThrowsTagsForSubclasses" value="true"/>
			<property name="allowUndeclaredRTE" value="true"/>
		</module>
		<!-- Checks that variables have Javadoc comments. -->
		<module name="JavadocVariable">
			<property name="severity" value="warning"/>
			<property name="scope" value="public"/>
		</module>
		<!-- Validates Javadoc comments to help ensure they are well formed -->
		<module name="JavadocStyle">
			<property name="checkEmptyJavadoc" value="true"/>
		</module>

		<!-- Checks for naming conventions -->
		<!-- http://checkstyle.sf.net/config_naming.html -->

		<module name="ClassTypeParameterName"/>
		<module name="LocalFinalVariableName"/>
		<module name="LocalVariableName"/>
		<module name="MemberName"/>
		<module name="MethodName"/>
		<module name="MethodTypeParameterName"/>
		<module name="PackageName"/>
		<module name="ParameterName"/>
		<module name="StaticVariableName"/>
		<module name="TypeName"/>

		<!-- Checks for size violations -->
		<!-- http://checkstyle.sf.net/config_sizes.html -->

		<!-- Checks for long source files -->
		<module name="LineLength">
			<property name="max" value="120"/>
		</module>
		<!-- Checks for long anonymous inner classes -->
		<module name="AnonInnerLength">
			<property name="max" value="30"/>
		</module>

		<!-- Checks for imports -->
		<!-- http://checkstyle.sourceforge.net/config_imports.html -->

		<!-- Checks that there are no import statements that use the * notation -->
		<module name="AvoidStarImport"/>
		<!-- Checks for imports from a set of illegal packages -->
		<module name="IllegalImport"/> <!-- defaults to sun.* packages -->
		<!-- Checks for redundant import statements -->
		<module name="RedundantImport"/>
		<!-- Checks for unused import statements -->
		<module name="UnusedImports"/>
		<!-- Checks for out of order import statement. -->
		<module name="ImportOrder">
			<!-- Static imports go first -->
			<property name="option" value="top"/>
			<!-- Imports groups -->
			<property name="groups" value="org.apache,org.jboss,org.switchyard,org.junit,org,com,javax,java,"/>
			<!-- Imports groups separated by one blank line -->
			<property name="separated" value="true"/>
		</module>

		<!-- Modifiers -->
		<!-- http://checkstyle.sourceforge.net/config_modifier.html -->

		<!-- Checks that the order of modifiers conforms to the suggestions in the Java Language specification -->
		<module name="ModifierOrder"/>
		<!-- Checks for redundant modifiers -->
		<module name="RedundantModifier"/>

		<!-- Checks for blocks -->
		<!-- http://checkstyle.sf.net/config_blocks.html -->

		<!-- Checks for empty blocks -->
		<module name="EmptyBlock"/>
		<!-- Checks for the placement of left curly braces ('{') for code blocks -->
		<module name="LeftCurly"/>
		<!-- Checks for braces around code blocks -->
		<module name="NeedBraces"/>
		<!-- Checks the placement of right curly braces ('}') for else, try, catch blocks are on the same line -->
		<module name="RightCurly"/>
		<!-- Checks nested blocks, i.e. blocks that are used freely in the code -->
		<module name="AvoidNestedBlocks"/>

		<!-- Checks for common coding problems -->
		<!-- http://checkstyle.sf.net/config_coding.html -->

		<!-- Checks that String literals are on the left side of an equals() comparison -->
		<module name="EqualsAvoidNull"/>
		<!-- Checks that local variables that never have their values changed are declared final -->
		<module name="FinalLocalVariable"/>
		<!-- Checks that a local variable does not shadow a field that is defined in the same class -->
		<module name="HiddenField">
			<property name="tokens" value="VARIABLE_DEF"/>
		</module>
		<!-- Check that java.lang.Boolean is not directly instantiated -->
		<module name="IllegalInstantiation">
			<property name="classes" value="java.lang.Boolean"/>
		</module>
		<!-- Checks that there are no "magic numbers" -->
		<module name="MagicNumber">
			<property name="severity" value="warning"/>
		</module>
		<!-- Checks that switch statement has "default" clause -->
		<module name="MissingSwitchDefault"/>
		<!-- Checks for overly complicated boolean expressions -->
		<module name="SimplifyBooleanExpression"/>
		<!-- Checks for overly complicated boolean return statements -->
		<module name="SimplifyBooleanReturn"/>

		<!-- Checks for class design -->
		<!-- http://checkstyle.sf.net/config_design.html -->

		<!-- Checks visibility of class members -->
		<module name="VisibilityModifier">
			<property name="protectedAllowed" value="true"/>
			<property name="publicMemberPattern" value="^(serialVersionUID|jUnitTestName)$"/>
		</module>
		<!-- Checks that a class which has only private constructors is declared as final -->
		<module name="FinalClass"/>
		<!-- It is inappropriate to define an interface that does not contain any methods but only constants -->
		<module name="InterfaceIsType"/>
		<!-- Make sure that utility classes (only static methods/fields) do not have a public constructor -->
		<module name="HideUtilityClassConstructor"/>

		<!-- Miscellaneous checks -->
		<!-- http://checkstyle.sf.net/config_misc.html -->

		<!-- Checks that long constants are defined with an upper ell -->
		<module name="UpperEll"/>
		<!-- Checks the style of array type definitions -->
		<module name="ArrayTypeStyle"/>
		<!-- Checks correct indentation of Java Code -->
		<module name="Indentation">
			<property name="lineWrappingIndentation" value="2"/>
			<property name="throwsIndent" value="8"/>
			<property name="arrayInitIndent" value="8"/>
		</module>

		<!-- Annotations -->
		<!-- http://checkstyle.sourceforge.net/config_annotation.html -->

		<!-- This check controls the style with the usage of annotations -->
		<module name="AnnotationUseStyle"/>
		<!-- Verifies that both java.lang.Deprecated and @deprecated Javadoc tag is present when either is present -->
		<module name="MissingDeprecated"/>
		<!-- Verifies that java.lang.Override is present when @inheritDoc Javadoc tag is present -->
		<module name="MissingOverride"/>

		<!-- Metrics -->
		<!-- http://checkstyle.sourceforge.net/config_metrics.html -->

		<!-- Checks cyclomatic complexity against a specified limit of 10 -->
		<module name="CyclomaticComplexity">
			<property name="severity" value="warning"/>
		</module>
		<!-- Checks the number (200) of possible execution paths through a function -->
		<module name="NPathComplexity">
			<property name="severity" value="warning"/>
		</module>

	</module>
</module>
