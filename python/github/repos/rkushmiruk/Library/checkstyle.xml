<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<module name="Checker">
    <module name="JavadocPackage"/>
    <module name="FileTabCharacter"/>

    <!-- Checks for Size Violations -->
    <!-- See http://checkstyle.sourceforge.net/config_sizes.html#FileLength -->
    <module name="FileLength">
        <property name="max" value="2200"/>
    </module>

    <module name="TreeWalker">
        <module name="SuppressWarningsHolder"/>
        <module name="AnnotationUseStyle"/>
        <module name="TypeName"/>
        <module name="ClassTypeParameterName"/>
        <module name="AvoidStarImport"/>
        <module name="RedundantImport"/>
        <module name="EmptyForIteratorPad"/>
        <module name="EmptyForInitializerPad"/>
        <module name="GenericWhitespace"/>
        <module name="MethodParamPad"/>
        <module name="NoWhitespaceBefore"/>
        <module name="OperatorWrap"/>
        <module name="ParenPad"/>
        <module name="TypecastParenPad"/>
        <module name="WhitespaceAfter"/>
        <module name="WhitespaceAround"/>
        <module name="EmptyBlock"/>
        <module name="LeftCurly"/>
        <module name="NeedBraces"/>
        <module name="RightCurly"/>
        <module name="CovariantEquals"/>
        <module name="EqualsAvoidNull"/>
        <module name="FallThrough"/>
        <module name="IllegalTokenText"/>
        <module name="NoClone"/>
        <module name="NoFinalizer"/>
        <module name="UpperEll"/>
        <module name="UnnecessaryParentheses"/>
        <module name="ArrayTypeStyle"/>
        <module name="InterfaceIsType"/>
        <module name="ExplicitInitialization"/>
        <module name="IllegalType"/>
        <module name="InnerTypeLast"/>
        <module name="MultipleVariableDeclarations"/>
        <module name="OuterTypeNumber"/>
        <module name="OneStatementPerLine"/>
        <module name="IllegalInstantiation"/>
        <module name="MissingOverride"/>
        <module name="ModifiedControlVariable"/>
        <module name="MutableException"/>
        <module name="PackageAnnotation"/>
        <module name="PackageDeclaration"/>
        <module name="DeclarationOrder"/>

        <!--This rule doesn't work correctly for method signature Indentations-->
        <module name="Indentation"/>

        <module name="CyclomaticComplexity">
            <property name="severity" value="warning"/>
            <property name="max" value="10"/>
        </module>

        <module name="IllegalThrows">
            <property name="severity" value="warning"/>
        </module>

        <module name="MagicNumber">
            <property name="severity" value="warning"/>
            <property name="ignoreHashCodeMethod" value="false"/>
            <property name="ignoreAnnotation" value="false"/>
        </module>

        <module name="FinalClass">
            <property name="severity" value="warning"/>
        </module>

        <module name="BooleanExpressionComplexity">
            <property name="severity" value="warning"/>
        </module>

        <module name="ExecutableStatementCount">
            <property name="max" value="40"/>
        </module>

        <!-- Checks for Size Violations                     -->
        <!-- See http://checkstyle.sf.net/config_sizes.html -->
        <module name="AnonInnerLength">
            <property name="severity" value="warning"/>
        </module>

        <module name="LineLength">
            <property name="max" value="120"/>
            <property name="ignorePattern" value="^import [^;]++;"/>
        </module>

        <module name="ConstantName">
            <property name="severity" value="info"/>
            <property name="format" value="^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"/>
            <property name="applyToPublic" value="true"/>
            <property name="applyToProtected" value="true"/>
            <property name="applyToPackage" value="true"/>
            <property name="applyToPrivate" value="true"/>
        </module>

        <module name="LocalFinalVariableName">
            <property name="severity" value="warning"/>
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
        </module>

        <module name="LocalVariableName">
            <property name="severity" value="warning"/>
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
        </module>

        <module name="MemberName">
            <property name="severity" value="warning"/>
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <property name="applyToPublic" value="true"/>
            <property name="applyToProtected" value="true"/>
            <property name="applyToPackage" value="true"/>
            <property name="applyToPrivate" value="true"/>
        </module>

        <module name="MethodName">
            <property name="severity" value="warning"/>
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <property name="allowClassName" value="false"/>
        </module>

        <module name="PackageName">
            <property name="severity" value="warning"/>
            <property name="format" value="^[a-z]+(\.[a-zA-Z_][a-zA-Z0-9_]*)*$"/>
        </module>

        <module name="ParameterName">
            <property name="severity" value="warning"/>
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
        </module>

        <module name="StaticVariableName">
            <property name="severity" value="warning"/>
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <property name="applyToPublic" value="true"/>
            <property name="applyToProtected" value="true"/>
            <property name="applyToPackage" value="true"/>
            <property name="applyToPrivate" value="true"/>
        </module>

        <module name="NoWhitespaceAfter">
            <property name="tokens" value="BNOT, DOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS"/>
        </module>

        <!-- Modifier Checks                                    -->
        <!-- See http://checkstyle.sf.net/config_modifiers.html -->
        <module name="ModifierOrder">
            <property name="severity" value="info"/>
        </module>

        <module name="RedundantModifier">
            <property name="severity" value="info"/>
        </module>

        <!-- Checks for blocks. You know, those {}'s         -->
        <!-- See http://checkstyle.sf.net/config_blocks.html -->
        <module name="AvoidNestedBlocks">
            <property name="allowInSwitchCase" value="true"/>
        </module>

        <!-- Removed the DoubleCheckedLocking check, as in Java 5 (and beyond),
        using the volatile keyword addresses the issue. -->
        <!-- module name="DoubleCheckedLocking"/ -->
        <module name="EmptyStatement">
            <property name="severity" value="info"/>
        </module>

        <module name="EqualsHashCode">
            <property name="severity" value="error"/>
        </module>

        <module name="InnerAssignment">
            <property name="severity" value="warning"/>
        </module>

        <module name="MissingSwitchDefault"/>

        <module name="SimplifyBooleanExpression">
            <property name="severity" value="warning"/>
        </module>

        <module name="SimplifyBooleanReturn">
            <property name="severity" value="warning"/>
        </module>

        <!-- Checks for class design -->
        <!-- See http://checkstyle.sf.net/config_design.html -->
        <module name="HideUtilityClassConstructor">
            <property name="severity" value="warning"/>
        </module>

        <module name="VisibilityModifier">
            <property name="severity" value="warning"/>
        </module>

        <!-- Miscellaneous other checks -->
        <!-- See http://checkstyle.sf.net/config_misc.html -->
        <module name="DefaultComesLast">
            <property name="severity" value="warning"/>
        </module>

        <module name="ParameterAssignment">
            <property name="severity" value="warning"/>
        </module>

        <module name="StringLiteralEquality">
            <property name="severity" value="warning"/>
        </module>

        <module name="NestedForDepth">
            <property name="max" value="2"/>
        </module>

        <module name="NestedIfDepth">
            <property name="max" value="2"/>
        </module>

        <module name="NestedTryDepth">
            <property name="max" value="2"/>
        </module>
    </module>

    <!-- Deny non assertj asserts -->
    <module name="RegexpMultiline">
        <property name="fileExtensions" value="java"/>
        <property name="message" value="Use org.assertj.core.api.Assertions.assertThat instead"/>
        <property name="format" value="org\.junit\.Assert\.assert.*|org\.hamcrest\.MatcherAssert.*|junit\.framework\.TestCase.*"/>
    </module>

    <module name="RegexpSingleline">
        <property name="format" value="org\.apache\.commons\.collections"/>
        <property name="fileExtensions" value="java"/>
        <property name="message" value="Use guava instead of commons-collection"/>
    </module>

    <module name="RegexpSingleline">
        <property name="format" value="org\.apache\.commons\.lang\."/>
        <property name="message" value="Use guava or org.apache.commons.lang3 instead of old org.apache.commons.lang."/>
    </module>

    <module name="RegexpSingleline">
        <property name="format" value="edu.umd.cs.findbugs.annotations.SuppressWarnings"/>
        <property name="message" value="Suppress findbugs violations via findbugs-exclude.xml instead of annotations"/>
    </module>

    <module name="RegexpMultiline">
        <property name="format" value="(?:\W|^)catch \((?!final [a-zA-Z.0-9]+(?:(?: |[\r\n]\s*)\| [a-zA-Z.0-9]+)* (?:ex|exx)\))"/>
        <property name="message" value="All catch statements must be declared as: `catch (final Type ex)` or `catch (final Type1 | Type2 exx)`"/>
    </module>

    <module name="RegexpSingleline">
        <property name="format" value="(?:public|private|protected) \w*? = null;"/>
        <property name="message" value="Avoid code smell with explicit `null' assignment"/>
    </module>

    <module name="RegexpSingleline">
        <property name="format" value=".*[ \t]+$"/>
        <property name="message" value="Trailing empty spaces are not acceptable at all!"/>
    </module>

    <module name="RegexpMultiline">
        <property name="format" value='Duration\.create\(\s*+\"'/>
        <property name="message" value="Don't create Duration with string literal, use TimeUnit instead. More details here: https://fxsdlcprod.swissbank.com/confluence/display/CDERIVSPNE/Akka+best+practices"/>
    </module>

    <module name="RegexpSingleline">
        <property name="format" value='com\.google\.common\.base\.Optional'/>
        <property name="message" value="Use Optional from java instead of Guava's one."/>
    </module>

    <module name="RegexpSingleline">
        <property name="format" value='throws DpneException'/>
        <property name="message" value="DpneException is now runtime exception, so no need to define it explicitly."/>
    </module>

    <module name="RegexpSingleline">
        <property name="format" value='\* @author'/>
        <property name="message" value="Avoid unnecessary javadocs. '@author' javadoc can always be seen in VCS history and becomes outdated quite fast, so we agreed to not use it in our code."/>
    </module>

    <module name="SuppressWarningsFilter"/>



    <module name="RegexpSingleline">
        <property name="format" value='""'/>
        <property name="message" value="Avoid explicit empty String constants. Otherwise it easy to miss the difference between quoted: empty line, ', '', ~ and so on. It is recommended to use StringUtils.EMPTY instead"/>
    </module>


</module>