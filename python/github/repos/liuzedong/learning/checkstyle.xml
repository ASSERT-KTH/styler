<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">
<!-- Source = https://github.com/checkstyle/checkstyle/tree/master/src/main/resources -->
<module name="Checker">
	<property name="charset" value="UTF-8" />
	<property name="fileExtensions" value="java, xml, properties" />
	<property name="severity" value="error" /> <!-- warning, error -->

	<module name="FileTabCharacter"><!-- 制表符 -->
		<property name="eachLine" value="true" />
		<message key="containsTab" value="本行含有tab字符" />
	</module>

	<module name="TreeWalker">
		<module name="OuterTypeFilename" /> <!-- 检查外部类型名称是否与文件名对应，例如class foo名为foo.java -->
		<module name="IllegalTokenText"> <!-- 检查非法的分隔符的下个字符。 -->
			<property name="tokens" value="STRING_LITERAL, CHAR_LITERAL" /> <!-- 字符，或者字符串 -->
			<property name="format"
				value="\\u00(08|09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)" />
			<property name="message" value="请勿使用特殊字符命名" />
		</module>
		<module name="LineLength"> <!-- 检查每行代码长度 -->
			<property name="max" value="150" />
			<property name="ignorePattern"
				value="^package.*|^import.*|a href|href|http://|https://|ftp://" />
		</module>
		<module name="NeedBraces" /> <!-- 检查是否应该使用括号的地方没有加括号 -->
		<module name="LeftCurly"> <!-- 定义左大括号'{'显示位置，eol在同一行显示，nl在下一行显示 -->
			<property name="option" value="eol" />
			<property name="maxLineLength" value="150" />
		</module>
		<module name="RightCurly"> <!-- 定义右大括号'}'显示位置，alone单独一行 -->
			<property name="option" value="alone" />
		</module>
		<module name="WhitespaceAround" /> <!-- 检查分隔符左右两边是否都是空格 -->
		<module name="OneStatementPerLine"/> <!-- 确保每行只有一条语句 -->
		<module name="MultipleVariableDeclarations"/> <!-- 每一行只能定义一个变量 -->
		<module name="ArrayTypeStyle"/> <!-- 检查再定义数组时，采用java风格还是c风格，例如：int[] num是java风格，int num[]是c风格。默认是java风格 -->
		<module name="MissingSwitchDefault"/> <!-- 检查switch语句是否有‘default’从句 -->
		<module name="FallThrough"/> <!--检查switch中case后是否加入了跳出语句，例如：return、break、throw、continue -->
		<module name="UpperEll"/> <!--  检查是否在long类型是否定义了大写的L.字母小写l和数字1（一）很相似。 -->
		<module name="ModifierOrder"/> <!-- ModifierOrder 检查修饰符的顺序，默认是 public,protected,private,abstract,static,final,transient,volatile,synchronized,native -->
		<module name="ConstantName"> <!-- 检测常量的命名 -->
			<property name="format" value="(^[A-Z0-9_]{0,19}$)"/>
		</module>
		<module name="LocalFinalVariableName"/> <!-- 检查局部常量的命名是否符合格式 -->
		<module name="LocalVariableName"/> <!-- 检查局部变量的命名是否符合格式 -->
		<module name="MemberName"> <!-- 检查类里变量名是否符合格式 -->
			<property name="format" value="(^[a-z][a-z0-9][a-zA-Z0-9]{0,29}$)"/>
		</module>
		<module name="MethodName"> <!-- 检查方法命名是否符合格式 -->
	      <property name="format" value="(^[a-z][a-zA-Z0-9]{0,29}$)"/>
	    </module>
	    <module name="PackageName"> <!-- 检查包名是否符合格式 -->
	    	<property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
	    </module>
	    <module name="ParameterName"> <!-- 检查所定义的参数名称是否符合格式 -->
	    	<property name="format" value="(^[a-z][a-zA-Z0-9_]{0,30}$)"/>
	    </module>
	    <module name="StaticVariableName"> <!-- 检查静态变量的命名格式 -->
	    	<property name="format" value="(^[A-Z0-9_]{0,30}$)"/>
	    </module>
	    <module name="TypeName"> <!-- 检查类名接口名是否符合格式 -->
	    	<property name="format" value="(^[A-Z][a-zA-Z0-9]{0,29}$)"/>
	    </module>
	    <module name="NoFinalizer"/> <!-- 检查是否有定义finalize() -->
	    <module name="Indentation"> <!-- 检查Java代码的缩进 basicOffset:相对代码体， braceAdjustment:括号的缩进 -->
	    	<property name="basicOffset" value="4"/> 
	    	<property name="braceAdjustment" value="0"/>
	    	<property name="caseIndent" value="4"/>
	    </module>
	    <module name="OverloadMethodsDeclarationOrder"/> <!-- 检查是否有不正确的重载方法被组合在一起 -->
	    <module name="MethodParamPad"/> <!-- 检查方法参数的格式 -->
	    <module name="OperatorWrap"/> <!-- 检查运算符是否在应在同一行 -->
	    <module name="AnnotationLocation"> <!-- 检查注释的位置 -->
            <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF"/>
        </module>
        <module name="AnnotationLocation">
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="allowSamelineMultipleAnnotations" value="true"/>
        </module>
        <module name="AtclauseOrder"> <!-- 检查java-doc块标签或者标签顺序 -->
            <property name="tagOrder" value="@param, @return, @throws, @deprecated"/>
            <property name="target" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF"/>
        </module>
        <module name="JavadocMethod"> <!-- 检查方法的javadoc的注释 -->
            <property name="scope" value="private"/> <!-- scope: 可以检查的方法的范围，例如：public只能检查public修饰的方法，private可以检查所有的方法 -->
            <property name="allowMissingParamTags" value="false"/> <!-- allowMissingParamTags: 是否忽略对参数注释的检查 -->
            <property name="allowMissingThrowsTags" value="false"/> <!-- allowMissingThrowsTags: 是否忽略对throws注释的检查 -->
            <property name="allowMissingReturnTag" value="false"/> <!-- allowMissingReturnTag: 是否忽略对return注释的检查 -->
            <property name="allowMissingPropertyJavadoc" value="true"/> <!--允许get set 方法没有注释-->
            <property name="allowUndeclaredRTE" value="true"/>
            <property name="allowThrowsTagsForSubclasses" value="true"/>
            <property name="tokens" value="METHOD_DEF"/>
        </module>
        <module name="JavadocType"> <!-- 检查类和接口的javadoc 默认不检查author 和version tags -->
            <property name="authorFormat" value="\S"/> <!-- authorFormat: 检查author标签的格式 -->
            <property name="scope" value="protected"/> <!-- scope: 可以检查的类的范围，例如：public只能检查public修饰的类，private可以检查所有的类 -->
            <property name="tokens" value="CLASS_DEF,INTERFACE_DEF"/> <!-- tokens: 该属性适用的类型，例如：CLASS_DEF,INTERFACE_DEF -->
        </module>
        <module name="SingleLineJavadoc"/> <!-- 检查javadoc块是否可以适应单行，并且不包含at-clause -->
	</module>
</module>
