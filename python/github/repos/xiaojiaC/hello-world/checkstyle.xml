<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
  "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
  "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">
<!-- https://github.com/checkstyle/checkstyle/blob/checkstyle-8.12/src/main/resources/google_checks.xml -->
<module name = "Checker">
  <property name="charset" value="UTF-8"/>
  <property name="severity" value="warning"/>
  <property name="fileExtensions" value="java, properties, xml"/>

  <!-- 检查package-info.java -->
  <!--<module name="JavadocPackage"/>-->

  <!-- 检查文件是否以新行结尾 -->
  <module name="NewlineAtEndOfFile"/>

  <!-- 检查源代码中是否没有制表符 -->
  <module name="FileTabCharacter"/>

  <!-- 检查properties文件是否包含相同的keys -->
  <module name="Translation"/>

  <!-- 文件长度不超过1500行 -->
  <module name="FileLength">
    <property name="max" value="1500"/>
  </module>

  <!-- http://checkstyle.sourceforge.net/checks.html -->
  <module name="TreeWalker">
    <!-- 检查所有的interface和class是否有Javadoc -->
    <module name="JavadocType" />
    <!-- 检查所有的方法的Javadoc -->
    <module name="JavadocMethod">
      <property name="scope" value="public"/>
      <property name="allowMissingParamTags" value="true"/>
      <property name="allowMissingThrowsTags" value="true"/>
      <property name="allowMissingReturnTag" value="true"/>
      <property name="minLineCount" value="2"/>
      <property name="allowedAnnotations" value="Override, Test"/>
      <property name="allowThrowsTagsForSubclasses" value="true"/>
    </module>
    <!-- 检查某个变量的Javadoc -->
    <module name="JavadocVariable">
      <property name="scope" value="public"/>
    </module>
    <!-- 检查Javadoc的格式 -->
    <module name="JavadocStyle">
      <property name="scope" value="public"/>
      <!-- 注释第一句的末尾是否要有一个句号,true必须有,default为true -->
      <property name="checkFirstSentence" value="false"/>
    </module>

    <!-- 每行不超过100个字-->
    <module name="LineLength">
      <property name="max" value="100"/>
      <property name="ignorePattern" value="^package.*|^import.*|a href|href|http://|https://|ftp://"/>
    </module>
    <!-- 方法不超过80行 -->
    <module name="MethodLength">
      <property name="tokens" value="METHOD_DEF"/>
      <property name="max" value="80"/>
      <!-- 统计时是否包括空行和以//开始的注释,缺省为true -->
      <property name="countEmpty" value="false"/>
    </module>
    <!-- 方法的参数个数不超过5个 -->
    <module name="ParameterNumber">
      <property name="max" value="6"/>
    </module>

    <!-- 包名的检查 -->
    <module name="PackageName">
      <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
      <message key="name.invalidPattern" value="Package name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <!-- 类/接口名的检查 -->
    <module name="TypeName">
      <message key="name.invalidPattern" value="Type name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <!-- 常量名的检查 -->
    <module name="ConstantName"/>
    <!-- 静态变量的检查 -->
    <module name="StaticVariableName"/>
    <!-- 成员变量的检查 -->
    <module name="MemberName">
      <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
      <message key="name.invalidPattern" value="Member name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <!-- 方法名的检查 -->
    <module name="MethodName">
      <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9_]*$"/>
      <message key="name.invalidPattern" value="Method name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <!-- 方法参数的检查 -->
    <module name="ParameterName">
      <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
      <message key="name.invalidPattern" value="Parameter name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <!-- 局部变量的检查 -->
    <module name="LocalVariableName">
      <property name="tokens" value="VARIABLE_DEF"/>
      <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
      <message key="name.invalidPattern" value="Local variable name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <!-- final局部变量的检查 -->
    <module name="LocalFinalVariableName">
      <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
      <message key="name.invalidPattern" value="Local variable name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <!-- Lambda表达式参数的检查 -->
    <module name="LambdaParameterName">
      <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
      <message key="name.invalidPattern" value="Lambda parameter name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <!-- Catch块参数的检查 -->
    <module name="CatchParameterName">
      <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
      <message key="name.invalidPattern" value="Catch parameter name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <!-- 类类型参数名称的检查 -->
    <module name="ClassTypeParameterName">
      <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
      <message key="name.invalidPattern" value="Class type name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <!-- 方法类型参数名称的检查 -->
    <module name="MethodTypeParameterName">
      <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
      <message key="name.invalidPattern" value="Method type name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <!-- 接口类型参数名称的检查 -->
    <module name="InterfaceTypeParameterName">
      <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
      <message key="name.invalidPattern" value="Interface type name ''{0}'' must match pattern ''{1}''."/>
    </module>

    <!-- 检查使用*号的导入,排除junit断言 -->
    <module name="AvoidStarImport">
      <property name="excludes" value="org.junit.Assert"/>
    </module>
    <!-- 检查是否有非法的包,确省检查sun.*;对于某些包是不建议直接调用的 -->
    <module name="IllegalImport"/>
    <!-- 检查冗余的导入 -->
    <module name="RedundantImport"/>
    <!-- 检查未使用的导入 -->
    <module name="UnusedImports">
      <property name="processJavadoc" value="false"/>
    </module>
    <!-- 导入排序 -->
    <module name="ImportOrder">
      <!-- 分组,首先是“java”,然后是“javax”包,然后是所有其他导入 -->
      <!--<property name="groups" value="java,javax"/>-->
      <!-- 同一个组内是否排序,确省为true -->
      <property name="ordered" value="true"/>
      <!-- 各个组之间是否需要用空行分隔,确省为false -->
      <property name="separated" value="false"/>
      <!-- 是否是大小写敏感的,确省true -->
      <property name="caseSensitive" value="true"/>
      <!-- 类型导入和静态导入之间的相对顺序的策略,确省为底部静态导入 -->
      <property name="option" value="under"/>
      <!-- 位于顶部或底部的静态导入是否在组内排序 -->
      <property name="sortStaticImportsAlphabetically" value="true"/>
    </module>
    <!-- 自定义导入控制 -->
    <module name="ImportControl">
      <property name="file" value="${checkstyle.config.dir}/import-control.xml"/>
    </module>

    <!-- 检查空格 -->
    <module name="EmptyForIteratorPad"/>
    <module name="GenericWhitespace"/>
    <module name="MethodParamPad"/>
    <module name="NoWhitespaceAfter"/>
    <module name="NoWhitespaceBefore">
      <property name="tokens" value="COMMA, SEMI, POST_INC, POST_DEC, DOT, ELLIPSIS, METHOD_REF"/>
      <property name="allowLineBreaks" value="true"/>
    </module>
    <module name="ParenPad"/>
    <module name="OperatorWrap">
      <property name="option" value="NL"/>
      <property name="tokens" value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR,
                    LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR, METHOD_REF "/>
    </module>
    <module name="TypecastParenPad"/>
    <module name="WhitespaceAfter"/>
    <module name="WhitespaceAround">
      <property name="allowEmptyConstructors" value="true"/>
      <property name="allowEmptyMethods" value="true"/>
      <property name="allowEmptyTypes" value="true"/>
      <property name="allowEmptyLoops" value="true"/>
      <message key="ws.notFollowed"
        value="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks may only be represented as '{}' when not part of a multi-block statement (4.1.3)"/>
      <message key="ws.notPreceded" value="WhitespaceAround: ''{0}'' is not preceded with whitespace."/>
    </module>

    <!-- 检查修饰符顺序 -->
    <module name="ModifierOrder"/>
    <!-- 多余的修饰符 -->
    <module name="RedundantModifier"/>

    <module name="OneTopLevelClass"/>
    <module name="NoLineWrap"/>
    <!-- 空代码块 -->
    <module name="EmptyBlock">
      <property name="option" value="TEXT"/>
      <property name="tokens" value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH"/>
    </module>
    <!-- 所有代码块都要使用大括号 -->
    <module name="NeedBraces"/>
    <!-- 检查左右花括号的位置 -->
    <module name="LeftCurly"/>
    <module name="RightCurly">
      <property name="id" value="RightCurlySame"/>
      <property name="tokens" value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_DO"/>
    </module>
    <module name="RightCurly">
      <property name="id" value="RightCurlyAlone"/>
      <property name="option" value="alone"/>
      <property name="tokens" value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT, INSTANCE_INIT"/>
    </module>

    <!-- 重载方法不能缺少@Override标注 -->
    <module name="MissingOverride"/>
    <!-- 检查java.lang.Deprecated注解或@deprecated的Javadoc标记是否同时存在 -->
    <module name="MissingDeprecated">
      <!-- true时检查忽略JavaDoc丢失时的情况，但是当JavaDoc存在但JavaDoc中缺少@deprecated或元素中缺少@deprecated时仍会发出警告 -->
      <property name="skipNoJavadoc" value="true" />
    </module>
    <!-- 数组的声明是否允许Java的类型,确省为允许,Java类型为String[] xx,C++的类型为String xx[]; -->
    <module name="ArrayTypeStyle"/>
    <!-- 声明自己的Task标识 -->
    <module name="TodoComment">
      <property name="format" value="TODO"/>
    </module>
    <!-- 当定义一个常量时,希望使用大写的L来代替小写的l,原因是小写的l和数字1很象 -->
    <module name="UpperEll"/>
    <!-- 检查缩进是否规范 -->
    <module name="Indentation">
      <!-- 对于switch case不缩进 -->
      <property name="caseIndent" value="0"/>
    </module>
    <!-- switch块是否丢失default子句 -->
    <module name="MissingSwitchDefault"/>
    <!-- 是否存在魔术数 -->
    <module name="MagicNumber">
      <property name="ignoreHashCodeMethod" value="true"/>
      <property name="ignoreAnnotation" value="true"/>
    </module>
    <!-- 检查嵌套复杂度，默认为10 -->
    <module name="CyclomaticComplexity"/>
  </module>
</module>
