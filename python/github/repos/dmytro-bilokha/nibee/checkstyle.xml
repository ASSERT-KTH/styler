<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
        "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
        "https://checkstyle.org/dtds/configuration_1_3.dtd">

<module name = "Checker">

    <property name="charset" value="UTF-8"/>
    <property name="severity" value="error"/>
    <property name="fileExtensions" value="java, properties, xml"/>

    <!-- No too long files -->
    <module name="FileLength">
        <property name="max" value="1500"/>
    </module>

    <!-- No tabs in the source code -->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true"/>
    </module>

    <!-- Unix-style end of line at the end of each file -->
    <module name="NewlineAtEndOfFile">
        <property name="lineSeparator" value="lf"/>
    </module>

    <!-- Properties keys should be unique -->
    <module name="UniqueProperties"/>

    <module name="TreeWalker">

        <!-- Star imports could lead to a lot of pain to investigate the issue -->
        <module name="AvoidStarImport"/>

        <!-- No long abbreviations in regular names -->
        <module name="AbbreviationAsWordInName">
            <property name="ignoreFinal" value="false"/>
            <property name="allowedAbbreviationLength" value="2"/>
        </module>

        <!-- Class with name starting from 'Abstract' should be abstract -->
        <module name="AbstractClassName">
            <property name="ignoreName" value="true"/>
        </module>

        <!-- Name of the exception in the catch block according to the pattern -->
        <module name="CatchParameterName"/>

        <!-- Class/interface type in generic should be one capital letter -->
        <module name="ClassTypeParameterName"/>
        <module name="InterfaceTypeParameterName"/>

        <!-- Capitalized constant names -->
        <module name="ConstantName"/>

        <!-- Classical Java convention for names -->
        <module name="LocalFinalVariableName"/>
        <module name="LocalVariableName">
            <property name="allowOneCharVarInForLoop" value="true"/>
        </module>
        <module name="MemberName"/>
        <module name="MethodName"/>
        <module name="MethodTypeParameterName"/>
        <module name="PackageName"/>
        <module name="ParameterName"/>
        <module name="StaticVariableName"/>
        <module name="TypeName"/>

        <!-- No public constructors for utility classes -->
        <module name="HideUtilityClassConstructor"/>

        <!-- Inner types at the bottom of the file -->
        <module name="InnerTypeLast"/>

        <!-- No constants interfaces -->
        <module name="InterfaceIsType"/>

        <!-- One top level class per file -->
        <module name="OneTopLevelClass"/>

        <!-- Not too much throws in the signature -->
        <module name="ThrowsCount">
            <property name="max" value="2"/>
        </module>

        <!-- Prevent bug because of equals overriding mess -->
        <module name="CovariantEquals"/>

        <!-- Keep recommended order of the class members -->
        <module name="DeclarationOrder"/>

        <!-- Default goes last -->
        <module name="DefaultComesLast"/>

        <!-- Equals style with constant first -->
        <module name="EqualsAvoidNull"/>

        <!-- Equals and hasCode override together -->
        <module name="EqualsHashCode"/>

        <!-- No explicit initialization to the default values -->
        <module name="ExplicitInitialization"/>

        <!-- No need to instantiate classes with factory methods -->
        <module name="IllegalInstantiation">
            <property name="classes" value="java.lang.Boolean,java.lang.Integer,java.lang.Long,java.lang.String,java.math.BigDecimal,java.math.BigInteger"/>
        </module>

        <!-- No throws of too general exceptions, errors, etc -->
        <module name="IllegalThrows"/>

        <!-- Every switch should have default clause -->
        <module name="MissingSwitchDefault"/>

        <!-- No deep nesting -->
        <module name="NestedForDepth"/>
        <module name="NestedIfDepth"/>
        <module name="NestedTryDepth"/>

        <!-- No clone methods -->
        <module name="NoClone"/>

        <!-- No finalizers -->
        <module name="NoFinalizer"/>

        <!-- One statement per line -->
        <module name="OneStatementPerLine"/>

        <!-- Overloaded methods should be grouped -->
        <module name="OverloadMethodsDeclarationOrder"/>

        <!-- Every class needs a package -->
        <module name="PackageDeclaration"/>

        <!-- No parameters assignment -->
        <module name="ParameterAssignment"/>

        <!-- No not needed ifs -->
        <module name="SimplifyBooleanReturn"/>

        <!-- Use equals() for strings -->
        <module name="StringLiteralEquality"/>

        <!-- Standardize imports order -->
        <module name="CustomImportOrder">
            <property name="customImportOrderRules"
                      value="THIRD_PARTY_PACKAGE###SPECIAL_IMPORTS###STANDARD_JAVA_PACKAGE###STATIC"/>
            <property name="specialImportsRegExp" value="^javax\."/>
            <property name="standardPackageRegExp" value="^java\."/>
            <property name="sortImportsInGroupAlphabetically" value="true"/>
            <property name="separateLineBetweenGroups" value="false"/>
        </module>

        <!-- No useless imports -->
        <module name="RedundantImport"/>
        <module name="UnusedImports"/>

        <!-- Avoid too complex code -->
        <module name="ClassFanOutComplexity"/>
        <module name="CyclomaticComplexity"/>
        <module name="JavaNCSS"/>

        <!-- Java arrays style -->
        <module name="ArrayTypeStyle"/>

        <!-- No escaped unicode -->
        <module name="AvoidEscapedUnicodeCharacters"/>

        <!-- Comments should be indented like a code -->
        <module name="CommentsIndentation"/>

        <!-- Indentation rules -->
        <module name="Indentation"/>

        <!-- File name should correspond to the class name -->
        <module name="OuterTypeFilename"/>

        <!-- No end-line comments -->
        <module name="TrailingComment"/>

        <!-- 10L and not 10l in constants -->
        <module name="UpperEll"/>

        <!-- Use modifiers order recommended by JLS -->
        <module name="ModifierOrder"/>

        <!-- No redundant modifiers -->
        <module name="RedundantModifier"/>

        <!-- No too long anonymous inner classes -->
        <module name="AnonInnerLength"/>

        <!-- No super-length lines -->
        <module name="LineLength">
            <property name="max" value="120"/>
        </module>

        <!-- No too long methods -->
        <module name="MethodLength"/>

        <!-- No too many parameters -->
        <module name="ParameterNumber"/>

        <!-- No space for empty -->
        <module name="EmptyForInitializerPad"/>
        <module name="EmptyForIteratorPad"/>

        <!-- Regulate empty lines -->
        <module name="EmptyLineSeparator">
            <property name="allowMultipleEmptyLinesInsideClassMembers" value="false"/>
            <property name="allowMultipleEmptyLines" value="false"/>
            <property name="tokens"
                      value="PACKAGE_DEF, IMPORT, CLASS_DEF, INTERFACE_DEF, ENUM_DEF, STATIC_INIT, INSTANCE_INIT, METHOD_DEF, CTOR_DEF"/>
        </module>

        <!-- Generics whitespace configuration -->
        <module name="GenericWhitespace"/>

        <!-- No method parameters padding -->
        <module name="MethodParamPad"/>

        <!-- No line wrapping for package and imports -->
        <module name="NoLineWrap"/>

        <!-- Regulate whitespaces after some tokens -->
        <module name="NoWhitespaceAfter"/>
        <module name="NoWhitespaceBefore">
            <property name="allowLineBreaks" value="true"/>
        </module>

        <!-- Wrap lines -->
        <module name="OperatorWrap"/>
        <module name="SeparatorWrap">
            <property name="tokens" value="DOT, AT"/>
            <property name="option" value="nl"/>
        </module>

        <!-- No padding of parentheses -->
        <module name="ParenPad"/>
        <module name="TypecastParenPad"/>

        <!-- Whitespace config -->
        <module name="WhitespaceAfter"/>
        <module name="WhitespaceAround"/>

    </module>

</module>
