<?xml version="1.0"?>
<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.3//EN" "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<module name="Checker">
	<module name="TreeWalker">
		<property name="tabWidth" value="4" />
		<module name="AnnotationUseStyle" />
		<module name="ArrayTypeStyle" />
		<module name="AvoidNestedBlocks" />
		<module name="AvoidStarImport" />
		<module name="DefaultComesLast" />
		<module name="GenericWhitespace" />
		<module name="JavadocStyle">
			<property name="checkFirstSentence" value="false" />
		</module>
		<module name="LocalFinalVariableName">
			<property name="format" value="^[a-z0-9][_a-zA-Z0-9]*$" />
			<message key="name.invalidPattern" value="Local final variable ''{0}'' must match pattern ''{1}''" />
		</module>
		<module name="LocalVariableName">
			<property name="format" value="^[a-z0-9][_a-zA-Z0-9]*$" />
			<message key="name.invalidPattern" value="Local non-final variable ''{0}'' must match pattern ''{1}''" />
		</module>
		<module name="MemberName">
			<property name="applyToPackage" value="false" />
			<property name="applyToPrivate" value="false" />
			<property name="format" value="^[a-z0-9][_a-zA-Z0-9]*$" />
			<message key="name.invalidPattern" value="Protected or public non-static field ''{0}'' must match pattern ''{1}''" />
		</module>
		<module name="MemberName">
			<property name="applyToProtected" value="false" />
			<property name="applyToPublic" value="false" />
			<property name="format" value="^_[a-z0-9][_a-zA-Z0-9]*$" />
			<message key="name.invalidPattern" value="Private non-static field ''{0}'' must match pattern ''{1}''" />
		</module>
		<module name="MethodParamPad" />
		<module name="MissingDeprecated" />
		<module name="ModifierOrder" />
		<module name="MultipleVariableDeclarations" />
		<module name="NoLineWrap" />
		<module name="NoWhitespaceAfter">
			<property name="tokens" value="ARRAY_DECLARATOR, ARRAY_INIT, BNOT, DEC, DOT, INC, INDEX_OP, LNOT, TYPECAST, UNARY_MINUS, UNARY_PLUS" />
		</module>
		<module name="NoWhitespaceBefore" />
		<module name="OneStatementPerLine" />
		<module name="OperatorWrap">
			<property name="option" value="eol" />
			<property name="tokens" value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, SL, SL_ASSIGN, SR, SR_ASSIGN, STAR, STAR_ASSIGN, TYPE_EXTENSION_AND" />
		</module>
		<module name="PackageName" />
		<module name="ParameterName">
			<message key="name.invalidPattern" value="Parameter ''{0}'' must match pattern ''{1}''" />
		</module>
		<module name="RequireThis" />
		<module name="StaticVariableName">
			<property name="applyToPackage" value="false" />
			<property name="applyToPrivate" value="false" />
			<property name="format" value="^[a-z0-9][_a-zA-Z0-9]*$" />
			<message key="name.invalidPattern" value="Protected or public static non-final field ''{0}'' must match pattern ''{1}''" />
		</module>
		<module name="StaticVariableName">
			<property name="applyToProtected" value="false" />
			<property name="applyToPublic" value="false" />
			<property name="format" value="^_[a-z0-9][_a-zA-Z0-9]*$" />
			<message key="name.invalidPattern" value="Private static non-final field ''{0}'' must match pattern ''{1}''" />
		</module>
		<module name="StringLiteralEquality" />
		<module name="TypeName">
			<property name="format" value="^[A-Z][_a-zA-Z0-9]*" />
			<message key="name.invalidPattern" value="Class, interface, enum or annotation ''{0}'' must match pattern ''{1}''" />
		</module>
		<module name="UnnecessaryParentheses" />
		<module name="WhitespaceAfter">
			<property name="tokens" value="COMMA, SEMI" />
		</module>
		<module name="WhitespaceAround">
			<property name="allowEmptyTypes" value="true" />
		</module>

		<!-- Custom checks -->

		<module name="com.liferay.source.formatter.checkstyle.checks.AnnotationParameterOrder">
			<message key="annotation.unsortedParameter" value="Annotation parameter ''{0}'' is not sorted alphabetically" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.Arquillian">
			<message key="import.invalid" value="Use import ''com.liferay.arquillian.extension.junit.bridge.junit.Arquillian'' instead of ''org.jboss.arquillian.junit.Arquillian'', see LPS-68945" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.AssertEquals">
			<message key="assert.add.information" value="Add ''{0}'' as extra parameter at the beginning of the ''Assert.assertEquals'' call to provide more information to the test. See LPS-70411." />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.Chaining">
			<property name="allowedClassNames" value="^(?!String).+Builder,Optional,Stream" />
			<property name="allowedMethodNames" value="bind" />
			<message key="chaining.avoid" value="Avoid chaining on method ''{0}''. See https://github.com/liferay/liferay-portal/blob/master/modules/util/source-formatter/documentation/chaining.markdown" />
			<message key="chaining.avoid.multiple" value="Avoid multiple chaining on method ''{0}''. See https://github.com/liferay/liferay-portal/blob/master/modules/util/source-formatter/documentation/chaining.markdown" />
			<message key="concat.avoid.too.many" value="Use StringBundler instead of chaining concat when there is more than 3 parts" />
			<message key="styling.incorrect" value="Chaining on method ''{0}'' is allowed, but follow the styling described here: https://github.com/liferay/liferay-portal/blob/master/modules/util/source-formatter/documentation/chaining.markdown" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.ConstantName">
			<message key="name.invalidPrivatePattern" value="Private constant ''{0}'' must match pattern ''{1}''" />
			<message key="name.invalidProtectedPublicPattern" value="Protected or public constant ''{0}'' must match pattern ''{1}''" />
			<message key="name.collectionPrivatePattern" value="Private collection ''{0}'' must match pattern ''{1}''" />
			<message key="name.collectionProtectedPublicPattern" value="Protected or public collection ''{0}'' must match pattern ''{1}''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.FilterStringWhitespace">
			<message key="whitespace.incorrect" value="The value of ''{0}'' should not have spaces around ''='', see LPS-70526" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.Indentation">
			<message key="indentation.incorrect" value="Line starts with ''{0}'' tabs, but ''{1}'' tabs are expected" />
			<message key="indentation.inside.chain.incorrect" value="Incorrect indentation inside chain. See https://github.com/liferay/liferay-portal/blob/master/modules/util/source-formatter/documentation/chaining.markdown" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.InstanceofOrder">
			<message key="instanceof.order" value="''{0}'' should come before ''{1}''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.Javadoc">
			<message key="javadoc.empty.line" value="First or last line in javadoc should not be empty" />
			<message key="javadoc.incorrect.first.line" value="Javadoc should start with ''/**''" />
			<message key="javadoc.incorrect.last.line" value="Javadoc should end with ''*/''" />
			<message key="javadoc.multiple" value="''{0}'' has multiple javadocs" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.JSONNaming">
			<message key="variable.name.reserved" value="{0} name ending with ''{1}'' is reserved for object ''{2}''" />
			<message key="variable.rename" value="Rename {0} ''{1}'' to ''{2}''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.LocalPattern">
			<message key="pattern.local" value="Create a global variable for Pattern ''{0}''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.LPS42924">
			<message key="lps42924" value="Use ''classNameLocalService.getClassNameId'' instead of ''PortalUtil.getClassName''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.MethodName">
			<property name="applyToPackage" value="false" />
			<property name="applyToPrivate" value="false" />
			<property name="format" value="^[a-z0-9][_a-zA-Z0-9]*$" />
			<message key="name.invalidPattern" value="Protected or public method ''{0}'' must match pattern ''{1}''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.MethodName">
			<property name="applyToProtected" value="false" />
			<property name="applyToPublic" value="false" />
			<property name="checkDoMethodName" value="true" />
			<property name="format" value="^_[a-z0-9][_a-zA-Z0-9]*$|readObject|writeObject" />
			<message key="method.rename" value="Rename method ''{0}'' to ''{1}''" />
			<message key="name.invalidPattern" value="Private method ''{0}'' must match pattern ''{1}''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.MissingAuthor">
			<message key="author.missing" value="Missing author" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.MissingEmptyLine">
			<message key="empty.line.missing.after.variable.reference" value="There should be an empty line before line ''{0}'', as we finished referencing variable ''{1}''" />
			<message key="empty.line.missing.before.variable.use" value="There should be an empty line between assigning and using variable ''{0}''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.MissingModifier">
			<message key="modifier.missing" value="Missing modifier for ''{0}''" />
		</module>
		<!--<module name="com.liferay.source.formatter.checkstyle.checks.MissingOverride">
			<message key="override.missing" value="Missing @Override" />
		</module>-->
		<module name="com.liferay.source.formatter.checkstyle.checks.NotRequireThis">
			<message key="variable.not.require.this" value="Reference to variable ''{0}'' does not need ''.this''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.NumberSuffix">
			<message key="suffix.incorrect" value="Use uppercase ''{0}'' as suffix for the type ''{1}''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.OperatorOrder">
			<message key="left.argument.literal.or.num" value="''{0}'' should be on the right hand side of the operator" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.PersistenceCall">
			<message key="persistence.call.illegal" value="Illegal call to class ''{0}'', see LPS-68923" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.PlusStatement">
			<property name="maxLineLength" value="80" />
			<message key="end.character.invalid" value="When concatenating multiple literal strings using '+', only the last literal string can end with ''{0}''" />
			<message key="literal.string.combine" value="Combine the literal strings ''{0}'' and ''{1}''" />
			<message key="literal.string.move" value="Add the string ''{0}'' to the previous literal string" />
			<message key="plus.statement.too.long" value="Use StringBuilder/StringBundler instead of concatenating over more than 3 lines" />
			<message key="start.character.invalid" value="When concatenating multiple literal strings using '+', only the first literal string can start with ''{0}''" />
			<message key="tabbing.incorrect" value="Expected indentation is ''{0}'' tabs" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.SelfReference">
			<message key="self.reference.unneeded" value="Reference to method ''{0}'' does not need ''{1}''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.SizeIsZero">
			<message key="method.use" value="Use method ''{0}'' instead" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.Subname">
			<message key="method.invalidName" value="'sub' should be followed by a lowercase character for method ''{0}''" />
			<message key="parameter.invalidName" value="'sub' should be followed by a lowercase character for parameter ''{0}''" />
			<message key="variable.invalidName" value="'sub' should be followed by a lowercase character for variable ''{0}''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.TernaryOperator">
			<message key="ternary.operator.avoid" value="Use if-else-statement instead of ternary conditional operator for better readability" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.TestClass">
			<message key="test.base.class.invalidName" value="Base test class ''{0}'' should start with ''Base''" />
			<message key="test.case.class.incorrect.abstract" value="Class ending in *TestCase should be abstract. Either make the class abstract or rename to ''{0}'' if the class contains actual tests" />
			<message key="test.class.incorrect.abstract" value="Test class ''{0}'' should not be abstract" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.TransactionalTestRule">
			<message key="import.invalid" value="Avoid using import TransactionalTestRule in *StagedModelDataHandlerTest, see LPS-68908" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.UnprocessedException">
			<message key="exception.unprocessed" value="Unprocessed exception ''{0}'', see LPS-36174" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.UnusedParameter">
			<message key="parameter.unused" value="Parameter ''{0}'' is unused" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.UnwrappedVariableInfo">
			<message key="variable.info.unwrapped" value="Wrap the variable ''{0}'' into an inner class ''Concealer'' in order to defer array elements initialization, see LPS-72768" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.ValidatorIsNull">
			<message key="method.invalidName" value="Avoid using method ''{0}''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.VariableName">
			<message key="variable.rename" value="Rename variable ''{0}'' to ''{1}''" />
		</module>
	</module>
</module>