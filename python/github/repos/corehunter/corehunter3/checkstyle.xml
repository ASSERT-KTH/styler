<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
          "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
          "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!--
    Compatible with checkstyle v6.14.1.
 -->

<module name = "Checker">
    
    <property name="charset" value="UTF-8"/>
    <property name="severity" value="error"/>
    
    <property name="fileExtensions" value="java, properties, xml"/>

    <!-- Tab characters are not allowed. -->
    <module name="FileTabCharacter"/>

    <module name="TreeWalker">
        
        <!-- Checks that the outer type name and the file name match. -->
        <module name="OuterTypeFilename"/>
        
        <!-- Checks that each top-level class, interface or enum resides in a source file of its own. -->
        <module name="OneTopLevelClass"/>
        
        <!-- Set maximum line length to 120. Ignores package/imports statements and URLs. -->
        <module name="LineLength">
            <property name="max" value="120"/>
            <property name="ignorePattern" value="^package.*|^import.*|a href|href|http://|https://|ftp://"/>
        </module>
        
        <!-- No star imports allowed. -->
        <module name="AvoidStarImport"/>
        
        <!-- Do not wrap import and package statements. -->
        <module name="NoLineWrap"/>
        
        <!-- Braces are always compulsory. -->
        <module name="NeedBraces"/>
        
        <!-- Opening brace is required to be on the end of the line, except for enums. -->
        <module name="LeftCurly"/>
        
        <!--
            Closing brace is preceded with a line break. A line break is added after the closing
            brace if that brace terminates a statement or the body of a method, constructor or
            named class. For example, there is no line break after the brace if it is followed
            by else or a comma.
            
            An empty block or block-like construct may be closed immediately
            after it is opened, with no characters or line break in between ({}),
            unless it is part of a multi-block statement (one that directly contains
            multiple blocks: if/else-if/else or try/catch/finally).
         -->
        <module name="RightCurly"/>
        <module name="RightCurly">
            <property name="option" value="alone"/>
            <property name="tokens" value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO, STATIC_INIT, INSTANCE_INIT"/>
        </module>
        
        <!--
            Empty if/else-if/else, try/catch/finally or switch blocks should be commented.
        -->
        <module name="EmptyBlock">
            <property name="option" value="TEXT"/>
            <property name="tokens" value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH"/>
        </module>
        
        <!-- 
            Checks that the whitespace around the Generic tokens (angle brackets) "<" and ">"
            are correct to the typical convention. For details, see
            http://checkstyle.sourceforge.net/config_whitespace.html#GenericWhitespace.
        -->
        <module name="GenericWhitespace"/>
        
        <!-- Multiple statements on a single line are not allowed. -->
        <module name="OneStatementPerLine"/>
        
        <!-- The square brackets form a part of the type, not the variable: e.g. String[] args, not String args[]. -->
        <module name="ArrayTypeStyle"/>
        
        <!-- Each switch statement includes a default statement group, even if it contains no code. -->
        <module name="MissingSwitchDefault"/>
        
        <!-- A fall-through in a switch statement should be commented. -->
        <module name="FallThrough"/>
        
        <!-- All long-valued integer literals use an uppercase L suffix, never lowercase (to avoid confusion with the digit 1) -->
        <module name="UpperEll"/>
        
        <!--
            Checks for empty line separators after header, package, all import declarations, fields,
            constructors, methods, nested classes, static initializers and instance initializers.
            It is not required to insert a blank line between subsequent field declarations.
        -->
        <module name="EmptyLineSeparator">
            <property name="allowNoEmptyLineBetweenFields" value="true" />
        </module>
        
        <!-- When a line is broken at a dot, the break comes before the dot. -->
        <module name="SeparatorWrap">
            <property name="option" value="nl"/>
            <property name="tokens" value="DOT"/>
        </module>
        <!-- When a line is broken at a comma, the break comes after the comma. -->
        <module name="SeparatorWrap">
            <property name="option" value="eol"/>
            <property name="tokens" value="COMMA"/>
        </module>
        
        <!-- When a line is broken at an operator, the break comes before the symbol. -->
        <module name="OperatorWrap"/>
        
        <!--
            Package names are all lowercase, with consecutive words simply concatenated together
            (no underscores). Digits are not allowed before the first dot nor immediately after a dot.
        -->
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
        </module>
        
        <!-- 
            Checks name of classes, interfaces, enums and annotations.
            Must match the pattern "^[A-Z][a-zA-Z0-9]*$". This means
            that the names must start with an upper case letter followed
            by letters and digits. Underscores are not allowed.
         -->
        <module name="TypeName"/>
        
        <!-- 
            Checks the name of non-static fields, static non-final fields,
            method and catch parameters, local variables and methods.
            All names must match the pattern "^[a-z][a-zA-Z0-9]*$". This means
            that the names must start with a lower case letter followed by letters
            and digits. Underscores are not allowed.
        -->
        <module name="MemberName"/>
        <module name="StaticVariableName"/>
        <module name="ParameterName"/>
        <module name="LocalVariableName"/>
        <module name="LocalFinalVariableName"/>
        <module name="MethodName"/>
        
        <!-- 
            Checks the name of constants (static final fields). Must match the pattern
            "^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$". This means that the names must contain only
            upper case letters and digits. Words are separated with underscores and the
            name is required to start with a letter.
        -->
        <module name="ConstantName"/>
        
        <!-- 
            Checks the name of type variables used in generic classes, interfaces and methods.
            There are two allowed styles:
                1. A single capital letter, optionally followed by a single number (e.g. E, T, T2).
                2. A name that complies with the rules for classes (see rule TypeName above)
                   followed by a capital letter 'T' or the word "Type".
         -->
        <module name="ClassTypeParameterName">
            <property name="format" value="^[A-Z][0-9]?$|^[A-Z][a-zA-Z0-9]*T$|^[A-Z][a-zA-Z0-9]*Type$"/>
        </module>
        <module name="InterfaceTypeParameterName">
            <property name="format" value="^[A-Z][0-9]?$|^[A-Z][a-zA-Z0-9]*T$|^[A-Z][a-zA-Z0-9]*Type$"/>
        </module>
        <module name="MethodTypeParameterName">
            <property name="format" value="^[A-Z][0-9]?$|^[A-Z][a-zA-Z0-9]*T$|^[A-Z][a-zA-Z0-9]*Type$"/>
        </module>
        
        <!-- 
            Enforce camel case. Static variables and methods tagged with @Override are ignored.
            Also, some abbreviations like "API" and "IT" for "integration test" are allowed.
        -->
        <module name="AbbreviationAsWordInName">
            <property name="allowedAbbreviationLength" value="1"/>
            <property name="ignoreFinal" value="false"/>
            <property name="allowedAbbreviations" value="IT,API"/>
        </module>
        
        <!-- Verifies that there are no finalize() methods defined in a class. -->
        <module name="NoFinalizer"/>
        
        <!-- Checks indentation: 4 spaces. -->
        <module name="Indentation"/>
        
        <!-- Comments are indented at the same level as the surrounding code. -->
        <module name="CommentsIndentation"/>
        
        <!-- Checks that overload methods are grouped together. -->
        <module name="OverloadMethodsDeclarationOrder"/>
        
        <!-- 
            Checks the padding between the identifier of a method definition, constructor definition,
            method call, or constructor invocation; and the left parenthesis of the parameter list.
            The parenthesis is required to come immediately after the identifier, i.e. on the same
            line and without whitespace after the identifier.
         -->
        <module name="MethodParamPad"/>
        
        <!-- JAVADOC -->
        
        <!-- Checks the order of some selected at-clauses. -->
        <module name="AtclauseOrder">
            <property name="tagOrder" value="@param, @return, @throws, @deprecated"/>
        </module>
        
        <!-- Checks that an at-clause tag is followed by a description. -->
        <module name="NonEmptyAtclauseDescription"/>
        
        <!-- Checks the indentation of the continuation lines in at-clauses: 4 spaces. -->
        <module name="JavadocTagContinuationIndentation"/>
            
    </module>
</module>