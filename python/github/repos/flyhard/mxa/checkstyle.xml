<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.1//EN" "http://www.puppycrawl.com/dtds/configuration_1_1.dtd">
<!-- Checkstyle configuration that checks the sun coding conventions from: - the Java Language Specification at http://java.sun.com/docs/books/jls/second_edition/html/index.html 
	- the Sun Code Conventions at http://java.sun.com/docs/codeconv/ - the Javadoc guidelines at http://java.sun.com/j2se/javadoc/writingdoccomments/index.html 
	- the JDK Api documentation http://java.sun.com/j2se/docs/api/index.html - some best practices Checkstyle is very configurable. 
	Be sure to read the documentation at http://checkstyle.sf.net (or in your downloaded distribution). Most Checks are configurable, 
	be sure to consult the documentation. To completely disable a check, just comment it out or delete it from the file. Finally, 
	it is worth reading the documentation. -->
<module name="Checker">

	<!-- Checks that a package.html file exists for each package. -->
	<!-- See http://checkstyle.sf.net/config_javadoc.html#PackageHtml -->
	<!-- module name="PackageHtml"/ -->

	<!-- Checks whether files end with a new line. -->
	<!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
	<!--module name="NewlineAtEndOfFile"/ -->

	<!-- Checks that property files contain the same keys. -->
	<!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
	<!--module name="Translation"/ -->
	<property name="severity" value="warning" />
	<module name="FileLength" />

	<module name="TreeWalker">
		<!-- <property name="cacheFile" value="${checkstyle.cache.file}"/> -->
		<property name="tabWidth" value="3" />
		<!-- Checks for Javadoc comments. -->
		<!-- See http://checkstyle.sf.net/config_javadoc.html -->
		<!-- <module name="JavadocMethod"> -->
		<!-- <property name="scope" value="package" /> -->
		<!-- <property name="allowMissingPropertyJavadoc" value="true" /> -->
		<!-- </module> -->
		<!-- <module name="JavadocType" /> -->
		<!-- <module name="JavadocVariable"> -->
		<!-- <property name="scope" value="public" /> -->
		<!-- </module> -->
		<!-- Checks for Naming Conventions. -->
		<!-- See http://checkstyle.sf.net/config_naming.html -->
		<module name="ConstantName" />
		<module name="LocalFinalVariableName" />
		<module name="LocalVariableName" />
		<module name="MemberName" />
		<module name="MethodName" />
		<module name="PackageName">
			<property name="format" value="^[a-z0-9]+(\.[a-z][a-z0-9]*)*$" />
		</module>
		<module name="ParameterName" />
		<module name="StaticVariableName" />
		<module name="TypeName">
			<property name="format" value="^[A-Z][a-zA-Z0-9]*$" />
			<property name="tokens" value="INTERFACE_DEF" />
		</module>
		<module name="TypeName">
			<property name="format" value="^[A-Z][a-zA-Z0-9]*$" />
			<property name="tokens" value="CLASS_DEF" />
		</module>
		<!-- Checks for Headers -->
		<!-- See http://checkstyle.sf.net/config_header.html -->
		<!--module name="Header" -->
		<!-- The follow property value demonstrates the ability -->
		<!-- to have access to ANT properties. In this case it uses -->
		<!-- the ${basedir} property to allow Checkstyle to be run -->
		<!-- from any directory within a project. -->
		<!--property name="headerFile" value="${checkstyle.header.file}"/> </module -->
		<!-- Following interprets the header file as regular expressions. -->
		<!-- <module name="RegexpHeader"/> -->
		<!-- Checks for imports -->
		<!-- See http://checkstyle.sf.net/config_import.html -->
		<module name="AvoidStarImport" />
		<module name="IllegalImport" /> <!-- defaults to sun.* packages -->
		<module name="RedundantImport" />
		<module name="UnusedImports" />
		<!-- Checks for Size Violations. -->
		<!-- See http://checkstyle.sf.net/config_sizes.html -->
		<module name="LineLength">
			<property name="max" value="128" />
			<property name="ignorePattern" value="^[ \r\f\v\t]*\/*\*.* .+$" />
		</module>
		<!--module name="MethodLength"/> <module name="ParameterNumber"/ -->
		<!-- Checks for whitespace -->
		<!-- See http://checkstyle.sf.net/config_whitespace.html -->
		<module name="EmptyForIteratorPad" />
		<module name="NoWhitespaceAfter">
			<property name="tokens" value="BNOT" />
			<property name="tokens" value="DEC" />
			<property name="tokens" value="DOT" />
			<property name="tokens" value="INC" />
			<property name="tokens" value="LNOT" />
			<property name="tokens" value="UNARY_MINUS" />
			<property name="tokens" value="UNARY_PLUS" />
		</module>
		<module name="NoWhitespaceBefore" />
		<module name="OperatorWrap" />
		<module name="ParenPad">
			<property name="tokens" value="CTOR_CALL" />
			<!--property name="tokens" value="LPAREN"/ -->
			<property name="tokens" value="METHOD_CALL" />
			<!--property name="tokens" value="RPAREN"/ -->
			<property name="tokens" value="SUPER_CTOR_CALL" />
			<property name="tokens" value="TYPECAST" />
		</module>
		<!--module name="TabCharacter"/ -->
		<module name="WhitespaceAfter" />
		<module name="WhitespaceAround">
			<property name="tokens" value="ASSIGN" />
			<property name="tokens" value="BAND" />
			<property name="tokens" value="BAND_ASSIGN" />
			<property name="tokens" value="BOR" />
			<property name="tokens" value="BOR_ASSIGN" />
			<property name="tokens" value="BSR" />
			<property name="tokens" value="BSR_ASSIGN" />
			<property name="tokens" value="BXOR" />
			<property name="tokens" value="BXOR_ASSIGN" />
			<property name="tokens" value="COLON" />
			<property name="tokens" value="DIV" />
			<property name="tokens" value="DIV_ASSIGN" />
			<property name="tokens" value="EQUAL" />
			<property name="tokens" value="GE" />
			<property name="tokens" value="GT" />
			<property name="tokens" value="LAND" />
			<property name="tokens" value="LCURLY" />
			<property name="tokens" value="LE" />
			<property name="tokens" value="LITERAL_ASSERT" />
			<property name="tokens" value="LITERAL_CATCH" />
			<property name="tokens" value="LITERAL_DO" />
			<property name="tokens" value="LITERAL_ELSE" />
			<property name="tokens" value="LITERAL_FINALLY" />
			<property name="tokens" value="LITERAL_FOR" />
			<property name="tokens" value="LITERAL_IF" />
			<property name="tokens" value="LITERAL_RETURN" />
			<property name="tokens" value="LITERAL_SYNCHRONIZED" />
			<property name="tokens" value="LITERAL_TRY" />
			<property name="tokens" value="LITERAL_WHILE" />
			<property name="tokens" value="LOR" />
			<property name="tokens" value="LT" />
			<property name="tokens" value="MINUS" />
			<property name="tokens" value="MINUS_ASSIGN" />
			<property name="tokens" value="MOD" />
			<property name="tokens" value="MOD_ASSIGN" />
			<property name="tokens" value="NOT_EQUAL" />
			<property name="tokens" value="PLUS" />
			<property name="tokens" value="PLUS_ASSIGN" />
			<property name="tokens" value="QUESTION" />
			<property name="tokens" value="RCURLY" />
			<property name="tokens" value="SL" />
			<property name="tokens" value="SLIST" />
			<property name="tokens" value="SL_ASSIGN" />
			<property name="tokens" value="SR" />
			<property name="tokens" value="SR_ASSIGN" />
			<property name="tokens" value="STAR" />
			<property name="tokens" value="STAR_ASSIGN" />
		</module>
		<!-- Modifier Checks -->
		<!-- See http://checkstyle.sf.net/config_modifiers.html -->
		<module name="ModifierOrder" />
		<module name="RedundantModifier" />
		<!-- Checks for blocks. You know, those {}'s -->
		<!-- See http://checkstyle.sf.net/config_blocks.html -->
		<module name="AvoidNestedBlocks" />
		<module name="EmptyBlock" />
		<!--module name="LeftCurly"/ -->
		<module name="NeedBraces" />
		<module name="RightCurly" />
		<!-- Checks for common coding problems -->
		<!-- See http://checkstyle.sf.net/config_coding.html -->
		<!--module name="AvoidInlineConditionals"/ -->
		<module name="DoubleCheckedLocking" />
		<module name="EmptyStatement" />
		<module name="EqualsHashCode" />
		<!--module name="HiddenField"/ -->
		<module name="IllegalInstantiation" />
		<module name="InnerAssignment" />
		<!--module name="MagicNumber"> <property name="ignoreNumbers" value="0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46"/> 
			</module -->
		<module name="MissingSwitchDefault" />
		<!--module name="RedundantThrows"/ -->
		<module name="SimplifyBooleanExpression" />
		<module name="SimplifyBooleanReturn" />
		<!-- Checks for class design -->
		<!-- See http://checkstyle.sf.net/config_design.html -->
		<!--module name="DesignForExtension"/ -->
		<module name="FinalClass" />
		<module name="HideUtilityClassConstructor" />
		<module name="InterfaceIsType" />
		<!-- Do not allow public modifiers -->
		<module name="VisibilityModifier">
			<property name="packageAllowed" value="true" />
			<property name="protectedAllowed" value="true" />
		</module>
		<!-- Miscellaneous other checks. -->
		<!-- See http://checkstyle.sf.net/config_misc.html -->
		<module name="ArrayTypeStyle" />
		<!--module name="FinalParameters"/ -->
		<!-- Check for all TODOs, the default only checks for TODO followed by a colomn -->
		<module name="TodoComment">
			<property name="format" value="TODO" />
		</module>
		<module name="Regexp">
			<property name="format" value="^[\x20]" />
			<property name="message" value="Line should not start with a space character. Use tab." />
			<property name="illegalPattern" value="true" />
			<property name="ignoreComments" value="true" />
		</module>
		<!-- <module name="GenericIllegalRegexp"> -->
		<!-- <property name="format" value="^\S*[ \n\r\f\v]+$" /> -->
		<!-- <property name="message" value="Line has trailing spaces." /> -->
		<!-- </module> -->
		<!-- <module name="GenericIllegalRegexp"> -->
		<!-- <property name="format" value="\t\x20" /> -->
		<!-- <property name="ignoreComments" value="true" /> -->
		<!-- <property name="message" -->
		<!-- value="Tab character should not be followed by space. For indention use Tab." /> -->
		<!-- </module> -->
	</module>
</module>