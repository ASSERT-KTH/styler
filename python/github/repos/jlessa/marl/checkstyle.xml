<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">
<!-- This is a checkstyle configuration file. For descriptions of
what the following rules do, please see the checkstyle configuration
page at http://checkstyle.sourceforge.net/config.html -->
<!-- This style check implements a code review -->
<module name="Checker">

    <!-- Default severity is 'info', unless otherwise specified. -->
    <property name="severity" value="info"/>
    
    <!-- Specifies that all files should contain a new line at the end of the file. -->
    <module name="NewlineAtEndOfFile"/>
    
    <!-- Specifies that no files should contain tab characters. -->
    <module name="FileTabCharacter"/>
    
    <!-- Used for all style checks that act on the Java syntax tree, rather than the document as a whole. -->
    <module name="TreeWalker">
        <!-- Documentation Checks -->
        <!-- Refer to http://checkstyle.sourceforge.net/config_javadoc.html -->
        <!-- Ensure that all classes and interfaces contain Javadoc comments. -->
        <module name="JavadocType"/>
        <!-- Ensure that each 'interface-level' method has an appropriate Javadoc
        comment. Interface-level methods correspond to protected and higher visibility
        methods. -->
        <module name="JavadocMethod">
            <property name="scope" value="protected"/>
            <property name="allowUndeclaredRTE" value="true"/>
            <property name="allowMissingParamTags" value="true"/>
        </module>
        <!-- Ensure that each 'interface-level' variable has an appropriate Javadoc
        comment.Interface-level methods correspond to protected and higher visibility
        methods. -->
        <module name="JavadocVariable">
            <property name="scope" value="protected"/>
        </module>
        <!-- Ensures that Javadoc style is consistent with conventions. -->
        <module name="JavadocStyle"/>
        
        <!-- General checks -->
        <!-- Ensures that no magic numbers are used in the code. -->
        <module name="MagicNumber"/>
        <!-- Ensures that switch statements always provide a 'default' clause. -->
        <module name="MissingSwitchDefault"/>
        <!-- Checks for redundant Exceptions specified in throws clauses. -->
        <module name="RedundantThrows">
            <!-- There is currently an issue with checkstyle that prevents loading of some
                 Class information, causing false positives. The following is a workaround. -->
            <property name="allowUnchecked" value="true"/>
            <property name="allowSubclasses" value="true"/>
            <property name="suppressLoadErrors" value="true"/>
        </module>
        <!-- Checks for boolean expressions that could be rewritten in a simpler way. -->
        <module name="SimplifyBooleanExpression"/>
        <!-- Checks for boolean expressions, used in return statements, that would be rewritten in a simpler way. -->
        <module name="SimplifyBooleanReturn"/>
        <!-- Checks for the usage of '== ' instead of .equals(). -->
        <module name="StringLiteralEquality"/>
        <!-- Checks the depth of for-loops. Loops exceeding the max depth should be
        refactored, with the inner loops moved to new methods. -->
        <module name="NestedForDepth">
            <property name="max" value="3"/>
        </module>
        <!-- Checks the depth of if statements. Highly nested for loops become difficult to test so should be avoided. -->
        <module name="NestedIfDepth">
            <property name="max" value="3"/>
        </module>
        <!-- Specifies the all classes should be defined within a package. -->
        <module name="PackageDeclaration"/>
        <!-- Checks the number of return statements within a single method; too many return statements
        may make the code difficult to understand. -->
        <module name="ReturnCount">
            <property name="max" value="3"/>
        </module>
        <!-- Checks the assignment of values to method parameters. -->
        <module name="ParameterAssignment"/>
        <!-- Checks to see if multiple variables are declared on a single line. -->
        <module name="MultipleVariableDeclarations"/>
        <!-- Checks to see if one statement is declared on a single line. -->
        <module name="OneStatementPerLine"/>
        <!-- Checks to see if large numbers of classes are being imported using *, rather than
        just importing what is required. -->
        <module name="AvoidStarImport"/>
        <!-- Checks the use of illegal imports, such as internal implementation classes within a JRE. -->
        <module name="IllegalImport"/>
        <!-- Checks the complexity (i.e. number of operators and operands) within a boolean expression
        and raise a warning if is considered too complicated. -->
        <module name="BooleanExpressionComplexity"/>
        <!-- Marks TODO comments as warnings. -->
        <module name="TodoComment"/>
        <!-- Ensures that Long constant values should use uppercase 'L' instead of lowercase 'l' -->
        <module name="UpperEll"/>
        <!-- Ensures that local variables are camel-case. -->
        <module name="LocalVariableName"/>
        <!-- Ensures that Interface and Class names follow conventions. -->
        <module name="TypeName"/>
        <!-- Ensures that method names follow conventions. -->
        <module name="MethodName"/>
        <!-- Ensures that package names follow conventions. -->
        <module name="PackageName"/>
        <!-- Ensures that constant names (final static variables) follow  conventions. -->
        <module name="ConstantName"/>
        <!-- Checks line length. -->
        <module name="LineLength">
            <property name="max" value="120"/>
        </module>
        <!-- Checks the number of parameters; too parameters suggests refactoring is required. -->
        <module name="ParameterNumber"/>
        <!-- Performs basic checks on whitespace, such as trailing characters and spaces between operators. -->
        <module name="GenericWhitespace"/>
     </module>
</module>
