<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">
<module name="Checker">
    <module name="SuppressWarningsFilter" />
    <module name="TreeWalker">
        <module name="SuppressWarningsHolder" />

        <!-- Javadoc -->
        <module name="JavadocStyle" />

        <!-- Formatting -->
        <!--
        This check is problematic with lambda until https://github.com/checkstyle/checkstyle/issues/3342
        is fixed. So let's re-enable it if that ever gets fixed (if anyone is
        willing to contribute a PR...). Our IDE do a good job of giving us
        reasonable indentation anyway.
        <module name="Indentation">
            <property name="basicOffset" value="4" />
            <property name="caseIndent" value="0" />
        </module>
        -->
        <module name="LineLength">
            <property name="max" value="160" />
        </module>
        <module name="MethodParamPad" />
        <module name="NoWhitespaceAfter" />
        <module name="NoWhitespaceBefore" />
        <module name="ParenPad" />
        <module name="TypecastParenPad">
            <property name="option" value="nospace" />
        </module>
        <module name="WhitespaceAfter">
            <property name="tokens" value="COMMA, SEMI" /> <!-- not typecasts -->
        </module>
        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true"/>
            <property name="allowEmptyMethods" value="true"/>
            <property name="allowEmptyTypes" value="true"/>
            <property name="allowEmptyLoops" value="true"/>
            <property name="allowEmptyLambdas" value="true"/>
            <property name="tokens" value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, DO_WHILE, EQUAL, GE, GT, LAMBDA, LAND, LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, RCURLY, SL, SLIST, SL_ASSIGN, SR, SR_ASSIGN, STAR_ASSIGN, LITERAL_ASSERT, TYPE_EXTENSION_AND"/>
        </module>
        <module name="ModifierOrder" />
        <module name="RedundantModifier" />
        <module name="EmptyBlock">
            <!-- Put a comment in it if you need one explaining why -->
            <property name="option" value="text" />
        </module>
        <module name="LeftCurly" />
        <module name="RightCurly" />
        <module name="EmptyStatement" />
        <module name="UpperEll" /> <!-- Lowercase l is hard to read -->
        <module name="ArrayTypeStyle" />

        <!-- Import -->
        <module name="AvoidStarImport" />
        <module name="IllegalImport" />
        <module name="RedundantImport"/>
        <module name="UnusedImports"/>
        <module name="ImportOrder">
            <property name="option" value="top"/>
            <property name="groups" value="/^java\./,javax,org,com,"/>
            <property name="ordered" value="false"/>
            <property name="caseSensitive" value="false"/>
            <property name="separated" value="true"/>
            <property name="sortStaticImportsAlphabetically" value="true"/>
        </module>

        <!-- Common coding problems/opinionates stuff -->
        <module name="CovariantEquals" />
        <module name="EqualsHashCode" />
        <module name="InnerAssignment" /> <!-- Too suprising -->
        <module name="MissingSwitchDefault" /> <!-- Just comment that its a noop if its a noop -->
        <module name="ModifiedControlVariable" />
        <module name="SimplifyBooleanExpression" />
        <module name="SimplifyBooleanReturn" />
        <module name="StringLiteralEquality" />
        <module name="SuperClone" />
        <module name="SuperFinalize" />
        <module name="IllegalCatch" />
        <module name="IllegalThrows" />
        <module name="ExplicitInitialization" /> <!-- May as well let Java do what its going to do -->
        <module name="DefaultComesLast" />
        <module name="FallThrough" />
        <module name="MultipleVariableDeclarations" />
        <module name="FinalClass" />
        <module name="HideUtilityClassConstructor" />
        <!-- This one usually offers good to interesting suggestions but its too much work to implement now. <module name="DesignForExtension"/> -->
        <module name="MutableException" />

        <!-- Really opinionated. Probably wrong. -->
        <module name="ClassFanOutComplexity">
            <property name="id" value="checkstyle:classfanoutcomplexity"/>
            <property name="max" value="25"/>
        </module>
        <module name="CyclomaticComplexity" />
        <module name="NPathComplexity" />

    </module>

    <!-- More formatting stuff that can't be in TreeWalker -->
    <module name="NewlineAtEndOfFile" />
    <module name="RegexpSingleline">
        <property name="format" value="\s+$" />
        <property name="message" value="Line has trailing spaces." />
    </module>

</module>
