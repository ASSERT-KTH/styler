<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.2//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">
<module name="Checker">
    <!-- Checks that a package.html file exists for each package.     -->
    <!-- See http://checkstyle.sf.net/config_javadoc.html#PackageHtml -->
    <!--module name="PackageHtml"/-->
    <!-- Checks whether files end with a new line.                        -->
    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
    <!--module name="NewlineAtEndOfFile"/-->
    <!-- Checks that property files contain the same keys.         -->
    <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
    <module name="Translation" />
    <module name="TreeWalker">
        <!-- Checks for Javadoc comments.                     -->
        <!-- See http://checkstyle.sf.net/config_javadoc.html -->
        <!--
            <module name="JavadocMethod">
            <property name="allowMissingParamTags" value="true"/>
            </module>
            <module name="JavadocType"/>
            <module name="JavadocVariable"/>
            <module name="JavadocStyle"/>
        -->
        <!-- Checks for Naming Conventions.                  -->
        <!-- See http://checkstyle.sf.net/config_naming.html -->
        <module name="ConstantName" />
        <module name="LocalFinalVariableName" />
        <module name="LocalVariableName" />
        <module name="MemberName" />
        <module name="MethodName" />
        <module name="PackageName" />
        <module name="ParameterName" />
        <module name="StaticVariableName" />
        <module name="TypeName" />
        <!-- Checks for Headers                                -->
        <!-- See http://checkstyle.sf.net/config_header.html   -->
        <!-- <module name="Header">                            -->
        <!-- The follow property value demonstrates the ability     -->
        <!-- to have access to ANT properties. In this case it uses -->
        <!-- the ${basedir} property to allow Checkstyle to be run  -->
        <!-- from any directory within a project. See property      -->
        <!-- expansion,                                             -->
        <!-- http://checkstyle.sf.net/config.html#properties        -->
        <!-- <property                                              -->
        <!--     name="headerFile"                                  -->
        <!--     value="${basedir}/java.header"/>                   -->
        <!-- </module> -->
        <!-- Following interprets the header file as regular expressions. -->
        <!-- <module name="RegexpHeader"/>                                -->
        <!-- Checks for imports                              -->
        <!-- See http://checkstyle.sf.net/config_import.html -->
        <!--module name="AvoidStarImport"/-->
        <module name="IllegalImport"><!-- defaults to sun.* packages -->
            <property name="illegalPkgs" value="org.apache.log4j" />
        </module>
        <module name="RedundantImport" />
        <module name="UnusedImports" />
        <!-- Checks for Size Violations.                    -->
        <!-- See http://checkstyle.sf.net/config_sizes.html -->
        <module name="FileLength">
            <property name="max" value="3000" />
        </module>
        <module name="LineLength">
            <property name="max" value="150" />
        </module>
        <module name="MethodLength">
            <property name="max" value="1000" />
        </module>
        <module name="ParameterNumber">
            <property name="max" value="10" />
        </module>
        <!-- Checks for whitespace                               -->
        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
        <module name="EmptyForIteratorPad" />
        <module name="MethodParamPad" />
        <module name="NoWhitespaceAfter">
            <property name="tokens" value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS" />
        </module>
        <module name="NoWhitespaceBefore" />
        <module name="OperatorWrap" />
        <module name="ParenPad" />
        <module name="TypecastParenPad">
            <property name="option" value="nospace" />
        </module>
        <module name="TabCharacter" />
        <module name="WhitespaceAround">
            <property name="tokens"
                value="ASSIGN, COLON, LCURLY, LITERAL_ASSERT, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, RCURLY" />
        </module>
        <module name="WhitespaceAfter">
            <property name="tokens" value="COMMA, SEMI" />
            <property name="severity" value="warning" />
        </module>
        <!-- Modifier Checks                                    -->
        <!-- See http://checkstyle.sf.net/config_modifiers.html -->
        <module name="ModifierOrder" />
        <module name="RedundantModifier" />
        <!-- Checks for blocks. You know, those {}'s         -->
        <!-- See http://checkstyle.sf.net/config_blocks.html -->
        <module name="AvoidNestedBlocks" />
        <module name="EmptyBlock" />
        <module name="LeftCurly" />
        <module name="NeedBraces" />
        <module name="RightCurly" />
        <!-- Checks for common coding problems               -->
        <!-- See http://checkstyle.sf.net/config_coding.html -->
        <!--module name="AvoidInlineConditionals"/-->
        <module name="DoubleCheckedLocking">
            <property name="severity" value="warning" />
        </module>
        <module name="EmptyStatement" />
        <module name="EqualsHashCode" />
        <!--module name="HiddenField"/-->
        <module name="IllegalInstantiation" />
        <module name="InnerAssignment" />
        <!--module name="MagicNumber"/-->
        <module name="MissingSwitchDefault" />
        <module name="RedundantThrows">
    		<property name="allowUnchecked" value="true"/>
	</module>
        <module name="SimplifyBooleanExpression" />
        <module name="SimplifyBooleanReturn" />
        <!-- Checks for class design                         -->
        <!-- See http://checkstyle.sf.net/config_design.html -->
        <!--module name="DesignForExtension"/-->
        <module name="FinalClass" />
        <module name="HideUtilityClassConstructor" />
        <module name="InterfaceIsType" />
        <module name="VisibilityModifier">
            <property name="packageAllowed" value="false" />
            <property name="protectedAllowed" value="true" />
        </module>
        <!-- Miscellaneous other checks.                   -->
        <!-- See http://checkstyle.sf.net/config_misc.html -->
        <module name="ArrayTypeStyle" />
        <!--module name="FinalParameters"/-->
        <!-- Removed trailing spaces check -->
        <!--module name="GenericIllegalRegexp">
            <property name="format" value="\s+$" />
            <property name="message" value="Line has trailing spaces." />
            </module-->
        <!--module name="TodoComment"/-->
        <module name="UpperEll" />
        <!-- Additional tests not included in standard code style from Sun -->
        <!--module name="Indentation">
            <property name="severity" value="ignore" />
        </module-->
        <!--module name="NPathComplexity" /-->
        <!--module name="MultipleStringLiterals"/-->
        <module name="StringLiteralEquality" />
        <module name="UnnecessaryParentheses" />
        <module name="GenericIllegalRegexp">
            <property name="format" value="System\.out\.print" />
            <property name="message" value="Calling System.out.print(ln)." />
        </module>
        <module name="GenericIllegalRegexp">
            <property name="format" value="System\.err\.print" />
            <property name="message" value="Calling System.err.print(ln)." />
        </module>
        <module name="GenericIllegalRegexp">
            <property name="format" value="System\.exit" />
            <property name="message" value="Calling System.exit." />
        </module>
        <module name="GenericIllegalRegexp">
            <property name="format" value="\.printStackTrace" />
            <property name="message" value="Calling printStackTrace." />
        </module>
        <module name="GenericIllegalRegexp">
            <property name="format" value="serialVersionUID\ \=\ 1L" />
            <property name="message" value="serialVersionUID should not be 1L" />
            <property name="severity" value="warning" />
        </module>
        <module name="GenericIllegalRegexp">
            <property name="format" value="ReflectionToStringBuilder" />
            <property name="message" value="ReflectionToStringBuilder should not be used, only use domain objects toString() method." />
            <property name="severity" value="warning" />
        </module>
    </module>
</module>
