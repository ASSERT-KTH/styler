<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
          "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
          "https://checkstyle.org/dtds/configuration_1_3.dtd">
<module name="Checker">
    <!-- <module name="JavadocPackage"> <property name="allowLegacy" value="false"/> <property name="severity" value="error"/> </module> -->

    <!-- Checks whether files end with a new line. -->
    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
    <module name="NewlineAtEndOfFile">
        <property name="lineSeparator" value="lf" />
    </module>

    <!-- Checks that property files contain the same keys. -->
    <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
    <module name="Translation" />

    <!-- Checks for Size Violations. -->
    <!-- See http://checkstyle.sf.net/config_sizes.html -->
    <module name="FileLength" />

    <!-- Spaces instead of tabs -->
    <module name="FileTabCharacter" />

    <module name="RegexpSingleline">
        <property name="format" value="^\s+[^ \t*].*\s+$" />
        <property name="message" value="Line has trailing spaces." />
    </module>

    <module name="RegexpSingleline">
        <property name="format" value="^\s+$" />
        <property name="message" value="Line consists only of white spaces." />
    </module>

    <module name="TreeWalker">
        <!-- Make comments available for the suppression comment filter. -->
        <!-- <module name="FileContentsHolder"/> -->

        <!-- Checks for Javadoc comments. -->
        <!-- See http://checkstyle.sf.net/config_javadoc.html -->
        <module name="JavadocMethod">
            <property name="scope" value="package" />
        </module>
        <module name="JavadocType">
            <property name="scope" value="package" />
        </module>
        <module name="JavadocVariable">
            <property name="scope" value="package" />
        </module>
        <module name="JavadocStyle">
            <property name="scope" value="package" />
        </module>

        <!-- Checks for Naming Conventions. -->
        <!-- See http://checkstyle.sf.net/config_naming.html -->
        <module name="ConstantName">
            <property name="format" value="(^[A-Z][A-Z0-9]*([_A-Z0-9]+)*$)|log" />
        </module>
        <module name="LocalFinalVariableName" />
        <module name="LocalVariableName" />
        <module name="MemberName">
            <!-- Do not allow code longer then 140 characters -->
            <property name="format" value="^[_a-zA-Z0-9]*$" />
        </module>
        <module name="MethodName" />
        <module name="PackageName" />
        <module name="ParameterName" />
        <module name="StaticVariableName">
            <property name="format" value="^[_a-z][a-zA-Z0-9]*$" />
        </module>
        <module name="TypeName" />
        <!-- Checks for imports -->
        <!-- See http://checkstyle.sf.net/config_import.html -->
        <module name="AvoidStarImport" />
        <module name="IllegalImport" /> <!-- defaults to sun.* packages -->
        <module name="RedundantImport" />
        <module name="UnusedImports">
            <property name="processJavadoc" value="true" />
        </module>

        <!-- Checks for Size Violations. -->
        <!-- See http://checkstyle.sf.net/config_sizes.html -->
        <module name="LineLength">
            <property name="max" value="${checkstyle.linelength}" default="140" />
            <!-- Do not allow code longer then 140 characters -->
            <!-- Ignore "$Id: <path>" lines in Amazon source files. -->
            <property name="ignorePattern" value="(\$Id\:)|(^import )" />
            <property name="severity" value="error" />
        </module>
        <module name="MethodLength" />
        <module name="ParameterNumber">
            <property name="severity" value="warning" />
        </module>

        <!-- Checks for whitespace -->
        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
        <module name="EmptyForIteratorPad" />
        <module name="GenericWhitespace" />
        <module name="MethodParamPad" />
        <module name="NoWhitespaceBefore" />
        <module name="OperatorWrap" />
        <module name="ParenPad" />
        <module name="TypecastParenPad" />
        <module name="WhitespaceAfter" />
        <!-- Enforce WhitespaceAround the usual tokens, except GENERIC_*. -->
        <module name="WhitespaceAround">
            <property name="tokens"
                value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR,
                    BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN,
                    EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_ASSERT,
                    LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY,
                    LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,
                    LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR,
                    LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL,
                    PLUS, PLUS_ASSIGN, QUESTION, RCURLY, SL, SLIST, SL_ASSIGN,
                    SR, SR_ASSIGN, STAR, STAR_ASSIGN, TYPE_EXTENSION_AND" />
        </module>

        <!-- Modifier Checks -->
        <!-- See http://checkstyle.sf.net/config_modifiers.html -->
        <module name="ModifierOrder" />
        <module name="RedundantModifier" />

        <!-- Checks for blocks. You know, those {}'s -->
        <!-- See http://checkstyle.sf.net/config_blocks.html -->
        <!-- Disable EmptyStatement because all our dependencies use Checkstyle-6.0 which considers intentional empty block with comment as invalid -->
        <module name="EmptyBlock">
            <property name="option" value="text" />
        </module>
        <module name="LeftCurly" />
        <module name="NeedBraces" />
        <module name="RightCurly" />

        <!-- Checks for common coding problems -->
        <!-- See http://checkstyle.sf.net/config_coding.html -->
        <module name="MultipleVariableDeclarations" />
        <module name="AvoidInlineConditionals">
            <!-- Accepting inline conditionals -->
            <property name="severity" value="ignore" />
        </module>

        <!-- Disable DoubleCheckedLocking because we have 'volatile' -->
        <!-- <module name="DoubleCheckedLocking"/> -->
        <module name="EmptyStatement" />
        <module name="EqualsHashCode" />
        <module name="HiddenField">
            <property name="ignoreSetter" value="true" />
            <property name="ignoreConstructorParameter" value="true" />
        </module>
        <module name="IllegalInstantiation" />
        <module name="MagicNumber" />
        <module name="MissingSwitchDefault" />
        <module name="SimplifyBooleanExpression" />
        <module name="SimplifyBooleanReturn" />

        <!-- Checks for class design -->
        <!-- See http://checkstyle.sf.net/config_design.html -->
        <module name="FinalClass" />
        <!-- There is an inconsistency between Checkstyle and Cobertura. The following rule defines that utility classes should not be instantiable 
            and therefore should have a private constructor, while Cobertura complains about not covering the constructor in unit tests. Hence, the rule 
            is removed. -->
        <!--<module name="HideUtilityClassConstructor"/> -->
        <module name="InterfaceIsType" />
        <module name="VisibilityModifier" />

        <!-- Use String[] foo, not String foo[]. -->
        <module name="ArrayTypeStyle" />
        <!-- Switch statements should have default be the last case -->
        <module name="DefaultComesLast" />
        <!-- Avoid imports from these packages. edu.emory.mathcs.backport - This library is intended to support pre-Java 6 JVMs. Please use the 
            standard library. com.amazon.coral.google - this is the Coral team's internal import of Guava for their use. Please use normal Guava. org.joda 
            - This is deprecated as of Java 8. Please prefer the classes in java.time, like Instant and Clock. sun / com.sun - These are internal, proprietary 
            Sun APIs that may break or be removed in a JVM update. -->
        <module name="FinalParameters" />
        <module name="TodoComment">
            <property name="severity" value="warning" />
        </module>

        <module name="IllegalImport">
            <property name="illegalPkgs"
                value="edu.emory.mathcs.backport,
                 com.amazon.coral.google,
                 org.joda,
                 sun, com.sun" />
        </module>
        <!-- Checks for assignments in subexpressions, such as in String s = Integer.toString(i = 2);. -->
        <module name="InnerAssignment" />
        <!-- Don't reassign parameters -->
        <module name="ParameterAssignment" />
        <!-- Force 100L instead of 100l -->
        <module name="UpperEll" />
        <module name="FinalLocalVariable">
            <property name="tokens" value="VARIABLE_DEF,PARAMETER_DEF" />
        </module>
    </module>
</module>
          