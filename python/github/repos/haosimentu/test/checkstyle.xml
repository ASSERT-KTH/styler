<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.2//EN" "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">

<module name="Checker">
	<property name="charset" value="UTF-8" />
	<property name="severity" value="warning" />
	<property name="fileExtensions" value="java, properties, xml"/>
	<!-- Checks for Size Violations. -->
	<!-- 检查文件的长度（行） default max=2000 -->
	<module name="FileLength">
		<property name="max" value="100" />
	</module>

	<module name="TreeWalker">
		<!-- 必须导入类的完整路径，即不能使用*导入所需的类 -->
		<module name="AvoidStarImport" />

		<!-- 检查是否从非法的包中导入了类 : 定义非法的包名称 -->
		<module name="IllegalImport" />

		<!-- 检查是否导入了不必显示导入的类 -->
		<module name="RedundantImport" />

		<!-- 检查是否导入的包没有使用 -->
		<module name="UnusedImports" />

		<!--option: 定义左大括号'{'显示位置，eol在同一行显示，nl在下一行显示 maxLineLength: 大括号'{'所在行行最多容纳的字符数 
			tokens: 该属性适用的类型，例：CLASS_DEF,INTERFACE_DEF,METHOD_DEF,CTOR_DEF -->
		<module name="LeftCurly">
			<property name="option" value="nl" />
		</module>

		<!-- NeedBraces 检查是否应该使用括号的地方没有加括号 tokens: 定义检查的类型 -->
		<module name="NeedBraces" />

		<!-- Checks the placement of right curly braces ('}') for else, try, and 
			catch tokens. The policy to verify is specified using property option. option: 
			右大括号是否单独一行显示 tokens: 定义检查的类型 -->
		<module name="RightCurly">
			<property name="option" value="alone" />
		</module>

		<!-- 检查在重写了equals方法后是否重写了hashCode方法 -->
		<module name="EqualsHashCode" />

		<!-- Checks for illegal instantiations where a factory method is preferred. 
			Rationale: Depending on the project, for some classes it might be preferable 
			to create instances through factory methods rather than calling the constructor. 
			A simple example is the java.lang.Boolean class. In order to save memory 
			and CPU cycles, it is preferable to use the predefined constants TRUE and 
			FALSE. Constructor invocations should be replaced by calls to Boolean.valueOf(). 
			Some extremely performance sensitive projects may require the use of factory 
			methods for other classes as well, to enforce the usage of number caches 
			or object pools. -->
		<module name="IllegalInstantiation">
			<property name="classes" value="java.lang.Boolean" />
		</module>

		<!-- Checks for Naming Conventions. 命名规范 -->
		<!-- local, final variables, including catch parameters -->
		<module name="LocalFinalVariableName" />

		<!-- local, non-final variables, including catch parameters -->
		<module name="LocalVariableName" />

		<!-- static, non-final fields -->
		<module name="StaticVariableName">
			<property name="format" value="(^[A-Z0-9_]{0,19}$)" />
		</module>

		<!-- packages -->
		<module name="PackageName">
			<property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$" />
		</module>

		<!-- classes and interfaces -->
		<module name="TypeName">
			<property name="format" value="(^[A-Z][a-zA-Z0-9]{0,19}$)" />
		</module>

		<!-- methods -->
		<module name="MethodName">
			<property name="format" value="(^[a-z][a-zA-Z0-9]{0,19}$)" />
		</module>

		<!-- non-static fields -->
		<module name="MemberName">
			<property name="format" value="(^[a-z][a-z0-9][a-zA-Z0-9]{0,19}$)" />
		</module>

		<!-- parameters -->
		<module name="ParameterName">
			<property name="format" value="(^[a-z][a-zA-Z0-9_]{0,19}$)" />
		</module>

		<!-- constants (static, final fields) -->
		<module name="ConstantName">
			<property name="format" value="(^[A-Z0-9_]{0,19}$)" />
		</module>

		<!-- 代码缩进 -->
		<module name="Indentation"/>

		<!-- Checks for redundant exceptions declared in throws clause such as 
			duplicates, unchecked exceptions or subclasses of another declared exception. 
			检查是否抛出了多余的异常 <module name="RedundantThrows"> <property name="logLoadErrors" 
			value="true"/> <property name="suppressLoadErrors" value="true"/> </module> -->

		<!-- Checks for overly complicated boolean expressions. Currently finds 
			code like if (b == true), b || true, !false, etc. 检查boolean值是否冗余的地方 Rationale: 
			Complex boolean logic makes code hard to understand and maintain. -->
		<module name="SimplifyBooleanExpression" />

		<!-- Checks for overly complicated boolean return statements. For example 
			the following code 检查是否存在过度复杂的boolean返回值 if (valid()) return false; else 
			return true; could be written as return !valid(); The Idea for this Check 
			has been shamelessly stolen from the equivalent PMD rule. -->
		<module name="SimplifyBooleanReturn" />

		<!-- Checks that a class which has only private constructors is declared 
			as final.只有私有构造器的类必须声明为final -->
		<module name="FinalClass" />

		<!-- Checks visibility of class members. Only static final members may 
			be public; other class members must be private unless property protectedAllowed 
			or packageAllowed is set. 检查class成员属性可见性。只有static final 修饰的成员是可以public的。其他的成员属性必需是private的，除非属性protectedAllowed或者packageAllowed设置了true. 
			Public members are not flagged if the name matches the public member regular 
			expression (contains "^serialVersionUID$" by default). Note: Checkstyle 2 
			used to include "^f[A-Z][a-zA-Z0-9]*$" in the default pattern to allow CMP 
			for EJB 1.1 with the default settings. With EJB 2.0 it is not longer necessary 
			to have public access for persistent fields, hence the default has been changed. 
			Rationale: Enforce encapsulation. 强制封装 -->
		<module name="VisibilityModifier" />

		<!-- 每一行只能定义一个变量 -->
		<module name="MultipleVariableDeclarations">
		</module>

		<!-- Checks the style of array type definitions. Some like Java-style: 
			public static void main(String[] args) and some like C-style: public static 
			void main(String args[]) 检查再定义数组时，采用java风格还是c风格，例如：int[] num是java风格，int num[]是c风格。默认是java风格 -->
		<module name="ArrayTypeStyle"/>

		<!-- Checks that there are no "magic numbers", where a magic number is 
			a numeric literal that is not defined as a constant. By default, -1, 0, 1, 
			and 2 are not considered to be magic numbers. <module name="MagicNumber"> 
			</module> -->

		<!-- A check for TODO: comments. Actually it is a generic regular expression 
			matcher on Java comments. To check for other patterns in Java comments, set 
			property format. 检查是否存在TODO（待处理） TODO是javaIDE自动生成的。一般代码写完后要去掉。 -->
		<module name="TodoComment" />

		<!-- Checks that long constants are defined with an upper ell. That is 
			' L' and not 'l'. This is in accordance to the Java Language Specification, 
			Section 3.10.1. 检查是否在long类型是否定义了大写的L.字母小写l和数字1（一）很相似。 looks a lot like 1. -->
		<module name="UpperEll" />

		<!-- Checks that switch statement has "default" clause. 检查switch语句是否有‘default’从句 
			Rationale: It's usually a good idea to introduce a default case in every 
			switch statement. Even if the developer is sure that all currently possible 
			cases are covered, this should be expressed in the default branch, e.g. by 
			using an assertion. This way the code is protected aginst later changes, 
			e.g. introduction of new types in an enumeration type. -->
		<module name="MissingSwitchDefault" />

		<!--检查switch中case后是否加入了跳出语句，例如：return、break、throw、continue -->
		<module name="FallThrough" />

		<!-- Checks the number of parameters of a method or constructor. max default 
			7个. -->
		<module name="ParameterNumber">
			<property name="max" value="5" />
		</module>

		<!-- 每行字符数 -->
		<module name="LineLength">
			<property name="max" value="200" />
		</module>

		<!-- Checks for long methods and constructors. max default 150行. max=300  设置长度300 -->
		<module name="MethodLength">
			<property name="max" value="300" />
		</module>

		<!-- ModifierOrder 检查修饰符的顺序，默认是 public,protected,private,abstract,static,final,transient,volatile,synchronized,native -->
		<module name="ModifierOrder"/>

		<!-- 检查是否有多余的修饰符，例如：接口中的方法不必使用public、abstract修饰 -->
		<module name="RedundantModifier"/>
		
		
		<!--- 字符串比较必须使用 equals() -->
		<module name="StringLiteralEquality"/>

		<!-- if-else嵌套语句个数 最多4层 -->
		<module name="NestedIfDepth">
			<property name="max" value="3" />
		</module>

		<!-- try-catch 嵌套语句个数 最多2层 -->
		<module name="NestedTryDepth">
			<property name="max" value="2" />
		</module>

		<!-- 返回个数 -->
		<module name="ReturnCount">
			<property name="max" value="5" />
			<property name="format" value="^$" />
		</module>
		
		<module name="EmptyLineSeparator">
            <property name="allowNoEmptyLineBetweenFields" value="true"/>
        </module>
        
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapDot"/>
            <property name="tokens" value="DOT"/>
            <property name="option" value="nl"/>
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapComma"/>
            <property name="tokens" value="COMMA"/>
            <property name="option" value="EOL"/>
        </module>
        
        <module name="EmptyCatchBlock">
            <property name="exceptionVariableName" value="expected"/>
        </module>

	</module>

</module>