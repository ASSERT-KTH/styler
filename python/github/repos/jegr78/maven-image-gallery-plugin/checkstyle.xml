<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.2//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">

<module name="Checker">
	<!-- If you set the basedir property below, then all reported file names 
		will be relative to the specified directory. See http://checkstyle.sourceforge.net/5.x/config.html#Checker 
		<property name="basedir" value="${basedir}"/> <property name="basedir" value="${basedir}/src/java"/> -->
	<property name="localeCountry" value="DE" />
	<property name="localeLanguage" value="de" />
	<property name="charset" value="UTF-8" />


	<!-- Checks that a package-info.java file exists for each package. -->
	<!-- See http://checkstyle.sf.net/config_javadoc.html#JavadocPackage -->
	<!-- <module name="JavadocPackage"/> -->

	<!-- Checks that property files contain the same keys. -->
	<!-- See http://checkstyle.sf.net/config_misc.html#Translation <module name="Translation"/> -->

	<!-- Miscellaneous other checks. -->
	<!-- See http://checkstyle.sf.net/config_misc.html -->

	<module name="TreeWalker">

		<!-- Checks for Javadoc comments. -->
		<!-- See http://checkstyle.sf.net/config_javadoc.html -->
		<!-- <module name="JavadocMethod"> <property name="scope" value="public" 
			/> <property name="severity" value="warning"/> <property name="allowUndeclaredRTE" 
			value="true"/> <property name="allowMissingPropertyJavadoc" value="true"/> 
			</module> <module name="JavadocType"> <property name="scope" value="public" 
			/> <property name="severity" value="warning"/> </module> <module name="JavadocVariable"> 
			<property name="severity" value="warning"/> </module> <module name="JavadocStyle"/> -->


		<!-- Checks for Naming Conventions. -->
		<!-- See http://checkstyle.sf.net/config_naming.html -->
		<module name="ConstantName">
			<property name="applyToPublic" value="true" />
			<property name="applyToProtected" value="false" />
			<property name="applyToPackage" value="false" />
			<property name="applyToPrivate" value="false" />
		</module>
		<module name="LocalFinalVariableName" />
		<module name="LocalVariableName" />
		<module name="MemberName" />
		<module name="MethodName">
			<property name="format" value="^[a-z][a-zA-Z0-9_]*$" />
		</module>
		<module name="PackageName" />
		<module name="ParameterName" />
		<module name="StaticVariableName" />
		<module name="TypeName" />

		<!-- Checks for Headers -->
		<!-- See http://checkstyle.sf.net/config_header.html -->
		<!-- <module name="Header"> -->
		<!-- The follow property value demonstrates the ability -->
		<!-- to have access to ANT properties. In this case it uses -->
		<!-- the ${basedir} property to allow Checkstyle to be run -->
		<!-- from any directory within a project. See property -->
		<!-- expansion, -->
		<!-- http://checkstyle.sf.net/config.html#properties -->
		<!-- <property -->
		<!-- name="headerFile" -->
		<!-- value="${basedir}/java.header"/> -->
		<!-- </module> -->

		<!-- Following interprets the header file as regular expressions. -->
		<!-- <module name="RegexpHeader"/> -->


		<!-- Checks for imports -->
		<!-- See http://checkstyle.sf.net/config_import.html -->
		<module name="IllegalImport" /> <!-- defaults to sun.* packages -->
		<module name="RedundantImport" />
		<module name="UnusedImports" />
		<module name="AvoidStarImport"> <!-- mit import blabla.* tut auch das Eclipse-Refactoring nicht -->
			<property name="severity" value="warning" />
			<property name="excludes" value="java.io,java.net" />
		</module>

		<!-- Modifier Checks -->
		<!-- See http://checkstyle.sf.net/config_modifiers.html -->
		<module name="RedundantModifier" />


		<!-- Checks for blocks. You know, those {}'s -->
		<!-- See http://checkstyle.sf.net/config_blocks.html -->
		<module name="AvoidNestedBlocks" />
		<module name="EmptyBlock">
			<property name="option" value="text" />
			<property name="tokens"
				value="LITERAL_DO, LITERAL_FOR, LITERAL_TRY, LITERAL_WHILE, LITERAL_CATCH, LITERAL_ELSE" />
		</module>
		<module name="EmptyBlock">
			<property name="tokens" value="LITERAL_FINALLY, STATIC_INIT" />
		</module>
		<module name="LeftCurly" />
		<module name="RightCurly" />


		<!-- Checks for common coding problems -->
		<!-- See http://checkstyle.sf.net/config_coding.html -->
		<module name="EmptyStatement" />
		<module name="EqualsAvoidNull" />
		<module name="EqualsHashCode" />
		<module name="IllegalInstantiation" />
		<module name="InnerAssignment"/>
		<!-- <module name="MagicNumber"/> -->
		<module name="MissingSwitchDefault" />
		<module name="RedundantThrows"> <property name="allowUnchecked" value="true"/> 
			</module>
		<!-- <module name="SimplifyBooleanExpression"/> -->
		<module name="SimplifyBooleanReturn" />
		<module name="StringLiteralEquality" />

		<!-- Checks for class design -->
		<!-- See http://checkstyle.sf.net/config_design.html -->
		<!-- Nette Sache, aber dieses Projekt hat zu viele Klassen, deren public 
			Methoden ueberschrieben werden duerfen. Keine Extensionpoints fuer Getter 
			vorgesehen.  -->
		<!-- <module name="DesignForExtension"/> -->
		<module name="FinalClass"/>
		<module name="HideUtilityClassConstructor" />
		<module name="InterfaceIsType"/>
		<module name="VisibilityModifier">
			<property name="packageAllowed" value="true" />
			<property name="protectedAllowed" value="true" />
		</module>


		<!-- Miscellaneous other checks. -->
		<!-- See http://checkstyle.sf.net/config_misc.html -->
		<module name="ArrayTypeStyle"/>
		<!-- <module name="FinalParameters"/> -->

		<!-- Kommentare sind egal <module name="TodoComment"> <property name="format" 
			value="TODO" /> </module> <module name="TodoComment"> <property name="format" 
			value="FIXME" /> </module> -->
		<module name="UpperEll" />
	</module>
</module>

