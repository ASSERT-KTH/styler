<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.2//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">
<!--
checkstyle-config.xml

Checkstyle configuration with basic coding conventions used at
XIAM Solutions B.V.

Mandatory for all "nl.xiam" and "eu.infomas" packages!

Version History
21 jul 2004 - initial version
30 jul 2004 - made as strict as possible
11 aug 2004 - relaxed after internal evaluation by Vincent and Peter
28 oct 2005 - FINAL (based on Checkstyle 4.0)
15 nov 2005 - added: check on "System.out", improved check on "to do"
01 feb 2006 - error in GenericIllegalRegexp, .printStackTrace()
15 jul 2009 - adapted configuration, and extended rules, based on Checkstyle 5.0
23 oct 2012 - cleaned up & simplified a little, start using @ INFOMAS-ASL
11 jul 2013 - FINAL (based on Checkstyle 5.6)
12 apr 2014 - FINAL (based on Checkstyle 5.7).
              Relaxed: FinalLocalVariable
              Stricter: IllegalCatch
              Added: SuppressWarningsFilter
05 jul 2015 - Checkstyle 6.1.1 - checked with Java 8
              Relaxed: MagicNumber,ClassDataAbstractionCoupling
              Removed: MultipleStringLiterals, JavaNCSS
-->
<module name="Checker">

    <!--
    There is no check for: empty consecutive lines, see
    http://checkstyle.2069334.n4.nabble.com/Empty-line-check-td2070206.html
    -->

    <!-- Development at XIAM Solutions B.V. is always in American English -->
    <property name="localeCountry" value="US"/>
    <property name="localeLanguage" value="en"/>
    <property name="charset" value="UTF-8"/>
<!--    <module name="SeverityMatchFilter">
        <property name="severity" value="${checkstyle.console.severity}"/>
        <property name="acceptOnMatch" value="false"/>
    </module>-->

    <!-- Checks that a package.html / package-info.java file exists for each package. -->
    <module name="JavadocPackage">
        <property name="allowLegacy" value="true" />
        <property name="severity" value="warning" />
    </module>
    <module name="NewlineAtEndOfFile">
        <property name="lineSeparator" value="lf"/>
    </module>
    <!-- Checks that property files contain the same keys. -->
    <module name="Translation"/>
    <!-- Checks for Headers, the value is set by maven -->
    <module name="RegexpHeader">
        <property name="headerFile" value="${checkstyle.header.file}"/>
        <property name="fileExtensions" value="java"/>
    </module>
    <module name="FileLength" />
    <module name="FileTabCharacter"/>
    <!-- use @SuppressWarnings() -->
    <module name="SuppressWarningsFilter" />
    <!-- use comments, because not all suppressions are possible with
    @SuppressWarnings() -->
    <module name="SuppressWithNearbyCommentFilter" />
    <module name="SuppressionCommentFilter">
        <property name="offCommentFormat" value="GENERATED CODE"/>
    </module>
    <module name="TreeWalker">
        <property name="tabWidth" value="4"/>

        <module name="FileContentsHolder"/>
        <module name="SuppressWarningsHolder" />

        <!-- Annotations -->
        <module name="AnnotationUseStyle" />
        <module name="MissingDeprecated" />
        <module name="PackageAnnotation"/>
        <module name="MissingOverride" />

        <!-- Block Checks -->
        <module name="EmptyBlock">
            <property name="severity" value="warning" />
        </module>
        <module name="LeftCurly"/>
        <module name="NeedBraces"/>
        <module name="RightCurly"/>
        <module name="AvoidNestedBlocks"/>

        <!-- Class Design -->
        <module name="VisibilityModifier">
            <property name="protectedAllowed" value="true"/>
        </module>
        <module name="FinalClass"/>
        <module name="InterfaceIsType"/>
        <module name="HideUtilityClassConstructor"/>
        <module name="MutableException"/>
        <module name="ThrowsCount">
            <property name="max" value="3"/>
        </module>

        <!-- Coding -->
        <module name="ArrayTrailingComma">
            <property name="severity" value="warning" />
        </module>
        <module name="CovariantEquals"/>
        <module name="EmptyStatement">
            <property name="severity" value="warning" />
        </module>
        <module name="EqualsAvoidNull"/>
        <module name="EqualsHashCode"/>
        <module name="FinalLocalVariable">
            <!--
            PARAMETER_DEF is *very* controversial, so removed from the check.
            VARIABLE_DEF now only warning.
            -->
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="severity" value="warning" />
        </module>
        <module name="HiddenField">
            <property name="tokens" value="VARIABLE_DEF"/>
        </module>
        <module name="IllegalInstantiation">
            <!-- TODO: enhance? -->
            <property name="classes" value="java.lang.Boolean"/>
        </module>
        <!-- native code not allowed in INFOMAS applications! -->
        <module name="IllegalToken">
            <property name="tokens" value="LITERAL_NATIVE"/>
        </module>
        <module name="InnerAssignment">
            <!-- try to avoid -->
            <property name="severity" value="warning" />
        </module>
        <module name="MagicNumber">
            <property name="tokens" value="NUM_DOUBLE, NUM_FLOAT"/>
        </module>
        <module name="MissingSwitchDefault"/>
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>
        <module name="StringLiteralEquality"/>
        <module name="NestedForDepth">
            <!-- default = 1 -->
            <property name="max" value="3"/>
            <property name="severity" value="warning" />
        </module>
        <module name="NestedIfDepth">
            <!-- default = 1 -->
            <property name="max" value="3"/>
            <property name="severity" value="warning" />
        </module>
        <module name="NestedTryDepth">
            <!-- default = 1 -->
            <property name="max" value="2"/>
            <property name="severity" value="warning" />
        </module>
        <module name="NoClone" />
        <module name="NoFinalizer"/>
        <module name="SuperClone"/>
        <module name="SuperFinalize"/>
        <module name="IllegalCatch">
            <!-- MUST be annotated with @SuppressWarnings("illegalcatch") -->
            <property name="illegalClassNames"
                      value="java.lang.Throwable, java.lang.RuntimeException"/>
        </module>
        <module name="IllegalThrows">
            <property name="illegalClassNames" value="java.lang.Throwable,java.lang.Error" />
        </module>
        <module name="PackageDeclaration"/>
        <module name="IllegalType">
            <property value="AbstractButton" name="legalAbstractClassNames"/>
        </module>
        <module name="DeclarationOrder"/>
        <!-- with this check we do not declare parameters final (readability! -->
        <module name="ParameterAssignment"/>
        <module name="DefaultComesLast"/>
        <module name="MultipleVariableDeclarations"/>
        <module name="UnnecessaryParentheses"/>
        <module name="OneStatementPerLine"/>
        <module name="ExplicitInitialization"/>

        <!-- Imports -->
        <module name="AvoidStarImport">
            <property name="allowStaticMemberImports" value="true"/>
        </module>
        <module name="IllegalImport"/> <!-- defaults to sun.* packages -->
        <module name="RedundantImport" />
        <module name="UnusedImports" />
        <!-- Can be configured this way in BOTH Eclipse and Netbeans -->
        <module name="ImportOrder">
            <property name="option" value="bottom"/>
            <property name="groups" value="java,javax,org.w3c,org.xml,*,eu.infomas"/>
            <property name="ordered" value="true"/>
            <property name="separated" value="true"/>
        </module>

        <!-- Javadoc comments -->
        <module name="JavadocType">
            <property name="scope" value="protected"/>
            <property name="allowMissingParamTags" value="true"/>
            <property name="authorFormat" value=".+"/>
        </module>
        <module name="JavadocMethod">
            <property name="scope" value="protected" />
            <property name="allowUndeclaredRTE" value="true" />
            <property name="allowMissingParamTags" value="true" />
            <property name="allowMissingReturnTag" value="true" />
            <property name="allowMissingThrowsTags" value="true" />
            <property name="allowThrowsTagsForSubclasses" value="true" />
            <property name="allowMissingPropertyJavadoc" value="true" />
            <property name="severity" value="warning" />
        </module>
        <module name="JavadocVariable">
            <property name="scope" value="protected"/>
        </module>
        <!--
        JavadocStyle is only checked if JavaDoc is mandatory (see JavadocType.
        If JavaDoc comment exists it must be perfect!
        -->
        <module name="JavadocStyle">
            <property name="checkEmptyJavadoc" value="true"/>
        </module>

        <!-- Metrics -->
        <module name="BooleanExpressionComplexity">
            <property name="max" value="7"/>
        </module>
        <module name="ClassDataAbstractionCoupling">
            <property name="severity" value="warning" />
        </module>
        <module name="ClassFanOutComplexity">
            <property name="severity" value="warning" />
        </module>
        <module name="CyclomaticComplexity">
            <property name="severity" value="warning" />
        </module>
        <module name="NPathComplexity"/>
        <!-- When JavaNCSS applies, NPathComplexity almost always applies
        <module name="JavaNCSS"/-->

        <!-- Miscellaneous -->
        <!-- cannot use property ignoreCase, so use regex flag -->
        <module name="TodoComment">
            <property name="format" value="(?i)to[_-]?do" />
            <property name="severity" value="warning" />
        </module>
        <module name="UncommentedMain">
            <property name="severity" value="warning" />
        </module>
        <module name="UpperEll" />
        <module name="ArrayTypeStyle"/>
        <module name="Indentation">
            <!-- because of a bug in Checkstyle! -->
            <property name="severity" value="warning" />
        </module>
        <module name="OuterTypeFilename"/>

        <!-- Modifiers -->
        <module name="ModifierOrder"/>
        <module name="RedundantModifier"/>

        <!-- Naming Conventions -->
        <module name="ConstantName"/>
        <module name="LocalFinalVariableName"/>
        <module name="LocalVariableName"/>
        <module name="MemberName" />
        <module name="MethodName"/>
        <module name="PackageName">
            <property name="format" value="^eu\.infomas(\.[a-z][a-z0-9]*)*$"/>
        </module>
        <module name="ParameterName"/>
        <module name="StaticVariableName" />
        <module name="TypeName"/>
        <module name="ClassTypeParameterName" />
        <module name="MethodTypeParameterName" />

        <module name="RegexpSinglelineJava">
            <property name="format" value="System\.out\.print"/>
            <property name="ignoreComments" value="true"/>
            <property name="message"
                      value="System.out.print[ln]() not allowed in production quality code!"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="System\.err\.print"/>
            <property name="ignoreComments" value="true"/>
            <property name="message"
                      value="System.err.print[ln]() not allowed in production quality code!"/>
            <property name="severity" value="warning" />
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="\.printStacktrace\(\)"/>
            <property name="ignoreComments" value="true"/>
            <property name="message"
                      value=".printStacktrace() not allowed in production quality code!"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="System\.exit\(\)"/>
            <property name="ignoreComments" value="true"/>
            <property name="message"
                      value="System.exit() not allowed in production quality code!"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="DEBUG\s+=\s+true"/>
            <property name="ignoreComments" value="true"/>
            <property name="message"
                      value="DEBUG = true not allowed in deployed code!"/>
        </module>
        <!-- Prohibit the use of "old style" JUnit (3.x) -->
        <module name="RegexpSinglelineJava">
            <property name="format" value="import\s+junit\."/>
            <property name="ignoreComments" value="true"/>
            <property name="message"
                      value="Use of JUnit 3.x not allowed, use org.junit.* packages"/>
        </module>

        <!-- Size Violations -->
        <module name="ExecutableStatementCount">
            <property name="max" value="40" />
            <property name="severity" value="warning" />
        </module>
        <module name="LineLength">
            <property name="max" value="95"/>
            <property name="severity" value="warning" />
        </module>
        <module name="MethodLength">
            <!--
            Checkstyle default: 150
            Sun recommendation: maximum number of lines: one page == 60
            Agile methods promote less than 20  -->
            <property name="countEmpty" value="false" />
            <property name="max" value="80" />
            <property name="severity" value="warning" />
        </module>
        <module name="AnonInnerLength">
            <property name="severity" value="warning" />
        </module>
        <module name="ParameterNumber">
            <property name="severity" value="warning" />
        </module>
        <module name="OuterTypeNumber"/>
        <module name="MethodCount"/>

        <!-- Whitespace -->
        <module name="GenericWhitespace"/>
        <module name="EmptyForInitializerPad"/>
        <module name="EmptyForIteratorPad">
            <property name="option" value="space"/>
        </module>
        <module name="MethodParamPad"/>
        <module name="NoWhitespaceAfter"/>
        <module name="NoWhitespaceBefore"/>
        <module name="OperatorWrap">
            <!-- common practice: "nl" !! -->
            <property name="option" value="eol"/>
        </module>
        <module name="ParenPad"/>
        <module name="TypecastParenPad"/>
        <module name="WhitespaceAfter">
            <property name="tokens" value="COMMA, SEMI"/>
        </module>
        <module name="WhitespaceAround"/>

    </module>

</module>
