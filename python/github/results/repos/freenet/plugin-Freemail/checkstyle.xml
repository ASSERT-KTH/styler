<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
	"-//Puppy Crawl//DTD Check Configuration 1.3//EN"
	"http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<module name="Checker">
	<property name="charset" value="UTF-8"/>

	<!-- Checks that files end with a newline -->
	<module name="NewlineAtEndOfFile">
		<!-- Only accept Unix line separator -->
		<property name="lineSeparator" value="lf"/>
	</module>

	<!-- Check for whitespace at the end of lines -->
	<module name="RegexpSingleline">
		<property name="format" value="\s+$"/>
		<property name="minimum" value="0"/>
		<property name="maximum" value="0"/>
		<property name="message" value="Line has trailing whitespace"/>
	</module>

	<!-- Check for spaces before tabs -->
	<module name="RegexpSingleline">
		<property name="format" value=" +.*\t+"/>
		<property name="minimum" value="0"/>
		<property name="maximum" value="0"/>
		<property name="message" value="Line has tabs after spaces"/>
	</module>

	<!-- Try to check for spaces before the end of array initializers -->
	<module name="RegexpSingleline">
		<!-- Only matches one line initializers -->
		<property name="format" value="\{.*\s+\}"/>
		<property name="minimum" value="0"/>
		<property name="maximum" value="0"/>
		<property name="message" value="Line has whitespace before end of array initializer"/>
	</module>

	<module name="RegexpSingleline">
		<!-- Only matches one line initializers -->
		<property name="format" value="(if|for|while)\s+\("/>
		<property name="minimum" value="0"/>
		<property name="maximum" value="0"/>
		<property name="message" value="Whitespace between for/if/while and ("/>
	</module>

	<module name="RegexpSingleline">
		<!--
		     Match case conversion without a Locale. Use with Locale.getDefault() if you
		     really want to use the default locale.
		-->
		<property name="format" value="(toUpperCase|toLowerCase)\(\)"/>
	</module>

	<module name="RegexpSingleline">
		<!--
		     Attempt to match SimpleDateFormat created with the default locale. This will
		     miss cases where the pattern includes a comma.
		-->
		<property name="format" value="new SimpleDateFormat(\(\)|\([^,]*\))"/>
	</module>

	<module name="RegexpSingleline">
		<!--
		     Match getBytes() that uses the default charset. Use Charset.defaultCharset()
		     if you really want to use the default charset.
		-->
		<property name="format" value="getBytes\(\)"/>
	</module>

	<module name="TreeWalker">
		<!-- Check for a few simple import problems -->
		<module name="AvoidStarImport">
			<property name="excludes" value="org.junit.Assert.*"/>
		</module>
		<module name="UnusedImports"/>

		<!-- Avoid static imports except from some classes -->
		<module name="AvoidStaticImport">
			<property name="excludes" value="org.junit.Assert.*"/>
		</module>

		<!-- Blacklist for imports -->
		<module name="IllegalImport">
			<!--
			     sun.*      - Sun implementation specific stuff
			     com.sun.*  -
			     junit.*    - jUnit 3 stuff, import from org.junit instead
			-->
			<property name="illegalPkgs" value="sun, com.sun, junit"/>
		</module>

		<!-- Whitespace checks -->
		<module name="GenericWhitespace"/>
		<module name="NoWhitespaceAfter"/>
		<module name="NoWhitespaceBefore"/>
		<module name="OperatorWrap"/>
		<module name="ParenPad"/>
		<module name="TypecastParenPad"/>

		<!-- No whitespace before ; if for initializer is empty -->
		<module name="EmptyForInitializerPad"/>

		<!-- Force space after ; if for iterator is empty -->
		<module name="EmptyForIteratorPad">
			<property name="option" value="space"/>
		</module>

		<module name="WhitespaceAfter">
			<property name="tokens" value="COMMA,SEMI"/>
		</module>

		<!--Check modifier order -->
		<module name="ModifierOrder"/>

		<!-- Check parameter count -->
		<module name="ParameterNumber">
			<property name="max" value="7"/>
		</module>

		<!-- Check for more than 1 outer type per file -->
		<module name="OuterTypeNumber"/>

		<!-- Check method count -->
		<module name="MethodCount"/>

		<!-- Check for equals(SomethingNotObject) without equals(Object) -->
		<module name="CovariantEquals"/>

		<!-- Check for empty statements -->
		<module name="EmptyStatement"/>

		<!-- Check that classes that override equals() also override hashCode() -->
		<module name="EqualsHashCode"/>

		<!-- Various code checks -->
		<module name="IllegalInstantiation"/>
		<module name="IllegalTokenText"/>
		<module name="SimplifyBooleanExpression"/>
		<module name="SimplifyBooleanReturn"/>
		<module name="StringLiteralEquality"/>
	</module>
</module>
