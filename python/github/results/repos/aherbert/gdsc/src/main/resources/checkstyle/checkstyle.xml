<?xml version="1.0"?>
<!--
  #%L
  Genome Damage and Stability Centre ImageJ Plugins

  Software for microscopy image analysis
  %%
  Copyright (C) 2011 - 2019 Alex Herbert
  %%
  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as
  published by the Free Software Foundation, either version 3 of the
  License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public
  License along with this program.  If not, see
  <http://www.gnu.org/licenses/gpl-3.0.html>.
  #L%
  -->

<!DOCTYPE module PUBLIC
          "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
          "https://checkstyle.org/dtds/configuration_1_3.dtd">

<!--
    Checkstyle configuration that checks the Google coding conventions from Google Java Style
    that can be found at https://google.github.io/styleguide/javaguide.html.

    Checkstyle is very configurable. Be sure to read the documentation at
    http://checkstyle.sf.net (or in your downloaded distribution).

    To completely disable a check, just comment it out or delete it from the file.

    Authors: Max Vetrenko, Ruslan Diachenko, Roman Ivanov.
 -->

<module name="Checker">
  <module name="SuppressionFilter">
    <!-- Default property set by maven-checkstyle-plugin -->
    <property name="file" value="${checkstyle.suppressions.file}"/>
    <property name="optional" value="false"/>
  </module>

  <property name="charset" value="UTF-8" />

  <property name="severity" value="warning" />

  <property name="fileExtensions" value="java, properties, xml" />

  <!-- Checks for whitespace -->
  <!-- See http://checkstyle.sf.net/config_whitespace.html -->
  <module name="FileTabCharacter">
    <property name="eachLine" value="true" />
  </module>

  <!-- Require files to end with newline characters -->
  <module name="NewlineAtEndOfFile" />

  <!-- No trailing whitespace -->
  <module name="RegexpSingleline">
    <property name="format" value="\s+$" />
    <property name="minimum" value="0" />
    <property name="maximum" value="0" />
    <property name="message" value="Line has trailing spaces." />
  </module>

  <module name="TreeWalker">
    <module name="OuterTypeFilename" />
    <module name="IllegalTokenText">
      <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL" />
      <property name="format"
        value="\\u00(08|09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)" />
      <property name="message"
        value="Consider using special escape sequence instead of octal value or Unicode escaped value." />
    </module>
    <module name="AvoidEscapedUnicodeCharacters">
      <property name="allowEscapesForControlCharacters" value="true" />
      <property name="allowByTailComment" value="true" />
      <property name="allowNonPrintableEscapes" value="true" />
    </module>
    <module name="LineLength">
      <property name="max" value="100" />
      <property name="ignorePattern" value="^package.*|^import.*|a href|href|http://|https://|ftp://|\{@link " />
    </module>
    <module name="AvoidStarImport" />
    <module name="OneTopLevelClass" />
    <module name="NoLineWrap" />
    <module name="EmptyBlock">
      <property name="option" value="TEXT" />
      <property name="tokens" value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH" />
    </module>
    <module name="NeedBraces" />
    <module name="LeftCurly" />
    <module name="RightCurly" />
    <module name="RightCurly">
      <property name="option" value="alone" />
      <!-- remove CTOR_DEF to allow empty constructors. -->
      <property name="tokens"
        value="CLASS_DEF, METHOD_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT,
               INSTANCE_INIT" />
    </module>
    <module name="WhitespaceAround">
      <property name="allowEmptyConstructors" value="true" />
      <property name="allowEmptyMethods" value="true" />
      <property name="allowEmptyTypes" value="true" />
      <property name="allowEmptyLoops" value="true" />
      <message key="ws.notFollowed"
        value="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks may only be represented as '{}' when not part of a multi-block statement (4.1.3)" />
      <message key="ws.notPreceded" value="WhitespaceAround: ''{0}'' is not preceded with whitespace." />
    </module>
    <module name="OneStatementPerLine" />
    <module name="MultipleVariableDeclarations" />
    <module name="ArrayTypeStyle" />
    <module name="MissingSwitchDefault" />
    <module name="FallThrough" />
    <module name="UpperEll" />
    <module name="ModifierOrder" />
    <module name="EmptyLineSeparator">
      <property name="allowNoEmptyLineBetweenFields" value="true" />
    </module>
    <module name="SeparatorWrap">
      <property name="tokens" value="DOT" />
      <property name="option" value="nl" />
    </module>
    <module name="SeparatorWrap">
      <property name="tokens" value="COMMA" />
      <property name="option" value="EOL" />
    </module>
    <module name="PackageName">
      <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$" />
      <message key="name.invalidPattern" value="Package name ''{0}'' must match pattern ''{1}''." />
    </module>
    <module name="TypeName">
      <property name="format" value="^[A-Z][a-zA-Z0-9]*(_PlugIn)?$" />
      <message key="name.invalidPattern" value="Type name ''{0}'' must match pattern ''{1}''." />
    </module>
    <module name="MemberName">
      <!-- Allow single characters x,y,z for numerical functions, e.g. xPosition -->
      <property name="format" value="^([a-z][a-z0-9]|[xyz])[a-zA-Z0-9]*$" />
      <message key="name.invalidPattern" value="Member name ''{0}'' must match pattern ''{1}''." />
    </module>
    <module name="ParameterName">
      <!-- Allow single characters x,y,z for numerical functions, e.g. xPosition -->
      <property name="format" value="^([a-z][a-z0-9]|[xyz])[a-zA-Z0-9]*$" />
      <message key="name.invalidPattern" value="Parameter name ''{0}'' must match pattern ''{1}''." />
    </module>
    <module name="CatchParameterName">
      <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$" />
      <message key="name.invalidPattern" value="Catch parameter name ''{0}'' must match pattern ''{1}''." />
    </module>
    <module name="LocalVariableName">
      <property name="tokens" value="VARIABLE_DEF" />
      <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$" />
      <property name="allowOneCharVarInForLoop" value="true" />
      <message key="name.invalidPattern" value="Local variable name ''{0}'' must match pattern ''{1}''." />
    </module>
    <module name="ClassTypeParameterName">
      <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)" />
      <message key="name.invalidPattern" value="Class type name ''{0}'' must match pattern ''{1}''." />
    </module>
    <module name="MethodTypeParameterName">
      <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)" />
      <message key="name.invalidPattern" value="Method type name ''{0}'' must match pattern ''{1}''." />
    </module>
    <module name="InterfaceTypeParameterName">
      <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)" />
      <message key="name.invalidPattern" value="Interface type name ''{0}'' must match pattern ''{1}''." />
    </module>
    <module name="NoFinalizer" />
    <module name="GenericWhitespace">
      <message key="ws.followed" value="GenericWhitespace ''{0}'' is followed by whitespace." />
      <message key="ws.preceded" value="GenericWhitespace ''{0}'' is preceded with whitespace." />
      <message key="ws.illegalFollow" value="GenericWhitespace ''{0}'' should followed by whitespace." />
      <message key="ws.notPreceded" value="GenericWhitespace ''{0}'' is not preceded with whitespace." />
    </module>
    <module name="Indentation">
      <property name="basicOffset" value="2" />
      <property name="braceAdjustment" value="0" />
      <property name="caseIndent" value="2" />
      <property name="throwsIndent" value="4" />
      <property name="lineWrappingIndentation" value="4" />
      <property name="arrayInitIndent" value="2" />
    </module>
    <module name="AbbreviationAsWordInName">
      <property name="ignoreFinal" value="false" />
      <property name="allowedAbbreviationLength" value="1" />
    </module>
    <module name="OverloadMethodsDeclarationOrder" />
    <module name="VariableDeclarationUsageDistance" />
    <module name="CustomImportOrder">
      <property name="specialImportsRegExp" value="uk.ac.sussex" />
      <property name="sortImportsInGroupAlphabetically" value="true" />
      <property name="customImportOrderRules"
        value="STATIC###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE###STANDARD_JAVA_PACKAGE" />
    </module>
    <module name="MethodParamPad" />
    <module name="OperatorWrap">
      <property name="option" value="NL" />
      <property name="tokens"
        value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR,
               LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR, METHOD_REF " />
    </module>
    <module name="AnnotationLocation">
      <property name="id" value="AnnotationLocationMostCases" />
      <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF" />
    </module>
    <module name="AnnotationLocation">
      <property name="id" value="AnnotationLocationVariables" />
      <property name="tokens" value="VARIABLE_DEF" />
      <property name="allowSamelineMultipleAnnotations" value="true" />
    </module>
    <module name="NonEmptyAtclauseDescription" />
    <module name="JavadocTagContinuationIndentation" />
    <module name="SummaryJavadoc">
      <property name="forbiddenSummaryFragments"
        value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )" />
    </module>
    <module name="JavadocParagraph" />
    <module name="AtclauseOrder">
      <property name="tagOrder" value="@param, @return, @throws, @deprecated" />
      <property name="target" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF" />
    </module>
    <module name="JavadocMethod">
      <property name="scope" value="public" />
      <property name="allowMissingParamTags" value="true" />
      <property name="allowMissingThrowsTags" value="true" />
      <property name="allowMissingReturnTag" value="true" />
      <property name="minLineCount" value="2" />
      <property name="allowedAnnotations" value="Override, Test, ParameterizedTest, SeededTest" />
      <property name="allowThrowsTagsForSubclasses" value="true" />
    </module>
    <!-- Not supported by eclipse plugin 8.18
    <module name="MissingJavadocType">
      <property name="scope" value="public" />
      <property name="minLineCount" value="2" />
      <property name="skipAnnotations" value="Override, Test, ParameterizedTest, SeededTest" />
    </module>
    -->
    <module name="MethodName">
      <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9_]*$" />
      <message key="name.invalidPattern" value="Method name ''{0}'' must match pattern ''{1}''." />
    </module>
    <module name="SingleLineJavadoc">
      <property name="ignoredTags" value="@inheritDoc, @see"/>
      <property name="ignoreInlineTags" value="false" />
    </module>
    <module name="EmptyCatchBlock">
      <property name="exceptionVariableName" value="expected" />
    </module>
    <module name="CommentsIndentation" />

    <!-- Authors should be in pom.xml file -->
    <module name="Regexp">
      <property name="format" value="@author"/>
      <property name="illegalPattern" value="true"/>
      <property name="message" value="developers names should be in pom file"/>
    </module>

    <!-- Setup special comments to suppress specific checks from source files -->
    <module name="SuppressionCommentFilter">
      <property name="offCommentFormat" value="@formatter\:off" />
      <property name="onCommentFormat" value="@formatter\:on" />
    </module>
    <module name="SuppressionCommentFilter">
      <property name="offCommentFormat" value="CHECKSTYLE.OFF" />
      <property name="onCommentFormat" value="CHECKSTYLE.ON" />
    </module>
    <module name="SuppressionCommentFilter">
      <property name="offCommentFormat" value="CHECKSTYLE.OFF\: ([\w\|]+)" />
      <property name="onCommentFormat" value="CHECKSTYLE.ON\: ([\w\|]+)" />
      <property name="checkFormat" value="$1" />
    </module>

  </module>

</module>
