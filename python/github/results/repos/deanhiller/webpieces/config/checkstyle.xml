<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!-- This is a checkstyle configuration file. For descriptions of
what the following rules do, please see the checkstyle configuration
page at http://checkstyle.sourceforge.net/config.html -->

<module name="Checker">

  <!--module name="RegexpSingleline"-->
    <!-- Checks that TODOs are named.  (Actually, just that they are followed
         by an open paren.)
    -->
    <!--property name="format" value="((//.*)|(\*.*))TODO[^(]" />
    <property name="message" value='All TODOs should be named.  e.g. "TODO(johndoe): Refactor when v2 is released."' />
  </module-->

  <module name="FileLength">
    <property name="max" value="783"/>
    <property name="fileExtensions" value=".java"/>    
  </module>

  <!-- All Java AST specific tests live under TreeWalker module. -->
  <module name="TreeWalker">

    <module name="RegexpSinglelineJava">
      <property name="format" value="@(One|Many)ToOne(?!\([^)]*fetch)"/>
      <!-- Because as apps evolve you will want to add many queries, you do not want to lock yourself into EAGER EVER as you want the
           option for new queries to do lazy or eager.  Therefore, always use fetch type lazy and IF you need eager in some query cases,
           have those queries be written to eagerly fetch -->
      <property name="message" value="Please declare the fetch type to LAZY.  Eager should only be done in JPQL"/>
      <property name="ignoreComments" value="true"/>
    </module>
    
    <!-- shorter methods are easy to read forcing developers to create tables of contents in their methods -->
    <module name="MethodLength">
      <property name="tokens" value="METHOD_DEF"/>
      <property name="max" value="70"/>
      <property name="countEmpty" value="false"/>
    </module>

    <module name="AnonInnerLength">
      <property name="max" value="16"/>
    </module>

    <module name="OuterTypeNumber"/>

    <module name="ParameterNumber">
      <property name="max" value="7"/>
      <property name="tokens" value="METHOD_DEF"/>
    </module>

    <module name="ParameterNumber">
      <property name="max" value="8"/>
      <property name="tokens" value="CTOR_DEF"/>
    </module>

    <module name="NestedForDepth">
      <property name="max" value="4"/>
    </module>
    <module name="NestedIfDepth">
      <property name="max" value="4"/>
    </module>

    <module name="StringLiteralEquality"/>
    <module name="NoFinalizer"/>
    <module name="EqualsHashCode"/>

    <!--
    LENGTH and CODING CHECKS
    -->

    <!--module name="LineLength"-->
      <!-- Checks if a line is too long. -->
      <!--property name="max" value="${com.puppycrawl.tools.checkstyle.checks.sizes.LineLength.max}" default="150"/>
      <property name="severity" value="error"/-->

      <!--
        The default ignore pattern exempts the following elements:
          - import statements
          - long URLs inside comments
      -->

      <!--property name="ignorePattern"
          value="${com.puppycrawl.tools.checkstyle.checks.sizes.LineLength.ignorePattern}"
          default="^(package .*;\s*)|(import .*;\s*)|( *(\*|//).*https?://.*)$"/>
    </module-->

    <module name="UpperEll">
      <!-- Checks that long constants are defined with an upper ell.-->
      <property name="severity" value="error"/>
    </module>

    <module name="FallThrough">
      <!-- Warn about falling through to the next case statement.  Similar to
      javac -Xlint:fallthrough, but the check is suppressed if a single-line comment
      on the last non-blank line preceding the fallen-into case contains 'fall through' (or
      some other variants which we don't publicized to promote consistency).
      -->
      <property name="reliefPattern"
       value="fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on"/>
      <property name="severity" value="error"/>
    </module>

  </module>
</module>

