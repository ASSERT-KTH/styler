<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
  "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
  "https://checkstyle.org/dtds/configuration_1_3.dtd">

<!--
Derived from [Google's Java Style](https://google.github.io/styleguide/javaguide.html), obtained here:
https://raw.githubusercontent.com/checkstyle/checkstyle/master/src/main/resources/google_checks.xml.

Original authors: Max Vetrenko, Ruslan Diachenko, and Roman Ivanov.

See http://checkstyle.sf.net for Checkstyle configuration options.
-->
<module name="Checker">
  <property name="charset" value="UTF-8" />
  <property name="severity" value="warning" />
  <property name="fileExtensions" value="java, properties, xml" />

  <module name="FileTabCharacter">
    <property name="eachLine" value="true" />
  </module>

  <module name="TreeWalker">
    <module name="AbbreviationAsWordInName">
      <property name="allowedAbbreviationLength" value="1" />
      <property name="ignoreFinal" value="false" />
    </module>

    <module name="AnnotationLocation">
      <property name="id" value="AnnotationLocationMostCases" />
      <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF" />
    </module>

    <module name="AnnotationLocation">
      <property name="id" value="AnnotationLocationVariables" />
      <property name="allowSamelineMultipleAnnotations" value="true" />
      <property name="tokens" value="VARIABLE_DEF" />
    </module>

    <module name="ArrayTypeStyle" />

    <module name="AtclauseOrder">
      <property name="tagOrder" value="@param, @return, @throws, @deprecated" />
      <property name="target" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF" />
    </module>

    <module name="AvoidEscapedUnicodeCharacters">
      <property name="allowByTailComment" value="true" />
      <property name="allowEscapesForControlCharacters" value="true" />
      <property name="allowNonPrintableEscapes" value="true" />
    </module>

    <module name="AvoidStarImport" />

    <module name="CatchParameterName">
      <property name="format" value="^[a-z_]+([A-Z][a-z0-9]*)*$" />
      <message key="name.invalidPattern" value="Catch parameter name ''{0}'' must match pattern ''{1}''." />
    </module>

    <module name="ClassTypeParameterName">
      <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)" />
      <message key="name.invalidPattern" value="Class type name ''{0}'' must match pattern ''{1}''." />
    </module>

    <module name="CustomImportOrder">
      <property name="customImportOrderRules" value="THIRD_PARTY_PACKAGE###STATIC" />
      <property name="separateLineBetweenGroups" value="true" />
      <property name="sortImportsInGroupAlphabetically" value="true" />
    </module>

    <module name="EmptyBlock">
      <property name="option" value="TEXT" />
      <property name="tokens" value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH" />
    </module>

    <module name="EmptyCatchBlock">
      <property name="exceptionVariableName" value="expected" />
    </module>

    <module name="EmptyLineSeparator">
      <property name="allowNoEmptyLineBetweenFields" value="true" />
    </module>

    <module name="FallThrough" />

    <module name="GenericWhitespace">
      <message key="ws.followed" value="GenericWhitespace ''{0}'' is followed by whitespace." />
      <message key="ws.illegalFollow" value="GenericWhitespace ''{0}'' should followed by whitespace." />
      <message key="ws.notPreceded" value="GenericWhitespace ''{0}'' is not preceded with whitespace." />
      <message key="ws.preceded" value="GenericWhitespace ''{0}'' is preceded with whitespace." />
    </module>

    <module name="IllegalTokenText">
      <property name="format" value="\\u00(09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)" />
      <property name="message" value="Consider using special escape sequence instead of octal value or Unicode escaped value." />
      <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL" />
    </module>

    <module name="Indentation">
      <property name="arrayInitIndent" value="2" />
      <property name="basicOffset" value="2" />
      <property name="braceAdjustment" value="0" />
      <property name="caseIndent" value="2" />
      <property name="lineWrappingIndentation" value="2" />
      <property name="throwsIndent" value="4" />
    </module>

    <module name="InterfaceTypeParameterName">
      <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)" />
      <message key="name.invalidPattern" value="Interface type name ''{0}'' must match pattern ''{1}''." />
    </module>

    <module name="JavadocTagContinuationIndentation" />

    <module name="LambdaParameterName">
      <property name="format" value="^[a-z_]+([A-Z][a-z0-9]*)*$" />
      <message key="name.invalidPattern" value="Lambda parameter name ''{0}'' must match pattern ''{1}''." />
    </module>

    <module name="LeftCurly" />

    <module name="LineLength">
      <property name="max" value="120" />
      <property name="ignorePattern" value="^package.*|^import.*|a href|href|http://|https://|ftp://" />
    </module>

    <module name="LocalVariableName">
      <property name="format" value="^[a-z_]+([A-Z][a-z0-9]*)*$" />
      <property name="tokens" value="VARIABLE_DEF" />
      <message key="name.invalidPattern" value="Local variable name ''{0}'' must match pattern ''{1}''." />
    </module>

    <module name="MemberName">
      <property name="format" value="^[a-z_]+([A-Z][a-z0-9]*)*$" />
      <message key="name.invalidPattern" value="Member name ''{0}'' must match pattern ''{1}''." />
    </module>

    <module name="MethodName">
      <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9_]*$" />
      <message key="name.invalidPattern" value="Method name ''{0}'' must match pattern ''{1}''." />
    </module>

    <module name="MethodParamPad" />

    <module name="MethodTypeParameterName">
      <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)" />
      <message key="name.invalidPattern" value="Method type name ''{0}'' must match pattern ''{1}''." />
    </module>

    <module name="MissingSwitchDefault" />
    <module name="ModifierOrder" />
    <module name="MultipleVariableDeclarations" />
    <module name="NoFinalizer" />
    <module name="NoLineWrap" />
    <module name="NonEmptyAtclauseDescription" />
    <module name="NoWhitespaceBefore">
      <property name="tokens" value="COMMA, SEMI, POST_INC, POST_DEC, DOT, ELLIPSIS, METHOD_REF" />
      <property name="allowLineBreaks" value="true" />
    </module>

    <module name="OneStatementPerLine" />
    <module name="OneTopLevelClass" />
    <module name="OperatorWrap">
      <property name="option" value="NL" />
      <property name="tokens"
                value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR,
                    LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR, METHOD_REF " />
    </module>

    <module name="OuterTypeFilename" />
    <module name="OverloadMethodsDeclarationOrder" />
    <module name="PackageName">
      <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$" />
      <message key="name.invalidPattern" value="Package name ''{0}'' must match pattern ''{1}''." />
    </module>

    <module name="ParameterName">
      <property name="format" value="^[a-z_]+([A-Z][a-z0-9]*)*$" />
      <message key="name.invalidPattern" value="Parameter name ''{0}'' must match pattern ''{1}''." />
    </module>

    <module name="ParenPad" />
    <module name="RightCurly">
      <property name="id" value="RightCurlySame" />
      <property name="tokens" value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_DO" />
    </module>

    <module name="RightCurly">
      <property name="id" value="RightCurlyAlone" />
      <property name="option" value="alone" />
      <property name="tokens" value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT, INSTANCE_INIT" />
    </module>

    <module name="SeparatorWrap">
      <property name="id" value="SeparatorWrapDot" />
      <property name="option" value="nl" />
      <property name="tokens" value="DOT" />
    </module>

    <module name="SeparatorWrap">
      <property name="id" value="SeparatorWrapComma" />
      <property name="option" value="EOL" />
      <property name="tokens" value="COMMA" />
    </module>

    <module name="SeparatorWrap">
      <!-- ELLIPSIS is EOL until https://github.com/google/styleguide/issues/258 -->
      <property name="id" value="SeparatorWrapEllipsis" />
      <property name="option" value="EOL" />
      <property name="tokens" value="ELLIPSIS" />
    </module>

    <module name="SeparatorWrap">
      <!-- ARRAY_DECLARATOR is EOL until https://github.com/google/styleguide/issues/259 -->
      <property name="id" value="SeparatorWrapArrayDeclarator" />
      <property name="option" value="EOL" />
      <property name="tokens" value="ARRAY_DECLARATOR" />
    </module>

    <module name="SeparatorWrap">
      <property name="id" value="SeparatorWrapMethodRef" />
      <property name="option" value="nl" />
      <property name="tokens" value="METHOD_REF" />
    </module>

    <module name="SingleLineJavadoc">
      <property name="ignoreInlineTags" value="false" />
    </module>

    <module name="SummaryJavadoc">
      <property name="forbiddenSummaryFragments" value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )" />
    </module>

    <module name="TypeName">
      <message key="name.invalidPattern" value="Type name ''{0}'' must match pattern ''{1}''." />
    </module>

    <module name="UpperEll" />
    <module name="VariableDeclarationUsageDistance" />
  </module>
</module>
