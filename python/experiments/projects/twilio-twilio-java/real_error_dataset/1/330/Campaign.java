/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

package com.twilio.rest.messaging.v1;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.twilio.base.Resource;
import com.twilio.converter.DateConverter;
import com.twilio.converter.Promoter;
import com.twilio.exception.ApiConnectionException;
import com.twilio.exception.ApiException;
import com.twilio.exception.RestException;
import com.twilio.http.HttpMethod;
import com.twilio.http.Request;
import com.twilio.http.Response;
import com.twilio.http.TwilioRestClient;
import com.twilio.rest.Domains;
import lombok.ToString;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.time.ZonedDateTime;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/**
 * PLEASE NOTE that this class contains beta products that are subject to
 * change. Use them with caution.
 */
@JsonIgnoreProperties(ignoreUnknown = true)
@ToString
public class Campaign extends Resource {
    private static final long serialVersionUID = 117171664990880L;

    public enum Status {
        APPROVED("approved"),
        PENDING("pending"),
        FAILED("failed");

        private final String value;

        private Status(final String value) {
            this.value = value;
        }

        public String toString() {
            return value;
        }

        /**
         * Generate a Status from a string.
         * @param value string value
         * @return generated Status
         */
        @JsonCreator
        public static Status forValue(final String value) {
            return Promoter.enumFromString(value, Status.values());
        }
    }

    /**
     * Create a CampaignFetcher to execute fetch.
     *
     * @param pathSid The SID that identifies the resource to fetch
     * @return CampaignFetcher capable of executing the fetch
     */
    public static CampaignFetcher fetcher(final String pathSid) {
        return new CampaignFetcher(pathSid);
    }

    /**
     * Create a CampaignReader to execute read.
     *
     * @return CampaignReader capable of executing the read
     */
    public static CampaignReader reader() {
        return new CampaignReader();
    }

    /**
     * Create a CampaignCreator to execute create.
     *
     * @param brandRegistrationSid A2P BrandRegistration Sid
     * @param useCase A2P Campaign UseCase.
     * @param description A short description of what this SMS campaign does
     * @param messageSamples Message samples
     * @param hasEmbeddedLinks Indicate that this SMS campaign will send messages
     *                         that contain links
     * @param hasEmbeddedPhone Indicates that this SMS campaign will send messages
     *                         that contain phone numbers
     * @param messagingServiceSid MessagingService SID
     * @return CampaignCreator capable of executing the create
     */
    public static CampaignCreator creator(final String brandRegistrationSid,
                                          final String useCase,
                                          final String description,
                                          final List<String> messageSamples,
                                          final Boolean hasEmbeddedLinks,
                                          final Boolean hasEmbeddedPhone,
                                          final String messagingServiceSid) {
        return new CampaignCreator(brandRegistrationSid, useCase, description, messageSamples, hasEmbeddedLinks, hasEmbeddedPhone, messagingServiceSid);
    }

    /**
     * Create a CampaignDeleter to execute delete.
     *
     * @param pathSid The SID that identifies the resource to delete
     * @return CampaignDeleter capable of executing the delete
     */
    public static CampaignDeleter deleter(final String pathSid) {
        return new CampaignDeleter(pathSid);
    }

    /**
     * Converts a JSON String into a Campaign object using the provided
     * ObjectMapper.
     *
     * @param json Raw JSON String
     * @param objectMapper Jackson ObjectMapper
     * @return Campaign object represented by the provided JSON
     */
    public static Campaign fromJson(final String json, final ObjectMapper objectMapper) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, Campaign.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    /**
     * Converts a JSON InputStream into a Campaign object using the provided
     * ObjectMapper.
     *
     * @param json Raw JSON InputStream
     * @param objectMapper Jackson ObjectMapper
     * @return Campaign object represented by the provided JSON
     */
    public static Campaign fromJson(final InputStream json, final ObjectMapper objectMapper) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, Campaign.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    private final String accountSid;
    private final String messagingServiceSid;
    private final String brandRegistrationSid;
    private final String sid;
    private final ZonedDateTime dateCreated;
    private final ZonedDateTime dateUpdated;
    private final String description;
    private final List<String> messageSamples;
    private final Campaign.Status status;
    private final String failureReason;
    private final String useCase;
    private final Boolean hasEmbeddedLinks;
    private final Boolean hasEmbeddedPhone;
    private final URI url;

    @JsonCreator
    private Campaign(@JsonProperty("account_sid")
                     final String accountSid,
                     @JsonProperty("messaging_service_sid")
                     final String messagingServiceSid,
                     @JsonProperty("brand_registration_sid")
                     final String brandRegistrationSid,
                     @JsonProperty("sid")
                     final String sid,
                     @JsonProperty("date_created")
                     final String dateCreated,
                     @JsonProperty("date_updated")
                     final String dateUpdated,
                     @JsonProperty("description")
                     final String description,
                     @JsonProperty("message_samples")
                     final List<String> messageSamples,
                     @JsonProperty("status")
                     final Campaign.Status status,
                     @JsonProperty("failure_reason")
                     final String failureReason,
                     @JsonProperty("use_case")
                     final String useCase,
                     @JsonProperty("has_embedded_links")
                     final Boolean hasEmbeddedLinks,
                     @JsonProperty("has_embedded_phone")
                     final Boolean hasEmbeddedPhone,
                     @JsonProperty("url")
                     final URI url) {
        this.accountSid = accountSid;
        this.messagingServiceSid = messagingServiceSid;
        this.brandRegistrationSid = brandRegistrationSid;
        this.sid = sid;
        this.dateCreated = DateConverter.iso8601DateTimeFromString(dateCreated);
        this.dateUpdated = DateConverter.iso8601DateTimeFromString(dateUpdated);
        this.description = description;
        this.messageSamples = messageSamples;
        this.status = status;
        this.failureReason = failureReason;
        this.useCase = useCase;
        this.hasEmbeddedLinks = hasEmbeddedLinks;
        this.hasEmbeddedPhone = hasEmbeddedPhone;
        this.url = url;
    }

    /**
     * Returns The SID of the Account that created the resource.
     *
     * @return The SID of the Account that created the resource
     */
    public final String getAccountSid() {
        return this.accountSid;
    }

    /**
     * Returns MessagingService SID.
     *
     * @return MessagingService SID
     */
    public final String getMessagingServiceSid() {
        return this.messagingServiceSid;
    }

    /**
     * Returns A2P BrandRegistration Sid.
     *
     * @return A2P BrandRegistration Sid
     */
    public final String getBrandRegistrationSid() {
        return this.brandRegistrationSid;
    }

    /**
     * Returns Campaign sid.
     *
     * @return Campaign sid
     */
    public final String getSid() {
        return this.sid;
    }

    /**
     * Returns The ISO 8601 date and time in GMT when the resource was created.
     *
     * @return The ISO 8601 date and time in GMT when the resource was created
     */
    public final ZonedDateTime getDateCreated() {
        return this.dateCreated;
    }

    /**
     * Returns The ISO 8601 date and time in GMT when the resource was last updated.
     *
     * @return The ISO 8601 date and time in GMT when the resource was last updated
     */
    public final ZonedDateTime getDateUpdated() {
        return this.dateUpdated;
    }

    /**
     * Returns A short description of what this SMS campaign does.
     *
     * @return A short description of what this SMS campaign does
     */
    public final String getDescription() {
        return this.description;
    }

    /**
     * Returns Message samples.
     *
     * @return Message samples
     */
    public final List<String> getMessageSamples() {
        return this.messageSamples;
    }

    /**
     * Returns Campaign status.
     *
     * @return Campaign status
     */
    public final Campaign.Status getStatus() {
        return this.status;
    }

    /**
     * Returns A reason why campaign registration has failed.
     *
     * @return A reason why campaign registration has failed
     */
    public final String getFailureReason() {
        return this.failureReason;
    }

    /**
     * Returns A2P Campaign UseCase..
     *
     * @return A2P Campaign UseCase.
     */
    public final String getUseCase() {
        return this.useCase;
    }

    /**
     * Returns Indicate that this SMS campaign will send messages that contain
     * links.
     *
     * @return Indicate that this SMS campaign will send messages that contain links
     */
    public final Boolean getHasEmbeddedLinks() {
        return this.hasEmbeddedLinks;
    }

    /**
     * Returns Indicates that this SMS campaign will send messages that contain
     * phone numbers.
     *
     * @return Indicates that this SMS campaign will send messages that contain
     *         phone numbers
     */
    public final Boolean getHasEmbeddedPhone() {
        return this.hasEmbeddedPhone;
    }

    /**
     * Returns The absolute URL of the Campaign resource.
     *
     * @return The absolute URL of the Campaign resource
     */
    public final URI getUrl() {
        return this.url;
    }

    @Override
    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }

        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        Campaign other = (Campaign) o;

        return Objects.equals(accountSid, other.accountSid) &&
               Objects.equals(messagingServiceSid, other.messagingServiceSid) &&
               Objects.equals(brandRegistrationSid, other.brandRegistrationSid) &&
               Objects.equals(sid, other.sid) &&
               Objects.equals(dateCreated, other.dateCreated) &&
               Objects.equals(dateUpdated, other.dateUpdated) &&
               Objects.equals(description, other.description) &&
               Objects.equals(messageSamples, other.messageSamples) &&
               Objects.equals(status, other.status) &&
               Objects.equals(failureReason, other.failureReason) &&
               Objects.equals(useCase, other.useCase) &&
               Objects.equals(hasEmbeddedLinks, other.hasEmbeddedLinks) &&
               Objects.equals(hasEmbeddedPhone, other.hasEmbeddedPhone) &&
               Objects.equals(url, other.url);
    }

    @Override
    public int hashCode() {
        return Objects.hash(accountSid,
                            messagingServiceSid,
                            brandRegistrationSid,
                            sid,
                            dateCreated,
                            dateUpdated,
                            description,
                            messageSamples,
                            status,
                            failureReason,
                            useCase,
                            hasEmbeddedLinks,
                            hasEmbeddedPhone,
                            url);
    }
}