/* Generated By:JJTree: Do not edit this line. AstBeSqlSubQuery.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=Ast,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.developmentontheedge.sql.model;

import one.util.streamex.StreamEx;

import java.util.Collections;
import java.util.Map;
import java.util.Set;

public class AstBeSqlSubQuery extends AstBeNode
{
    static final Set<String> ALLOWED_PARAMETERS = StreamEx.of("beautifier", "beautifierName", "limit", "property", "default", "distinct",
            "if", "unless", "connectString", "noError", "varSubst", "outColumns", "entity", "queryName", "cache", "filterKey",
            "filterKeyProperty", "filterVal", "filterValProperty", "exec", "queryNameProperty", "entityProperty", "splitParameter",
            "queryID", "using").toSet();

    private Map<String, String> substMap = null;

    public AstBeSqlSubQuery(int id)
    {
        super(id);
        tagName = "sql";
        allowedParameters = ALLOWED_PARAMETERS;
    }

    public AstQuery getQuery()
    {
        return this.children().select(AstQuery.class).findFirst().orElse(null);
    }

    public AstBeSqlVar getAstBeSqlVar()
    {
        return this.children().select(AstBeSqlVar.class).findFirst().orElse(null);
    }

    public Integer getLimit()
    {
        String limit = getParameter("limit");
        return limit == null ? null : Integer.valueOf(limit);
    }

    public String getQueryName()
    {
        return getParameter("queryName");
    }

    public String getEntityName()
    {
        return getParameter("entity");
    }

    public String translateVar(String name)
    {
        if (substMap == null)
        {
            String substString = getParameter("varSubst");
            if (substString == null)
                substMap = Collections.emptyMap();
            else
                substMap = StreamEx.split(substString, ",").map(s -> s.split("="))
                        .toMap(arr -> arr[0].trim(), arr -> arr[1].trim());

                        } returnsubstMap.getOrDefault(name ,name)
                    ;

                    } public StringgetExec(
                    )
                        { returngetParameter("exec")
                    ;

                    } public StringgetFilterKeys(
                    )
                        { returngetParameter("filterKey")
                    ;

                    } public StringgetFilterValProperties(
                    )
                        { returngetParameter("filterValProperty")
                    ;

                    } public StringgetOutColumns(
                    )
                        { returngetParameter("outColumns")
                    ;

                    } public StringgetUsingParamNames(
                    )
                        { returngetParameter("using")
                    ;
                }
                }
                