<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">
<module name="Checker">
    <property name="charset" value="utf-8"/>

    <!-- TODO: switch all info to errors once codebase is clean -->

    <!-- Checks that there are no tab characters in the source code. -->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true"/>
    </module>

    <!-- Checks whether files end with a new line. -->
    <module name="NewlineAtEndOfFile"/>

    <!-- Checks for trailing spaces -->
    <module name="RegexpSingleline">
        <property name="format" value="\s+$"/>
        <property name="minimum" value="0"/>
        <property name="maximum" value="0"/>
        <property name="message" value="Line has trailing spaces."/>
    </module>

    <module name="TreeWalker">

        <module name="FileContentsHolder"/>
        <module name="SuppressWarningsHolder"/>

        <!-- Verifies that both Deprecated annotation is present and the @deprecated Javadoc tag is present when either is present -->
        <module name="MissingDeprecated"/>

        <!-- Checks for empty if/else/for/while/do/try/finally/instant initializer/static initializer blocks -->
        <module name="EmptyBlock">
            <property name="option" value="text"/>
            <property name="tokens" value="LITERAL_IF, LITERAL_ELSE"/>
            <property name="tokens" value="LITERAL_FOR, LITERAL_WHILE, LITERAL_DO"/>
            <property name="tokens" value="LITERAL_TRY, LITERAL_FINALLY"/>
            <property name="tokens" value="INSTANCE_INIT, STATIC_INIT"/>
        </module>

        <!-- The brace must always be on the end of the line -->
        <module name="LeftCurly">
            <property name="option" value="eol"/>
        </module>

        <!-- The brace must be on the same line as the next statement -->
        <module name="RightCurly">
            <property name="option" value="same"/>
        </module>

        <!-- Disallow nested blocks except in case statements   -->
        <module name="AvoidNestedBlocks">
            <property name="allowInSwitchCase" value="true"/>
        </module>

        <!-- Ensures that exceptions are immutable (i.e. only have final fields) -->
        <module name="MutableException"/>

        <!-- Checks that classes that define an equals method also override method Object.equals(java.lang.Object) -->
        <module name="CovariantEquals"/>

        <!-- Checks that classes that override equals() also override hashCode() -->
        <module name="EqualsHashCode"/>

        <!-- Checks that local variables that never have their values changed are declared final -->
        <module name="FinalLocalVariable">
            <property name="tokens" value="VARIABLE_DEF"/>
        </module>

        <!-- Checks that a switch statement has a default clause -->
        <module name="MissingSwitchDefault"/>

        <!-- Check that the default is after all the cases in a switch statement. -->
        <module name="DefaultComesLast"/>

        <!-- Checks for fall through in switch statement where a case contains code, but lacks break, return, throw or continue -->
        <module name="FallThrough"/>

        <!-- Checks for overly complicated boolean expressions -->
        <module name="SimplifyBooleanExpression"/>

        <!-- Checks for overly complicated boolean return statements -->
        <module name="SimplifyBooleanReturn"/>

        <!-- Checks that string literals are not used with == or != -->
        <module name="StringLiteralEquality"/>

        <!-- Checks that the clone() method is not overridden (because it is terrible) -->
        <module name="NoClone"/>

        <!-- Verifies that there are no finalize() methods defined in a class. -->
        <module name="NoFinalizer"/>

        <!-- Ensures that the setUp() and tearDown() methods are named correctly -->
        <module name="JUnitTestCase"/>

        <!-- Checks there is only one statement per line. -->
        <module name="OneStatementPerLine"/>

        <!-- Checks that there are no import statements that use the * notation -->
        <module name="AvoidStarImport"/>

        <!-- Checks for redundant (duplicate, java.lang, class in same package) import statements -->
        <module name="RedundantImport"/>

        <!-- Checks for unused import statements -->
        <module name="UnusedImports"/>

        <!-- Checks that long constants end with 'L' instead of 'l -->
        <module name="UpperEll"/>

        <!-- Enforces Java-style array type declaration (String[] args instead of String args[]) -->
        <module name="ArrayTypeStyle">
            <property name="javaStyle" value="true"/>
        </module>

        <!-- TODO: Add Checks that the order of modifiers conforms to the suggestions in JLS, as follows: -->
        <!-- public/protected/private, abstract/static, final/transient/volatile, synchronized, native, strictfp -->
        <!--<module name="ModifierOrder"/>-->

        <module name="LineLength">
            <property name="max" value="100"/>
            <!-- Allow javadoc comments, lines containing URLs, constants and imports to exceed 100 -->
            <property name="ignorePattern" value="(^ *\*.*$|.*http[s]*:\/\/.*|^.*static final.*|^import static.*)"/>
        </module>

        <!-- Checks that whitespaces around < and > are correct -->
        <module name="GenericWhitespace"/>

        <!-- TODO: Add Ensures fields declaration order -->
        <!--<module name="DeclarationOrder">
            <property name="ignoreMethods" value="true"/>
            <property name="ignoreConstructors" value="true"/>
        </module>-->

        <!-- Checks that a token is surrounded by whitespace -->
        <module name="WhitespaceAround">
            <property name="tokens" value="LITERAL_IF, LITERAL_ELSE"/>
            <property name="tokens" value="LITERAL_FOR, LITERAL_WHILE, LITERAL_DO"/>
            <property name="tokens" value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY"/>
            <property name="tokens" value="PLUS, MINUS, DIV, STAR, MOD, BAND, BOR, BXOR, LAND, LOR, BSR, SL, SR"/>
            <property name="tokens" value="PLUS_ASSIGN, MINUS_ASSIGN, DIV_ASSIGN, STAR_ASSIGN, MOD_ASSIGN"/>
            <property name="tokens" value="BAND_ASSIGN, BOR_ASSIGN, BXOR_ASSIGN, BSR_ASSIGN, SL_ASSIGN, SR_ASSIGN"/>
            <property name="tokens" value="ASSIGN, QUESTION, EQUAL, NOT_EQUAL, LT, LE, GT, GE"/>
        </module>

        <!-- Checks thatthere are no empty spaces in an empty for loop initializer -->
        <module name="EmptyForInitializerPad">
            <property name="option" value="nospace"/>
        </module>

        <!-- Checks that there are no empty spaces for an empty for iterator -->
        <module name="EmptyForIteratorPad">
            <property name="option" value="nospace"/>
        </module>

        <!-- Checks that there are no spaces between left paranthesis and parameter list -->
        <module name="MethodParamPad">
            <property name="tokens" value="CTOR_DEF, SUPER_CTOR_CALL, METHOD_DEF, METHOD_CALL"/>
            <property name="option" value="nospace"/>
            <property name="allowLineBreaks" value="true"/>
        </module>

        <!-- Checks that there is no whitespace after unary minus/plus, !, ., ~, pre-increment and pre-decrement -->
        <module name="NoWhitespaceAfter">
            <property name="tokens" value="UNARY_MINUS, UNARY_PLUS, LNOT, DOT, BNOT, INC, DEC"/>
            <property name="allowLineBreaks" value="false"/>
        </module>

        <!-- Checks that there is no whitespace before ;, ., post-increment and post-decrement -->
        <module name="NoWhitespaceBefore">
            <property name="tokens" value="SEMI, DOT, POST_DEC, POST_INC"/>
            <property name="allowLineBreaks" value="true"/>
        </module>

        <!-- Ensures no spaces after left or before right parenthesis -->
        <module name="ParenPad">
            <property name="tokens"
                      value="CTOR_CALL, SUPER_CTOR_CALL, METHOD_CALL, LPAREN, RPAREN"/>
            <property name="option" value="nospace"/>
        </module>

        <!-- Ensures no spaces after left or before right parenthesis in casts -->
        <module name="TypecastParenPad">
            <property name="option" value="nospace"/>
        </module>

        <!-- Checks that a comma, semicolon and casts are followed by whitespace -->
        <module name="WhitespaceAfter">
            <property name="tokens" value="COMMA, SEMI, TYPECAST"/>
        </module>

        <!-- Validates identifier names -->
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-zA-Z_][a-zA-Z0-9_]*)*$"/>
        </module>
        <module name="TypeName">
            <property name="format" value="^[A-Z][a-zA-Z0-9]*$"/>
        </module>
        <module name="MethodName">
            <property name="format" value="(^[a-z][a-zA-Z0-9]*$|^test[A-Z][a-zA-Z0-9]*_?[a-z][a-zA-Z0-9]*$)"/>
        </module>
        <module name="ParameterName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
        </module>
        <module name="LocalVariableName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
        </module>
        <module name="MemberName">
            <property name="format" value="^(?!m[A-Z][a-zA-Z0-9]*)([a-z][a-zA-Z0-9]*)$"/>
            <property name="applyToPublic" value="false"/>
            <property name="applyToProtected" value="false"/>
            <property name="applyToPackage" value="false"/>
            <message key="name.invalidPattern"
                     value="Member ''{0}'' should be named with CamelCase and without prefixes."/>
        </module>

        <!-- TODO: Add NeedBraces validation for LITERAL_IF, -->
        <module name="NeedBraces">
            <property name="tokens" value="LITERAL_ELSE, LITERAL_DO, LITERAL_FOR, LITERAL_WHILE"/>
        </module>

        <!-- TODO: Add HiddenField validation -->
        <!-- TODO: Add OperatorWrap validation -->
        <!-- TODO: Add ImportOrder validation -->
        <!-- TODO: Add indentation validation -->
        <!-- TODO: Add MultipleVariableDeclarations validation -->
    </module>

    <module name="SuppressionFilter">
        <property name="file" value="config/checkstyle/suppressions.xml" />
    </module>

    <module name="SuppressWarningsFilter"/>

    <module name="SuppressionCommentFilter">
        <property name="offCommentFormat" value="THIS CODE IS GENERATED"/>
    </module>
</module>
