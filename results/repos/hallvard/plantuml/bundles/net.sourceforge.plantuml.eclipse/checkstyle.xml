<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.2//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">
 
<module name="Checker">
 
    <module name="cs.PatternFilter">
        <property name="ignoreFiles"
            value="(.*(&lt;=Managed)(&lt;=View)Bean\.java)|(.*Home\.java)" />
        <property name="modules" value="TabCharacter" />
    </module>
 
    <module name="cs.PatternFilter">
        <property name="ignoreFiles"
            value=".*(&lt;=Managed)(&lt;=View)Bean\.java" />
        <!-- property name="modules" value="WhitespaceAround" /-->
    </module>
 
    <module name="cs.PatternFilter">
        <property name="ignoreFiles"
            value="[/\\]org[/\\]" />
        <property name="modules" value=".*" />
    </module>
 
    <module name="TreeWalker">
        <!--  property name="cacheFile" value="c:/checkstyle.dat"/ -->
 
        <!-- Checks for Javadoc comments.                     -->
        <!-- See http://checkstyle.sf.net/config_javadoc.html -->
        <!-- CDF module name="JavadocMethod"/-->
        <module name="JavadocType"/>
        <module name="JavadocVariable"/>
        <module name="JavadocStyle"/>
 
        <!-- Checks for Naming Conventions.                  -->
        <!-- See http://checkstyle.sf.net/config_naming.html -->
        <module name="ConstantName" />
        <module name="LocalFinalVariableName" />
        <module name="LocalVariableName" />
        <module name="MemberName" />
        <module name="MethodName" />
        <module name="PackageName">
            <property name="format" value="^[a-z.2]+$" />
        </module>
        <module name="ParameterName" />
        <module name="StaticVariableName" />
        <module name="TypeName" />
 
        <!-- Checks for whitespace                               -->
        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
        <module name="EmptyForIteratorPad" />
        <module name="MethodParamPad" />
        <module name="NoWhitespaceAfter">
            <property name="tokens"
                value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS" />
        </module>
        <module name="NoWhitespaceBefore" />
        <!--  module name="OperatorWrap" / -->
        <module name="ParenPad" />
        <module name="TypecastParenPad" />
        <module name="TabCharacter" />
        <module name="WhitespaceAfter" />
        <module name="WhitespaceAround" />
 
        <!-- Checks for blocks. You know, those {}'s         -->
        <!-- See http://checkstyle.sf.net/config_blocks.html -->
        <module name="AvoidNestedBlocks" />
        <module name="EmptyBlock">
            <property name="option" value="text" />
        </module>
        <module name="LeftCurly" />
        <module name="NeedBraces" />
        <module name="RightCurly" />
 
        <module name="RequireThis">
            <property name="checkMethods" value="false" />
        </module>
 
        <!-- Checks for imports                              -->
        <!-- See http://checkstyle.sf.net/config_import.html -->
        <module name="AvoidStarImport" />
        <module name="IllegalImport" /><!-- defaults to sun.* packages -->
        <module name="RedundantImport" />
        <!-- module name="UnusedImports" / Problem with CTRL-SHIFT-O -->
        <module name="EmptyStatement" />
 
 
        <!-- Modifier Checks                                    -->
        <!-- See http://checkstyle.sf.net/config_modifiers.html -->
        <module name="ModifierOrder" />
        <module name="RedundantModifier" />
 
 
        <!-- Checks for Size Violations.                    -->
        <!-- See http://checkstyle.sf.net/config_sizes.html -->
        <module name="FileLength" />
        <module name="LineLength">
            <property name="max" value="120" />
            <property name="ignorePattern" value="@see" />
        </module>
        <module name="MethodLength">
            <property name="max" value="250" />
        </module>
        <module name="ParameterNumber" />
 
 
 
        <!-- Checks for common coding problems               -->
        <!-- See http://checkstyle.sf.net/config_coding.html -->
        <module name="DoubleCheckedLocking" /><!-- MY FAVOURITE -->
        <module name="EqualsHashCode" />
        <module name="StringLiteralEquality" />
 
        <module name="CovariantEquals" />
        <module name="DefaultComesLast" />
        <module name="FallThrough" />
        <module name="MissingSwitchDefault" />
        <module name="ModifiedControlVariable" />
        <module name="NestedIfDepth">
            <property name="max" value="2" />
        </module>
        <module name="IllegalCatch">
            <property name="severity" value="warning" />
        </module>
        <module name="MethodParamPad"></module>
 
        <module name="IllegalImport"></module>
 
        <module name="IllegalInstantiation">
            <property name="classes" value="java.lang.Boolean" />
        </module>
 
        <module name="IllegalType">
            <property name="severity" value="warning" />
            <property name="illegalClassNames"
                value="java.util.Hashtable , java.util.Vector" />
            <property name="format" value="ZZZZZZ" />
        </module>
 
        <module name="IllegalToken">
            <property name="tokens" value="LITERAL_NATIVE,INC,DEC" />
        </module>
 
        <module name="IllegalToken">
            <property name="severity" value="warning" />
            <property name="tokens" value="LNOT" />
        </module>
 
        <!-- Ne pas faire de break dans un for -->
        <module name="DescendantToken">
            <property name="severity" value="warning" />
            <property name="tokens" value="LITERAL_FOR" />
            <property name="limitedTokens" value="LITERAL_BREAK" />
            <property name="maximumNumber" value="0" />
            <property name="maximumMessage"
                value="Avoid break statement in for loop" />
        </module>
 
 
 
        <module name="ModifiedControlVariable"></module>
        <module name="MultipleVariableDeclarations"></module>
 
        <module name="FinalLocalVariable" />
 
        <!-- module name="VisibilityModifier"></module-->
 
 
        <module name="CyclomaticComplexity">
            <property name="severity" value="warning" />
            <property name="max" value="20" />
        </module>
 
        <module name="JavaNCSS">
            <property name="severity" value="warning" />
            <property name="methodMaximum" value="60" />
        </module>
 
 
        <!-- System.err.println -->
        <module name="GenericIllegalRegexp">
            <property name="format" value="System\.(err|out)\.print" />
            <property name="message" value="Do not use System.println" />
            <property name="ignoreComments" value="true" />
        </module>
 
        <!-- Hashtable -->
        <module name="GenericIllegalRegexp">
            <property name="format"
                value="^import\s+java.util.Hashtable" />
            <property name="message" value="Use HashMap instead" />
            <property name="ignoreComments" value="true" />
        </module>
 
        <!-- Vector -->
        <module name="GenericIllegalRegexp">
            <property name="format" value="^import\s+java.util.Vector" />
            <property name="message" value="Use ArrayList instead" />
            <property name="ignoreComments" value="true" />
        </module>
 
        <!-- compareTo() == -->
        <module name="GenericIllegalRegexp">
            <property name="format"
                value="\.\s*compareTo\s*\([^=!]*\)\s*[=!]=" />
            <property name="message"
                value="Do not use == with the result of compareTo()" />
            <property name="ignoreComments" value="true" />
        </module>
 
        <!-- printStackTrace() == -->
        <module name="GenericIllegalRegexp">
            <property name="format" value="\.printStackTrace\s*\(" />
            <property name="message" value="Do not use printStackTrace" />
            <property name="ignoreComments" value="true" />
        </module>
 
 
        <module name="UnnecessaryParentheses"></module>
 
 
        <!-- Condition in for performs no check:  -->
        <module name="DescendantToken">
            <property name="tokens" value="FOR_CONDITION" />
            <property name="limitedTokens" value="EXPR" />
            <property name="minimumNumber" value="1" />
        </module>
 
        <!--Switch within switch: -->
        <module name="DescendantToken">
            <property name="tokens" value="LITERAL_SWITCH" />
            <property name="limitedTokens" value="LITERAL_SWITCH" />
            <property name="maximumNumber" value="0" />
            <property name="minimumDepth" value="1" />
        </module>
 
        <!-- Trop de boucles imbriquees -->
        <module name="DescendantToken">
            <property name="tokens" value="LITERAL_FOR,LITERAL_WHILE" />
            <property name="limitedTokens"
                value="LITERAL_FOR,LITERAL_WHILE" />
            <property name="maximumNumber" value="1" />
            <property name="minimumDepth" value="1" />
            <property name="maximumMessage"
                value="Trop de boucles imbriquees" />
        </module>
 
        <!-- Trop de if -->
        <module name="DescendantToken">
            <property name="tokens" value="SLIST" />
            <property name="limitedTokens" value="LITERAL_IF" />
            <property name="maximumNumber" value="13" />
            <property name="maximumMessage" value="Trop de if" />
        </module>
 
        <!--Return from within a catch or finally block: -->
        <module name="DescendantToken">
            <property name="tokens" value="LITERAL_FINALLY" />
            <property name="limitedTokens" value="LITERAL_RETURN" />
            <property name="maximumNumber" value="0" />
        </module>
 
 
        <!-- Empty statement is not allowed -->
        <module name="DescendantToken">
            <property name="tokens" value="EMPTY_STAT" />
            <property name="limitedTokens" value="EMPTY_STAT" />
            <property name="maximumNumber" value="0" />
            <property name="maximumDepth" value="0" />
            <property name="maximumMessage"
                value="Empty statement is not allowed." />
        </module>
 
 
        <!-- Use logical and -->
        <module name="DescendantToken">
            <property name="tokens" value="LITERAL_IF" />
            <property name="limitedTokens" value="LITERAL_IF" />
            <property name="maximumNumber" value="0" />
            <property name="minimumDepth" value="1" />
            <property name="maximumDepth" value="1" />
            <property name="maximumMessage" value="Use logical and" />
        </module>
 
 
 
        <!-- No AND or OR in for conditions  -->
        <module name="DescendantToken">
            <property name="tokens"
                value="FOR_CONDITION,FOR_INIT,FOR_ITERATOR" />
            <property name="limitedTokens" value="LAND,LOR" />
            <property name="maximumNumber" value="0" />
            <property name="minimumDepth" value="1" />
        </module>
 
        <!--  Initialiser in for performs no setup (use while instead?): -->
        <module name="DescendantToken">
            <property name="tokens" value="FOR_INIT" />
            <property name="limitedTokens" value="EXPR" />
            <property name="minimumNumber" value="1" />
        </module>
 
        <!-- Condition in for performs no check: -->
        <module name="DescendantToken">
            <property name="tokens" value="FOR_CONDITION" />
            <property name="limitedTokens" value="EXPR" />
            <property name="minimumNumber" value="1" />
        </module>
 
 
 
        <!--  Collection[] -->
        <module name="Regexp">
            <property name="severity" value="warning" />
            <property name="format"
                value="(\W(Collection|Set|HashSet|List|ArrayList|LinkedList|Map|HashMap|TreeMap|LinkedHashMap)\s*[A-Za-z0-9_]*\s*\[)|(\(\s*(Collection|Set|HashSet|List|ArrayList|LinkedList|Map|HashMap|TreeMap|LinkedHashMap)\s*\)\s*][A-Za-z0-9_.()]+\.next\s*\()" />
            <property name="illegalPattern" value="true" />
            <property name="message"
                value="Create a new class instead of mixing collections." />
        </module>
 
        <!--  Void getter -->
        <module name="Regexp">
            <property name="format"
                value="^\s*(\w+\s+)*void\s*(\w+\s+)*get[A-Za-z0-9_]+\s*\(" />
            <property name="illegalPattern" value="true" />
            <property name="message"
                value="Do not create void getter, rename the method." />
        </module>
 
 
        <!-- Use a for loop instead of while == -->
        <module name="Regexp">
            <property name="format"
                value="iterator\s*\(\s*\)(.*\n){1,3}.*while\s*\(.*\.hasNext\s*\(" />
            <property name="message"
                value="Use a for loop instead of while." />
            <property name="ignoreComments" value="true" />
            <property name="illegalPattern" value="true" />
        </module>
 
 
 
        <!-- Ne pas faire ca: demander a Arnaud
            <module name="GenericIllegalRegexp">
            <property name="format"
            value="(equals\s*\(\s*new\s+BigDecimal)|(new\s+BigDecimal\s*\(\.*equals)" />
            <property name="message"
            value="Ne pas faire ca: demander a Arnaud" />
            <property name="ignoreComments" value="true" />
            </module>
        -->
 
        <!-- Use xxx == null -->
        <module name="GenericIllegalRegexp">
            <property name="format" value="null\s+[=!]=" />
            <property name="message"
                value="Use (xxx ==/!= null) instead of (null ==/!= xxx)" />
            <property name="ignoreComments" value="true" />
        </module>
 
 
        <!-- Use StringUtils instead -->
        <module name="GenericIllegalRegexp">
            <property name="severity" value="warning" />
            <property name="format"
                value="(\.equals\s*\(\s*&quot;&quot;)|(&quot;&quot;\s*.?\s*\.\s*equals)" />
            <property name="message" value="Use StringUtils instead" />
            <property name="ignoreComments" value="true" />
        </module>
 
        <!-- StringUtils is already managing nullity. -->
        <module name="GenericIllegalRegexp">
            <property name="format"
                value="([^()]+)\s*[=!]=\snull\s*\)*\s*[\|&amp;]{1,2}\s*\(*\s*StringUtils\s*\.\s*is\w+\s*\(\s*\1\s*\)" />
            <property name="message"
                value="StringUtils is already managing nullity." />
            <property name="ignoreComments" value="true" />
        </module>
 
 
        <!-- Use Forbidden javadoc tag -->
        <module name="GenericIllegalRegexp">
            <property name="format"
                value="^ *\* *@(?!param\b)(?!return\b)(?!throws\b)(?!see\b)(?!deprecated\b)(?!author\b)" />
            <property name="message" value="Forbidden javadoc tag" />
            <property name="ignoreComments" value="false" />
        </module>
 
 
        <!--  @throws suivi de @param/@return -->
        <!--  @return suivi de @param/@return -->
        <!--  @see suivi de @param/@return/@throws -->
        <!--  @deprecated suivi de @param/@return/@throws/@see -->
        <!--  @author suivi de @param/@return/@throws/@see/@deprecated -->
        <module name="Regexp">
            <property name="severity" value="warning" />
            <property name="format"
                value="^(?:(?: *\* *@(?:return|throws)\b.*\n)(?: *\*[^/\n]*\n)*(?: *\* *@(?:param|return))|(?: *\* *@see\b.*\n)(?: *\*[^/\n]*\n)*(?: *\* *@(?:param|return|throws))|(?: *\* *@deprecated\b.*\n)(?: *\*[^/\n]*\n)*(?: *\* *@(?:param|return|throws|see))|(?: *\* *@author\b.*\n)(?: *\*[^/\n]*\n)*(?: *\* *@(?:param|return|throws|see|deprecated)))" />
            <property name="message"
                value="Respecter l'ordre @param, @return, @throws, @see, @deprecated, @author" />
            <property name="ignoreComments" value="false" />
            <property name="illegalPattern" value="true" />
        </module>
 
 
        <!-- Put an empty line in javadoc to improve lisibility. -->
        <module name="Regexp">
            <property name="severity" value="warning" />
            <property name="format"
                value="^(?: *\* *@(\w+)\b.*)\n(?: *\* *@(?!\1)\b)" />
            <property name="message"
                value="Put an empty line to improve lisibility." />
            <property name="ignoreComments" value="false" />
            <property name="illegalPattern" value="true" />
        </module>
 
        <!-- Explain why this is deprecated -->
        <module name="Regexp">
            <property name="format" value="^ *\* *@deprecated\s*$" />
            <property name="message"
                value="Explain why this is deprecated" />
            <property name="ignoreComments" value="false" />
            <property name="illegalPattern" value="true" />
        </module>
 
        <!-- La classe de test ne correspond pas a la classe declaree.  -->
        <module name="Regexp">
            <property name="format"
                value="@see (?:[a-z.]*)([A-Z]\w+)Test\b[\S\s]+\n[a-z ]*(?&lt;!abstract )class (?!\1)" />
            <property name="message"
                value="La classe de test ne correspond pas a la classe declaree." />
            <property name="ignoreComments" value="false" />
            <property name="illegalPattern" value="true" />
        </module>
 
 
        <!-- Problem with the iterator. -->
        <module name="GenericIllegalRegexp">
            <property name="format"
                value="for\s*\(.*\bIterator\b\s+(\w+)\s+.*\s(?!\1)\w+\.hasNext\(" />
            <property name="message"
                value="Problem with the iterator in the hasNext()." />
            <property name="ignoreComments" value="true" />
        </module>
 
        <!-- Problem with the iterator. -->
        <module name="Regexp">
            <property name="format"
                value="for\s*\(.*\bIterator\b\s+(\w+)\s+.*\n.*\s(?!\1)\w+\.next\(" />
            <property name="message"
                value="Problem with the iterator in the next()." />
            <property name="ignoreComments" value="true" />
            <property name="illegalPattern" value="true" />
        </module>
 
        <!--  Le logguer de XnetLogFactory est mal defini. -->
        <module name="Regexp">
            <property name="severity" value="error" />
            <property name="format"
                value="^(?:public )?class (\w+) [\s\S]*XnetLogFactory\.getLog\((?!\1\.)" />
            <property name="message"
                value="Le logguer de XnetLogFactory est mal defini." />
            <property name="ignoreComments" value="true" />
            <property name="illegalPattern" value="true" />
        </module>
 
 
        <!-- La classe doit etre liee a une classe de test.
            <module name="Regexp">
            <property name="severity" value="warning" />
            <property name="format"
            value="^package (?!com\.michelin\.rwf\.component\.logic)|^[a-z ]*abstract[a-z ]*class|@see (?:[a-z.]*)([A-Z]\w+)Test\b| * &lt;b&gt;THIS CLASS IS NOT TESTED YET&lt;/b&gt;" />
            <property name="message"
            value="La classe doit etre liee a une classe de test ou bien preciser dans sa javadoc: &lt;b&gt;THIS CLASS IS NOT TESTED YET&lt;/b&gt;" />
            <property name="ignoreComments" value="false" />
            <property name="illegalPattern" value="false" />
            </module>  -->
 
        <module name="cs.CollapseIfStatement" />
        <module name="cs.AvoidNegativeLogic" />
        <module name="cs.DeclareVariableInItsBloc" />
        <module name="cs.TooEarlyVariableDeclaration" />
        <module name="cs.UnusedLocalVariable" />
        <module name="cs.InstanceofIsNeverNull" />
        <module name="cs.NewIsNeverNull" />
        <module name="cs.UnnecessarilyElse" />
        <module name="cs.HiddenCatchBloc" />
        <module name="cs.UnusedImports" />
        <module name="cs.ImmutableField">
            <property name="severity" value="warning" />
        </module>
        <module name="cs.UnnecessaryParentheses"></module>
        <module name="cs.AvoidSingleton">
            <property name="severity" value="warning" />
        </module>
        <!-- module name="cs.UseZeroLengthArray" / -->
        <module name="cs.AvoidSelfAssignement" />
        <module name="cs.MisspelledIdent">
            <property name="correctIdents"
                value="hashCode,equals,compareTo,hasCode" />
        </module>
        <module name="cs.CanonicalFor" />
        <module name="cs.PotentialNPE" />
        <module name="cs.DuplicateCondition" />
 
 
        <module name="JavadocType" />
 
 
        <!--  boolean==true, set depuis un get, get qui ne renvoie rien, Exception ignoree, Collection de Collection -->
        <!--  pas de && || dans un for -->
        <!--  Tableau de collection -->
        <!-- ImmuableField, Singleton -->
        <!-- only assigned variable -->
 
 
 
    </module>
 
    <module name="StrictDuplicateCode">
        <property name="severity" value="warning" />
        <property name="min" value="50" />
    </module>
</module>
