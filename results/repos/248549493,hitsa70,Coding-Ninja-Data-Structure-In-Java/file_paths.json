[
    "Assignment Recursion 1",
    "Assignment Recursion 1/Pair star",
    "Assignment Recursion 1/Remove X",
    "Assignment Recursion 1/Replace pi",
    "Assignment Recursion 1/String to Integer",
    "Assignment Recursion 1/Tower of Hanoi",
    "Assignment: Graphs",
    "Assignment: Graphs/3 Cycle",
    "Assignment: Graphs/Coding Ninjas",
    "Assignment: Graphs/Connecting Dots",
    "Assignment: Graphs/Islands",
    "Assignment: Graphs/Largest Piece",
    "Bonus Assignment - BST and Binary Tree",
    "Bonus Assignment - BST and Binary Tree/Largest BST",
    "Bonus Assignment - BST and Binary Tree/Pair sum in a BST",
    "Bonus Assignment - BST and Binary Tree/Print nodes at distance k from node",
    "Bonus Assignment - BST and Binary Tree/Replace with Sum of greater nodes",
    "Bubble Sort (Iterative) LinkedList",
    "Code : Balanced Parenthesis",
    "LECTURE 2:OOPS 2",
    "LECTURE 2:OOPS 2/Car.java",
    "LECTURE 2:OOPS 2/Fraction.java",
    "LECTURE 2:OOPS 2/FractionUse.java",
    "LECTURE 2:OOPS 2/Truck.java",
    "LECTURE 2:OOPS 2/Vehicle.java",
    "LECTURE 2:OOPS 2/VehicleUse.java",
    "LECTURE 2:OOPS 2/ZeroDenominatorException.java",
    "Lecture 10 : Trees",
    "Lecture 10 : Trees/Check if generic tree contain element x",
    "Lecture 10 : Trees/Code : Count leaf nodes",
    "Lecture 10 : Trees/Code : Print Level Wise",
    "Lecture 10 : Trees/Code : Sum of nodes",
    "Lecture 10 : Trees/Depth of a node K",
    "Lecture 10 : Trees/Find Height",
    "Lecture 10 : Trees/Find number of nodes",
    "Lecture 10 : Trees/Largest node (Recursive)",
    "Lecture 10 : Trees/Next larger element.java",
    "Lecture 10 : Trees/Node having sum of children and node is max.java",
    "Lecture 10 : Trees/Number of Nodes greater than x",
    "Lecture 10 : Trees/Post-order Traversal",
    "Lecture 10 : Trees/Replace node with depth.java",
    "Lecture 10 : Trees/Second Largest Element In Tree.java",
    "Lecture 10 : Trees/checkIdentical.java",
    "Lecture 10 : Trees/preOrder.java",
    "Lecture 10 : Trees/takeInputLevelWise()",
    "Lecture 11: Binary Trees",
    "Lecture 11: Binary Trees/BinaryTreeNode",
    "Lecture 11: Binary Trees/BinaryTreeUse",
    "Lecture 11: Binary Trees/Code: Construct Tree from Preorder and Inorder",
    "Lecture 11: Binary Trees/Construct Tree from Postorder and Inorder",
    "Lecture 11: Binary Trees/Find Node",
    "Lecture 11: Binary Trees/Height Of Binary Tree",
    "Lecture 11: Binary Trees/Level order traversal",
    "Lecture 11: Binary Trees/Level wise linkedlist",
    "Lecture 11: Binary Trees/Mirror a Binary Tree",
    "Lecture 11: Binary Trees/Nodes without sibling",
    "Lecture 11: Binary Trees/Postorder Binary Tree",
    "Lecture 11: Binary Trees/Preorder Binary Tree",
    "Lecture 11: Binary Trees/Remove Leaf nodes",
    "Lecture 11: Binary Trees/Sum of all nodes",
    "Lecture 11: Binary Trees/ZigZag tree",
    "Lecture 11: Binary Trees/is Balanced",
    "Lecture 12: Binary Search Trees",
    "Lecture 12: Binary Search Trees/Check if a Binary Tree is BST",
    "Lecture 12: Binary Search Trees/Code: BST Class",
    "Lecture 12: Binary Search Trees/Code: BST to Sorted LL",
    "Lecture 12: Binary Search Trees/Code: Construct BST From Sorted Array",
    "Lecture 12: Binary Search Trees/Code: Search Node in BST",
    "Lecture 12: Binary Search Trees/Create & Insert Duplicate Node",
    "Lecture 12: Binary Search Trees/Find Path in BST",
    "Lecture 12: Binary Search Trees/LCA of Binary Tree",
    "Lecture 12: Binary Search Trees/Pair sum BInary Tree",
    "Lecture 12: Binary Search Trees/Path Sum Root to Leaf",
    "Lecture 12: Binary Search Trees/Print Elements in Range",
    "Lecture 13: Hashmaps",
    "Lecture 13: Hashmaps/Extract Unique characters",
    "Lecture 13: Hashmaps/Longest consecutive Sequence",
    "Lecture 13: Hashmaps/Longest subset zero sum",
    "Lecture 13: Hashmaps/Map Use",
    "Lecture 13: Hashmaps/Maximum Frequency Number",
    "Lecture 13: Hashmaps/Pair Sum to 0",
    "Lecture 13: Hashmaps/Pairs with difference K",
    "Lecture 13: Hashmaps/Print Intersection",
    "Lecture 14 : Priority Queues",
    "Lecture 14 : Priority Queues/Buy the ticket",
    "Lecture 14 : Priority Queues/Check Max-Heap",
    "Lecture 14 : Priority Queues/Code : In-place heap sort",
    "Lecture 14 : Priority Queues/Code : K largest elements",
    "Lecture 14 : Priority Queues/Code : Max Priority Queue",
    "Lecture 14 : Priority Queues/Code : Remove Min",
    "Lecture 14 : Priority Queues/Kth largest element",
    "Lecture 14 : Priority Queues/Merge K sorted arrays",
    "Lecture 14 : Priority Queues/Priority_Queue",
    "Lecture 14 : Priority Queues/Running median",
    "Lecture 15: Tries and Huffman Coding",
    "Lecture 15: Tries and Huffman Coding/Auto complete",
    "Lecture 15: Tries and Huffman Coding/Code: Search word in Trie",
    "Lecture 15: Tries and Huffman Coding/Count Words in Trie",
    "Lecture 15: Tries and Huffman Coding/Palindrome Pair",
    "Lecture 15: Tries and Huffman Coding/Pattern Matching",
    "Lecture 16: DP - 1",
    "Lecture 16: DP - 1/Code: Min Steps to One",
    "Lecture 16: DP - 1/Code: Min Steps to One using DP",
    "Lecture 16: DP - 1/Code: Minimum Count of Squares",
    "Lecture 16: DP - 1/Code: Number of Balanced BTs",
    "Lecture 16: DP - 1/Code: Number of Balanced BTs Using DP",
    "Lecture 16: DP - 1/Code: Staircase",
    "Lecture 17: DP - 2",
    "Lecture 17: DP - 2/All possible ways",
    "Lecture 17: DP - 2/Code : Minimum Cost Path",
    "Lecture 17: DP - 2/Code: 0 1 Knapsack",
    "Lecture 17: DP - 2/Code: Edit Distance",
    "Lecture 17: DP - 2/Code: Edit Distance(Memoization and DP)",
    "Lecture 17: DP - 2/Code: Knapsack(Memoization and DP)",
    "Lecture 17: DP - 2/Coin Tower",
    "Lecture 17: DP - 2/Longest Increasing Subsequence",
    "Lecture 17: DP - 2/Loot Houses",
    "Lecture 17: DP - 2/Matrix Chain Multiplication",
    "Lecture 17: DP - 2/Maximum Square Matrix With All Zeros",
    "Lecture 17: DP - 2/Shortest Subsequence",
    "Lecture 17: DP - 2/Ways To Make Coin Change",
    "Lecture 18: OOPS - 4",
    "Lecture 18: OOPS - 4/Code: Othello Move Function",
    "Lecture 19 : Graphs - I",
    "Lecture 19 : Graphs - I/Code : All connected components",
    "Lecture 19 : Graphs - I/Code : BFS Traversal",
    "Lecture 19 : Graphs - I/Code : Get Path - BFS",
    "Lecture 19 : Graphs - I/Code : Get Path - DFS",
    "Lecture 19 : Graphs - I/Code : Has Path",
    "Lecture 19 : Graphs - I/Code : Is Connected ?",
    "Lecture 1:OOPS 1",
    "Lecture 1:OOPS 1/Complex number class",
    "Lecture 1:OOPS 1/Fraction.java",
    "Lecture 1:OOPS 1/FractionUse.java",
    "Lecture 1:OOPS 1/Polynomial  class",
    "Lecture 20 : Graphs - II",
    "Lecture 20 : Graphs - II/Code : Dijkstra's Algorithm",
    "Lecture 20 : Graphs - II/Code : Kruskal's Algorithm",
    "Lecture 20 : Graphs - II/Code : Prim's Algorithm",
    "Lecture 3: Recursion 1",
    "Lecture 3: Recursion 1/All Indices of Number",
    "Lecture 3: Recursion 1/Calculate Power",
    "Lecture 3: Recursion 1/Check Number in Array",
    "Lecture 3: Recursion 1/Check Palindrome",
    "Lecture 3: Recursion 1/Count Zeros",
    "Lecture 3: Recursion 1/First Index of Number",
    "Lecture 3: Recursion 1/Geometric Sum",
    "Lecture 3: Recursion 1/Last Index of Number",
    "Lecture 3: Recursion 1/Multiplication (Recursive)",
    "Lecture 3: Recursion 1/Number of Digits",
    "Lecture 3: Recursion 1/Print Numbers",
    "Lecture 3: Recursion 1/Sum of Array",
    "Lecture 3: Recursion 1/Sum of digits",
    "Lecture 4: Recursion 2",
    "Lecture 4: Recursion 2/Binary Search (Recursive)",
    "Lecture 4: Recursion 2/Check AB",
    "Lecture 4: Recursion 2/Merge Sort Code",
    "Lecture 4: Recursion 2/Print Keypad Combinations Code",
    "Lecture 4: Recursion 2/Print Permutations - String",
    "Lecture 4: Recursion 2/Print Subsequences",
    "Lecture 4: Recursion 2/Print Subset Sum to K",
    "Lecture 4: Recursion 2/Print Subsets of Array",
    "Lecture 4: Recursion 2/Print all Codes - String",
    "Lecture 4: Recursion 2/Quick Sort Code",
    "Lecture 4: Recursion 2/Remove Duplicates Recursively",
    "Lecture 4: Recursion 2/Replace Character Recursively",
    "Lecture 4: Recursion 2/Return Keypad Code",
    "Lecture 4: Recursion 2/Return Permutations - String",
    "Lecture 4: Recursion 2/Return all codes - String",
    "Lecture 4: Recursion 2/Return subset of an array",
    "Lecture 4: Recursion 2/Return subsets sum to K",
    "Lecture 4: Recursion 2/Staircase",
    "Lecture 4: Recursion 2/findSubsequences",
    "Lecture 5: Time and Space Complexity Analysis",
    "Lecture 5: Time and Space Complexity Analysis/Check array rotation",
    "Lecture 5: Time and Space Complexity Analysis/Duplicate in array",
    "Lecture 5: Time and Space Complexity Analysis/Find the Unique Element",
    "Lecture 5: Time and Space Complexity Analysis/Pair sum in array",
    "Lecture 5: Time and Space Complexity Analysis/Print Array intersection",
    "Lecture 5: Time and Space Complexity Analysis/Rotate array",
    "Lecture 5: Time and Space Complexity Analysis/Triplet sum",
    "Lecture 7: Linked List 1",
    "Lecture 7: Linked List 1/AppendLastNToFirst",
    "Lecture 7: Linked List 1/Delete Node in LL",
    "Lecture 7: Linked List 1/Eliminate duplicates from LL",
    "Lecture 7: Linked List 1/Find a node in LL",
    "Lecture 7: Linked List 1/Length of LL",
    "Lecture 7: Linked List 1/Palindrome LinkedList",
    "Lecture 7: Linked List 1/Print ith Node",
    "Lecture 7: Linked List 1/Print reverse LinkedList",
    "Lecture 8 : Linked List 2",
    "Lecture 8 : Linked List 2/Bubble Sort (Iterative) LinkedList",
    "Lecture 8 : Linked List 2/Code : Merge Sort",
    "Lecture 8 : Linked List 2/Code: Midpoint of the linked list",
    "Lecture 8 : Linked List 2/Delete every N nodes",
    "Lecture 8 : Linked List 2/Delete node (recursive)",
    "Lecture 8 : Linked List 2/Even after Odd LinkedList",
    "Lecture 8 : Linked List 2/Find a node in LL (recursive)",
    "Lecture 8 : Linked List 2/Merge two sorted LL",
    "Lecture 8 : Linked List 2/Reverse LL (Iterative)",
    "Lecture 8 : Linked List 2/Reverse LL (Recursive)",
    "Lecture 8 : Linked List 2/Swap two Node of LL",
    "Lecture 8 : Linked List 2/kReverse",
    "Lecture 8 : Linked List 2/reverseLLBetter",
    "Lecture 9 : Stacks and Queues",
    "Lecture 9 : Stacks and Queues/Check redundant brackets",
    "Lecture 9 : Stacks and Queues/Code : Queue Using LL",
    "Lecture 9 : Stacks and Queues/Code : Stack Using LL",
    "Lecture 9 : Stacks and Queues/Minimum bracket Reversal",
    "Lecture 9 : Stacks and Queues/QueueEmptyException.java",
    "Lecture 9 : Stacks and Queues/QueueFullException.java",
    "Lecture 9 : Stacks and Queues/QueueUse.java",
    "Lecture 9 : Stacks and Queues/QueueUsingArray.java",
    "Lecture 9 : Stacks and Queues/Reverse Queue",
    "Lecture 9 : Stacks and Queues/Reverse Stack",
    "Lecture 9 : Stacks and Queues/StackEmptyException.java",
    "Lecture 9 : Stacks and Queues/StackFullException.java",
    "Lecture 9 : Stacks and Queues/StackUse.java",
    "Lecture 9 : Stacks and Queues/StackUsingArray.java",
    "Lecture 9 : Stacks and Queues/Stock Span",
    "README.md",
    "Test 1",
    "Test 1/Complexity of a Recurrence Relation",
    "Test 1/Complexity of different operations in a sorted array.",
    "Test 1/Does s contain t ?",
    "Test 1/Maximum Profit on App",
    "Test 1/Recurrence Relation for Tower of Hanoi Problem",
    "Test 1/Split Array",
    "Test 2",
    "Test 2/Delete alternate nodes",
    "Test 2/Dequeue",
    "Test 2/Next Number",
    "Test 3",
    "Test 3/Check cousins",
    "Test 3/Longest Leaf to root path",
    "Test 3/Remove leaf nodes in Tree"
]