<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
  "-//Checkstyle//DTD Checkstyle Configuration 1.2//EN"
  "https://checkstyle.org/dtds/configuration_1_2.dtd">

<module name="Checker">
    <property name="fileExtensions" value="java, properties, xml"/>

    <module name="FileTabCharacter"/>

    <module name="RegexpOnFilename">
        <property name="id" value="use-singular-test-dot-java-for-test-filename"/>
        <property name="folderPattern" value="[\\/]src[\\/]test[\\/]"/>
        <property name="fileNamePattern" value="Tests\.java$"/>
    </module>

    <module name="RegexpSingleline">
        <property name="format" value="\s+$"/>
        <property name="minimum" value="0"/>
        <property name="maximum" value="0"/>
        <property name="message" value="Line has trailing spaces."/>
    </module>

    <module name="RegexpSingleline">
        <property name="id" value="no-space-after-at"/>
        <property name="format" value="@\s+[A-Za-z]"/>
        <property name="message" value="There is a space after @ sign in annotation"/>
    </module>

    <module name="RegexpSingleline">
        <property name="id" value="use-assertj"/>
        <property name="format" value="assert(Equals|NotEquals|True|False|Null|NotNull)|org\.junit\.Assert"/>
        <property name="message"
                  value="Use assertj fluent assertions instead of legacy junit: http://joel-costigliola.github.io/assertj/ "/>
    </module>

    <module name="RegexpSingleline">
        <property name="id" value="use-specific-matcher-instead-of-is-equal-to"/>
        <property name="format" value="\.isEqualTo\((true|false|null)\)"/>
        <property name="message" value="Use a specific matcher like isTrue, isFalse, isNull instead of isEqualTo"/>
    </module>

    <module name="RegexpSingleline">
        <property name="id" value="use-assertj-matcher-instead-of-raw"/>
        <property name="format"
                  value="assertThat.*([=!&gt;&lt;]{2} | [&gt;&lt;] |\.equals|\.contains|\.isEmpty\(\)|\.isPresent\(\)|reflectionEquals).*\.is(True|False)"/>
        <property name="message"
                  value="Use an assertj matcher like isEqualTo, hasSize, containsExactly, isEmpty, isEqualToComparingFieldByField"/>
    </module>

    <module name="RegexpSingleline">
        <property name="id" value="use-assertj-using-recursive-comparison"/>
        <property name="format" value="isEqualToComparingFieldByFieldRecursively"/>
        <property name="message"
                  value="Use a non-deprecated assertj matcher like usingRecursiveComparison().isEqualTo()"/>
    </module>

    <module name="RegexpSingleline">
        <property name="id" value="use-junit5"/>
        <property name="format" value="@RunWith\((JUnit4|Mockito)"/>
        <property name="message"
                  value="Do not use JUnit4 @RunWith annotation - use junit5 (no @RunWith needed except for Cucumber/IT)"/>
    </module>

    <module name="RegexpSingleline">
        <property name="id" value="use-junit5-test-annotation"/>
        <property name="format" value="import org.junit.Test"/>
        <property name="message" value="Use junit5, import org.junit.jupiter.api.Test"/>
    </module>

    <module name="RegexpSingleline">
        <property name="id" value="use-assert-that-exception-of-type"/>
        <property name="format" value="@Test\("/>
        <property name="message"
                  value="Use assertThatExceptionOfType on the specific code expected to throw the exception"/>
    </module>

    <module name="RegexpSingleline">
        <property name="id" value="use-hasSize-matcher"/>
        <property name="format" value="size\(\)\)\.isEqualTo"/>
        <property name="message" value="Use the assertj hasSize matcher"/>
    </module>

    <module name="RegexpSingleline">
        <property name="id" value="use-never-verifier"/>
        <property name="format" value=" times\(0\)"/>
        <property name="message" value="Use the never() verifier instead of times(0), for readability"/>
    </module>

    <module name="RegexpSingleline">
        <property name="id" value="no-verify-times-one"/>
        <property name="format" value=" times\(1\)"/>
        <property name="message" value="Remove redundant times(1) verification, it is the default behavior"/>
    </module>

    <module name="RegexpSingleline">
        <property name="id" value="no-suppress-all-pmd"/>
        <property name="format" value="@SuppressWarnings\(&quot;PMD&quot;\)"/>
        <property name="message"
                  value="Do not blanket-suppress all PMD warnings. Preferably fix them, or only suppress specific individual PMD warnings, e.g. PMD.NPathComplexity"/>
    </module>

    <module name="RegexpSingleline">
        <property name="id" value="no-type-specific-assert-that"/>
        <property name="format" value="import static org.assertj.core.api.AssertionsFor.*assertThat.*"/>
        <property name="message"
                  value="Use org.assertj.core.api.Assertions.assertThat instead of type-specific variant"/>
    </module>

    <module name="RegexpSingleline">
        <property name="id" value="no-deprecated-MockitoJUnitRunner"/>
        <property name="format" value="import org.mockito.runners.MockitoJUnitRunner"/>
        <property name="message"
                  value="Use org.mockito.junit.MockitoJUnitRunner instead of deprecated org.mockito.runners.MockitoJUnitRunner"/>
    </module>

    <module name="RegexpSingleline">
        <property name="id" value="only-springframework-http-status"/>
        <property name="format"
                  value="(org.apache.http.HttpStatus|org.apache.commons.httpclient.HttpStatus|HttpServletResponse\.SC).*"/>
        <property name="message" value="Use org.springframework.http.HttpStatus"/>
    </module>

    <module name="RegexpSingleline">
        <property name="id" value="no-pre-generics-constants"/>
        <property name="format" value="Collections\.EMPTY\_"/>
        <property name="message"
                  value="Use their corresponding type-inferrable method replacements Collections.emptySet(), Collections.emptyMap(), etc"/>
    </module>

    <module name="RegexpSingleline">
        <property name="id" value="no-manual-mockito-reset"/>
        <property name="format" value="Mockito\.reset"/>
        <property name="message"
                  value="Do not manually reset mockito mocks - mockito does this automatically. (See HW-90650)"/>
    </module>

    <module name="RegexpSingleline">
        <property name="id" value="use-lombok-slf4j-annotation"/>
        <property name="format" value="LoggerFactory\."/>
        <property name="message"
                  value="Use lombok @Slf4j annotation to create LOGGER instead of manual factory invocation"/>
    </module>

    <module name="RegexpMultiline">
        <property name="id" value="same-line-single-annotations"/>
        <property name="format" value="(?&lt;!\n\u0020{0,16}@[^\n]{1,99})\n\u0020+@[a-zA-Z]+\n(?!\u0020+@)"/>
        <property name="message" value="Put single parameterless annotations on the same line as annotated item"/>
    </module>

    <module name="RegexpMultiline">
        <property name="id" value="one-statement-lambda-no-braces"/>
        <!-- avoid false positive for lambda starting with
             'throw', which requires wrapping -->
        <property name="format" value="\s*\-\>\s*\{\s*((new )|([\w.]{6,}))[^;{}]*\;\s*\}"/>
        <property name="message"
                  value="Remove unnecessary braces, semicolon, and return wrapping a one-statement lambda"/>
    </module>

    <module name="RegexpMultiline">
        <property name="id" value="lambda-can-use-method-reference-with-arg"/>
        <property name="format" value="\((\w*)\s*\-\>\s*(new \w+|\w+(\.\w+)*)\(\1\)\s*\)"/>
        <property name="message" value="Use a method reference instead of a handcrafted equivalent lambda"/>
    </module>

    <module name="RegexpMultiline">
        <property name="id" value="lambda-can-use-method-reference-with-no-arg"/>
        <property name="format" value="\(\(\)\s*\-\>\s*(new \w+|\w+(\.\w+)*)\(\)\s*\)"/>
        <property name="message" value="Use a method reference instead of a handcrafted equivalent lambda"/>
    </module>

    <module name="RegexpMultiline">
        <property name="id" value="lambda-can-use-method-reference-on-self"/>
        <property name="format" value="\((\w*)\s*\-\>\s*\1\.\w+\(\)\s*\)"/>
        <property name="message" value="Use a method reference instead of a handcrafted equivalent lambda"/>
    </module>

    <module name="SuppressWarningsFilter"/>

    <module name="LineLength">
        <property name="max" value="200"/>
    </module>

    <module name="TreeWalker">
        <module name="SuppressWarningsHolder"/>

        <module name="Regexp">
            <property name="id" value="copy-rights-verifier"/>
            <property name="format"
                      value="\/\*\n \* Project Service Now Connector\n \* \(c\) 20[0-9, -]+ VMware\, Inc\. All rights reserved\.\n \* SPDX-License-Identifier: BSD-2-Clause\n \*\/"/>
        </module>

        <!-- standard checks: http://checkstyle.sourceforge.net/checks.html -->
        <module name="ArrayTypeStyle"/>
        <module name="AvoidNestedBlocks"/>
        <module name="AvoidStarImport"/>
        <module name="CatchParameterName"/>
        <module name="ConstantName"/>
        <module name="DefaultComesLast"/>
        <module name="EmptyBlock"/>
        <module name="EmptyForInitializerPad"/>
        <module name="EmptyForIteratorPad"/>
        <module name="EmptyLineSeparator">
            <property name="tokens"
                      value="IMPORT, CLASS_DEF, INTERFACE_DEF, ENUM_DEF, STATIC_INIT, INSTANCE_INIT, METHOD_DEF, CTOR_DEF"/>
            <property name="allowMultipleEmptyLines" value="false"/>
        </module>
        <module name="EmptyStatement"/>
        <module name="FallThrough"/>
        <module name="GenericWhitespace"/>
        <module name="HideUtilityClassConstructor"/>
        <module name="IllegalImport"/>
        <module name="ImportOrder">
            <property name="groups" value="*,/java/"/>
            <property name="separated" value="true"/>
            <property name="option" value="bottom"/>
            <property name="ordered" value="false"/>
            <property name="sortStaticImportsAlphabetically" value="true"/>
        </module>
        <module name="Indentation"/>
        <module name="InnerAssignment"/>
        <module name="LambdaParameterName"/>
        <module name="LeftCurly"/>
        <module name="LocalFinalVariableName"/>
        <module name="LocalVariableName"/>
        <module name="MemberName"/>
        <module name="MethodName"/>
        <module name="MethodParamPad"/>
        <module name="MissingSwitchDefault"/>
        <module name="ModifiedControlVariable"/>
        <module name="ModifierOrder"/>
        <module name="MultipleVariableDeclarations"/>
        <module name="NeedBraces"/>
        <module name="AvoidDoubleBraceInitialization"/>
        <module name="NoWhitespaceAfter"/>
        <module name="NoWhitespaceBefore"/>
        <module name="OneStatementPerLine"/>
        <module name="OneTopLevelClass"/>
        <module name="OperatorWrap"/>
        <module name="OuterTypeFilename"/>
        <module name="OuterTypeNumber"/>
        <module name="PackageDeclaration">
            <property name="matchDirectoryStructure" value="true"/>
        </module>
        <module name="PackageName"/>
        <module name="ParameterAssignment"/>
        <module name="ParameterName"/>
        <module name="ParenPad"/>
        <module name="RedundantImport"/>
        <module name="RedundantModifier"> <!-- skipping CTOR_DEF in the below due to false positives-->
            <property name="tokens"
                      value="METHOD_DEF, VARIABLE_DEF, ANNOTATION_FIELD_DEF, INTERFACE_DEF, CLASS_DEF, ENUM_DEF, RESOURCE"/>
        </module>
        <module name="RightCurly"/>
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>
        <module name="SingleSpaceSeparator"/>
        <module name="StaticVariableName"/>
        <module name="StringLiteralEquality"/>
        <module name="TypecastParenPad"/>
        <module name="TypeName"/>
        <module name="UpperEll"/>
        <module name="UnnecessaryParentheses"/>
        <module name="UnusedImports"/>
        <module name="WhitespaceAfter"/>
        <module name="WhitespaceAround"/>

        <!-- sevntu checks: https://sevntu-checkstyle.github.io/sevntu.checkstyle/apidocs/index.html  -->
        <module name="AvoidConditionInversionCheck"/>
        <module name="AvoidNotShortCircuitOperatorsForBooleanCheck"/>
        <module name="DiamondOperatorForVariableDefinitionCheck"/>
        <module name="ConfusingConditionCheck"/>
        <module name="ForbidReturnInFinallyBlockCheck"/>
        <module name="LogicConditionNeedOptimizationCheck"/>
        <module name="MoveVariableInsideIfCheck"/>
        <module name="RedundantReturnCheck"/>
        <module name="ReturnBooleanFromTernaryCheck"/>
        <module name="TernaryPerExpressionCountCheck"/>
        <module name="UnnecessaryParenthesesExtendedCheck"/>
        <module name="UselessSingleCatchCheck"/>
        <module name="SuppressionXpathSingleFilter">
            <property name="checks" value="HideUtilityClassConstructor"/>
            <property name="query"
                      value="//*[MODIFIERS//*[@text = 'UtilityClass' or @text='NoArgsConstructor' or @text = 'SpringBootApplication']]/descendant-or-self::node()"/>
        </module>
    </module>
</module>
