[
    "Question 002_What is an abstract class",
    "Question 002_What is an abstract class/AbstractDemo.java",
    "Question 003_Does Abstract class have constructor",
    "Question 003_Does Abstract class have constructor/Example 1",
    "Question 003_Does Abstract class have constructor/Example 1/AbstractDemo.java",
    "Question 003_Does Abstract class have constructor/Example 2",
    "Question 003_Does Abstract class have constructor/Example 2/AbstractDemo.java",
    "Question 007_Why Java 8 has introduced default methods",
    "Question 007_Why Java 8 has introduced default methods/Child.java",
    "Question 007_Why Java 8 has introduced default methods/Diamond Problem",
    "Question 007_Why Java 8 has introduced default methods/Diamond Problem/Child.java",
    "Question 014_What is exception and exception handling",
    "Question 014_What is exception and exception handling/Exception handled",
    "Question 014_What is exception and exception handling/Exception handled/TestException.java",
    "Question 014_What is exception and exception handling/Exceptoin thrown",
    "Question 014_What is exception and exception handling/Exceptoin thrown/TestException.java",
    "Question 016_What are the different types of exceptions",
    "Question 016_What are the different types of exceptions/DemoException.java",
    "Question 017_How exception handling is done in java",
    "Question 017_How exception handling is done in java/DemoException.java",
    "Question 019_How to handle multiple exceptions together",
    "Question 019_How to handle multiple exceptions together/Error showing that we have to handle most specific exceptions first",
    "Question 019_How to handle multiple exceptions together/Error showing that we have to handle most specific exceptions first/DemoException.java",
    "Question 019_How to handle multiple exceptions together/Using multiple catch blocks",
    "Question 019_How to handle multiple exceptions together/Using multiple catch blocks/DemoException.java",
    "Question 019_How to handle multiple exceptions together/Using pipe symbol",
    "Question 019_How to handle multiple exceptions together/Using pipe symbol/DemoException.java",
    "Question 021_Difference between throw and throws keyword. And discuss Exception Propagation",
    "Question 021_Difference between throw and throws keyword. And discuss Exception Propagation/program showing checked exception are not propagated by default",
    "Question 021_Difference between throw and throws keyword. And discuss Exception Propagation/program showing checked exception are not propagated by default/DemoException.java",
    "Question 021_Difference between throw and throws keyword. And discuss Exception Propagation/program showing that checked exception is propagated using throws keyword",
    "Question 021_Difference between throw and throws keyword. And discuss Exception Propagation/program showing that checked exception is propagated using throws keyword/DemoException.java",
    "Question 021_Difference between throw and throws keyword. And discuss Exception Propagation/program showing that the propagated checked exception is handled by caller method",
    "Question 021_Difference between throw and throws keyword. And discuss Exception Propagation/program showing that the propagated checked exception is handled by caller method/DemoException.java",
    "Question 021_Difference between throw and throws keyword. And discuss Exception Propagation/program showing that throws keyword is not needed with unchecked exception",
    "Question 021_Difference between throw and throws keyword. And discuss Exception Propagation/program showing that throws keyword is not needed with unchecked exception/DemoException.java",
    "Question 021_Difference between throw and throws keyword. And discuss Exception Propagation/program showing unchecked exceptions are propagated by default",
    "Question 021_Difference between throw and throws keyword. And discuss Exception Propagation/program showing unchecked exceptions are propagated by default/DemoException.java",
    "Question 021_Difference between throw and throws keyword. And discuss Exception Propagation/program showing usage of throws keyword with unchecked exception",
    "Question 021_Difference between throw and throws keyword. And discuss Exception Propagation/program showing usage of throws keyword with unchecked exception/DemoException.java",
    "Question 021_Difference between throw and throws keyword. And discuss Exception Propagation/when propagated unchecked exception is handled",
    "Question 021_Difference between throw and throws keyword. And discuss Exception Propagation/when propagated unchecked exception is handled/DemoException.java",
    "Question 022_Exception handling w.r.t. method overriding",
    "Question 022_Exception handling w.r.t. method overriding/when Child class overridden method throws a broader exception than the parent one",
    "Question 022_Exception handling w.r.t. method overriding/when Child class overridden method throws a broader exception than the parent one/TestException.java",
    "Question 022_Exception handling w.r.t. method overriding/when child class overridden method declares a narrower exception than the parent one",
    "Question 022_Exception handling w.r.t. method overriding/when child class overridden method declares a narrower exception than the parent one/TestException.java",
    "Question 022_Exception handling w.r.t. method overriding/when child class overridden method throws same exception as the parent one",
    "Question 022_Exception handling w.r.t. method overriding/when child class overridden method throws same exception as the parent one/TestException.java",
    "Question 022_Exception handling w.r.t. method overriding/when parent class method declares an exception and child class overridden method does not declare any exception",
    "Question 022_Exception handling w.r.t. method overriding/when parent class method declares an exception and child class overridden method does not declare any exception/TestException.java",
    "Question 022_Exception handling w.r.t. method overriding/when parent class method does not declare an exception and child class declares checked exception",
    "Question 022_Exception handling w.r.t. method overriding/when parent class method does not declare an exception and child class declares checked exception/TestException.java",
    "Question 022_Exception handling w.r.t. method overriding/when parent class method does not declare an exception and child class declares unchecked exception",
    "Question 022_Exception handling w.r.t. method overriding/when parent class method does not declare an exception and child class declares unchecked exception/TestException.java",
    "Question 023_Programs related to Exception handling and return keyword",
    "Question 023_Programs related to Exception handling and return keyword/Program 1",
    "Question 023_Programs related to Exception handling and return keyword/Program 1/DemoException.java",
    "Question 023_Programs related to Exception handling and return keyword/Program 2",
    "Question 023_Programs related to Exception handling and return keyword/Program 2/DemoException.java",
    "Question 023_Programs related to Exception handling and return keyword/Program 3",
    "Question 023_Programs related to Exception handling and return keyword/Program 3/DemoException.java",
    "Question 023_Programs related to Exception handling and return keyword/Program 4",
    "Question 023_Programs related to Exception handling and return keyword/Program 4/DemoException.java",
    "Question 023_Programs related to Exception handling and return keyword/Program 5",
    "Question 023_Programs related to Exception handling and return keyword/Program 5/DemoException.java",
    "Question 024_How to make your own custom exception class",
    "Question 024_How to make your own custom exception class/DemoException.java",
    "Question 027_What will be Output of below program related to try-catch-finally",
    "Question 027_What will be Output of below program related to try-catch-finally/DemoException.java",
    "Question 028_Explain try-with-resources",
    "Question 028_Explain try-with-resources/Demo.java",
    "Question 030_What does the equals() method of String class do",
    "Question 030_What does the equals() method of String class do/Test.java",
    "Question 032_Explain the output of below program related to equals() method of StringBuilder",
    "Question 032_Explain the output of below program related to equals() method of StringBuilder/Demo.java",
    "Question 037_What is Comparable and Comparator",
    "Question 037_What is Comparable and Comparator/Comparable Example",
    "Question 037_What is Comparable and Comparator/Comparable Example/ComparableDemo.java",
    "Question 037_What is Comparable and Comparator/Comparable Example/Employee.java",
    "Question 037_What is Comparable and Comparator/Comparator Example",
    "Question 037_What is Comparable and Comparator/Comparator Example/NameComparator",
    "Question 037_What is Comparable and Comparator/Comparator Example/NameComparator/ComparatorDemo.java",
    "Question 037_What is Comparable and Comparator/Comparator Example/NameComparator/NameComparator.java",
    "Question 037_What is Comparable and Comparator/Comparator Example/SalaryComparator",
    "Question 037_What is Comparable and Comparator/Comparator Example/SalaryComparator/ComparatorDemo.java",
    "Question 037_What is Comparable and Comparator/Comparator Example/SalaryComparator/SalaryComparator.java",
    "Question 038_How to compare a list of Employees based on name and age",
    "Question 038_How to compare a list of Employees based on name and age/ComparatorDemo.java",
    "Question 038_How to compare a list of Employees based on name and age/NameAgeComparator.java",
    "Question 043_Explain Auto-boxing and Un-boxing",
    "Question 043_Explain Auto-boxing and Un-boxing/Test.java",
    "Question 044_Find the output of below program",
    "Question 044_Find the output of below program/Test.java",
    "Question 045_Can you pass primitive long in switch statement",
    "Question 045_Can you pass primitive long in switch statement/Test.java",
    "Question 046_Explain static keyword in Java",
    "Question 046_Explain static keyword in Java/Compile Time Error comes when we try to access non-static member inside static nested class",
    "Question 046_Explain static keyword in Java/Compile Time Error comes when we try to access non-static member inside static nested class/StaticNestedTestClass.java",
    "Question 046_Explain static keyword in Java/Creating object of static inner class",
    "Question 046_Explain static keyword in Java/Creating object of static inner class/StaticNestedTestClass.java",
    "Question 046_Explain static keyword in Java/When Static inner class has static fields",
    "Question 046_Explain static keyword in Java/When Static inner class has static fields/StaticNestedTestClass.java",
    "Question 047_What is an Inner Class in Java, how it can be instantiated and what are the types of Inner Classes",
    "Question 047_What is an Inner Class in Java, how it can be instantiated and what are the types of Inner Classes/Compile time error when Inner Class have static fields",
    "Question 047_What is an Inner Class in Java, how it can be instantiated and what are the types of Inner Classes/Compile time error when Inner Class have static fields/InnerClassDemo.java",
    "Question 047_What is an Inner Class in Java, how it can be instantiated and what are the types of Inner Classes/Inner Class instantiation",
    "Question 047_What is an Inner Class in Java, how it can be instantiated and what are the types of Inner Classes/Inner Class instantiation/InnerClassDemo.java",
    "Question 047_What is an Inner Class in Java, how it can be instantiated and what are the types of Inner Classes/anonymous inner class",
    "Question 047_What is an Inner Class in Java, how it can be instantiated and what are the types of Inner Classes/anonymous inner class/Anonymous inner demo",
    "Question 047_What is an Inner Class in Java, how it can be instantiated and what are the types of Inner Classes/anonymous inner class/Anonymous inner demo/TestAnonymousInner.java",
    "Question 047_What is an Inner Class in Java, how it can be instantiated and what are the types of Inner Classes/anonymous inner class/Compile time error in case of using static variable which is not final",
    "Question 047_What is an Inner Class in Java, how it can be instantiated and what are the types of Inner Classes/anonymous inner class/Compile time error in case of using static variable which is not final/TestAnonymousInner.java",
    "Question 047_What is an Inner Class in Java, how it can be instantiated and what are the types of Inner Classes/anonymous inner class/Example 1",
    "Question 047_What is an Inner Class in Java, how it can be instantiated and what are the types of Inner Classes/anonymous inner class/Example 1/AnonymousInnerDemo.java",
    "Question 047_What is an Inner Class in Java, how it can be instantiated and what are the types of Inner Classes/anonymous inner class/Example 1/Employee.java",
    "Question 047_What is an Inner Class in Java, how it can be instantiated and what are the types of Inner Classes/anonymous inner class/Example 2",
    "Question 047_What is an Inner Class in Java, how it can be instantiated and what are the types of Inner Classes/anonymous inner class/Example 2/RunnableInnerDemo.java",
    "Question 047_What is an Inner Class in Java, how it can be instantiated and what are the types of Inner Classes/anonymous inner class/Example 3",
    "Question 047_What is an Inner Class in Java, how it can be instantiated and what are the types of Inner Classes/anonymous inner class/Example 3/TestAnonymousInner.java",
    "Question 047_What is an Inner Class in Java, how it can be instantiated and what are the types of Inner Classes/local inner class",
    "Question 047_What is an Inner Class in Java, how it can be instantiated and what are the types of Inner Classes/local inner class/Compile time error",
    "Question 047_What is an Inner Class in Java, how it can be instantiated and what are the types of Inner Classes/local inner class/Compile time error/InnerClassDemo.java",
    "Question 047_What is an Inner Class in Java, how it can be instantiated and what are the types of Inner Classes/local inner class/Example 1",
    "Question 047_What is an Inner Class in Java, how it can be instantiated and what are the types of Inner Classes/local inner class/Example 1/InnerClassDemo.java",
    "Question 048_What is Constructor Chaining in java",
    "Question 048_What is Constructor Chaining in java/super() example",
    "Question 048_What is Constructor Chaining in java/super() example/ConstructorChaining.java",
    "Question 048_What is Constructor Chaining in java/this() example",
    "Question 048_What is Constructor Chaining in java/this() example/Employee.java",
    "Question 049_What is init block",
    "Question 049_What is init block/Example 1",
    "Question 049_What is init block/Example 1/InitBlockTest.java",
    "Question 049_What is init block/Example 2",
    "Question 049_What is init block/Example 2/InitBlockTest.java",
    "Question 049_What is init block/Example 3",
    "Question 049_What is init block/Example 3/InitBlockTest.java",
    "Question 051_What is Variable shadowing and Variable hiding in Java",
    "Question 051_What is Variable shadowing and Variable hiding in Java/Variable Hiding",
    "Question 051_What is Variable shadowing and Variable hiding in Java/Variable Hiding/Example 1",
    "Question 051_What is Variable shadowing and Variable hiding in Java/Variable Hiding/Example 1/Test.java",
    "Question 051_What is Variable shadowing and Variable hiding in Java/Variable Hiding/Example 2",
    "Question 051_What is Variable shadowing and Variable hiding in Java/Variable Hiding/Example 2/Test.java",
    "Question 051_What is Variable shadowing and Variable hiding in Java/Variable Hiding/Variable hiding is not same as Method Overriding",
    "Question 051_What is Variable shadowing and Variable hiding in Java/Variable Hiding/Variable hiding is not same as Method Overriding/Test.java",
    "Question 051_What is Variable shadowing and Variable hiding in Java/Variable Shadowing",
    "Question 051_What is Variable shadowing and Variable hiding in Java/Variable Shadowing/Example 1",
    "Question 051_What is Variable shadowing and Variable hiding in Java/Variable Shadowing/Example 1/Test.java",
    "Question 051_What is Variable shadowing and Variable hiding in Java/Variable Shadowing/Example 2",
    "Question 051_What is Variable shadowing and Variable hiding in Java/Variable Shadowing/Example 2/Test.java",
    "Question 053_Explain enum",
    "Question 053_Explain enum/Example 1",
    "Question 053_Explain enum/Example 1/Color.java",
    "Question 053_Explain enum/Example 2",
    "Question 053_Explain enum/Example 2/Test.java",
    "Question 054_What is Cloneable",
    "Question 054_What is Cloneable/Program 1",
    "Question 054_What is Cloneable/Program 1/Employee.java",
    "Question 054_What is Cloneable/Program 2",
    "Question 054_What is Cloneable/Program 2/Employee.java",
    "Question 054_What is Cloneable/Program 3",
    "Question 054_What is Cloneable/Program 3/Employee.java",
    "Question 055_What is Shallow copy and Deep copy",
    "Question 055_What is Shallow copy and Deep copy/Program 1",
    "Question 055_What is Shallow copy and Deep copy/Program 1/Employee.java",
    "Question 055_What is Shallow copy and Deep copy/Program 2",
    "Question 055_What is Shallow copy and Deep copy/Program 2/Employee.java",
    "Question 056_What is Serialization and De-serialization",
    "Question 056_What is Serialization and De-serialization/Employee.java",
    "Question 056_What is Serialization and De-serialization/SerializationDemo.java",
    "Question 057_What is SerialVersionUID",
    "Question 057_What is SerialVersionUID/Program 1",
    "Question 057_What is SerialVersionUID/Program 1/DeserializationTest.java",
    "Question 057_What is SerialVersionUID/Program 1/Employee.java",
    "Question 057_What is SerialVersionUID/Program 2",
    "Question 057_What is SerialVersionUID/Program 2/Employee.java",
    "Question 057_What is SerialVersionUID/Program 2/SerializationDemo.java",
    "Question 057_What is SerialVersionUID/Program 3",
    "Question 057_What is SerialVersionUID/Program 3/DeserializationTest.java",
    "Question 057_What is SerialVersionUID/Program 3/Employee.java",
    "Question 058_Serialization scenarios with Inheritance",
    "Question 058_Serialization scenarios with Inheritance/Case 1",
    "Question 058_Serialization scenarios with Inheritance/Case 1/TestSerialization.java",
    "Question 058_Serialization scenarios with Inheritance/Case 2",
    "Question 058_Serialization scenarios with Inheritance/Case 2/TestSerialization.java",
    "Question 058_Serialization scenarios with Inheritance/Case 2/without error",
    "Question 058_Serialization scenarios with Inheritance/Case 2/without error/TestSerialization.java",
    "Question 059_Stopping Serialization and De-serialization",
    "Question 059_Stopping Serialization and De-serialization/TestSerialization.java",
    "Question 060_What is Externalizable Interface",
    "Question 060_What is Externalizable Interface/Program 1",
    "Question 060_What is Externalizable Interface/Program 1/Employee.java",
    "Question 060_What is Externalizable Interface/Program 1/TestExternalizable.java",
    "Question 060_What is Externalizable Interface/Program 2",
    "Question 060_What is Externalizable Interface/Program 2/Employee.java",
    "Question 060_What is Externalizable Interface/Program 2/TestExternalizable.java",
    "Question 061_Externalizable with Inheritance",
    "Question 061_Externalizable with Inheritance/Case 1",
    "Question 061_Externalizable with Inheritance/Case 1/Department.java",
    "Question 061_Externalizable with Inheritance/Case 1/ExternalizableDemo.java",
    "Question 061_Externalizable with Inheritance/Case 1/Student.java",
    "Question 061_Externalizable with Inheritance/Case 2",
    "Question 061_Externalizable with Inheritance/Case 2/Department.java",
    "Question 061_Externalizable with Inheritance/Case 2/ExternalizableDemo.java",
    "Question 061_Externalizable with Inheritance/Case 2/Student.java",
    "Question 063_How to make a class Immutable",
    "Question 063_How to make a class Immutable/Address.java",
    "Question 063_How to make a class Immutable/Employee.java",
    "Question 063_How to make a class Immutable/TestImmutable.java",
    "Question 063_How to make a class Immutable/Wrong Implementation",
    "Question 063_How to make a class Immutable/Wrong Implementation/Employee.java",
    "Question 064_Explain Class loaders in Java",
    "Question 064_Explain Class loaders in Java/Employee.java",
    "Question 065_What is Singleton Design Pattern and how it can be implemented",
    "Question 065_What is Singleton Design Pattern and how it can be implemented/1. Eager Initialization",
    "Question 065_What is Singleton Design Pattern and how it can be implemented/1. Eager Initialization/A.java",
    "Question 065_What is Singleton Design Pattern and how it can be implemented/1. Eager Initialization/Test.java",
    "Question 065_What is Singleton Design Pattern and how it can be implemented/2. Static Block Eager Initialization",
    "Question 065_What is Singleton Design Pattern and how it can be implemented/2. Static Block Eager Initialization/A.java",
    "Question 065_What is Singleton Design Pattern and how it can be implemented/3. Lazy Initialization",
    "Question 065_What is Singleton Design Pattern and how it can be implemented/3. Lazy Initialization/A.java",
    "Question 065_What is Singleton Design Pattern and how it can be implemented/4. Thread Safe Singleton implementation",
    "Question 065_What is Singleton Design Pattern and how it can be implemented/4. Thread Safe Singleton implementation/A.java",
    "Question 065_What is Singleton Design Pattern and how it can be implemented/5. double checked locking",
    "Question 065_What is Singleton Design Pattern and how it can be implemented/5. double checked locking/A.java",
    "Question 065_What is Singleton Design Pattern and how it can be implemented/6. double checked locking using volatile",
    "Question 065_What is Singleton Design Pattern and how it can be implemented/6. double checked locking using volatile/A.java",
    "Question 065_What is Singleton Design Pattern and how it can be implemented/7. Bill Pugh Singleton Implementation",
    "Question 065_What is Singleton Design Pattern and how it can be implemented/7. Bill Pugh Singleton Implementation/A.java",
    "Question 066_What are the different ways in which a Singleton Design pattern can break and how to prevent that from happening",
    "Question 066_What are the different ways in which a Singleton Design pattern can break and how to prevent that from happening/1. Reflection",
    "Question 066_What are the different ways in which a Singleton Design pattern can break and how to prevent that from happening/1. Reflection/Break Singleton",
    "Question 066_What are the different ways in which a Singleton Design pattern can break and how to prevent that from happening/1. Reflection/Break Singleton/A.java",
    "Question 066_What are the different ways in which a Singleton Design pattern can break and how to prevent that from happening/1. Reflection/Break Singleton/Test.java",
    "Question 066_What are the different ways in which a Singleton Design pattern can break and how to prevent that from happening/1. Reflection/Prevent Singleton_Solution 1",
    "Question 066_What are the different ways in which a Singleton Design pattern can break and how to prevent that from happening/1. Reflection/Prevent Singleton_Solution 1/A.java",
    "Question 066_What are the different ways in which a Singleton Design pattern can break and how to prevent that from happening/1. Reflection/Prevent Singleton_Solution 2",
    "Question 066_What are the different ways in which a Singleton Design pattern can break and how to prevent that from happening/1. Reflection/Prevent Singleton_Solution 2/SingletonEnum.java",
    "Question 066_What are the different ways in which a Singleton Design pattern can break and how to prevent that from happening/1. Reflection/Prevent Singleton_Solution 2/TestSingletonEnum.java",
    "Question 066_What are the different ways in which a Singleton Design pattern can break and how to prevent that from happening/2. Serialization and Deserialization",
    "Question 066_What are the different ways in which a Singleton Design pattern can break and how to prevent that from happening/2. Serialization and Deserialization/Break Singleton",
    "Question 066_What are the different ways in which a Singleton Design pattern can break and how to prevent that from happening/2. Serialization and Deserialization/Break Singleton/A.java",
    "Question 066_What are the different ways in which a Singleton Design pattern can break and how to prevent that from happening/2. Serialization and Deserialization/Break Singleton/Test.java",
    "Question 066_What are the different ways in which a Singleton Design pattern can break and how to prevent that from happening/2. Serialization and Deserialization/Prevent Singleton",
    "Question 066_What are the different ways in which a Singleton Design pattern can break and how to prevent that from happening/2. Serialization and Deserialization/Prevent Singleton/A.java",
    "Question 066_What are the different ways in which a Singleton Design pattern can break and how to prevent that from happening/2. Serialization and Deserialization/Prevent Singleton/Test.java",
    "Question 066_What are the different ways in which a Singleton Design pattern can break and how to prevent that from happening/3. Cloning",
    "Question 066_What are the different ways in which a Singleton Design pattern can break and how to prevent that from happening/3. Cloning/Break Singleton",
    "Question 066_What are the different ways in which a Singleton Design pattern can break and how to prevent that from happening/3. Cloning/Break Singleton/TestSingleton.java",
    "Question 066_What are the different ways in which a Singleton Design pattern can break and how to prevent that from happening/3. Cloning/Prevent Singleton by Returning Same Instance",
    "Question 066_What are the different ways in which a Singleton Design pattern can break and how to prevent that from happening/3. Cloning/Prevent Singleton by Returning Same Instance/TestSingleton.java",
    "Question 066_What are the different ways in which a Singleton Design pattern can break and how to prevent that from happening/3. Cloning/Prevent Singleton by Throwing Exception",
    "Question 066_What are the different ways in which a Singleton Design pattern can break and how to prevent that from happening/3. Cloning/Prevent Singleton by Throwing Exception/TestSingleton.java",
    "Question 070_Explain Generics in Java",
    "Question 070_Explain Generics in Java/GenericDemo.java",
    "Question 072_How to create a thread in Java",
    "Question 072_How to create a thread in Java/By extending Thread class",
    "Question 072_How to create a thread in Java/By extending Thread class/ThreadTest.java",
    "Question 072_How to create a thread in Java/By implementing Runnable interface",
    "Question 072_How to create a thread in Java/By implementing Runnable interface/ThreadTest.java",
    "Question 077_Why wait(), notify(), notifyAll() methods must be called from synchronized block",
    "Question 077_Why wait(), notify(), notifyAll() methods must be called from synchronized block/WaitDemo.java",
    "Question 079_join() method",
    "Question 079_join() method/JoinMethodDemo.java",
    "Question 082_What is static synchronization",
    "Question 082_What is static synchronization/Program with static synchronization",
    "Question 082_What is static synchronization/Program with static synchronization/SynchronizationDemo.java",
    "Question 082_What is static synchronization/Program without static synchronization",
    "Question 082_What is static synchronization/Program without static synchronization/SynchronizationDemo.java",
    "Question 083_What will be output of below program where one synchronized method is calling another synchronized method",
    "Question 083_What will be output of below program where one synchronized method is calling another synchronized method/Test.java",
    "Question 084_Programs related to synchronized and static synchronized methods",
    "Question 084_Programs related to synchronized and static synchronized methods/Scenario 1",
    "Question 084_Programs related to synchronized and static synchronized methods/Scenario 1/Test.java",
    "Question 084_Programs related to synchronized and static synchronized methods/Scenario 2",
    "Question 084_Programs related to synchronized and static synchronized methods/Scenario 2/Test.java",
    "Question 085_What is Callable interface",
    "Question 085_What is Callable interface/CallableDemo.java",
    "Question 091_What is Count down latch in Java",
    "Question 091_What is Count down latch in Java/CountDownLatchDemo.java",
    "Question 092_What is Cyclic Barrier",
    "Question 092_What is Cyclic Barrier/CyclicBarrierDemo.java",
    "Question 093_Atomic classes",
    "Question 093_Atomic classes/Single thread accessing mutable variable",
    "Question 093_Atomic classes/Single thread accessing mutable variable/AtomicDemo.java",
    "Question 093_Atomic classes/Using Atomic class",
    "Question 093_Atomic classes/Using Atomic class/AtomicDemo.java",
    "Question 099_How add() method works internally or How the ArrayList grows at runtime",
    "Question 099_How add() method works internally or How the ArrayList grows at runtime/TestArrayList.java",
    "Question 100_How to make an ArrayList as Immutable",
    "Question 100_How to make an ArrayList as Immutable/Program 1",
    "Question 100_How to make an ArrayList as Immutable/Program 1/TestArrayList.java",
    "Question 100_How to make an ArrayList as Immutable/Program 2",
    "Question 100_How to make an ArrayList as Immutable/Program 2/TestArrayList.java",
    "Question 104_Explain the internal working of put() and get() methods of HashMap class and discuss HashMap collisions",
    "Question 104_Explain the internal working of put() and get() methods of HashMap class and discuss HashMap collisions/Program showing that hashmap\u2019s capacity gets doubled",
    "Question 104_Explain the internal working of put() and get() methods of HashMap class and discuss HashMap collisions/Program showing that hashmap\u2019s capacity gets doubled/TestHashMap.java",
    "Question 104_Explain the internal working of put() and get() methods of HashMap class and discuss HashMap collisions/Program showing the default capacity",
    "Question 104_Explain the internal working of put() and get() methods of HashMap class and discuss HashMap collisions/Program showing the default capacity/TestHashMap.java",
    "Question 105_equals and hashCode method scenarios in HashMap when the key is a custom class",
    "Question 105_equals and hashCode method scenarios in HashMap when the key is a custom class/Scenario 1",
    "Question 105_equals and hashCode method scenarios in HashMap when the key is a custom class/Scenario 1/Employee.java",
    "Question 105_equals and hashCode method scenarios in HashMap when the key is a custom class/Scenario 1/TestHashMap.java",
    "Question 105_equals and hashCode method scenarios in HashMap when the key is a custom class/Scenario 2",
    "Question 105_equals and hashCode method scenarios in HashMap when the key is a custom class/Scenario 2/Employee.java",
    "Question 105_equals and hashCode method scenarios in HashMap when the key is a custom class/Scenario 2/TestHashMap.java",
    "Question 105_equals and hashCode method scenarios in HashMap when the key is a custom class/Scenario 3",
    "Question 105_equals and hashCode method scenarios in HashMap when the key is a custom class/Scenario 3/Employee.java",
    "Question 105_equals and hashCode method scenarios in HashMap when the key is a custom class/Scenario 3/TestHashMap.java",
    "Question 105_equals and hashCode method scenarios in HashMap when the key is a custom class/Scenario 4",
    "Question 105_equals and hashCode method scenarios in HashMap when the key is a custom class/Scenario 4/Employee.java",
    "Question 105_equals and hashCode method scenarios in HashMap when the key is a custom class/Scenario 4/TestHashMap.java",
    "Question 109_Explain Java\u2019s TreeMap",
    "Question 109_Explain Java\u2019s TreeMap/Program 1",
    "Question 109_Explain Java\u2019s TreeMap/Program 1/TestTreeMap.java",
    "Question 109_Explain Java\u2019s TreeMap/Program 2",
    "Question 109_Explain Java\u2019s TreeMap/Program 2/TestTreeMap.java",
    "Question 109_Explain Java\u2019s TreeMap/Program 3",
    "Question 109_Explain Java\u2019s TreeMap/Program 3/TestTreeMap.java",
    "Question 109_Explain Java\u2019s TreeMap/Program 4",
    "Question 109_Explain Java\u2019s TreeMap/Program 4/TestTreeMap.java",
    "Question 111_Difference between fail-safe and fail-fast iterators",
    "Question 111_Difference between fail-safe and fail-fast iterators/Fail-fast iterator programs",
    "Question 111_Difference between fail-safe and fail-fast iterators/Fail-fast iterator programs/Program 1",
    "Question 111_Difference between fail-safe and fail-fast iterators/Fail-fast iterator programs/Program 1/FailFastIteratorTest.java",
    "Question 111_Difference between fail-safe and fail-fast iterators/Fail-fast iterator programs/Program 2",
    "Question 111_Difference between fail-safe and fail-fast iterators/Fail-fast iterator programs/Program 2/FailFastIteratorTest.java",
    "Question 111_Difference between fail-safe and fail-fast iterators/Fail-safe iterator programs",
    "Question 111_Difference between fail-safe and fail-fast iterators/Fail-safe iterator programs/Program 1",
    "Question 111_Difference between fail-safe and fail-fast iterators/Fail-safe iterator programs/Program 1/FailSafeIteratorTest.java",
    "Question 111_Difference between fail-safe and fail-fast iterators/Fail-safe iterator programs/Program 2",
    "Question 111_Difference between fail-safe and fail-fast iterators/Fail-safe iterator programs/Program 2/FailSafeIteratorTest.java",
    "Question 201_Find first 3 largest numbers in an array",
    "Question 201_Find first 3 largest numbers in an array/FindLargestThree.java",
    "Question 202_Move all negative numbers at the beginning from an array and all positive numbers at the end",
    "Question 202_Move all negative numbers at the beginning from an array and all positive numbers at the end/Original sequence is maintained",
    "Question 202_Move all negative numbers at the beginning from an array and all positive numbers at the end/Original sequence is maintained/RearrangeArrayElements.java",
    "Question 202_Move all negative numbers at the beginning from an array and all positive numbers at the end/Original sequence is not maintained",
    "Question 202_Move all negative numbers at the beginning from an array and all positive numbers at the end/Original sequence is not maintained/RearrangeArrayElements.java"
]