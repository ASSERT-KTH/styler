<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<module name="Checker">
     <!--<module name="SuppressionFilter">
        <property name="file" value="${suppressionsFile}"/>
    </module>-->

    <module name="StrictDuplicateCode">
        <property name="severity" value="error"/>
        <property name="min" value="25"/>
    </module>

    <module name="FileLength">
        <property name="severity" value="warning"/>
        <property name="max" value="500"/>
    </module>

    <module name="FileLength">
        <property name="severity" value="error"/>
        <property name="max" value="2000"/>
    </module>

    <module name="SuppressionCommentFilter"/>

    <module name="TreeWalker">

        <!--
        !________________________________________________________________________________________
        !
        !     N A M I N G   C O N V E N T I O N S
        !________________________________________________________________________________________
        !-->
        <!-- Checks for class type parameter name naming conventions. !-->
        <!-- See http://checkstyle.sourceforge.net/config_naming.html#ClassTypeParameterName !-->

		<!--<module name="ClassTypeParameterName">
            <property name="format" value="^[A-Z]$"/>
        </module>!-->

        <!-- Checks for constant name naming conventions. !-->
        <!-- See http://checkstyle.sf.net/config_naming.html !-->
        <module name="ConstantName">
            <property name="format" value="^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"/>
            <property name="applyToPublic" value="true"/>
            <property name="applyToProtected" value="true"/>
            <property name="applyToPackage" value="true"/>
            <property name="applyToPrivate" value="true"/>
        </module>

        <!-- Checks for local final variable name naming conventions. !-->
        <!-- See http://checkstyle.sf.net/config_naming.html !-->
        <module name="LocalFinalVariableName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <property name="tokens" value="VARIABLE_DEF, PARAMETER_DEF"/>
        </module>

        <!-- Checks for local variable name naming conventions. !-->
        <!-- See http://checkstyle.sf.net/config_naming.html !-->
        <module name="LocalVariableName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <property name="tokens" value="PARAMETER_DEF"/>
        </module>

        <!-- Checks for member variable name naming conventions. !-->
        <!-- See http://checkstyle.sf.net/config_naming.html !-->
        <module name="MemberName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <property name="applyToPublic" value="true"/>
            <property name="applyToProtected" value="true"/>
            <property name="applyToPackage" value="true"/>
            <property name="applyToPrivate" value="true"/>
        </module>

        <!-- Checks for method name naming conventions. !-->
        <!-- See http://checkstyle.sf.net/config_naming.html !-->
        <module name="MethodName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
        </module>

        <!-- Checks for method type parameter name naming conventions. !-->
        <!-- See http://checkstyle.sourceforge.net/config_naming.html#MethodTypeParameterName !-->
        <module name="MethodTypeParameterName">
            <property name="format" value="^[A-Z]$"/>
        </module>

        <!-- Checks for package name naming conventions. !-->
        <!-- See http://checkstyle.sf.net/config_naming.html !-->
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-zA-Z_][a-zA-Z0-9_]*)*$"/>
        </module>

        <!-- Checks for parameter name naming conventions. !-->
        <!-- See http://checkstyle.sf.net/config_naming.html !-->
        <module name="ParameterName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
        </module>

        <!-- Checks for static variable name naming conventions. !-->
        <!-- See http://checkstyle.sf.net/config_naming.html !-->
       <!--  <module name="StaticVariableName">
            <property name="format" value="^s[A-Z][a-zA-Z0-9]*$"/>
            <property name="applyToPublic" value="true"/>
            <property name="applyToProtected" value="true"/>
            <property name="applyToPackage" value="true"/>
            <property name="applyToPrivate" value="true"/>
        </module>-->

        <!-- Checks for type name naming conventions. !-->
        <!-- See http://checkstyle.sf.net/config_naming.html !-->
        <module name="TypeName">
            <property name="format" value="^[A-Z][a-zA-Z0-9]*$"/>
            <property name="tokens" value="CLASS_DEF"/>
            <property name="applyToPublic" value="true"/>
            <property name="applyToProtected" value="true"/>
            <property name="applyToPackage" value="true"/>
            <property name="applyToPrivate" value="true"/>
        </module>

        <!-- Checks for Interface name naming conventions. !-->
        <!-- See http://checkstyle.sf.net/config_naming.html !-->
        <module name="TypeName">
            <property name="format" value="[A-Z][a-zA-Z0-9]*$"/>
            <property name="tokens" value="INTERFACE_DEF"/>
            <property name="applyToPublic" value="true"/>
            <property name="applyToProtected" value="true"/>
            <property name="applyToPackage" value="true"/>
            <property name="applyToPrivate" value="true"/>
        </module>

        <module name="FileContentsHolder"/>

        <module name="EmptyBlock">
            <property name="severity" value="error"/>
        </module>

        <module name="LeftCurly">
            <property name="severity" value="error"/>
        </module>

        <module name="NeedBraces">
            <property name="severity" value="error"/>
        </module>

        <module name="RightCurly">
            <property name="severity" value="error"/>
        </module>

        <module name="AvoidNestedBlocks">
            <property name="severity" value="info"/>
        </module>

        <module name="VisibilityModifier">
            <property name="severity" value="error"/>
        </module>

        <module name="InterfaceIsType">
            <property name="severity" value="warning"/>
            <property name="allowMarkerInterfaces" value="true"/>
        </module>

        <!--<module name="DoubleCheckedLocking">
            <property name="severity" value="error"/>
        </module> -->

        <module name="EmptyStatement">
            <property name="severity" value="error"/>
        </module>

        <module name="EqualsHashCode">
            <property name="severity" value="warning"/>
        </module>

        <module name="EqualsAvoidNull">
            <property name="severity" value="error"/>
        </module>

        <module name="MagicNumber">
            <property name="severity" value="error"/>
            <property name="ignoreHashCodeMethod" value="true"/>
            <property name="ignoreAnnotation" value="true"/>
        </module>

        <module name="HiddenField">
            <property name="severity" value="error"/>
            <property name="ignoreSetter" value="true"/>
            <property name="ignoreConstructorParameter" value="true"/>
        </module>

        <module name="IllegalInstantiation">
            <property name="severity" value="error"/>
            <property name="classes" value="java.lang.Boolean"/>
        </module>

        <module name="InnerAssignment">
            <property name="severity" value="error"/>
        </module>

        <module name="MissingSwitchDefault">
            <property name="severity" value="warning"/>
        </module>

        <module name="SimplifyBooleanExpression">
            <property name="severity" value="warning"/>
        </module>

        <module name="SimplifyBooleanReturn">
            <property name="severity" value="warning"/>
        </module>

        <module name="StringLiteralEquality">
            <property name="severity" value="error"/>
        </module>

        <module name="AvoidStarImport">
            <property name="severity" value="error"/>
            <property name="allowStaticMemberImports" value="true"/>
        </module>

        <!-- Deprecated packages. java.sql, org.jboss, apache.catalina, org.postgresql-->
        <module name="IllegalImport">
            <property name="severity" value="error"/>
            <property name="illegalPkgs"
                      value="com.sun, org.jboss, org.apache.catalina, org.postgresql"/>
        </module>

        <module name="RedundantImport">
            <property name="severity" value="error"/>
        </module>

        <!--
        Order imports as follows:
            com
            junit
            net
            org
            java
            javax
        -->
        <module name="ImportOrder">
            <property name="groups" value="com, junit, net, org, java, javax"/>
            <property name="ordered" value="true"/>
            <property name="option" value="top"/>
        </module>

        <module name="UnusedImports">
            <property name="severity" value="error"/>
        </module>

        <module name="JavadocType">
            <property name="severity" value="error"/>
            <property name="scope" value="package"/>
        </module>

        <module name="JavadocMethod">
            <property name="severity" value="error"/>
            <property name="scope" value="package"/>
            <property name="allowMissingPropertyJavadoc" value="true"/>
            <property name="logLoadErrors" value="true"/>
            <property name="suppressLoadErrors" value="true"/>
        </module>

        <module name="JavadocVariable">
            <property name="severity" value="ignore"/>
        </module>

        <module name="JavadocStyle">
            <property name="severity" value="error"/>
        </module>

        <module name="BooleanExpressionComplexity">
            <property name="severity" value="warning"/>
            <property name="max" value="5"/>
        </module>

        <module name="UpperEll">
            <property name="severity" value="error"/>
        </module>

        <module name="ArrayTypeStyle">
            <property name="severity" value="error"/>
        </module>

        <!-- <module name="Indentation">
            <property name="severity" value="error"/>
        </module> -->

        <module name="LocalFinalVariableName">
            <property name="severity" value="error"/>
        </module>

        <module name="LocalVariableName">
            <property name="severity" value="error"/>
        </module>

        <module name="MemberName">
            <property name="severity" value="error"/>
        </module>

        <module name="MethodName">
            <property name="severity" value="error"/>
        </module>

        <module name="PackageName">
            <property name="severity" value="error"/>
        </module>

        <module name="ParameterName">
            <property name="severity" value="error"/>
        </module>

        <module name="StaticVariableName">
            <property name="severity" value="error"/>
        </module>

        <module name="TypeName">
            <property name="severity" value="error"/>
        </module>

        <module name="ExecutableStatementCount">
            <property name="severity" value="warning"/>
            <property name="max" value="40"/>
        </module>

        <module name="LineLength">
            <property name="severity" value="error"/>
            <property name="max" value="120"/>
            <property name="ignorePattern" value="^import"/>
        </module>

        <module name="MethodLength">
            <property name="severity" value="warning"/>
            <property name="max" value="60"/>
            <property name="countEmpty" value="false"/>
        </module>

        <module name="AnonInnerLength">
            <property name="severity" value="warning"/>
        </module>

        <module name="MethodParamPad">
            <property name="severity" value="error"/>
        </module>

        <module name="NoWhitespaceAfter">
            <property name="severity" value="error"/>
            <property name="tokens" value="DOT"/>
            <property name="allowLineBreaks" value="true"/>
        </module>

        <module name="NoWhitespaceBefore">
            <property name="severity" value="error"/>
            <property name="tokens" value="DOT"/>
            <property name="allowLineBreaks" value="true"/>
        </module>

        <module name="WhitespaceAfter"/>

        <module name="ParenPad">
            <property name="severity" value="error"/>
        </module>

        <module name="TypecastParenPad">
            <property name="severity" value="error"/>
        </module>

        <!--System.{out|err} (use slf4j instead)-->
        <module name="Regexp">
            <property name="format" value="System\.out\.*"/>
            <property name="illegalPattern" value="true"/>
            <property name="ignoreComments" value="true"/>
            <property name="message" value="System.{out|err} - use slf4j instead"/>
        </module>

        <!--Throwable.printStackTrace() (use Commons Lang ExceptionUtils instead)-->
        <module name="Regexp">
            <property name="format" value="\.printStackTrace"/>
            <property name="illegalPattern" value="true"/>
            <property name="ignoreComments" value="true"/>
            <property name="message"
                      value="Throwable.printStackTrace() - use Commons Lang ExceptionUtils instead"/>
        </module>

        <!-- java.sql.Date (use Joda Time instead if possible; otherwise use java.util.Date)-->
        <module name="Regexp">
            <property name="format" value="java\.sql\.Date"/>
            <property name="illegalPattern" value="true"/>
            <property name="ignoreComments" value="true"/>
            <property name="message"
                      value="java.sql.Date - Use Joda Time instead if possible; otherwise use java.util.Date"/>
        </module>

        <!--java.lang.Thread and friends (use java.util.concurrent instead)-->
        <module name="Regexp">
            <property name="format" value="java\.lang\.Thread"/>
            <property name="illegalPattern" value="true"/>
            <property name="ignoreComments" value="true"/>
            <property name="message" value="java.lang.Thread - use java.util.concurrent instead"/>
        </module>

        <!--java.util.Hashtable (use java.util.concurrent.ConcurrentHashMap instead)-->
        <module name="Regexp">
            <property name="format" value="java\.util\.Hashtable"/>
            <property name="severity" value="warning"/>
            <property name="illegalPattern" value="true"/>
            <property name="ignoreComments" value="true"/>
            <property name="message"
                      value="java.util.Hashtable - use java.util.concurrent.ConcurrentHashMap instead"/>
        </module>

        <!--Checks whether there are more than one space between words-->
        <module name="Regexp">
            <property name="format" value="[A-Za-z0-9]+[ \t]{2,}[A-Za-z0-9]+"/>
            <property name="illegalPattern" value="true"/>
            <property name="ignoreComments" value="true"/>
            <property name="message" value="Redundant space separator"/>
        </module>

    </module>

</module>