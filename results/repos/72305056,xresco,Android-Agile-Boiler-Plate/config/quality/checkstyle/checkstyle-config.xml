<?xml version="1.0"?><!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<module name="Checker">

    <property name="charset" value="UTF-8" />
    <property name="severity" value="error" />

    <module name="FileTabCharacter">
        <property name="eachLine" value="true" />
    </module>

    <module name="TreeWalker">

        <!-- Imports -->

        <!--
        prevents redundant imports
        -->
        <module name="RedundantImport">
            <property name="severity" value="error" />
        </module>

        <!--
        Prevents these kind of imports:
        import java.util.concurrent.*
        -->
        <module name="AvoidStarImport">
            <property name="severity" value="error" />
        </module>

        <!-- General Code Style -->

        <!--
         Prevents having empty blocks:
         This applies to the following blocks: try, finally, if, else, switch, catch
         -->
        <module name="EmptyBlock">
            <property name="option" value="TEXT" />
            <property name="tokens"
                value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH, LITERAL_CATCH" />
        </module>

        <!--<module name="EmptyCatchBlock">-->
        <!--<property name="exceptionVariableName" value="expected" />-->
        <!--</module>-->

        <!--
        This rule enforces that the left curly brace  must always be on the end of the line.
        -->
        <module name="LeftCurly">
            <property name="option" value="eol" />
        </module>

        <!--
        The right brace must be alone on the line for the specified values
        -->
        <module name="RightCurly">
            <property name="option" value="alone" />
            <property name="tokens"
                value=" METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO, STATIC_INIT, INSTANCE_INIT" />
        </module>

        <!--
        The right brace should be on the same line as the next part of a multi-block statement
        (one that directly contains multiple blocks: if/else-if/else or try/catch/finally).
        -->
        <module name="RightCurly">
            <property name="option" value="same" />
        </module>

        <!--
        Checks the style of array type definitions.
        Some like Java style: public static void main(String[] args) and some like C style: public static void main(String args[])
        This rule enforces Java style
        -->
        <module name="ArrayTypeStyle" />

        <!--
        Checks that the order of modifiers conforms to the suggestions in the Java Language specification, sections 8.1.1, 8.3.1, 8.4.3 and 9.4. The correct order is:
            public
            protected
            private
            abstract
            default
            static
            final
            transient
            volatile
            synchronized
            native
            strictfp
        -->
        <module name="ModifierOrder" />


        <module name="Indentation">
            <property name="basicOffset" value="4" />
            <property name="braceAdjustment" value="0" />
            <property name="caseIndent" value="4" />
            <property name="throwsIndent" value="4" />
            <property name="lineWrappingIndentation" value="8" />
            <property name="arrayInitIndent" value="2" />
        </module>

        <!-- White Space -->

        <!--
        Checks that the whitespace around the Generic tokens (angle brackets) "<" and ">" are correct to the typical convention.
        The module define the error message that will appear to the developer when the GenericWhitespace rule is broken
        -->
        <module name="GenericWhitespace">
            <message key="ws.followed"
                value="GenericWhitespace ''{0}'' is followed by whitespace." />
            <message key="ws.preceded"
                value="GenericWhitespace ''{0}'' is preceded with whitespace." />
            <message key="ws.illegalFollow"
                value="GenericWhitespace ''{0}'' should followed by whitespace." />
            <message key="ws.notPreceded"
                value="GenericWhitespace ''{0}'' is not preceded with whitespace." />
        </module>

        <!--
        Checks that a token is surrounded by whitespace. Empty constructor, method, class, enum, interface, loop bodies (blocks), lambdas of the form
        -->
        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true" />
            <property name="allowEmptyMethods" value="false" />
            <property name="allowEmptyTypes" value="false" />
            <property name="allowEmptyLoops" value="false" />
            <message key="ws.notFollowed"
                value="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks may only be represented as '{}' when not part of a multi-block statement (4.1.3)" />
            <message key="ws.notPreceded"
                value="WhitespaceAround: ''{0}'' is not preceded with whitespace." />
            <property name="severity" value="error" />
        </module>


        <!--
        Checks that a token is followed by whitespace.
        tokens are:
        COMMA => ,
        SEMI  => ;
        TYPECAST => ()
        -->
        <module name="WhitespaceAfter">
            <property name="tokens" value="COMMA, SEMI, TYPECAST" />
        </module>

        <!--
        Checks that there is no whitespace before a token. More specifically, it checks that it is not preceded with whitespace,
        -->
        <module name="NoWhitespaceBefore">
            <property name="tokens" value="SEMI, DOT, POST_DEC, POST_INC" />
            <property name="allowLineBreaks" value="true" />
        </module>


        <!--
        Checks that there is no whitespace after a token. More specifically, it checks that it is not followed by whitespace, or
        (if linebreaks are allowed) all characters on the line after are whitespace. To forbid linebreaks after a token,
        set property allowLineBreaks to false.
        The rule applies to the following tokens:
        BNOT => ~
        DEC => minus minus operator
        DOT => .
        INC => ++
        LNOT => !
        UNARY_MINUS => -
        UNARY_PLUS => +
        -->
        <module name="NoWhitespaceAfter">
            <property name="tokens" value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS" />
            <property name="allowLineBreaks" value="true" />
        </module>

        <!-- Naming -->

        <!--
        This part defines all the rules that applies to the naming conventions
        -->
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$" />
            <message key="name.invalidPattern"
                value="Package name ''{0}'' must match pattern ''{1}''." />
        </module>

        <module name="MethodName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9_]*$" />
            <message key="name.invalidPattern"
                value="Method name ''{0}'' must match pattern ''{1}''." />
        </module>

        <module name="TypeName">
            <message key="name.invalidPattern"
                value="Type name ''{0}'' must match pattern ''{1}''." />
        </module>

        <module name="MemberName">
            <property name="applyToPublic" value="false" />
            <property name="applyToPackage" value="false" />
            <property name="applyToProtected" value="false" />
            <property name="format" value="^m[A-Z][a-z0-9][a-zA-Z0-9]*$" />
            <message key="name.invalidPattern"
                value="Member name ''{0}'' must match pattern ''{1}''." />
        </module>

        <module name="ParameterName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$" />
            <message key="name.invalidPattern"
                value="Parameter name ''{0}'' must match pattern ''{1}''." />
        </module>

        <module name="LocalVariableName">
            <property name="tokens" value="VARIABLE_DEF" />
            <property name="format" value="^[a-z][a-zA-Z0-9]*$" />
            <property name="allowOneCharVarInForLoop" value="true" />
            <message key="name.invalidPattern"
                value="Local variable name ''{0}'' must match pattern ''{1}''." />
        </module>

        <module name="ClassTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)" />
            <message key="name.invalidPattern"
                value="Class type name ''{0}'' must match pattern ''{1}''." />
        </module>

        <module name="MethodTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)" />
            <message key="name.invalidPattern"
                value="Method type name ''{0}'' must match pattern ''{1}''." />
        </module>

    </module>

</module>