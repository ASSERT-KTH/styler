<?xml version="1.0"?>
   <!--
/*
 * Copyright 2001-2007 Exoplatform SAS
 */
 -->

<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.2//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">

   <!--

      This configuration file is taken from the maven-checkstyle-plugin distribution (sun_checks.xml) and configured for
      Exoplatform specific code style. Checkstyle configuration that checks the sun coding conventions from: - the Java
      Language Specification at http://java.sun.com/docs/books/jls/second_edition/html/index.html - the Sun Code
      Conventions at http://java.sun.com/docs/codeconv/ - the Javadoc guidelines at
      http://java.sun.com/j2se/javadoc/writingdoccomments/index.html - the JDK Api documentation
      http://java.sun.com/j2se/docs/api/index.html - some best practices Checkstyle is very configurable. Be sure to
      read the documentation at http://checkstyle.sf.net (or in your downloaded distribution). Most Checks are
      configurable, be sure to consult the documentation. To completely disable a check, just comment it out or delete
      it from the file. Finally, it is worth reading the documentation.
   -->

<module name="Checker">

   <!-- Checks that a package.html file exists for each package.     -->
   <!-- See http://checkstyle.sf.net/config_javadoc.html#PackageHtml -->
   <!--    <module name="PackageHtml"/>-->

   <!-- Checks whether files end with a new line.                        -->
   <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
   <module name="NewlineAtEndOfFile">
      <property name="lineSeparator" value="lf" />
      <property name="severity" value="warning" />
   </module>

   <!-- Checks that property files contain the same keys.         -->
   <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
   <module name="Translation" />


   <module name="TreeWalker">

      <property name="cacheFile" value="${checkstyle.cache.file}" />

      <!-- Checks for Javadoc comments.                     -->
      <!-- See http://checkstyle.sf.net/config_javadoc.html -->
      <module name="JavadocMethod" />
      <module name="JavadocType" />
      <module name="JavadocVariable" />
      <module name="JavadocStyle" />


      <!-- Checks for Naming Conventions.                  -->
      <!-- See http://checkstyle.sf.net/config_naming.html -->
      <module name="ConstantName" />
      <module name="LocalFinalVariableName" />
      <module name="LocalVariableName" />
      <module name="MemberName" />
      <module name="MethodName" />
      <module name="PackageName" />
      <module name="ParameterName" />
      <module name="StaticVariableName" />
      <module name="TypeName" />


      <!-- Checks for Headers                                -->
      <!-- See http://checkstyle.sf.net/config_header.html   -->
      <!-- <module name="Header">                            -->
      <!-- The follow property value demonstrates the ability     -->
      <!-- to have access to ANT properties. In this case it uses -->
      <!-- the ${basedir} property to allow Checkstyle to be run  -->
      <!-- from any directory within a project. See property      -->
      <!-- expansion,                                             -->
      <!-- http://checkstyle.sf.net/config.html#properties        -->
      <!-- <property                                              -->
      <!--     name="headerFile"                                  -->
      <!--     value="${basedir}/java.header"/>                   -->
      <!-- </module> -->

      <!-- Following interprets the header file as regular expressions. -->
      <!--		<module name="RegexpHeader">-->
      <!--			<property name="headerFile" value="${checkstyle.header.file}" />-->
      <!--			<property name="severity" value="error"/>-->
      <!--		</module>-->


      <!-- Checks for imports                              -->
      <!-- See http://checkstyle.sf.net/config_import.html -->
      <module name="AvoidStarImport" />
      <module name="IllegalImport" /> <!-- defaults to sun.* packages -->
      <module name="RedundantImport" />
      <module name="UnusedImports" />


      <!-- Checks for Size Violations.                    -->
      <!-- See http://checkstyle.sf.net/config_sizes.html -->
      <module name="LineLength">
         <property name="max" value="120" />
         <property name="severity" value="warning" />
      </module>
      <module name="MethodLength" />
      <module name="ParameterNumber">
         <property name="max" value="10" />
      </module>


      <!-- Checks for whitespace                               -->
      <!-- See http://checkstyle.sf.net/config_whitespace.html -->
      <module name="EmptyForIteratorPad" />
      <module name="MethodParamPad" />

      <module name="WhitespaceAfter">
         <property name="tokens" value="COMMA, SEMI" />
         <property name="severity" value="warning" />
      </module>

      <module name="NoWhitespaceAfter">
         <property name="severity" value="warning" />
      </module>
      <module name="NoWhitespaceBefore">
         <property name="severity" value="warning" />
      </module>
      <module name="OperatorWrap" />
      <module name="ParenPad">
         <property name="severity" value="warning" />
      </module>
      <module name="TypecastParenPad" />

      <module name="WhitespaceAround">
         <property name="tokens"
            value="ASSIGN,BAND,BAND_ASSIGN,BOR,BOR_ASSIGN,BSR,BSR_ASSIGN,BXOR,BXOR_ASSIGN,COLON,
          DIV,DIV_ASSIGN,EQUAL,GE,LAND,LCURLY,LE,LITERAL_ASSERT,LITERAL_CATCH,LITERAL_DO,LITERAL_ELSE,LITERAL_FINALLY,
          LITERAL_FOR,LITERAL_IF,LITERAL_RETURN,LITERAL_SYNCHRONIZED,LITERAL_TRY,LITERAL_WHILE,LOR,MINUS,MINUS_ASSIGN,
          MOD,MOD_ASSIGN,NOT_EQUAL,PLUS,PLUS_ASSIGN,QUESTION,RCURLY,SL,SLIST,SL_ASSIGN,SR,SR_ASSIGN,STAR,STAR_ASSIGN" />
      </module>

      <!-- Modifier Checks                                    -->
      <!-- See http://checkstyle.sf.net/config_modifiers.html -->
      <module name="ModifierOrder" />
      <!--      <module name="RedundantModifier" />-->

      <!-- Checks for blocks. You know, those {}'s         -->
      <!-- See http://checkstyle.sf.net/config_blocks.html -->
      <module name="AvoidNestedBlocks" />
      <module name="EmptyBlock">
         <property name="tokens"
            value="LITERAL_DO,LITERAL_ELSE,LITERAL_FINALLY,LITERAL_IF,LITERAL_FOR,LITERAL_TRY,
          LITERAL_WHILE,INSTANCE_INIT,STATIC_INIT" />
      </module>
      <module name="LeftCurly">
         <property name="option" value="nl" />
         <property name="severity" value="warning" />
      </module>
      <!-- module name="NeedBraces"/ -->
      <module name="RightCurly">
         <property name="option" value="alone" />
         <property name="severity" value="warning" />
      </module>


      <!-- Checks for common coding problems               -->
      <!-- See http://checkstyle.sf.net/config_coding.html -->
      <!--module name="AvoidInlineConditionals"/-->
      <module name="DoubleCheckedLocking" />    <!-- MY FAVOURITE -->
      <module name="EmptyStatement" />
      <module name="EqualsHashCode" />
      <module name="HiddenField">
         <property name="ignoreConstructorParameter" value="true" />
         <property name="ignoreSetter" value="true" />
      </module>
      <module name="IllegalInstantiation" />
      <module name="InnerAssignment" />
      <module name="MagicNumber" />
      <module name="MissingSwitchDefault" />
      <module name="RedundantThrows">
         <property name="allowUnchecked" value="true" />
         <property name="allowSubclasses" value="true" />
      </module>

      <module name="SimplifyBooleanExpression" />
      <module name="SimplifyBooleanReturn" />

      <!-- Checks for class design                         -->
      <!-- See http://checkstyle.sf.net/config_design.html -->
      <!--module name="DesignForExtension"/-->
      <module name="FinalClass" />
      <module name="HideUtilityClassConstructor" />
      <module name="InterfaceIsType" />
      <module name="VisibilityModifier">
         <property name="packageAllowed" value="true" />
         <property name="protectedAllowed" value="true" />
      </module>


      <!-- Miscellaneous other checks.                   -->
      <!-- See http://checkstyle.sf.net/config_misc.html -->
      <module name="ArrayTypeStyle" />
      <!--module name="FinalParameters"/-->
      <!--
         <module name="GenericIllegalRegexp"> <property name="format" value="\s+$"/> <property name="message"
         value="Line has trailing spaces."/> </module>
      -->
      <module name="TodoComment" />
      <module name="UpperEll">
         <property name="severity" value="warning" />
      </module>

      <module name="ImportOrder">
         <property name="groups" value="org,java,javax" />
         <property name="ordered" value="true" />
         <property name="separated" value="true" />
         <property name="severity" value="warning" />
      </module>

      <module name="Indentation">
         <property name="basicOffset" value="3" />
         <property name="caseIndent" value="3" />
         <property name="braceAdjustment" value="0" />
         <property name="severity" value="warning" />
      </module>

   </module>

</module>
