<?xml version="1.0"?>
<!--

       Copyright (c) 2019 CK.

       Licensed under the Apache License, Version 2.0 (the "License");
       you may not use this file except in compliance with the License.
       You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

       Unless required by applicable law or agreed to in writing, software
       distributed under the License is distributed on an "AS IS" BASIS,
       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       See the License for the specific language governing permissions and
       limitations under the License.

-->
<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.2//EN"
        "https://checkstyle.org/dtds/configuration_1_3.dtd">

<!--

  Checkstyle configuration that checks the sun coding conventions from:

    - the Java Language Specification at
      http://java.sun.com/docs/books/jls/second_edition/html/index.html

    - the Sun Code Conventions at http://java.sun.com/docs/codeconv/

    - the Javadoc guidelines at
      http://java.sun.com/j2se/javadoc/writingdoccomments/index.html

    - the JDK Api documentation http://java.sun.com/j2se/docs/api/index.html

    - some best practices

  Checkstyle is very configurable. Be sure to read the documentation at
  http://checkstyle.sf.net (or in your downloaded distribution).

  Most Checks are configurable, be sure to consult the documentation.

  To completely disable a check, just comment it out or delete it from the file.

  Finally, it is worth reading the documentation.

-->

<module name="Checker">
    <property name="charset" value="UTF-8"/>

    <!-- Checks whether files end with a new line.                        -->
    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
    <!-- module name="NewlineAtEndOfFile"/-->

    <!-- Checks that property files contain the same keys.         -->
    <!-- See http://checkstyle.sf.net/config_misc.html#Translation 检查**.properties配置文件 是否有相同的key -->
    <module name="Translation"/>

	<!-- 检查文件的长度（行） default max=2000 -->
	<module name="FileLength"/>

    <module name="SuppressWarningsFilter" />

    <module name="TreeWalker">
        <module name="SuppressWarningsHolder" />

        <!-- Checks for Naming Conventions.                  -->
        <!-- See http://checkstyle.sf.net/config_naming.html -->
        <module name="ConstantName">
            <property name="format" value="^log(ger)?|[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"/>
        </module>
        <module name="LocalFinalVariableName"/>
        <module name="LocalVariableName"/>
        <module name="MemberName"/>
        <module name="MethodName"/>
        <module name="PackageName"/>
        <module name="ParameterName"/>
        <module name="StaticVariableName"/>
        <module name="TypeName"/>


        <!-- Checks for Headers                                -->
        <!-- See http://checkstyle.sf.net/config_header.html   -->
        <!-- <module name="Header">                            -->
        <!-- The follow property value demonstrates the ability     -->
        <!-- to have access to ANT properties. In this case it uses -->
        <!-- the ${basedir} property to allow Checkstyle to be run  -->
        <!-- from any directory within a project. See property      -->
        <!-- expansion,                                             -->
        <!-- http://checkstyle.sf.net/config.html#properties        -->
        <!-- <property                                              -->
        <!--     name="headerFile"                                  -->
        <!--     value="${basedir}/java.header"/>                   -->
        <!-- </module> -->

        <!-- Following interprets the header file as regular expressions. -->
        <!-- <module name="RegexpHeader"/>                                -->


        <!-- Checks for imports                              -->
        <!-- See http://checkstyle.sf.net/config_import.html -->
		<!-- 必须导入类的完整路径，即不能使用*导入所需的类 -->
		<!--module name="AvoidStarImport"/-->
		<!-- 检查是否从非法的包中导入了类 illegalPkgs: 定义非法的包名称-->
		<module name="IllegalImport"/>
        <!-- defaults to sun.* packages -->
		<!-- 检查是否导入了不必显示导入的类-->
		<module name="RedundantImport"/>
		<!-- 检查是否导入的包没有使用-->
		<module name="UnusedImports"/>


        <!-- Checks for Size Violations.                    -->
        <!-- See http://checkstyle.sf.net/config_sizes.html -->
		<!-- 每行字符数 -->
		<!--<module name="LineLength">-->
			<!--<property name="max" value="120"/>-->
		<!--</module>-->
		<!-- Checks for long methods and constructors. max default 150行. -->
		<module name="MethodLength"/>
		<!-- Checks the number of parameters of a method or constructor. max default 7个. -->
		<module name="ParameterNumber">
            <property name="max" value="10"/>
        </module>

        <!-- Checks for whitespace                               -->
        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
        <module name="EmptyForIteratorPad"/>
        <module name="MethodParamPad"/>
        <module name="NoWhitespaceBefore"/>
        <module name="OperatorWrap">
           <property name="tokens" value="QUESTION, COLON, EQUAL, NOT_EQUAL, DIV, MINUS, STAR, MOD, SR, BSR, GE, GT, SL, LE, LT, BXOR, BOR, LOR, BAND, LAND, TYPE_EXTENSION_AND, LITERAL_INSTANCEOF"/>
        </module>
        <module name="ParenPad"/>
        <module name="TypecastParenPad"/>
        <module name="WhitespaceAfter"/>
        <!--module name="WhitespaceAround"/-->


        <!-- Modifier Checks                                    -->
        <!-- See http://checkstyle.sf.net/config_modifiers.html -->
		<!-- ModifierOrder 检查修饰符的顺序，默认是 public,protected,private,abstract,static,final,transient,volatile,synchronized,native -->
		<module name="ModifierOrder"/>
		<!-- 检查是否有多余的修饰符，例如：接口中的方法不必使用public、abstract修饰  -->
        <module name="RedundantModifier"/>


        <!-- Checks for blocks. You know, those {}'s         -->
        <!-- See http://checkstyle.sf.net/config_blocks.html -->
        <module name="AvoidNestedBlocks">
            <property name="allowInSwitchCase" value="true"/>
        </module>
        <module name="EmptyBlock"/>
		<!--option: 定义左大括号'{'显示位置，eol在同一行显示，nl在下一行显示
			maxLineLength: 大括号'{'所在行行最多容纳的字符数
			tokens: 该属性适用的类型，例：CLASS_DEF,INTERFACE_DEF,METHOD_DEF,CTOR_DEF -->
		<module name="LeftCurly"/>
		<!-- NeedBraces 检查是否应该使用括号的地方没有加括号 tokens: 定义检查的类型 -->
		<module name="NeedBraces">
            <property name="tokens" value=" LITERAL_DO,LITERAL_FOR,LITERAL_WHILE"/>
        </module>
		<!-- Checks the placement of right curly braces ('}') for  else, try, and catch tokens. The policy to verify is specified using property option.
			 option: 右大括号是否单独一行显示
			 tokens: 定义检查的类型  -->
		<module name="RightCurly"/>


        <!-- Checks for common coding problems               -->
        <!-- See http://checkstyle.sf.net/config_coding.html -->
        <module name="ArrayTrailingComma"/>
        <!--<module name="AvoidInlineConditionals"/>-->
        <module name="CovariantEquals"/>
        <!-- MY FAVOURITE -->
        <module name="EmptyStatement"/>
		<!-- 检查在重写了equals方法后是否重写了hashCode方法 -->
		<module name="EqualsHashCode"/>
        <module name="EqualsAvoidNull"/>
        <!--module name="HiddenField"/-->
		<!--  Checks for illegal instantiations where a factory method is preferred.
      Rationale: Depending on the project, for some classes it might be preferable to create instances through factory methods rather than calling the constructor.
      A simple example is the java.lang.Boolean class. In order to save memory and CPU cycles, it is preferable to use the predefined constants TRUE and FALSE. Constructor invocations should be replaced by calls to Boolean.valueOf().
      Some extremely performance sensitive projects may require the use of factory methods for other classes as well, to enforce the usage of number caches or object pools. -->
		<module name="IllegalInstantiation"/>
        <module name="IllegalThrows"/>
        <!--<module name="InnerAssignment"/>-->
		<!-- 每一行只能定义一个变量 -->
        <module name="MultipleVariableDeclarations"/>
        <!-- Checks that there are no "magic numbers", where a magic number is a numeric literal that is not defined as a constant. By default, -1, 0, 1, and 2 are not considered to be magic numbers.
        	module name="MagicNumber"/-->
		<!-- Checks for overly complicated boolean expressions. Currently finds code like if (b == true), b || true, !false, etc.
			   检查boolean值是否冗余的地方
			   Rationale: Complex boolean logic makes code hard to understand and maintain. -->
		<module name="SimplifyBooleanExpression"/>
		<!-- Checks for overly complicated boolean return statements. For example the following code
		   检查是否存在过度复杂的boolean返回值
		   if (valid())
			  return false;
		   else
			  return true;
		   could be written as
			  return !valid();
		   The Idea for this Check has been shamelessly stolen from the equivalent PMD rule. -->
		<module name="SimplifyBooleanReturn"/>
		<!--- 字符串比较必须使用 equals() -->
		<module name="StringLiteralEquality"/>
		<!-- for嵌套语句个数 最多4层 -->
        <module name="NestedForDepth">
           <property name="max" value="2"/>
        </module>
		<!-- if-else嵌套语句个数 最多4层 -->
        <module name="NestedIfDepth">
           <property name="max" value="3"/>
        </module>
		<!-- try-catch 嵌套语句个数 -->
        <module name="NestedTryDepth"/>
        <module name="NoClone"/>
        <module name="NoFinalizer"/>
        <module name="OneStatementPerLine"/>
        <module name="IllegalCatch">
           <property name="illegalClassNames" value="java.lang.RuntimeException"/>
        </module>
		<!--检查switch中case后是否加入了跳出语句，例如：return、break、throw、continue -->
        <module name="FallThrough"/>
        <module name="UnnecessaryParentheses"/>
        <!--module name="FinalLocalVariable"/-->

        <!-- Checks for class design                         -->
        <!-- See http://checkstyle.sf.net/config_design.html -->
        <!--module name="DesignForExtension"/-->
		<!-- Checks that a class which has only private constructors is declared as final.只有私有构造器的类必须声明为final-->
		<module name="FinalClass"/>
        <!-- Make sure that utility classes (classes that contain only static methods or fields in their API) do not have a public constructor.
			   确保Utils类（只提供static方法和属性的类）没有public构造器。
			   Rationale: Instantiating utility classes does not make sense. Hence the constructors should either be private or (if you want to allow subclassing) protected. A common mistake is forgetting to hide the default constructor.
			   If you make the constructor protected you may want to consider the following constructor implementation technique to disallow instantiating subclasses:
			   public class StringUtils // not final to allow subclassing
			   {
				   protected StringUtils() {
					   throw new UnsupportedOperationException(); // prevents calls from subclass
				   }
				   public static int count(char c, String s) {
					   // ...
				   }
			   }
        module name="HideUtilityClassConstructor"/-->
		<!--  Checks visibility of class members. Only static final members may be public; other class members must be private unless property protectedAllowed or packageAllowed is set.
		   检查class成员属性可见性。只有static final 修饰的成员是可以public的。其他的成员属性必需是private的，除非属性protectedAllowed或者packageAllowed设置了true.
		   Public members are not flagged if the name matches the public member regular expression (contains "^serialVersionUID$" by default). Note: Checkstyle 2 used to include "^f[A-Z][a-zA-Z0-9]*$" in the default pattern to allow CMP for EJB 1.1 with the default settings. With EJB 2.0 it is not longer necessary to have public access for persistent fields, hence the default has been changed.
		   Rationale: Enforce encapsulation. 强制封装 -->
		<module name="VisibilityModifier">
          <property name="packageAllowed" value="true"/>
          <property name="protectedAllowed" value="true"/>
        </module>

        <!-- Miscellaneous other checks.                   -->
        <!-- See http://checkstyle.sf.net/config_misc.html -->
		<!-- Checks the style of array type definitions. Some like Java-style: public static void main(String[] args) and some like C-style: public static void main(String args[])
       		检查再定义数组时，采用java风格还是c风格，例如：int[] num是java风格，int num[]是c风格。默认是java风格-->
		<module name="ArrayTypeStyle"/>
        <module name="Regexp">
            <property name="format" value="System\.(out)|(err)\.print(ln)?\("/>
            <property name="illegalPattern" value="true"/>
        </module>
        <module name="Regexp">
            <property name="format" value="System\.exit"/>
            <property name="illegalPattern" value="true"/>
        </module>
        <module name="Regexp">
            <property name="format" value="\.printStacktrace"/>
            <property name="illegalPattern" value="true"/>
        </module>

        <!--module name="FinalParameters"/-->
        <!--module name="GenericIllegalRegexp">
            <property name="format" value="\s+$"/>
            <property name="message" value="Line has trailing spaces."/>
        </module-->
        <!-- A check for TODO: comments. Actually it is a generic regular expression matcher on Java comments. To check for other patterns in Java comments, set property format.
       		检查是否存在TODO（待处理） TODO是javaIDE自动生成的。一般代码写完后要去掉。
        	module name="TodoComment"/-->
		<!--  Checks that long constants are defined with an upper ell. That is ' L' and not 'l'. This is in accordance to the Java Language Specification,  Section 3.10.1.
		  检查是否在long类型是否定义了大写的L.字母小写l和数字1（一）很相似。
		  looks a lot like 1. -->
		<module name="UpperEll"/>

	<module name="BooleanExpressionComplexity"/>
    </module>

	<!-- 过滤忽略属性
		<suppressions>
		  <suppress checks="FileLength"
					files="JCache.java|RedissonMapCache.java"/>
		  <suppress checks="NestedTryDepth"
					files="JCache.java"
					lines="785-845"/>
		</suppressions>
	-->
	<!--
    <module name="SuppressionFilter">
        <property name="file" value="suppressions.xml"/>
        <property name="optional" value="false"/>
    </module> -->

</module>
