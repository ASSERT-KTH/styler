<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2016.  Joe
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~    http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">
<module name="Checker">
    <module name="FileLength"/>
    <module name="FileTabCharacter"/>

    <!--<module name="SuppressionFilter">-->
    <!--<property name="file" value="${checkStyleConfigDir}/checkstyle_suppressions.xml"/>-->
    <!--</module>-->

    <!-- Trailing spaces -->
    <module name="RegexpSingleline">
        <property name="format" value="\s+$"/>
        <property name="message" value="Line has trailing spaces."/>
    </module>

    <!-- Ensure trailling newline for compatibility -->
    <module name="NewlineAtEndOfFile">
        <!--error: File does not end with a newline-->
        <property name="severity" value="ignore"/>
        <property name="lineSeparator" value="lf"/>
    </module>

    <!-- Space after 'for' and 'if' -->
    <module name="RegexpSingleline">
        <property name="format" value="^\s*(for|if)\b[^ ]"/>
        <property name="message" value="Space needed before opening parenthesis."/>
    </module>

    <!-- For each spacing -->
    <module name="RegexpSingleline">
        <property name="format" value="^\s*for \(.*?([^ ]:|:[^ ])"/>
        <property name="message" value="Space needed around ':' character."/>
    </module>

    <module name="TreeWalker">
        <!-- Checks for uncommented main() methods (debugging leftovers). -->
        <!-- Checks that long constants are defined with an upper ell. -->
        <!-- See http://checkstyle.sourceforge.net/config_misc.html#UpperEll -->
        <module name="UpperEll"/>

        <!-- Checks the style of array type definitions. -->
        <!-- See http://checkstyle.sourceforge.net/config_misc.html#ArrayTypeStyle -->
        <module name="ArrayTypeStyle"/>

        <!-- Checks that the outer type name and the file name match. -->
        <!-- See http://checkstyle.sourceforge.net/config_misc.html#OuterTypeFilename -->
        <module name="OuterTypeFilename"/>

        <!-- Validates Javadoc comments to help ensure they are well formed. -->
        <!-- See http://checkstyle.sourceforge.net/config_javadoc.html#JavadocStyle -->
        <module name="JavadocStyle">
            <!--error: First sentence should end with a period.-->
            <property name="checkFirstSentence" value="false"/>
        </module>
        <!-- No need for Javadoc -->
        <module name="JavadocType">
            <property name="severity" value="ignore"/>
        </module>
        <module name="JavadocMethod">
            <property name="severity" value="ignore"/>
        </module>
        <module name="JavadocVariable">
            <property name="severity" value="ignore"/>
        </module>

        <!-- Each of these naming modules validates identifiers for particular
                code elements. -->
        <!-- See http://checkstyle.sourceforge.net/config_naming.html -->
        <module name="ConstantName">
            <property name="format" value="^[A-Z][A-Z0-9\$]*(_[A-Z0-9\$]+)*$"/>
        </module>
        <module name="LocalFinalVariableName"/>
        <module name="LocalVariableName"/>
        <module name="MemberName">
            <property name="format" value="^[a-z][a-zA-Z0-9_\$]*$"/>
        </module>
        <module name="MethodName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*(_[a-zA-Z0-9]+)*$"/>
        </module>
        <module name="PackageName"/>
        <module name="ParameterName"/>
        <module name="StaticVariableName">
            <property name="format" value="(^[A-Z0-9_]{0,29}$)"/>
        </module>
        <module name="TypeName"/>

        <module name="TrailingComment"/>

        <!-- Checks for imports. -->
        <!-- See http://checkstyle.sourceforge.net/config_imports.html -->
        <module name="AvoidStarImport">
            <property name="excludes" value="java.io,java.net,java.lang.Math"/>
            <property name="allowClassImports" value="false"/>
            <property name="allowStaticMemberImports" value="false"/>
        </module>
        <module name="AvoidStaticImport">
            <property name="excludes"
                      value="java.lang.System.out,java.lang.Math.*,java.lang.annotation.ElementType.*"/>
        </module>

        <module name="RedundantImport"/>
        <module name="UnusedImports"/>
        <!-- Default sun.* packages -->
        <module name="IllegalImport">
            <property name="illegalPkgs" value="sun"/>
            <message key="import.illegal"
                     value="Import from illegal package - {0}. Programs that contain direct calls to the sun.* packages are not 100% Pure Java."/>
        </module>
        <!--&lt;!&ndash; Prevent importing JUnit 3 classes and Assert methods &ndash;&gt;-->
        <!--<module name="IllegalImport">-->
        <!--<property name="illegalPkgs" value="junit"/>-->
        <!--<message key="import.illegal"-->
        <!--value="Import from illegal package - {0}. Tests are written in JUnit 4, use org.junit.* equivalents."/>-->
        <!--</module>-->
        <!--&lt;!&ndash; Prevent importing Mockito matchers directly &ndash;&gt;-->
        <!--<module name="IllegalImport">-->
        <!--<property name="illegalPkgs" value="org.mockito.internal"/>-->
        <!--<message key="import.illegal"-->
        <!--value="Import from illegal package - {0}. Use org.mockito.Matchers to instantiate argument matchers; or org.hamcrest.Matchers for assertThat."/>-->
        <!--</module>-->
        <!--<module name="ImportOrder">-->
        <!-- Checks for out of order import statements. -->

        <!--<property name="sortStaticImportsAlphabetically" value="true"/>-->
        <!--<property name="severity" value="error"/>-->
        <!--<property name="groups" value="*"/>-->
        <!-- This ensures that static imports go first. -->
        <!--<property name="option" value="top"/>-->
        <!--<property name="tokens" value="STATIC_IMPORT, IMPORT"/>-->
        <!--</module>-->

        <!-- Checks for whitespace. -->
        <!-- See http://checkstyle.sourceforge.net/config_whitespace.html -->
        <module name="GenericWhitespace"/>
        <module name="MethodParamPad"/>
        <module name="NoWhitespaceAfter">
            <property name="tokens"
                      value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS"/>
        </module>
        <module name="NoWhitespaceBefore"/>
        <module name="OperatorWrap"/>
        <module name="ParenPad"/>
        <module name="TypecastParenPad"/>
        <module name="WhitespaceAfter"/>
        <module name="WhitespaceAround"/>


        <!-- Modifier Checks. -->
        <!-- See http://checkstyle.sourceforge.net/config_modifier.html -->
        <module name="ModifierOrder"/>

        <!-- Checks for blocks. -->
        <!-- See http://checkstyle.sourceforge.net/config_blocks.html -->
        <module name="AvoidNestedBlocks"/>
        <module name="EmptyBlock">
            <property name="option" value="text"/>
        </module>
        <module name="NeedBraces"/>

        <module name="LeftCurly"/>
        <module name="RightCurly">
            <property name="tokens"
                      value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_ELSE"/>
        </module>

        <!-- Checks for common coding problems. -->
        <!-- See http://checkstyle.sourceforge.net/config_coding.html -->
        <module name="CovariantEquals"/>
        <module name="DefaultComesLast"/>
        <module name="EmptyStatement"/>
        <module name="NoClone"/>
        <module name="NoFinalizer"/>
        <module name="OneStatementPerLine"/>
        <module name="IllegalInstantiation"/>
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>
        <module name="StringLiteralEquality"/>
        <!--<module name="UnnecessaryParentheses"/>-->
        <module name="LineLength">
            <property name="max" value="200"/>
        </module>

        <!-- Checks for class design. -->
        <!-- See http://checkstyle.sourceforge.net/config_design.html -->
        <module name="FinalClass"/>
        <module name="InterfaceIsType"/>

        <!-- 检查在重写了equals方法后是否重写了hashCode方法 -->
        <module name="EqualsHashCode"/>

        <!--检查switch中case后是否加入了跳出语句，例如：return、break、throw、continue -->
        <module name="FallThrough"/>


        <module name="MissingSwitchDefault"/>


    </module>
</module>
