<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
          "-//Puppy Crawl//DTD Check Configuration 1.1//EN"
          "http://www.puppycrawl.com/dtds/configuration_1_1.dtd">

<module name="Checker">
    <!--
     !________________________________________________________________________________________
     !
     !     M I S C E L L A N E O U S
     !________________________________________________________________________________________
     !-->
    <!-- Checks whether files end with a new line.                        !-->
    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile !-->
    <module name="NewlineAtEndOfFile">
        <property name="lineSeparator"  value="system"/>
        <property name="fileExtensions" value="*.*"/>
    </module>

    <!--
     !________________________________________________________________________________________
     !
     !     S I Z E   V I O L A T I O N S
     !________________________________________________________________________________________
     !-->
    <!-- Checks for long source files. !-->
    <!-- See http://checkstyle.sf.net/config_sizes.html !-->
    <module name="FileLength">
        <property name="max"            value="2000"/>
        <property name="fileExtensions" value=""/>
    </module>


    <!--
     !________________________________________________________________________________________
     !
     !     W H I T E S P A C E
     !________________________________________________________________________________________
     !-->
    <!-- Checks that there are no tab characters ('\t') in the source code. !-->
    <!-- See http://checkstyle.sourceforge.net/config_whitespace.html#FileTabCharacter !-->
    <module name="FileTabCharacter">
        <property name="eachLine"       value="false"/>
        <property name="fileExtensions" value=""/>
    </module>

    <module name="TreeWalker">
        <!--
         !________________________________________________________________________________________
         !
         !     A N N O T A T I O N S
         !________________________________________________________________________________________
         !-->
        <!-- This check controls the usage style of annotations. !-->
        <!-- See http://checkstyle.sourceforge.net/config_annotation.html#AnnotationUseStyle !-->
        <module name ="AnnotationUseStyle">
            <property name="elementStyle"       value="compact_no_array"/>
            <property name="closingParens"      value="never"/>
            <property name="trailingArrayComma" value="never"/>
        </module>

        <!-- Verifies that both the java.lang.Deprecated import is present and the @deprecated Javadoc tag is present when either is present. !-->
        <!-- See http://checkstyle.sourceforge.net/config_annotation.html#MissingDeprecated !-->
        <module name="MissingDeprecated"/>

        <!-- Verifies that the java.lang.Override annotation is present when the {@inheritDoc} javadoc tag is present. !-->
        <!-- See http://checkstyle.sourceforge.net/config_annotation.html#MissingOverride !-->
        <!-- Default: OFF !-->
        <module name="MissingOverride"/>

        <!-- This check makes sure that all package annotations are in the package-info.java file. !-->
        <!-- See http://checkstyle.sourceforge.net/config_annotation.html#PackageAnnotation !-->
        <module name="PackageAnnotation"/>

        <!--
         !________________________________________________________________________________________
         !
         !     B L O C K S
         !________________________________________________________________________________________
         !-->
        <!-- Finds nested blocks, i.e. blocks that are used freely in the code. !-->
        <!-- See http://checkstyle.sf.net/config_blocks.html !-->
        <module name="AvoidNestedBlocks">
            <property name="allowInSwitchCase" value="false"/>
        </module>

        <!-- Checks for empty blocks. !-->
        <!-- See http://checkstyle.sf.net/config_blocks.html !-->
        <module name="EmptyBlock">
            <property name="option" value="stmt"/>
            <property name="tokens" value="LITERAL_CATCH, LITERAL_DO,
                                           LITERAL_ELSE, LITERAL_FINALLY, LITERAL_IF, LITERAL_FOR,
                                           LITERAL_TRY, LITERAL_WHILE, INSTANCE_INIT, STATIC_INIT"/>
        </module>

        <!-- Checks for the placement of left curly braces ('{') for code blocks. !-->
        <!-- See http://checkstyle.sf.net/config_blocks.html !-->
        <module name="LeftCurly">
            <property name="option"        value="eol"/>
            <property name="maxLineLength" value="80"/>
            <property name="tokens"        value="CLASS_DEF, CTOR_DEF,
                                                  INTERFACE_DEF, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,
                                                  LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_SWITCH,
                                                  LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE,
                                                  METHOD_DEF"/>
        </module>

        <!-- Checks for braces around code blocks. !-->
        <!-- See http://checkstyle.sf.net/config_blocks.html !-->
        <module name="NeedBraces">
            <property name="tokens" value="LITERAL_DO, LITERAL_ELSE, LITERAL_IF, LITERAL_FOR, LITERAL_WHILE"/>
        </module>

        <!-- Checks the placement of right curly braces ('}') for else, try, and catch tokens. !-->
        <!-- See http://checkstyle.sf.net/config_blocks.html !-->
        <module name="RightCurly">
            <property name="option"          value="same"/>
            <property name="tokens"          value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE"/>
            <property name="shouldStartLine" value="true"/>
        </module>


        <!--
         !________________________________________________________________________________________
         !
         !     C L A S S   D E S I G N
         !________________________________________________________________________________________
         !-->
        <!-- Checks that classes are designed for extension. !-->
        <!-- See http://checkstyle.sf.net/config_design.html !-->
        <!-- Default: OFF
        <module name="DesignForExtension"/>
        !-->

        <!-- Checks that a class which has only private constructors is declared as final. !-->
        <!-- See http://checkstyle.sf.net/config_design.html !-->
        <module name="FinalClass"/>

        <!-- Make sure that utility classes (classes that contain only static methods) do not have a public constructor. !-->
        <!-- See http://checkstyle.sf.net/config_design.html !-->
        <module name="HideUtilityClassConstructor"/>

        <!-- Implements Bloch, Effective Java, Item 17 - Use Interfaces only to define types. !-->
        <!-- See http://checkstyle.sf.net/config_design.html !-->
        <module name="InterfaceIsType">
            <property name="allowMarkerInterfaces" value="true"/>
        </module>

        <!-- Ensures that exceptions (defined as any class name conforming to some regular expression) are immutable. !-->
        <!-- That is, have only final fields. !-->
        <!-- See http://checkstyle.sf.net/config_design.html !-->
        <module name="MutableException">
            <property name="format" value="^.*Exception$|^.*Error$"/>
        </module>

        <!--
         !________________________________________________________________________________________
         !
         !     C O D I N G
         !________________________________________________________________________________________
         !-->
        <!-- Checks that array initialization contains a trailing comma. !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->
        <module name="ArrayTrailingComma"/>

        <!-- Detects inline conditionals. !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->
        <module name="AvoidInlineConditionals"/>

        <!-- Checks that classes that define a covariant equals() method also override method equals(java.lang.Object). !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->
        <module name="CovariantEquals"/>

        <!-- Check that the default is after all the cases in a switch statement. !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->
        <module name="DefaultComesLast"/>

        <!-- Detects empty statements (standalone ;). !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->
        <module name="EmptyStatement"/>

        <!-- Checks that any combination of String literals with optional assignment is on the left side of an equals() comparison. !-->
        <!-- See http://checkstyle.sourceforge.net/config_coding.html#EqualsAvoidNull !-->
        <module name="EqualsAvoidNull"/>

        <!-- Checks that classes that override equals() also override hashCode(). !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->
        <module name="EqualsHashCode"/>

        <!-- Checks if any class or object member explicitly initialized to default for its type value. !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->
        <module name="ExplicitInitialization"/>

        <!-- Checks for fall through in switch statements Finds locations where a case contains Java code ... !-->
        <!-- but lacks a break, return, throw or continue statement. !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->
        <module name="FallThrough">
            <property name="checkLastCaseGroup" value="false"/>
            <property name="reliefPattern"      value="fallthru|falls??through"/>
        </module>

        <!-- Checks that a local variable or a parameter does not shadow a field that is defined in the same class. !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->
        <module name="HiddenField">
            <property name="tokens"                     value="PARAMETER_DEF, VARIABLE_DEF"/>
            <!--
            <property name="ignoreFormat"               value=""/>
            !-->
            <property name="ignoreConstructorParameter" value="true"/>
            <property name="ignoreSetter"               value="true"/>
            <property name="ignoreAbstractMethods"      value="false"/>
        </module>

        <!-- Checks for assignments in subexpressions, such as in String s = Integer.toString(i = 2);. !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->
        <module name="InnerAssignment">
            <property name="tokens" value="ASSIGN, BAND_ASSIGN, BOR_ASSIGN, BSR_ASSIGN, BXOR_ASSIGN,
                                           DIV_ASSIGN, MINUS_ASSIGN, MOD_ASSIGN, PLUS_ASSIGN, SL_ASSIGN,
                                           SR_ASSIGN, STAR_ASSIGN"/>
        </module>

        <!-- Ensures that the setUp(), tearDown()methods are named correctly, have no arguments, !-->
        <!-- return void and are either public or protected. !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->
        <module name="JUnitTestCase"/>

        <!-- Checks that switch statement has "default" clause. !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->
        <module name="MissingSwitchDefault"/>

        <!-- Check for ensuring that for loop control variables are not modified inside the for block. !-->
        <!-- See http://checkstyle.sourceforge.net/config_coding.html#ModifiedControlVariable !-->
        <module name="ModifiedControlVariable"/>

        <!-- Checks that each variable declaration is in its own statement and on its own line. !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->
        <module name="MultipleVariableDeclarations"/>

        <!-- Checks that the clone method is not overridden from the Object class. !-->
        <!-- See http://checkstyle.sourceforge.net/config_coding.html#NoClone !-->
        <module name="NoClone"/>

        <!-- Verifies there are no finalize() methods defined in a class. !-->
        <!-- See http://checkstyle.sourceforge.net/config_coding.html#NoFinalizer !-->
        <module name="NoFinalizer"/>

        <!-- Checks there is only one statement per line. !-->
        <!-- See http://checkstyle.sourceforge.net/config_coding.html#OneStatementPerLine !-->
        <module name="OneStatementPerLine"/>

        <!-- Ensure a class has a package declaration. !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->
        <module name="PackageDeclaration">
            <property name="ignoreDirectoryName" value="false"/>
        </module>

        <!-- Disallow assignment of parameters. !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->
        <module name="ParameterAssignment"/>

        <!-- Checks for overly complicated boolean expressions. !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->
        <module name="SimplifyBooleanExpression"/>

        <!-- Checks for overly complicated boolean return statements. !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->
        <module name="SimplifyBooleanReturn"/>

        <!-- Checks that string literals are not used with == or !=. !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->
        <module name="StringLiteralEquality"/>

        <!-- Checks that an overriding clone() method invokes super.clone(). !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->
        <module name="SuperClone"/>

        <!-- Checks that an overriding finalize() method invokes super.finalize(). !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->
        <module name="SuperFinalize"/>

        <!-- Checks for the use of unnecessary parentheses. !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->
        <module name="UnnecessaryParentheses"/>


        <!--
         !________________________________________________________________________________________
         !
         !     I M P O R T S
         !________________________________________________________________________________________
         !-->
        <!-- Checks that there are no import statements that use the * notation. !-->
        <!-- See http://checkstyle.sf.net/config_import.html !-->
        <module name="AvoidStarImport">
            <property name="excludes"                 value=""/>
            <property name="allowClassImports"        value="false"/>
            <property name="allowStaticMemberImports" value="false"/>
        </module>

        <!-- Checks for imports from a set of illegal packages. !-->
        <!-- See http://checkstyle.sf.net/config_import.html !-->
        <module name="IllegalImport">
            <property name="illegalPkgs" value="sun"/>
        </module>

        <!-- Checks the ordering/grouping of imports. !-->
        <!-- See http://checkstyle.sf.net/config_import.html !-->
        <module name="ImportOrder">
            <property name="option"        value="above"/>
            <property name="groups"        value="java,javax,org,com"/>
            <property name="ordered"       value="true"/>
            <property name="separated"     value="true"/>
            <property name="caseSensitive" value="true"/>
        </module>

        <!-- Checks for redundant import statements. !-->
        <!-- See http://checkstyle.sf.net/config_import.html !-->
        <module name="RedundantImport"/>

        <!-- Checks for unused import statements. !-->
        <!-- See http://checkstyle.sf.net/config_import.html !-->
        <module name="UnusedImports"/>


        <!--
         !________________________________________________________________________________________
         !
         !     J A V A D O C S
         !________________________________________________________________________________________
         !-->
        <!-- Checks to ensure that the javadoc tags exist (if required) !-->
        <!-- See http://checkstyle.sf.net/config_javadoc.html#JavadocMethod !-->
        <module name="JavadocMethod">
            <property name="scope"                        value="protected"/>
            <property name="allowUndeclaredRTE"           value="false"/>
            <property name="allowThrowsTagsForSubclasses" value="false"/>
            <property name="allowMissingParamTags"        value="true"/>
            <property name="allowMissingThrowsTags"       value="true"/>
            <property name="allowMissingReturnTag"        value="false"/>
            <property name="allowMissingJavadoc"          value="true"/>
            <property name="allowMissingPropertyJavadoc"  value="false"/>
            <property name="logLoadErrors"                value="true"/>
            <property name="suppressLoadErrors"           value="false"/>
            <property name="tokens"                       value="METHOD_DEF, CTOR_DEF"/>
        </module>

        <!-- Validates Javadoc comments to help ensure they are well formed. !-->
        <!-- See http://checkstyle.sf.net/config_javadoc.html#JavadocStyle !-->
        <module name="JavadocStyle">
            <property name="scope"               value="protected"/>
            <property name="checkFirstSentence"  value="true"/>
            <property name="checkEmptyJavadoc"   value="false"/>
            <property name="checkHtml"           value="true"/>
            <property name="tokens"              value="INTERFACE_DEF, CLASS_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF"/>
        </module>

        <!-- Checks Javadoc comments for class and interface definitions. !-->
        <!-- See http://checkstyle.sf.net/config_javadoc.html#JavadocType !-->
        <module name="JavadocType">
            <property name="scope"                 value="protected"/>
        </module>

        <!-- Checks that variables have Javadoc comments. !-->
        <!-- See http://checkstyle.sf.net/config_javadoc.html#JavadocVariable !-->
        <module name="JavadocVariable">
            <property name="scope"        value="protected"/>
        </module>

        <!--
         !________________________________________________________________________________________
         !
         !     M I S C E L L A N E O U S
         !________________________________________________________________________________________
         !-->
        <!-- Check that method/constructor parameters are final. !-->
        <!-- See http://checkstyle.sf.net/config_misc.html !-->
        <module name="FinalParameters">
            <property name="tokens" value="METHOD_DEF, CTOR_DEF"/>
        </module>

        <!-- Checks that the outer type name and the file name match. !-->
        <!-- See http://checkstyle.sourceforge.net/config_misc.html#OuterTypeFilename !-->
        <module name="OuterTypeFilename"/>

        <!-- A check for TODO: comments. Actually it is a generic regular expression matcher on Java comments. !-->
        <!-- See http://checkstyle.sf.net/config_misc.html !-->
        <module name="TodoComment">
            <property name="format" value="TODO:"/>
        </module>

        <!-- Checks for uncommented main() methods (debugging leftovers). !-->
        <!-- See http://checkstyle.sf.net/config_misc.html !-->
        <module name="UncommentedMain">
            <property name="excludedClasses" value="Main$"/>
        </module>

        <!-- Checks that long constants are defined with an upper ell. That is 'L' and not 'l'. !-->
        <!-- See http://checkstyle.sf.net/config_misc.html !-->
        <module name="UpperEll"/>

        <!--
         !________________________________________________________________________________________
         !
         !     M O D I F I E R S
         !________________________________________________________________________________________
         !-->
        <!-- Checks that the order of modifiers conforms to the suggestions in the Java Language specification, !-->
        <!-- sections 8.1.1, 8.3.1 and 8.4.3. !-->
        <!-- See http://checkstyle.sf.net/config_modifiers.html !-->
        <module name="ModifierOrder"/>

        <!-- Checks that there are no redundant modifiers. !-->
        <!-- See http://checkstyle.sf.net/config_modifiers.html !-->
        <module name="RedundantModifier">
            <property name="tokens" value="METHOD_DEF, VARIABLE_DEF, ANNOTATION_FIELD_DEF"/>
        </module>

        <!--
         !________________________________________________________________________________________
         !
         !     N A M I N G   C O N V E N T I O N S
         !________________________________________________________________________________________
         !-->
        <!-- Checks for class type parameter name naming conventions. !-->
        <!-- See http://checkstyle.sourceforge.net/config_naming.html#ClassTypeParameterName !-->
        <module name="ClassTypeParameterName">
            <property name="format" value="^[A-Z]$"/>
        </module>

        <!-- Checks for constant name naming conventions. !-->
        <!-- See http://checkstyle.sf.net/config_naming.html !-->
        <module name="ConstantName">
            <property name="format"           value="^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"/>
            <property name="applyToPublic"    value="true"/>
            <property name="applyToProtected" value="true"/>
            <property name="applyToPackage"   value="true"/>
            <property name="applyToPrivate"   value="false"/>
        </module>

        <!-- Checks for local final variable name naming conventions. !-->
        <!-- See http://checkstyle.sf.net/config_naming.html !-->
        <module name="LocalFinalVariableName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <property name="tokens" value="VARIABLE_DEF, PARAMETER_DEF"/>
        </module>

        <!-- Checks for local variable name naming conventions. !-->
        <!-- See http://checkstyle.sf.net/config_naming.html !-->
        <module name="LocalVariableName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <property name="tokens" value="PARAMETER_DEF"/>
        </module>

        <!-- Checks for member variable name naming conventions. !-->
        <!-- See http://checkstyle.sf.net/config_naming.html !-->
        <module name="MemberName">
            <property name="format"           value="^[a-z][a-zA-Z0-9]*$"/>
            <property name="applyToPublic"    value="true"/>
            <property name="applyToProtected" value="true"/>
            <property name="applyToPackage"   value="true"/>
            <property name="applyToPrivate"   value="true"/>
        </module>

        <!-- Checks for method name naming conventions. !-->
        <!-- See http://checkstyle.sf.net/config_naming.html !-->
        <module name="MethodName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
        </module>

        <!-- Checks for method type parameter name naming conventions. !-->
        <!-- See http://checkstyle.sourceforge.net/config_naming.html#MethodTypeParameterName !-->
        <module name="MethodTypeParameterName">
            <property name="format" value="^[A-Z]$"/>
        </module>

        <!-- Checks for package name naming conventions. !-->
        <!-- See http://checkstyle.sf.net/config_naming.html !-->
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-zA-Z_][a-zA-Z0-9_]*)*$"/>
        </module>

        <!-- Checks for parameter name naming conventions. !-->
        <!-- See http://checkstyle.sf.net/config_naming.html !-->
        <module name="ParameterName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
        </module>

        <!-- Checks for static variable name naming conventions. !-->
        <!-- See http://checkstyle.sf.net/config_naming.html !-->
        <module name="StaticVariableName">
            <property name="format"           value="^[a-z][a-zA-Z0-9]*$"/>
            <property name="applyToPublic"    value="true"/>
            <property name="applyToProtected" value="true"/>
            <property name="applyToPackage"   value="true"/>
            <property name="applyToPrivate"   value="true"/>
        </module>

        <!-- Checks for type name naming conventions. !-->
        <!-- See http://checkstyle.sf.net/config_naming.html !-->
        <module name="TypeName">
            <property name="format"           value="^[A-Z][a-zA-Z0-9]*$"/>
            <property name="tokens"           value="CLASS_DEF, INTERFACE_DEF"/>
            <property name="applyToPublic"    value="true"/>
            <property name="applyToProtected" value="true"/>
            <property name="applyToPackage"   value="true"/>
            <property name="applyToPrivate"   value="true"/>
        </module>

        <!--
         !________________________________________________________________________________________
         !
         !     S I Z E   V I O L A T I O N S
         !________________________________________________________________________________________
         !-->
        <!-- Checks for long anonymous inner classes. !-->
        <!-- See http://checkstyle.sf.net/config_sizes.html !-->
        <module name="AnonInnerLength">
            <property name="max" value="20"/>
        </module>

        <!-- Restricts the number of executable statements to a specified limit. !-->
        <!-- See http://checkstyle.sf.net/config_sizes.html !-->
        <module name="ExecutableStatementCount">
            <property name="max"    value="30"/>
            <property name="tokens" value="CTOR_DEF, METHOD_DEF, INSTANCE_INIT, STATIC_INIT"/>
        </module>

        <!-- See http://checkstyle.sf.net/config_sizes.html !-->
        <!-- Checks for long lines. !-->
        <module name="LineLength">
            <property name="ignorePattern" value="^$"/>
            <property name="max"           value="80"/>
        </module>

        <!-- Checks the number of methods declared in each type. This includes the number of each scope !-->
        <!-- (private, package, protected and public) as well as an overall total. !-->
        <!-- See http://checkstyle.sourceforge.net/config_sizes.html#MethodCount !-->
        <module name="MethodCount">
            <property name="maxTotal"     value="100"/>
            <property name="maxPrivate"   value="100"/>
            <property name="maxPackage"   value="100"/>
            <property name="maxProtected" value="100"/>
            <property name="maxPublic"    value="100"/>
        </module>

        <!-- Checks for long methods and constructors. !-->
        <!-- See http://checkstyle.sf.net/config_sizes.html !-->
        <module name="MethodLength">
            <property name="max"        value="150"/>
            <property name="countEmpty" value="true"/>
            <property name="tokens"     value="METHOD_DEF, CTOR_DEF"/>
        </module>

        <!-- Checks for the number of types declared at the outer (or root) level in a file. !-->
        <!-- See http://checkstyle.sourceforge.net/config_sizes.html#OuterTypeNumber !-->
        <module name="OuterTypeNumber">
            <property name="max" value="1"/>
        </module>

        <!-- Checks the number of parameters of a method or constructor. !-->
        <!-- See http://checkstyle.sf.net/config_sizes.html !-->
        <module name="ParameterNumber">
            <property name="max"    value="7"/>
            <property name="tokens" value="METHOD_DEF, CTOR_DEF"/>
        </module>

        <!--
         !________________________________________________________________________________________
         !
         !     W H I T E S P A C E
         !________________________________________________________________________________________
         !-->
        <!-- Checks the padding of an empty for initializer. !-->
        <!-- See http://checkstyle.sf.net/config_whitespace.html !-->
        <module name="EmptyForInitializerPad">
            <property name="option" value="nospace"/>
        </module>

        <!-- Checks the padding of an empty for iterator. !-->
        <!-- See http://checkstyle.sf.net/config_whitespace.html !-->
        <module name="EmptyForIteratorPad">
            <property name="option" value="nospace"/>
        </module>

        <!-- Checks that the whitespace around the Generic tokens < and > is correct to the typical convention. !-->
        <!-- See http://checkstyle.sourceforge.net/config_whitespace.html#GenericWhitespace !-->
        <module name="GenericWhitespace"/>

        <!-- Checks the padding between the identifier of a method definition, !-->
        <!-- constructor definition, method call, or constructor invocation; and the left parenthesis of the parameter list. !-->
        <!-- See http://checkstyle.sf.net/config_whitespace.html !-->
        <module name="MethodParamPad">
            <property name="allowLineBreaks" value="false"/>
            <property name="option"          value="nospace"/>
            <property name="tokens"          value="CTOR_DEF, LITERAL_NEW, METHOD_CALL, METHOD_DEF, SUPER_CTOR_CALL "/>
        </module>

        <!-- Checks that there is no whitespace after a token. !-->
        <!-- See http://checkstyle.sf.net/config_whitespace.html !-->
        <module name="NoWhitespaceAfter">
            <property name="allowLineBreaks" value="true"/>
            <property name="tokens"          value="ARRAY_INIT, BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS"/>
        </module>

        <!-- Checks that there is no whitespace before a token. !-->
        <!-- See http://checkstyle.sf.net/config_whitespace.html !-->
        <module name="NoWhitespaceBefore">
            <property name="allowLineBreaks" value="false"/>
            <property name="tokens"          value="SEMI, POST_DEC, POST_INC"/>
        </module>

        <!-- Checks the policy on how to wrap lines on operators. !-->
        <!-- See http://checkstyle.sf.net/config_whitespace.html !-->
        <module name="OperatorWrap">
            <property name="option" value="nl"/>
            <property name="tokens" value="ASSIGN, BAND, BOR, BSR, BXOR, COLON, DIV,
                                           EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF,
                                           LOR, LT, MINUS, MOD, NOT_EQUAL,
                                           PLUS, QUESTION, SL, SR, STAR"/>
        </module>

        <!-- Checks the policy on the padding of parentheses. !-->
        <!-- See http://checkstyle.sf.net/config_whitespace.html !-->
        <module name="ParenPad">
            <property name="option" value="nospace"/>
            <property name="tokens" value="CTOR_CALL, LPAREN, METHOD_CALL, RPAREN, SUPER_CTOR_CALL"/>
        </module>

        <!-- Checks the policy on the padding of parentheses for typecasts. !-->
        <!-- See http://checkstyle.sf.net/config_whitespace.html !-->
        <module name="TypecastParenPad">
            <property name="option" value="nospace"/>
            <property name="tokens" value="TYPECAST, RPAREN"/>
        </module>

        <!-- Checks that a token is followed by whitespace. !-->
        <!-- See http://checkstyle.sf.net/config_whitespace.html !-->
        <module name="WhitespaceAfter">
            <property name="tokens" value="COMMA, SEMI, TYPECAST"/>
        </module>

        <!-- Checks that a token is surrounded by whitespace. !-->
        <!-- See http://checkstyle.sf.net/config_whitespace.html !-->
        <module name="WhitespaceAround">
            <property name="tokens" value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN,
                                           BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, EQUAL, GE, GT, LAND,
                                           LCURLY, LE, LITERAL_ASSERT, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,
                                           LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,
                                           LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT,
                                           MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN,
                                           QUESTION, RCURLY, SL, SLIST, SL_ASSIGN, SR, SR_ASSIGN, STAR, STAR_ASSIGN"/>
            <property name="allowEmptyConstructors" value="false"/>
            <property name="allowEmptyMethods"      value="false"/>
        </module>
    </module>
</module>
