<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!-- This is a checkstyle configuration file. For descriptions of
what the following rules do, please see the checkstyle configuration
page at http://checkstyle.sourceforge.net/config.html -->

<module name="Checker">

    <module name="FileTabCharacter">
        <!-- Checks that there are no tab characters in the file.
        -->
    </module>

    <module name="FileLength">
        <property name="max" value="2000" />
    </module>

    <module name="RegexpMultiline">
        <property name="format"
              value="System\.(out)|(err)\.print(ln)?\(" />
        <property name="message" value="Output to console is denied. Please use logging API." />
    </module>

    <module name="StrictDuplicateCode">
        <property name="min" value="16" />
        <property name="fileExtensions" value="java" />
    </module>

    <module name="SuppressWithNearbyCommentFilter">
        <property name="commentFormat" value="CHECKSTYLE IGNORE (\w+) NEXT (\d+)" />
        <property name="checkFormat" value="$1" />
        <property name="influenceFormat" value="$2" />
    </module>

    <module name="SuppressionFilter">
        <property name="file" value="checkstyleSuppressions.xml" />
    </module>

    <!-- All Java AST specific tests live under TreeWalker module. -->
    <module name="TreeWalker">
        <!--

        IMPORT CHECKS

        -->

        <module name="AvoidStarImport">
            <property name="severity" value="warning" />
        </module>

        <module name="AvoidStaticImport">
            <property name="severity" value="warning" />
        </module>

        <module name="IllegalImport">
            <property name="illegalPkgs" value="sun, sunw" />
        </module>

        <!-- Checks for redundant import statements. -->
        <module name="RedundantImport" />

        <module name="UnusedImports" />

        <!--verify that both the Deprecated annotation and the deprecated javadoc tag are present when either one is present-->
        <module name="MissingDeprecated" />

        <module name="MissingOverride" />

        <module name="PackageAnnotation" />

        <!--Holds the current file contents for global access when configured as a TreeWalker sub-module-->
        <module name="FileContentsHolder" />

        <!--Empty catch block-->
        <module name="EmptyBlock">
            <property name="option" value="text" />
        </module>

        <module name="LeftCurly">
            <!-- Checks for placement of the left curly brace ('{'). -->
            <property name="option" value="nl"/>
            <property name="tokens" value="CLASS_DEF,INTERFACE_DEF,METHOD_DEF"/>
            <property name="severity" value="warning"/>
        </module>

        <module name="RightCurly">
            <!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on
            the same line. e.g., the following example is fine:
            <pre>
              if {
                ...
              } else
            </pre>
            -->
            <!-- This next example is not fine:
            <pre>
              if {
                ...
              }
              else
            </pre>
            -->
            <property name="option" value="same"/>
            <property name="severity" value="warning"/>
        </module>


        <!-- Checks for braces around if and else blocks -->
        <module name="NeedBraces">
            <property name="severity" value="warning"/>
            <property name="tokens" value="LITERAL_IF, LITERAL_ELSE, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO"/>
        </module>

        <module name="FallThrough">
            <!-- Warn about falling through to the next case statement.  Similar to
            javac -Xlint:fallthrough, but the check is suppressed if a single-line comment
            on the last non-blank line preceding the fallen-into case contains 'fall through' (or
            some other variants which we don't publicized to promote consistency).
            -->
            <property name="reliefPattern"
                      value="fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on"/>
            <property name="severity" value="error"/>
        </module>

        <module name="AvoidNestedBlocks">
         <!--int whichIsWich = 0;
            {
               int whichIsWhich = 2;
            }-->
        </module>

        <!--Checks visibility of class members. Only static final members may be public-->
        <module name="VisibilityModifier" />

        <!--Implements Bloch, Effective Java, Item 17 - Use Interfaces only to define types.-->
        <module name="InterfaceIsType" />

        <!--Ensures that exceptions (defined as any class name conforming to some regular expression)
        are immutable. That is, have only final fields.-->
        <module name="MutableException" />

        <!--Restricts throws statements to a specified count (default = 1)-->
        <module name="ThrowsCount">
            <property name="max" value="3" />
        </module>

        <!--Check nested (internal) classes/interfaces are declared at the bottom
        of the class after all method and field declarations.-->
        <module name="InnerTypeLast" />

        <!--Checks that classes that define a covariant equals() method also override method equals(java.lang.Object)-->
        <module name="CovariantEquals" />

        <!--Detects empty statements (standalone ;).-->
        <module name="EmptyStatement" />

        <!--Checks that any combination of String literals with optional assignment is on the left side of an equals()
        comparison. The check also processes String.equalsIgnoreCase() invocations (which can be suppressed).-->
        <module name="EqualsAvoidNull" />

        <!--Checks that classes that override equals() also override hashCode()-->
        <module name="EqualsHashCode" />

        <module name="IllegalInstantiation">
            <!--Checks for illegal instantiations where a factory method is preferred.
            A simple example is the java.lang.Boolean class. In order to save memory and CPU cycles,
            it is preferable to use the predefined constants TRUE and FALSE. Constructor invocations should be
            replaced by calls to Boolean.valueOf().
            Some extremely performance sensitive projects may require the use of factory methods for other
            classes as well, to enforce the usage of number caches or object pools.-->
            <property name="classes"
                  value="java.lang.Boolean,java.lang.Integer,java.lang.Character,java.lang.Short,java.lang.Double,java.lang.Float,java.lang.Exception,java.lang.RuntimeException,java.lang.Throwable,java.lang.Error" />
        </module>

        <!--Checks that there are no "magic numbers"-->
        <module name="MagicNumber" />

        <!--Checks that switch statement has "default" clause.-->
        <module name="MissingSwitchDefault" />

        <module name="ModifiedControlVariable">
        <!--Check for ensuring that for loop control variables are not modified inside the for block. An example is
            for (int i = 0; i < 1; i++) {
                i++;
            }-->
        </module>

        <!--Checks that string literals are not used with == or !=.-->
        <module name="StringLiteralEquality" />

        <!--Restricts nested for blocks to a specified depth (default = 1).-->
        <module name="NestedForDepth">
            <property name="max" value="2" />
        </module>

        <!--Restricts nested if-else blocks to a specified depth (default = 1).-->
        <module name="NestedIfDepth">
            <property name="max" value="3" />
        </module>

        <!--Restricts nested try blocks to a specified depth (default = 1).-->
        <module name="NestedTryDepth">
            <property name="max" value="2" />
        </module>

        <!--Catching java.lang.Exception, java.lang.Error or java.lang.RuntimeException is almost never acceptable.-->
        <module name="IllegalCatch" />

        <!--This check can be used to ensure that types are not declared to be thrown. Declaring to
        throw java.lang.Error or java.lang.RuntimeException is almost never acceptable.-->
        <module name="IllegalThrows" />

        <module name="DeclarationOrder" >
            <!--1. Class (static) variables. First the public class variables, then the protected, then package level
            (no access modifier), and then the private.
            2. Instance variables. First the public class variables, then the protected, then package level
            (no access modifier), and then the private.
            3. Constructors
            4. Methods-->
        </module>

        <!--Checks if any class or object member explicitly initialized to default for its type value
        (null for object references, zero for numeric types and char and false for boolean.-->
        <module name="ExplicitInitialization" />


        <module name="MultipleStringLiterals">
            <property name="allowedDuplicates" value="3" />
            <property name="ignoreStringsRegexp" value='^("[&apos; \.,]*")$' />
            <property name="ignoreOccurrenceContext" value="ANNOTATION, PLUS" />
        </module>

        <!--

        JAVADOC CHECKS

        -->

        <!-- Checks for Javadoc comments.                     -->
        <!-- See http://checkstyle.sf.net/config_javadoc.html -->
        <module name="JavadocMethod">
            <property name="scope" value="public" />
            <property name="allowMissingPropertyJavadoc" value="true" />
            <property name="allowUndeclaredRTE" value="true" />
            <property name="severity" value="info" />
        </module>

        <module name="JavadocType">
            <property name="scope" value="public" />
            <property name="allowUnknownTags" value="true" />
            <property name="allowMissingParamTags" value="true" />
            <property name="severity" value="warning" />
        </module>

        <module name="JavadocVariable">
            <property name="severity" value="info" />
            <property name="scope" value="package" />
        </module>

        <module name="JavadocStyle">
            <property name="severity" value="warning" />
            <property name="checkEmptyJavadoc" value="true" />
        </module>

        <module name="ClassDataAbstractionCoupling" />

        <module name="ClassFanOutComplexity" />

        <module name="CyclomaticComplexity">
            <property name="max" value="10" />
        </module>

        <module name="NPathComplexity">
            <!--The NPATH metric computes the number of possible execution paths through a function.
            It takes into account the nesting of conditional statements and multi-part boolean expressions-->
            <property name="max" value="150" />
        </module>

        <module name="JavaNCSS">
            <!--Determines complexity of methods, classes and files by counting the Non Commenting Source Statements (NCSS).-->
            <property name="methodMaximum" value="40" />
            <property name="classMaximum" value="1000" />
            <property name="fileMaximum" value="1000" />
        </module>

        <module name="TodoComment">
            <property name="format" value="TODO:" />
            <property name="severity" value="info" />
        </module>

        <!--Checks the style of array type definitions.
        Some like Java-style: public static void main(String[] args) and some like C-style: public static void main(String args[])-->
        <module name="ArrayTypeStyle" />

        <!--Check that method/constructor/catch block parameters are final-->
        <module name="FinalParameters" />

        <!--Checks that the outer type name and the file name match. For example, the class Foo must be in a file named Foo.java.-->
        <module name="OuterTypeFilename" />

        <module name="ModifierOrder">
            <!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and
               8.4.3.  The prescribed order is:
               public, protected, private, abstract, static, final, transient, volatile,
               synchronized, native, strictfp
            -->
        </module>

        <module name="RedundantModifier">
            <!--Checks for redundant modifiers in:

            1.interface and annotation definitions,
            2.the final modifier on methods of final classes, and
            3.inner interface declarations that are declared as static-->
        </module>


        <!--

        NAMING CHECKS

        -->

        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$" />
        </module>

        <module name="TypeNameCheck">
            <!-- Validates static, final fields against the
          expression "^[A-Z][a-zA-Z0-9]*$". -->
            <metadata name="altname" value="TypeName"/>
            <property name="severity" value="warning"/>
        </module>

        <module name="ConstantNameCheck">
            <!-- Validates non-private, static, final fields against the supplied
        public/package final fields "^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$". -->
            <metadata name="altname" value="ConstantName"/>
            <property name="applyToPublic" value="true"/>
            <property name="applyToProtected" value="true"/>
            <property name="applyToPackage" value="true"/>
            <property name="applyToPrivate" value="false"/>
            <property name="format" value="^([A-Z][A-Z0-9]*(_[A-Z0-9]+)*|FLAG_.*)$"/>
            <message key="name.invalidPattern"
                     value="Variable ''{0}'' should be in ALL_CAPS (if it is a constant) or be private (otherwise)."/>
            <property name="severity" value="warning"/>
        </module>

        <module name="StaticVariableNameCheck">
            <!-- Validates static, non-final fields against the supplied
          expression "^[a-z][a-zA-Z0-9]*_?$". -->
            <metadata name="altname" value="StaticVariableName"/>
            <property name="applyToPublic" value="true"/>
            <property name="applyToProtected" value="true"/>
            <property name="applyToPackage" value="true"/>
            <property name="applyToPrivate" value="true"/>
            <property name="format" value="^[a-z][a-zA-Z0-9]*_?$"/>
            <property name="severity" value="warning"/>
        </module>

        <module name="MemberNameCheck">
            <!-- Validates non-static members against the supplied expression. -->
            <metadata name="altname" value="MemberName"/>
            <property name="applyToPublic" value="true"/>
            <property name="applyToProtected" value="true"/>
            <property name="applyToPackage" value="true"/>
            <property name="applyToPrivate" value="true"/>
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <property name="severity" value="warning"/>
        </module>

        <module name="MethodNameCheck">
            <!-- Validates identifiers for method names. -->
            <metadata name="altname" value="MethodName"/>
            <property name="format" value="^[a-z][a-zA-Z0-9]*(_[a-zA-Z0-9]+)*$"/>
            <property name="severity" value="warning"/>
        </module>

        <module name="ParameterName">
            <!-- Validates identifiers for method parameters against the
          expression "^[a-z][a-zA-Z0-9]*$". -->
            <property name="severity" value="warning"/>
        </module>

        <module name="LocalFinalVariableName">
            <!-- Validates identifiers for local final variables against the
          expression "^[a-z][a-zA-Z0-9]*$". -->
            <property name="severity" value="warning"/>
        </module>

        <module name="LocalVariableName">
            <!-- Validates identifiers for local variables against the
          expression "^[a-z][a-zA-Z0-9]*$". -->
            <property name="severity" value="warning"/>
        </module>


        <!--

        LENGTH and CODING CHECKS

        -->

        <module name="LineLength">
            <!-- Checks if a line is too long. -->
            <property name="max" value="140" />
        </module>

        <module name="AnonInnerLength">
            <property name="max" value="60" />
        </module>

        <module name="ParameterNumber" />

        <!--Rationale: It is considered good practice to only define one outer type per file.-->
        <module name="OuterTypeNumber" />

        <module name="MethodCount">
            <!--Checks the number of methods declared in each type. This includes the number of each scope
            (private, package, protected and public) as well as an overall total.-->
            <property name="maxTotal" value="100" />
            <property name="maxPublic" value="40" />
        </module>

        <module name="GenericWhitespace" />

        <module name="EmptyForInitializerPad" />

        <module name="EmptyForIteratorPad" />

        <module name="MethodParamPad" />

        <module name="NoWhitespaceAfter" />

        <module name="NoWhitespaceBefore" />

        <module name="TypecastParenPad" />

        <module name="WhitespaceAfter">
            <property name="tokens" value="TYPECAST" />
        </module>
    </module>

</module>
